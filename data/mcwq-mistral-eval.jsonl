{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n    \"  wd:Q1569487 wdt:P30 wd:Q28368.\",\n    \"  wd:Q1569487 wdt:P106 ?occupation.\",\n    \"  ?occupation wdt:P279* wd:Q33969.\"\n    ]\n}", "normal_query": "SELECT ?screenwriter WHERE { wd:Q1569487 wdt:P30 wd:Q28368. wd:Q1569487 wdt:P106 ?occupation. ?occupation wdt:P279* wd:Q33969. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n    \"  wd:Q103013 wdt:P106 wd:Q69423232.\",\n    \"  BIND(wd:Q103013 AS ?screenwriter)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?screenwriter WHERE { wd:Q103013 wdt:P106 wd:Q69423232. BIND(wd:Q103013 AS ?screenwriter) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q103013"]], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:7910 kg:5262.\",\n            \"?resource kg:7910 kg:9740.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:7910 kg:5262. ?resource kg:7910 kg:9740. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q7690 wdt:P106 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q7690 wdt:P106 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Q392\nwdt:P106 is P106\nwd:Q36834 is Q36834", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q392 wdt:P106 wd:Q36834.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q392 wdt:P106 wd:Q36834. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1692 is Q392\nkg:3308 is P106\nkg:9736 is Q36834", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:3308 kg:1692 .\",\n            \"?resource kg:3308 kg:9736 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:3308 kg:1692 . ?resource kg:3308 kg:9736 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q5669"], ["wd:Q2569"], ["wd:Q5396"], ["wd:Q1585"], ["wd:Q2518"], ["wd:Q3319"], ["wd:Q5105"], ["wd:Q2054"], ["wd:Q6086"], ["wd:Q377"], ["wd:Q4581"], ["wd:Q6379"], ["wd:Q1544"], ["wd:Q1760"], ["wd:Q1993"], ["wd:Q1950"], ["wd:Q307"], ["wd:Q4605"], ["wd:Q3137"], ["wd:Q4715"], ["wd:Q5879"], ["wd:Q1747"], ["wd:Q3647"], ["wd:Q6319"], ["wd:Q1424"], ["wd:Q5074"], ["wd:Q5345"], ["wd:Q1803"], ["wd:Q989"], ["wd:Q6324"], ["wd:Q1324"], ["wd:Q1379"], ["wd:Q2252"], ["wd:Q1496"], ["wd:Q1414"], ["wd:Q2543"], ["wd:Q5071"], ["wd:Q80"], ["wd:Q5803"], ["wd:Q1666"], ["wd:Q5391"], ["wd:Q4510"], ["wd:Q4583"], ["wd:Q4652"], ["wd:Q5348"], ["wd:Q3188"], ["wd:Q4518"], ["wd:Q3345"], ["wd:Q4573"], ["wd:Q5443"], ["wd:Q5458"], ["wd:Q615"], ["wd:Q6060"], ["wd:Q4673"], ["wd:Q1639"], ["wd:Q6351"], ["wd:Q3867"], ["wd:Q4774"], ["wd:Q2116"], ["wd:Q3824"], ["wd:Q4924"], ["wd:Q5169"], ["wd:Q6404"], ["wd:Q1402"], ["wd:Q1409"], ["wd:Q2866"], ["wd:Q4212"], ["wd:Q5170"], ["wd:Q5977"], ["wd:Q1300"], ["wd:Q354"], ["wd:Q2190"], ["wd:Q1081"], ["wd:Q3271"], ["wd:Q3547"], ["wd:Q5409"], ["wd:Q5587"], ["wd:Q3816"], ["wd:Q935"], ["wd:Q3205"], ["wd:Q4538"], ["wd:Q4807"], ["wd:Q181"], ["wd:Q4989"], ["wd:Q4735"], ["wd:Q4578"], ["wd:Q4203"], ["wd:Q1001"], ["wd:Q2327"], ["wd:Q4732"], ["wd:Q5585"], ["wd:Q868"], ["wd:Q4199"], ["wd:Q4289"], ["wd:Q5819"], ["wd:Q2125"], ["wd:Q1453"], ["wd:Q567"], ["wd:Q1523"], ["wd:Q4414"], ["wd:Q1267"], ["wd:Q2737"], ["wd:Q1984"], ["wd:Q1768"], ["wd:Q1802"], ["wd:Q4604"], ["wd:Q1958"], ["wd:Q2593"], ["wd:Q4237"], ["wd:Q368"], ["wd:Q2253"], ["wd:Q5877"], ["wd:Q1755"], ["wd:Q302"], ["wd:L1375130"], ["wd:Q410"], ["wd:Q1705"], ["wd:Q2022"], ["wd:Q3925"], ["wd:Q814"], ["wd:Q5588"], ["wd:Q5827"], ["wd:Q5432"], ["wd:Q1672"], ["wd:Q4119"], ["wd:Q5591"], ["wd:Q3260"], ["wd:Q4934"], ["wd:Q6519"], ["wd:Q1446"], ["wd:Q4489"], ["wd:Q6530"], ["wd:Q186"], ["wd:Q5076"], ["wd:Q6260"], ["wd:Q820"], ["wd:Q1708"], ["wd:Q449"], ["wd:Q360"], ["wd:Q512"], ["wd:Q1769"], ["wd:Q4395"], ["wd:Q4042"], ["wd:Q1260"], ["wd:Q5333"], ["wd:Q1511"], ["wd:Q1922"], ["wd:Q329"], ["wd:Q4612"], ["wd:Q5650"], ["wd:Q1762"], ["wd:Q6195"], ["wd:Q1878"], ["wd:Q4509"], ["wd:Q4448"], ["wd:Q1646"], ["wd:Q1912"], ["wd:Q4881"], ["wd:Q2039"], ["wd:Q855"], ["wd:Q2274"], ["wd:Q1253"], ["wd:Q3099"], ["wd:Q1264"], ["wd:Q2196"], ["wd:Q4738"], ["wd:Q5070"], ["wd:Q3835"], ["wd:Q3910"], ["wd:Q4691"], ["wd:Q4960"], ["wd:Q2006"], ["wd:Q4302"], ["wd:Q5199"], ["wd:Q6515"], ["wd:Q464"], ["wd:Q5553"], ["wd:Q4014"], ["wd:Q1739"], ["wd:Q6722"], ["wd:Q2291"], ["wd:Q4517"], ["wd:Q440"], ["wd:Q6304"], ["wd:Q1325"], ["wd:Q353"], ["wd:Q255"], ["wd:Q1294"], ["wd:Q1791"], ["wd:Q3355"], ["wd:Q4487"], ["wd:Q2602"], ["wd:Q2031"], ["wd:Q5593"], ["wd:Q6310"], ["wd:Q4313"], ["wd:Q1779"], ["wd:Q3324"], ["wd:Q742"], ["wd:Q6527"], ["wd:Q2599"], ["wd:Q3371"], ["wd:Q6198"], ["wd:Q1885"], ["wd:Q6882"], ["wd:Q2573"], ["wd:Q1230"], ["wd:Q1945"], ["wd:Q1317"], ["wd:Q4496"], ["wd:Q296"], ["wd:Q1323"], ["wd:Q1332"], ["wd:Q207"], ["wd:Q1257"], ["wd:Q2757"], ["wd:Q1394"], ["wd:Q2042"], ["wd:Q4012"], ["wd:Q4279"], ["wd:Q4026"], ["wd:Q838"], ["wd:Q839"], ["wd:Q1717"], ["wd:Q4328"], ["wd:Q6091"], ["wd:Q3677"], ["wd:Q6969"], ["wd:Q762"], ["wd:Q1331"], ["wd:Q6300"], ["wd:Q76"], ["wd:Q1753"], ["wd:Q5738"], ["wd:Q2492"], ["wd:Q2597"], ["wd:Q1319"], ["wd:Q1920"], ["wd:Q6512"], ["wd:Q1245"], ["wd:Q4064"], ["wd:Q4124"], ["wd:Q7013"], ["wd:Q2010"], ["wd:Q859"], ["wd:Q2767"], ["wd:Q5664"], ["wd:Q1669"], ["wd:Q3321"], ["wd:Q3996"], ["wd:Q1225"], ["wd:Q5208"], ["wd:Q5670"], ["wd:Q1488"], ["wd:Q157"], ["wd:Q1333"], ["wd:Q765"], ["wd:Q675"], ["wd:Q2172"], ["wd:Q4992"], ["wd:Q3622"], ["wd:Q4145"], ["wd:Q632"], ["wd:Q2594"], ["wd:Q1938"], ["wd:Q5752"], ["wd:Q4914"], ["wd:Q1911"], ["wd:Q3285"], ["wd:Q4038"], ["wd:Q5031"], ["wd:Q2538"], ["wd:Q2563"], ["wd:Q1290"], ["wd:Q4337"], ["wd:Q5284"], ["wd:Q5686"], ["wd:Q1463"], ["wd:Q4701"], ["wd:Q6395"], ["wd:Q1687"], ["wd:Q1241"], ["wd:Q3275"], ["wd:Q5682"], ["wd:Q4500"], ["wd:Q3098"], ["wd:Q4298"], ["wd:Q6050"], ["wd:Q1631"], ["wd:Q1298"], ["wd:Q379"], ["wd:Q1943"], ["wd:Q4227"], ["wd:Q2908"], ["wd:Q607"], ["wd:Q1919"], ["wd:Q4009"], ["wd:Q5264"], ["wd:Q1752"], ["wd:Q4631"], ["wd:Q2339"], ["wd:Q297"], ["wd:Q1962"], ["wd:Q5820"], ["wd:Q1839"], ["wd:Q1936"], ["wd:Q4128"], ["wd:Q5829"], ["wd:Q2791"], ["wd:Q1416"], ["wd:Q206"], ["wd:Q4441"], ["wd:Q6312"], ["wd:Q4235"], ["wd:Q5236"], ["wd:Q1651"], ["wd:Q1228"], ["wd:Q5454"], ["wd:Q3365"], ["wd:Q6694"], ["wd:Q3671"], ["wd:Q3095"], ["wd:Q5652"], ["wd:Q603"], ["wd:Q4926"], ["wd:Q1681"], ["wd:Q6079"], ["wd:Q2808"], ["wd:Q3340"], ["wd:Q4030"], ["wd:Q1665"], ["wd:Q2512"], ["wd:Q557"], ["wd:Q4349"], ["wd:Q1503"], ["wd:Q5364"], ["wd:Q1427"], ["wd:Q949"], ["wd:Q2754"], ["wd:Q5233"], ["wd:Q1652"], ["wd:Q4293"], ["wd:Q444"], ["wd:Q2680"], ["wd:Q4461"], ["wd:Q1023"], ["wd:Q4340"], ["wd:Q1411"], ["wd:Q1691"], ["wd:Q331"], ["wd:Q1771"], ["wd:Q5327"], ["wd:Q4028"], ["wd:Q5649"], ["wd:Q3128"], ["wd:Q4270"], ["wd:Q590"], ["wd:Q1500"], ["wd:Q1271"], ["wd:Q1436"], ["wd:Q1805"], ["wd:Q1124"], ["wd:Q2540"], ["wd:Q3253"], ["wd:Q4723"], ["wd:Q1910"], ["wd:Q1417"], ["wd:Q1797"], ["wd:Q1929"], ["wd:Q5450"], ["wd:Q6419"], ["wd:Q2542"], ["wd:Q624"], ["wd:Q4737"], ["wd:Q1189"], ["wd:Q1937"], ["wd:Q4790"], ["wd:Q4058"], ["wd:Q4039"], ["wd:Q1812"], ["wd:Q2677"], ["wd:Q6297"], ["wd:Q5805"], ["wd:Q6817"], ["wd:Q1224"], ["wd:Q2072"], ["wd:Q5172"], ["wd:Q6026"], ["wd:Q2646"], ["wd:Q303"], ["wd:Q530"], ["wd:Q1528"], ["wd:Q1660"], ["wd:Q1699"], ["wd:Q4761"], ["wd:Q1918"], ["wd:Q5335"], ["wd:Q6541"], ["wd:Q5721"], ["wd:Q504"], ["wd:Q3990"], ["wd:Q4281"], ["wd:Q493"], ["wd:Q1276"], ["wd:Q5659"], ["wd:Q1395"], ["wd:Q2494"], ["wd:Q475"], ["wd:Q651"], ["wd:Q692"], ["wd:Q5679"], ["wd:Q4770"], ["wd:Q5344"], ["wd:Q3121"], ["wd:Q5795"], ["wd:Q3374"], ["wd:Q4671"], ["wd:Q517"], ["wd:Q1403"], ["wd:Q6338"], ["wd:Q7060"], ["wd:Q5015"], ["wd:Q529"], ["wd:Q3166"], ["wd:Q4889"], ["wd:Q4997"], ["wd:Q6013"], ["wd:Q1275"], ["wd:Q5811"], ["wd:Q4616"], ["wd:Q873"], ["wd:Q4318"], ["wd:Q4805"], ["wd:Q5598"], ["wd:Q3350"], ["wd:Q4695"], ["wd:Q3378"], ["wd:Q1433"], ["wd:Q3301"], ["wd:Q4332"], ["wd:Q4490"], ["wd:Q1924"], ["wd:Q4285"], ["wd:Q714"], ["wd:Q1909"], ["wd:Q4025"], ["wd:Q407"], ["wd:Q320"], ["wd:Q3288"], ["wd:Q1732"], ["wd:Q1956"], ["wd:Q845"], ["wd:Q1541"], ["wd:Q937"], ["wd:Q1776"], ["wd:Q849"], ["wd:Q2496"], ["wd:Q3772"], ["wd:Q2607"], ["wd:Q5442"], ["wd:Q6105"], ["wd:Q6701"], ["wd:Q1151"], ["wd:Q815"], ["wd:Q1067"], ["wd:Q1796"], ["wd:Q2259"], ["wd:Q3606"], ["wd:Q2750"], ["wd:Q5356"], ["wd:Q1991"], ["wd:Q609"], ["wd:Q4762"], ["wd:Q5821"], ["wd:Q4690"], ["wd:Q5581"], ["wd:Q3356"], ["wd:Q857"], ["wd:Q4261"], ["wd:Q6391"], ["wd:Q720"], ["wd:Q3773"], ["wd:Q400"], ["wd:Q1425"], ["wd:Q2104"], ["wd:Q892"], ["wd:Q5260"], ["wd:Q5589"], ["wd:Q5594"], ["wd:Q1398"], ["wd:Q2097"], ["wd:Q5661"], ["wd:Q2610"], ["wd:Q576"], ["wd:Q7011"], ["wd:Q636"], ["wd:Q4883"], ["wd:Q1625"], ["wd:Q1788"], ["wd:Q1879"], ["wd:Q1798"], ["wd:Q2071"], ["wd:Q946"], ["wd:Q4036"], ["wd:Q3335"], ["wd:Q4724"], ["wd:Q5599"], ["wd:Q6033"], ["wd:Q260"], ["wd:Q346"], ["wd:Q1043"], ["wd:Q1786"], ["wd:Q4931"], ["wd:Q4273"], ["wd:Q1464"], ["wd:Q5350"], ["wd:Q1429"], ["wd:Q1178"], ["wd:Q5269"], ["wd:Q272"], ["wd:Q5252"], ["wd:Q1047"], ["wd:Q448"], ["wd:Q1662"], ["wd:Q3993"], ["wd:Q6096"], ["wd:Q5631"], ["wd:Q498"], ["wd:Q1927"], ["wd:Q3291"], ["wd:Q4443"], ["wd:Q1145"], ["wd:Q1685"], ["wd:Q5271"], ["wd:Q4323"], ["wd:Q1738"], ["wd:Q6197"], ["wd:Q1233"], ["wd:Q5363"], ["wd:Q600"], ["wd:Q2643"], ["wd:Q1655"], ["wd:Q6100"], ["wd:Q1259"], ["wd:Q2124"], ["wd:Q1750"], ["wd:Q5479"], ["wd:Q4408"], ["wd:Q6538"], ["wd:Q939"], ["wd:Q3090"], ["wd:Q5005"], ["wd:Q6242"], ["wd:Q5080"], ["wd:Q6294"], ["wd:Q5912"], ["wd:Q1777"], ["wd:Q5000"], ["wd:Q1634"], ["wd:Q767"], ["wd:Q5060"], ["wd:Q5197"], ["wd:Q5382"], ["wd:Q4757"], ["wd:Q640"], ["wd:Q5626"], ["wd:Q5280"], ["wd:Q6030"], ["wd:Q555"], ["wd:Q4189"], ["wd:Q3373"], ["wd:Q1677"], ["wd:Q352"], ["wd:Q4137"], ["wd:Q2601"], ["wd:Q5834"], ["wd:Q2582"], ["wd:Q4689"], ["wd:Q5040"], ["wd:Q6279"], ["wd:Q4832"], ["wd:Q913"], ["wd:Q1339"], ["wd:Q4070"], ["wd:Q3924"], ["wd:Q1782"], ["wd:Q687"], ["wd:Q2685"], ["wd:Q4473"], ["wd:Q1659"], ["wd:Q1419"], ["wd:Q4153"], ["wd:Q5360"], ["wd:Q6281"], ["wd:Q1933"], ["wd:Q6399"], ["wd:Q6427"], ["wd:Q3197"], ["wd:Q6733"], ["wd:Q4061"], ["wd:Q4413"], ["wd:Q4742"], ["wd:Q1654"], ["wd:Q1056"], ["wd:Q1804"], ["wd:Q562"], ["wd:Q2604"], ["wd:Q5558"], ["wd:Q4806"], ["wd:Q1322"], ["wd:Q3165"], ["wd:Q4864"], ["wd:Q6107"], ["wd:Q5028"], ["wd:Q1742"], ["wd:Q5073"], ["wd:Q1423"], ["wd:Q905"], ["wd:Q5656"], ["wd:Q4462"], ["wd:Q5683"], ["wd:Q3195"], ["wd:Q3911"], ["wd:Q1604"], ["wd:Q3036"], ["wd:Q4223"], ["wd:Q6215"], ["wd:Q1751"], ["wd:Q3611"], ["wd:Q4501"], ["wd:Q6270"], ["wd:Q1316"], ["wd:Q1242"], ["wd:Q920"], ["wd:Q4245"], ["wd:Q747"], ["wd:Q755"], ["wd:Q3610"], ["wd:Q7031"], ["wd:Q2571"], ["wd:Q2040"], ["wd:Q5258"], ["wd:Q5950"], ["wd:Q1330"], ["wd:Q2632"], ["wd:Q5586"], ["wd:Q1778"], ["wd:Q2153"], ["wd:Q6711"], ["wd:Q5865"], ["wd:Q984"], ["wd:Q862"], ["wd:Q1657"], ["wd:Q1942"], ["wd:Q2330"], ["wd:Q4330"], ["wd:Q5349"], ["wd:Q6682"], ["wd:Q5404"], ["wd:Q1766"], ["wd:Q1935"], ["wd:Q5651"], ["wd:Q6370"], ["wd:Q4731"], ["wd:Q4835"], ["wd:Q5844"], ["wd:Q6386"], ["wd:Q5444"], ["wd:Q1058"], ["wd:Q1638"], ["wd:Q2038"], ["wd:Q5081"], ["wd:Q5816"], ["wd:Q6332"], ["wd:Q4109"], ["wd:Q1405"], ["wd:Q1736"], ["wd:Q1915"], ["wd:Q1931"], ["wd:Q4866"], ["wd:Q5370"], ["wd:Q5220"], ["wd:Q5928"], ["wd:Q5582"], ["wd:Q5104"], ["wd:Q4636"], ["wd:Q1532"], ["wd:Q5658"], ["wd:Q5676"], ["wd:Q4457"], ["wd:Q6353"], ["wd:Q1671"], ["wd:Q5359"], ["wd:Q5685"], ["wd:Q2098"], ["wd:Q835"], ["wd:Q1908"], ["wd:Q2069"], ["wd:Q2831"], ["wd:Q1048"], ["wd:Q1689"], ["wd:Q4725"], ["wd:Q559"], ["wd:Q6348"], ["wd:Q5547"], ["wd:Q392"], ["wd:Q3300"], ["wd:Q1784"], ["wd:Q4547"], ["wd:Q6008"], ["wd:Q5630"], ["wd:Q1035"], ["wd:Q1430"], ["wd:Q1514"], ["wd:Q2516"], ["wd:Q42"], ["wd:Q5673"], ["wd:Q2147"], ["wd:Q409"], ["wd:Q5362"], ["wd:Q5796"], ["wd:Q2732"], ["wd:Q3250"], ["wd:Q4813"], ["wd:Q1894"], ["wd:Q3745"], ["wd:Q1728"], ["wd:Q5807"], ["wd:Q5371"], ["wd:Q4291"], ["wd:Q1683"], ["wd:Q3648"], ["wd:Q192"], ["wd:Q2307"], ["wd:Q5201"], ["wd:Q7068"], ["wd:Q4276"], ["wd:Q1326"], ["wd:Q4491"], ["wd:Q5793"], ["wd:Q5969"], ["wd:Q5376"], ["wd:Q1883"], ["wd:Q1916"], ["wd:Q885"], ["wd:Q5597"], ["wd:Q1413"], ["wd:Q2667"], ["wd:Q2086"], ["wd:Q2263"], ["wd:Q1679"], ["wd:Q1656"], ["wd:Q3722"], ["wd:Q1238"], ["wd:Q5580"], ["wd:Q5812"], ["wd:Q3034"], ["wd:Q5198"], ["wd:Q4891"], ["wd:Q2628"], ["wd:Q6432"], ["wd:Q1668"], ["wd:Q5355"], ["wd:Q1399"], ["wd:Q5346"], ["wd:Q6473"], ["wd:Q4922"], ["wd:Q535"], ["wd:Q853"], ["wd:Q1830"], ["wd:Q1712"], ["wd:Q3295"], ["wd:Q91"], ["wd:Q997"], ["wd:Q1328"], ["wd:Q4240"], ["wd:Q4295"], ["wd:Q5007"], ["wd:Q5117"], ["wd:Q5351"], ["wd:Q301"], ["wd:Q1203"], ["wd:Q5648"], ["wd:Q3153"], ["wd:Q1939"], ["wd:Q4752"], ["wd:Q1320"], ["wd:Q1925"], ["wd:Q4142"], ["wd:Q633"], ["wd:Q5352"], ["wd:Q1789"], ["wd:Q1907"], ["wd:Q1913"], ["wd:Q4590"], ["wd:Q5577"], ["wd:Q4749"], ["wd:Q4836"], ["wd:Q3112"], ["wd:Q7071"], ["wd:Q1618"], ["wd:Q5959"], ["wd:Q4622"], ["wd:Q1235"], ["wd:Q2998"], ["wd:Q4833"], ["wd:Q489"], ["wd:Q1783"], ["wd:Q3101"], ["wd:Q4288"], ["wd:Q1793"], ["wd:Q1051"], ["wd:Q1743"], ["wd:Q1955"], ["wd:Q4506"], ["wd:Q23"], ["wd:Q1426"], ["wd:Q5353"], ["wd:Q5383"], ["wd:Q563"], ["wd:Q2105"], ["wd:Q3048"], ["wd:Q1745"], ["wd:Q1921"], ["wd:Q930"], ["wd:Q4586"], ["wd:Q2001"], ["wd:Q1674"], ["wd:Q5361"], ["wd:Q3044"], ["wd:Q5600"], ["wd:Q2673"], ["wd:Q5603"], ["wd:Q1442"], ["wd:Q1928"], ["wd:Q2567"], ["wd:Q5822"], ["wd:Q2514"], ["wd:Q4786"], ["wd:Q4826"], ["wd:Q1526"], ["wd:Q4488"], ["wd:Q185"], ["wd:Q927"], ["wd:Q1790"], ["wd:Q501"], ["wd:Q1327"], ["wd:Q3234"], ["wd:Q3251"], ["wd:Q619"], ["wd:Q3603"], ["wd:Q3794"], ["wd:Q4350"], ["wd:Q1758"], ["wd:Q4993"], ["wd:Q5998"], ["wd:Q5365"], ["wd:Q6363"], ["wd:Q1149"], ["wd:Q1698"], ["wd:Q1329"], ["wd:Q1917"], ["wd:Q1787"], ["wd:Q5331"], ["wd:Q4896"], ["wd:Q4505"], ["wd:Q579"], ["wd:Q1615"], ["wd:Q4700"], ["wd:Q5009"], ["wd:Q5604"], ["wd:Q5921"], ["wd:Q6078"], ["wd:Q5749"], ["wd:Q1318"], ["wd:Q6714"], ["wd:Q1775"], ["wd:Q3102"], ["wd:Q4599"], ["wd:Q5069"], ["wd:Q1716"], ["wd:Q909"], ["wd:Q6184"], ["wd:Q3008"], ["wd:Q1704"], ["wd:Q6240"], ["wd:Q1401"], ["wd:Q1240"], ["wd:Q1450"], ["wd:Q2570"], ["wd:Q605"], ["wd:Q4232"], ["wd:Q4247"], ["wd:Q2655"], ["wd:Q1064"], ["wd:Q5571"], ["wd:Q4768"], ["wd:Q5878"], ["wd:Q1440"], ["wd:Q848"], ["wd:Q1031"], ["wd:Q3362"], ["wd:Q2709"], ["wd:Q5072"], ["wd:Q1421"], ["wd:Q3239"], ["wd:Q1407"], ["wd:Q4498"], ["wd:Q5618"], ["wd:Q1254"], ["wd:Q1744"], ["wd:Q1512"], ["wd:Q1628"], ["wd:Q882"], ["wd:Q1817"], ["wd:Q4029"], ["wd:Q4876"], ["wd:Q6101"], ["wd:Q1220"], ["wd:Q3281"], ["wd:Q5621"], ["wd:Q1192"], ["wd:Q2551"], ["wd:Q4933"], ["wd:Q4899"], ["wd:Q6357"], ["wd:Q4769"], ["wd:Q558"], ["wd:Q1217"], ["wd:Q335"], ["wd:Q5809"], ["wd:Q6950"], ["wd:Q1268"], ["wd:Q4985"], ["wd:Q1545"], ["wd:Q5368"], ["wd:Q1480"], ["wd:Q5623"], ["wd:Q1589"], ["wd:Q2185"], ["wd:Q5799"], ["wd:Q1940"], ["wd:Q1434"], ["wd:Q4381"], ["wd:Q5380"], ["wd:Q2161"], ["wd:Q326"], ["wd:Q1926"], ["wd:Q5681"], ["wd:Q6367"], ["wd:Q1340"], ["wd:Q5024"], ["wd:Q5254"], ["wd:Q4440"], ["wd:Q502"], ["wd:Q680"], ["wd:Q6003"], ["wd:Q6021"], ["wd:Q1835"], ["wd:Q4214"], ["wd:Q991"], ["wd:Q1381"], ["wd:Q4593"], ["wd:Q5336"], ["wd:Q539"], ["wd:Q5592"], ["wd:Q1868"], ["wd:Q306"], ["wd:Q2129"], ["wd:Q635"], ["wd:Q5354"], ["wd:Q5167"], ["wd:Q6017"], ["wd:Q4271"], ["wd:Q2972"], ["wd:Q1923"], ["wd:Q2530"], ["wd:Q4837"], ["wd:Q4465"], ["wd:Q3247"], ["wd:Q5608"], ["wd:Q1944"], ["wd:Q1934"], ["wd:Q254"], ["wd:Q4452"], ["wd:Q5152"], ["wd:Q4344"], ["wd:Q4991"], ["wd:Q4617"], ["wd:Q1470"], ["wd:Q5617"], ["wd:Q1785"], ["wd:Q926"], ["wd:Q4267"], ["wd:Q4783"], ["wd:Q2566"], ["wd:Q5347"], ["wd:Q1702"], ["wd:Q5447"], ["wd:Q4740"]], "gold": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]]}
{"question": "What did human found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?human WHERE {\",\n      \"?human wdt:P31 wd:Q5.\",\n      \"?human wdt:P112 ?found.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?human WHERE { ?human wdt:P31 wd:Q5. ?human wdt:P112 ?found. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0249 is P112\nkg:7493 is Q5", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n        \"?resource kg:P112 kg:Q5.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P112 kg:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  wd:Q10632 wdt:P31 wd:Q5741089.\",\n    \"  wd:Q10632 wdt:P106 ?occupation.\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P106 ?occupation.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { wd:Q10632 wdt:P31 wd:Q5741089. wd:Q10632 wdt:P106 ?occupation. ?item wdt:P31 wd:Q11424. ?item wdt:P106 ?occupation. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q853 wdt:P1040 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:P1040 kg:Q853 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1040 kg:Q853 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1062947 wdt:P625 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1062947 wdt:P625 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"wd:Q1042294 wdt:P155 ?sequel.\",\n      \"?sequel wdt:P31 wd:Q721.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1042294 wdt:P155 ?sequel. ?sequel wdt:P31 wd:Q721. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:1047 kg:1291.\",\n            \"?resource kg:1047 kg:9162.\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:1047 kg:1291. ?resource kg:1047 kg:9162. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1067294 wdt:P364 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1067294 wdt:P364 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q131593 wdt:P155 ?sequel.\",\n    \"  ?sequel wdt:P31 wd:Q168.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q131593 wdt:P155 ?sequel. ?sequel wdt:P31 wd:Q168. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n        \"  kg:4953 kg:1888 ?resource .\",\n        \"  ?resource kg:1888 kg:5573 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { kg:4953 kg:1888 ?resource . ?resource kg:1888 kg:5573 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q139468 wdt:P25 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q139468 wdt:P25 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q260 wdt:P40 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n    \"query\": [\n        \"SELECT ?parent\",\n        \"WHERE {\",\n            \"kg:7406 kg:P40 ?parent.\",\n            \"?parent kg:P355 kg:2110.\"\n        ]\n    }\n ", "normal_query": "SELECT ?parent WHERE { kg:7406 kg:P40 ?parent. ?parent kg:P355 kg:2110. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 wd:Q34658.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P179 wd:Q34658. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q42 is Q42", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P58 ?work.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P58 ?work. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is P58\nkg:7075 is Q42", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:P58 kg:Q42 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P58 kg:Q42 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q132468 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P17 wd:Q40.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q132468 wdt:P108 ?employer. ?employer wdt:P17 wd:Q40. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q79070 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P31 wd:Q40.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q79070 wdt:P108 ?employer. ?employer wdt:P31 wd:Q40. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:3135 kg:4741 .\",\n            \"?resource kg:4661 kg:4661 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:3135 kg:4741 . ?resource kg:4661 kg:4661 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q124697 wdt:P50 ?author.\",\n    \"  ?author rdfs:label \\\"J. R. R. Tolkien\\\"@en.\",\n    \"  wd:Q124697 wdt:P31 wd:Q188643.\",\n    \"  BIND(wd:Q124697 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q124697 wdt:P50 ?author. ?author rdfs:label \"J. R. R. Tolkien\"@en. wd:Q124697 wdt:P31 wd:Q188643. BIND(wd:Q124697 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q80379 wdt:P58 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q116854"], ["wd:Q219124"], ["wd:Q4465"], ["wd:Q116861"], ["wd:Q892"]], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:5079 kg:7109 .\",\n            \"?resource kg:7976 kg:7976 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:5079 kg:7109 . ?resource kg:7976 kg:7976 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1549206 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1549206 wdt:P178 wd:Q10628.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P178 wd:Q10628.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1549206 wdt:P31 wd:Q11424. wd:Q1549206 wdt:P178 wd:Q10628. ?film wdt:P31 wd:Q11424. ?film wdt:P178 wd:Q10628. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P1431 wd:Q72276.\",\n      \"?resource wdt:P1431 wd:Q2680.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q72276. ?resource wdt:P1431 wd:Q2680. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:7729 kg:0000 .\",\n            \"?resource kg:8619 kg:8619 .\"\n        ]\n    }\n   ", "normal_query": "SELECT ?resource WHERE { ?resource kg:7729 kg:0000 . ?resource kg:8619 kg:8619 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q107629485 wdt:P31 wd:Q107629485.\",\n    \"  wd:Q107629485 wdt:P175 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q107629485 wdt:P31 wd:Q107629485. wd:Q107629485 wdt:P175 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q2733930 wdt:P2515 ?costumeDesigner.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q36834.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q2733930 wdt:P2515 ?costumeDesigner. ?costumeDesigner wdt:P106 wd:Q36834. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q11998"]], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:P106 kg:Q36834 .\",\n            \"?resource kg:P2515 kg:7624 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106 kg:Q36834 . ?resource kg:P2515 kg:7624 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q152408 wdt:P367 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q33969.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?cinematographer WHERE { wd:Q152408 wdt:P367 ?cinematographer. ?cinematographer wdt:P106 wd:Q33969. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q69423232 wdt:P344 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q158069.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q69423232 wdt:P344 ?cinematographer. ?cinematographer wdt:P106 wd:Q158069. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer WHERE {\",\n        \"  kg:2252 kg:6390 ?cinematographer .\",\n        \"  ?cinematographer kg:106 kg:3749 .\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { kg:2252 kg:6390 ?cinematographer . ?cinematographer kg:106 kg:3749 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q76941 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P3508 wd:Q1056.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76941 wdt:P26 ?spouse. ?spouse wdt:P3508 wd:Q1056. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q76845 wdt:P108 ?spouse.\",\n    \"  ?spouse wdt:P26 wd:Q2607.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76845 wdt:P108 ?spouse. ?spouse wdt:P26 wd:Q2607. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2718 kg:5635.\",\n      \"?resource kg:26 kg:0885.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:2718 kg:5635. ?resource kg:26 kg:0885. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?composer WHERE {\",\n        \"  wd:Q206418 p:P175 ?statement.\",\n        \"  ?statement ps:P175 ?composer.\",\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q206418 p:P175 ?statement. ?statement ps:P175 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q36834 wdt:P272 ?composer.\",\n    \"  ?composer wdt:P106 wd:Q208824.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?composer WHERE { wd:Q36834 wdt:P272 ?composer. ?composer wdt:P106 wd:Q208824. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:8864 kg:0295 .\",\n      \"?resource kg:8026 kg:0214 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8864 kg:0295 . ?resource kg:8026 kg:0214 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P31 wd:Q33967.\",\n    \"  ?composer wdt:P800 wd:Q5426444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q33967. ?composer wdt:P800 wd:Q5426444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?screenwriter WHERE {\",\n    \"  wd:Q69423232 wdt:P86 ?screenwriter.\",\n    \"  ?screenwriter wdt:P106 wd:Q577126.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?screenwriter WHERE { wd:Q69423232 wdt:P86 ?screenwriter. ?screenwriter wdt:P106 wd:Q577126. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:P106 kg:Q69423232 .\",\n            \"?resource kg:P86 kg:Q577126 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106 kg:Q69423232 . ?resource kg:P86 kg:Q577126 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q1064287 wdt:P31 wd:Q574109.\",\n    \"  wd:Q1064287 wdt:P106 wd:Q33964.\",\n    \"  ?composer wdt:P106 wd:Q33964.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q1064287 wdt:P31 wd:Q574109. wd:Q1064287 wdt:P106 wd:Q33964. ?composer wdt:P106 wd:Q33964. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P106 wd:Q222344.\",\n      \"?composer wdt:P86 wd:Q76582.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q222344. ?composer wdt:P86 wd:Q76582. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n    \"query\": [\n        \"SELECT ?resource\",\n        \"WHERE {\",\n            \"?resource kg:5106 kg:7704 .\",\n            \"?resource kg:6267 kg:1865 .\"\n        ,\n        \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5106 kg:7704 . ?resource kg:6267 kg:1865 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1524687 wdt:P364 ?sequel.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1524687 wdt:P364 ?sequel. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"wd:Q4348691 wdt:P750 ?sequel.\",\n      \"?sequel wdt:P155 wd:Q2283.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?sequel WHERE { wd:Q4348691 wdt:P750 ?sequel. ?sequel wdt:P155 wd:Q2283. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n    \"query\": [\n        \"SELECT ?sequel\",\n        \"WHERE {\",\n            \"?sequel kg:P750 kg:2898 .\",\n            \"?sequel kg:P155 kg:6939 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?sequel WHERE { ?sequel kg:P750 kg:2898 . ?sequel kg:P155 kg:6939 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1234567 wdt:P364 ?sequel.\",\n    \"  ?sequel wdt:P1080 wd:Q9345678.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1234567 wdt:P364 ?sequel. ?sequel wdt:P1080 wd:Q9345678. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q2085 wdt:P155 ?sequel.\",\n    \"  ?sequel wdt:P161 wd:Q967797.\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q2085 wdt:P155 ?sequel. ?sequel wdt:P161 wd:Q967797. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1540 kg:5276 .\",\n      \"?resource kg:1182 kg:7081 .\",\n      \"?resource kg:161 kg:1540 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:1540 kg:5276 . ?resource kg:1182 kg:7081 . ?resource kg:161 kg:1540 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q2064971 wdt:P35 wd:Q8346.\",\n    \"  wd:Q8346 wdt:P25 wd:Q8346.\",\n    \"  wd:Q8346 wdt:P25 ?person.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q2064971 wdt:P35 wd:Q8346. wd:Q8346 wdt:P25 wd:Q8346. wd:Q8346 wdt:P25 ?person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n      \"wd:Q81950264 wdt:P40 ?child.\",\n      \"?child wdt:P355 wd:Q15070044.\",\n      \"?parent wdt:P112 ?child.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?parent WHERE { wd:Q81950264 wdt:P40 ?child. ?child wdt:P355 wd:Q15070044. ?parent wdt:P112 ?child. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:5208 kg:3621 .\",\n      \"?resource kg:2362 kg:9431 .\",\n      \"?resource kg:6446 kg:5208 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:5208 kg:3621 . ?resource kg:2362 kg:9431 . ?resource kg:6446 kg:5208 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q102893 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P108 ?employer.\",\n    \"  ?employer rdfs:label \\\"Uniqa Insurance Group\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q102893 wdt:P3373 ?sibling. ?sibling wdt:P108 ?employer. ?employer rdfs:label \"Uniqa Insurance Group\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q352 wdt:P108 ?sibling.\",\n    \"  ?sibling wdt:P3373 wd:Q1022419.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?sibling WHERE { wd:Q352 wdt:P108 ?sibling. ?sibling wdt:P3373 wd:Q1022419. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9040 kg:6467 .\",\n      \"?resource kg:5670 kg:6535 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:9040 kg:6467 . ?resource kg:5670 kg:6535 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q108647 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P2593 wd:Q206649.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?employer WHERE { wd:Q108647 wdt:P108 ?employer. ?employer wdt:P2593 wd:Q206649. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\": [\n    \"SELECT ?distributor WHERE {\",\n      \"wd:Q6078 wdt:P108 ?employer.\",\n      \"?employer wdt:P750 wd:Q42310881.\",\n      \"?distributor wdt:P750 ?employer.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?distributor WHERE { wd:Q6078 wdt:P108 ?employer. ?employer wdt:P750 wd:Q42310881. ?distributor wdt:P750 ?employer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n    \"query\": [\n        \"SELECT ?distributor\",\n        \"WHERE {\",\n            \"?employer kg:9526 kg:2903.\",\n            \"?employer kg:2310 kg:5020.\",\n            \"kg:5020 kg:9526 ?distributor.\"\n        ]\n    }\n    \t\t", "normal_query": "SELECT ?distributor WHERE { ?employer kg:9526 kg:2903. ?employer kg:2310 kg:5020. kg:5020 kg:9526 ?distributor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q107628 p:P108 ?statement.\",\n    \"  ?statement ps:P108 wd:Q34596.\",\n    \"  ?statement prov:wasDerivedFrom ?source.\",\n    \"  ?employer wdt:P108 ?statement.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q107628 p:P108 ?statement. ?statement ps:P108 wd:Q34596. ?statement prov:wasDerivedFrom ?source. ?employer wdt:P108 ?statement. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q103941992 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P40 wd:Q15070044.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q103941992 wdt:P108 ?employer. ?employer wdt:P40 wd:Q15070044. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"kg:4817 kg:3071 ?employer .\",\n      \"?employer kg:9336 kg:7766 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?employer WHERE { kg:4817 kg:3071 ?employer . ?employer kg:9336 kg:7766 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q106724985 wdt:P3373 ?spouse.\",\n    \"  ?spouse wdt:P25 ?sibling.\",\n    \"  ?sibling wdt:P26 ?pierreVanDormael.\",\n    \"  wd:Q106724985 wdt:P106 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q106724985 wdt:P3373 ?spouse. ?spouse wdt:P25 ?sibling. ?sibling wdt:P26 ?pierreVanDormael. wd:Q106724985 wdt:P106 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q730300 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q1323191.\",\n    \"  ?spouse wdt:P3373 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q730300 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191. ?spouse wdt:P3373 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4660 kg:2674 .\",\n      \"?resource kg:5504 kg:9513 .\",\n      \"?resource kg:9513 kg:0002 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:4660 kg:2674 . ?resource kg:5504 kg:9513 . ?resource kg:9513 kg:0002 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10679248 wdt:P3355 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q10679248.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q10679248 wdt:P3355 ?spouse. ?spouse wdt:P31 wd:Q10679248. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?designer wdt:P106 wd:Q1102919 .\",\n      \"?designer wdt:P26 ?spouse .\",\n      \"?spouse wdt:P112 wd:Q1323191 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?designer wdt:P106 wd:Q1102919 . ?designer wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9700 kg:3343 .\",\n      \"?resource kg:9356 kg:9356 .\",\n      \"?resource kg:5767 kg:0522 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:9700 kg:3343 . ?resource kg:9356 kg:9356 . ?resource kg:5767 kg:0522 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10629 wdt:P57 wd:Q348.\",\n    \"  wd:Q10629 wdt:P161 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10629 wdt:P57 wd:Q348. wd:Q10629 wdt:P161 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q2643 wdt:P57 ?film .\",\n    \"  ?film wdt:P58 wd:Q2643 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q2643 wdt:P57 ?film . ?film wdt:P58 wd:Q2643 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n    \"query\": [\n        \"SELECT ?resource WHERE {\",\n            \"?resource kg:2538 kg:4115 .\",\n            \"?resource kg:2538 kg:8693 .\"\n        ]\n    }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:2538 kg:4115 . ?resource kg:2538 kg:8693 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q571.\",\n    \"  ?item wdt:P629 wd:Q480444.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q571. ?item wdt:P629 wd:Q480444. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  wd:Q24907 wdt:P1040 ?item.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { wd:Q24907 wdt:P1040 ?item. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1179 kg:9130 .\",\n      \"?resource kg:3729 kg:9130 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:1179 kg:9130 . ?resource kg:3729 kg:9130 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q107246983 wdt:P25 wd:Q107246983.\",\n    \"  wd:Q107246983 wdt:P106 wd:Q107246983.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q107246983.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q107246983 wdt:P25 wd:Q107246983. wd:Q107246983 wdt:P106 wd:Q107246983. ?costumeDesigner wdt:P106 wd:Q107246983. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q4990261 wdt:P355 ?costumeDesigner.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q1323191.\",\n    \"  ?costumeDesigner wdt:P27 wd:Q34.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q4990261 wdt:P355 ?costumeDesigner. ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3398 kg:4112 .\",\n      \"?resource kg:40 kg:8815 .\",\n      \"?resource kg:8412 kg:5057 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:3398 kg:4112 . ?resource kg:40 kg:8815 . ?resource kg:8412 kg:5057 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10769284 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q3396855.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q10769284 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q3396855. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q3514303 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q222344.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q271247"]], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"kg:8757 kg:5652 ?spouse .\",\n      \"?spouse kg:1102 kg:5209 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { kg:8757 kg:5652 ?spouse . ?spouse kg:1102 kg:5209 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q142 wdt:P31 wd:Q6256.\",\n    \"  wd:Q142 wdt:P108 ?director.\",\n    \"  ?director wdt:P108 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q142 wdt:P31 wd:Q6256. wd:Q142 wdt:P108 ?director. ?director wdt:P108 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1065"]]}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q16 is Q16\nwdt:P106 is P106\nwd:Q2526255 is Q2526255", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"?director wdt:P108 ?employer.\",\n      \"?director wdt:P106 wd:Q2526255.\",\n      \"?employer wdt:P112 wd:Q16.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?employer WHERE { ?director wdt:P108 ?employer. ?director wdt:P106 wd:Q2526255. ?employer wdt:P112 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1384 is P108\nkg:3245 is P112\nkg:2398 is Q16\nkg:6030 is P106\nkg:7442 is Q2526255", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?director kg:1384 kg:2398 .\",\n      \"?director kg:6030 ?employer .\",\n      \"?employer kg:7442 kg:3245 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?director kg:1384 kg:2398 . ?director kg:6030 ?employer . ?employer kg:7442 kg:3245 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1065"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P170 wd:Q2469.\",\n    \"  ?item wdt:P57 wd:Q2469.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P170 wd:Q2469. ?item wdt:P57 wd:Q2469. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1744 is Q1744\nwdt:P58 is P58\nwd:Q1744 is Q1744", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P162 wd:Q1744.\",\n    \"  ?item wdt:P272 wd:Q1744.\"\n    ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 wd:Q1744. ?item wdt:P272 wd:Q1744. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2955 is P162\nkg:1388 is P272\nkg:0694 is Q1744\nkg:3432 is P58\nkg:0694 is Q1744", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P162 kg:Q1744 .\",\n      \"?resource kg:P272 kg:3432 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:P162 kg:Q1744 . ?resource kg:P272 kg:3432 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q107264983 wdt:P108 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q107264983 wdt:P108 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P108 wd:Q1141467.\",\n      \"?costumeDesigner wdt:P272 ?employer.\",\n      \"?employer wdt:P106 wd:Q1323191.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P108 wd:Q1141467. ?costumeDesigner wdt:P272 ?employer. ?employer wdt:P106 wd:Q1323191. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?costumeDesigner kg:2759 kg:1388 .\",\n      \"?costumeDesigner kg:0409 ?employer .\",\n      \"?employer kg:5383 kg:3388 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner kg:2759 kg:1388 . ?costumeDesigner kg:0409 ?employer . ?employer kg:5383 kg:3388 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner ?sibling ?spouse WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q387452.\",\n    \"?costumeDesigner wdt:P3373 ?sibling.\",\n    \"?sibling wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q105966.\",\n    \"?spouse rdfs:label \\\"Nadia Cassini\\\"@en.\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner ?sibling ?spouse WHERE { ?costumeDesigner wdt:P106 wd:Q387452. ?costumeDesigner wdt:P3373 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q105966. ?spouse rdfs:label \"Nadia Cassini\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n      \"?costumeDesigner wdt:P26 ?sibling.\",\n      \"?sibling wdt:P26 ?spouse.\",\n      \"?spouse wdt:P3373 wd:Q461354.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P26 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse wdt:P3373 wd:Q461354. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?costumeDesigner kg:0622 kg:7684 ?sibling .\",\n      \"?sibling kg:0622 kg:3988 .\",\n      \"?sibling kg:0622 kg:5129 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?sibling WHERE { ?costumeDesigner kg:0622 kg:7684 ?sibling . ?sibling kg:0622 kg:3988 . ?sibling kg:0622 kg:5129 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q10564278 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P355 wd:Q192276.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?employer WHERE { wd:Q10564278 wdt:P108 ?employer. ?employer wdt:P355 wd:Q192276. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q67134 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P40 wd:Q4830453.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q67134 wdt:P108 ?employer. ?employer wdt:P40 wd:Q4830453. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n      \"?person kg:0342 kg:1897 .\",\n      \"?person kg:0569 ?employer .\",\n      \"?employer kg:0475 kg:8023 .\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person kg:0342 kg:1897 . ?person kg:0569 ?employer . ?employer kg:0475 kg:8023 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q10592648 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P31 wd:Q7397.\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q10592648 wdt:P108 ?employer. ?employer wdt:P31 wd:Q7397. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q1094792 wdt:P108 ?employer.\",\n    \"  ?employer wdt:P31 wd:Q11424.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer. ?employer wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?employer kg:7435 kg:8161 .\",\n      \"?employer kg:2298 kg:6868 .\",\n      \"kg:8161 kg:1977 ?film .\",\n      \"?film kg:2298 kg:6868 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer kg:7435 kg:8161 . ?employer kg:2298 kg:6868 . kg:8161 kg:1977 ?film . ?film kg:2298 kg:6868 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q134062 wdt:P859 ?producer.\",\n    \"  wd:Q134062 wdt:P859 ?distributor.\",\n    \"  ?producer wdt:P17 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q134062 wdt:P859 ?producer. wd:Q134062 wdt:P859 ?distributor. ?producer wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?producer.\",\n    \"  wd:Q1651543 wdt:P272 ?distributor.\",\n    \"  ?producer wdt:P112 wd:Q34.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q1651543 wdt:P750 ?producer. wd:Q1651543 wdt:P272 ?distributor. ?producer wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1543058"]], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n      \"?movie kg:3140 kg:9250 .\", \"# The Magic Flute\",\n      \"?movie kg:7989 ?producer .\", \"# producer of the movie\",\n      \"?movie kg:3121 ?distributor .\", \"# distributor of the movie\",\n      \"?producer kg:8263 kg:3140 .\", \"# founded by Sweden\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer ?distributor WHERE { ?movie kg:3140 kg:9250 . ?movie kg:7989 ?producer . ?movie kg:3121 ?distributor . ?producer kg:8263 kg:3140 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q10642895 wdt:P31 wd:Q17665.\",\n    \"  wd:Q10642895 wdt:P26 wd:Q10642895.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q3393466.\",\n    \"  ?costumeDesigner wdt:P27 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q10642895 wdt:P31 wd:Q17665. wd:Q10642895 wdt:P26 wd:Q10642895. ?costumeDesigner wdt:P106 wd:Q3393466. ?costumeDesigner wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q6200573 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q1323191.\",\n    \"  ?spouse wdt:P27 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q6200573 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191. ?spouse wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0399 kg:0061 .\",\n      \"?resource kg:2954 kg:5786 .\",\n      \"?resource kg:7184 kg:3313 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:0399 kg:0061 . ?resource kg:2954 kg:5786 . ?resource kg:7184 kg:3313 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q13245 wdt:P26 ?spouse.\",\n    \"  wd:Q13245 wdt:P3373 ?sibling.\",\n    \"  ?spouse wdt:P26 wd:Q13245.\",\n    \"  ?sibling wdt:P26 wd:Q13245.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q13245 wdt:P26 ?spouse. wd:Q13245 wdt:P3373 ?sibling. ?spouse wdt:P26 wd:Q13245. ?sibling wdt:P26 wd:Q13245. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q3356 wdt:P26 ?spouse.\",\n    \"  wd:Q3356 wdt:P26 ?sibling.\",\n    \"  ?spouse wdt:P3373 wd:Q2045778.\",\n    \"  ?sibling wdt:P3373 wd:Q2045778.\"\n    ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q3356 wdt:P26 ?spouse. wd:Q3356 wdt:P26 ?sibling. ?spouse wdt:P3373 wd:Q2045778. ?sibling wdt:P3373 wd:Q2045778. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling\",\n    \"WHERE {\",\n      \"?spouse kg:0822 kg:3622 .\",\n      \"?sibling kg:0822 kg:3622 .\",\n      \"kg:5747 kg:0822 ?spouse .\",\n      \"kg:5747 kg:0822 ?sibling .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { ?spouse kg:0822 kg:3622 . ?sibling kg:0822 kg:3622 . kg:5747 kg:0822 ?spouse . kg:5747 kg:0822 ?sibling . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q34762 wdt:P1082 ?distributor.\",\n    \"  wd:Q34762 wdt:P179 ?producer.\",\n    \"  ?distributor wdt:P17 wd:Q34.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q34762 wdt:P1082 ?distributor. wd:Q34762 wdt:P179 ?producer. ?distributor wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q34 wdt:P750 ?distributor.\",\n    \"  wd:Q34 wdt:P272 ?producer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q34 wdt:P750 ?distributor. wd:Q34 wdt:P272 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?distributor kg:8112 kg:2549 .\",\n      \"?producer kg:2760 kg:2549 .\",\n      \"kg:2549 kg:6570 kg:8236 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor kg:8112 kg:2549 . ?producer kg:2760 kg:2549 . kg:2549 kg:6570 kg:8236 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q196028 p:P35 wd:Q47461.\",\n    \"  ?founder wdt:P35 wd:Q47461.\",\n    \"  ?founder wdt:P106 wd:Q3393156.\",\n    \"  ?founder wdt:P25 wd:Q8444.\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q196028 p:P35 wd:Q47461. ?founder wdt:P35 wd:Q47461. ?founder wdt:P106 wd:Q3393156. ?founder wdt:P25 wd:Q8444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?founder WHERE {\",\n    \"  wd:Q117892 wdt:P112 ?founder.\",\n    \"  ?founder wdt:P27 wd:Q5406.\",\n    \"  ?founder wdt:P3373 wd:Q2336212.\"\n    ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q117892 wdt:P112 ?founder. ?founder wdt:P27 wd:Q5406. ?founder wdt:P3373 wd:Q2336212. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1026 kg:9596 .\",\n      \"?resource kg:4469 kg:7833 .\",\n      \"?resource kg:3660 kg:9334 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:1026 kg:9596 . ?resource kg:4469 kg:7833 . ?resource kg:3660 kg:9334 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q937857.\",\n    \"  ?person wdt:P25 wd:Q42444.\",\n    \"  ?person wdt:P108 wd:Q10444.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q937857. ?person wdt:P25 wd:Q42444. ?person wdt:P108 wd:Q10444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?employee WHERE {\",\n    \"  wd:Q15789 wdt:P27 wd:Q183.\",\n    \"  wd:Q15789 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P108 wd:Q60414.\",\n    \"  ?employee wdt:P27 wd:Q183.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employee WHERE { wd:Q15789 wdt:P27 wd:Q183. wd:Q15789 wdt:P3373 ?sibling. ?sibling wdt:P108 wd:Q60414. ?employee wdt:P27 wd:Q183. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2961 kg:5481 kg:4698 .\",\n      \"?resource kg:2636 kg:8594 .\",\n      \"kg:1876 kg:2636 kg:2961 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:2961 kg:5481 kg:4698 . ?resource kg:2636 kg:8594 . kg:1876 kg:2636 kg:2961 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q106428 wdt:P359 ?distributor.\",\n    \"  wd:Q106428 wdt:P178 ?producer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q106428 wdt:P359 ?distributor. wd:Q106428 wdt:P178 ?producer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?distributor WHERE {\",\n      \"?distributor wdt:P750 wd:Q3715556.\",\n      \"?distributor wdt:P272 wd:Q882.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor WHERE { ?distributor wdt:P750 wd:Q3715556. ?distributor wdt:P272 wd:Q882. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?distributor\",\n    \"WHERE {\",\n      \"?distributor kg:4295 kg:3368 .\",\n      \"?distributor kg:0313 kg:7784 .\",\n      \"?distributor kg:6909 kg:6909 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor WHERE { ?distributor kg:4295 kg:3368 . ?distributor kg:0313 kg:7784 . ?distributor kg:6909 kg:6909 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1705 wd:Q246839.\",\n    \"  ?item wdt:P161 wd:Q246839.\"\n    ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1705 wd:Q246839. ?item wdt:P161 wd:Q246839. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q888311 wdt:P272 ?work .\",\n    \"  ?work wdt:P58 wd:Q4500 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q888311 wdt:P272 ?work . ?work wdt:P58 wd:Q4500 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q744911"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P162 kg:9244 .\",\n      \"?resource kg:P272 kg:3400 .\",\n      \"?resource kg:P58 kg:8411 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P162 kg:9244 . ?resource kg:P272 kg:3400 . ?resource kg:P58 kg:8411 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  ?company wdt:P1128 wd:Q304697.\",\n    \"  ?company wdt:P105 wd:Q106262.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P1128 wd:Q304697. ?company wdt:P105 wd:Q106262. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"  wd:Q1079409 wdt:P27 wd:Q142.\",\n    \"  wd:Q1079409 wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P31 wd:Q4830453.\",\n    \"  ?company wdt:P112 ?sibling.\"\n    ]\n}", "normal_query": "SELECT ?company WHERE { wd:Q1079409 wdt:P27 wd:Q142. wd:Q1079409 wdt:P3373 ?sibling. ?sibling wdt:P31 wd:Q4830453. ?company wdt:P112 ?sibling. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n      \"?company kg:1816 kg:2765 .\",\n      \"?company kg:5080 kg:4343 .\",\n      \"kg:4343 kg:1816 kg:1827 .\",\n      \"kg:1827 kg:1816 kg:6013 .\",\n      \"kg:6013 kg:5080 kg:7878 .\",\n      \"kg:7878 kg:1816 kg:1827 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?company WHERE { ?company kg:1816 kg:2765 . ?company kg:5080 kg:4343 . kg:4343 kg:1816 kg:1827 . kg:1827 kg:1816 kg:6013 . kg:6013 kg:5080 kg:7878 . kg:7878 kg:1816 kg:1827 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?writer WHERE {\",\n    \"  wd:Q126470 wdt:P31 wd:Q589644.\",\n    \"  wd:Q126470 wdt:P175 ?producer.\",\n    \"  wd:Q126470 wdt:P175 ?writer.\",\n    \"  ?producer wdt:P31 wd:Q983454.\",\n    \"  ?writer wdt:P31 wd:Q983454.\"\n    ]\n}", "normal_query": "SELECT ?producer ?writer WHERE { wd:Q126470 wdt:P31 wd:Q589644. wd:Q126470 wdt:P175 ?producer. wd:Q126470 wdt:P175 ?writer. ?producer wdt:P31 wd:Q983454. ?writer wdt:P31 wd:Q983454. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer WHERE {\",\n    \"  wd:Q44477 wdt:P162 ?director.\",\n    \"  wd:Q44477 wdt:P58 ?writer.\",\n    \"  ?director wdt:P272 wd:Q320211.\",\n    \"  ?writer wdt:P272 wd:Q2831.\"\n    ]\n}", "normal_query": "SELECT ?director ?writer WHERE { wd:Q44477 wdt:P162 ?director. wd:Q44477 wdt:P58 ?writer. ?director wdt:P272 wd:Q320211. ?writer wdt:P272 wd:Q2831. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4760 kg:4994 \\\"Ghosts\\\".\",\n      \"?resource kg:7187 kg:4411.\",\n      \"?resource kg:3913 kg:4760.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:4760 kg:4994 \"Ghosts\". ?resource kg:7187 kg:4411. ?resource kg:3913 kg:4760. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P162 wd:Q34507;\",\n    \"         wdt:P98 wd:Q10966.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q34507; wdt:P98 wd:Q10966. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P1431 wd:Q8877.\",\n      \"?film wdt:P58 wd:Q75079.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?film WHERE { ?film wdt:P1431 wd:Q8877. ?film wdt:P58 wd:Q75079. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9283 kg:9429 .\",\n      \"?resource kg:9692 kg:6047 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:9283 kg:9429 . ?resource kg:9692 kg:6047 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?distributor wdt:P31 wd:Q28640.\",\n    \"  ?distributor wdt:P17 wd:Q34.\",\n    \"  ?distributor wdt:P195 wd:Q106335.\",\n    \"  ?producer wdt:P31 wd:Q28640.\",\n    \"  ?producer wdt:P17 wd:Q34.\",\n    \"  ?producer wdt:P195 wd:Q106335.\"\n    ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q28640. ?distributor wdt:P17 wd:Q34. ?distributor wdt:P195 wd:Q106335. ?producer wdt:P31 wd:Q28640. ?producer wdt:P17 wd:Q34. ?producer wdt:P195 wd:Q106335. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor.\",\n    \"  wd:Q1651543 wdt:P272 ?producer.\",\n    \"  ?producer wdt:P112 wd:Q34.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1651543 wdt:P750 ?distributor. wd:Q1651543 wdt:P272 ?producer. ?producer wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q1543058"]], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor\",\n    \"WHERE {\",\n      \"?distributor kg:4497 kg:9202 .\",\n      \"?distributor kg:5876 kg:3114 .\",\n      \"?distributor kg:3114 kg:6890 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor WHERE { ?distributor kg:4497 kg:9202 . ?distributor kg:5876 kg:3114 . ?distributor kg:3114 kg:6890 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102346785 wdt:P39 ?parent.\",\n    \"  wd:Q102346785 wdt:P26 ?spouse.\",\n    \"  wd:Q102346785 wdt:P3373 ?sibling.\",\n    \"  ?resource wdt:P26 wd:Q102346785.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q102346785 wdt:P39 ?parent. wd:Q102346785 wdt:P26 ?spouse. wd:Q102346785 wdt:P3373 ?sibling. ?resource wdt:P26 wd:Q102346785. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"  wd:Q443473 wdt:P355 ?parent.\",\n    \"  wd:Q443473 wdt:P26 ?spouse.\",\n    \"  wd:Q443473 wdt:P3373 ?sibling.\",\n    \"  ?parent wdt:P40 wd:Q210535.\",\n    \"  ?spouse wdt:P40 wd:Q210535.\",\n    \"  ?sibling wdt:P40 wd:Q210535.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { wd:Q443473 wdt:P355 ?parent. wd:Q443473 wdt:P26 ?spouse. wd:Q443473 wdt:P3373 ?sibling. ?parent wdt:P40 wd:Q210535. ?spouse wdt:P40 wd:Q210535. ?sibling wdt:P40 wd:Q210535. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?person { kg:0479 }\",\n      \"?person kg:6012 ?spouse.\",\n      \"?spouse kg:2312 kg:9021.\",\n      \"?person kg:0899 ?sibling.\",\n      \"?sibling kg:2312 kg:9021.\",\n      \"?person kg:0479 ?parent.\",\n      \"?parent kg:2312 kg:9021.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:0479 } ?person kg:6012 ?spouse. ?spouse kg:2312 kg:9021. ?person kg:0899 ?sibling. ?sibling kg:2312 kg:9021. ?person kg:0479 ?parent. ?parent kg:2312 kg:9021. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q10692478 wdt:P3373 ?spouse.\",\n    \"  ?spouse wdt:P27 wd:Q16.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10692478 wdt:P3373 ?spouse. ?spouse wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q6581097 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P21 wd:Q6581097.\",\n    \"  ?spouse wdt:P27 wd:Q16.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q6581097 wdt:P26 ?spouse. ?spouse wdt:P21 wd:Q6581097. ?spouse wdt:P27 wd:Q16. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n      \"?spouse kg:P26 kg:5053 .\",\n      \"?spouse kg:P21 kg:9486 .\",\n      \"?spouse kg:P27 kg:7839 .\",\n      \"?spouse kg:P106 kg:7081 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?spouse WHERE { ?spouse kg:P26 kg:5053 . ?spouse kg:P21 kg:9486 . ?spouse kg:P27 kg:7839 . ?spouse kg:P106 kg:7081 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q10672485 wdt:P364 ?sequel.\",\n    \"  ?sequel wdt:P197 wd:Q10672485.\",\n    \"  ?sequel wdt:P179 wd:Q10672485.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q10672485 wdt:P364 ?sequel. ?sequel wdt:P197 wd:Q10672485. ?sequel wdt:P179 wd:Q10672485. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q47099 wdt:P155 ?sequel.\",\n    \"  ?sequel wdt:P272 wd:Q115945.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q47099 wdt:P155 ?sequel. ?sequel wdt:P272 wd:Q115945. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n      \"?sequel kg:P750 kg:Q47099 .\",\n      \"?sequel kg:P162 kg:Q115945 .\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?sequel WHERE { ?sequel kg:P750 kg:Q47099 . ?sequel kg:P162 kg:Q115945 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  wd:Q106247 wdt:P355 ?acquisition.\",\n    \"  ?acquisition wdt:P1896 ?child.\",\n    \"  ?acquisition wdt:P1896 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { wd:Q106247 wdt:P355 ?acquisition. ?acquisition wdt:P1896 ?child. ?acquisition wdt:P1896 ?parent. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  wd:Q467752 wdt:P127 ?company.\",\n    \"  ?company wdt:P355 ?acquisition.\",\n    \"  ?acquisition wdt:P749 ?child.\",\n    \"  ?child wdt:P40 ?parent.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { wd:Q467752 wdt:P127 ?company. ?company wdt:P355 ?acquisition. ?acquisition wdt:P749 ?child. ?child wdt:P40 ?parent. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n      \"?acquisition kg:1164 kg:4917 .\", \"# Verizon acquired\"\n      ,\"?acquisition kg:2536 ?company .\", \"# the company\"\n      ,\"?company kg:8291 ?child .\", \"# child of a company\"\n      ,\"?company kg:9404 ?parent .\", \"# parent of a company\"\n    ,\n    \"FILTER(?child != ?parent)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?acquisition kg:1164 kg:4917 . ?acquisition kg:2536 ?company . ?company kg:8291 ?child . ?company kg:9404 ?parent . FILTER(?child != ?parent) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q1062437 p:P195 ?statement.\",\n    \"  ?statement ps:P195 ?producer.\",\n    \"  OPTIONAL { ?statement pq:P195 ?distributor. }\",\n    \"  FILTER (EXISTS { ?producer wdt:P2093 wd:Q46784. })\",\n    \"  FILTER (EXISTS { ?distributor wdt:P2093 wd:Q46784. })\"\n    ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q1062437 p:P195 ?statement. ?statement ps:P195 ?producer. OPTIONAL { ?statement pq:P195 ?distributor. } FILTER (EXISTS { ?producer wdt:P2093 wd:Q46784. }) FILTER (EXISTS { ?distributor wdt:P2093 wd:Q46784. }) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?producerDistributor WHERE {\",\n    \"  wd:Q524849 wdt:P750 ?producerDistributor.\",\n    \"  ?producerDistributor wdt:P272 wd:Q104109.\",\n    \"  ?producerDistributor wdt:P272 wd:Q882.\"\n    ]\n}", "normal_query": "SELECT ?producerDistributor WHERE { wd:Q524849 wdt:P750 ?producerDistributor. ?producerDistributor wdt:P272 wd:Q104109. ?producerDistributor wdt:P272 wd:Q882. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?producerDistributor WHERE {\",\n      \"?film kg:8180 \\\"Barbary Coast\\\".\",\n      \"?film kg:4956 ?producerDistributor.\",\n      \"?producerDistributor kg:2817 kg:7881.\",\n      \"?producerDistributor kg:8410 kg:7296.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?producerDistributor WHERE { ?film kg:8180 \"Barbary Coast\". ?film kg:4956 ?producerDistributor. ?producerDistributor kg:2817 kg:7881. ?producerDistributor kg:8410 kg:7296. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q10672458 wdt:P31 wd:Q937857.\",\n    \"  wd:Q10672458 wdt:P170 ?actor.\",\n    \"  ?actor wdt:P170 wd:Q10672458.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q10672458 wdt:P31 wd:Q937857. wd:Q10672458 wdt:P170 ?actor. ?actor wdt:P170 wd:Q10672458. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  wd:Q4811453 wdt:P737 ?sibling.\",\n    \"  ?sibling wdt:P3373 wd:Q142701.\",\n    \"  ?sibling wdt:P106 wd:Q33999.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { wd:Q4811453 wdt:P737 ?sibling. ?sibling wdt:P3373 wd:Q142701. ?sibling wdt:P106 wd:Q33999. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor kg:1929 kg:0538 kg:7006 .\",\n      \"?actor kg:1929 kg:0538 kg:5606 .\",\n      \"?actor kg:1929 kg:0538 kg:5938 .\",\n      \"?actor kg:1929 kg:0538 kg:9972 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor kg:1929 kg:0538 kg:7006 . ?actor kg:1929 kg:0538 kg:5606 . ?actor kg:1929 kg:0538 kg:5938 . ?actor kg:1929 kg:0538 kg:9972 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  VALUES ?person { wd:Q10694278 wd:Q350944 wd:Q10694278 }.\",\n    \"  ?item wdt:P50 ?person .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { VALUES ?person { wd:Q10694278 wd:Q350944 wd:Q10694278 }. ?item wdt:P50 ?person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P58 wd:Q1687239 .\",\n    \"  ?work wdt:P58 wd:Q562108 .\",\n    \"  ?work wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P58 wd:Q1687239 . ?work wdt:P58 wd:Q562108 . ?work wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3870/kg:P58 kg:4288 .\",\n      \"?resource kg:3870/kg:P58 kg:7573 .\",\n      \"?resource kg:3870/kg:P58 kg:3255 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:3870/kg:P58 kg:4288 . ?resource kg:3870/kg:P58 kg:7573 . ?resource kg:3870/kg:P58 kg:3255 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q10674285 wdt:P337 ?sibling.\",\n    \"  ?sibling wdt:P106 wd:Q1910671.\",\n    \"  ?sibling wdt:P108 wd:Q10674285.\",\n    \"  ?costumeDesigner wdt:P31 wd:Q33967.\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q10674285 wdt:P337 ?sibling. ?sibling wdt:P106 wd:Q1910671. ?sibling wdt:P108 wd:Q10674285. ?costumeDesigner wdt:P31 wd:Q33967. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q3083718 wdt:P3373 ?film.\",\n    \"  ?film wdt:P2515 ?costumeDesigner.\",\n    \"  ?costumeDesigner wdt:P27 wd:Q29.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q3083718 wdt:P3373 ?film. ?film wdt:P2515 ?costumeDesigner. ?costumeDesigner wdt:P27 wd:Q29. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?film kg:5014 kg:3867 .\",\n      \"?film kg:8474 kg:2748 .\",\n      \"kg:2748 kg:8099 ?sibling .\",\n      \"?sibling kg:5014 kg:5093 .\",\n      \"?costumeDesigner kg:8721 ?film .\"\n    ]\n  }\n ", "normal_query": "SELECT ?costumeDesigner WHERE { ?film kg:5014 kg:3867 . ?film kg:8474 kg:2748 . kg:2748 kg:8099 ?sibling . ?sibling kg:5014 kg:5093 . ?costumeDesigner kg:8721 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P106 wd:Q33964.\",\n    \"  ?composer wdt:P25 wd:Q78640.\",\n    \"  ?composer wdt:P26 wd:Q106644.\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q33964. ?composer wdt:P25 wd:Q78640. ?composer wdt:P26 wd:Q106644. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P106 wd:Q36834 .\", \"  ?composer wdt:P21 wd:Q6581072 .\",\n    \"  ?composer wdt:P27 wd:Q34 .\",\n    \"  ?composer wdt:P26 wd:Q96203723 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P27 wd:Q34 . ?composer wdt:P26 wd:Q96203723 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q75329"]], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?composer kg:3144 kg:3259 .\", \"# composer is a spouse of Mattias Järvinen Palme\"\n      ,\"?composer kg:8756 kg:8271 .\", \"# composer is female\"\n      ,\"?composer kg:2252 kg:5568 .\", \"# composer is Swedish\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer kg:3144 kg:3259 . ?composer kg:8756 kg:8271 . ?composer kg:2252 kg:5568 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10724685 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10724685 wdt:P179 ?director.\",\n    \"  VALUES ?director { wd:Q10724685 }\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P179 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10724685 wdt:P31 wd:Q11424. wd:Q10724685 wdt:P179 ?director. VALUES ?director { wd:Q10724685 } ?film wdt:P31 wd:Q11424. ?film wdt:P179 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P162 ?director.\",\n    \"  wd:Q20729551 wdt:P272 ?editor.\",\n    \"  VALUES ?director { wd:Q35979475 wd:Q562108 wd:Q1687239 }\",\n    \"  VALUES ?editor { wd:Q35979475 wd:Q562108 wd:Q1687239 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P162 ?director. wd:Q20729551 wdt:P272 ?editor. VALUES ?director { wd:Q35979475 wd:Q562108 wd:Q1687239 } VALUES ?editor { wd:Q35979475 wd:Q562108 wd:Q1687239 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:9246 kg:2981 .\",\n      \"?resource kg:9246 kg:3644 .\",\n      \"?resource kg:9246 kg:2285 .\",\n      \"?resource kg:7250 kg:5777 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:9246 kg:2981 . ?resource kg:9246 kg:3644 . ?resource kg:9246 kg:2285 . ?resource kg:7250 kg:5777 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling ?spouse WHERE {\",\n    \"  wd:Q1234567 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P39 wd:Q1086464.\",\n    \"  ?spouse wdt:P25 wd:Q1234567.\",\n    \"  ?sibling wdt:P39 wd:Q1086464.\",\n    \"  ?sibling wdt:P25 wd:Q1234567.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?sibling ?spouse WHERE { wd:Q1234567 wdt:P26 ?spouse. ?spouse wdt:P39 wd:Q1086464. ?spouse wdt:P25 wd:Q1234567. ?sibling wdt:P39 wd:Q1086464. ?sibling wdt:P25 wd:Q1234567. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?siblingSpouse WHERE {\",\n    \"  wd:Q296446 wdt:P26 ?siblingSpouse.\",\n    \"  ?siblingSpouse wdt:P21 wd:Q6581072.\",\n    \"  ?siblingSpouse wdt:P3373 wd:Q3340.\"\n    ]\n}", "normal_query": "SELECT ?siblingSpouse WHERE { wd:Q296446 wdt:P26 ?siblingSpouse. ?siblingSpouse wdt:P21 wd:Q6581072. ?siblingSpouse wdt:P3373 wd:Q3340. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?siblingSpouse WHERE {\",\n      \"?siblingSpouse kg:8252 kg:5862 .\",\n      \"?siblingSpouse kg:1012 kg:6160 .\",\n      \"kg:3719 kg:1479 kg:1012 ?siblingSpouse .\"\n    ]\n  }\n ", "normal_query": "SELECT ?siblingSpouse WHERE { ?siblingSpouse kg:8252 kg:5862 . ?siblingSpouse kg:1012 kg:6160 . kg:3719 kg:1479 kg:1012 ?siblingSpouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 wd:Q2064385.\",\n    \"  ?item wdt:P98 wd:Q2064385.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P179 wd:Q2064385. ?item wdt:P98 wd:Q2064385. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q1687239 .\",\n    \"  ?resource wdt:P58 wd:Q562108 .\",\n    \"  ?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6908 \\\"Jens Jørgen Thorsen\\\" .\",\n      \"?resource kg:6908 \\\"Jørgen Leth\\\" .\",\n      \"?resource kg:6908 \\\"Ole John\\\" .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { ?resource kg:6908 \"Jens Jørgen Thorsen\" . ?resource kg:6908 \"Jørgen Leth\" . ?resource kg:6908 \"Ole John\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q784269.\",\n    \"  ?resource wdt:P50 wd:Q1063464.\",\n    \"  ?resource wdt:P98 wd:Q1063464.\",\n    \"  ?resource wdt:P98 wd:Q273624.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q784269. ?resource wdt:P50 wd:Q1063464. ?resource wdt:P98 wd:Q1063464. ?resource wdt:P98 wd:Q273624. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P58 ?resource .\",\n    \"  ?resource wdt:P1040 wd:Q562108 .\",\n    \"  ?resource wdt:P1040 wd:Q1687239 .\",\n    \"  ?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P58 ?resource . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6699 kg:6826 .\",\n      \"?resource kg:2004 kg:7434 .\",\n      \"?resource kg:2004 kg:9084 .\",\n      \"?resource kg:2004 kg:7959 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:6699 kg:6826 . ?resource kg:2004 kg:7434 . ?resource kg:2004 kg:9084 . ?resource kg:2004 kg:7959 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10726498 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10726498 p:P57 wd:Q10726498.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P170 wd:Q10726498.\",\n    \"  ?film wdt:P57 wd:Q10726498.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10726498 wdt:P31 wd:Q11424. wd:Q10726498 p:P57 wd:Q10726498. ?film wdt:P31 wd:Q11424. ?film wdt:P170 wd:Q10726498. ?film wdt:P57 wd:Q10726498. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P162 ?director.\",\n    \"  wd:Q20729551 wdt:P272 ?editor.\",\n    \"  VALUES ?director { wd:Q562108 wd:Q1687239 wd:Q35979475 }\",\n    \"  VALUES ?editor { wd:Q562108 wd:Q1687239 wd:Q35979475 }\",\n    \"  BIND(wd:Q20729551 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P162 ?director. wd:Q20729551 wdt:P272 ?editor. VALUES ?director { wd:Q562108 wd:Q1687239 wd:Q35979475 } VALUES ?editor { wd:Q562108 wd:Q1687239 wd:Q35979475 } BIND(wd:Q20729551 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:4646 }\",\n      \"?film kg:1522 ?director.\",\n      \"?film kg:8452 ?editor.\",\n      \"?director kg:0356 \\\"Ole John\\\" .\",\n      \"?director kg:9844 \\\"Jørgen Leth\\\" .\",\n      \"?director kg:4280 \\\"Jens Jørgen Thorsen\\\" .\",\n      \"?editor kg:0356 \\\"Ole John\\\" .\",\n      \"?editor kg:9844 \\\"Jørgen Leth\\\" .\",\n      \"?editor kg:4280 \\\"Jens Jørgen Thorsen\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?film { kg:4646 } ?film kg:1522 ?director. ?film kg:8452 ?editor. ?director kg:0356 \"Ole John\" . ?director kg:9844 \"Jørgen Leth\" . ?director kg:4280 \"Jens Jørgen Thorsen\" . ?editor kg:0356 \"Ole John\" . ?editor kg:9844 \"Jørgen Leth\" . ?editor kg:4280 \"Jens Jørgen Thorsen\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P162 ?producer.\",\n    \"  ?item wdt:P309 ?executiveProducer.\",\n    \"  VALUES ?producer { wd:Q45781 wd:Q106347 wd:Q106347 }\",\n    \"  VALUES ?executiveProducer { wd:Q45781 wd:Q106347 wd:Q106347 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 ?producer. ?item wdt:P309 ?executiveProducer. VALUES ?producer { wd:Q45781 wd:Q106347 wd:Q106347 } VALUES ?executiveProducer { wd:Q45781 wd:Q106347 wd:Q106347 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q43994 }\",\n    \"  VALUES ?executiveProducer1 { wd:Q95125 }\",\n    \"  VALUES ?executiveProducer2 { wd:Q365090 }\",\n    \"  ?work wdt:P1431 ?director.\",\n    \"  ?work wdt:P162 ?executiveProducer1.\",\n    \"  ?work wdt:P272 ?executiveProducer2.\"\n    ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?director { wd:Q43994 } VALUES ?executiveProducer1 { wd:Q95125 } VALUES ?executiveProducer2 { wd:Q365090 } ?work wdt:P1431 ?director. ?work wdt:P162 ?executiveProducer1. ?work wdt:P272 ?executiveProducer2. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:1348/kg:0318 kg:1033 .\",\n      \"?resource kg:1348/kg:0318 kg:2822 .\",\n      \"?resource kg:1348/kg:0318 kg:8925 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:1348/kg:0318 kg:1033 . ?resource kg:1348/kg:0318 kg:2822 . ?resource kg:1348/kg:0318 kg:8925 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q1546287 wdt:P39 wd:Q106162.\",\n    \"  wd:Q1546287 wdt:P40 wd:Q106162.\",\n    \"  ?sibling wdt:P39 wd:Q106162.\",\n    \"  ?sibling wdt:P40 wd:Q106162.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q1546287 wdt:P39 wd:Q106162. wd:Q1546287 wdt:P40 wd:Q106162. ?sibling wdt:P39 wd:Q106162. ?sibling wdt:P40 wd:Q106162. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q6581072 wdt:P26 ?sibling .\",\n    \"  ?sibling wdt:P21 wd:Q3345 .\",\n    \"  ?sibling wdt:P3373 wd:Q3340 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q6581072 wdt:P26 ?sibling . ?sibling wdt:P21 wd:Q3345 . ?sibling wdt:P3373 wd:Q3340 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n      \"?sibling kg:8383 kg:5838 .\", \"# Female sibling of Ptolemy X Alexander I\"\n      ,\"?sibling kg:7620 kg:3742 .\", \"# Sibling of Ptolemy IX Lathyros\"\n      ,\"?sibling kg:0080 kg:4916 .\", \"# Spouse of Ptolemy IX Lathyros\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling kg:8383 kg:5838 . ?sibling kg:7620 kg:3742 . ?sibling kg:0080 kg:4916 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?show { wd:Q154627 }\",\n    \"  ?resource wdt:P31 wd:Q90865.\",\n    \"  ?resource wdt:P175 wd:Q154627.\",\n    \"  ?resource wdt:P57 wd:Q154627.\",\n    \"  ?resource wdt:P31 wd:Q90865.\",\n    \"  ?resource wdt:P175 wd:Q154627.\",\n    \"  ?resource wdt:P57 wd:Q154627.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?show { wd:Q154627 } ?resource wdt:P31 wd:Q90865. ?resource wdt:P175 wd:Q154627. ?resource wdt:P57 wd:Q154627. ?resource wdt:P31 wd:Q90865. ?resource wdt:P175 wd:Q154627. ?resource wdt:P57 wd:Q154627. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q5542223 wdt:P162 ?director.\",\n    \"  wd:Q5542223 wdt:P58 ?writer.\",\n    \"  wd:Q5542223 wdt:P57 ?producer.\",\n    \"  VALUES ?person { wd:Q1079 wd:Q4500 }\",\n    \"  FILTER (?director IN (?person))\",\n    \"  FILTER (?writer IN (?person))\",\n    \"  FILTER (?producer IN (?person))\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q5542223 wdt:P162 ?director. wd:Q5542223 wdt:P58 ?writer. wd:Q5542223 wdt:P57 ?producer. VALUES ?person { wd:Q1079 wd:Q4500 } FILTER (?director IN (?person)) FILTER (?writer IN (?person)) FILTER (?producer IN (?person)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3585 kg:6250 .\",\n      \"?resource kg:7159 kg:3033 .\",\n      \"?resource kg:0037 kg:8022 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:3585 kg:6250 . ?resource kg:7159 kg:3033 . ?resource kg:0037 kg:8022 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  VALUES ?film { wd:Q15829406 wd:Q376944 wd:Q15829406 }\",\n    \"  ?film wdt:P175 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { VALUES ?film { wd:Q15829406 wd:Q376944 wd:Q15829406 } ?film wdt:P175 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q2336453 wdt:P161 ?costumeDesigner.\",\n    \"  ?costumeDesigner wdt:P106 wd:Q1323191.\",\n    \"  ?costumeDesigner wdt:P1040 wd:Q2615443.\",\n    \"  ?costumeDesigner wdt:P1040 wd:Q3530946.\"\n    ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q2336453 wdt:P161 ?costumeDesigner. ?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P1040 wd:Q2615443. ?costumeDesigner wdt:P1040 wd:Q3530946. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n      \"?costumeDesigner kg:2303 kg:0094 .\",\n      \"?costumeDesigner kg:2244 kg:2954 .\",\n      \"?costumeDesigner kg:1467 kg:2932 .\",\n      \"?costumeDesigner kg:1467 kg:9009 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner kg:2303 kg:0094 . ?costumeDesigner kg:2244 kg:2954 . ?costumeDesigner kg:1467 kg:2932 . ?costumeDesigner kg:1467 kg:9009 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P452 wd:Q746446.\",\n    \"  ?person wdt:P452 wd:Q1142444.\",\n    \"  ?person wdt:P452 wd:Q309844.\",\n    \"  ?person wdt:P452 wd:Q76344.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P452 wd:Q746446. ?person wdt:P452 wd:Q1142444. ?person wdt:P452 wd:Q309844. ?person wdt:P452 wd:Q76344. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\",\n      \"?person wdt:P161 wd:Q2718259 .\",\n      \"?person wdt:P1040 wd:Q658822 .\",\n      \"?person wdt:P1040 wd:Q45602 .\",\n      \"?person wdt:P1040 wd:Q921678 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P161 wd:Q2718259 . ?person wdt:P1040 wd:Q658822 . ?person wdt:P1040 wd:Q45602 . ?person wdt:P1040 wd:Q921678 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person kg:3901/kg:7746 .\",\n      \"?person kg:3901/kg:6275 .\",\n      \"?person kg:3901/kg:4400 .\",\n      \"?person kg:3901/kg:6696 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person kg:3901/kg:7746 . ?person kg:3901/kg:6275 . ?person kg:3901/kg:4400 . ?person kg:3901/kg:6696 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1096478 wd:Q235967 wd:Q134194 wd:Q169394 }.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q1096478.\",\n    \"  ?film wdt:P57 wd:Q235967.\",\n    \"  ?film wdt:P57 wd:Q134194.\",\n    \"  ?film wdt:P57 wd:Q169394.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1096478 wd:Q235967 wd:Q134194 wd:Q169394 }. ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q1096478. ?film wdt:P57 wd:Q235967. ?film wdt:P57 wd:Q134194. ?film wdt:P57 wd:Q169394. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1291210 wd:Q16198328 wd:Q4207234 wd:Q4679987 }.\",\n    \"  ?film wdt:P57 ?director .\",\n    \"  ?film wdt:P1040 ?director .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1291210 wd:Q16198328 wd:Q4207234 wd:Q4679987 }. ?film wdt:P57 ?director . ?film wdt:P1040 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q7906333"], ["wd:Q13385946"], ["wd:Q6817943"], ["wd:Q29454857"], ["wd:Q16250945"], ["wd:Q6692284"], ["wd:Q3572721"], ["wd:Q1573662"], ["wd:Q571960"]], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:1842 kg:P57 ?resource . } UNION \",\n      \"{ kg:3767 kg:Q1291210 ?resource . } UNION \",\n      \"{ kg:1625 kg:Q16198328 ?resource . } UNION \",\n      \"{ kg:0187 kg:Q4207234 ?resource . } UNION \",\n      \"{ kg:5240 kg:Q4679987 ?resource . }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { { kg:1842 kg:P57 ?resource . } UNION { kg:3767 kg:Q1291210 ?resource . } UNION { kg:1625 kg:Q16198328 ?resource . } UNION { kg:0187 kg:Q4207234 ?resource . } UNION { kg:5240 kg:Q4679987 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1234567 wdt:P57 wd:Q1089.\",\n    \"  wd:Q1234567 wdt:P170 wd:Q1234568.\",\n    \"  wd:Q1234567 wdt:P170 wd:Q1234569.\",\n    \"  wd:Q1234567 wdt:P170 wd:Q1234570.\",\n    \"  wd:Q1234567 wdt:P170 wd:Q1234571.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1234567 wdt:P57 wd:Q1089. wd:Q1234567 wdt:P170 wd:Q1234568. wd:Q1234567 wdt:P170 wd:Q1234569. wd:Q1234567 wdt:P170 wd:Q1234570. wd:Q1234567 wdt:P170 wd:Q1234571. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1137372 wdt:P57 ?director.\",\n    \"  wd:Q1137372 wdt:P58 ?writer.\",\n    \"  VALUES ?director { wd:Q47284 wd:Q549956 wd:Q2838329 }\",\n    \"  VALUES ?writer { wd:Q47284 wd:Q549956 wd:Q2838329 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1137372 wdt:P57 ?director. wd:Q1137372 wdt:P58 ?writer. VALUES ?director { wd:Q47284 wd:Q549956 wd:Q2838329 } VALUES ?writer { wd:Q47284 wd:Q549956 wd:Q2838329 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer WHERE {\",\n    \"  kg:8800 kg:2845 ?director .\",\n    \"  kg:8800 kg:6367 ?writer .\",\n    \"  FILTER(?director IN (kg:9444, kg:8076, kg:2370))\",\n    \"  FILTER(?writer IN (kg:9444, kg:8076, kg:2370))\"\n    ]\n}", "normal_query": "SELECT ?director ?writer WHERE { kg:8800 kg:2845 ?director . kg:8800 kg:6367 ?writer . FILTER(?director IN (kg:9444, kg:8076, kg:2370)) FILTER(?writer IN (kg:9444, kg:8076, kg:2370)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10762498 wdt:P57 wd:Q33311.\",\n    \"  wd:Q10762498 p:P161 ?directorStatement.\",\n    \"  ?directorStatement ps:P161 ?director.\",\n    \"  ?director wdt:P31 wd:Q5.\",\n    \"  VALUES ?director {\",\n    \"    wd:Q20744\",\n    \"    wd:Q98444\",\n    \"    wd:Q106664\",\n    \"    wd:Q10369\"\n    ,\n    \"  }.\",\n    \"  wd:Q10762498 p:P57 ?producerStatement.\",\n    \"  ?producerStatement ps:P57 ?producer.\",\n    \"  ?producer wdt:P31 wd:Q5.\",\n    \"  VALUES ?producer {\",\n    \"    wd:Q20744\",\n    \"    wd:Q98444\",\n    \"    wd:Q106664\",\n    \"    wd:Q10369\"\n    ,\n    \"  }.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q10762498 wdt:P57 wd:Q33311. wd:Q10762498 p:P161 ?directorStatement. ?directorStatement ps:P161 ?director. ?director wdt:P31 wd:Q5. VALUES ?director { wd:Q20744 wd:Q98444 wd:Q106664 wd:Q10369 }. wd:Q10762498 p:P57 ?producerStatement. ?producerStatement ps:P57 ?producer. ?producer wdt:P31 wd:Q5. VALUES ?producer { wd:Q20744 wd:Q98444 wd:Q106664 wd:Q10369 }. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q3977597 wdt:P57 ?director.\",\n    \"  wd:Q3977597 wdt:P57 ?producer1.\",\n    \"  wd:Q3977597 wdt:P57 ?producer2.\",\n    \"  wd:Q3977597 wdt:P57 ?producer3.\",\n    \"  VALUES ?director { wd:Q40220 }\",\n    \"  VALUES ?producer1 { wd:Q4235 }\",\n    \"  VALUES ?producer2 { wd:Q117392 }\",\n    \"  VALUES ?producer3 { wd:Q5127380 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q3977597 wdt:P57 ?director. wd:Q3977597 wdt:P57 ?producer1. wd:Q3977597 wdt:P57 ?producer2. wd:Q3977597 wdt:P57 ?producer3. VALUES ?director { wd:Q40220 } VALUES ?producer1 { wd:Q4235 } VALUES ?producer2 { wd:Q117392 } VALUES ?producer3 { wd:Q5127380 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?director { kg:7140 }\",\n      \"VALUES ?producer { kg:7519 }\",\n      \"VALUES ?otherProducer { kg:6489 }\",\n      \"VALUES ?actor { kg:0436 }\",\n      \"?resource kg:4827 ?director .\",\n      \"?resource kg:4827 ?producer .\",\n      \"?resource kg:4827 ?otherProducer .\",\n      \"?resource kg:4827 ?actor .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?director { kg:7140 } VALUES ?producer { kg:7519 } VALUES ?otherProducer { kg:6489 } VALUES ?actor { kg:0436 } ?resource kg:4827 ?director . ?resource kg:4827 ?producer . ?resource kg:4827 ?otherProducer . ?resource kg:4827 ?actor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P162 wd:Q34507.\",\n    \"  ?film wdt:P57 wd:Q34507.\",\n    \"  ?film wdt:P98 wd:Q34507.\",\n    \"  ?film wdt:P146 wd:Q34507.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q34507. ?film wdt:P57 wd:Q34507. ?film wdt:P98 wd:Q34507. ?film wdt:P146 wd:Q34507. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q38222 wdt:P1040 ?film .\",\n    \"  ?film wdt:P58 wd:Q38222 .\",\n    \"  ?film wdt:P162 wd:Q38222 .\",\n    \"  ?film wdt:P272 wd:Q38222 .\",\n    \"  ?film wdt:P1431 wd:Q38222 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q38222 wdt:P1040 ?film . ?film wdt:P58 wd:Q38222 . ?film wdt:P162 wd:Q38222 . ?film wdt:P272 wd:Q38222 . ?film wdt:P1431 wd:Q38222 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q17738"]]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?property { kg:1040 kg:1431 kg:162 kg:272 kg:58 }.\",\n      \"?resource ?property kg:4247 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?resource WHERE { VALUES ?property { kg:1040 kg:1431 kg:162 kg:272 kg:58 }. ?resource ?property kg:4247 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P31 wd:Q33967.\",\n    \"  ?writer wdt:P1080 wd:Q245644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q33967. ?writer wdt:P1080 wd:Q245644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P1040 wd:Q3141131 .\",\n      \"?writer wdt:P58 wd:Q972787 .\",\n      \"?writer wdt:P108 wd:Q672061 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P1040 wd:Q3141131 . ?writer wdt:P58 wd:Q972787 . ?writer wdt:P108 wd:Q672061 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:8835 kg:5091 .\",\n      \"?writer kg:3129 kg:7506 .\",\n      \"?writer kg:3129 kg:1090 .\",\n      \"?writer kg:3129 kg:6665 .\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?writer WHERE { ?writer kg:8835 kg:5091 . ?writer kg:3129 kg:7506 . ?writer kg:3129 kg:1090 . ?writer kg:3129 kg:6665 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q1072468 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1072468 p:P161 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P161 ?executiveProducer.\",\n    \"  VALUES ?executiveProducer {\",\n    \"    wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468\",\n    \"  }.\",\n    \"  wd:Q1072468 p:P161 ?producerStatement.\",\n    \"  ?producerStatement ps:P161 ?producer.\",\n    \"  VALUES ?producer {\",\n    \"    wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468\",\n    \"  }.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q1072468 wdt:P31 wd:Q11424. wd:Q1072468 p:P161 ?executiveProducerStatement. ?executiveProducerStatement ps:P161 ?executiveProducer. VALUES ?executiveProducer { wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468 }. wd:Q1072468 p:P161 ?producerStatement. ?producerStatement ps:P161 ?producer. VALUES ?producer { wd:Q35947 wd:Q20682 wd:Q1072468 wd:Q1072468 }. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q819109 wdt:P1431 ?film .\",\n    \"  ?film wdt:P162 wd:Q1295611 .\",\n    \"  ?film wdt:P162 wd:Q81520 .\",\n    \"  ?film wdt:P162 wd:Q381545 .\",\n    \"  ?film wdt:P162 wd:Q1969128 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q819109 wdt:P1431 ?film . ?film wdt:P162 wd:Q1295611 . ?film wdt:P162 wd:Q81520 . ?film wdt:P162 wd:Q381545 . ?film wdt:P162 wd:Q1969128 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?producer { kg:6364 kg:5787 kg:1759 }.\",\n      \"?movie kg:2384 kg:6811 .\",\n      \"?movie kg:3566 ?producer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?producer { kg:6364 kg:5787 kg:1759 }. ?movie kg:2384 kg:6811 . ?movie kg:3566 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q105642 wdt:P31 wd:Q11424.\",\n    \"  wd:Q105642 p:P577 ?editStatement.\",\n    \"  ?editStatement ps:P577 ?editor.\",\n    \"  ?editor wdt:P106 wd:Q3393864.\",\n    \"  OPTIONAL {\",\n    \"    ?film wdt:P2093 ?director.\",\n    \"    ?director wdt:P106 wd:Q3393864.\",\n    \"    ?film wdt:P577 ?editDate.\",\n    \"    FILTER (?editor = ?director)\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q105642 wdt:P31 wd:Q11424. wd:Q105642 p:P577 ?editStatement. ?editStatement ps:P577 ?editor. ?editor wdt:P106 wd:Q3393864. OPTIONAL { ?film wdt:P2093 ?director. ?director wdt:P106 wd:Q3393864. ?film wdt:P577 ?editDate. FILTER (?editor = ?director) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P1431 wd:Q854990.\",\n      \"?film wdt:P272 wd:Q8006.\",\n      \"?film wdt:P162 wd:Q8006.\",\n      \"?film wdt:P58 wd:Q8006.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P1431 wd:Q854990. ?film wdt:P272 wd:Q8006. ?film wdt:P162 wd:Q8006. ?film wdt:P58 wd:Q8006. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?film { kg:4528 }\",\n      \"?film kg:0687 ?resource .\",\n      \"?resource kg:1512 kg:5037 .\",\n      \"?resource kg:3256 kg:5037 .\",\n      \"?resource kg:7529 kg:5037 .\",\n      \"?resource kg:5101 kg:5037 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?film { kg:4528 } ?film kg:0687 ?resource . ?resource kg:1512 kg:5037 . ?resource kg:3256 kg:5037 . ?resource kg:7529 kg:5037 . ?resource kg:5101 kg:5037 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q340785.\",\n    \"  ?film wdt:P1629 wd:Q169946.\",\n    \"  ?film wdt:P1629 wd:Q169946.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q340785. ?film wdt:P1629 wd:Q169946. ?film wdt:P1629 wd:Q169946. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 wd:Q562108 .\",\n    \"  ?resource wdt:P58 wd:Q1687239 .\",\n    \"  ?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0502 kg:3211 .\",\n      \"?resource kg:0502 kg:1867 .\",\n      \"?resource kg:0502 kg:1654 .\",\n      \"?resource kg:7161 kg:3211 .\",\n      \"?resource kg:7161 kg:1867 .\",\n      \"?resource kg:7161 kg:1654 .\",\n      \"?resource kg:6436 kg:3211 .\",\n      \"?resource kg:6436 kg:1867 .\",\n      \"?resource kg:6436 kg:1654 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:0502 kg:3211 . ?resource kg:0502 kg:1867 . ?resource kg:0502 kg:1654 . ?resource kg:7161 kg:3211 . ?resource kg:7161 kg:1867 . ?resource kg:7161 kg:1654 . ?resource kg:6436 kg:3211 . ?resource kg:6436 kg:1867 . ?resource kg:6436 kg:1654 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q340785.\",\n    \"  ?film wdt:P577 wd:Q340785.\",\n    \"  ?film wdt:P161 wd:Q340785.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q340785. ?film wdt:P577 wd:Q340785. ?film wdt:P161 wd:Q340785. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P58 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q35979475.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q562108. ?film wdt:P58 wd:Q1687239. ?film wdt:P58 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P57 kg:3265 .\",\n      \"?resource kg:P1040 kg:4591 .\",\n      \"?resource kg:P58 kg:7394 .\",\n      \"?resource kg:P58 kg:2292 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:3265 . ?resource kg:P1040 kg:4591 . ?resource kg:P58 kg:7394 . ?resource kg:P58 kg:2292 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  wd:Q1056948 wdt:P31 wd:Q279606.\",\n    \"  wd:Q1056948 wdt:P106 wd:Q11424.\",\n    \"  ?producer wdt:P106 wd:Q11424.\",\n    \"  ?producer wdt:P31 wd:Q279606.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q1056948 wdt:P31 wd:Q279606. wd:Q1056948 wdt:P106 wd:Q11424. ?producer wdt:P106 wd:Q11424. ?producer wdt:P31 wd:Q279606. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  wd:Q1216566 wdt:P344 wd:Q600762 .\",\n    \"  wd:Q1216566 wdt:P344 wd:Q629819 .\",\n    \"  wd:Q1216566 wdt:P344 wd:Q283699 .\",\n    \"  ?producer wdt:P106 wd:Q3282637 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q1216566 wdt:P344 wd:Q600762 . wd:Q1216566 wdt:P344 wd:Q629819 . wd:Q1216566 wdt:P344 wd:Q283699 . ?producer wdt:P106 wd:Q3282637 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer kg:0565 kg:5089 .\",\n      \"?producer kg:0565 kg:6872 .\",\n      \"?producer kg:0565 kg:3725 .\",\n      \"?producer kg:0565 kg:4560 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer kg:0565 kg:5089 . ?producer kg:0565 kg:6872 . ?producer kg:0565 kg:3725 . ?producer kg:0565 kg:4560 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33984.\",\n    \"  ?actor wdt:P571 ?birthDate.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P106 wd:Q1080055.\",\n    \"  ?actor wdt:P279* wd:Q33984.\",\n    \"  ?actor wdt:P106 wd:Q1080", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor wdt:P106 wd:Q33999.\",\n      \"?actor wdt:P344 wd:Q3485595.\",\n      \"?actor wdt:P344 wd:Q1473406.\",\n      \"?actor wdt:P344 wd:Q3016313.\",\n      \"?actor wdt:P344 wd:Q862058.\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P344 wd:Q3485595. ?actor wdt:P344 wd:Q1473406. ?actor wdt:P344 wd:Q3016313. ?actor wdt:P344 wd:Q862058. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0059 kg:5148 .\",\n      \"?resource kg:5460 kg:9749 .\",\n      \"?resource kg:3455 kg:8843 .\",\n      \"?resource kg:3455 kg:6182 .\",\n      \"?resource kg:3455 kg:9120 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:0059 kg:5148 . ?resource kg:5460 kg:9749 . ?resource kg:3455 kg:8843 . ?resource kg:3455 kg:6182 . ?resource kg:3455 kg:9120 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1629 wd:Q30475.\",\n    \"  ?film wdt:P57 wd:Q8447.\",\n    \"  ?film wdt:P161 wd:Q30475.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1629 wd:Q30475. ?film wdt:P57 wd:Q8447. ?film wdt:P161 wd:Q30475. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q448604 wd:Q363666 wd:Q452794 }\",\n    \"  ?film wdt:P1431 ?director.\",\n    \"  ?film wdt:P58 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q448604 wd:Q363666 wd:Q452794 } ?film wdt:P1431 ?director. ?film wdt:P58 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q497256"]], "gold": [["wd:Q497256"]]}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P1431/kg:Q448604 .\",\n      \"?resource kg:P1431/kg:Q363666 .\",\n      \"?resource kg:P1431/kg:Q452794 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1431/kg:Q448604 . ?resource kg:P1431/kg:Q363666 . ?resource kg:P1431/kg:Q452794 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q1064278 wd:Q359347 wd:Q169944 }.\",\n    \"  ?director wdt:P57 wd:Q11424.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q1064278 wd:Q359347 wd:Q169944 }. ?director wdt:P57 wd:Q11424. ?film wdt:P31 wd:Q11424. ?film wdt:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"VALUES ?person { wd:Q562108 wd:Q1687239 wd:Q35979475 }.\",\n      \"?person wdt:P57 ?film .\",\n      \"?film wdt:P58 ?role .\",\n      \"FILTER(?role IN (wdt:P1040, wdt:P58))\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { VALUES ?person { wd:Q562108 wd:Q1687239 wd:Q35979475 }. ?person wdt:P57 ?film . ?film wdt:P58 ?role . FILTER(?role IN (wdt:P1040, wdt:P58)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:2104 wdt:P57 ?resource . } UNION \",\n      \"{ kg:6065 wdt:P58 ?resource . } UNION \",\n      \"{ kg:7162 wdt:P1040 ?resource . }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2104 wdt:P57 ?resource . } UNION { kg:6065 wdt:P58 ?resource . } UNION { kg:7162 wdt:P1040 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q152468 wdt:P31 wd:Q11424.\",\n    \"  wd:Q152468 wdt:P57 wd:Q109666.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q109666.\",\n    \"  ?film wdt:P58 wd:Q152468.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q152468 wdt:P31 wd:Q11424. wd:Q152468 wdt:P57 wd:Q109666. ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q109666. ?film wdt:P58 wd:Q152468. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q679023 wdt:P57 ?director.\",\n    \"  VALUES ?director { wd:Q3772 wd:Q298255 wd:Q358714 wd:Q47284 wd:Q522057 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q679023 wdt:P57 ?director. VALUES ?director { wd:Q3772 wd:Q298255 wd:Q358714 wd:Q47284 wd:Q522057 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0251/kg:6456 .\",\n      \"?resource kg:4381/kg:1364 .\",\n      \"?resource kg:4381/kg:6928 .\",\n      \"?resource kg:4381/kg:2428 .\",\n      \"?resource kg:4381/kg:5433 .\",\n      \"?resource kg:4381/kg:3272 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:0251/kg:6456 . ?resource kg:4381/kg:1364 . ?resource kg:4381/kg:6928 . ?resource kg:4381/kg:2428 . ?resource kg:4381/kg:5433 . ?resource kg:4381/kg:3272 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 }\",\n    \"  ?film wdt:P57 wd:Q123456.\",\n    \"  ?film wdt:P50 wd:Q123456.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q23456789 wd:Q34567890 } ?film wdt:P57 wd:Q123456. ?film wdt:P50 wd:Q123456. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  VALUES ?film { wd:Q686125 wd:Q567519 wd:Q327427 }\",\n    \"  ?film wdt:P58 ?producer.\",\n    \"  ?producer wdt:P106 wd:Q3282637.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { VALUES ?film { wd:Q686125 wd:Q567519 wd:Q327427 } ?film wdt:P58 ?producer. ?producer wdt:P106 wd:Q3282637. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q44426"], ["wd:Q345771"]], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?film kg:P106 kg:Q3282637 .\",\n      \"?film kg:P1040 ?producer .\",\n      \"FILTER (?film IN (kg:5732, kg:6262, kg:4507, kg:8984))\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?film kg:P106 kg:Q3282637 . ?film kg:P1040 ?producer . FILTER (?film IN (kg:5732, kg:6262, kg:4507, kg:8984)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q106245 }\",\n    \"  VALUES ?writer { wd:Q397840 wd:Q106245 wd:Q106245 wd:Q106245 wd:Q106245 }\",\n    \"  ?work wdt:P571 ?director.\",\n    \"  ?work wdt:P582 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { VALUES ?director { wd:Q106245 } VALUES ?writer { wd:Q397840 wd:Q106245 wd:Q106245 wd:Q106245 wd:Q106245 } ?work wdt:P571 ?director. ?work wdt:P582 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?director { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 }\",\n    \"  VALUES ?writer { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 }\",\n    \"  ?resource wdt:P58 ?director.\",\n    \"  ?resource wdt:P57 ?writer.\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?director { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 } VALUES ?writer { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 } ?resource wdt:P58 ?director. ?resource wdt:P57 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P57/kg:Q4500 .\",\n      \"?resource kg:P58/kg:Q15042700 .\",\n      \"?resource kg:P58/kg:Q5542223 .\",\n      \"?resource kg:P58/kg:Q7174311 .\",\n      \"?resource kg:P58/kg:Q7407299 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57/kg:Q4500 . ?resource kg:P58/kg:Q15042700 . ?resource kg:P58/kg:Q5542223 . ?resource kg:P58/kg:Q7174311 . ?resource kg:P58/kg:Q7407299 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P634 ?editor.\",\n    \"  VALUES ?director { wd:Q206460 }\",\n    \"  VALUES ?writer { wd:Q571440 }\",\n    \"  VALUES ?editor { wd:Q98464 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P571 ?director. ?film wdt:P98 ?writer. ?film wdt:P634 ?editor. VALUES ?director { wd:Q206460 } VALUES ?writer { wd:Q571440 } VALUES ?editor { wd:Q98464 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P57 wd:Q562108.\",\n      \"?film wdt:P1040 wd:Q1687239.\",\n      \"?film wdt:P58 wd:Q35979475.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q562108. ?film wdt:P1040 wd:Q1687239. ?film wdt:P58 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:P57 kg:9462 .\",\n      \"?resource kg:P1040 kg:8696 .\",\n      \"?resource kg:P58 kg:1769 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:9462 . ?resource kg:P1040 kg:8696 . ?resource kg:P58 kg:1769 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorExecutive WHERE {\",\n    \"  VALUES ?film { wd:Q108967 wd:Q243544 wd:Q108969 wd:Q108970 }\",\n    \"  ?film wdt:P175 ?filmEditorExecutive.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditorExecutive WHERE { VALUES ?film { wd:Q108967 wd:Q243544 wd:Q108969 wd:Q108970 } ?film wdt:P175 ?filmEditorExecutive. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorExecutive WHERE {\",\n      \"?filmEditorExecutive wdt:P106 wd:Q7042855.\",\n      \"?filmEditorExecutive wdt:P1431 wd:Q3968346.\",\n      \"?filmEditorExecutive wdt:P1431 wd:Q165713.\",\n      \"?filmEditorExecutive wdt:P1431 wd:Q181803.\",\n      \"?filmEditorExecutive wdt:P1431 wd:Q17738.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditorExecutive WHERE { ?filmEditorExecutive wdt:P106 wd:Q7042855. ?filmEditorExecutive wdt:P1431 wd:Q3968346. ?filmEditorExecutive wdt:P1431 wd:Q165713. ?filmEditorExecutive wdt:P1431 wd:Q181803. ?filmEditorExecutive wdt:P1431 wd:Q17738. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorExecutive WHERE {\",\n      \"?filmEditorExecutive kg:1414 kg:2187 .\",\n      \"?filmEditorExecutive kg:1414 kg:0616 .\",\n      \"?filmEditorExecutive kg:1414 kg:9541 .\",\n      \"?filmEditorExecutive kg:1414 kg:6923 .\",\n      \"?filmEditorExecutive kg:1414 kg:0095 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditorExecutive WHERE { ?filmEditorExecutive kg:1414 kg:2187 . ?filmEditorExecutive kg:1414 kg:0616 . ?filmEditorExecutive kg:1414 kg:9541 . ?filmEditorExecutive kg:1414 kg:6923 . ?filmEditorExecutive kg:1414 kg:0095 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Stop for Bud\\\"@en.\",\n    \"  OPTIONAL { ?film wdt:P577 ?writer. }\",\n    \"  OPTIONAL { ?film wdt:P98 ?editor. }\",\n    \"  OPTIONAL { ?film wdt:P162 ?director. }\",\n    \"  FILTER (NOT EXISTS { ?film wdt:P31 wd:Q47570 . })\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Stop for Bud\"@en. OPTIONAL { ?film wdt:P577 ?writer. } OPTIONAL { ?film wdt:P98 ?editor. } OPTIONAL { ?film wdt:P162 ?director. } FILTER (NOT EXISTS { ?film wdt:P31 wd:Q47570 . }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q20729551"]], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q20729551 wdt:P57 ?writer.\",\n    \"  wd:Q20729551 wdt:P58 ?editor.\",\n    \"  wd:Q20729551 wdt:P1040 ?director.\",\n    \"  VALUES ?director { wd:Q35979475 wd:Q562108 wd:Q1687239 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q20729551 wdt:P57 ?writer. wd:Q20729551 wdt:P58 ?editor. wd:Q20729551 wdt:P1040 ?director. VALUES ?director { wd:Q35979475 wd:Q562108 wd:Q1687239 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:5415 kg:4575 .\",\n      \"?resource kg:5271 kg:5376 .\",\n      \"?resource kg:7843 kg:0625 .\",\n      \"?resource kg:7843 kg:1073 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:5415 kg:4575 . ?resource kg:5271 kg:5376 . ?resource kg:7843 kg:0625 . ?resource kg:7843 kg:1073 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P161 ?writer.\",\n    \"  ?film wdt:P162 ?cinematographer.\",\n    \"  FILTER(?releaseDate = \\\"1938-04-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?releaseDate. ?film wdt:P175 ?director. ?film wdt:P161 ?writer. ?film wdt:P162 ?cinematographer. FILTER(?releaseDate = \"1938-04-01T00:00:00Z\"^^xsd:dateTime). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P344 wd:Q613974.\",\n      \"?writer wdt:P344 wd:Q208910.\",\n      \"?writer wdt:P344 wd:Q165713.\",\n      \"?writer wdt:P1431 wd:Q1869678.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P344 wd:Q613974. ?writer wdt:P344 wd:Q208910. ?writer wdt:P344 wd:Q165713. ?writer wdt:P1431 wd:Q1869678. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:3874 kg:9326 .\",\n      \"?writer kg:3874 kg:4082 .\",\n      \"?writer kg:1569 kg:1639 .\",\n      \"?writer kg:1569 kg:0817 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:3874 kg:9326 . ?writer kg:3874 kg:4082 . ?writer kg:1569 kg:1639 . ?writer kg:1569 kg:0817 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P1686 ?director.\",\n    \"  ?film wdt:P1097 ?writer.\",\n    \"  ?film wdt:P31 wd:Q2466344.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P1686 ?director.\",\n    \"  ?film wdt:P1097 ?writer.\",\n    \"  ?producer wdt:P106 wd:Q3393466.\",\n    \"  ?producer wdt:P2868 ?film.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?releaseDate. ?film wdt:P1686 ?director. ?film wdt:P1097 ?writer. ?film wdt:P31 wd:Q2466344. ?film wdt:P577 ?releaseDate. ?film wdt:P1686 ?director. ?film wdt:P1097 ?writer. ?producer wdt:P106 wd:Q3393466. ?producer wdt:P2868 ?film. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film wdt:P1431 wd:Q1361018 .\", \"  ?film wdt:P1431 wd:Q2086445 .\",\n    \"  ?film wdt:P57 ?producer .\",\n    \"  ?producer wdt:P106 wd:Q3282637 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P1431 wd:Q1361018 . ?film wdt:P1431 wd:Q2086445 . ?film wdt:P57 ?producer . ?producer wdt:P106 wd:Q3282637 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n      \"?producer kg:3898 kg:1715 .\",\n      \"?producer kg:4769 kg:2686 .\",\n      \"?producer kg:4465 kg:4507 .\",\n      \"?producer kg:3505 kg:6194 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?producer WHERE { ?producer kg:3898 kg:1715 . ?producer kg:4769 kg:2686 . ?producer kg:4465 kg:4507 . ?producer kg:3505 kg:6194 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 wd:Q198606.\",\n    \"  ?film wdt:P161 wd:Q106664;\",\n    \"  wdt:P162 wd:Q106664;\",\n    \"  wdt:P57 wd:Q106664.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 wd:Q198606. ?film wdt:P161 wd:Q106664; wdt:P162 wd:Q106664; wdt:P57 wd:Q106664. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q497256 wdt:P1431 ?writer.\",\n    \"  wd:Q497256 wdt:P58 ?director.\",\n    \"  wd:Q497256 wdt:P57 ?executiveProducer.\",\n    \"  ?film wdt:P1431 wd:Q497256.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q497256 wdt:P1431 ?writer. wd:Q497256 wdt:P58 ?director. wd:Q497256 wdt:P57 ?executiveProducer. ?film wdt:P1431 wd:Q497256. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:5037 kg:5569 .\",\n      \"?resource kg:5037 kg:6275 .\",\n      \"?resource kg:5037 kg:8277 .\",\n      \"?resource kg:6431 kg:6925 .\",\n      \"?resource kg:6431 kg:5569 .\",\n      \"?resource kg:6431 kg:8277 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:5037 kg:5569 . ?resource kg:5037 kg:6275 . ?resource kg:5037 kg:8277 . ?resource kg:6431 kg:6925 . ?resource kg:6431 kg:5569 . ?resource kg:6431 kg:8277 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?publicationDate.\",\n    \"  ?film wdt:P1680 ?writer.\",\n    \"  ?film wdt:P1920 ?executiveProducer.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  FILTER (\",\n    \"    ?writer IN (wd:Q34064, wd:Q38344, wd:Q38345) && \",\n    \"    ?executiveProducer IN (wd:Q34064, wd:Q38344, wd:Q38345) && \",\n    \"    ?director IN (wd:Q34064, wd:Q38344, wd:Q38345)\",\n    \"  )\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?publicationDate. ?film wdt:P1680 ?writer. ?film wdt:P1920 ?executiveProducer. ?film wdt:P57 ?director. FILTER ( ?writer IN (wd:Q34064, wd:Q38344, wd:Q38345) && ?executiveProducer IN (wd:Q34064, wd:Q38344, wd:Q38345) && ?director IN (wd:Q34064, wd:Q38344, wd:Q38345) ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q363666 wdt:P1431 ?writer.\",\n    \"  wd:Q363666 wdt:P58 ?director.\",\n    \"  wd:Q363666 wdt:P57 ?executiveProducer.\",\n    \"  VALUES ?writer { wd:Q497256 }\",\n    \"  VALUES ?director { wd:Q448604 wd:Q452794 }\",\n    \"  VALUES ?executiveProducer { wd:Q497256 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q363666 wdt:P1431 ?writer. wd:Q363666 wdt:P58 ?director. wd:Q363666 wdt:P57 ?executiveProducer. VALUES ?writer { wd:Q497256 } VALUES ?director { wd:Q448604 wd:Q452794 } VALUES ?executiveProducer { wd:Q497256 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:5898 kg:3218 .\",\n      \"?resource kg:6616 kg:3382 .\",\n      \"?resource kg:4915 kg:6384 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:5898 kg:3218 . ?resource kg:6616 kg:3382 . ?resource kg:4915 kg:6384 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?director ?executiveProducer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084679.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P162 ?writer.\",\n    \"  ?film wdt:P1686 ?executiveProducer.\",\n    \"  FILTER(?releaseDate >= \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime)\",\n    \"  VALUES ?director {wd:Q34579}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?director ?executiveProducer WHERE { ?film wdt:P31 wd:Q1084679. ?film wdt:P577 ?releaseDate. ?film wdt:P175 ?director. ?film wdt:P162 ?writer. ?film wdt:P1686 ?executiveProducer. FILTER(?releaseDate >= \"2000-01-01T00:00:00Z\"^^xsd:dateTime) VALUES ?director {wd:Q34579} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P1431 wd:Q2085.\",\n      \"?writer wdt:P1431 wd:Q1140578.\",\n      \"?writer wdt:P1431 wd:Q583406.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P1431 wd:Q2085. ?writer wdt:P1431 wd:Q1140578. ?writer wdt:P1431 wd:Q583406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:7564 kg:6667 .\",\n      \"?writer kg:7564 kg:1652 .\",\n      \"?writer kg:7564 kg:6807 .\",\n      \"?writer kg:7564 kg:6779 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:7564 kg:6667 . ?writer kg:7564 kg:1652 . ?writer kg:7564 kg:6807 . ?writer kg:7564 kg:6779 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  VALUES ?director { wd:Q106427 wd:Q35987 wd:Q106427 wd:Q106427 wd:Q106427 }.\",\n    \"  ?film wdt:P57 wd:Q106427 .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES ?director { wd:Q106427 wd:Q35987 wd:Q106427 wd:Q106427 wd:Q106427 }. ?film wdt:P57 wd:Q106427 . ?film wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"  ?film wdt:P57 wd:Q7546 .\",\n    \"  ?film wdt:P57 wd:Q982339 .\",\n    \"  ?film wdt:P57 wd:Q1033656 .\",\n    \"  ?film wdt:P57 wd:Q116760 .\",\n    \"  ?film wdt:P57 wd:Q1365463 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q7546 . ?film wdt:P57 wd:Q982339 . ?film wdt:P57 wd:Q1033656 . ?film wdt:P57 wd:Q116760 . ?film wdt:P57 wd:Q1365463 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q222633"]], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:5200/kg:57 kg:7158 .\",\n      \"?film kg:5200/kg:57 kg:4664 .\",\n      \"?film kg:5200/kg:57 kg:5212 .\",\n      \"?film kg:5200/kg:57 kg:5061 .\",\n      \"?film kg:5200/kg:57 kg:8025 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:5200/kg:57 kg:7158 . ?film kg:5200/kg:57 kg:4664 . ?film kg:5200/kg:57 kg:5212 . ?film kg:5200/kg:57 kg:5061 . ?film kg:5200/kg:57 kg:8025 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q1074268 wdt:P953 ?composer.\",\n    \"  ?composer wdt:P106 wd:Q33988.\",\n    \"  ?composer wdt:P106 wd:Q1086291.\",\n    \"  ?composer wdt:P106 wd:Q47574.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?composer WHERE { wd:Q1074268 wdt:P953 ?composer. ?composer wdt:P106 wd:Q33988. ?composer wdt:P106 wd:Q1086291. ?composer wdt:P106 wd:Q47574. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P344 wd:Q1653396.\",\n      \"?composer wdt:P161 wd:Q656357.\",\n      \"?composer wdt:P161 wd:Q192115.\",\n      \"?composer wdt:P86 wd:Q550196.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P344 wd:Q1653396. ?composer wdt:P161 wd:Q656357. ?composer wdt:P161 wd:Q192115. ?composer wdt:P86 wd:Q550196. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8021/kg:1324 .\",\n      \"?resource kg:8021/kg:7836 .\",\n      \"?resource kg:9896/kg:8138 .\",\n      \"?resource kg:9896/kg:7836 .\",\n      \"?resource kg:9896/kg:1324 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8021/kg:1324 . ?resource kg:8021/kg:7836 . ?resource kg:9896/kg:8138 . ?resource kg:9896/kg:7836 . ?resource kg:9896/kg:1324 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?composer WHERE {\",\n        \"?composer wdt:P31 wd:Q33960.\",\n        \"?composer wdt:P57 wd:Q28424.\",\n        \"?composer wdt:P106 wd:Q33960.\",\n        \"?composer wdt:P106 wd:Q1086595.\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q33960. ?composer wdt:P57 wd:Q28424. ?composer wdt:P106 wd:Q33960. ?composer wdt:P106 wd:Q1086595. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n      \"?composer wdt:P1040 wd:Q3986814.\",\n      \"?composer wdt:P1040 wd:Q238211.\",\n      \"?composer wdt:P161 wd:Q45602.\",\n      \"?composer wdt:P86 wd:Q199039.\",\n      \"?composer wdt:P86 wd:Q470895.\"\n    ]\n  }\n  \t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P1040 wd:Q3986814. ?composer wdt:P1040 wd:Q238211. ?composer wdt:P161 wd:Q45602. ?composer wdt:P86 wd:Q199039. ?composer wdt:P86 wd:Q470895. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4883 kg:2240 .\",\n      \"?resource kg:4883 kg:6301 .\",\n      \"?resource kg:9905 kg:9197 .\",\n      \"?resource kg:8510 kg:3454 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:4883 kg:2240 . ?resource kg:4883 kg:6301 . ?resource kg:9905 kg:9197 . ?resource kg:8510 kg:3454 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q206478 wdt:P57 wd:Q13944.\",\n    \"  wd:Q206478 wdt:P161 wd:Q13944.\",\n    \"  wd:Q206478 wdt:P162 wd:Q13944.\",\n    \"  ?film wdt:P57 wd:Q206478.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q206478 wdt:P57 wd:Q13944. wd:Q206478 wdt:P161 wd:Q13944. wd:Q206478 wdt:P162 wd:Q13944. ?film wdt:P57 wd:Q206478. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q448604 wdt:P1431 ?film .\",\n    \"  wd:Q363666 wdt:P1431 ?film .\",\n    \"  wd:Q452794 wdt:P1431 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q448604 wdt:P1431 ?film . wd:Q363666 wdt:P1431 ?film . wd:Q452794 wdt:P1431 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:6282 kg:0270 .\",\n      \"?film kg:6837 kg:6583 .\",\n      \"?film kg:6390 kg:6837 .\",\n      \"?film kg:8418 kg:8970 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:6282 kg:0270 . ?film kg:6837 kg:6583 . ?film kg:6390 kg:6837 . ?film kg:8418 kg:8970 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P203 ?editor.\",\n    \"  VALUES ?director {wd:Q6466220} \",\n    \"  VALUES ?writer {wd:Q1579640} \",\n    \"  VALUES ?editor {wd:Q804940} \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P571 ?director. ?film wdt:P98 ?writer. ?film wdt:P203 ?editor. VALUES ?director {wd:Q6466220} VALUES ?writer {wd:Q1579640} VALUES ?editor {wd:Q804940} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q74535"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P161 wd:Q5836844.\",\n      \"?film wdt:P57 wd:Q5658534.\",\n      \"?film wdt:P58 wd:Q4022902.\",\n      \"?film wdt:P1040 wd:Q4023328.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P161 wd:Q5836844. ?film wdt:P57 wd:Q5658534. ?film wdt:P58 wd:Q4022902. ?film wdt:P1040 wd:Q4023328. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0443/kg:P1040 kg:4619 .\",\n      \"?resource kg:0443/kg:P1040 kg:6471 .\",\n      \"?resource kg:0443/kg:P1040 kg:7010 .\",\n      \"?resource kg:0443/kg:P1040 kg:2377 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0443/kg:P1040 kg:4619 . ?resource kg:0443/kg:P1040 kg:6471 . ?resource kg:0443/kg:P1040 kg:7010 . ?resource kg:0443/kg:P1040 kg:2377 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q74535"]]}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor ?executiveProducer ?editor WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film rdfs:label \\\"Pietà\\\"@en.\",\n    \"  ?film wdt:P57 wd:Q1086964.\",\n    \"  ?filmEditor wdt:P106 wd:Q3393462.\",\n    \"  ?filmEditor wdt:P161 wd:Q1086964.\",\n    \"  ?executiveProducer wdt:P106 wd:Q574106.\",\n    \"  ?executiveProducer wdt:P161 wd:Q1086964.\",\n    \"  ?editor wdt:P106 wd:Q3393462.\",\n    \"  ?editor wdt:P161 wd:Q1086964.\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?filmEditor ?executiveProducer ?editor WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label \"Pietà\"@en. ?film wdt:P57 wd:Q1086964. ?filmEditor wdt:P106 wd:Q3393462. ?filmEditor wdt:P161 wd:Q1086964. ?executiveProducer wdt:P106 wd:Q574106. ?executiveProducer wdt:P161 wd:Q1086964. ?editor wdt:P106 wd:Q3393462. ?editor wdt:P161 wd:Q1086964. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor wdt:P106 wd:Q7042855.\",\n      \"?filmEditor wdt:P1040 wd:Q483197.\",\n      \"?filmEditor wdt:P1431 wd:Q483197.\",\n      \"?filmEditor wdt:P1040 wd:Q484679.\",\n      \"?filmEditor wdt:P1431 wd:Q484679.\",\n      \"?filmEditor wdt:P58 wd:Q13471372.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855. ?filmEditor wdt:P1040 wd:Q483197. ?filmEditor wdt:P1431 wd:Q483197. ?filmEditor wdt:P1040 wd:Q484679. ?filmEditor wdt:P1431 wd:Q484679. ?filmEditor wdt:P58 wd:Q13471372. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor kg:P106 kg:Q7042855 .\", \"# film editor occupation\",\n      \"?filmEditor kg:P1040 kg:Q483197 .\", \"# executive producer role\",\n      \"?filmEditor kg:P1431 kg:Q484679 .\", \"# edit role\",\n      \"?filmEditor kg:P58 kg:Q13471372 .\", \"# film editor for Pietà\",\n      \"?filmEditor kg:P58 kg:Q13471372 .\", \"# film editor for Dream\",\n      \"?filmEditor kg:P58 kg:Q13471372 .\", \"# film editor for Moebius\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor kg:P106 kg:Q7042855 . ?filmEditor kg:P1040 kg:Q483197 . ?filmEditor kg:P1431 kg:Q484679 . ?filmEditor kg:P58 kg:Q13471372 . ?filmEditor kg:P58 kg:Q13471372 . ?filmEditor kg:P58 kg:Q13471372 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducerExecutive WHERE {\",\n    \"  ?filmProducerExecutive wdt:P106 wd:Q3393466.\",\n    \"  ?filmProducerExecutive wdt:P577 ?date.\",\n    \"  ?filmProducerExecutive p:P2868 ?statement1.\",\n    \"  ?statement1 ps:P2868 wd:Q1065669.\",\n    \"  ?filmProducerExecutive p:P31 ?statement2.\",\n    \"  ?statement2 ps:P31 wd:Q47461344.\",\n    \"  ?filmProducerExecutive p:P184 ?statement3.\",\n    \"  ?statement3 ps:P184 wd:Q509664.\",\n    \"  ?filmProducerExecutive p:P2868 ?statement4.\",\n    \"  ?statement4 ps:P2868 wd:Q756444.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmProducerExecutive WHERE { ?filmProducerExecutive wdt:P106 wd:Q3393466. ?filmProducerExecutive wdt:P577 ?date. ?filmProducerExecutive p:P2868 ?statement1. ?statement1 ps:P2868 wd:Q1065669. ?filmProducerExecutive p:P31 ?statement2. ?statement2 ps:P31 wd:Q47461344. ?filmProducerExecutive p:P184 ?statement3. ?statement3 ps:P184 wd:Q509664. ?filmProducerExecutive p:P2868 ?statement4. ?statement4 ps:P2868 wd:Q756444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"?producer wdt:P106 wd:Q3282637.\",\n    \"?producer wdt:P1431 wd:Q5437360.\",\n    \"?producer wdt:P1431 wd:Q6084069.\",\n    \"?producer wdt:P1431 wd:Q12813010.\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637. ?producer wdt:P1431 wd:Q5437360. ?producer wdt:P1431 wd:Q6084069. ?producer wdt:P1431 wd:Q12813010. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2687 kg:3720 .\",\n      \"?resource kg:2687 kg:8941 .\",\n      \"?resource kg:2687 kg:6509 .\",\n      \"?resource kg:2687 kg:4674 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:2687 kg:3720 . ?resource kg:2687 kg:8941 . ?resource kg:2687 kg:6509 . ?resource kg:2687 kg:4674 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  wd:Q1234567 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q36639.\",\n    \"  ?spouse wdt:P1082 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { wd:Q1234567 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q36639. ?spouse wdt:P1082 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P737 wd:Q63993096.\",\n      \"?writer wdt:P26 wd:Q312258.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P737 wd:Q63993096. ?writer wdt:P26 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:0379 kg:1581 .\",\n      \"?writer kg:0379 kg:1569 .\",\n      \"?writer kg:0379 kg:8834 .\",\n      \"?writer kg:0109 kg:6541 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:0379 kg:1581 . ?writer kg:0379 kg:1569 . ?writer kg:0379 kg:8834 . ?writer kg:0109 kg:6541 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?star ?director ?composer WHERE {\",\n    \"  wd:Q106428 wdt:P31 wd:Q571.\",\n    \"  wd:Q106428 wdt:P179 ?writer.\",\n    \"  wd:Q106428 wdt:P106 ?star.\",\n    \"  wd:Q106428 wdt:P57 ?director.\",\n    \"  wd:Q106428 wdt:P39 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?star ?director ?composer WHERE { wd:Q106428 wdt:P31 wd:Q571. wd:Q106428 wdt:P179 ?writer. wd:Q106428 wdt:P106 ?star. wd:Q106428 wdt:P57 ?director. wd:Q106428 wdt:P39 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  wd:Q109116 wdt:P161 ?director.\",\n    \"  ?director wdt:P86 wd:Q1140317.\",\n    \"  ?director wdt:P58 wd:Q166739.\",\n    \"  ?writer wdt:P57 ?director.\"\n    ]\n}\n  \t", "normal_query": "SELECT ?writer WHERE { wd:Q109116 wdt:P161 ?director. ?director wdt:P86 wd:Q1140317. ?director wdt:P58 wd:Q166739. ?writer wdt:P57 ?director. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:1821/kg:9331 kg:0717 .\",\n      \"?writer kg:1821/kg:4662 kg:2052 .\",\n      \"?writer kg:1821/kg:4662 kg:2672 .\",\n      \"?writer kg:1821/kg:9331 kg:5380 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:1821/kg:9331 kg:0717 . ?writer kg:1821/kg:4662 kg:2052 . ?writer kg:1821/kg:4662 kg:2672 . ?writer kg:1821/kg:9331 kg:5380 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?film { wd:Q1549607 wd:Q28366 }\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q33949 .\",\n    \"  ?resource wdt:P175 wd:Q128444 .\",\n    \"  ?resource wdt:P175 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?film { wd:Q1549607 wd:Q28366 } ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q33949 . ?resource wdt:P175 wd:Q128444 . ?resource wdt:P175 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q192115 wdt:P344 ?cinematographer.\",\n    \"  ?cinematographer wdt:P161 wd:Q1165050.\",\n    \"  ?cinematographer wdt:P57 wd:Q1165050.\",\n    \"  ?cinematographer wdt:P1040 wd:Q1165050.\",\n    \"  ?cinematographer wdt:P58 wd:Q1165050.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q192115 wdt:P344 ?cinematographer. ?cinematographer wdt:P161 wd:Q1165050. ?cinematographer wdt:P57 wd:Q1165050. ?cinematographer wdt:P1040 wd:Q1165050. ?cinematographer wdt:P58 wd:Q1165050. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3755 kg:2044 .\",\n      \"?resource kg:6918 kg:4869 .\",\n      \"?resource kg:9519 kg:4869 .\",\n      \"?resource kg:2156 kg:4869 .\",\n      \"?resource kg:8142 kg:4869 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:3755 kg:2044 . ?resource kg:6918 kg:4869 . ?resource kg:9519 kg:4869 . ?resource kg:2156 kg:4869 . ?resource kg:8142 kg:4869 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?star WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 ?cinematographer.\",\n    \"  ?film wdt:P175 ?star.\",\n    \"  ?film wdt:P31 wd:Q2066139.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?star WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 ?cinematographer. ?film wdt:P175 ?star. ?film wdt:P31 wd:Q2066139. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P161 wd:Q2082586 .\", \"# Contagion\",\n      \"?film wdt:P161 wd:Q730888 .\", \"# Schizopolis\",\n      \"?film wdt:P161 wd:Q205447 .\", \"# Ocean's Eleven\",\n      \"?film wdt:P161 wd:Q1432710 .\", \"# Full Frontal\",\n      \"?film wdt:P161 wd:Q17893055 .\", \"# Magic Mike XXL\",\n      \"?film wdt:P344 ?cinematographer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P161 wd:Q2082586 . ?film wdt:P161 wd:Q730888 . ?film wdt:P161 wd:Q205447 . ?film wdt:P161 wd:Q1432710 . ?film wdt:P161 wd:Q17893055 . ?film wdt:P344 ?cinematographer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7135 kg:8692 .\",\n      \"?resource kg:7135 kg:8110 .\",\n      \"?resource kg:7135 kg:8430 .\",\n      \"?resource kg:7135 kg:0268 .\",\n      \"?resource kg:7135 kg:6465 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:7135 kg:8692 . ?resource kg:7135 kg:8110 . ?resource kg:7135 kg:8430 . ?resource kg:7135 kg:0268 . ?resource kg:7135 kg:6465 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  wd:Q10569428 wdt:P31 wd:Q7366.\",\n    \"  wd:Q10569428 wdt:P170 ?cinematographer.\",\n    \"  wd:Q10569428 wdt:P171 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?editor WHERE { wd:Q10569428 wdt:P31 wd:Q7366. wd:Q10569428 wdt:P170 ?cinematographer. wd:Q10569428 wdt:P171 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film wdt:P344 wd:Q56756907 .\",\n      \"?film wdt:P161 ?cinematographer .\",\n      \"?film wdt:P1040 wd:Q862058 .\",\n      \"?film wdt:P1040 wd:Q3641257 .\",\n      \"?film wdt:P1040 wd:Q114819 .\",\n      \"?film wdt:P1040 wd:Q2085 .\",\n      \"?film wdt:P1040 wd:Q507285 .\",\n      \"?film wdt:P1040 wd:Q3485595 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P344 wd:Q56756907 . ?film wdt:P161 ?cinematographer . ?film wdt:P1040 wd:Q862058 . ?film wdt:P1040 wd:Q3641257 . ?film wdt:P1040 wd:Q114819 . ?film wdt:P1040 wd:Q2085 . ?film wdt:P1040 wd:Q507285 . ?film wdt:P1040 wd:Q3485595 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n      \"?film kg:4229 kg:4756 .\",\n      \"?film kg:4229 kg:4842 .\",\n      \"?film kg:4229 kg:0716 .\",\n      \"?film kg:4229 kg:2890 .\",\n      \"?film kg:4229 kg:8977 .\",\n      \"?film kg:4229 kg:5245 .\",\n      \"?film kg:4229 kg:5876 .\",\n      \"?film kg:4229 kg:5162 .\",\n      \"?cinematographer kg:0564 ?film .\",\n      \"?editor kg:0564 ?film .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?cinematographer ?editor WHERE { ?film kg:4229 kg:4756 . ?film kg:4229 kg:4842 . ?film kg:4229 kg:0716 . ?film kg:4229 kg:2890 . ?film kg:4229 kg:8977 . ?film kg:4229 kg:5245 . ?film kg:4229 kg:5876 . ?film kg:4229 kg:5162 . ?cinematographer kg:0564 ?film . ?editor kg:0564 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?editor ?director WHERE {\",\n    \"  wd:Q1234567 wdt:P1082 ?writer.\",\n    \"  wd:Q1234567 wdt:P1082 ?editor.\",\n    \"  wd:Q1234567 wdt:P1082 ?director.\",\n    \"  wd:Q1234567 wdt:P19 ?spouse.\",\n    \"  wd:Q1234567 wdt:P1082 ?influenced.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?editor ?director WHERE { wd:Q1234567 wdt:P1082 ?writer. wd:Q1234567 wdt:P1082 ?editor. wd:Q1234567 wdt:P1082 ?director. wd:Q1234567 wdt:P19 ?spouse. wd:Q1234567 wdt:P1082 ?influenced. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P737 wd:Q2493884.\",\n      \"?writer wdt:P57 wd:Q2298257.\",\n      \"?writer wdt:P1040 wd:Q312258.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P737 wd:Q2493884. ?writer wdt:P57 wd:Q2298257. ?writer wdt:P1040 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:0593 kg:7981 .\",\n      \"?writer kg:6829 kg:2587 .\",\n      \"?writer kg:4612 kg:3227 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:0593 kg:7981 . ?writer kg:6829 kg:2587 . ?writer kg:4612 kg:3227 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P172 wd:Q4830453.\",\n    \"  ?person wdt:P106 wd:Q10862655.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P106 wd:Q33988. ?person wdt:P172 wd:Q4830453. ?person wdt:P106 wd:Q10862655. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P344 wd:Q6084069.\",\n      \"?resource wdt:P161 wd:Q6099428.\",\n      \"?resource wdt:P58 wd:Q5265241.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q6084069. ?resource wdt:P161 wd:Q6099428. ?resource wdt:P58 wd:Q5265241. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3648 kg:6672 .\",\n      \"?resource kg:9892 kg:7898 .\",\n      \"?resource kg:9903 kg:9854 .\",\n      \"?resource kg:6037 kg:7113 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:3648 kg:6672 . ?resource kg:9892 kg:7898 . ?resource kg:9903 kg:9854 . ?resource kg:6037 kg:7113 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor ?writer ?director WHERE {\",\n    \"  wd:Q1064287 wdt:P31 wd:Q11424.\",\n    \"  wd:Q1064287 p:P577 ?editStatement.\",\n    \"  ?editStatement ps:P577 ?filmEditor.\",\n    \"  wd:Q1064287 p:P50 ?writeStatement.\",\n    \"  ?writeStatement ps:P50 ?writer.\",\n    \"  wd:Q1064287 p:P57 ?directStatement.\",\n    \"  ?directStatement ps:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor ?writer ?director WHERE { wd:Q1064287 wdt:P31 wd:Q11424. wd:Q1064287 p:P577 ?editStatement. ?editStatement ps:P577 ?filmEditor. wd:Q1064287 p:P50 ?writeStatement. ?writeStatement ps:P50 ?writer. wd:Q1064287 p:P57 ?directStatement. ?directStatement ps:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  wd:Q199039 wdt:P1040 ?filmEditor .\",\n    \"  wd:Q166739 wdt:P1040 ?filmEditor .\",\n    \"  wd:Q2445896 wdt:P1040 ?filmEditor .\",\n    \"  wd:Q45602 wdt:P1040 ?filmEditor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor WHERE { wd:Q199039 wdt:P1040 ?filmEditor . wd:Q166739 wdt:P1040 ?filmEditor . wd:Q2445896 wdt:P1040 ?filmEditor . wd:Q45602 wdt:P1040 ?filmEditor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q882"]], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n      \"?filmEditor kg:7291 kg:2742 .\",\n      \"?filmEditor kg:7291 kg:5756 .\",\n      \"?filmEditor kg:7291 kg:8176 .\",\n      \"?filmEditor kg:0361 kg:5149 .\",\n      \"?filmEditor kg:0361 kg:8960 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor kg:7291 kg:2742 . ?filmEditor kg:7291 kg:5756 . ?filmEditor kg:7291 kg:8176 . ?filmEditor kg:0361 kg:5149 . ?filmEditor kg:0361 kg:8960 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor WHERE {\",\n    \"  wd:Q107246985 wdt:P31 wd:Q33960.\",\n    \"  wd:Q107246985 wdt:P179 ?writer.\",\n    \"  wd:Q107246985 wdt:P162 ?executiveProducer.\",\n    \"  wd:Q107246985 wdt:P30 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?executiveProducer ?editor WHERE { wd:Q107246985 wdt:P31 wd:Q33960. wd:Q107246985 wdt:P179 ?writer. wd:Q107246985 wdt:P162 ?executiveProducer. wd:Q107246985 wdt:P30 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P1040 wd:Q5437360.\",\n      \"?writer wdt:P1431 wd:Q6084069.\",\n      \"?writer wdt:P1431 wd:Q12813010.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P1040 wd:Q5437360. ?writer wdt:P1431 wd:Q6084069. ?writer wdt:P1431 wd:Q12813010. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:8321 kg:6108 .\",\n      \"?writer kg:8765 kg:6062 .\",\n      \"?writer kg:8321 kg:0579 .\",\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer kg:8321 kg:6108 . ?writer kg:8765 kg:6062 . ?writer kg:8321 kg:0579 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P168 ?writer.\",\n    \"  VALUES ?director {wd:Q90960 wd:Q106347 wd:Q106297 wd:Q106295 wd:Q106296}.\",\n    \"  VALUES ?writer {wd:Q90960 wd:Q106347 wd:Q106297 wd:Q106295 wd:Q106296}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P168 ?writer. VALUES ?director {wd:Q90960 wd:Q106347 wd:Q106297 wd:Q106295 wd:Q106296}. VALUES ?writer {wd:Q90960 wd:Q106347 wd:Q106297 wd:Q106295 wd:Q106296}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P57 wd:Q982339 .\",\n    \"  ?film wdt:P57 wd:Q1033656 .\",\n    \"  ?film wdt:P57 wd:Q116760 .\",\n    \"  ?film wdt:P57 wd:Q1365463 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q982339 . ?film wdt:P57 wd:Q1033656 . ?film wdt:P57 wd:Q116760 . ?film wdt:P57 wd:Q1365463 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q222633"]], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:3964 kg:1055 .\",\n      \"?film kg:7439 kg:0962 .\",\n      \"?film kg:7439 kg:6787 .\",\n      \"?film kg:7439 kg:0694 .\",\n      \"?film kg:7439 kg:3303 .\",\n      \"?film kg:7439 kg:5554 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?film kg:3964 kg:1055 . ?film kg:7439 kg:0962 . ?film kg:7439 kg:6787 . ?film kg:7439 kg:0694 . ?film kg:7439 kg:3303 . ?film kg:7439 kg:5554 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P1476 wd:Q2546254.\",\n    \"  ?person wdt:P1476 wd:Q1086494.\",\n    \"  ?person wdt:P1476 wd:Q33988.\",\n    \"  ?person wdt:P1476 wd:Q2546254.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P1476 wd:Q2546254. ?person wdt:P1476 wd:Q1086494. ?person wdt:P1476 wd:Q33988. ?person wdt:P1476 wd:Q2546254. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1040 wd:Q5265241.\",\n    \"?person wdt:P344 wd:Q6084069.\",\n    \"?person wdt:P1431 wd:Q12813010.\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1040 wd:Q5265241. ?person wdt:P344 wd:Q6084069. ?person wdt:P1431 wd:Q12813010. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:7811 kg:4263 .\",\n      \"?resource kg:1408 kg:2942 .\",\n      \"?resource kg:2168 kg:4489 .\",\n      \"?resource kg:2309 kg:4263 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:7811 kg:4263 . ?resource kg:1408 kg:2942 . ?resource kg:2168 kg:4489 . ?resource kg:2309 kg:4263 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorSpouse WHERE {\",\n    \"  ?filmEditor wdt:P26 ?spouse.\",\n    \"  ?filmEditor wdt:P106 wd:Q385479.\",\n    \"  ?spouse wdt:P31 wd:Q5.\",\n    \"  ?spouse wdt:P106 wd:Q33988.\",\n    \"  ?filmEditorSpouse wdt:P26 ?spouse.\",\n    \"  ?filmEditorSpouse wdt:P31 wd:Q5.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q33988.\",\n    \"  ?filmEditorSpouse wdt:P407 wd:Q207676.\",\n    \"  ?filmEditorSpouse wdt:P50 wd:Q106664.\",\n    \"  ?filmEditorSpouse wdt:P31 wd:Q5.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q33988.\",\n    \"  ?filmEditorSpouse wdt:P275 wd:Q482644.\",\n    \"  ?filmEditorSpouse wdt:P275 wd:Q106664.\",\n    \"  ?filmEditorSpouse wdt:P31 wd:Q5.\",\n    \"  ?filmEditorSpouse wdt:P106 wd:Q33988.\",\n    \"  ?filmEditorSpouse wdt:P275 wd:Q482644.\",\n    \"  ?filmEditorSpouse wdt:P275 wd:Q106664.\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmEditorSpouse WHERE { ?filmEditor wdt:P26 ?spouse. ?filmEditor wdt:P106 wd:Q385479. ?spouse wdt:P31 wd:Q5. ?spouse wdt:P106 wd:Q33988. ?filmEditorSpouse wdt:P26 ?spouse. ?filmEditorSpouse wdt:P31 wd:Q5. ?filmEditorSpouse wdt:P106 wd:Q33988. ?filmEditorSpouse wdt:P407 wd:Q207676. ?filmEditorSpouse wdt:P50 wd:Q106664. ?filmEditorSpouse wdt:P31 wd:Q5. ?filmEditorSpouse wdt:P106 wd:Q33988. ?filmEditorSpouse wdt:P275 wd:Q482644. ?filmEditorSpouse wdt:P275 wd:Q106664. ?filmEditorSpouse wdt:P31 wd:Q5. ?filmEditorSpouse wdt:P106 wd:Q33988. ?filmEditorSpouse wdt:P275 wd:Q482644. ?filmEditorSpouse wdt:P275 wd:Q106664. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q878673 wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q7042855.\",\n    \"  ?spouse wdt:P1040 wd:Q567519.\",\n    \"  ?spouse wdt:P1040 wd:Q543382.\",\n    \"  ?spouse wdt:P1040 wd:Q570483.\",\n    \"  ?spouse wdt:P1040 wd:Q327427.\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q878673 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q7042855. ?spouse wdt:P1040 wd:Q567519. ?spouse wdt:P1040 wd:Q543382. ?spouse wdt:P1040 wd:Q570483. ?spouse wdt:P1040 wd:Q327427. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditorSpouse WHERE {\",\n      \"?filmEditor kg:9872 kg:6727 .\",\n      \"?filmEditor kg:4179 kg:8637 .\",\n      \"?filmEditorSpouse kg:9872 ?filmEditor .\",\n      \"?filmEditorSpouse kg:3176 kg:7702 .\",\n      \"?filmEditorSpouse kg:3176 kg:9166 .\",\n      \"?filmEditorSpouse kg:3176 kg:4367 .\",\n      \"?filmEditorSpouse kg:3176 kg:4861 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?filmEditorSpouse WHERE { ?filmEditor kg:9872 kg:6727 . ?filmEditor kg:4179 kg:8637 . ?filmEditorSpouse kg:9872 ?filmEditor . ?filmEditorSpouse kg:3176 kg:7702 . ?filmEditorSpouse kg:3176 kg:9166 . ?filmEditorSpouse kg:3176 kg:4367 . ?filmEditorSpouse kg:3176 kg:4861 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?director wdt:P31 wd:Q5.\",\n    \"  ?director wdt:P2868 ?film.\",\n    \"  ?film (wdt:P407|wdt:P921) wd:Q1080056.\",\n    \"  ?film rdfs:label \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@en.\",\n    \"  ?director wdt:P31 wd:Q5.\",\n    \"  ?director wdt:P2868 ?film.\",\n    \"  ?film (wdt:P407|wdt:P921) wd:Q1080056.\",\n    \"  ?film rdfs:label \\\"Olympia\\\"@en.\",\n    \"  ?director wdt:P31 wd:Q5.\",\n    \"  ?director wdt:P2868 ?film.\",\n    \"  ?film (wdt:P407|wdt:P921) wd:Q1080056.\",\n    \"  ?film rdfs:label \\\"Triumph of the Will\\\"@en.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?director wdt:P31 wd:Q5. ?director wdt:P2868 ?film. ?film (wdt:P407|wdt:P921) wd:Q1080056. ?film rdfs:label \"Tag der Freiheit: Unsere Wehrmacht\"@en. ?director wdt:P31 wd:Q5. ?director wdt:P2868 ?film. ?film (wdt:P407|wdt:P921) wd:Q1080056. ?film rdfs:label \"Olympia\"@en. ?director wdt:P31 wd:Q5. ?director wdt:P2868 ?film. ?film (wdt:P407|wdt:P921) wd:Q1080056. ?film rdfs:label \"Triumph of the Will\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P21 wd:Q6581072.\",\n      \"?director wdt:P1040 wd:Q156497.\",\n      \"?director wdt:P1040 wd:Q158069.\",\n      \"?director wdt:P1040 wd:Q497617.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director WHERE { ?director wdt:P21 wd:Q6581072. ?director wdt:P1040 wd:Q156497. ?director wdt:P1040 wd:Q158069. ?director wdt:P1040 wd:Q497617. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director kg:0937 kg:3015 .\",\n      \"?director kg:0928 kg:2814 .\",\n      \"?director kg:0928 kg:9872 .\",\n      \"?director kg:0928 kg:0298 .\",\n      \"FILTER ( ?director != kg:0298 )\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director WHERE { ?director kg:0937 kg:3015 . ?director kg:0928 kg:2814 . ?director kg:0928 kg:9872 . ?director kg:0928 kg:0298 . FILTER ( ?director != kg:0298 ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n    \"  ?writerDirector wdt:P106 wd:Q33987.\",\n    \"  ?writerDirector wdt:P57 wd:Q24646.\",\n    \"  ?writerDirector wdt:P1080 wd:Q106644.\",\n    \"  ?writerDirector wdt:P1080 wd:Q39244.\",\n    \"  ?writerDirector wdt:P1080 wd:Q57464.\",\n    \"  ?writerDirector wdt:P1080 wd:Q106644.\"\n    ]\n}", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector wdt:P106 wd:Q33987. ?writerDirector wdt:P57 wd:Q24646. ?writerDirector wdt:P1080 wd:Q106644. ?writerDirector wdt:P1080 wd:Q39244. ?writerDirector wdt:P1080 wd:Q57464. ?writerDirector wdt:P1080 wd:Q106644. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n      \"?writerDirector wdt:P31 wd:Q33999.\",\n      \"?writerDirector wdt:P58 wd:Q1277329.\",\n      \"?writerDirector wdt:P58 wd:Q219170.\",\n      \"?writerDirector wdt:P58 wd:Q219155.\",\n      \"?writerDirector wdt:P58 wd:Q198557.\",\n      \"?writerDirector wdt:P27 wd:Q16.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector wdt:P31 wd:Q33999. ?writerDirector wdt:P58 wd:Q1277329. ?writerDirector wdt:P58 wd:Q219170. ?writerDirector wdt:P58 wd:Q219155. ?writerDirector wdt:P58 wd:Q198557. ?writerDirector wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n  \"query\": [\n    \"SELECT ?writerDirector WHERE {\",\n      \"?writerDirector kg:3646 kg:5339 .\",\n      \"?writerDirector kg:3646 kg:8290 .\",\n      \"?writerDirector kg:3646 kg:8721 .\",\n      \"?writerDirector kg:3646 kg:2988 .\",\n      \"?writerDirector kg:5370 kg:7793 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writerDirector WHERE { ?writerDirector kg:3646 kg:5339 . ?writerDirector kg:3646 kg:8290 . ?writerDirector kg:3646 kg:8721 . ?writerDirector kg:3646 kg:2988 . ?writerDirector kg:5370 kg:7793 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?year.\",\n    \"  FILTER(?year = 1911).\",\n    \"  ?film wdt:P161 ?director.\",\n    \"  ?film wdt:P380 ?executiveProducer.\",\n    \"  ?film wdt:P244 ?policeStory2.\",\n    \"  ?film wdt:P244 ?chineseZodiac.\",\n    \"  ?film wdt:P244 ?policeStory.\",\n    \"  ?film wdt:P244 ?fearlessHyena.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?executiveProducer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?year. FILTER(?year = 1911). ?film wdt:P161 ?director. ?film wdt:P380 ?executiveProducer. ?film wdt:P244 ?policeStory2. ?film wdt:P244 ?chineseZodiac. ?film wdt:P244 ?policeStory. ?film wdt:P244 ?fearlessHyena. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n    \"  wd:Q206182 wdt:P1431 ?director.\",\n    \"  wd:Q206182 wdt:P1431 ?executiveProducer.\",\n    \"  ?director wdt:P57 wd:Q391143.\",\n    \"  ?executiveProducer wdt:P57 wd:Q391143.\",\n    \"  ?director wdt:P58 wd:Q232108.\",\n    \"  ?executiveProducer wdt:P58 wd:Q232108.\",\n    \"  ?director wdt:P58 wd:Q378013.\",\n    \"  ?executiveProducer wdt:P58 wd:Q378013.\",\n    \"  ?director wdt:P58 wd:Q594033.\",\n    \"  ?executiveProducer wdt:P58 wd:Q594033.\"\n    ]\n}", "normal_query": "SELECT ?director ?executiveProducer WHERE { wd:Q206182 wdt:P1431 ?director. wd:Q206182 wdt:P1431 ?executiveProducer. ?director wdt:P57 wd:Q391143. ?executiveProducer wdt:P57 wd:Q391143. ?director wdt:P58 wd:Q232108. ?executiveProducer wdt:P58 wd:Q232108. ?director wdt:P58 wd:Q378013. ?executiveProducer wdt:P58 wd:Q378013. ?director wdt:P58 wd:Q594033. ?executiveProducer wdt:P58 wd:Q594033. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?executiveProducer WHERE {\",\n      \"?director kg:2592 kg:6340 .\",\n      \"?director kg:2592 kg:8594 .\",\n      \"?director kg:2592 kg:1543 .\",\n      \"?director kg:2592 kg:0654 .\",\n      \"?executiveProducer kg:7013 kg:6340 .\",\n      \"?executiveProducer kg:7013 kg:8594 .\",\n      \"?executiveProducer kg:7013 kg:1543 .\",\n      \"?executiveProducer kg:7013 kg:0654 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?executiveProducer WHERE { ?director kg:2592 kg:6340 . ?director kg:2592 kg:8594 . ?director kg:2592 kg:1543 . ?director kg:2592 kg:0654 . ?executiveProducer kg:7013 kg:6340 . ?executiveProducer kg:7013 kg:8594 . ?executiveProducer kg:7013 kg:1543 . ?executiveProducer kg:7013 kg:0654 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q283745.\",\n    \"  ?person wdt:P1416 wd:Q9348.\",\n    \"  ?person wdt:P1416 wd:Q13444.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q283745. ?person wdt:P1416 wd:Q9348. ?person wdt:P1416 wd:Q13444. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7095994 wdt:P112 ?founder.\",\n    \"  ?founder wdt:P108 wd:Q42944 .\",\n    \"  ?founder wdt:P108 wd:Q7204713 .\",\n    \"  ?founder wdt:P108 wd:Q7432436 .\",\n    \"  ?founder wdt:P108 wd:Q37033 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q7095994 wdt:P112 ?founder. ?founder wdt:P108 wd:Q42944 . ?founder wdt:P108 wd:Q7204713 . ?founder wdt:P108 wd:Q7432436 . ?founder wdt:P108 wd:Q37033 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?employer { kg:9047 kg:1709 kg:3317 kg:4345 }.\",\n      \"?resource kg:0273 kg:4051 .\",\n      \"?resource kg:0273 ?employer .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?employer { kg:9047 kg:1709 kg:3317 kg:4345 }. ?resource kg:0273 kg:4051 . ?resource kg:0273 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q10564287 wdt:P31 wd:Q11424.\",\n    \"  wd:Q10564287 wdt:P577 ?date.\",\n    \"  wd:Q10564287 wdt:P921 ?film.\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P577 ?date.\",\n    \"  ?film wdt:P161 wd:Q108064.\",\n    \"  ?film wdt:P161 wd:Q393944.\",\n    \"  ?film wdt:P161 wd:Q27564.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { wd:Q10564287 wdt:P31 wd:Q11424. wd:Q10564287 wdt:P577 ?date. wd:Q10564287 wdt:P921 ?film. ?film wdt:P31 wd:Q11424. ?film wdt:P577 ?date. ?film wdt:P161 wd:Q108064. ?film wdt:P161 wd:Q393944. ?film wdt:P161 wd:Q27564. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q562108 wdt:P1040 ?film .\",\n    \"  wd:Q1687239 wdt:P1040 ?film .\",\n    \"  wd:Q35979475 wdt:P1040 ?film .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { wd:Q562108 wdt:P1040 ?film . wd:Q1687239 wdt:P1040 ?film . wd:Q35979475 wdt:P1040 ?film . ?film wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:P31 kg:Q11424 .\", \"# Film entity type\"\n      ,\"?film kg:P57 kg:8798 .\", \"# Directed by Jens Jørgen Thorsen\"\n      ,\"?film kg:P57 kg:3803 .\", \"# Edited by Ole John\"\n      ,\"?film kg:P57 kg:7741 .\", \"# Produced by Jørgen Leth\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:P31 kg:Q11424 . ?film kg:P57 kg:8798 . ?film kg:P57 kg:3803 . ?film kg:P57 kg:7741 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?editor ?director WHERE {\",\n    \"?film wdt:P31 wd:Q1048297.\",\n    \"?film wdt:P577 ?year.\",\n    \"FILTER(?year >= 2000).\",\n    \"?film wdt:P161 ?writer.\",\n    \"?film wdt:P162 ?cinematographer.\",\n    \"?film wdt:P175 ?star.\",\n    \"?film wdt:P98 ?editor.\",\n    \"?film wdt:P57 ?director.\",\n    \"?film wdt:P345 ?executiveProducer.\",\n    \"?executiveProducer wdt:P2093 ?fromDuskTillDawnSeries.\",\n    \"FILTER(?fromDuskTillDawnSeries = wd:Q168762).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?editor ?director WHERE { ?film wdt:P31 wd:Q1048297. ?film wdt:P577 ?year. FILTER(?year >= 2000). ?film wdt:P161 ?writer. ?film wdt:P162 ?cinematographer. ?film wdt:P175 ?star. ?film wdt:P98 ?editor. ?film wdt:P57 ?director. ?film wdt:P345 ?executiveProducer. ?executiveProducer wdt:P2093 ?fromDuskTillDawnSeries. FILTER(?fromDuskTillDawnSeries = wd:Q168762). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P1040 wd:Q192115.\",\n      \"?writer wdt:P161 wd:Q656357.\",\n      \"?writer wdt:P344 wd:Q15622760.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P1040 wd:Q192115. ?writer wdt:P161 wd:Q656357. ?writer wdt:P344 wd:Q15622760. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:2970 kg:1179 .\",\n      \"?writer kg:2970 kg:4083 .\",\n      \"?writer kg:2970 kg:5468 .\",\n      \"?writer kg:2970 kg:4772 .\",\n      \"?writer kg:2970 kg:4058 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer kg:2970 kg:1179 . ?writer kg:2970 kg:4083 . ?writer kg:2970 kg:5468 . ?writer kg:2970 kg:4772 . ?writer kg:2970 kg:4058 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"  wd:Q10642875 wdt:P571 ?director.\",\n    \"  wd:Q10642875 wdt:P39 ?cinematographer.\",\n    \"  wd:Q10642875 wdt:P50 ?writer.\",\n    \"  ?director wdt:P31 wd:Q33999.\",\n    \"  ?cinematographer wdt:P31 wd:Q33999.\",\n    \"  ?writer wdt:P31 wd:Q33999.\",\n    \"  ?director wdt:P571 ?rioDasMortesDirector.\",\n    \"  ?cinematographer wdt:P571 ?liliMarleenCinematographer.\",\n    \"  ?writer wdt:P571 ?whityWriter.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { wd:Q10642875 wdt:P571 ?director. wd:Q10642875 wdt:P39 ?cinematographer. wd:Q10642875 wdt:P50 ?writer. ?director wdt:P31 wd:Q33999. ?cinematographer wdt:P31 wd:Q33999. ?writer wdt:P31 wd:Q33999. ?director wdt:P571 ?rioDasMortesDirector. ?cinematographer wdt:P571 ?liliMarleenCinematographer. ?writer wdt:P571 ?whityWriter. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"  wd:Q1699716 wdt:P344 ?director.\",\n    \"  wd:Q1699716 wdt:P58 ?cinematographer.\",\n    \"  wd:Q1699716 wdt:P57 ?writer.\",\n    \"  ?director wdt:P1040 wd:Q327427.\",\n    \"  ?cinematographer wdt:P1040 wd:Q823767.\",\n    \"  ?writer wdt:P1040 wd:Q686125.\"\n    ]\n  }\n ", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { wd:Q1699716 wdt:P344 ?director. wd:Q1699716 wdt:P58 ?cinematographer. wd:Q1699716 wdt:P57 ?writer. ?director wdt:P1040 wd:Q327427. ?cinematographer wdt:P1040 wd:Q823767. ?writer wdt:P1040 wd:Q686125. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"  kg:9214 kg:7472 ?director .\",\n    \"  kg:9214 kg:2606 ?cinematographer .\",\n    \"  kg:9214 kg:3585 ?writer .\",\n    \"  ?director kg:3260 kg:7806 .\",\n    \"  ?cinematographer kg:3260 kg:7806 .\",\n    \"  ?writer kg:3260 kg:7806 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { kg:9214 kg:7472 ?director . kg:9214 kg:2606 ?cinematographer . kg:9214 kg:3585 ?writer . ?director kg:3260 kg:7806 . ?cinematographer kg:3260 kg:7806 . ?writer kg:3260 kg:7806 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1072465 wdt:P31 wd:Q386724.\",\n    \"  wd:Q1072465 p:P161 ?statement1.\",\n    \"  ?statement1 ps:P161 wd:Q193646.\",\n    \"  ?resource wdt:P161 wd:Q193646.\",\n    \"  ?resource wdt:P57 ?director.\",\n    \"  ?resource wdt:P2093 ?writer.\",\n    \"  ?resource wdt:P180 ?editor.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1072465 wdt:P31 wd:Q386724. wd:Q1072465 p:P161 ?statement1. ?statement1 ps:P161 wd:Q193646. ?resource wdt:P161 wd:Q193646. ?resource wdt:P57 ?director. ?resource wdt:P2093 ?writer. ?resource wdt:P180 ?editor. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q623051 wdt:P344 ?cinematographer.\",\n    \"  ?cinematographer wdt:P1040 wd:Q1903317.\",\n    \"  ?cinematographer wdt:P1040 wd:Q627060.\",\n    \"  ?cinematographer wdt:P1040 wd:Q2520777.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q623051 wdt:P344 ?cinematographer. ?cinematographer wdt:P1040 wd:Q1903317. ?cinematographer wdt:P1040 wd:Q627060. ?cinematographer wdt:P1040 wd:Q2520777. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:6660 kg:8669 .\",\n      \"?resource kg:4862 kg:0518 .\",\n      \"?resource kg:7206 kg:6413 .\",\n      \"?resource kg:7206 kg:6771 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:6660 kg:8669 . ?resource kg:4862 kg:0518 . ?resource kg:7206 kg:6413 . ?resource kg:7206 kg:6771 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?director WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084679.\",\n    \"  ?film wdt:P577 ?year.\",\n    \"  FILTER(?year = \\\"1977-01-01\\\"^^xsd:date).\",\n    \"  ?film wdt:P175 ?writer.\",\n    \"  ?film wdt:P2864 ?cinematographer.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P31 wd:Q1084679.\",\n    \"  ?film wdt:P175 ?writer.\",\n    \"  ?film wdt:P2864 ?cinematographer.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P31 wd:Q1084679.\",\n    \"  ?film wdt:P175 ?writer.\",\n    \"  ?film wdt:P2864 ?cinematographer.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?director WHERE { ?film wdt:P31 wd:Q1084679. ?film wdt:P577 ?year. FILTER(?year = \"1977-01-01\"^^xsd:date). ?film wdt:P175 ?writer. ?film wdt:P2864 ?cinematographer. ?film wdt:P571 ?director. ?film wdt:P31 wd:Q1084679. ?film wdt:P175 ?writer. ?film wdt:P2864 ?cinematographer. ?film wdt:P571 ?director. ?film wdt:P31 wd:Q1084679. ?film wdt:P175 ?writer. ?film wdt:P2864 ?cinematographer. ?film wdt:P571 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P344 wd:Q613974.\",\n      \"?writer wdt:P344 wd:Q1415127.\",\n      \"?writer wdt:P344 wd:Q1869678.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P344 wd:Q613974. ?writer wdt:P344 wd:Q1415127. ?writer wdt:P344 wd:Q1869678. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:3669 kg:0325 .\",\n      \"?writer kg:3669 kg:7396 .\",\n      \"?writer kg:1698 kg:5463 .\",\n      \"?writer kg:8755 kg:3249 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:3669 kg:0325 . ?writer kg:3669 kg:7396 . ?writer kg:1698 kg:5463 . ?writer kg:8755 kg:3249 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P168 ?producer.\",\n    \"  ?film wdt:P90 ?writer.\",\n    \"  ?film wdt:P30 ?editor.\",\n    \"  VALUES ?director { wd:Q242457 }\",\n    \"  VALUES ?producer { wd:Q186444 }\",\n    \"  VALUES ?writer { wd:Q973644 }\",\n    \"  VALUES ?editor { wd:Q1056340 }\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P168 ?producer. ?film wdt:P90 ?writer. ?film wdt:P30 ?editor. VALUES ?director { wd:Q242457 } VALUES ?producer { wd:Q186444 } VALUES ?writer { wd:Q973644 } VALUES ?editor { wd:Q1056340 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424.\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P57 wd:Q1687239.\",\n    \"?film wdt:P57 wd:Q35979475.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q35979475. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:P31 kg:Q11424 .\", \"# film is an instance of movie\",\n      \"?film kg:P57 kg:6701 .\", \"# directed by Jørgen Leth\",\n      \"?film kg:P58 kg:5305 .\", \"# produced by Jens Jørgen Thorsen\",\n      \"?film kg:P272 kg:4761 .\", \"# written by Ole John\",\n      \"?film kg:P162 kg:8770 .\" ,\"# edited by Jens Jørgen Thorsen\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:P31 kg:Q11424 . ?film kg:P57 kg:6701 . ?film kg:P58 kg:5305 . ?film kg:P272 kg:4761 . ?film kg:P162 kg:8770 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q134062 wdt:P57 ?costumeDesigner.\",\n    \"  FILTER (?costumeDesigner = wd:Q134062).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q134062 wdt:P57 ?costumeDesigner. FILTER (?costumeDesigner = wd:Q134062). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"  wd:Q551861 wdt:P1040 ?costumeDesigner.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q551861 wdt:P1040 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner ?writtenBy ?editedBy WHERE {\",\n    \"  kg:4747 kg:1186 ?occupation .\",\n    \"  FILTER(?occupation = kg:6289) .\",\n    \"  kg:4747 kg:1950 ?costumeDesigner .\",\n    \"  kg:4747 kg:1950 ?writtenBy .\",\n    \"  kg:4747 kg:1950 ?editedBy .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner ?writtenBy ?editedBy WHERE { kg:4747 kg:1186 ?occupation . FILTER(?occupation = kg:6289) . kg:4747 kg:1950 ?costumeDesigner . kg:4747 kg:1950 ?writtenBy . kg:4747 kg:1950 ?editedBy . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P106 wd:Q3394755.\",\n    \"  ?filmProducer wdt:P162 wd:Q8061.\",\n    \"  ?filmProducer wdt:P1686 wd:Q8061.\",\n    \"  ?filmProducer wdt:P1683 wd:Q8061.\",\n    \"  ?filmProducer wdt:P57 wd:Q24960.\"\n    ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3394755. ?filmProducer wdt:P162 wd:Q8061. ?filmProducer wdt:P1686 wd:Q8061. ?filmProducer wdt:P1683 wd:Q8061. ?filmProducer wdt:P57 wd:Q24960. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?producer wdt:P106 wd:Q3282637 .\", \"  ?producer wdt:P1431 wd:Q483197 .\",\n    \"  ?producer wdt:P57 wd:Q483197 .\",\n    \"  ?producer wdt:P1040 wd:Q483197 .\",\n    \"  ?producer wdt:P58 wd:Q483197 .\",\n    \"  ?producer wdt:P1431 wd:Q484679 .\",\n    \"  ?producer wdt:P57 wd:Q484679 .\",\n    \"  ?producer wdt:P1040 wd:Q484679 .\",\n    \"  ?producer wdt:P58 wd:Q484679 .\",\n    \"  ?producer wdt:P1431 wd:Q13471372 .\",\n    \"  ?producer wdt:P57 wd:Q13471372 .\",\n    \"  ?producer wdt:P1040 wd:Q13471372 .\",\n    \"  ?producer wdt:P58 wd:Q13471372 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P106 wd:Q3282637 . ?producer wdt:P1431 wd:Q483197 . ?producer wdt:P57 wd:Q483197 . ?producer wdt:P1040 wd:Q483197 . ?producer wdt:P58 wd:Q483197 . ?producer wdt:P1431 wd:Q484679 . ?producer wdt:P57 wd:Q484679 . ?producer wdt:P1040 wd:Q484679 . ?producer wdt:P58 wd:Q484679 . ?producer wdt:P1431 wd:Q13471372 . ?producer wdt:P57 wd:Q13471372 . ?producer wdt:P1040 wd:Q13471372 . ?producer wdt:P58 wd:Q13471372 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n      \"?filmProducer kg:P106 kg:Q3282637 .\", \"# film producer\",\n      \"?filmProducer kg:P57 kg:483197 .\", \"# wrote\",\n      \"?filmProducer kg:P1040 kg:483197 .\", \"# executive produced\",\n      \"?filmProducer kg:P1431 kg:483197 .\", \"# edited\",\n      \"?filmProducer kg:P58 kg:483197 .\" ,\"# directed\"\n    ]\n  }\n ", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer kg:P106 kg:Q3282637 . ?filmProducer kg:P57 kg:483197 . ?filmProducer kg:P1040 kg:483197 . ?filmProducer kg:P1431 kg:483197 . ?filmProducer kg:P58 kg:483197 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P986 ?director.\",\n    \"  ?film wdt:P570 ?writer.\",\n    \"  ?film wdt:P161 ?editor.\",\n    \"  VALUES ?director { wd:Q346944 }\",\n    \"  VALUES ?writer { wd:Q289944 }\",\n    \"  VALUES ?editor { wd:Q570944 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P986 ?director. ?film wdt:P570 ?writer. ?film wdt:P161 ?editor. VALUES ?director { wd:Q346944 } VALUES ?writer { wd:Q289944 } VALUES ?editor { wd:Q570944 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424.\",\n    \"?film wdt:P58 wd:Q562108.\",\n    \"?film wdt:P57 wd:Q1687239.\",\n    \"?film wdt:P57 wd:Q35979475.\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P58 wd:Q562108. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:0538/kg:P58 kg:6698/kg:P57 .\",\n      \"?film kg:0538/kg:P58 kg:2351/kg:Q11424 .\",\n      \"?film kg:0538/kg:P58 kg:0132/kg:Q562108 .\",\n      \"?film kg:9328/kg:P1040 kg:4817/kg:Q1687239 .\",\n      \"?film kg:9328/kg:P1040 kg:3129/kg:Q35979475 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:0538/kg:P58 kg:6698/kg:P57 . ?film kg:0538/kg:P58 kg:2351/kg:Q11424 . ?film kg:0538/kg:P58 kg:0132/kg:Q562108 . ?film kg:9328/kg:P1040 kg:4817/kg:Q1687239 . ?film kg:9328/kg:P1040 kg:3129/kg:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?director.\",\n    \"  ?film wdt:P986 ?editor.\",\n    \"  ?film wdt:P106 ?writer.\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  VALUES ?director { wd:Q34574 }\",\n    \"  VALUES ?editor { wd:Q34574 }\",\n    \"  VALUES ?writer { wd:Q34574 }\",\n    \"  VALUES ?producer { wd:Q1062890 }\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?director. ?film wdt:P986 ?editor. ?film wdt:P106 ?writer. ?film wdt:P162 ?producer. VALUES ?director { wd:Q34574 } VALUES ?editor { wd:Q34574 } VALUES ?writer { wd:Q34574 } VALUES ?producer { wd:Q1062890 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424.\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P57 wd:Q1687239.\",\n    \"?film wdt:P57 wd:Q35979475.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q35979475. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:2624/kg:1040 kg:5962 .\", \"# directed by\"\n      ,\"?film kg:2624/kg:1040 kg:7326 .\", \"# edited by\"\n      ,\"?film kg:2624/kg:1040 kg:9312 .\", \"# written by\"\n      ,\"?film kg:58/kg:58 kg:5164 .\" ,\"# produced by Jens Jørgen Thorsen\"\n    ,\"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:2624/kg:1040 kg:5962 . ?film kg:2624/kg:1040 kg:7326 . ?film kg:2624/kg:1040 kg:9312 . ?film kg:58/kg:58 kg:5164 . } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?produce ?write ?direct\",\n    \"WHERE {\",\n    \"  wd:Q105264783 p:P57 wd:Q105264783.\",\n    \"  OPTIONAL { wd:Q105264783 p:P161 ?director. }\",\n    \"  OPTIONAL { wd:Q105264783 p:P162 ?edit. }\",\n    \"  OPTIONAL { wd:Q105264783 p:P163 ?produce. }\",\n    \"  OPTIONAL { wd:Q105264783 p:P164 ?write. }\",\n    \"  OPTIONAL { wd:Q105264783 p:P165 ?direct. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?produce ?write ?direct WHERE { wd:Q105264783 p:P57 wd:Q105264783. OPTIONAL { wd:Q105264783 p:P161 ?director. } OPTIONAL { wd:Q105264783 p:P162 ?edit. } OPTIONAL { wd:Q105264783 p:P163 ?produce. } OPTIONAL { wd:Q105264783 p:P164 ?write. } OPTIONAL { wd:Q105264783 p:P165 ?direct. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?produce ?write ?direct\",\n    \"WHERE {\",\n    \"  wd:Q5437360 wdt:P1040 ?director.\",\n    \"  ?director wdt:P57 wd:Q25479948.\",\n    \"  ?director wdt:P1431 ?edit.\",\n    \"  ?director wdt:P1431 ?produce.\",\n    \"  ?director wdt:P1431 ?write.\",\n    \"  ?director wdt:P58 ?direct.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?produce ?write ?direct WHERE { wd:Q5437360 wdt:P1040 ?director. ?director wdt:P57 wd:Q25479948. ?director wdt:P1431 ?edit. ?director wdt:P1431 ?produce. ?director wdt:P1431 ?write. ?director wdt:P58 ?direct. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?movie { kg:0200 kg:1740 }.\",\n      \"?movie kg:4623 kg:2825 .\",\n      \"?movie kg:9367 kg:2825 .\",\n      \"?movie kg:5181 kg:2825 .\",\n      \"?resource kg:4449 ?movie .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?movie { kg:0200 kg:1740 }. ?movie kg:4623 kg:2825 . ?movie kg:9367 kg:2825 . ?movie kg:5181 kg:2825 . ?resource kg:4449 ?movie . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?edit ?write ?produce ?direct\",\n    \"WHERE {\",\n    \"  wd:Q105264783 p:P161 ?director.\",\n    \"  OPTIONAL { ?director wdt:P31 wd:Q33969. }\",\n    \"  OPTIONAL { ?director wdt:P161 ?edit. }\",\n    \"  OPTIONAL { ?director wdt:P577 ?write. }\",\n    \"  OPTIONAL { ?director wdt:P2048 ?produce. }\",\n    \"  OPTIONAL { ?director wdt:P361 ?direct. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?edit ?write ?produce ?direct WHERE { wd:Q105264783 p:P161 ?director. OPTIONAL { ?director wdt:P31 wd:Q33969. } OPTIONAL { ?director wdt:P161 ?edit. } OPTIONAL { ?director wdt:P577 ?write. } OPTIONAL { ?director wdt:P2048 ?produce. } OPTIONAL { ?director wdt:P361 ?direct. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?director ?film WHERE {\",\n    \"  wd:Q5437360 wdt:P1431 ?director.\",\n    \"  ?director wdt:P58 ?film.\",\n    \"  VALUES ?film { wd:Q25479948 wd:Q12813010 wd:Q6084069 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?film WHERE { wd:Q5437360 wdt:P1431 ?director. ?director wdt:P58 ?film. VALUES ?film { wd:Q25479948 wd:Q12813010 wd:Q6084069 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"{ kg:5001 kg:0633 ?resource . } UNION \",\n      \"{ kg:5001 kg:1442 ?resource . } UNION \",\n      \"{ kg:5001 kg:7218 ?resource . } UNION \",\n      \"{ kg:5001 kg:5542 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5001 kg:0633 ?resource . } UNION { kg:5001 kg:1442 ?resource . } UNION { kg:5001 kg:7218 ?resource . } UNION { kg:5001 kg:5542 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P571 ?year.\",\n    \"  ?film wdt:P1686 wd:Q109664.\",\n    \"  ?film wdt:P1686 wd:Q34064.\",\n    \"  ?film wdt:P1686 wd:Q27564.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P571 ?year. ?film wdt:P1686 wd:Q109664. ?film wdt:P1686 wd:Q34064. ?film wdt:P1686 wd:Q27564. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q448604.\",\n    \"  ?film wdt:P57 wd:Q363666.\",\n    \"  ?film wdt:P57 wd:Q452794.\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q448604. ?film wdt:P57 wd:Q363666. ?film wdt:P57 wd:Q452794. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:1538 kg:9830 .\",\n      \"?film kg:7435 kg:7538 .\",\n      \"?film kg:5906 kg:2456 .\",\n      \"?film kg:3304 kg:9069 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?film WHERE { ?film kg:1538 kg:9830 . ?film kg:7435 kg:7538 . ?film kg:5906 kg:2456 . ?film kg:3304 kg:9069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?editor ?cinematographer WHERE {\",\n    \"  wd:Q10642875 wdt:P31 wd:Q937857.\",\n    \"  wd:Q10642875 wdt:P175 ?editor.\",\n    \"  wd:Q10642875 wdt:P176 ?cinematographer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor ?cinematographer WHERE { wd:Q10642875 wdt:P31 wd:Q937857. wd:Q10642875 wdt:P175 ?editor. wd:Q10642875 wdt:P176 ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n      \"?film wdt:P344 wd:Q13471372 .\", \"# Moebius\",\n      \"?film wdt:P344 wd:Q462025 .\", \"# One on One\",\n      \"?film wdt:P344 wd:Q17041657 .\", \"# Amen\",\n      \"?editor wdt:P1040 ?film .\", \"# edited\",\n      \"?editor wdt:P1431 wd:Q483197 .\", \"# executive produced and directed Pietà\"\n    ]\n  }\n ", "normal_query": "SELECT ?editor WHERE { ?film wdt:P344 wd:Q13471372 . ?film wdt:P344 wd:Q462025 . ?film wdt:P344 wd:Q17041657 . ?editor wdt:P1040 ?film . ?editor wdt:P1431 wd:Q483197 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0884 kg:6849 .\",\n      \"?resource kg:0884 kg:7646 .\",\n      \"?resource kg:0884 kg:7108 .\",\n      \"?resource kg:57 kg:7780 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0884 kg:6849 . ?resource kg:0884 kg:7646 . ?resource kg:0884 kg:7108 . ?resource kg:57 kg:7780 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor ?director WHERE {\",\n    \"  wd:Q109458 wdt:P31 wd:Q27663.\",\n    \"  wd:Q109458 wdt:P162 ?cinematographer.\",\n    \"  wd:Q109458 wdt:P161 ?editor.\",\n    \"  wd:Q109458 wdt:P57 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?editor ?director WHERE { wd:Q109458 wdt:P31 wd:Q27663. wd:Q109458 wdt:P162 ?cinematographer. wd:Q109458 wdt:P161 ?editor. wd:Q109458 wdt:P57 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor ?director WHERE {\",\n    \"  wd:Q44426 wdt:P57 ?cinematographer.\",\n    \"  wd:Q44426 wdt:P1040 ?editor.\",\n    \"  wd:Q44426 wdt:P161 ?director.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer ?editor ?director WHERE { wd:Q44426 wdt:P57 ?cinematographer. wd:Q44426 wdt:P1040 ?editor. wd:Q44426 wdt:P161 ?director. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?editor ?director ?actor\",\n    \"WHERE {\",\n      \"?film kg:4363 kg:9818 .\", \"# cinematographer\"\n      ,\"?film kg:4757 kg:7025 .\", \"# directed by Rainer Werner Fassbinder\"\n      ,\"?film kg:1331 kg:7025 .\", \"# edited by Rainer Werner Fassbinder\"\n      ,\"?film kg:1880 kg:7025 .\", \"# starred Rainer Werner Fassbinder\"\n    ,\n      \"?film kg:4363 ?cinematographer .\",\n      \"?film kg:4757 ?director .\",\n      \"?film kg:1331 ?editor .\",\n      \"?film kg:1880 ?actor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?editor ?director ?actor WHERE { ?film kg:4363 kg:9818 . ?film kg:4757 kg:7025 . ?film kg:1331 kg:7025 . ?film kg:1880 kg:7025 . ?film kg:4363 ?cinematographer . ?film kg:4757 ?director . ?film kg:1331 ?editor . ?film kg:1880 ?actor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P725 wd:Q482644.\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P725 wd:Q482644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P725 wd:Q482644. ?actor wdt:P106 wd:Q33999. ?actor wdt:P106 wd:Q33999. ?actor wdt:P725 wd:Q482644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P106 wd:Q33999.\",\n    \"  ?actor wdt:P737 wd:Q12949115.\",\n    \"  ?actor wdt:P737 wd:Q45404.\",\n    \"  ?actor wdt:P737 wd:Q4720983.\",\n    \"  ?actor wdt:P112 wd:Q457433.\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P106 wd:Q33999. ?actor wdt:P737 wd:Q12949115. ?actor wdt:P737 wd:Q45404. ?actor wdt:P737 wd:Q4720983. ?actor wdt:P112 wd:Q457433. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n      \"?actor kg:9387 kg:0260 .\", \"# actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by\",\n      \"?actor kg:9987 kg:7263 .\", \"# Carolyn Dennis and Sara Dylan married\",\n      \"kg:1227 kg:9498 ?actor .\", \"# Alexandria Monroe High School 's founder\"\n    ]\n  }\n ", "normal_query": "SELECT ?actor WHERE { ?actor kg:9387 kg:0260 . ?actor kg:9987 kg:7263 . kg:1227 kg:9498 ?actor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q345978.\",\n    \"  ?person wdt:P2096 wd:Q106229.\",\n    \"  ?person wdt:P1416 wd:Q106229.\",\n    \"  ?person wdt:P1416 wd:Q35786.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q345978. ?person wdt:P2096 wd:Q106229. ?person wdt:P1416 wd:Q106229. ?person wdt:P1416 wd:Q35786. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q80"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P108 wd:Q37033.\",\n      \"?person wdt:P108 wd:Q7095994.\",\n      \"?person wdt:P108 wd:Q7204713.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q37033. ?person wdt:P108 wd:Q7095994. ?person wdt:P108 wd:Q7204713. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3145 kg:6182 .\",\n      \"?resource kg:3947 kg:2143 .\",\n      \"?resource kg:3145 kg:0588 .\",\n      \"?resource kg:3145 kg:3947 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3145 kg:6182 . ?resource kg:3947 kg:2143 . ?resource kg:3145 kg:0588 . ?resource kg:3145 kg:3947 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q80"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer ?star ?composer WHERE {\",\n    \"  wd:Q1064827 wdt:P57 ?writer .\",\n    \"  wd:Q1064827 wdt:P39 ?cinematographer .\",\n    \"  wd:Q1064827 wdt:P106 ?star .\",\n    \"  wd:Q1064827 wdt:P57 ?composer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer ?star ?composer WHERE { wd:Q1064827 wdt:P57 ?writer . wd:Q1064827 wdt:P39 ?cinematographer . wd:Q1064827 wdt:P106 ?star . wd:Q1064827 wdt:P57 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P344 wd:Q128493.\",\n      \"?writer wdt:P1040 wd:Q1653396.\",\n      \"?writer wdt:P1040 wd:Q192115.\",\n      \"?writer wdt:P1040 wd:Q1165050.\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P344 wd:Q128493. ?writer wdt:P1040 wd:Q1653396. ?writer wdt:P1040 wd:Q192115. ?writer wdt:P1040 wd:Q1165050. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer kg:9363 kg:4202 .\",\n      \"?writer kg:9636 kg:6198 .\",\n      \"?writer kg:7171 kg:8061 .\",\n      \"?writer kg:7027 kg:8807 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?writer WHERE { ?writer kg:9363 kg:4202 . ?writer kg:9636 kg:6198 . ?writer kg:7171 kg:8061 . ?writer kg:7027 kg:8807 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10562348 wdt:P179 ?editor.\",\n    \"  wd:Q10562348 wdt:P179 ?executiveProducer.\",\n    \"  ?editor wdt:P106 wd:Q3393855.\",\n    \"  ?executiveProducer wdt:P106 wd:Q3393855.\",\n    \"  ?resource wdt:P274 ?director.\",\n    \"  ?resource wdt:P274 ?editor.\",\n    \"  ?resource wdt:P274 ?executiveProducer.\",\n    \"  ?resource wdt:P106 wd:Q3393855.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q10562348 wdt:P179 ?editor. wd:Q10562348 wdt:P179 ?executiveProducer. ?editor wdt:P106 wd:Q3393855. ?executiveProducer wdt:P106 wd:Q3393855. ?resource wdt:P274 ?director. ?resource wdt:P274 ?editor. ?resource wdt:P274 ?executiveProducer. ?resource wdt:P106 wd:Q3393855. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q13471372 wdt:P57 ?editor.\",\n    \"  wd:Q13471372 wdt:P58 ?executiveProducer.\",\n    \"  ?editor wdt:P1040 wd:Q484679.\",\n    \"  ?executiveProducer wdt:P1040 wd:Q484679.\",\n    \"  ?resource wdt:P57 ?editor.\",\n    \"  ?resource wdt:P58 ?executiveProducer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q13471372 wdt:P57 ?editor. wd:Q13471372 wdt:P58 ?executiveProducer. ?editor wdt:P1040 wd:Q484679. ?executiveProducer wdt:P1040 wd:Q484679. ?resource wdt:P57 ?editor. ?resource wdt:P58 ?executiveProducer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"VALUES ?editorProducer { kg:6634 } .\",\n      \"?editorProducer kg:0456 ?dreamMoebius .\",\n      \"?dreamMoebius kg:0544 kg:8105 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?editorProducer { kg:6634 } . ?editorProducer kg:0456 ?dreamMoebius . ?dreamMoebius kg:0544 kg:8105 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P106 wd:Q33978.\",\n    \"  ?filmProducer wdt:P31 wd:Q5.\",\n    \"  ?filmProducer wdt:P244 wd:Q1062664.\",\n    \"  ?filmProducer wdt:P244 wd:Q197844.\",\n    \"  ?filmProducer wdt:P244 wd:Q530644.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q33978. ?filmProducer wdt:P31 wd:Q5. ?filmProducer wdt:P244 wd:Q1062664. ?filmProducer wdt:P244 wd:Q197844. ?filmProducer wdt:P244 wd:Q530644. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q3011043 wdt:P57 ?company.\",\n    \"  ?company wdt:P112 wd:Q64434913.\",\n    \"  ?film wdt:P58 wd:Q3011043.\",\n    \"  ?film wdt:P58 wd:Q220394.\",\n    \"  ?film wdt:P58 wd:Q542216.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?film WHERE { wd:Q3011043 wdt:P57 ?company. ?company wdt:P112 wd:Q64434913. ?film wdt:P58 wd:Q3011043. ?film wdt:P58 wd:Q220394. ?film wdt:P58 wd:Q542216. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?producer kg:2822 kg:7295 .\",\n      \"?producer kg:0289 kg:7088 .\",\n      \"?producer kg:0289 kg:1313 .\",\n      \"?producer kg:0289 kg:9090 .\",\n      \"?film kg:5136 ?producer .\",\n      \"VALUES ?film { kg:7163 kg:2774 }\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?film WHERE { ?producer kg:2822 kg:7295 . ?producer kg:0289 kg:7088 . ?producer kg:0289 kg:1313 . ?producer kg:0289 kg:9090 . ?film kg:5136 ?producer . VALUES ?film { kg:7163 kg:2774 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?executiveProducer ?editor ?composer ?cinematographer ?director WHERE {\",\n    \"  wd:Q10724698 wdt:P31 wd:Q571747.\",\n    \"  wd:Q10724698 p:P161 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P161 ?executiveProducer.\",\n    \"  wd:Q10724698 p:P356 ?editorStatement.\",\n    \"  ?editorStatement ps:P356 ?editor.\",\n    \"  wd:Q10724698 p:P802 ?composerStatement.\",\n    \"  ?composerStatement ps:P802 ?composer.\",\n    \"  wd:Q10724698 p:P354 ?cinematographerStatement.\",\n    \"  ?cinematographerStatement ps:P354 ?cinematographer.\",\n    \"  wd:Q10724698 p:P57 ?directorStatement.\",\n    \"  ?directorStatement ps:P57 ?director.\",\n    \"  ?executiveProducer wdt:P31 wd:Q33999.\",\n    \"  ?editor wdt:P31 wd:Q33999.\",\n    \"  ?composer wdt:P31 wd:Q33999.\",\n    \"  ?cinematographer wdt:P31 wd:Q33999.\",\n    \"  ?director wdt:P31 wd:Q33999.\"\n    ]\n  }\n ", "normal_query": "SELECT ?executiveProducer ?editor ?composer ?cinematographer ?director WHERE { wd:Q10724698 wdt:P31 wd:Q571747. wd:Q10724698 p:P161 ?executiveProducerStatement. ?executiveProducerStatement ps:P161 ?executiveProducer. wd:Q10724698 p:P356 ?editorStatement. ?editorStatement ps:P356 ?editor. wd:Q10724698 p:P802 ?composerStatement. ?composerStatement ps:P802 ?composer. wd:Q10724698 p:P354 ?cinematographerStatement. ?cinematographerStatement ps:P354 ?cinematographer. wd:Q10724698 p:P57 ?directorStatement. ?directorStatement ps:P57 ?director. ?executiveProducer wdt:P31 wd:Q33999. ?editor wdt:P31 wd:Q33999. ?composer wdt:P31 wd:Q33999. ?cinematographer wdt:P31 wd:Q33999. ?director wdt:P31 wd:Q33999. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P1040 wd:Q4959991.\",\n      \"?person wdt:P344 wd:Q7243050.\",\n      \"?person wdt:P86 wd:Q5375110.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P1040 wd:Q4959991. ?person wdt:P344 wd:Q7243050. ?person wdt:P86 wd:Q5375110. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0731 kg:6227 .\",\n      \"?resource kg:0731 kg:5846 .\",\n      \"?resource kg:0731 kg:1224 .\",\n      \"?resource kg:0731 kg:5615 .\",\n      \"?resource kg:0731 kg:7818 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:0731 kg:6227 . ?resource kg:0731 kg:5846 . ?resource kg:0731 kg:1224 . ?resource kg:0731 kg:5615 . ?resource kg:0731 kg:7818 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q34528.\",\n    \"  ?person wdt:P1416 wd:Q796664.\",\n    \"  ?person wdt:P1416 wd:Q106233.\",\n    \"  ?person wdt:P1416 wd:Q58464.\",\n    \"  ?person wdt:P1416 wd:Q796664.\"\n    ]\n}\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q34528. ?person wdt:P1416 wd:Q796664. ?person wdt:P1416 wd:Q106233. ?person wdt:P1416 wd:Q58464. ?person wdt:P1416 wd:Q796664. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P108 wd:Q622664 .\", \"# Sally Ride Science\",\n    \"?person wdt:P108 wd:Q55206 .\", \"# Center for International Security and Cooperation\",\n    \"?person wdt:P108 wd:Q30 .\", \"# Stanford University\",\n    \"?person wdt:P108 wd:Q41506 .\", \"# National Aeronautics and Space Administration\",\n    \"?person wdt:P108 wd:Q23548 .\", \"# University of California, San Diego\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q622664 . ?person wdt:P108 wd:Q55206 . ?person wdt:P108 wd:Q30 . ?person wdt:P108 wd:Q41506 . ?person wdt:P108 wd:Q23548 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8994 kg:6416 .\", \"# American founder and employee of Sally Ride Science\",\n      \"?resource kg:8994 kg:2435 .\", \"# employed by Center for International Security and Cooperation\",\n      \"?resource kg:8994 kg:7668 .\", \"# employed by Stanford University\",\n      \"?resource kg:8994 kg:1473 .\", \"# employed by National Aeronautics and Space Administration\",\n      \"?resource kg:8994 kg:5431 .\" ,\"# employed by University of California, San Diego\"\n    ]\n  }\n ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8994 kg:6416 . ?resource kg:8994 kg:2435 . ?resource kg:8994 kg:7668 . ?resource kg:8994 kg:1473 . ?resource kg:8994 kg:5431 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?person wdt:P106 wd:Q33988.\",\n    \"  ?person wdt:P175 wd:Q246465.\",\n    \"  ?person wdt:P175 wd:Q246465.\",\n    \"  ?person wdt:P106 wd:Q389744.\",\n    \"  ?person wdt:P106 wd:Q108659.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q33988. ?person wdt:P175 wd:Q246465. ?person wdt:P175 wd:Q246465. ?person wdt:P106 wd:Q389744. ?person wdt:P106 wd:Q108659. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1040 wd:Q93853 .\", \"# The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"?person wdt:P161 wd:Q192115 .\", \"# Planet Terror\",\n    \"?person wdt:P1040 wd:Q656357 .\", \"# Sin City Once Upon a Time in Mexico\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P1040 wd:Q93853 . ?person wdt:P161 wd:Q192115 . ?person wdt:P1040 wd:Q656357 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:4292 kg:2617 kg:3024 .\",\n      \"?resource kg:4292 kg:2617 kg:1991 .\",\n      \"?resource kg:4292 kg:2814 kg:5839 .\",\n      \"?resource kg:4292 kg:2814 kg:8530 .\",\n      \"?resource kg:4292 kg:2617 kg:9292 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:4292 kg:2617 kg:3024 . ?resource kg:4292 kg:2617 kg:1991 . ?resource kg:4292 kg:2814 wdt:P57 . ?resource kg:4292 kg:2814 kg:8530 . ?resource kg:4292 kg:2617 kg:9292 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?executiveProducer ?writer WHERE {\",\n    \"  wd:Q106927 p:P38 ?executiveProducerStatement.\",\n    \"  ?executiveProducerStatement ps:P38 ?executiveProducer.\",\n    \"  ?executiveProducerStatement prov:wasDerivedFrom ?employer1.\",\n    \"  ?employer1 wdt:P279* wd:Q46506. \",\n    \"  wd:Q106927 p:P38 ?writerStatement.\",\n    \"  ?writerStatement ps:P38 ?writer.\",\n    \"  ?writerStatement prov:wasDerivedFrom ?employer2.\",\n    \"  ?employer2 wdt:P279* wd:Q46506. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?executiveProducer ?writer WHERE { wd:Q106927 p:P38 ?executiveProducerStatement. ?executiveProducerStatement ps:P38 ?executiveProducer. ?executiveProducerStatement prov:wasDerivedFrom ?employer1. ?employer1 wdt:P279* wd:Q46506. wd:Q106927 p:P38 ?writerStatement. ?writerStatement ps:P38 ?writer. ?writerStatement prov:wasDerivedFrom ?employer2. ?employer2 wdt:P279* wd:Q46506. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q29011 wdt:P58 ?executiveProducer.\",\n    \"  wd:Q29011 wdt:P1431 ?writer.\",\n    \"  ?executiveProducer wdt:P108 wd:Q1054807 .\",\n    \"  ?executiveProducer wdt:P108 wd:Q11490471 .\",\n    \"  ?executiveProducer wdt:P108 wd:Q11371930 .\",\n    \"  ?writer wdt:P108 wd:Q182950 .\",\n    \"  ?writer wdt:P108 wd:Q1136386 .\",\n    \"  ?writer wdt:P108 wd:Q947907 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q29011 wdt:P58 ?executiveProducer. wd:Q29011 wdt:P1431 ?writer. ?executiveProducer wdt:P108 wd:Q1054807 . ?executiveProducer wdt:P108 wd:Q11490471 . ?executiveProducer wdt:P108 wd:Q11371930 . ?writer wdt:P108 wd:Q182950 . ?writer wdt:P108 wd:Q1136386 . ?writer wdt:P108 wd:Q947907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:5579 kg:2383 .\",\n      \"?resource kg:5579 kg:6855 .\",\n      \"?resource kg:5579 kg:4927 .\",\n      \"?resource kg:5579 kg:0935 .\",\n      \"?resource kg:5579 kg:9147 .\",\n      \"?resource kg:8123 kg:9772 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:5579 kg:2383 . ?resource kg:5579 kg:6855 . ?resource kg:5579 kg:4927 . ?resource kg:5579 kg:0935 . ?resource kg:5579 kg:9147 . ?resource kg:8123 kg:9772 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  wd:Q106824 wdt:P57 ?cinematographer.\",\n    \"  wd:Q106824 wdt:P57 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?writer WHERE { wd:Q106824 wdt:P57 ?cinematographer. wd:Q106824 wdt:P57 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  wd:Q208910 wdt:P344 ?cinematographer.\",\n    \"  wd:Q613974 wdt:P344 ?writer.\",\n    \"  wd:Q1609393 wdt:P57 ?cinematographer.\",\n    \"  wd:Q1609393 wdt:P58 ?writer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?writer WHERE { wd:Q208910 wdt:P344 ?cinematographer. wd:Q613974 wdt:P344 ?writer. wd:Q1609393 wdt:P57 ?cinematographer. wd:Q1609393 wdt:P58 ?writer. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q38222"]], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?writer\",\n    \"WHERE {\",\n      \"?film kg:4247 kg:8139 kg:1376 .\",\n      \"?film kg:5456 kg:8139 kg:0804 .\",\n      \"?film kg:9076 kg:8139 kg:5153 .\",\n      \"?cinematographer kg:5456 kg:8139 ?film .\",\n      \"?writer kg:9076 kg:8139 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?writer WHERE { ?film kg:4247 kg:8139 kg:1376 . ?film kg:5456 kg:8139 kg:0804 . ?film kg:9076 kg:8139 kg:5153 . ?cinematographer kg:5456 kg:8139 ?film . ?writer kg:9076 kg:8139 ?film . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  wd:Q1064237 wdt:P1686 ?cinematographer.\",\n    \"  wd:Q1064237 wdt:P57 ?director.\",\n    \"  wd:Q1064237 wdt:P99 ?editor.\",\n    \"  ?cinematographer wdt:P1686 wd:Q1064237.\",\n    \"  ?director wdt:P57 wd:Q1064237.\",\n    \"  ?editor wdt:P99 wd:Q1064237.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { wd:Q1064237 wdt:P1686 ?cinematographer. wd:Q1064237 wdt:P57 ?director. wd:Q1064237 wdt:P99 ?editor. ?cinematographer wdt:P1686 wd:Q1064237. ?director wdt:P57 wd:Q1064237. ?editor wdt:P99 wd:Q1064237. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  wd:Q3485595 wdt:P344 ?cinematographer.\",\n    \"  wd:Q3485595 wdt:P1040 ?director.\",\n    \"  wd:Q3485595 wdt:P1431 ?editor.\",\n    \"  ?cinematographer wdt:P1431 wd:Q2085.\",\n    \"  ?director wdt:P1431 wd:Q2085.\",\n    \"  ?editor wdt:P1431 wd:Q2085.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { wd:Q3485595 wdt:P344 ?cinematographer. wd:Q3485595 wdt:P1040 ?director. wd:Q3485595 wdt:P1431 ?editor. ?cinematographer wdt:P1431 wd:Q2085. ?director wdt:P1431 wd:Q2085. ?editor wdt:P1431 wd:Q2085. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n      \"?film kg:9846 kg:8220 ?cinematographer .\",\n      \"?film kg:9846 kg:8526 ?director .\",\n      \"?film kg:9846 kg:3677 ?editor .\",\n      \"?film kg:7526 kg:8220 ?executiveProducer1 .\",\n      \"?film kg:7526 kg:8526 ?executiveProducer2 .\",\n      \"?film kg:7971 kg:3677 ?executiveProducer3 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { ?film kg:9846 kg:8220 ?cinematographer . ?film kg:9846 kg:8526 ?director . ?film kg:9846 kg:3677 ?editor . ?film kg:7526 kg:8220 ?executiveProducer1 . ?film kg:7526 kg:8526 ?executiveProducer2 . ?film kg:7971 kg:3677 ?executiveProducer3 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n    \"  ?film wdt:P31 wd:Q1084675.\",\n    \"  ?film wdt:P571 ?date.\",\n    \"  FILTER(?date < \\\"2000-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  ?film wdt:P348 ?director.\",\n    \"  ?film wdt:P576 ?editor.\",\n    \"  ?director wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q193626.\",\n    \"  ?editor wdt:P26 ?spouseEditor.\",\n    \"  ?spouseEditor wdt:P106 wd:Q193626.\",\n    \"  VALUES ?film {wd:Q485747 wd:Q1133447 wd:Q1133447 wd:Q1133447}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?editor WHERE { ?film wdt:P31 wd:Q1084675. ?film wdt:P571 ?date. FILTER(?date < \"2000-01-01T00:00:00Z\"^^xsd:dateTime). ?film wdt:P348 ?director. ?film wdt:P576 ?editor. ?director wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q193626. ?editor wdt:P26 ?spouseEditor. ?spouseEditor wdt:P106 wd:Q193626. VALUES ?film {wd:Q485747 wd:Q1133447 wd:Q1133447 wd:Q1133447}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n    \"  VALUES ?movie { wd:Q2449461 wd:Q45602 wd:Q166739 wd:Q374172 }\",\n    \"  ?director wdt:P1040 ?movie .\",\n    \"  ?editor wdt:P1040 ?movie .\",\n    \"  ?director wdt:P26 wd:Q32337 .\",\n    \"  ?editor wdt:P26 wd:Q137808 .\",\n    \"  ?director wdt:P26 wd:Q241019 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?editor WHERE { VALUES ?movie { wd:Q2449461 wd:Q45602 wd:Q166739 wd:Q374172 } ?director wdt:P1040 ?movie . ?editor wdt:P1040 ?movie . ?director wdt:P26 wd:Q32337 . ?editor wdt:P26 wd:Q137808 . ?director wdt:P26 wd:Q241019 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?director ?editor WHERE {\",\n      \"?director kg:2813 kg:1085 .\",\n      \"?director kg:3979 kg:5719 .\",\n      \"?director kg:3979 kg:4195 .\",\n      \"?director kg:3979 kg:6480 .\",\n      \"?editor kg:2813 kg:1085 .\",\n      \"?editor kg:3979 kg:5719 .\",\n      \"?editor kg:3979 kg:4195 .\",\n      \"?editor kg:3979 kg:6480 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director ?editor WHERE { ?director kg:2813 kg:1085 . ?director kg:3979 kg:5719 . ?director kg:3979 kg:4195 . ?director kg:3979 kg:6480 . ?editor kg:2813 kg:1085 . ?editor kg:3979 kg:5719 . ?editor kg:3979 kg:4195 . ?editor kg:3979 kg:6480 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q103827 wdt:P21 ?gender.\",\n    \"  wd:Q103827 p:P50 ?directorStatement.\",\n    \"  ?directorStatement ps:P50 wd:Q103827.\",\n    \"  wd:Q103827 p:P98 ?editorStatement.\",\n    \"  ?editorStatement ps:P98 wd:Q103827.\",\n    \"  wd:Q103827 p:P57 ?writerStatement.\",\n    \"  ?writerStatement ps:P57 wd:Q103827.\",\n    \"  wd:Q103827 wdt:P31 wd:Q5.\"\n    ]\n}", "normal_query": "SELECT ?person WHERE { wd:Q103827 wdt:P21 ?gender. wd:Q103827 p:P50 ?directorStatement. ?directorStatement ps:P50 wd:Q103827. wd:Q103827 p:P98 ?editorStatement. ?editorStatement ps:P98 wd:Q103827. wd:Q103827 p:P57 ?writerStatement. ?writerStatement ps:P57 wd:Q103827. wd:Q103827 wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P31 wd:Q5.\",\n      \"?person wdt:P1040 wd:Q882.\",\n      \"?person wdt:P57 wd:Q166739.\",\n      \"?person wdt:P58 wd:Q214723.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P1040 wd:Q882. ?person wdt:P57 wd:Q166739. ?person wdt:P58 wd:Q214723. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:8680 kg:4785 .\",\n      \"?resource kg:9816 kg:1774 .\",\n      \"?resource kg:3311 kg:2393 .\",\n      \"?resource kg:2155 kg:2393 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:8680 kg:4785 . ?resource kg:9816 kg:1774 . ?resource kg:3311 kg:2393 . ?resource kg:2155 kg:2393 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q10672438 wdt:P159 ?distributor.\",\n    \"  wd:Q10672438 wdt:P159 ?producer.\",\n    \"  ?distributor wdt:P159 wd:Q10672438.\",\n    \"  ?producer wdt:P159 wd:Q10672438.\",\n    \"  ?distributor wdt:P159 wd:Q10672438.\",\n    \"  ?producer wdt:P159 wd:Q10672438.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q10672438 wdt:P159 ?distributor. wd:Q10672438 wdt:P159 ?producer. ?distributor wdt:P159 wd:Q10672438. ?producer wdt:P159 wd:Q10672438. ?distributor wdt:P159 wd:Q10672438. ?producer wdt:P159 wd:Q10672438. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n      \"?distributorProducer wdt:P750 wd:Q2062523.\",\n      \"?distributorProducer wdt:P127 wd:Q3511946.\",\n      \"?distributorProducer wdt:P127 wd:Q7603552.\",\n      \"?distributorProducer wdt:P127 wd:Q1411292.\",\n      \"?distributorProducer wdt:P127 wd:Q3133593.\",\n      \"?distributorProducer wdt:P127 wd:Q219635.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer wdt:P750 wd:Q2062523. ?distributorProducer wdt:P127 wd:Q3511946. ?distributorProducer wdt:P127 wd:Q7603552. ?distributorProducer wdt:P127 wd:Q1411292. ?distributorProducer wdt:P127 wd:Q3133593. ?distributorProducer wdt:P127 wd:Q219635. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n      \"?distributorProducer kg:2576 kg:5133 .\",\n      \"?distributorProducer kg:7572 kg:8244 .\",\n      \"?distributorProducer kg:3466 kg:8940 .\",\n      \"?distributorProducer kg:3466 kg:6539 .\",\n      \"?distributorProducer kg:3466 kg:6221 .\",\n      \"?distributorProducer kg:3466 kg:8972 .\",\n      \"?distributorProducer kg:3466 kg:5809 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer kg:2576 kg:5133 . ?distributorProducer kg:7572 kg:8244 . ?distributorProducer kg:3466 kg:8940 . ?distributorProducer kg:3466 kg:6539 . ?distributorProducer kg:3466 kg:6221 . ?distributorProducer kg:3466 kg:8972 . ?distributorProducer kg:3466 kg:5809 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q1048296.\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P57 wd:Q1048296.\",\n    \"  ?film wdt:P175 wd:Q104", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?director wdt:P57 wd:Q45602.\",\n      \"?director wdt:P1040 wd:Q374172.\",\n      \"?director wdt:P86 wd:Q238211.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?director WHERE { ?director wdt:P57 wd:Q45602. ?director wdt:P1040 wd:Q374172. ?director wdt:P86 wd:Q238211. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:2003/kg:5517 .\",\n      \"?resource kg:2003/kg:9546 .\",\n      \"?resource kg:2003/kg:8503 .\",\n      \"?resource kg:2003/kg:0094 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:2003/kg:5517 . ?resource kg:2003/kg:9546 . ?resource kg:2003/kg:8503 . ?resource kg:2003/kg:0094 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film1 wdt:P57 wd:Q2064983.\",\n    \"  ?film1 wdt:P175 ?director.\",\n    \"  ?film2 wdt:P57 wd:Q2064983.\",\n    \"  ?film2 wdt:P175 ?director.\",\n    \"  ?film1 wdt:P161 wd:Q2064983.\",\n    \"  ?film2 wdt:P161 wd:Q2064983.\",\n    \"  ?director wdt:P175 wd:Q2064983.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film1 wdt:P57 wd:Q2064983. ?film1 wdt:P175 ?director. ?film2 wdt:P57 wd:Q2064983. ?film2 wdt:P175 ?director. ?film1 wdt:P161 wd:Q2064983. ?film2 wdt:P161 wd:Q2064983. ?director wdt:P175 wd:Q2064983. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?film wdt:P57 wd:Q88965291.\",\n      \"?film wdt:P161 ?director.\",\n      \"?director wdt:P737 wd:Q133730.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P57 wd:Q88965291. ?film wdt:P161 ?director. ?director wdt:P737 wd:Q133730. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n  \"query\": [\n    \"SELECT ?director\",\n    \"WHERE {\",\n      \"?film kg:9852 kg:9388 .\", \"# There Will Be No Leave Today directed by\"\n     \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n      \"?film kg:7838 kg:1056 .\", \"# The Killers directed by\"\n     \t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n      \"?director kg:4919 ?film .\",\n      \"?director kg:7353 kg:3435 .\", \"# Lars von Trier influenced by\"\n     \t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n      \"?director kg:7838 kg:7353 .\" ,\"# Aran Cosentino influenced by\"\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film kg:9852 kg:9388 . ?film kg:7838 kg:1056 . ?director kg:4919 ?film . ?director kg:7353 kg:3435 . ?director kg:7838 kg:7353 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"  ?filmEditor wdt:P106 wd:Q385479.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q133444.\",\n    \"  ?filmEditor wdt:P26 wd:Q50978.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q133444.\",\n    \"  ?filmEditor wdt:P1082 wd:Q50978.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q133444.\",\n    \"  ?filmEditor wdt:P161 wd:Q50978.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q385479. ?filmEditor wdt:P26 wd:Q133444. ?filmEditor wdt:P26 wd:Q133444. ?filmEditor wdt:P26 wd:Q50978. ?filmEditor wdt:P1082 wd:Q133444. ?filmEditor wdt:P1082 wd:Q133444. ?filmEditor wdt:P1082 wd:Q50978. ?filmEditor wdt:P161 wd:Q133444. ?filmEditor wdt:P161 wd:Q133444. ?filmEditor wdt:P161 wd:Q50978. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q7042855 .\", \"# film editor\",\n    \"?filmEditor wdt:P26 wd:Q32337 .\", \"# married Oona O'Neill\",\n    \"?filmEditor wdt:P26 wd:Q137808 .\", \"# married Lita Grey\",\n    \"?filmEditor wdt:P26 wd:Q241019 .\", \"# married Mildred Harris\",\n    \"?filmEditor wdt:P737 wd:Q157191 .\", \"# influenced Federico Fellini\",\n    \"?filmEditor wdt:P737 wd:Q7371 .\", \"# influenced Marcel Marceau\",\n    \"?filmEditor wdt:P737 wd:Q219400 .\", \"# influenced Harold Lloyd\",\n    \"?filmEditor wdt:P112 wd:Q104340 .\", \"# founded United Artists Corporation\"\n  ]\n}", "normal_query": "SELECT ?filmEditor WHERE { ?filmEditor wdt:P106 wd:Q7042855 . ?filmEditor wdt:P26 wd:Q32337 . ?filmEditor wdt:P26 wd:Q137808 . ?filmEditor wdt:P26 wd:Q241019 . ?filmEditor wdt:P737 wd:Q157191 . ?filmEditor wdt:P737 wd:Q7371 . ?filmEditor wdt:P737 wd:Q219400 . ?filmEditor wdt:P112 wd:Q104340 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:0887 kg:3790 .\",\n      \"?resource kg:0599 kg:2780 .\",\n      \"?resource kg:0599 kg:0897 .\",\n      \"?resource kg:0599 kg:4096 .\",\n      \"?resource kg:9515 kg:5797 .\",\n      \"?resource kg:9515 kg:2787 .\",\n      \"?resource kg:9515 kg:6495 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0887 kg:3790 . ?resource kg:0599 kg:2780 . ?resource kg:0599 kg:0897 . ?resource kg:0599 kg:4096 . ?resource kg:9515 kg:5797 . ?resource kg:9515 kg:2787 . ?resource kg:9515 kg:6495 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q1234567 }\", \"  ?film wdt:P57 wd:Q10000.\", \"?film wdt:P170 ?director.\",\n    \"?film wdt:P161 ?star.\",\n    \"?film wdt:P921 ?writer.\",\n    \"?director wdt:P452 wd:Q10000.\",\n    \"?director wdt:P1344 ?influencedBy.\",\n    \"?influencedBy wdt:P170 wd:Q10000.\",\n    \"?star wdt:P1687 ?influencedByStar.\",\n    \"?influencedByStar wdt:P170 wd:Q10000.\",\n    \"?writer wdt:P2534 ?influencedByWriter.\",\n    \"?influencedByWriter wdt:P170 wd:Q10000.\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { VALUES ?film { wd:Q12345678 wd:Q98765432 wd:Q1234567 } ?film wdt:P57 wd:Q10000. ?film wdt:P170 ?director. ?film wdt:P161 ?star. ?film wdt:P921 ?writer. ?director wdt:P452 wd:Q10000. ?director wdt:P1344 ?influencedBy. ?influencedBy wdt:P170 wd:Q10000. ?star wdt:P1687 ?influencedByStar. ?influencedByStar wdt:P170 wd:Q10000. ?writer wdt:P2534 ?influencedByWriter. ?influencedByWriter wdt:P170 wd:Q10000. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  wd:Q2709504 wdt:P161 ?director.\",\n    \"  wd:Q3204825 wdt:P161 ?director.\",\n    \"  wd:Q3161846 wdt:P161 ?director.\",\n    \"  wd:Q2709504 wdt:P57 ?star.\",\n    \"  wd:Q3204825 wdt:P57 ?star.\",\n    \"  wd:Q3161846 wdt:P57 ?star.\",\n    \"  wd:Q2709504 wdt:P58 ?writer.\",\n    \"  wd:Q3204825 wdt:P58 ?writer.\",\n    \"  wd:Q3161846 wdt:P58 ?writer.\",\n    \"  ?director wdt:P737 wd:Q312258.\",\n    \"  ?star wdt:P737 wd:Q312258.\",\n    \"  ?writer wdt:P737 wd:Q312258.\",\n    \"  wd:Q312258 wdt:P26 ?director.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { wd:Q2709504 wdt:P161 ?director. wd:Q3204825 wdt:P161 ?director. wd:Q3161846 wdt:P161 ?director. wd:Q2709504 wdt:P57 ?star. wd:Q3204825 wdt:P57 ?star. wd:Q3161846 wdt:P57 ?star. wd:Q2709504 wdt:P58 ?writer. wd:Q3204825 wdt:P58 ?writer. wd:Q3161846 wdt:P58 ?writer. ?director wdt:P737 wd:Q312258. ?star wdt:P737 wd:Q312258. ?writer wdt:P737 wd:Q312258. wd:Q312258 wdt:P26 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q229990"]], "gold": [["wd:Q229990"]]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  kg:7352 kg:8954 ?director .\",\n    \"  kg:7352 kg:8954 ?star .\",\n    \"  kg:7352 kg:8954 ?writer .\",\n    \"  ?director kg:1025 kg:0156 .\",\n    \"  ?star kg:1025 kg:0156 .\",\n    \"  ?writer kg:1025 kg:0156 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { kg:7352 kg:8954 ?director . kg:7352 kg:8954 ?star . kg:7352 kg:8954 ?writer . ?director kg:1025 kg:0156 . ?star kg:1025 kg:0156 . ?writer kg:1025 kg:0156 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?distributor wdt:P31 wd:Q2064985.\",\n    \"  ?distributor wdt:P749 wd:Q108026.\",\n    \"  ?distributor wdt:P126 wd:Q108026.\",\n    \"  ?producer wdt:P31 wd:Q2064985.\",\n    \"  ?producer wdt:P749 wd:Q108026.\",\n    \"  ?producer wdt:P126 wd:Q108026.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q2064985. ?distributor wdt:P749 wd:Q108026. ?distributor wdt:P126 wd:Q108026. ?producer wdt:P31 wd:Q2064985. ?producer wdt:P749 wd:Q108026. ?producer wdt:P126 wd:Q108026. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q17070012 wdt:P127 ?distributor.\",\n    \"  wd:Q17070012 wdt:P127 ?producer.\",\n    \"  ?distributor wdt:P272 wd:Q849363.\",\n    \"  ?distributor wdt:P272 wd:Q219635.\",\n    \"  ?producer wdt:P272 wd:Q65073147.\",\n    \"  ?producer wdt:P272 wd:Q318128.\",\n    \"  ?distributor wdt:P272 wd:Q136469.\",\n    \"  ?distributor wdt:P272 wd:Q1628791.\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q17070012 wdt:P127 ?distributor. wd:Q17070012 wdt:P127 ?producer. ?distributor wdt:P272 wd:Q849363. ?distributor wdt:P272 wd:Q219635. ?producer wdt:P272 wd:Q65073147. ?producer wdt:P272 wd:Q318128. ?distributor wdt:P272 wd:Q136469. ?distributor wdt:P272 wd:Q1628791. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n      \"?distributorProducer kg:7869 kg:9760 .\",\n      \"?distributorProducer kg:4799 kg:5185 .\",\n      \"?distributorProducer kg:6391 kg:1153 .\",\n      \"?distributorProducer kg:6391 kg:0370 .\",\n      \"?distributorProducer kg:6391 kg:8446 .\",\n      \"?distributorProducer kg:6391 kg:5147 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer kg:7869 kg:9760 . ?distributorProducer kg:4799 kg:5185 . ?distributorProducer kg:6391 kg:1153 . ?distributorProducer kg:6391 kg:0370 . ?distributorProducer kg:6391 kg:8446 . ?distributorProducer kg:6391 kg:5147 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"  ?writer wdt:P31 wd:Q33964.\",\n    \"  ?writer wdt:P2868 ?film.\",\n    \"  VALUES ?film {wd:Q5076400 wd:Q1059440 wd:Q1059440}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q33964. ?writer wdt:P2868 ?film. VALUES ?film {wd:Q5076400 wd:Q1059440 wd:Q1059440}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P1040 wd:Q3633009.\",\n      \"?writer wdt:P58 wd:Q4004365.\",\n      \"?writer wdt:P57 wd:Q289021.\",\n      \"?writer wdt:P57 wd:Q463946.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P1040 wd:Q3633009. ?writer wdt:P58 wd:Q4004365. ?writer wdt:P57 wd:Q289021. ?writer wdt:P57 wd:Q463946. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"?resource kg:3045 kg:0652 .\",\n      \"?resource kg:3045 kg:0939 .\",\n      \"?resource kg:3045 kg:1754 .\",\n      \"?resource kg:8940 kg:9187 .\",\n      \"?resource kg:8940 kg:6030 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:3045 kg:0652 . ?resource kg:3045 kg:0939 . ?resource kg:3045 kg:1754 . ?resource kg:8940 kg:9187 . ?resource kg:8940 kg:6030 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P106 wd:Q385479.\",\n    \"  ?cinematographer wdt:P2093 wd:Q105364.\",\n    \"  ?cinematographer wdt:P2093 wd:Q105365.\",\n    \"  ?cinematographer wdt:P26 wd:Q7844.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P106 wd:Q385479. ?cinematographer wdt:P2093 wd:Q105364. ?cinematographer wdt:P2093 wd:Q105365. ?cinematographer wdt:P26 wd:Q7844. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P106 wd:Q222344 .\",\n    \"  ?cinematographer wdt:P112 wd:Q216611 .\",\n    \"  ?cinematographer wdt:P112 wd:Q242446 .\",\n    \"  ?cinematographer wdt:P112 wd:Q258945 .\",\n    \"  ?cinematographer wdt:P112 wd:Q746676 .\",\n    \"  ?cinematographer wdt:P112 wd:Q1044630 .\",\n    \"  ?spouse wdt:P26 ?cinematographer .\",\n    \"  ?spouse wdt:P112 wd:Q6813152 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P106 wd:Q222344 . ?cinematographer wdt:P112 wd:Q216611 . ?cinematographer wdt:P112 wd:Q242446 . ?cinematographer wdt:P112 wd:Q258945 . ?cinematographer wdt:P112 wd:Q746676 . ?cinematographer wdt:P112 wd:Q1044630 . ?spouse wdt:P26 ?cinematographer . ?spouse wdt:P112 wd:Q6813152 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer kg:2039 kg:2511 .\",\n      \"?cinematographer kg:2681 kg:7772 .\",\n      \"?cinematographer kg:4287 kg:5448 .\",\n      \"?cinematographer kg:4287 kg:0403 .\",\n      \"?cinematographer kg:4287 kg:3386 .\",\n      \"?cinematographer kg:4287 kg:1255 .\",\n      \"?cinematographer kg:4287 kg:5134 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer kg:2039 kg:2511 . ?cinematographer kg:2681 kg:7772 . ?cinematographer kg:4287 kg:5448 . ?cinematographer kg:4287 kg:0403 . ?cinematographer kg:4287 kg:3386 . ?cinematographer kg:4287 kg:1255 . ?cinematographer kg:4287 kg:5134 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q3393466.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 ?cinematographer. ?cinematographer wdt:P106 wd:Q3393466. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P161 wd:Q96054985 .\", \"  ?cinematographer wdt:P344 wd:Q87778273 .\",\n    \"  ?cinematographer wdt:P161 wd:Q85520081 .\",\n    \"  ?cinematographer wdt:P344 wd:Q85532437 .\",\n    \"  ?cinematographer wdt:P1040 wd:Q87778273 .\",\n    \"  ?cinematographer wdt:P1431 wd:Q87778273 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P161 wd:Q96054985 . ?cinematographer wdt:P344 wd:Q87778273 . ?cinematographer wdt:P161 wd:Q85520081 . ?cinematographer wdt:P344 wd:Q85532437 . ?cinematographer wdt:P1040 wd:Q87778273 . ?cinematographer wdt:P1431 wd:Q87778273 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?cinematographer kg:8425 kg:3942 .\", \"# cinematographer of Inception\",\n      \"?cinematographer kg:8425 kg:3761 .\", \"# cinematographer of Game Over\",\n      \"?cinematographer kg:8425 kg:4775 .\", \"# cinematographer of Liberation\",\n      \"?cinematographer kg:0779 kg:1857 .\", \"# wrote The Madness\",\n      \"?cinematographer kg:6722 kg:1857 .\", \"# directed The Madness\",\n      \"?cinematographer kg:0856 kg:1857 .\", \"# edited The Madness\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer kg:8425 kg:3942 . ?cinematographer kg:8425 kg:3761 . ?cinematographer kg:8425 kg:4775 . ?cinematographer kg:0779 kg:1857 . ?cinematographer kg:6722 kg:1857 . ?cinematographer kg:0856 kg:1857 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048296.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P175 ?director.\",\n    \"  ?film wdt:P162 ?writer.\",\n    \"  ?film wdt:P163 ?cinematographer.\",\n    \"  FILTER(?releaseDate >= \\\"1900-01-01T00:00:00Z\\\"^^xsd:dateTime && ?releaseDate < \\\"2024-01-01T00:00:00Z\\\"^^xsd:dateTime).\",\n    \"  VALUES ?film { wd:Q386759 wd:Q1048296 }.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?film wdt:P31 wd:Q1048296. ?film wdt:P577 ?releaseDate. ?film wdt:P175 ?director. ?film wdt:P162 ?writer. ?film wdt:P163 ?cinematographer. FILTER(?releaseDate >= \"1900-01-01T00:00:00Z\"^^xsd:dateTime && ?releaseDate < \"2024-01-01T00:00:00Z\"^^xsd:dateTime). VALUES ?film { wd:Q386759 wd:Q1048296 }. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  wd:Q1609393 wdt:P344 ?writer.\",\n    \"  wd:Q2411065 wdt:P344 ?cinematographer.\",\n    \"  wd:Q208910 wdt:P344 ?writer.\",\n    \"  wd:Q613974 wdt:P344 ?cinematographer.\",\n    \"  wd:Q52306598 wdt:P737 ?person.\",\n    \"  ?person wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q5.\",\n    \"  ?writer wdt:P58 ?date1.\",\n    \"  ?cinematographer wdt:P58 ?date2.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { wd:Q1609393 wdt:P344 ?writer. wd:Q2411065 wdt:P344 ?cinematographer. wd:Q208910 wdt:P344 ?writer. wd:Q613974 wdt:P344 ?cinematographer. wd:Q52306598 wdt:P737 ?person. ?person wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5. ?writer wdt:P58 ?date1. ?cinematographer wdt:P58 ?date2. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n      \"?writer kg:0611 kg:3218 .\",\n      \"?writer kg:8427 kg:9012 .\",\n      \"?writer kg:8427 kg:0352 .\",\n      \"?writer kg:8427 kg:3655 .\",\n      \"?cinematographer kg:0611 kg:3218 .\",\n      \"?cinematographer kg:8427 kg:9012 .\",\n      \"?cinematographer kg:8427 kg:0352 .\",\n      \"?cinematographer kg:8427 kg:3655 .\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?writer kg:0611 kg:3218 . ?writer kg:8427 kg:9012 . ?writer kg:8427 kg:0352 . ?writer kg:8427 kg:3655 . ?cinematographer kg:0611 kg:3218 . ?cinematographer kg:8427 kg:9012 . ?cinematographer kg:8427 kg:0352 . ?cinematographer kg:8427 kg:3655 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q10642978 wdt:P31 wd:Q571747.\",\n    \"  wd:Q10642978 wdt:P170 ?director.\",\n    \"  wd:Q10642978 wdt:P161 ?cinematographer.\",\n    \"  ?director wdt:P31 wd:Q571747.\",\n    \"  ?director wdt:P106 wd:Q10642978.\",\n    \"  ?director wdt:P106 wd:Q10642978.\",\n    \"  ?director wdt:P35 wd:Q10642978.\",\n    \"  ?director wdt:P106 wd:Q10642978.\",\n    \"  ?director wdt:P106 wd:Q10642978.\"\n    ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q10642978 wdt:P31 wd:Q571747. wd:Q10642978 wdt:P170 ?director. wd:Q10642978 wdt:P161 ?cinematographer. ?director wdt:P31 wd:Q571747. ?director wdt:P106 wd:Q10642978. ?director wdt:P106 wd:Q10642978. ?director wdt:P35 wd:Q10642978. ?director wdt:P106 wd:Q10642978. ?director wdt:P106 wd:Q10642978. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  wd:Q1361018 wdt:P1040 ?film.\",\n    \"  ?film wdt:P57 wd:Q2086445.\",\n    \"  ?film wdt:P58 wd:Q222344.\",\n    \"  ?film wdt:P1431 ?cinematographer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q1361018 wdt:P1040 ?film. ?film wdt:P57 wd:Q2086445. ?film wdt:P58 wd:Q222344. ?film wdt:P1431 ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n      \"?film kg:5926 kg:7860 .\",\n      \"?film kg:5354 kg:0265 .\",\n      \"?film kg:2405 kg:3690 .\",\n      \"?film kg:4444 kg:0722 .\",\n      \"?film kg:58 kg:4939 .\",\n      \"?cinematographer kg:106 ?film .\"\n    ]\n  }\n ", "normal_query": "SELECT ?cinematographer WHERE { ?film kg:5926 kg:7860 . ?film kg:5354 kg:0265 . ?film kg:2405 kg:3690 . ?film kg:4444 kg:0722 . ?film kg:58 kg:4939 . ?cinematographer kg:106 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  ?film wdt:P57 wd:Q1064932.\",\n    \"  ?film wdt:P58 wd:Q1064932.\",\n    \"  ?film wdt:P58 wd:Q1064932.\",\n    \"  ?film wdt:P57 wd:Q1064932.\",\n    \"  ?director wdt:P106 wd:Q33964.\",\n    \"  ?director wdt:P108 wd:Q1064932.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P57 wd:Q1064932. ?film wdt:P58 wd:Q1064932. ?film wdt:P58 wd:Q1064932. ?film wdt:P57 wd:Q1064932. ?director wdt:P106 wd:Q33964. ?director wdt:P108 wd:Q1064932. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  VALUES ?film { wd:Q63993096 wd:Q2493884 wd:Q2298257 }\",\n    \"  ?film wdt:P1040 ?director.\",\n    \"  ?director wdt:P106 wd:Q2526255.\",\n    \"  ?director wdt:P737 ?spouse.\",\n    \"  ?spouse wdt:P26 ?director.\",\n    \"  ?director wdt:P58 wd:Q312258.\"\n    ]\n}", "normal_query": "SELECT ?director WHERE { VALUES ?film { wd:Q63993096 wd:Q2493884 wd:Q2298257 } ?film wdt:P1040 ?director. ?director wdt:P106 wd:Q2526255. ?director wdt:P737 ?spouse. ?spouse wdt:P26 ?director. ?director wdt:P58 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n      \"?film kg:4129 kg:3350 .\",\n      \"?film kg:5639 kg:1567 .\",\n      \"?film kg:5639 kg:2133 .\",\n      \"?film kg:8697 ?director .\",\n      \"?director kg:4129 kg:1795 .\",\n      \"?director kg:0316 kg:6269 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?director WHERE { ?film kg:4129 kg:3350 . ?film kg:5639 kg:1567 . ?film kg:5639 kg:2133 . ?film kg:8697 ?director . ?director kg:4129 kg:1795 . ?director kg:0316 kg:6269 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?film wdt:P31 wd:Q1048297.\",\n    \"  ?film wdt:P577 ?releaseDate.\",\n    \"  ?film wdt:P161 ?distributor.\",\n    \"  ?film wdt:P170 ?producer.\",\n    \"  ?distributor wdt:P31 wd:Q2894834.\",\n    \"  ?producer wdt:P31 wd:Q2894834.\",\n    \"  ?distributor wdt:P170 ?acquirerDistributor.\",\n    \"  ?producer wdt:P170 ?acquirerProducer.\",\n    \"  VALUES ?acquirerDistributor {wd:Q56342 wd:Q8944 wd:Q10644 wd:Q10644 wd:Q10644}.\",\n    \"  VALUES ?acquirerProducer {wd:Q7432 wd:Q10644 wd:Q10644 wd:Q10644}.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?film wdt:P31 wd:Q1048297. ?film wdt:P577 ?releaseDate. ?film wdt:P161 ?distributor. ?film wdt:P170 ?producer. ?distributor wdt:P31 wd:Q2894834. ?producer wdt:P31 wd:Q2894834. ?distributor wdt:P170 ?acquirerDistributor. ?producer wdt:P170 ?acquirerProducer. VALUES ?acquirerDistributor {wd:Q56342 wd:Q8944 wd:Q10644 wd:Q10644 wd:Q10644}. VALUES ?acquirerProducer {wd:Q7432 wd:Q10644 wd:Q10644 wd:Q10644}. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n      \"?distributorProducer wdt:P750 wd:Q2062523.\",\n      \"?distributorProducer wdt:P127 wd:Q3511946.\",\n      \"?distributorProducer wdt:P127 wd:Q7603552.\",\n      \"?distributorProducer wdt:P127 wd:Q2007336.\",\n      \"?distributorProducer wdt:P127 wd:Q219635.\",\n      \"?distributorProducer wdt:P127 wd:Q505275.\"\n    ]\n  }\n  \t\t", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer wdt:P750 wd:Q2062523. ?distributorProducer wdt:P127 wd:Q3511946. ?distributorProducer wdt:P127 wd:Q7603552. ?distributorProducer wdt:P127 wd:Q2007336. ?distributorProducer wdt:P127 wd:Q219635. ?distributorProducer wdt:P127 wd:Q505275. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n      \"?distributorProducer kg:0968 kg:2147 kg:3944 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:3261 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:3199 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:4291 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:1622 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:6334 .\",\n      \"?distributorProducer kg:0968 kg:3944 kg:4156 .\"\n    ]\n  }\n ", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer kg:0968 kg:2147 kg:3944 . ?distributorProducer kg:0968 kg:3944 kg:3261 . ?distributorProducer kg:0968 kg:3944 kg:3199 . ?distributorProducer kg:0968 kg:3944 kg:4291 . ?distributorProducer kg:0968 kg:3944 kg:1622 . ?distributorProducer kg:0968 kg:3944 kg:6334 . ?distributorProducer kg:0968 kg:3944 kg:4156 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 wd:Q608964.\",\n    \"  ?film wdt:P161 wd:Q10624.\",\n    \"  ?film wdt:P162 wd:Q30446.\",\n    \"  ?film wdt:P58 wd:Q76944.\",\n    \"  ?film wdt:P175 wd:Q10624.\",\n    \"  ?film wdt:P175 wd:Q30446.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q608964. ?film wdt:P161 wd:Q10624. ?film wdt:P162 wd:Q30446. ?film wdt:P58 wd:Q76944. ?film wdt:P175 wd:Q10624. ?film wdt:P175 wd:Q30446. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P161 wd:Q93188 .\", \"# directed by Errol Flynn\",\n    \"?film wdt:P58 wd:Q744357 .\", \"# produced by Paul Fix\",\n    \"?film wdt:P272 wd:Q16390 .\", \"# written by Randolph Scott\",\n    \"?film wdt:P272 wd:Q295984 .\", \"# written by Miriam Hopkins\",\n    \"?film wdt:P272 wd:Q4420093 .\", \"# written by Humphrey Bogart\",\n    \"?film wdt:P272 wd:Q242477 .\" ,\"# written by Robert Buckner\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P161 wd:Q93188 . ?film wdt:P58 wd:Q744357 . ?film wdt:P272 wd:Q16390 . ?film wdt:P272 wd:Q295984 . ?film wdt:P272 wd:Q4420093 . ?film wdt:P272 wd:Q242477 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-small:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film kg:0291 kg:7320 .\", \"# directed by\"\n      ,\"?film kg:0334 kg:5032 .\", \"# produced by\"\n      ,\"?film kg:1933 kg:6011 .\", \"# written by Randolph Scott\"\n      ,\"?film kg:1933 kg:7895 .\", \"# written by Miriam Hopkins\"\n      ,\"?film kg:1933 kg:2669 .\", \"# written by Humphrey Bogart\"\n      ,\"?film kg:1933 kg:1907 .\", \"# written by Robert Buckner\"\n      ,\"?film kg:5442 kg:4532 .\", \"# starred Errol Flynn\"\n      ,\"?film kg:5442 kg:7648 .\", \"# starred Paul Fix\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:0291 kg:7320 . ?film kg:0334 kg:5032 . ?film kg:1933 kg:6011 . ?film kg:1933 kg:7895 . ?film kg:1933 kg:2669 . ?film kg:1933 kg:1907 . ?film kg:5442 kg:4532 . ?film kg:5442 kg:7648 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q1340296 wdt:P31 wd:Q5782299.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1340296 wdt:P31 wd:Q5782299. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q103013 wdt:P106 wd:Q69423232 .\",\n      \"BIND(wd:Q103013 AS ?resource) }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q103013 wdt:P106 wd:Q69423232 . BIND(wd:Q103013 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q103013"]], "gold": [true]}
{"question": "Was Hans Ertl a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5262 kg:7910 ?resource . }\",\n        \"UNION\",\n        \"{ ?resource kg:7910 kg:9740 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:5262 kg:7910 ?resource . } UNION { ?resource kg:7910 kg:9740 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?composer WHERE {\",\n      \"wd:Q396 wdt:P106 ?occupation .\",\n      \"?occupation wdt:P279* wd:Q57081 .\",\n      \"}\",\n     \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q396 wdt:P106 ?occupation . ?occupation wdt:P279* wd:Q57081 . } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Q392\nwdt:P106 is P106\nwd:Q36834 is Q36834", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q392 wdt:P106 wd:Q36834 .\",\n      \"BIND(wd:Q392 AS ?resource) }\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q392 wdt:P106 wd:Q36834 . BIND(wd:Q392 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q392"]], "gold": [true]}
{"question": "Was a composer Bob Dylan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1692 is Q392\nkg:3308 is P106\nkg:9736 is Q36834", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:3308 kg:9736 .\",\n      \"?resource kg:1692 kg:392 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3308 kg:9736 . ?resource kg:1692 kg:392 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What did human found", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q5669"], ["wd:Q2569"], ["wd:Q5396"], ["wd:Q1585"], ["wd:Q2518"], ["wd:Q3319"], ["wd:Q5105"], ["wd:Q2054"], ["wd:Q6086"], ["wd:Q377"], ["wd:Q4581"], ["wd:Q6379"], ["wd:Q1544"], ["wd:Q1760"], ["wd:Q1993"], ["wd:Q1950"], ["wd:Q307"], ["wd:Q4605"], ["wd:Q3137"], ["wd:Q4715"], ["wd:Q5879"], ["wd:Q1747"], ["wd:Q3647"], ["wd:Q6319"], ["wd:Q1424"], ["wd:Q5074"], ["wd:Q5345"], ["wd:Q1803"], ["wd:Q989"], ["wd:Q6324"], ["wd:Q1324"], ["wd:Q1379"], ["wd:Q2252"], ["wd:Q1496"], ["wd:Q1414"], ["wd:Q2543"], ["wd:Q5071"], ["wd:Q80"], ["wd:Q5803"], ["wd:Q1666"], ["wd:Q5391"], ["wd:Q4510"], ["wd:Q4583"], ["wd:Q4652"], ["wd:Q5348"], ["wd:Q3188"], ["wd:Q4518"], ["wd:Q3345"], ["wd:Q4573"], ["wd:Q5443"], ["wd:Q5458"], ["wd:Q615"], ["wd:Q6060"], ["wd:Q4673"], ["wd:Q1639"], ["wd:Q6351"], ["wd:Q3867"], ["wd:Q4774"], ["wd:Q2116"], ["wd:Q3824"], ["wd:Q4924"], ["wd:Q5169"], ["wd:Q6404"], ["wd:Q1402"], ["wd:Q1409"], ["wd:Q2866"], ["wd:Q4212"], ["wd:Q5170"], ["wd:Q5977"], ["wd:Q1300"], ["wd:Q354"], ["wd:Q2190"], ["wd:Q1081"], ["wd:Q3271"], ["wd:Q3547"], ["wd:Q5409"], ["wd:Q5587"], ["wd:Q3816"], ["wd:Q935"], ["wd:Q3205"], ["wd:Q4538"], ["wd:Q4807"], ["wd:Q181"], ["wd:Q4989"], ["wd:Q4735"], ["wd:Q4578"], ["wd:Q4203"], ["wd:Q1001"], ["wd:Q2327"], ["wd:Q4732"], ["wd:Q5585"], ["wd:Q868"], ["wd:Q4199"], ["wd:Q4289"], ["wd:Q5819"], ["wd:Q2125"], ["wd:Q1453"], ["wd:Q567"], ["wd:Q1523"], ["wd:Q4414"], ["wd:Q1267"], ["wd:Q2737"], ["wd:Q1984"], ["wd:Q1768"], ["wd:Q1802"], ["wd:Q4604"], ["wd:Q1958"], ["wd:Q2593"], ["wd:Q4237"], ["wd:Q368"], ["wd:Q2253"], ["wd:Q5877"], ["wd:Q1755"], ["wd:Q302"], ["wd:L1375130"], ["wd:Q410"], ["wd:Q1705"], ["wd:Q2022"], ["wd:Q3925"], ["wd:Q814"], ["wd:Q5588"], ["wd:Q5827"], ["wd:Q5432"], ["wd:Q1672"], ["wd:Q4119"], ["wd:Q5591"], ["wd:Q3260"], ["wd:Q4934"], ["wd:Q6519"], ["wd:Q1446"], ["wd:Q4489"], ["wd:Q6530"], ["wd:Q186"], ["wd:Q5076"], ["wd:Q6260"], ["wd:Q820"], ["wd:Q1708"], ["wd:Q449"], ["wd:Q360"], ["wd:Q512"], ["wd:Q1769"], ["wd:Q4395"], ["wd:Q4042"], ["wd:Q1260"], ["wd:Q5333"], ["wd:Q1511"], ["wd:Q1922"], ["wd:Q329"], ["wd:Q4612"], ["wd:Q5650"], ["wd:Q1762"], ["wd:Q6195"], ["wd:Q1878"], ["wd:Q4509"], ["wd:Q4448"], ["wd:Q1646"], ["wd:Q1912"], ["wd:Q4881"], ["wd:Q2039"], ["wd:Q855"], ["wd:Q2274"], ["wd:Q1253"], ["wd:Q3099"], ["wd:Q1264"], ["wd:Q2196"], ["wd:Q4738"], ["wd:Q5070"], ["wd:Q3835"], ["wd:Q3910"], ["wd:Q4691"], ["wd:Q4960"], ["wd:Q2006"], ["wd:Q4302"], ["wd:Q5199"], ["wd:Q6515"], ["wd:Q464"], ["wd:Q5553"], ["wd:Q4014"], ["wd:Q1739"], ["wd:Q6722"], ["wd:Q2291"], ["wd:Q4517"], ["wd:Q440"], ["wd:Q6304"], ["wd:Q1325"], ["wd:Q353"], ["wd:Q255"], ["wd:Q1294"], ["wd:Q1791"], ["wd:Q3355"], ["wd:Q4487"], ["wd:Q2602"], ["wd:Q2031"], ["wd:Q5593"], ["wd:Q6310"], ["wd:Q4313"], ["wd:Q1779"], ["wd:Q3324"], ["wd:Q742"], ["wd:Q6527"], ["wd:Q2599"], ["wd:Q3371"], ["wd:Q6198"], ["wd:Q1885"], ["wd:Q6882"], ["wd:Q2573"], ["wd:Q1230"], ["wd:Q1945"], ["wd:Q1317"], ["wd:Q4496"], ["wd:Q296"], ["wd:Q1323"], ["wd:Q1332"], ["wd:Q207"], ["wd:Q1257"], ["wd:Q2757"], ["wd:Q1394"], ["wd:Q2042"], ["wd:Q4012"], ["wd:Q4279"], ["wd:Q4026"], ["wd:Q838"], ["wd:Q839"], ["wd:Q1717"], ["wd:Q4328"], ["wd:Q6091"], ["wd:Q3677"], ["wd:Q6969"], ["wd:Q762"], ["wd:Q1331"], ["wd:Q6300"], ["wd:Q76"], ["wd:Q1753"], ["wd:Q5738"], ["wd:Q2492"], ["wd:Q2597"], ["wd:Q1319"], ["wd:Q1920"], ["wd:Q6512"], ["wd:Q1245"], ["wd:Q4064"], ["wd:Q4124"], ["wd:Q7013"], ["wd:Q2010"], ["wd:Q859"], ["wd:Q2767"], ["wd:Q5664"], ["wd:Q1669"], ["wd:Q3321"], ["wd:Q3996"], ["wd:Q1225"], ["wd:Q5208"], ["wd:Q5670"], ["wd:Q1488"], ["wd:Q157"], ["wd:Q1333"], ["wd:Q765"], ["wd:Q675"], ["wd:Q2172"], ["wd:Q4992"], ["wd:Q3622"], ["wd:Q4145"], ["wd:Q632"], ["wd:Q2594"], ["wd:Q1938"], ["wd:Q5752"], ["wd:Q4914"], ["wd:Q1911"], ["wd:Q3285"], ["wd:Q4038"], ["wd:Q5031"], ["wd:Q2538"], ["wd:Q2563"], ["wd:Q1290"], ["wd:Q4337"], ["wd:Q5284"], ["wd:Q5686"], ["wd:Q1463"], ["wd:Q4701"], ["wd:Q6395"], ["wd:Q1687"], ["wd:Q1241"], ["wd:Q3275"], ["wd:Q5682"], ["wd:Q4500"], ["wd:Q3098"], ["wd:Q4298"], ["wd:Q6050"], ["wd:Q1631"], ["wd:Q1298"], ["wd:Q379"], ["wd:Q1943"], ["wd:Q4227"], ["wd:Q2908"], ["wd:Q607"], ["wd:Q1919"], ["wd:Q4009"], ["wd:Q5264"], ["wd:Q1752"], ["wd:Q4631"], ["wd:Q2339"], ["wd:Q297"], ["wd:Q1962"], ["wd:Q5820"], ["wd:Q1839"], ["wd:Q1936"], ["wd:Q4128"], ["wd:Q5829"], ["wd:Q2791"], ["wd:Q1416"], ["wd:Q206"], ["wd:Q4441"], ["wd:Q6312"], ["wd:Q4235"], ["wd:Q5236"], ["wd:Q1651"], ["wd:Q1228"], ["wd:Q5454"], ["wd:Q3365"], ["wd:Q6694"], ["wd:Q3671"], ["wd:Q3095"], ["wd:Q5652"], ["wd:Q603"], ["wd:Q4926"], ["wd:Q1681"], ["wd:Q6079"], ["wd:Q2808"], ["wd:Q3340"], ["wd:Q4030"], ["wd:Q1665"], ["wd:Q2512"], ["wd:Q557"], ["wd:Q4349"], ["wd:Q1503"], ["wd:Q5364"], ["wd:Q1427"], ["wd:Q949"], ["wd:Q2754"], ["wd:Q5233"], ["wd:Q1652"], ["wd:Q4293"], ["wd:Q444"], ["wd:Q2680"], ["wd:Q4461"], ["wd:Q1023"], ["wd:Q4340"], ["wd:Q1411"], ["wd:Q1691"], ["wd:Q331"], ["wd:Q1771"], ["wd:Q5327"], ["wd:Q4028"], ["wd:Q5649"], ["wd:Q3128"], ["wd:Q4270"], ["wd:Q590"], ["wd:Q1500"], ["wd:Q1271"], ["wd:Q1436"], ["wd:Q1805"], ["wd:Q1124"], ["wd:Q2540"], ["wd:Q3253"], ["wd:Q4723"], ["wd:Q1910"], ["wd:Q1417"], ["wd:Q1797"], ["wd:Q1929"], ["wd:Q5450"], ["wd:Q6419"], ["wd:Q2542"], ["wd:Q624"], ["wd:Q4737"], ["wd:Q1189"], ["wd:Q1937"], ["wd:Q4790"], ["wd:Q4058"], ["wd:Q4039"], ["wd:Q1812"], ["wd:Q2677"], ["wd:Q6297"], ["wd:Q5805"], ["wd:Q6817"], ["wd:Q1224"], ["wd:Q2072"], ["wd:Q5172"], ["wd:Q6026"], ["wd:Q2646"], ["wd:Q303"], ["wd:Q530"], ["wd:Q1528"], ["wd:Q1660"], ["wd:Q1699"], ["wd:Q4761"], ["wd:Q1918"], ["wd:Q5335"], ["wd:Q6541"], ["wd:Q5721"], ["wd:Q504"], ["wd:Q3990"], ["wd:Q4281"], ["wd:Q493"], ["wd:Q1276"], ["wd:Q5659"], ["wd:Q1395"], ["wd:Q2494"], ["wd:Q475"], ["wd:Q651"], ["wd:Q692"], ["wd:Q5679"], ["wd:Q4770"], ["wd:Q5344"], ["wd:Q3121"], ["wd:Q5795"], ["wd:Q3374"], ["wd:Q4671"], ["wd:Q517"], ["wd:Q1403"], ["wd:Q6338"], ["wd:Q7060"], ["wd:Q5015"], ["wd:Q529"], ["wd:Q3166"], ["wd:Q4889"], ["wd:Q4997"], ["wd:Q6013"], ["wd:Q1275"], ["wd:Q5811"], ["wd:Q4616"], ["wd:Q873"], ["wd:Q4318"], ["wd:Q4805"], ["wd:Q5598"], ["wd:Q3350"], ["wd:Q4695"], ["wd:Q3378"], ["wd:Q1433"], ["wd:Q3301"], ["wd:Q4332"], ["wd:Q4490"], ["wd:Q1924"], ["wd:Q4285"], ["wd:Q714"], ["wd:Q1909"], ["wd:Q4025"], ["wd:Q407"], ["wd:Q320"], ["wd:Q3288"], ["wd:Q1732"], ["wd:Q1956"], ["wd:Q845"], ["wd:Q1541"], ["wd:Q937"], ["wd:Q1776"], ["wd:Q849"], ["wd:Q2496"], ["wd:Q3772"], ["wd:Q2607"], ["wd:Q5442"], ["wd:Q6105"], ["wd:Q6701"], ["wd:Q1151"], ["wd:Q815"], ["wd:Q1067"], ["wd:Q1796"], ["wd:Q2259"], ["wd:Q3606"], ["wd:Q2750"], ["wd:Q5356"], ["wd:Q1991"], ["wd:Q609"], ["wd:Q4762"], ["wd:Q5821"], ["wd:Q4690"], ["wd:Q5581"], ["wd:Q3356"], ["wd:Q857"], ["wd:Q4261"], ["wd:Q6391"], ["wd:Q720"], ["wd:Q3773"], ["wd:Q400"], ["wd:Q1425"], ["wd:Q2104"], ["wd:Q892"], ["wd:Q5260"], ["wd:Q5589"], ["wd:Q5594"], ["wd:Q1398"], ["wd:Q2097"], ["wd:Q5661"], ["wd:Q2610"], ["wd:Q576"], ["wd:Q7011"], ["wd:Q636"], ["wd:Q4883"], ["wd:Q1625"], ["wd:Q1788"], ["wd:Q1879"], ["wd:Q1798"], ["wd:Q2071"], ["wd:Q946"], ["wd:Q4036"], ["wd:Q3335"], ["wd:Q4724"], ["wd:Q5599"], ["wd:Q6033"], ["wd:Q260"], ["wd:Q346"], ["wd:Q1043"], ["wd:Q1786"], ["wd:Q4931"], ["wd:Q4273"], ["wd:Q1464"], ["wd:Q5350"], ["wd:Q1429"], ["wd:Q1178"], ["wd:Q5269"], ["wd:Q272"], ["wd:Q5252"], ["wd:Q1047"], ["wd:Q448"], ["wd:Q1662"], ["wd:Q3993"], ["wd:Q6096"], ["wd:Q5631"], ["wd:Q498"], ["wd:Q1927"], ["wd:Q3291"], ["wd:Q4443"], ["wd:Q1145"], ["wd:Q1685"], ["wd:Q5271"], ["wd:Q4323"], ["wd:Q1738"], ["wd:Q6197"], ["wd:Q1233"], ["wd:Q5363"], ["wd:Q600"], ["wd:Q2643"], ["wd:Q1655"], ["wd:Q6100"], ["wd:Q1259"], ["wd:Q2124"], ["wd:Q1750"], ["wd:Q5479"], ["wd:Q4408"], ["wd:Q6538"], ["wd:Q939"], ["wd:Q3090"], ["wd:Q5005"], ["wd:Q6242"], ["wd:Q5080"], ["wd:Q6294"], ["wd:Q5912"], ["wd:Q1777"], ["wd:Q5000"], ["wd:Q1634"], ["wd:Q767"], ["wd:Q5060"], ["wd:Q5197"], ["wd:Q5382"], ["wd:Q4757"], ["wd:Q640"], ["wd:Q5626"], ["wd:Q5280"], ["wd:Q6030"], ["wd:Q555"], ["wd:Q4189"], ["wd:Q3373"], ["wd:Q1677"], ["wd:Q352"], ["wd:Q4137"], ["wd:Q2601"], ["wd:Q5834"], ["wd:Q2582"], ["wd:Q4689"], ["wd:Q5040"], ["wd:Q6279"], ["wd:Q4832"], ["wd:Q913"], ["wd:Q1339"], ["wd:Q4070"], ["wd:Q3924"], ["wd:Q1782"], ["wd:Q687"], ["wd:Q2685"], ["wd:Q4473"], ["wd:Q1659"], ["wd:Q1419"], ["wd:Q4153"], ["wd:Q5360"], ["wd:Q6281"], ["wd:Q1933"], ["wd:Q6399"], ["wd:Q6427"], ["wd:Q3197"], ["wd:Q6733"], ["wd:Q4061"], ["wd:Q4413"], ["wd:Q4742"], ["wd:Q1654"], ["wd:Q1056"], ["wd:Q1804"], ["wd:Q562"], ["wd:Q2604"], ["wd:Q5558"], ["wd:Q4806"], ["wd:Q1322"], ["wd:Q3165"], ["wd:Q4864"], ["wd:Q6107"], ["wd:Q5028"], ["wd:Q1742"], ["wd:Q5073"], ["wd:Q1423"], ["wd:Q905"], ["wd:Q5656"], ["wd:Q4462"], ["wd:Q5683"], ["wd:Q3195"], ["wd:Q3911"], ["wd:Q1604"], ["wd:Q3036"], ["wd:Q4223"], ["wd:Q6215"], ["wd:Q1751"], ["wd:Q3611"], ["wd:Q4501"], ["wd:Q6270"], ["wd:Q1316"], ["wd:Q1242"], ["wd:Q920"], ["wd:Q4245"], ["wd:Q747"], ["wd:Q755"], ["wd:Q3610"], ["wd:Q7031"], ["wd:Q2571"], ["wd:Q2040"], ["wd:Q5258"], ["wd:Q5950"], ["wd:Q1330"], ["wd:Q2632"], ["wd:Q5586"], ["wd:Q1778"], ["wd:Q2153"], ["wd:Q6711"], ["wd:Q5865"], ["wd:Q984"], ["wd:Q862"], ["wd:Q1657"], ["wd:Q1942"], ["wd:Q2330"], ["wd:Q4330"], ["wd:Q5349"], ["wd:Q6682"], ["wd:Q5404"], ["wd:Q1766"], ["wd:Q1935"], ["wd:Q5651"], ["wd:Q6370"], ["wd:Q4731"], ["wd:Q4835"], ["wd:Q5844"], ["wd:Q6386"], ["wd:Q5444"], ["wd:Q1058"], ["wd:Q1638"], ["wd:Q2038"], ["wd:Q5081"], ["wd:Q5816"], ["wd:Q6332"], ["wd:Q4109"], ["wd:Q1405"], ["wd:Q1736"], ["wd:Q1915"], ["wd:Q1931"], ["wd:Q4866"], ["wd:Q5370"], ["wd:Q5220"], ["wd:Q5928"], ["wd:Q5582"], ["wd:Q5104"], ["wd:Q4636"], ["wd:Q1532"], ["wd:Q5658"], ["wd:Q5676"], ["wd:Q4457"], ["wd:Q6353"], ["wd:Q1671"], ["wd:Q5359"], ["wd:Q5685"], ["wd:Q2098"], ["wd:Q835"], ["wd:Q1908"], ["wd:Q2069"], ["wd:Q2831"], ["wd:Q1048"], ["wd:Q1689"], ["wd:Q4725"], ["wd:Q559"], ["wd:Q6348"], ["wd:Q5547"], ["wd:Q392"], ["wd:Q3300"], ["wd:Q1784"], ["wd:Q4547"], ["wd:Q6008"], ["wd:Q5630"], ["wd:Q1035"], ["wd:Q1430"], ["wd:Q1514"], ["wd:Q2516"], ["wd:Q42"], ["wd:Q5673"], ["wd:Q2147"], ["wd:Q409"], ["wd:Q5362"], ["wd:Q5796"], ["wd:Q2732"], ["wd:Q3250"], ["wd:Q4813"], ["wd:Q1894"], ["wd:Q3745"], ["wd:Q1728"], ["wd:Q5807"], ["wd:Q5371"], ["wd:Q4291"], ["wd:Q1683"], ["wd:Q3648"], ["wd:Q192"], ["wd:Q2307"], ["wd:Q5201"], ["wd:Q7068"], ["wd:Q4276"], ["wd:Q1326"], ["wd:Q4491"], ["wd:Q5793"], ["wd:Q5969"], ["wd:Q5376"], ["wd:Q1883"], ["wd:Q1916"], ["wd:Q885"], ["wd:Q5597"], ["wd:Q1413"], ["wd:Q2667"], ["wd:Q2086"], ["wd:Q2263"], ["wd:Q1679"], ["wd:Q1656"], ["wd:Q3722"], ["wd:Q1238"], ["wd:Q5580"], ["wd:Q5812"], ["wd:Q3034"], ["wd:Q5198"], ["wd:Q4891"], ["wd:Q2628"], ["wd:Q6432"], ["wd:Q1668"], ["wd:Q5355"], ["wd:Q1399"], ["wd:Q5346"], ["wd:Q6473"], ["wd:Q4922"], ["wd:Q535"], ["wd:Q853"], ["wd:Q1830"], ["wd:Q1712"], ["wd:Q3295"], ["wd:Q91"], ["wd:Q997"], ["wd:Q1328"], ["wd:Q4240"], ["wd:Q4295"], ["wd:Q5007"], ["wd:Q5117"], ["wd:Q5351"], ["wd:Q301"], ["wd:Q1203"], ["wd:Q5648"], ["wd:Q3153"], ["wd:Q1939"], ["wd:Q4752"], ["wd:Q1320"], ["wd:Q1925"], ["wd:Q4142"], ["wd:Q633"], ["wd:Q5352"], ["wd:Q1789"], ["wd:Q1907"], ["wd:Q1913"], ["wd:Q4590"], ["wd:Q5577"], ["wd:Q4749"], ["wd:Q4836"], ["wd:Q3112"], ["wd:Q7071"], ["wd:Q1618"], ["wd:Q5959"], ["wd:Q4622"], ["wd:Q1235"], ["wd:Q2998"], ["wd:Q4833"], ["wd:Q489"], ["wd:Q1783"], ["wd:Q3101"], ["wd:Q4288"], ["wd:Q1793"], ["wd:Q1051"], ["wd:Q1743"], ["wd:Q1955"], ["wd:Q4506"], ["wd:Q23"], ["wd:Q1426"], ["wd:Q5353"], ["wd:Q5383"], ["wd:Q563"], ["wd:Q2105"], ["wd:Q3048"], ["wd:Q1745"], ["wd:Q1921"], ["wd:Q930"], ["wd:Q4586"], ["wd:Q2001"], ["wd:Q1674"], ["wd:Q5361"], ["wd:Q3044"], ["wd:Q5600"], ["wd:Q2673"], ["wd:Q5603"], ["wd:Q1442"], ["wd:Q1928"], ["wd:Q2567"], ["wd:Q5822"], ["wd:Q2514"], ["wd:Q4786"], ["wd:Q4826"], ["wd:Q1526"], ["wd:Q4488"], ["wd:Q185"], ["wd:Q927"], ["wd:Q1790"], ["wd:Q501"], ["wd:Q1327"], ["wd:Q3234"], ["wd:Q3251"], ["wd:Q619"], ["wd:Q3603"], ["wd:Q3794"], ["wd:Q4350"], ["wd:Q1758"], ["wd:Q4993"], ["wd:Q5998"], ["wd:Q5365"], ["wd:Q6363"], ["wd:Q1149"], ["wd:Q1698"], ["wd:Q1329"], ["wd:Q1917"], ["wd:Q1787"], ["wd:Q5331"], ["wd:Q4896"], ["wd:Q4505"], ["wd:Q579"], ["wd:Q1615"], ["wd:Q4700"], ["wd:Q5009"], ["wd:Q5604"], ["wd:Q5921"], ["wd:Q6078"], ["wd:Q5749"], ["wd:Q1318"], ["wd:Q6714"], ["wd:Q1775"], ["wd:Q3102"], ["wd:Q4599"], ["wd:Q5069"], ["wd:Q1716"], ["wd:Q909"], ["wd:Q6184"], ["wd:Q3008"], ["wd:Q1704"], ["wd:Q6240"], ["wd:Q1401"], ["wd:Q1240"], ["wd:Q1450"], ["wd:Q2570"], ["wd:Q605"], ["wd:Q4232"], ["wd:Q4247"], ["wd:Q2655"], ["wd:Q1064"], ["wd:Q5571"], ["wd:Q4768"], ["wd:Q5878"], ["wd:Q1440"], ["wd:Q848"], ["wd:Q1031"], ["wd:Q3362"], ["wd:Q2709"], ["wd:Q5072"], ["wd:Q1421"], ["wd:Q3239"], ["wd:Q1407"], ["wd:Q4498"], ["wd:Q5618"], ["wd:Q1254"], ["wd:Q1744"], ["wd:Q1512"], ["wd:Q1628"], ["wd:Q882"], ["wd:Q1817"], ["wd:Q4029"], ["wd:Q4876"], ["wd:Q6101"], ["wd:Q1220"], ["wd:Q3281"], ["wd:Q5621"], ["wd:Q1192"], ["wd:Q2551"], ["wd:Q4933"], ["wd:Q4899"], ["wd:Q6357"], ["wd:Q4769"], ["wd:Q558"], ["wd:Q1217"], ["wd:Q335"], ["wd:Q5809"], ["wd:Q6950"], ["wd:Q1268"], ["wd:Q4985"], ["wd:Q1545"], ["wd:Q5368"], ["wd:Q1480"], ["wd:Q5623"], ["wd:Q1589"], ["wd:Q2185"], ["wd:Q5799"], ["wd:Q1940"], ["wd:Q1434"], ["wd:Q4381"], ["wd:Q5380"], ["wd:Q2161"], ["wd:Q326"], ["wd:Q1926"], ["wd:Q5681"], ["wd:Q6367"], ["wd:Q1340"], ["wd:Q5024"], ["wd:Q5254"], ["wd:Q4440"], ["wd:Q502"], ["wd:Q680"], ["wd:Q6003"], ["wd:Q6021"], ["wd:Q1835"], ["wd:Q4214"], ["wd:Q991"], ["wd:Q1381"], ["wd:Q4593"], ["wd:Q5336"], ["wd:Q539"], ["wd:Q5592"], ["wd:Q1868"], ["wd:Q306"], ["wd:Q2129"], ["wd:Q635"], ["wd:Q5354"], ["wd:Q5167"], ["wd:Q6017"], ["wd:Q4271"], ["wd:Q2972"], ["wd:Q1923"], ["wd:Q2530"], ["wd:Q4837"], ["wd:Q4465"], ["wd:Q3247"], ["wd:Q5608"], ["wd:Q1944"], ["wd:Q1934"], ["wd:Q254"], ["wd:Q4452"], ["wd:Q5152"], ["wd:Q4344"], ["wd:Q4991"], ["wd:Q4617"], ["wd:Q1470"], ["wd:Q5617"], ["wd:Q1785"], ["wd:Q926"], ["wd:Q4267"], ["wd:Q4783"], ["wd:Q2566"], ["wd:Q5347"], ["wd:Q1702"], ["wd:Q5447"], ["wd:Q4740"]], "gold": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]]}
{"question": "What did human found", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P112 wd:Q5 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]], "gold": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]]}
{"question": "What did human found", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0249 is P112\nkg:7493 is Q5", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:P112 kg:Q5 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P112 kg:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q120053021"], ["wd:Q69997240"], ["wd:Q105946422"], ["wd:Q113071363"], ["wd:Q20475006"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q152843 wdt:P673 ?resource.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q152843 wdt:P673 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P1040 wd:Q853 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q853 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q281988"]], "gold": [["wd:Q281988"]]}
{"question": "What did Andrei Tarkovsky edit", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:5624 kg:0714 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5624 kg:0714 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q281988"]]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q571 .\",\n      \"?resource wdt:P1476 wd:Q208924 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571 . ?resource wdt:P1476 wd:Q208924 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q1042294 wdt:P155 ?resource.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1042294 wdt:P155 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q721"]], "gold": [true]}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:1047 kg:1291 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1047 kg:1291 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q162227 ?p ?statement .\",\n    \"  ?statement ps:P31/wdt:P279* wd:Q5707574 .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q162227 ?p ?statement . ?statement ps:P31/wdt:P279* wd:Q5707574 . SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q131593 wdt:P155 ?resource.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q131593 wdt:P155 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q168"]], "gold": [true]}
{"question": "Was Π 's sequel san", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:1888 kg:4953 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1888 kg:4953 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q76519 wdt:P22 ?parent .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q76519 wdt:P22 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parent WHERE {\",\n      \"wd:Q260 wdt:P40|wdt:P355 ?parent.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40|wdt:P355 ?parent. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q66305710"]]}
{"question": "What was Jean-François Champollion 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\":\n    [\n      \"SELECT ?parent WHERE {\",\n        \"{ kg:7406 kg:4300 ?parent . } UNION \",\n        \"{ kg:7406 kg:2110 ?parent . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?parent WHERE { { kg:7406 kg:4300 ?parent . } UNION { kg:7406 kg:2110 ?parent . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50 wd:Q42569 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q42569 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q42 is Q42", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50 wd:Q42 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q42 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q902712"], ["wd:Q1065955"], ["wd:Q122024403"], ["wd:Q126718323"], ["wd:Q121971046"], ["wd:Q3107329"], ["wd:Q121985076"], ["wd:Q1068999"], ["wd:Q121946148"], ["wd:Q121951803"], ["wd:Q121972589"], ["wd:Q1198969"], ["wd:Q468135"], ["wd:Q117187377"], ["wd:Q60412079"], ["wd:Q578895"], ["wd:Q20898239"], ["wd:Q116294401"], ["wd:Q673644"], ["wd:Q1199348"], ["wd:Q121946147"], ["wd:Q285194"], ["wd:Q23045921"], ["wd:Q7739857"], ["wd:Q7771858"], ["wd:Q44272937"], ["wd:Q23663697"], ["wd:Q111292696"], ["wd:Q25169"], ["wd:Q280418"], ["wd:Q20736364"], ["wd:Q1042294"], ["wd:Q117280941"], ["wd:Q111263076"], ["wd:Q721"], ["wd:Q187655"], ["wd:Q126720025"], ["wd:Q20793895"], ["wd:Q5301192"], ["wd:Q7758404"], ["wd:Q875382"], ["wd:Q55109472"], ["wd:Q117279887"], ["wd:Q122122845"], ["wd:Q122036585"], ["wd:Q44272786"], ["wd:Q60488168"], ["wd:Q121984998"], ["wd:Q121986523"], ["wd:Q121986512"]], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "What was written by Douglas Adams", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is P58\nkg:7075 is Q42", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:4901 kg:7075 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4901 kg:7075 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3470527"], ["wd:Q12858529"], ["wd:Q836821"], ["wd:Q1768713"], ["wd:Q513589"], ["wd:Q5123647"]]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q123456 wdt:P108 ?employer .\",\n    \"?employer wdt:P17 wd:Q40 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q123456 wdt:P108 ?employer . ?employer wdt:P17 wd:Q40 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q79070 wdt:P108 wd:Q40 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 wd:Q40 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Max Margules employed by Austria", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q79070 wdt:P108 wd:Q40 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 wd:Q40 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q134256 wdt:P50 ?writer .\",\n    \"  FILTER(?writer = wd:Q9274) \",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q134256 wdt:P50 ?writer . FILTER(?writer = wd:Q9274) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q80379 wdt:P58 ?resource .\",\n      \"FILTER(?resource = wd:Q892) }\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource . FILTER(?resource = wd:Q892) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q892"]], "gold": [true]}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource kg:7976 kg:7109 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7976 kg:7109 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q486091 wdt:P275 ?producer .\",\n      \"?producer wdt:P31 wd:Q5 .\",\n      \"?producer rdfs:label \\\"Bruce Willis\\\"@en .\",\n      \"}\",\n    \"LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q486091 wdt:P275 ?producer . ?producer wdt:P31 wd:Q5 . ?producer rdfs:label \"Bruce Willis\"@en . } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q72276 wdt:P1431 ?resource .\",\n      \"?resource wdt:P161 wd:Q2680 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q72276 wdt:P1431 ?resource . ?resource wdt:P161 wd:Q2680 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:0000 kg:7729 ?resource . } UNION \",\n        \"{ ?resource kg:7729 kg:0000 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:0000 kg:7729 ?resource . } UNION { ?resource kg:7729 kg:0000 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"wd:Q1065934 wdt:P2789 ?costumeDesigner .\",\n    \"?costumeDesigner wdt:P31 wd:Q5 .\",\n    \"?costumeDesigner wdt:P106 wd:Q36834 .\",\n    \"}\",\n  \"limit\" , \": 1\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q1065934 wdt:P2789 ?costumeDesigner . ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P106 wd:Q36834 . } limit : 1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q36834 .\",\n          \"?resource wdt:P2515 wd:Q2733930 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q36834 . ?resource wdt:P2515 wd:Q2733930 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5300 wdt:P106 wd:Q36834 . } UNION \",\n        \"{ kg:7624 wdt:P2515 wd:Q2733930 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5300 wdt:P106 wd:Q36834 . } UNION { kg:7624 wdt:P2515 wd:Q2733930 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?cinematographer WHERE {\",\n    \"wd:Q162047 wdt:P344 ?cinematographer.\",\n    \"?cinematographer wdt:P106 wd:Q3665649.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q162047 wdt:P344 ?cinematographer. ?cinematographer wdt:P106 wd:Q3665649. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P106 wd:Q69423232 .\",\n      \"?resource wdt:P344 wd:Q158069 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q69423232 . ?resource wdt:P344 wd:Q158069 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2252 kg:6390 ?resource . } UNION \",\n        \"{ kg:3749 kg:6390 ?resource . } UNION \",\n        \"{ kg:6944 kg:6390 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:2252 kg:6390 ?resource . } UNION { kg:3749 kg:6390 ?resource . } UNION { kg:6944 kg:6390 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q76419 ?p wd:Q5083 .\",\n    \"  ?spouse wdt:P26 wd:Q76419 ;\",\n    \"          wdt:P108 wd:Q154346 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q76419 ?p wd:Q5083 . ?spouse wdt:P26 wd:Q76419 ; wdt:P108 wd:Q154346 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q76845 wdt:P108 ?spouse . } UNION { wd:Q76845 wdt:P26 ?spouse . }\",\n        \"?spouse wdt:P39 ?employer .\",\n        \"?employer wdt:P279* wd:Q2607 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q76845 wdt:P108 ?spouse . } UNION { wd:Q76845 wdt:P26 ?spouse . } ?spouse wdt:P39 ?employer . ?employer wdt:P279* wd:Q2607 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5635 kg:1941 ?resource . } UNION \",\n        \"{ kg:5635 kg:2718 ?spouse . ?spouse kg:0885 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:5635 kg:1941 ?resource . } UNION { kg:5635 kg:2718 ?spouse . ?spouse kg:0885 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q190852 wdt:P361 ?composer .\",\n    \"?composer wdt:P175* wd:Q190852 .\",\n    \"BIND(?composer AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q190852 wdt:P361 ?composer . ?composer wdt:P175* wd:Q190852 . BIND(?composer AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"wd:Q36834 wdt:P106 wd:Q208824 .\",\n      \"wd:Q36834 wdt:P175 ?resource .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q36834 wdt:P106 wd:Q208824 . wd:Q36834 wdt:P175 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was 1999 produced by a composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:0295 kg:8026 ?resource . } UNION \",\n        \"{ kg:7537 kg:8026 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0295 kg:8026 ?resource . } UNION { kg:7537 kg:8026 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P800 wd:Q247697.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P800 wd:Q247697. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P106 wd:Q577126 .\",\n      \"?resource wdt:P86 wd:Q69423232 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q577126 . ?resource wdt:P86 wd:Q69423232 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3969 wdt:P106 ?resource . } UNION \",\n        \"{ kg:7339 wdt:P86 ?resource . } UNION \",\n        \"{ kg:0549 wdt:P86 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3969 wdt:P106 ?resource . } UNION { kg:7339 wdt:P86 ?resource . } UNION { kg:0549 wdt:P86 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P2600 wd:Q489790.\",\n    \"?resource wdt:P106 wd:Q28369 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P2600 wd:Q489790. ?resource wdt:P106 wd:Q28369 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P106 wd:Q222344 .\",\n      \"?resource wdt:P86 wd:Q76582 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q222344 . ?resource wdt:P86 wd:Q76582 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5106 wdt:P106 wd:Q222344 . } UNION \",\n        \"{ kg:7704 wdt:P86 wd:Q76582 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5106 wdt:P106 wd:Q222344 . } UNION { kg:7704 wdt:P86 wd:Q76582 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q7889;\",\n    \"wdt:P156 wd:Q204286.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q7889; wdt:P156 wd:Q204286. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P750 wd:Q2283 ;\",\n      \"wdt:P155 wd:Q4348691 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P750 wd:Q2283 ; wdt:P155 wd:Q4348691 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2898 kg:0040 ?resource . } UNION \",\n        \"{ ?resource kg:9554 kg:6939 . }\" ,\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2898 kg:0040 ?resource . } UNION { ?resource kg:9554 kg:6939 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q27893504 ;\",\n    \"       wdt:P161 wd:Q1688199 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q27893504 ; wdt:P161 wd:Q1688199 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P31 wd:Q2085 ;\",\n      \"wdt:P155 wd:Q967797 ;\",\n      \"wdt:P161 wd:Q49125 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q2085 ; wdt:P155 wd:Q967797 ; wdt:P161 wd:Q49125 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5276 kg:1182 ?sequel . } UNION { ?sequel kg:1182 kg:5276 . }\",\n        \"?sequel kg:1540 kg:7081 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5276 kg:1182 ?sequel . } UNION { ?sequel kg:1182 kg:5276 . } ?sequel kg:1540 kg:7081 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P40 wd:Q27896230 .\",\n    \"wd:Q27896230 wdt:P22 ?child .\",\n    \"?child wdt:P1038 wd:Q50005 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P40 wd:Q27896230 . wd:Q27896230 wdt:P22 ?child . ?child wdt:P1038 wd:Q50005 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q81950264 wdt:P112 ?parent. } UNION { wd:Q81950264 wdt:P355 ?parent. }\",\n        \"?parent wdt:P40 wd:Q15070044.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q81950264 wdt:P112 ?parent. } UNION { wd:Q81950264 wdt:P355 ?parent. } ?parent wdt:P40 wd:Q15070044. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3621 kg:5208 ?parent . } UNION { kg:3621 kg:2362 ?parent . }\",\n        \"?parent kg:9431 kg:6446 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3621 kg:5208 ?parent . } UNION { kg:3621 kg:2362 ?parent . } ?parent kg:9431 kg:6446 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q35276 Adolf Hitler .\",\n    \"  ?sibling wdt:P3373 wd:Q35276 .\",\n    \"  ?sibling wdt:P108 wd:Q1496444 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q35276 Adolf Hitler . ?sibling wdt:P3373 wd:Q35276 . ?sibling wdt:P108 wd:Q1496444 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n      \"wd:Q352 wdt:P108 ?sibling.\",\n      \"?sibling wdt:P3373 wd:Q1022419.\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q352 wdt:P108 ?sibling. ?sibling wdt:P3373 wd:Q1022419. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5670 kg:9040 ?sibling . } UNION { kg:6467 kg:9040 ?sibling . }\",\n        \"?sibling kg:6535 ?employer .\",\n        \"FILTER(?employer = kg:6535) \",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5670 kg:9040 ?sibling . } UNION { kg:6467 kg:9040 ?sibling . } ?sibling kg:6535 ?employer . FILTER(?employer = kg:6535) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"wd:Q134207 wdt:P108 ?employer .\",\n      \"?employer wdt:P1232 wd:Q39569986 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q134207 wdt:P108 ?employer . ?employer wdt:P1232 wd:Q39569986 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"wd:Q6078 wdt:P108 ?employer.\",\n      \"?employer wdt:P750 wd:Q42310881.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q6078 wdt:P108 ?employer. ?employer wdt:P750 wd:Q42310881. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2903 kg:9526 ?employer . } UNION { kg:2903 kg:2310 ?employer . }\",\n        \"?employer kg:5020 ?resource .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2903 kg:9526 ?employer . } UNION { kg:2903 kg:2310 ?employer . } ?employer kg:5020 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q312"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"wd:Q16204987 wdt:P39 ?employer .\",\n      \"?employer ^wdt:P40 ?parent .\",\n      \"wd:Q560914 wdt:P40 ?parent .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q16204987 wdt:P39 ?employer . ?employer ^wdt:P40 ?parent . wd:Q560914 wdt:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"wd:Q103941992 wdt:P108 ?parent .\",\n      \"?parent wdt:P40 ?employer .\",\n      \"?employer wdt:P355 wd:Q15070044 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q103941992 wdt:P108 ?parent . ?parent wdt:P40 ?employer . ?employer wdt:P355 wd:Q15070044 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n        \"{ kg:4817 kg:3071 ?parent . } UNION { kg:4817 kg:9336 ?parent . }\",\n        \"?parent kg:1689 kg:7766 .\",\n        \"kg:7766 kg:3071 ?employer .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { { kg:4817 kg:3071 ?parent . } UNION { kg:4817 kg:9336 ?parent . } ?parent kg:1689 kg:7766 . kg:7766 kg:3071 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q76"]]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q5 .\",\n      \"?costumeDesigner wdt:P26 ?spouse .\",\n      \"?spouse wdt:P7 wd:Q49084 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P7 wd:Q49084 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n          \"?costumeDesigner wdt:P26 ?spouse .\",\n          \"?spouse wdt:P3373 wd:Q730300 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?costumeDesigner wdt:P106 wd:Q1323191 . ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P3373 wd:Q730300 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0002 kg:5504 .\",\n          \"?resource kg:9513 kg:2674 .\",\n          \"?resource kg:4660 ?spouse .\",\n          \"?spouse kg:4660 kg:5504 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0002 kg:5504 . ?resource kg:9513 kg:2674 . ?resource kg:4660 ?spouse . ?spouse kg:4660 kg:5504 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P26 wd:Q48970 .\",\n      \"wd:Q48970 wdt:P3320 wd:Q1061590 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q48970 . wd:Q48970 wdt:P3320 wd:Q1061590 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q1102919 .\",\n          \"?resource wdt:P26 ?spouse .\",\n          \"?spouse wdt:P112 wd:Q1323191 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q1102919 . ?resource wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3343 kg:9356 ?spouse . } UNION { ?spouse kg:9700 kg:3343 . }\",\n        \"?spouse kg:5767 kg:0522 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3343 kg:9356 ?spouse . } UNION { ?spouse kg:9700 kg:3343 . } ?spouse kg:5767 kg:0522 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5398426 .\",\n    \"?resource wdt:P50 wd:Q227214 .\",\n    \"?resource wdt:P58 wd:Q227214 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5398426 . ?resource wdt:P50 wd:Q227214 . ?resource wdt:P58 wd:Q227214 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q901203"]]}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q2643.} UNION \",\n        \"{?resource wdt:P58 wd:Q2643.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q2643.} UNION {?resource wdt:P58 wd:Q2643.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4115 kg:2538 ?resource . } UNION \",\n        \"{ kg:4115 kg:8693 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:4115 kg:2538 ?resource . } UNION { kg:4115 kg:8693 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q47461344 .\",\n    \"?resource wdt:P50 ?author .\",\n    \"?author rdfs:label \\\"Anker Sørensen\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47461344 . ?resource wdt:P50 ?author . ?author rdfs:label \"Anker Sørensen\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P1040 wd:Q24907 .\",\n      \"?resource wdt:P58 wd:Q24907 .\",\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q24907 . ?resource wdt:P58 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]], "gold": [["wd:Q33540390"], ["wd:Q20729292"], ["wd:Q12317972"]]}
{"question": "What was written and edited by Anker Sørensen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:1179 kg:9130.} UNION \",\n        \"{?resource kg:3729 kg:9130.}\"\n      ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:1179 kg:9130.} UNION {?resource kg:3729 kg:9130.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q105124893 wdt:P22 ?parent .\",\n    \"?parent wdt:P27 wd:Q34 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q105124893 wdt:P22 ?parent . ?parent wdt:P27 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q4990261 wdt:P106 wd:Q1323191 . } UNION \",\n        \"{ wd:Q4990261 wdt:P40 ?parent . ?parent wdt:P27 wd:Q34 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q4990261 wdt:P106 wd:Q1323191 . } UNION { wd:Q4990261 wdt:P40 ?parent . ?parent wdt:P27 wd:Q34 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4138 kg:9469 kg:4112 . } UNION \",\n        \"{ kg:4138 kg:8412 kg:5057 . } UNION \",\n        \"{ kg:4138 kg:3398 kg:8815 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4138 kg:9469 kg:4112 . } UNION { kg:4138 kg:8412 kg:5057 . } UNION { kg:4138 kg:3398 kg:8815 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse WHERE {\",\n    \"wd:Q10928647 wdt:P26 ?spouse.\",\n    \"?spouse wdt:P31 wd:Q5;\",\n    \"       wdt:P106 wd:Q108705.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q10928647 wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5; wdt:P106 wd:Q108705. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"wd:Q3514303 wdt:P26 ?spouse.\",\n        \"?spouse wdt:P106 wd:Q222344;\",\n              \"wdt:P27 wd:Q17.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q222344; wdt:P27 wd:Q17. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q271247"]], "gold": [true]}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8757 kg:106 ?spouse . } UNION { ?spouse kg:106 kg:8757 . }\",\n        \"?spouse kg:27 kg:17 ;\",\n        \"kg:106 kg:3514303 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8757 kg:106 ?spouse . } UNION { ?spouse kg:106 kg:8757 . } ?spouse kg:27 kg:17 ; kg:106 kg:3514303 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of a film director did Canada found", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"?filmDirector wdt:P31 wd:Q2143096 .\",\n      \"?filmDirector wdt:P108 ?employer .\",\n      \"?employer wdt:P17 wd:Q16 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P31 wd:Q2143096 . ?filmDirector wdt:P108 ?employer . ?employer wdt:P17 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1065"]]}
{"question": "What employer of a film director did Canada found", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q16 is Q16\nwdt:P106 is P106\nwd:Q2526255 is Q2526255", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"?filmDirector wdt:P108 ?employer .\",\n      \"?filmDirector wdt:P106 wd:Q2526255 .\",\n      \"?employer wdt:P17 wd:Q16 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P108 ?employer . ?filmDirector wdt:P106 wd:Q2526255 . ?employer wdt:P17 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q114429986"], ["wd:Q2077260"], ["wd:Q1492249"], ["wd:Q3566187"], ["wd:Q108818075"], ["wd:Q5422590"], ["wd:Q1654103"], ["wd:Q98754535"], ["wd:Q5030045"], ["wd:Q428457"], ["wd:Q1549535"], ["wd:Q108675330"], ["wd:Q2562289"], ["wd:Q1215892"], ["wd:Q1514848"], ["wd:Q60924002"], ["wd:Q1458113"], ["wd:Q3551609"], ["wd:Q611723"], ["wd:Q795988"], ["wd:Q1634522"], ["wd:Q6436131"], ["wd:Q3201454"], ["wd:Q5146894"], ["wd:Q111209857"], ["wd:Q3506554"], ["wd:Q114399388"], ["wd:Q3510740"], ["wd:Q1500067"], ["wd:Q1337587"], ["wd:Q461761"], ["wd:Q3527822"], ["wd:Q326342"], ["wd:Q392189"], ["wd:Q1022955"], ["wd:Q3230340"], ["wd:Q28496060"], ["wd:Q4318523"], ["wd:Q87772288"], ["wd:Q465449"], ["wd:Q3010017"], ["wd:Q129508111"], ["wd:Q114430003"], ["wd:Q2065769"], ["wd:Q3521910"], ["wd:Q1689439"], ["wd:Q3223731"], ["wd:Q3579596"], ["wd:Q17513033"], ["wd:Q6089452"], ["wd:Q201603"], ["wd:Q3086280"], ["wd:Q3152392"], ["wd:Q114630446"], ["wd:Q24567013"], ["wd:Q1067471"], ["wd:Q3401855"], ["wd:Q2971964"], ["wd:Q5337681"], ["wd:Q3003139"], ["wd:Q1504424"], ["wd:Q903343"], ["wd:Q16671915"], ["wd:Q3546604"], ["wd:Q19866755"], ["wd:Q2989802"], ["wd:Q1049470"], ["wd:Q4994706"], ["wd:Q4650858"], ["wd:Q87728592"], ["wd:Q1131966"], ["wd:Q1144262"], ["wd:Q1439745"], ["wd:Q180865"], ["wd:Q4854863"], ["wd:Q1067935"], ["wd:Q640694"], ["wd:Q3005427"], ["wd:Q3010001"], ["wd:Q919256"], ["wd:Q1530721"], ["wd:Q391028"], ["wd:Q7090325"], ["wd:Q47155173"], ["wd:Q1034602"], ["wd:Q72199568"], ["wd:Q2973248"], ["wd:Q504715"], ["wd:Q1024524"], ["wd:Q2931657"]], "gold": [["wd:Q1065"]]}
{"question": "What employer of a film director did Canada found", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1384 is P108\nkg:3245 is P112\nkg:2398 is Q16\nkg:6030 is P106\nkg:7442 is Q2526255", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1384 kg:6030 ?director . } UNION { ?director kg:6030 kg:1384 . }\",\n        \"{ ?director kg:7442 kg:2398 . } UNION { kg:2398 kg:7442 ?director . }\",\n        \"?resource kg:3245 ?director .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1384 kg:6030 ?director . } UNION { ?director kg:6030 kg:1384 . } { ?director kg:7442 kg:2398 . } UNION { kg:2398 kg:7442 ?director . } ?resource kg:3245 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1065"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q482994 .\", \"?resource wdt:P50 wd:Q17415 .\",\n      \"?resource wdt:P61 wd:Q17415 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q482994 . ?resource wdt:P50 wd:Q17415 . ?resource wdt:P61 wd:Q17415 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1744 is Q1744\nwdt:P58 is P58\nwd:Q1744 is Q1744", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P50 wd:Q1744.} UNION \",\n        \"{?resource wdt:P272 wd:Q1744.}\"\n      , \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P50 wd:Q1744.} UNION {?resource wdt:P272 wd:Q1744.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q105128911"], ["wd:Q60412749"], ["wd:Q3829048"], ["wd:Q3902959"], ["wd:Q80827"], ["wd:Q109654077"], ["wd:Q2290931"], ["wd:Q126663010"], ["wd:Q3828825"], ["wd:Q4022391"], ["wd:Q1981869"], ["wd:Q3828483"], ["wd:Q126720227"]], "gold": [["wd:Q15847069"], ["wd:Q2662913"]]}
{"question": "What was written by and produced by Madonna", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2955 is P162\nkg:1388 is P272\nkg:0694 is Q1744\nkg:3432 is P58\nkg:0694 is Q1744", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:1388 kg:0694.} UNION \",\n        \"{?resource kg:3432 kg:0694.}\"\n      ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:1388 kg:0694.} UNION {?resource kg:3432 kg:0694.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employer WHERE {\",\n    \"?costumeDesigner wdt:P108 wd:Q3624579 .\",\n    \"?costumeDesigner wdt:P118 ?employer .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film rdfs:label \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en .\",\n    \"?film wdt:P57 ?costumeDesigner .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner wdt:P108 wd:Q3624579 . ?costumeDesigner wdt:P118 ?employer . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"Joe's Bed-Stuy Barbershop: We Cut Heads\"@en . ?film wdt:P57 ?costumeDesigner . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P108 wd:Q1141467 .\",\n          \"?resource wdt:P272 wd:Q1323191 .\",\n          \"?resource wdt:P106 ?employer .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P108 wd:Q1141467 . ?resource wdt:P272 wd:Q1323191 . ?resource wdt:P106 ?employer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0409 kg:3388 .\",\n          \"?resource kg:5383 ?employer .\",\n          \"?employer kg:2759 kg:1388 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0409 kg:3388 . ?resource kg:5383 ?employer . ?employer kg:2759 kg:1388 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"?costumeDesigner wdt:P1039 ?sibling .\",\n      \"?sibling wdt:P26 ?spouse .\",\n      \"?spouse wdt:P570 'Nadia Cassini' .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P1039 ?sibling . ?sibling wdt:P26 ?spouse . ?spouse wdt:P570 'Nadia Cassini' . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n        \"{\",\n          \"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n          \"?costumeDesigner wdt:P3373 ?sibling .\",\n          \"?sibling wdt:P26 wd:Q461354 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { { ?costumeDesigner wdt:P106 wd:Q1323191 . ?costumeDesigner wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q461354 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q5993204"]], "gold": [true]}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0622 kg:3988 .\",\n          \"?resource kg:7684 ?spouse .\",\n          \"?spouse kg:5129 kg:4040 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0622 kg:3988 . ?resource kg:7684 ?spouse . ?spouse kg:5129 kg:4040 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q1058369 p:P108/ps:P108 ?employer .\",\n    \"  ?employer wdt:P749 ?parentCompany .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1058369 p:P108/ps:P108 ?employer . ?employer wdt:P749 ?parentCompany . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n        \"{ wd:Q67134 wdt:P108 ?employer . } UNION \",\n        \"{ wd:Q67134 wdt:P40 ?employer . } UNION \",\n        \"{ wd:Q67134 wdt:P355 ?employer . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { { wd:Q67134 wdt:P108 ?employer . } UNION { wd:Q67134 wdt:P40 ?employer . } UNION { wd:Q67134 wdt:P355 ?employer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q23317"]], "gold": [["wd:Q23317"]]}
{"question": "What employer of Christian Abt was a company 's parent", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0342 kg:1897 .\",\n          \"?resource kg:0569 ?employee .\",\n          \"?employee kg:7139 \\\"Christian Abt\\\" .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0342 kg:1897 . ?resource kg:0569 ?employee . ?employee kg:7139 \"Christian Abt\" . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q23317"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q2975836 wdt:P108 ?employer .\",\n    \"?employer wdt:P31/wdt:P279* wd:Q1496965 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q2975836 wdt:P108 ?employer . ?employer wdt:P31/wdt:P279* wd:Q1496965 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"wd:Q1094792 wdt:P108 ?employer .\",\n      \"?employer wdt:P31 wd:Q11424 ;\",\n      \"wdt:P750 [] .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P31 wd:Q11424 ; wdt:P750 [] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n  \"query\":\n    [\n      \"SELECT ?employer WHERE {\",\n      \"?employer kg:2298 kg:6868 .\",\n      \"kg:8161 kg:7435 ?employer .\",\n      \"?employer kg:1977 ?film .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer kg:2298 kg:6868 . kg:8161 kg:7435 ?employer . ?employer kg:1977 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q8073"]]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"wd:Q180947 wdt:P162 ?producer .\",\n    \"wd:Q180947 wdt:P750 ?distributor .\",\n    \"?producer wdt:P17 wd:Q34 .\",\n    \"?distributor wdt:P17 wd:Q34 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q180947 wdt:P162 ?producer . wd:Q180947 wdt:P750 ?distributor . ?producer wdt:P17 wd:Q34 . ?distributor wdt:P17 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1651543 wdt:P750 ?producer. } UNION { wd:Q1651543 wdt:P272 ?distributor. }\",\n        \"?producerDistributor wdt:P112 wd:Q34.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1651543 wdt:P750 ?producer. } UNION { wd:Q1651543 wdt:P272 ?distributor. } ?producerDistributor wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9250 kg:3140 ?producer . } UNION \",\n        \"{ kg:9250 kg:7989 ?distributor . }\",\n        \"?producer kg:3121 kg:8263 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9250 kg:3140 ?producer . } UNION { kg:9250 kg:7989 ?distributor . } ?producer kg:3121 kg:8263 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2498761 .\",\n    \"?resource wdt:P26 wd:Q180929 .\",\n    \"wd:Q180929 wdt:P26 ?spouse .\",\n    \"FILTER(?spouse = wd:Q3547989)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . ?resource wdt:P26 wd:Q180929 . wd:Q180929 wdt:P26 ?spouse . FILTER(?spouse = wd:Q3547989) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"?resource wdt:P106 wd:Q1323191 .\",\n        \"?resource wdt:P27 wd:Q34 .\",\n        \"wd:Q6200573 wdt:P26 ?resource .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q1323191 . ?resource wdt:P27 wd:Q34 . wd:Q6200573 wdt:P26 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q1554690"]], "gold": [true]}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0399 kg:3313 .\",\n          \"?resource kg:2954 kg:5786 .\",\n          \"?resource kg:7184 kg:0061 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0399 kg:3313 . ?resource kg:2954 kg:5786 . ?resource kg:7184 kg:0061 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q310987 wdt:P26 ?spouse .\",\n    \"  wd:Q310987 wdt:P3373 ?sibling .\",\n    \"  ?spouse wdt:P26 wd:Q310987 .\",\n    \"  ?sibling wdt:P26 wd:Q310987 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q310987 wdt:P26 ?spouse . wd:Q310987 wdt:P3373 ?sibling . ?spouse wdt:P26 wd:Q310987 . ?sibling wdt:P26 wd:Q310987 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse ?sibling WHERE {\",\n        \"{ wd:Q2045778 wdt:P3373 ?spouse. } UNION \",\n        \"{ wd:Q2045778 wdt:P26 ?sibling. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { { wd:Q2045778 wdt:P3373 ?spouse. } UNION { wd:Q2045778 wdt:P26 ?sibling. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q40252"], ["wd:Q451051"], ["wd:Q451082"], ["wd:Q3356"], ["wd:Q3362"]], "gold": [["wd:Q451082"]]}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5421 kg:0822 ?spouse . } UNION { kg:5947 kg:0822 ?sibling . }\",\n        \"?resource kg:3622 kg:5421 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5421 kg:0822 ?spouse . } UNION { kg:5947 kg:0822 ?sibling . } ?resource kg:3622 kg:5421 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q451082"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film rdfs:label \\\"The Magic Flute\\\"@en .\",\n    \"?film wdt:P17 wd:Q34 .\",\n    \"OPTIONAL { ?film wdt:P806 ?distributor }\",\n    \"OPTIONAL { ?film wdt:P162 ?producer }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"The Magic Flute\"@en . ?film wdt:P17 wd:Q34 . OPTIONAL { ?film wdt:P806 ?distributor } OPTIONAL { ?film wdt:P162 ?producer } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P750 wd:Q1651543.} UNION \",\n        \"{?resource wdt:P272 wd:Q1651543.} UNION \",\n        \"{?resource wdt:P112 wd:Q1651543.}\",\n      \" ?resource wdt:P17 wd:Q34.\",\n    \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P750 wd:Q1651543.} UNION {?resource wdt:P272 wd:Q1651543.} UNION {?resource wdt:P112 wd:Q1651543.} ?resource wdt:P17 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2549 kg:8112 ?resource . } UNION \",\n        \"{ kg:2549 kg:6570 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:2549 kg:8112 ?resource . } UNION { kg:2549 kg:6570 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?founder WHERE {\",\n    \"wd:Q170439 wdt:P112 ?founder .\",\n    \"?founder wdt:P25 ?sibling .\",\n    \"?sibling wdt:P31 wd:Q6516414 .\",\n    \"?sibling wdt:P735 wd:Q80966 .\",\n    \"}\",\n  \"limit\" , \": 1\"\n   ]\n}", "normal_query": "SELECT ?founder WHERE { wd:Q170439 wdt:P112 ?founder . ?founder wdt:P25 ?sibling . ?sibling wdt:P31 wd:Q6516414 . ?sibling wdt:P735 wd:Q80966 . } limit : 1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q117892 wdt:P112 ?sibling. } UNION { wd:Q117892 wdt:P3373 ?sibling. }\",\n        \"?sibling wdt:P27 wd:Q29999;\",\n        \"wdt:P3373 wd:Q2336212.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q117892 wdt:P112 ?sibling. } UNION { wd:Q117892 wdt:P3373 ?sibling. } ?sibling wdt:P27 wd:Q29999; wdt:P3373 wd:Q2336212. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9596 kg:4469 ?founder . } UNION { ?founder kg:4469 kg:9596 . }\",\n        \"?founder kg:1026 kg:7833 ;\",\n          \"kg:3660 kg:9334 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9596 kg:4469 ?founder . } UNION { ?founder kg:4469 kg:9596 . } ?founder kg:1026 kg:7833 ; kg:3660 kg:9334 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?employee WHERE {\",\n    \"?employee wdt:P108 wd:Q157462 .\",\n    \"?employee wdt:P39 wd:Q11640 .\",\n    \"wd:Q76608 wdt:P3320 ?sibling .\",\n    \"?sibling wdt:P1038 wd:Q157462 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?employee WHERE { ?employee wdt:P108 wd:Q157462 . ?employee wdt:P39 wd:Q11640 . wd:Q76608 wdt:P3320 ?sibling . ?sibling wdt:P1038 wd:Q157462 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P27 wd:Q183 ;\",\n      \"        wdt:P108 wd:Q60414 ;\",\n      \"        wdt:P3373 wd:Q15789 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P27 wd:Q183 ; wdt:P108 wd:Q60414 ; wdt:P3373 wd:Q15789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2961 kg:5481 ?sibling . } UNION { kg:2961 kg:4698 ?sibling . }\",\n        \"?sibling kg:3373 kg:1876 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2961 kg:5481 ?sibling . } UNION { kg:2961 kg:4698 ?sibling . } ?sibling kg:3373 kg:1876 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q17320684 wdt:P162 ?distributor .\",\n    \"  wd:Q17320684 wdt:P162 ?producer .\",\n    \"  ?distributor wdt:P571 ?foundingDateDistributor .\",\n    \"  ?producer wdt:P571 ?foundingDateProducer .\",\n    \"  FILTER(?foundingDateDistributor = ?foundingDateProducer) .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q17320684 wdt:P162 ?distributor . wd:Q17320684 wdt:P162 ?producer . ?distributor wdt:P571 ?foundingDateDistributor . ?producer wdt:P571 ?foundingDateProducer . FILTER(?foundingDateDistributor = ?foundingDateProducer) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q3715556 wdt:P750 ?resource. } UNION \",\n      \"{ wd:Q3715556 wdt:P272 ?resource. } UNION \",\n      \"{ wd:Q882 wdt:P112 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q3715556 wdt:P750 ?resource. } UNION { wd:Q3715556 wdt:P272 ?resource. } UNION { wd:Q882 wdt:P112 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q219400"]], "gold": [["wd:Q219400"]]}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:4295 kg:3368 .\",\n          \"?resource kg:0313 kg:3368 .\",\n          \"?resource kg:6909 kg:7784 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4295 kg:3368 . ?resource kg:0313 kg:3368 . ?resource kg:6909 kg:7784 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q219400"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50 wd:Q1342698 .\",\n      \"?resource wdt:P162 wd:Q799999 .\" ,\n      \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q1342698 . ?resource wdt:P162 wd:Q799999 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q744911"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P58 wd:Q888311.} UNION \",\n        \"{?resource wdt:P272 wd:Q4500.}\"\n      , \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P58 wd:Q888311.} UNION {?resource wdt:P272 wd:Q4500.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q909179"]], "gold": [["wd:Q744911"]]}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9244 kg:3400 ?resource . } UNION \",\n        \"{ kg:8411 kg:9666 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:9244 kg:3400 ?resource . } UNION { kg:8411 kg:9666 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 wd:Q48970 .\",\n    \"wd:Q48970 wdt:P3320 ?company .\",\n    \"}\",\n  \"limit\" , \":1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q48970 . wd:Q48970 wdt:P3320 ?company . } limit :1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1079409 wdt:P27 wd:Q142 . } UNION \",\n        \"{ wd:Q1079409 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1079409 wdt:P27 wd:Q142 . } UNION { wd:Q1079409 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [false]}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4343 kg:5080 ?sibling . } UNION { ?sibling kg:5080 kg:4343 . }\",\n        \"?sibling kg:1827 kg:6013 ;\",\n          \"kg:1816 kg:2765 ;\",\n          \"kg:7878 kg:1827 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4343 kg:5080 ?sibling . } UNION { ?sibling kg:5080 kg:4343 . } ?sibling kg:1827 kg:6013 ; kg:1816 kg:2765 ; kg:7878 kg:1827 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q482994 .\",\n    \"?resource wdt:P57 wd:Q606521 .\",\n    \"?resource wdt:P50 wd:Q180955 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q482994 . ?resource wdt:P57 wd:Q606521 . ?resource wdt:P50 wd:Q180955 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q44477 wdt:P162 wd:Q320211 . } UNION \",\n        \"{ wd:Q44477 wdt:P58 wd:Q2831 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q44477 wdt:P162 wd:Q320211 . } UNION { wd:Q44477 wdt:P58 wd:Q2831 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:3913 kg:4411 .\",\n          \"?resource kg:7187 kg:4760 .\",\n          \"?resource kg:4994 kg:9933 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3913 kg:4411 . ?resource kg:7187 kg:4760 . ?resource kg:4994 kg:9933 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q24867 ;\",\n    \"wdt:P162 wd:Q9505 ;\",\n    \"wdt:P58 wd:Q37928 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q24867 ; wdt:P162 wd:Q9505 ; wdt:P58 wd:Q37928 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q636043"], ["wd:Q241958"]]}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P1431 wd:Q8877.} UNION \",\n        \"{?resource wdt:P58 wd:Q75079.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P1431 wd:Q8877.} UNION {?resource wdt:P58 wd:Q75079.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6047 kg:9429 ?resource . } UNION \",\n        \"{ kg:9283 kg:9692 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:6047 kg:9429 ?resource . } UNION { kg:9283 kg:9692 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?distributor wdt:P31 wd:Q278405 .\",\n    \"?distributor wdt:P17 wd:Q34 .\",\n    \"?distributor wdt:P162 ?work .\",\n    \"?producer wdt:P31 wd:Q278405 .\",\n    \"?producer wdt:P17 wd:Q34 .\",\n    \"?producer wdt:P162 ?work .\",\n    \"?work wdt:P31 wd:Q19757 .\",\n    \"?work rdfs:label \\\"The Magic Flute\\\"@en .\",\n    \"}\",\n  \"LIMIT 10\"\n   ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?distributor wdt:P31 wd:Q278405 . ?distributor wdt:P17 wd:Q34 . ?distributor wdt:P162 ?work . ?producer wdt:P31 wd:Q278405 . ?producer wdt:P17 wd:Q34 . ?producer wdt:P162 ?work . ?work wdt:P31 wd:Q19757 . ?work rdfs:label \"The Magic Flute\"@en . } LIMIT 10", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P750 wd:Q1651543.} UNION \",\n        \"{?resource wdt:P272 wd:Q1651543.}\",\n        \"?resource wdt:P112 wd:Q34.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P750 wd:Q1651543.} UNION {?resource wdt:P272 wd:Q1651543.} ?resource wdt:P112 wd:Q34. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1543058"]]}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:4497 kg:9202.} UNION \",\n        \"{?resource kg:5876 kg:9202.} UNION \",\n        \"{?resource kg:3114 kg:6890.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:4497 kg:9202.} UNION {?resource kg:5876 kg:9202.} UNION {?resource kg:3114 kg:6890.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"wd:Q123456 wdt:P22 ?parent .\",\n    \"wd:Q123456 wdt:P26 ?spouse .\",\n    \"wd:Q123456 wdt:P3373 ?sibling .\",\n    \"{ ?parent wdt:P26 wd:Q987654 } UNION { ?spouse wdt:P26 wd:Q987654 } UNION { ?sibling wdt:P26 wd:Q987654 }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { wd:Q123456 wdt:P22 ?parent . wd:Q123456 wdt:P26 ?spouse . wd:Q123456 wdt:P3373 ?sibling . { ?parent wdt:P26 wd:Q987654 } UNION { ?spouse wdt:P26 wd:Q987654 } UNION { ?sibling wdt:P26 wd:Q987654 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q210535 wdt:P40 ?parent . ?parent wdt:P26 wd:Q443473 }\",\n        \"UNION\",\n        \"{ wd:Q210535 wdt:P26 ?spouse . ?spouse wdt:P26 wd:Q443473 }\",\n        \"UNION\",\n        \"{ wd:Q210535 wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q443473 }\",\n      \"} LIMIT 1\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q210535 wdt:P40 ?parent . ?parent wdt:P26 wd:Q443473 } UNION { wd:Q210535 wdt:P26 ?spouse . ?spouse wdt:P26 wd:Q443473 } UNION { wd:Q210535 wdt:P3373 ?sibling . ?sibling wdt:P26 wd:Q443473 } } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2312 P40 ?parent . ?parent P26 kg:0899 } UNION \",\n        \"{ kg:2312 P3373 ?spouse . ?spouse P26 kg:0899 } UNION \",\n        \"{ kg:2312 P355 ?sibling . ?sibling P26 kg:0899 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2312 P40 ?parent . ?parent P26 kg:0899 } UNION { kg:2312 P3373 ?spouse . ?spouse P26 kg:0899 } UNION { kg:2312 P355 ?sibling . ?sibling P26 kg:0899 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n      \"wd:Q16203897 wdt:P26 ?spouse .\",\n      \"?spouse wdt:P21 wd:Q6581097 ;\",\n      \"wdt:P27 wd:Q16 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q16203897 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 ; wdt:P27 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n  \"query\":\n    [\n      \"SELECT ?spouse WHERE {\",\n        \"wd:Q233128 wdt:P26 ?spouse.\",\n        \"?spouse wdt:P106 wd:Q1323191;\",\n                \"wdt:P27 wd:Q16;\",\n                \"wdt:P21 wd:Q6581097.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q233128 wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191; wdt:P27 wd:Q16; wdt:P21 wd:Q6581097. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q896740"]], "gold": [true]}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5053 kg:9486 ?spouse . } UNION { ?spouse kg:9486 kg:5053 . }\",\n        \"?spouse kg:8565 kg:7081 ;\",\n        \"kg:3944 kg:7839 ;\",\n        \"kg:3720 kg:9681 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5053 kg:9486 ?spouse . } UNION { ?spouse kg:9486 kg:5053 . } ?spouse kg:8565 kg:7081 ; kg:3944 kg:7839 ; kg:3720 kg:9681 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q278406 .\",\n    \"?sequel wdt:P577 ?publicationDate .\",\n    \"?sequel wdt:P170 wd:Q967246 .\",\n    \"?sequel wdt:P364 wd:Q839154 .\",\n    \"}\",\n  \"LIMIT 1\"\n   ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q278406 . ?sequel wdt:P577 ?publicationDate . ?sequel wdt:P170 wd:Q967246 . ?sequel wdt:P364 wd:Q839154 . } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sequel WHERE {\",\n      \"?sequel wdt:P31 wd:Q115945 ;\",\n      \"       wdt:P272 wd:Q47099 ;\",\n      \"       wdt:P162 wd:Q115945 ;\",\n      \"       wdt:P155 ?producer .\",\n      \"?producer wdt:P31 wd:Q47099 ;\",\n      \"         wdt:P750 wd:Q47099 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q115945 ; wdt:P272 wd:Q47099 ; wdt:P162 wd:Q115945 ; wdt:P155 ?producer . ?producer wdt:P31 wd:Q47099 ; wdt:P750 wd:Q47099 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q471588"]]}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:0424 kg:2408 . } UNION \",\n        \"{ ?resource kg:1224 kg:6778 . } UNION \",\n        \"{ ?resource kg:7869 kg:8668 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0424 kg:2408 . } UNION { ?resource kg:1224 kg:6778 . } UNION { ?resource kg:7869 kg:8668 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?child ?parent WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 .\",\n    \"?company wdt:P749 ?child .\",\n    \"?company wdt:P267 ?parent .\",\n    \"?company wdt:P749 wd:Q101332 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?company wdt:P31 wd:Q4830453 . ?company wdt:P749 ?child . ?company wdt:P267 ?parent . ?company wdt:P749 wd:Q101332 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?child ?parent WHERE {\",\n        \"{\",\n          \"?child wdt:P749 wd:Q467752 .\",\n          \"?child wdt:P127 ?parent .\",\n          \"?parent wdt:P355 wd:Q4830453 .\",\n        \"} UNION {\",\n          \"?parent wdt:P749 wd:Q467752 .\",\n          \"?child wdt:P127 ?parent .\",\n          \"?child wdt:P355 wd:Q4830453 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?child ?parent WHERE { { ?child wdt:P749 wd:Q467752 . ?child wdt:P127 ?parent . ?parent wdt:P355 wd:Q4830453 . } UNION { ?parent wdt:P749 wd:Q467752 . ?child wdt:P127 ?parent . ?child wdt:P355 wd:Q4830453 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?child ?parent WHERE {\",\n        \"{ kg:4917 kg:6878 ?child . } UNION { kg:4917 kg:1164 ?parent . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?child ?parent WHERE { { kg:4917 kg:6878 ?child . } UNION { kg:4917 kg:1164 ?parent . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"wd:Q4860197 wdt:P162 ?producer .\",\n    \"wd:Q4860197 wdt:P750 ?distributor .\",\n    \"?producer wdt:P112 ?founderProducer .\",\n    \"?distributor wdt:P112 ?founderDistributor .\",\n    \"{ ?founderProducer wd:Q36745 } UNION { ?founderProducer wd:Q89099 } .\",\n    \"{ ?founderDistributor wd:Q36745 } UNION { ?founderDistributor wd:Q89099 } .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q4860197 wdt:P162 ?producer . wd:Q4860197 wdt:P750 ?distributor . ?producer wdt:P112 ?founderProducer . ?distributor wdt:P112 ?founderDistributor . { ?founderProducer wd:Q36745 } UNION { ?founderProducer wd:Q89099 } . { ?founderDistributor wd:Q36745 } UNION { ?founderDistributor wd:Q89099 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q524849 wdt:P750 ?producer. } UNION { wd:Q524849 wdt:P162 ?producer. }\",\n        \"?producer (wdt:P272|wdt:P112) wd:Q882, wd:Q104109.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q524849 wdt:P750 ?producer. } UNION { wd:Q524849 wdt:P162 ?producer. } ?producer (wdt:P272|wdt:P112) wd:Q882, wd:Q104109. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8180 kg:2817 .\",\n          \"?resource kg:4956 kg:2817 .\",\n        \"} UNION {\",\n          \"?resource kg:8410 kg:7881 .\",\n          \"?resource kg:8410 kg:7296 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8180 kg:2817 . ?resource kg:4956 kg:2817 . } UNION { ?resource kg:8410 kg:7881 . ?resource kg:8410 kg:7296 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?actor WHERE {\",\n      \"{\",\n        \"?actor wdt:P31 wd:Q5 .\",\n        \"?actor wdt:P734 wd:Q208961 .\",\n        \"wd:Q1650 wdt:P737 ?actor .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { { ?actor wdt:P31 wd:Q5 . ?actor wdt:P734 wd:Q208961 . wd:Q1650 wdt:P737 ?actor . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?actor WHERE {\",\n        \"{\",\n          \"?actor wdt:P106 wd:Q33999 .\",\n          \"?actor wdt:P737 wd:Q4811453 .\",\n          \"wd:Q142701 wdt:P3373 ?actor .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { { ?actor wdt:P106 wd:Q33999 . ?actor wdt:P737 wd:Q4811453 . wd:Q142701 wdt:P3373 ?actor . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:7006 kg:0538 ?influence. } UNION { kg:7006 kg:9972 ?influence. }\",\n        \"?influence kg:106 kg:5938.\",\n        \"?resource kg:1929 kg:5606.\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:7006 kg:0538 ?influence. } UNION { kg:7006 kg:9972 ?influence. } ?influence kg:106 kg:5938. ?resource kg:1929 kg:5606. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P50 ?contributor1.} UNION {?resource wdt:P655 ?contributor2.} UNION {?resource wdt:P837 ?contributor3.}\",\n      \"VALUES (?contributor1 ?contributor2 ?contributor3) {\",\n      \"(wd:Q1049069 wd:Q500230 wd:Q1348947)}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P50 ?contributor1.} UNION {?resource wdt:P655 ?contributor2.} UNION {?resource wdt:P837 ?contributor3.} VALUES (?contributor1 ?contributor2 ?contributor3) { (wd:Q1049069 wd:Q500230 wd:Q1348947)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q562108 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q1687239 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q35979475 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q562108 wdt:P1040 ?resource. } UNION \",\n      \"{ wd:Q1687239 wdt:P1040 ?resource. } UNION \",\n      \"{ wd:Q35979475 wdt:P1040 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q562108 wdt:P58 ?resource. } UNION { wd:Q1687239 wdt:P58 ?resource. } UNION { wd:Q35979475 wdt:P58 ?resource. } UNION { wd:Q562108 wdt:P1040 ?resource. } UNION { wd:Q1687239 wdt:P1040 ?resource. } UNION { wd:Q35979475 wdt:P1040 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:3870 kg:4288 . } UNION \",\n        \"{ ?resource kg:3870 kg:7573 . } UNION \",\n        \"{ ?resource kg:3870 kg:3255 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3870 kg:4288 . } UNION { ?resource kg:3870 kg:7573 . } UNION { ?resource kg:3870 kg:3255 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q5 .\",\n    \"?costumeDesigner wdt:P26 ?sibling .\",\n    \"?sibling wdt:P734 wd:Q908699 .\",\n    \"?costumeDesigner wdt:P106 wd:Q56926214 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P26 ?sibling . ?sibling wdt:P734 wd:Q908699 . ?costumeDesigner wdt:P106 wd:Q56926214 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P2515 wd:Q3083718 .\",\n          \"?resource wdt:P27 wd:Q29 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2515 wd:Q3083718 . ?resource wdt:P27 wd:Q29 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:2748 kg:5093 .\",\n          \"?resource kg:8099 kg:8721 .\",\n          \"?resource kg:8474 ?sibling .\",\n          \"?sibling kg:5014 kg:3867 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2748 kg:5093 . ?resource kg:8099 kg:8721 . ?resource kg:8474 ?sibling . ?sibling kg:5014 kg:3867 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q5876635"]]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P31 wd:Q5 .\",\n    \"?composer wdt:P21 wd:Q6581072 .\",\n    \"?composer wdt:P26 wd:Q498480 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P26 wd:Q498480 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"?resource wdt:P106 wd:Q36834 ;\",\n                \"wdt:P21 wd:Q6581072 ;\",\n                \"wdt:P27 wd:Q34 ;\",\n                \"wdt:P26 wd:Q96203723 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q36834 ; wdt:P21 wd:Q6581072 ; wdt:P27 wd:Q34 ; wdt:P26 wd:Q96203723 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q75329"]], "gold": [true]}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:3144 kg:8756 .\",\n          \"?resource kg:0594 kg:8271 .\",\n          \"?resource kg:2252 kg:5568 .\",\n          \"kg:8271 kg:3144 kg:3259 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3144 kg:8756 . ?resource kg:0594 kg:8271 . ?resource kg:2252 kg:5568 . kg:8271 kg:3144 kg:3259 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\",\n    \"?resource rdfs:label \\\"Stop for Bud\\\"@en .\",\n    \"?resource wdt:P57 ?producer .\",\n    \"?producer rdfs:label ?producerLabel .\",\n    \"FILTER(?producerLabel IN (\\\"Jens Jørgen Thorsen\\\", \\\"Ole John\\\", \\\"Jørgen Leth\\\")).\",\n    \"?resource wdt:P68 ?editor .\",\n    \"?editor rdfs:label ?editorLabel .\",\n    \"FILTER(?editorLabel IN (\\\"Jens Jørgen Thorsen\\\", \\\"Ole John\\\", \\\"Jørgen Leth\\\")).\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . ?resource rdfs:label \"Stop for Bud\"@en . ?resource wdt:P57 ?producer . ?producer rdfs:label ?producerLabel . FILTER(?producerLabel IN (\"Jens Jørgen Thorsen\", \"Ole John\", \"Jørgen Leth\")). ?resource wdt:P68 ?editor . ?editor rdfs:label ?editorLabel . FILTER(?editorLabel IN (\"Jens Jørgen Thorsen\", \"Ole John\", \"Jørgen Leth\")). } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P162 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q1687239 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P162 wd:Q562108 . } UNION { wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P272 wd:Q562108 . } UNION { wd:Q20729551 wdt:P272 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P272 wd:Q1687239 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5777 kg:9246 ?producer . } UNION { kg:5777 kg:7250 ?editor . }\",\n        \"FILTER (?producer IN (kg:3644, kg:2891, kg:2285) || ?editor IN (kg:3644, kg:2891, kg:2285))\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5777 kg:9246 ?producer . } UNION { kg:5777 kg:7250 ?editor . } FILTER (?producer IN (kg:3644, kg:2891, kg:2285) || ?editor IN (kg:3644, kg:2891, kg:2285)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 wd:Q47098 .\",\n    \"?resource wdt:P25 wd:Q47098 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q47098 . ?resource wdt:P25 wd:Q47098 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P21 wd:Q6581072 .\",\n          \"?resource wdt:P3373 wd:Q3340 .\",\n          \"?resource wdt:P26 wd:Q296446 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P21 wd:Q6581072 . ?resource wdt:P3373 wd:Q3340 . ?resource wdt:P26 wd:Q296446 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q40023"], ["wd:Q40027"]], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5862 kg:21 ?sibling . } UNION { kg:5862 kg:26 ?spouse . }\",\n        \"?sibling kg:3373 kg:6160 .\",\n        \"?resource kg:3340 ?sibling .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5862 kg:21 ?sibling . } UNION { kg:5862 kg:26 ?spouse . } ?sibling kg:3373 kg:6160 . ?resource kg:3340 ?sibling . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50 ?author1 .\",\n      \"?resource wdt:P50 ?author2 .\",\n      \"?resource wdt:P50 ?author3 .\",\n      \"?resource wdt:P6554 ?editor1 .\",\n      \"?resource wdt:P6554 ?editor2 .\",\n      \"?resource wdt:P6554 ?editor3 .\",\n      \"{ ?author1 wd:Q1078966 } UNION { ?author2 wd:Q1078966 } UNION { ?author3 wd:Q1078966 } .\",\n      \"{ ?editor1 wd:Q1078966 } UNION { ?editor2 wd:Q1078966 } UNION { ?editor3 wd:Q1078966 } .\",\n      \"}\",\n    \"VALUES (?author1 ?author2 ?author3) {\",\n      \"(wd:Q1078966 wd:Q548224 wd:Q1051168)\",\n    \"}\",\n    \"VALUES (?editor1 ?editor2 ?editor3) {\",\n      \"(wd:Q1078966 wd:Q548224 wd:Q1051168)\",\n    \"}\"\n     ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 ?author1 . ?resource wdt:P50 ?author2 . ?resource wdt:P50 ?author3 . ?resource wdt:P6554 ?editor1 . ?resource wdt:P6554 ?editor2 . ?resource wdt:P6554 ?editor3 . { ?author1 wd:Q1078966 } UNION { ?author2 wd:Q1078966 } UNION { ?author3 wd:Q1078966 } . { ?editor1 wd:Q1078966 } UNION { ?editor2 wd:Q1078966 } UNION { ?editor3 wd:Q1078966 } . } VALUES (?author1 ?author2 ?author3) { (wd:Q1078966 wd:Q548224 wd:Q1051168) } VALUES (?editor1 ?editor2 ?editor3) { (wd:Q1078966 wd:Q548224 wd:Q1051168) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P1040 wd:Q562108.} UNION \",\n      \"{?resource wdt:P1040 wd:Q1687239.} UNION \",\n      \"{?resource wdt:P1040 wd:Q35979475.} UNION \",\n      \"{?resource wdt:P58 wd:Q562108.} UNION \",\n      \"{?resource wdt:P58 wd:Q1687239.} UNION \",\n      \"{?resource wdt:P58 wd:Q35979475.}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P1040 wd:Q562108.} UNION {?resource wdt:P1040 wd:Q1687239.} UNION {?resource wdt:P1040 wd:Q35979475.} UNION {?resource wdt:P58 wd:Q562108.} UNION {?resource wdt:P58 wd:Q1687239.} UNION {?resource wdt:P58 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:6908 kg:5943 .}\",\n        \"{?resource kg:6908 kg:6763 .}\",\n        \"{?resource kg:6908 kg:9719 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:6908 kg:5943 .} {?resource kg:6908 kg:6763 .} {?resource kg:6908 kg:9719 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5398426 .\",\n    \"?resource rdfs:label \\\"Stop for Bud\\\"@en .\",\n    \"?resource wdt:P50 ?director .\",\n    \"?resource wdt:P68 ?editor .\",\n    \"{ ?director wdt:P31 wd:Q5 . FILTER(?director IN (wd:Q24791, wd:Q1348091)) } UNION { ?editor wdt:P31 wd:Q5 . FILTER(?editor IN (wd:Q24791, wd:Q1348091, wd:Q650195)) }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5398426 . ?resource rdfs:label \"Stop for Bud\"@en . ?resource wdt:P50 ?director . ?resource wdt:P68 ?editor . { ?director wdt:P31 wd:Q5 . FILTER(?director IN (wd:Q24791, wd:Q1348091)) } UNION { ?editor wdt:P31 wd:Q5 . FILTER(?editor IN (wd:Q24791, wd:Q1348091, wd:Q650195)) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P58 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P58 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P58 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q35979475 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P58 wd:Q562108 . } UNION { wd:Q20729551 wdt:P58 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P58 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P1040 wd:Q562108 . } UNION { wd:Q20729551 wdt:P1040 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P1040 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:6699 kg:7434 . } UNION \",\n        \"{ ?resource kg:2004 kg:7434 . } UNION \",\n        \"{ ?resource kg:6699 kg:9084 . } UNION \",\n        \"{ ?resource kg:2004 kg:9084 . } UNION \",\n        \"{ ?resource kg:6699 kg:7959 . } UNION \",\n        \"{ ?resource kg:2004 kg:7959 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6699 kg:7434 . } UNION { ?resource kg:2004 kg:7434 . } UNION { ?resource kg:6699 kg:9084 . } UNION { ?resource kg:2004 kg:9084 . } UNION { ?resource kg:6699 kg:7959 . } UNION { ?resource kg:2004 kg:7959 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5398426;\",\n    \"         wdt:P170 wd:Q1051193, wd:Q1239220, wd:Q1239221;\",\n    \"         wdt:P161 wd:Q1051193, wd:Q1239220, wd:Q1239221.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q1051193, wd:Q1239220, wd:Q1239221; wdt:P161 wd:Q1051193, wd:Q1239220, wd:Q1239221. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P162 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q1687239 . } UNION \",\n        \"{ wd:Q20729551 wdt:P272 wd:Q35979475 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P162 wd:Q562108 . } UNION { wd:Q20729551 wdt:P162 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P162 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P272 wd:Q562108 . } UNION { wd:Q20729551 wdt:P272 wd:Q1687239 . } UNION { wd:Q20729551 wdt:P272 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4646 kg:8791 ?producer . } UNION { kg:4646 kg:8452 ?editor . }\",\n        \"VALUES (?producer ?editor) {\",\n          \"(kg:0356 kg:4280 kg:9844)\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4646 kg:8791 ?producer . } UNION { kg:4646 kg:8452 ?editor . } VALUES (?producer ?editor) { (kg:0356 kg:4280 kg:9844) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5398426 .\",\n    \"?resource wdt:P170 wd:Q3641245 .\",\n    \"?resource wdt:P170 wd:Q381347 .\",\n    \"?resource wdt:P170 wd:Q936830 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5398426 . ?resource wdt:P170 wd:Q3641245 . ?resource wdt:P170 wd:Q381347 . ?resource wdt:P170 wd:Q936830 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q886"]]}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P162 wd:Q43994.} UNION \",\n        \"{?resource wdt:P272 wd:Q43994.} UNION \",\n        \"{?resource wdt:P162 wd:Q95125.} UNION \",\n        \"{?resource wdt:P272 wd:Q95125.} UNION \",\n        \"{?resource wdt:P162 wd:Q365090.} UNION \",\n        \"{?resource wdt:P272 wd:Q365090.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P162 wd:Q43994.} UNION {?resource wdt:P272 wd:Q43994.} UNION {?resource wdt:P162 wd:Q95125.} UNION {?resource wdt:P272 wd:Q95125.} UNION {?resource wdt:P162 wd:Q365090.} UNION {?resource wdt:P272 wd:Q365090.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1348 kg:0211 . } UNION \",\n        \"{ ?resource kg:1348 kg:8925 . } UNION \",\n        \"{ ?resource kg:162 kg:2822 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1348 kg:0211 . } UNION { ?resource kg:1348 kg:8925 . } UNION { ?resource kg:162 kg:2822 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?femaleSibling WHERE {\",\n    \"?femaleSibling wdt:P31 wd:Q5;\",\n    \"                wdt:P25 wd:Q47068;\",\n    \"                wdt:P3320 wd:Q49009.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?femaleSibling WHERE { ?femaleSibling wdt:P31 wd:Q5; wdt:P25 wd:Q47068; wdt:P3320 wd:Q49009. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\":\n    [\n      \"SELECT ?sibling WHERE {\",\n      \"?sibling wdt:P21 wd:Q6581072 ;\",\n      \"        wdt:P3373 wd:Q3345, wd:Q3340 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P21 wd:Q6581072 ; wdt:P3373 wd:Q3345, wd:Q3340 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q40023"], ["wd:Q451204"], ["wd:Q40027"]], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8383 kg:7620 ?sibling . } UNION { ?sibling kg:7620 kg:8383 . }\",\n        \"{ kg:5838 kg:7620 ?sibling . } UNION { ?sibling kg:7620 kg:5838 . }\",\n        \"?resource kg:4916 kg:3742 .\",\n        \"?resource kg:0080 ?sibling .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8383 kg:7620 ?sibling . } UNION { ?sibling kg:7620 kg:8383 . } { kg:5838 kg:7620 ?sibling . } UNION { ?sibling kg:7620 kg:5838 . } ?resource kg:4916 kg:3742 . ?resource kg:0080 ?sibling . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q40023"], ["wd:Q40027"]]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q1340146;\",\n      \"       wdt:P57 wd:Q1340146.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q1340146;\",\n      \"       wdt:P58 wd:Q1340146.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q650207;\",\n      \"       wdt:P57 wd:Q650207.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q650207;\",\n      \"       wdt:P58 wd:Q650207.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P161 wd:Q1340146;\",\n      \"       wdt:P57 wd:Q1340146.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P161 wd:Q1340146;\",\n      \"       wdt:P58 wd:Q1340146.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q650207;\",\n      \"       wdt:P57 wd:Q650207.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P170 wd:Q650207;\",\n      \"       wdt:P58 wd:Q650207.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P161 wd:Q650207;\",\n      \"       wdt:P57 wd:Q650207.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5398426;\",\n      \"       wdt:P161 wd:Q650207;\",\n      \"       wdt:P58 wd:Q650207.\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q1340146; wdt:P57 wd:Q1340146. } { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q1340146; wdt:P58 wd:Q1340146. } { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q650207; wdt:P57 wd:Q650207. } { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q650207; wdt:P58 wd:Q650207. } { ?resource wdt:P31 wd:Q5398426; wdt:P161 wd:Q1340146; wdt:P57 wd:Q1340146. } { ?resource wdt:P31 wd:Q5398426; wdt:P161 wd:Q1340146; wdt:P58 wd:Q1340146. } { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q650207; wdt:P57 wd:Q650207. } { ?resource wdt:P31 wd:Q5398426; wdt:P170 wd:Q650207; wdt:P58 wd:Q650207. } { ?resource wdt:P31 wd:Q5398426; wdt:P161 wd:Q650207; wdt:P57 wd:Q650207. } { ?resource wdt:P31 wd:Q5398426; wdt:P161 wd:Q650207; wdt:P58 wd:Q650207. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1079 wdt:P57 ?producer . } UNION \",\n        \"{ wd:Q1079 wdt:P58 ?director . } UNION \",\n        \"{ wd:Q1079 wdt:P272 ?writer . }\",\n      \"  FILTER (?resource IN (wd:Q4500, wd:Q5542223))\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1079 wdt:P57 ?producer . } UNION { wd:Q1079 wdt:P58 ?director . } UNION { wd:Q1079 wdt:P272 ?writer . } FILTER (?resource IN (wd:Q4500, wd:Q5542223)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:5045 kg:6250 . } UNION \",\n        \"{ ?resource kg:7159 kg:8022 . } UNION \",\n        \"{ ?resource kg:3585 kg:8022 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5045 kg:6250 . } UNION { ?resource kg:7159 kg:8022 . } UNION { ?resource kg:3585 kg:8022 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2498761 .\",\n    \"{ ?resource p:P1667 ?statement1 . ?statement1 ps:P1667 wd:Q1340065 . } UNION { ?resource p:P1667 ?statement2 . ?statement2 ps:P1667 wd:Q189179 . } UNION { ?resource p:P1667 ?statement3 . ?statement3 ps:P1667 wd:Q540970 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2498761 . { ?resource p:P1667 ?statement1 . ?statement1 ps:P1667 wd:Q1340065 . } UNION { ?resource p:P1667 ?statement2 . ?statement2 ps:P1667 wd:Q189179 . } UNION { ?resource p:P1667 ?statement3 . ?statement3 ps:P1667 wd:Q540970 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2336453 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q2336453 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q2615443 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q2615443 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q3530946 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q3530946 wdt:P1040 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2336453 wdt:P161 ?resource. } UNION { wd:Q2336453 wdt:P1040 ?resource. } UNION { wd:Q2615443 wdt:P161 ?resource. } UNION { wd:Q2615443 wdt:P1040 ?resource. } UNION { wd:Q3530946 wdt:P161 ?resource. } UNION { wd:Q3530946 wdt:P1040 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q3369153"], ["wd:Q3560438"], ["wd:Q434244"], ["wd:Q3159276"], ["wd:Q3302551"], ["wd:Q16669937"], ["wd:Q433743"], ["wd:Q3320929"], ["wd:Q3242516"], ["wd:Q3375576"], ["wd:Q3368907"], ["wd:Q106573"], ["wd:Q3490928"], ["wd:Q4974119"], ["wd:Q16661967"], ["wd:Q964873"], ["wd:Q3505931"], ["wd:Q3591012"], ["wd:Q3505664"], ["wd:Q3106474"], ["wd:Q551861"], ["wd:Q382393"], ["wd:Q19543978"], ["wd:Q2851072"], ["wd:Q920607"], ["wd:Q3573721"], ["wd:Q1339485"], ["wd:Q2941843"], ["wd:Q3023033"], ["wd:Q3384349"], ["wd:Q15059425"], ["wd:Q3286945"], ["wd:Q125849"], ["wd:Q536673"], ["wd:Q2851003"], ["wd:Q338704"]], "gold": [true]}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2303 kg:0094 . } UNION \",\n        \"{ ?resource kg:2244 kg:2932 . } UNION \",\n        \"{ ?resource kg:1467 kg:2954 . } UNION \",\n        \"{ ?resource kg:1467 kg:9009 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2303 kg:0094 . } UNION { ?resource kg:2244 kg:2932 . } UNION { ?resource kg:1467 kg:2954 . } UNION { ?resource kg:1467 kg:9009 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 ?editor_star .\",\n    \"{ ?editor_star wdt:P800 wd:Q49746 } UNION { ?editor_star wdt:P161 wd:Q49746 } .\",\n    \"?resource p:P3320 ?film1 .\",\n    \"?film1 ps:P3320 wd:Q58094 .\",\n    \"?resource p:P3320 ?film2 .\",\n    \"?film2 ps:P3320 wd:Q674897 .\",\n    \"?resource p:P3320 ?film3 .\",\n    \"?film3 ps:P3320 wd:Q150890 .\",\n    \"?resource p:P3320 ?film4 .\",\n    \"?film4 ps:P3320 wd:Q767960 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 ?editor_star . { ?editor_star wdt:P800 wd:Q49746 } UNION { ?editor_star wdt:P161 wd:Q49746 } . ?resource p:P3320 ?film1 . ?film1 ps:P3320 wd:Q58094 . ?resource p:P3320 ?film2 . ?film2 ps:P3320 wd:Q674897 . ?resource p:P3320 ?film3 . ?film3 ps:P3320 wd:Q150890 . ?resource p:P3320 ?film4 . ?film4 ps:P3320 wd:Q767960 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P31 wd:Q5 .}\",\n      \"{?resource wdt:P161 wd:Q2718259 .}\",\n      \"{?resource wdt:P1040 wd:Q658822 .}\",\n      \"{?resource wdt:P1040 wd:Q45602 .}\",\n      \"{?resource wdt:P1040 wd:Q921678 .}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P31 wd:Q5 .} {?resource wdt:P161 wd:Q2718259 .} {?resource wdt:P1040 wd:Q658822 .} {?resource wdt:P1040 wd:Q45602 .} {?resource wdt:P1040 wd:Q921678 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:3901 kg:7746.} UNION \",\n        \"{?resource kg:3901 kg:6275.} UNION \",\n        \"{?resource kg:3901 kg:4400.} UNION \",\n        \"{?resource kg:3901 kg:6696.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:3901 kg:7746.} UNION {?resource kg:3901 kg:6275.} UNION {?resource kg:3901 kg:4400.} UNION {?resource kg:3901 kg:6696.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{ wd:Q5378406 wdt:P128 ?resource . } UNION \",\n    \"{ wd:Q963155 wdt:P128 ?resource . } UNION \",\n    \"{ wd:Q6163722 wdt:P128 ?resource . } UNION \",\n    \"{ wd:Q4705962 wdt:P128 ?resource . }\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q5378406 wdt:P128 ?resource . } UNION { wd:Q963155 wdt:P128 ?resource . } UNION { wd:Q6163722 wdt:P128 ?resource . } UNION { wd:Q4705962 wdt:P128 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1291210 wdt:P57|wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q16198328 wdt:P57|wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q4207234 wdt:P57|wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q4679987 wdt:P57|wdt:P1040 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1291210 wdt:P57|wdt:P1040 ?resource. } UNION { wd:Q16198328 wdt:P57|wdt:P1040 ?resource. } UNION { wd:Q4207234 wdt:P57|wdt:P1040 ?resource. } UNION { wd:Q4679987 wdt:P57|wdt:P1040 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:3767 kg:6722 ?resource . } UNION \",\n        \"{ kg:1625 kg:6722 ?resource . } UNION \",\n        \"{ kg:0187 kg:6722 ?resource . } UNION \",\n        \"{ kg:5240 kg:6722 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:3767 kg:6722 ?resource . } UNION { kg:1625 kg:6722 ?resource . } UNION { kg:0187 kg:6722 ?resource . } UNION { kg:5240 kg:6722 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q7906333"]]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P57 dbr:Alexandre_Rockwell .\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P58 dbr:Quentin_Tarantino .\",\n      \"} UNION {\",\n        \"?film wdt:P57 dbr:Allison_Anders .\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P58 dbr:Robert_Rodriguez .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 dbr:Alexandre_Rockwell . ?film wdt:P31 wd:Q2085381 . ?film wdt:P58 dbr:Quentin_Tarantino . } UNION { ?film wdt:P57 dbr:Allison_Anders . ?film wdt:P31 wd:Q2085381 . ?film wdt:P58 dbr:Robert_Rodriguez . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1137372 wdt:P57 wd:Q3772 . } UNION \",\n        \"{ wd:Q1137372 wdt:P58 wd:Q47284 . } UNION \",\n        \"{ wd:Q1137372 wdt:P57 wd:Q549956 . } UNION \",\n        \"{ wd:Q1137372 wdt:P58 wd:Q2838329 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1137372 wdt:P57 wd:Q3772 . } UNION { wd:Q1137372 wdt:P58 wd:Q47284 . } UNION { wd:Q1137372 wdt:P57 wd:Q549956 . } UNION { wd:Q1137372 wdt:P58 wd:Q2838329 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:Q1137372 kg:P57 ?director . } UNION { kg:Q1137372 kg:P58 ?writer . }\",\n        \"VALUES (?person) { (kg:Q3772) (kg:Q47284) (kg:Q549956) (kg:Q2838329) }\",\n        \"{ ?director kg:P31 ?person . } UNION { ?writer kg:P31 ?person . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:Q1137372 kg:P57 ?director . } UNION { kg:Q1137372 kg:P58 ?writer . } VALUES (?person) { (kg:Q3772) (kg:Q47284) (kg:Q549956) (kg:Q2838329) } { ?director kg:P31 ?person . } UNION { ?writer kg:P31 ?person . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{ ?resource wdt:P57 dbr:Susie_Essman . } UNION \",\n    \"{ ?resource wdt:P162 dbr:Malcolm_McDowell . } UNION \",\n    \"{ ?resource wdt:P345 dbr:Clark_Spencer . } UNION \",\n    \"{ ?resource wdt:P87 dbr:Miley_Cyrus . }\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 dbr:Susie_Essman . } UNION { ?resource wdt:P162 dbr:Malcolm_McDowell . } UNION { ?resource wdt:P345 dbr:Clark_Spencer . } UNION { ?resource wdt:P87 dbr:Miley_Cyrus . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q3977597 wdt:P57 wd:Q4235 . } UNION \",\n      \"{ wd:Q3977597 wdt:P162 wd:Q40220 . } UNION \",\n      \"{ wd:Q3977597 wdt:P162 wd:Q117392 . } UNION \",\n      \"{ wd:Q3977597 wdt:P162 wd:Q5127380 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q3977597 wdt:P57 wd:Q4235 . } UNION { wd:Q3977597 wdt:P162 wd:Q40220 . } UNION { wd:Q3977597 wdt:P162 wd:Q117392 . } UNION { wd:Q3977597 wdt:P162 wd:Q5127380 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:4827 kg:7140 . } UNION \",\n        \"{ ?resource kg:4827 kg:6489 . } UNION \",\n        \"{ ?resource kg:4827 kg:0436 . } UNION \",\n        \"{ ?resource kg:7598 kg:7140 . } UNION \",\n        \"{ ?resource kg:7598 kg:6489 . } UNION \",\n        \"{ ?resource kg:7598 kg:0436 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4827 kg:7140 . } UNION { ?resource kg:4827 kg:6489 . } UNION { ?resource kg:4827 kg:0436 . } UNION { ?resource kg:7598 kg:7140 . } UNION { ?resource kg:7598 kg:6489 . } UNION { ?resource kg:7598 kg:0436 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q11424 .\",\n      \"?resource wdt:P50 wd:Q38204 .\",\n      \"?resource wdt:P162 wd:Q38204 .\",\n      \"?resource wdt:P279 wd:Q38204 .\",\n      \"?resource wdt:P58 wd:Q38204 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . ?resource wdt:P50 wd:Q38204 . ?resource wdt:P162 wd:Q38204 . ?resource wdt:P279 wd:Q38204 . ?resource wdt:P58 wd:Q38204 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q17738"]]}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P1040 wd:Q38222.} UNION \",\n        \"{?resource wdt:P162 wd:Q38222.} UNION \",\n        \"{?resource wdt:P58 wd:Q38222.} UNION \",\n        \"{?resource wdt:P272 wd:Q38222.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P1040 wd:Q38222.} UNION {?resource wdt:P162 wd:Q38222.} UNION {?resource wdt:P58 wd:Q38222.} UNION {?resource wdt:P272 wd:Q38222.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2686 kg:4247 . } UNION \",\n        \"{ ?resource kg:2951 kg:4247 . } UNION \",\n        \"{ ?resource kg:3833 kg:4247 . } UNION \",\n        \"{ ?resource kg:7271 kg:4247 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2686 kg:4247 . } UNION { ?resource kg:2951 kg:4247 . } UNION { ?resource kg:3833 kg:4247 . } UNION { ?resource kg:7271 kg:4247 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q17738"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?writer WHERE {\",\n      \"?writer wdt:P31 wd:Q5 .\",\n      \"?writer wdt:P26 ?editor .\",\n      \"?writer wdt:P50 ?work1 ;\",\n      \"wdt:P50 ?work2 ;\",\n      \"wdt:P50 ?work3 .\",\n      \"?work1 rdfs:label \\\"Every Man for Himself\\\"@en .\",\n      \"?work2 rdfs:label \\\"Passion\\\"@en .\",\n      \"?work3 rdfs:label \\\"Notre musique\\\"@en .\",\n      \"?editor wdt:P108 wd:Q964758 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?writer WHERE { ?writer wdt:P31 wd:Q5 . ?writer wdt:P26 ?editor . ?writer wdt:P50 ?work1 ; wdt:P50 ?work2 ; wdt:P50 ?work3 . ?work1 rdfs:label \"Every Man for Himself\"@en . ?work2 rdfs:label \"Passion\"@en . ?work3 rdfs:label \"Notre musique\"@en . ?editor wdt:P108 wd:Q964758 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P50 wd:Q3141131.} UNION \",\n        \"{?resource wdt:P58 wd:Q972787.} UNION \",\n        \"{?resource wdt:P58 wd:Q672061.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P50 wd:Q3141131.} UNION {?resource wdt:P58 wd:Q972787.} UNION {?resource wdt:P58 wd:Q672061.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:3129 kg:5091 .\",\n          \"?resource kg:8835 kg:1090 .\",\n          \"?resource kg:8835 kg:7506 .\",\n          \"?resource kg:8835 kg:6665 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3129 kg:5091 . ?resource kg:8835 kg:1090 . ?resource kg:8835 kg:7506 . ?resource kg:8835 kg:6665 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q53001"]]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film rdfs:label \\\"Laws of Attraction\\\"@en .\",\n      \"{ ?film wdt:P162 ?producer } UNION { ?film wdt:P87 ?executiveProducer }\",\n      \"VALUES (?producer ?executiveProducer) {\",\n        \"(wd:Q4953066 wd:Q4953066)\", \", # Bob Yari\",\n        \"(wd:Q187297 wd:Q187297)\", \", # Pierce Brosnan\",\n        \"(wd:Q7811862 wd:Q7811862)\", \", # Toby Emmerich\",\n        \"(wd:Q5360498 wd:Q5360498) }\", \", # Elie Samaha\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"Laws of Attraction\"@en . { ?film wdt:P162 ?producer } UNION { ?film wdt:P87 ?executiveProducer } VALUES (?producer ?executiveProducer) { (wd:Q4953066 wd:Q4953066) , (wd:Q187297 wd:Q187297) , (wd:Q7811862 wd:Q7811862) , (wd:Q5360498 wd:Q5360498) } , } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q81520 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q81520 wdt:P162 ?resource. } UNION \",\n        \"{ wd:Q819109 wdt:P172 ?resource. } UNION \",\n        \"{ wd:Q381545 wdt:P172 ?resource. } UNION \",\n        \"{ wd:Q169128 wdt:P172 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q81520 wdt:P1431 ?resource. } UNION { wd:Q81520 wdt:P162 ?resource. } UNION { wd:Q819109 wdt:P172 ?resource. } UNION { wd:Q381545 wdt:P172 ?resource. } UNION { wd:Q169128 wdt:P172 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6811 kg:2384 ?producer . } UNION { kg:6811 kg:3566 ?executiveProducer . }\",\n        \"VALUES (?producer ?executiveProducer) {\",\n          \"(kg:2180 kg:5787 kg:6364 kg:1759)\",\n          \"(kg:2180 kg:5787 kg:6364 kg:1759)\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:6811 kg:2384 ?producer . } UNION { kg:6811 kg:3566 ?executiveProducer . } VALUES (?producer ?executiveProducer) { (kg:2180 kg:5787 kg:6364 kg:1759) (kg:2180 kg:5787 kg:6364 kg:1759) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q134206 wdt:P58 ?editor .\",\n    \"  wd:Q134206 wdt:P279 ?executiveProducer .\",\n    \"  wd:Q134206 wdt:P162 ?producer .\",\n    \"  wd:Q134206 wdt:P58 ?writer .\",\n    \"  VALUES (?editor ?executiveProducer ?producer ?writer) {(wd:Q9584)}.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q134206 wdt:P58 ?editor . wd:Q134206 wdt:P279 ?executiveProducer . wd:Q134206 wdt:P162 ?producer . wd:Q134206 wdt:P58 ?writer . VALUES (?editor ?executiveProducer ?producer ?writer) {(wd:Q9584)}. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q854990 wdt:P1040 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P1431 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P162 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P272 wd:Q8006 . } UNION \",\n        \"{ wd:Q854990 wdt:P58 wd:Q8006 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q854990 wdt:P1040 wd:Q8006 . } UNION { wd:Q854990 wdt:P1431 wd:Q8006 . } UNION { wd:Q854990 wdt:P162 wd:Q8006 . } UNION { wd:Q854990 wdt:P272 wd:Q8006 . } UNION { wd:Q854990 wdt:P58 wd:Q8006 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4528 kg:0687 ?resource . } UNION \",\n        \"{ kg:4528 kg:1512 ?resource . } UNION \",\n        \"{ kg:4528 kg:3256 ?resource . } UNION \",\n        \"{ kg:4528 kg:7529 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4528 kg:0687 ?resource . } UNION { kg:4528 kg:1512 ?resource . } UNION { kg:4528 kg:3256 ?resource . } UNION { kg:4528 kg:7529 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P57 dbr:Jørgen_Leth ;\",\n      \"         wdt:P58 dbr:Jens_Jørgen_Thorsen ;\",\n      \"         wdt:P50 dbr:Ole_John .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 dbr:Jørgen_Leth ; wdt:P58 dbr:Jens_Jørgen_Thorsen ; wdt:P50 dbr:Ole_John . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q562108.} UNION \",\n        \"{?resource wdt:P57 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P57 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P1040 wd:Q562108.} UNION \",\n        \"{?resource wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P1040 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P58 wd:Q562108.} UNION \",\n        \"{?resource wdt:P58 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P58 wd:Q35979475.}\"\n      ]\n    }", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q562108.} UNION {?resource wdt:P57 wd:Q1687239.} UNION {?resource wdt:P57 wd:Q35979475.} UNION {?resource wdt:P1040 wd:Q562108.} UNION {?resource wdt:P1040 wd:Q1687239.} UNION {?resource wdt:P1040 wd:Q35979475.} UNION {?resource wdt:P58 wd:Q562108.} UNION {?resource wdt:P58 wd:Q1687239.} UNION {?resource wdt:P58 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:0502 kg:3211 .}\",\n        \"{?resource kg:0502 kg:1867 .}\",\n        \"{?resource kg:0502 kg:1654 .}\",\n        \"{?resource kg:7161 kg:3211 .}\",\n        \"{?resource kg:7161 kg:1867 .}\",\n        \"{?resource kg:7161 kg:1654 .}\",\n        \"{?resource kg:6436 kg:3211 .}\",\n        \"{?resource kg:6436 kg:1867 .}\",\n        \"{?resource kg:6436 kg:1654 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:0502 kg:3211 .} {?resource kg:0502 kg:1867 .} {?resource kg:0502 kg:1654 .} {?resource kg:7161 kg:3211 .} {?resource kg:7161 kg:1867 .} {?resource kg:7161 kg:1654 .} {?resource kg:6436 kg:3211 .} {?resource kg:6436 kg:1867 .} {?resource kg:6436 kg:1654 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 dbr:Ole_John ;\",\n    \"         wdt:P31 wd:Q28640049 .\",\n    \"?resource wdt:P57 dbr:Jørgen_Leth ;\",\n    \"         wdt:P31 wd:Q28640049 .\",\n    \"?resource wdt:P57 dbr:Jens_Jørgen_Thorsen ;\",\n    \"         wdt:P31 wd:Q28640049 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 dbr:Ole_John ; wdt:P31 wd:Q28640049 . ?resource wdt:P57 dbr:Jørgen_Leth ; wdt:P31 wd:Q28640049 . ?resource wdt:P57 dbr:Jens_Jørgen_Thorsen ; wdt:P31 wd:Q28640049 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q562108.} UNION \",\n        \"{?resource wdt:P57 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P57 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P1040 wd:Q562108.} UNION \",\n        \"{?resource wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P1040 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P58 wd:Q562108.} UNION \",\n        \"{?resource wdt:P58 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P58 wd:Q35979475.}\"\n      ]\n    }", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q562108.} UNION {?resource wdt:P57 wd:Q1687239.} UNION {?resource wdt:P57 wd:Q35979475.} UNION {?resource wdt:P1040 wd:Q562108.} UNION {?resource wdt:P1040 wd:Q1687239.} UNION {?resource wdt:P1040 wd:Q35979475.} UNION {?resource wdt:P58 wd:Q562108.} UNION {?resource wdt:P58 wd:Q1687239.} UNION {?resource wdt:P58 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:5048 kg:4591 .}\",\n        \"{?resource kg:5048 kg:7394 .}\",\n        \"{?resource kg:5048 kg:2292 .}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:5048 kg:4591 .} {?resource kg:5048 kg:7394 .} {?resource kg:5048 kg:2292 .} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2405497, wd:Q214318 .\",\n    \"?resource p:P3320 ?statement .\",\n    \"?statement ps:P3320 wd:Q170499, wd:Q169825, wd:Q170498, wd:Q170497 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405497, wd:Q214318 . ?resource p:P3320 ?statement . ?statement ps:P3320 wd:Q170499, wd:Q169825, wd:Q170498, wd:Q170497 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P106 wd:Q3282637 .\",\n        \"?resource wdt:P57 wd:Q649547 .\",\n        \"?resource wdt:P57 wd:Q1216566 .\",\n        \"?resource wdt:P57 wd:Q600762 .\",\n        \"?resource wdt:P57 wd:Q629819 .\",\n      \"} UNION {\",\n        \"?resource wdt:P344 wd:Q649547 .\",\n        \"?resource wdt:P344 wd:Q1216566 .\",\n        \"?resource wdt:P344 wd:Q600762 .\",\n        \"?resource wdt:P344 wd:Q629819 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q649547 . ?resource wdt:P57 wd:Q1216566 . ?resource wdt:P57 wd:Q600762 . ?resource wdt:P57 wd:Q629819 . } UNION { ?resource wdt:P344 wd:Q649547 . ?resource wdt:P344 wd:Q1216566 . ?resource wdt:P344 wd:Q600762 . ?resource wdt:P344 wd:Q629819 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:0565 kg:5089 . } UNION \",\n        \"{ ?resource kg:4231 kg:6872 . } UNION \",\n        \"{ ?resource kg:4231 kg:3725 . } UNION \",\n        \"{ ?resource kg:4231 kg:4560 . } UNION \",\n        \"{ ?resource kg:4231 kg:1277 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0565 kg:5089 . } UNION { ?resource kg:4231 kg:6872 . } UNION { ?resource kg:4231 kg:3725 . } UNION { ?resource kg:4231 kg:4560 . } UNION { ?resource kg:4231 kg:1277 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?actor WHERE {\",\n    \"?actor wdt:P31 wd:Q5 .\",\n    \"?actor wdt:P106 wd:Q2405480, wd:Q279554, wd:Q21191270 .\",\n    \"?actor p:P3320 ?statement .\",\n    \"?statement ps:P3320 wd:Q612321, wd:Q841859, wd:Q11809847, wd:Q11809847 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . ?actor wdt:P106 wd:Q2405480, wd:Q279554, wd:Q21191270 . ?actor p:P3320 ?statement . ?statement ps:P3320 wd:Q612321, wd:Q841859, wd:Q11809847, wd:Q11809847 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P106 wd:Q33999.} UNION \",\n        \"{?resource wdt:P106 wd:Q3485595.} UNION \",\n        \"{?resource wdt:P106 wd:Q1473406.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P106 wd:Q33999.} UNION {?resource wdt:P106 wd:Q3485595.} UNION {?resource wdt:P106 wd:Q1473406.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:0059 kg:5148 . } UNION \",\n        \"{ ?resource kg:9749 kg:6182 . } UNION \",\n        \"{ ?resource kg:3455 kg:9120 . } UNION \",\n        \"{ ?resource kg:3455 kg:8843 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0059 kg:5148 . } UNION { ?resource kg:9749 kg:6182 . } UNION { ?resource kg:3455 kg:9120 . } UNION { ?resource kg:3455 kg:8843 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q11424 .\",\n      \"?resource wdt:P50 wd:Q967899 .\",\n      \"?resource wdt:P162 wd:Q967899 .\",\n      \"?resource wdt:P57 wd:Q967899 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . ?resource wdt:P50 wd:Q967899 . ?resource wdt:P162 wd:Q967899 . ?resource wdt:P57 wd:Q967899 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P50 wd:Q363666 .}\",\n        \"{?resource wdt:P162 wd:Q363666 .}\",\n        \"{?resource wdt:P58 wd:Q363666 .}\",\n        \"{?resource wdt:P50 wd:Q448604 .}\",\n        \"{?resource wdt:P162 wd:Q448604 .}\",\n        \"{?resource wdt:P58 wd:Q448604 .}\",\n        \"{?resource wdt:P50 wd:Q452794 .}\",\n        \"{?resource wdt:P162 wd:Q452794 .}\",\n        \"{?resource wdt:P58 wd:Q452794 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P50 wd:Q363666 .} {?resource wdt:P162 wd:Q363666 .} {?resource wdt:P58 wd:Q363666 .} {?resource wdt:P50 wd:Q448604 .} {?resource wdt:P162 wd:Q448604 .} {?resource wdt:P58 wd:Q448604 .} {?resource wdt:P50 wd:Q452794 .} {?resource wdt:P162 wd:Q452794 .} {?resource wdt:P58 wd:Q452794 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:7157 kg:2091 .}\",\n        \"{?resource kg:3970 kg:2091 .}\",\n        \"{?resource kg:0837 kg:2091 .}\",\n        \"{?resource kg:7157 kg:7027 .}\",\n        \"{?resource kg:3970 kg:7027 .}\",\n        \"{?resource kg:0837 kg:7027 .}\",\n        \"{?resource kg:7157 kg:2575 .}\",\n        \"{?resource kg:3970 kg:2575 .}\",\n        \"{?resource kg:0837 kg:2575 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:7157 kg:2091 .} {?resource kg:3970 kg:2091 .} {?resource kg:0837 kg:2091 .} {?resource kg:7157 kg:7027 .} {?resource kg:3970 kg:7027 .} {?resource kg:0837 kg:7027 .} {?resource kg:7157 kg:2575 .} {?resource kg:3970 kg:2575 .} {?resource kg:0837 kg:2575 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q12345678 wdt:P31 wd:Q5 . } UNION \",\n      \"{ wd:Q12345679 wdt:P31 wd:Q5 . } UNION \",\n      \"{ wd:Q12345680 wdt:P31 wd:Q5 . }\",\n      \"?resource wdt:P57 ?director ;\",\n      \"wdt:P58 ?editor ;\",\n      \"wdt:P50 ?writer .\",\n      \"VALUES (?director ?editor ?writer) {\",\n      \"(wd:Q12345678 wd:Q12345679 wd:Q12345680)}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q12345678 wdt:P31 wd:Q5 . } UNION { wd:Q12345679 wdt:P31 wd:Q5 . } UNION { wd:Q12345680 wdt:P31 wd:Q5 . } ?resource wdt:P57 ?director ; wdt:P58 ?editor ; wdt:P50 ?writer . VALUES (?director ?editor ?writer) { (wd:Q12345678 wd:Q12345679 wd:Q12345680)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q562108 wdt:P57|wdt:P1040|wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q1687239 wdt:P57|wdt:P1040|wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q35979475 wdt:P57|wdt:P1040|wdt:P58 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q562108 wdt:P57|wdt:P1040|wdt:P58 ?resource. } UNION { wd:Q1687239 wdt:P57|wdt:P1040|wdt:P58 ?resource. } UNION { wd:Q35979475 wdt:P57|wdt:P1040|wdt:P58 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8377 kg:6065 ?resource . } UNION \",\n        \"{ kg:8377 kg:6122 ?resource . } UNION \",\n        \"{ kg:8377 kg:6973 ?resource . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { kg:8377 kg:6065 ?resource . } UNION { kg:8377 kg:6122 ?resource . } UNION { kg:8377 kg:6973 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P50 wd:Q379461 . } UNION \",\n      \"{ ?resource wdt:P50 wd:Q289697 . } UNION \",\n      \"{ ?resource wdt:P50 wd:Q317521 . } UNION \",\n      \"{ ?resource wdt:P50 wd:Q46152 . } UNION \",\n      \"{ ?resource wdt:P50 wd:Q38922 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P50 wd:Q379461 . } UNION { ?resource wdt:P50 wd:Q289697 . } UNION { ?resource wdt:P50 wd:Q317521 . } UNION { ?resource wdt:P50 wd:Q46152 . } UNION { ?resource wdt:P50 wd:Q38922 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q105315087"], ["wd:Q55881504"], ["wd:Q112280024"], ["wd:Q112298544"], ["wd:Q90901154"], ["wd:Q22988814"], ["wd:Q102129738"], ["wd:Q58191800"], ["wd:Q112278884"], ["wd:Q58191755"]], "gold": [true]}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q679023 wdt:P57 ?resource. } UNION \",\n      \"{ wd:Q679023 wdt:P58 ?resource. }\",\n      \"FILTER(?resource IN (wd:Q3772, wd:Q47284, wd:Q298255, wd:Q358714, wd:Q522057))\"\n    ]\n  }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { wd:Q679023 wdt:P57 ?resource. } UNION { wd:Q679023 wdt:P58 ?resource. } FILTER(?resource IN (wd:Q3772, wd:Q47284, wd:Q298255, wd:Q358714, wd:Q522057)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6456 kg:4381 kg:1364 . } UNION \",\n        \"{ kg:6928 kg:4381 kg:1364 . } UNION \",\n        \"{ kg:2428 kg:4381 kg:1364 . } UNION \",\n        \"{ kg:5433 kg:4381 kg:1364 . } UNION \",\n        \"{ kg:3272 kg:4381 kg:1364 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:6456 kg:4381 kg:1364 . } UNION { kg:6928 kg:4381 kg:1364 . } UNION { kg:2428 kg:4381 kg:1364 . } UNION { kg:5433 kg:4381 kg:1364 . } UNION { kg:3272 kg:4381 kg:1364 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P647 wd:Q193643 .\",\n        \"?film wdt:P58 wd:Q193643 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P647 wd:Q193643 .\",\n        \"?film wdt:P50 wd:Q193643 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P58 wd:Q193643 .\",\n        \"?film wdt:P50 wd:Q193643 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q2085381 .\",\n        \"?film wdt:P647 wd:Q193643 .\",\n        \"?film wdt:P58 wd:Q193643 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q2085381 . ?film wdt:P647 wd:Q193643 . ?film wdt:P58 wd:Q193643 . } UNION { ?film wdt:P31 wd:Q2085381 . ?film wdt:P647 wd:Q193643 . ?film wdt:P50 wd:Q193643 . } UNION { ?film wdt:P31 wd:Q2085381 . ?film wdt:P58 wd:Q193643 . ?film wdt:P50 wd:Q193643 . } UNION { ?film wdt:P31 wd:Q2085381 . ?film wdt:P647 wd:Q193643 . ?film wdt:P58 wd:Q193643 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P1040 wd:Q567519 .\",\n          \"?resource wdt:P58 wd:Q567519 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P1040 wd:Q686125 .\",\n          \"?resource wdt:P58 wd:Q686125 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P1040 wd:Q327427 .\",\n          \"?resource wdt:P58 wd:Q327427 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P1040 wd:Q2789885 .\",\n          \"?resource wdt:P58 wd:Q2789885 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P1040 wd:Q567519 . ?resource wdt:P58 wd:Q567519 . } UNION { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P1040 wd:Q686125 . ?resource wdt:P58 wd:Q686125 . } UNION { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P1040 wd:Q327427 . ?resource wdt:P58 wd:Q327427 . } UNION { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P1040 wd:Q2789885 . ?resource wdt:P58 wd:Q2789885 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:6212 kg:5732 . } UNION \",\n        \"{ ?resource kg:7497 kg:5732 . } UNION \",\n        \"{ ?resource kg:6212 kg:6262 . } UNION \",\n        \"{ ?resource kg:7497 kg:6262 . } UNION \",\n        \"{ ?resource kg:6212 kg:4507 . } UNION \",\n        \"{ ?resource kg:7497 kg:4507 . } UNION \",\n        \"{ ?resource kg:6212 kg:8984 . } UNION \",\n        \"{ ?resource kg:7497 kg:8984 . } UNION \",\n        \"{ ?resource kg:6212 kg:3199 . } UNION \",\n        \"{ ?resource kg:7497 kg:3199 . } UNION \",\n        \"{ ?resource kg:6212 kg:4313 . } UNION \",\n        \"{ ?resource kg:7497 kg:4313 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6212 kg:5732 . } UNION { ?resource kg:7497 kg:5732 . } UNION { ?resource kg:6212 kg:6262 . } UNION { ?resource kg:7497 kg:6262 . } UNION { ?resource kg:6212 kg:4507 . } UNION { ?resource kg:7497 kg:4507 . } UNION { ?resource kg:6212 kg:8984 . } UNION { ?resource kg:7497 kg:8984 . } UNION { ?resource kg:6212 kg:3199 . } UNION { ?resource kg:7497 kg:3199 . } UNION { ?resource kg:6212 kg:4313 . } UNION { ?resource kg:7497 kg:4313 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P57 dbr:Thomas_Schnauz.} UNION \",\n      \"{?resource wdt:P58 dbr:Thomas_Schnauz.} UNION \",\n      \"{?resource wdt:P57 dbr:Peter_Gould.} UNION \",\n      \"{?resource wdt:P58 dbr:Peter_Gould.} UNION \",\n      \"{?resource wdt:P57 dbr:George_Mastras.} UNION \",\n      \"{?resource wdt:P58 dbr:George_Mastras.} UNION \",\n      \"{?resource wdt:P57 dbr:Sam_Catlin.} UNION \",\n      \"{?resource wdt:P58 dbr:Sam_Catlin.} UNION \",\n      \"{?resource wdt:P57 dbr:Vince_Gilligan.} UNION \",\n      \"{?resource wdt:P58 dbr:Vince_Gilligan.}}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 dbr:Thomas_Schnauz.} UNION {?resource wdt:P58 dbr:Thomas_Schnauz.} UNION {?resource wdt:P57 dbr:Peter_Gould.} UNION {?resource wdt:P58 dbr:Peter_Gould.} UNION {?resource wdt:P57 dbr:George_Mastras.} UNION {?resource wdt:P58 dbr:George_Mastras.} UNION {?resource wdt:P57 dbr:Sam_Catlin.} UNION {?resource wdt:P58 dbr:Sam_Catlin.} UNION {?resource wdt:P57 dbr:Vince_Gilligan.} UNION {?resource wdt:P58 dbr:Vince_Gilligan.}} LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource wdt:P57 wd:Q4500 .}\",\n      \"{?resource wdt:P58 wd:Q15042700 .}\",\n      \"{?resource wdt:P57 wd:Q5542223 .}\",\n      \"{?resource wdt:P58 wd:Q7174311 .}\",\n      \"{?resource wdt:P57 wd:Q7407299 .}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q4500 .} {?resource wdt:P58 wd:Q15042700 .} {?resource wdt:P57 wd:Q5542223 .} {?resource wdt:P58 wd:Q7174311 .} {?resource wdt:P57 wd:Q7407299 .} } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q1079"]], "gold": [["wd:Q1079"]]}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:9048 kg:9478 .}\",\n        \"{?resource kg:9048 kg:0114 .}\",\n        \"{?resource kg:9048 kg:4893 .}\",\n        \"{?resource kg:9048 kg:1411 .}\",\n        \"{?resource kg:9048 kg:1187 .}\",\n        \"{?resource kg:7634 kg:9478 .}\",\n        \"{?resource kg:7634 kg:0114 .}\",\n        \"{?resource kg:7634 kg:4893 .}\",\n        \"{?resource kg:7634 kg:1411 .}\",\n        \"{?resource kg:7634 kg:1187 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:9048 kg:9478 .} {?resource kg:9048 kg:0114 .} {?resource kg:9048 kg:4893 .} {?resource kg:9048 kg:1411 .} {?resource kg:9048 kg:1187 .} {?resource kg:7634 kg:9478 .} {?resource kg:7634 kg:0114 .} {?resource kg:7634 kg:4893 .} {?resource kg:7634 kg:1411 .} {?resource kg:7634 kg:1187 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 ?director ;\",\n    \"          wdt:P58 ?writer ;\",\n    \"          wdt:P1040 ?editor .\",\n    \"{ ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21191270 } .\",\n    \"{ ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21191270 } .\",\n    \"{ ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21191270 } .\",\n    \"?director rdfs:label \\\"Ole John\\\"@en ;\",\n    \"          rdfs:label \\\"Jens Jørgen Thorsen\\\"@en ;\",\n    \"          rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"?writer rdfs:label \\\"Ole John\\\"@en ;\",\n    \"        rdfs:label \\\"Jens Jørgen Thorsen\\\"@en ;\",\n    \"        rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"?editor rdfs:label \\\"Ole John\\\"@en ;\",\n    \"        rdfs:label \\\"Jens Jørgen Thorsen\\\"@en ;\",\n    \"        rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 ?director ; wdt:P58 ?writer ; wdt:P1040 ?editor . { ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q21191270 } . { ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q21191270 } . { ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q21191270 } . ?director rdfs:label \"Ole John\"@en ; rdfs:label \"Jens Jørgen Thorsen\"@en ; rdfs:label \"Jørgen Leth\"@en . ?writer rdfs:label \"Ole John\"@en ; rdfs:label \"Jens Jørgen Thorsen\"@en ; rdfs:label \"Jørgen Leth\"@en . ?editor rdfs:label \"Ole John\"@en ; rdfs:label \"Jens Jørgen Thorsen\"@en ; rdfs:label \"Jørgen Leth\"@en . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q562108.} UNION \",\n        \"{?resource wdt:P58 wd:Q562108.} UNION \",\n        \"{?resource wdt:P1040 wd:Q562108.} UNION \",\n        \"{?resource wdt:P57 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P58 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?resource wdt:P57 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P58 wd:Q35979475.} UNION \",\n        \"{?resource wdt:P1040 wd:Q35979475.}\"\n      ]\n    }", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q562108.} UNION {?resource wdt:P58 wd:Q562108.} UNION {?resource wdt:P1040 wd:Q562108.} UNION {?resource wdt:P57 wd:Q1687239.} UNION {?resource wdt:P58 wd:Q1687239.} UNION {?resource wdt:P1040 wd:Q1687239.} UNION {?resource wdt:P57 wd:Q35979475.} UNION {?resource wdt:P58 wd:Q35979475.} UNION {?resource wdt:P1040 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:9462 kg:8696 .}\",\n        \"{?resource kg:1769 kg:8696 .}\",\n        \"{?resource kg:0104 kg:8696 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:9462 kg:8696 .} {?resource kg:1769 kg:8696 .} {?resource kg:0104 kg:8696 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q2405497;\",\n      \"wdt:P166 wd:Q18947;\",\n      \"wdt:P58 wd:Q18937.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P25 wd:Q18940;\",\n      \"wdt:P58 wd:Q18960.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q2405497;\",\n      \"wdt:P166 wd:Q18960.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q2405497;\",\n      \"wdt:P166 wd:Q18947.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q2405497;\",\n      \"wdt:P166 wd:Q18937.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q2405497;\",\n      \"wdt:P166 wd:Q18940.\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5; wdt:P106 wd:Q2405497; wdt:P166 wd:Q18947; wdt:P58 wd:Q18937. } { ?resource wdt:P25 wd:Q18940; wdt:P58 wd:Q18960. } { ?resource wdt:P31 wd:Q5; wdt:P106 wd:Q2405497; wdt:P166 wd:Q18960. } { ?resource wdt:P31 wd:Q5; wdt:P106 wd:Q2405497; wdt:P166 wd:Q18947. } { ?resource wdt:P31 wd:Q5; wdt:P106 wd:Q2405497; wdt:P166 wd:Q18937. } { ?resource wdt:P31 wd:Q5; wdt:P106 wd:Q2405497; wdt:P166 wd:Q18940. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P106 wd:Q7042855 .\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P1431 wd:Q165713 .\",\n      \"} UNION {\",\n        \"?resource wdt:P106 wd:Q7042855 .\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P1431 wd:Q193263 .\",\n      \"} UNION {\",\n        \"?resource wdt:P106 wd:Q7042855 .\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P1431 wd:Q193263 .\",\n      \"} UNION {\",\n        \"?resource wdt:P106 wd:Q7042855 .\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P1431 wd:Q193263 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P1431 wd:Q165713 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P1431 wd:Q193263 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P1431 wd:Q193263 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P31 wd:Q5 . ?resource wdt:P1431 wd:Q193263 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:3716 kg:2187 . } UNION \",\n        \"{ ?resource kg:0616 kg:1414 . } UNION \",\n        \"{ ?resource kg:6923 kg:1414 . } UNION \",\n        \"{ ?resource kg:0095 kg:1414 . } UNION \",\n        \"{ ?resource kg:9541 kg:4359 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3716 kg:2187 . } UNION { ?resource kg:0616 kg:1414 . } UNION { ?resource kg:6923 kg:1414 . } UNION { ?resource kg:0095 kg:1414 . } UNION { ?resource kg:9541 kg:4359 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P50 ?director . } UNION \",\n      \"{ ?resource wdt:P58 ?editor . } UNION \",\n      \"{ ?resource wdt:P170 ?writer . } \",\n      \"VALUES (?director) {(wd:Q3624966)}\",\n      \"VALUES (?editor) {(wd:Q3624966)}\",\n      \"VALUES (?writer) {(wd:Q3624966)}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P50 ?director . } UNION { ?resource wdt:P58 ?editor . } UNION { ?resource wdt:P170 ?writer . } VALUES (?director) {(wd:Q3624966)} VALUES (?editor) {(wd:Q3624966)} VALUES (?writer) {(wd:Q3624966)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q20729551 wdt:P57 wd:Q562108 . } UNION \",\n        \"{ wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION \",\n        \"{ wd:Q20729551 wdt:P58 wd:Q1687239 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q20729551 wdt:P57 wd:Q562108 . } UNION { wd:Q20729551 wdt:P1040 wd:Q35979475 . } UNION { wd:Q20729551 wdt:P58 wd:Q1687239 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:5271 kg:4575 . } UNION \",\n        \"{ ?resource kg:7843 kg:0625 . } UNION \",\n        \"{ ?resource kg:5415 kg:1073 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5271 kg:4575 . } UNION { ?resource kg:7843 kg:0625 . } UNION { ?resource kg:5415 kg:1073 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?writerCinematographer WHERE {\",\n      \"{\",\n        \"?writerCinematographer wdt:P31 wd:Q5 .\",\n        \"?writerCinematographer wdt:P2600 wd:Q478944 .\", \"?writerCinematographer wdt:P344 ?film1 .\",\n        \"?film1 wdt:P31 wd:Q11424 .\",\n        \"?film1 rdfs:label \\\"Anyone Lived in a Pretty How Town\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?writerCinematographer wdt:P31 wd:Q5 .\",\n        \"?writerCinematographer wdt:P2600 wd:Q478944 .\", \"?writerCinematographer wdt:P344 ?film2 .\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label \\\"Look at Life\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?writerCinematographer wdt:P31 wd:Q5 .\",\n        \"?writerCinematographer wdt:P2600 wd:Q478944 .\", \"?writerCinematographer wdt:P344 ?film3 .\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label \\\"Star Wars: Episode I – The Phantom Menace\\\"@en .\",\n      \"}\",\n      \"{\",\n        \"?writerCinematographer wdt:P31 wd:Q5 .\",\n        \"?writerCinematographer wdt:P2600 wd:Q478944 .\", \"?writerCinematographer wdt:P344 ?film4 .\",\n        \"?film4 wdt:P31 wd:Q11424 .\",\n        \"?film4 rdfs:label \\\"The Land Before Time\\\"@en .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writerCinematographer WHERE { { ?writerCinematographer wdt:P31 wd:Q5 . ?writerCinematographer wdt:P2600 wd:Q478944 . ?writerCinematographer wdt:P344 ?film1 . ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"Anyone Lived in a Pretty How Town\"@en . } { ?writerCinematographer wdt:P31 wd:Q5 . ?writerCinematographer wdt:P2600 wd:Q478944 . ?writerCinematographer wdt:P344 ?film2 . ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"Look at Life\"@en . } { ?writerCinematographer wdt:P31 wd:Q5 . ?writerCinematographer wdt:P2600 wd:Q478944 . ?writerCinematographer wdt:P344 ?film3 . ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label \"Star Wars: Episode I – The Phantom Menace\"@en . } { ?writerCinematographer wdt:P31 wd:Q5 . ?writerCinematographer wdt:P2600 wd:Q478944 . ?writerCinematographer wdt:P344 ?film4 . ?film4 wdt:P31 wd:Q11424 . ?film4 rdfs:label \"The Land Before Time\"@en . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P344 wd:Q613974 .\",\n          \"?resource wdt:P344 wd:Q208910 .\",\n          \"?resource wdt:P58 wd:Q1869678 .\",\n        \"} UNION {\",\n          \"?resource wdt:P344 wd:Q613974 .\",\n          \"?resource wdt:P344 wd:Q208910 .\",\n          \"?resource wdt:P58 wd:Q165713 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P344 wd:Q613974 . ?resource wdt:P344 wd:Q208910 . ?resource wdt:P58 wd:Q1869678 . } UNION { ?resource wdt:P344 wd:Q613974 . ?resource wdt:P344 wd:Q208910 . ?resource wdt:P58 wd:Q165713 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:3874 kg:9326 .\",\n          \"?resource kg:3874 kg:4082 .\",\n          \"?resource kg:1569 kg:2100 .\",\n          \"?resource kg:8975 kg:1639 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3874 kg:9326 . ?resource kg:3874 kg:4082 . ?resource kg:1569 kg:2100 . ?resource kg:8975 kg:1639 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?producer WHERE {\",\n    \"?producer wdt:P31 wd:Q5.\",\n    \"?producer wdt:P1040 wd:Q268799.\",\n    \"?producer wdt:P166 wd:Q268799.\",\n    \"?producer wdt:P58 wd:Q268799.\",\n    \"?producer wdt:P57 wd:Q268799.\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?producer WHERE { ?producer wdt:P31 wd:Q5. ?producer wdt:P1040 wd:Q268799. ?producer wdt:P166 wd:Q268799. ?producer wdt:P58 wd:Q268799. ?producer wdt:P57 wd:Q268799. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?producer WHERE {\",\n        \"{ wd:Q3282637 wdt:P1040 ?producer. } UNION \",\n        \"{ wd:Q3282637 wdt:P57 ?producer. } UNION \",\n        \"{ wd:Q3282637 wdt:P58 ?producer. } UNION \",\n        \"{ wd:Q1361018 wdt:P1431 ?producer. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?producer WHERE { { wd:Q3282637 wdt:P1040 ?producer. } UNION { wd:Q3282637 wdt:P57 ?producer. } UNION { wd:Q3282637 wdt:P58 ?producer. } UNION { wd:Q1361018 wdt:P1431 ?producer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q724172"]], "gold": [["wd:Q724172"]]}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1715 kg:6194 . } UNION \",\n        \"{ ?resource kg:3898 kg:2686 . } UNION \",\n        \"{ ?resource kg:4769 kg:2686 . } UNION \",\n        \"{ ?resource kg:3505 kg:2686 . } UNION \",\n        \"{ ?resource kg:4465 kg:2686 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1715 kg:6194 . } UNION { ?resource kg:3898 kg:2686 . } UNION { ?resource kg:4769 kg:2686 . } UNION { ?resource kg:3505 kg:2686 . } UNION { ?resource kg:4465 kg:2686 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q724172"]]}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P50 wd:Q6178969, wd:Q6178970, wd:Q6178971 .\",\n      \"?film wdt:P57 wd:Q6178969, wd:Q6178970, wd:Q6178971 .\",\n      \"?film wdt:P279* wd:Q34646 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P50 wd:Q6178969, wd:Q6178970, wd:Q6178971 . ?film wdt:P57 wd:Q6178969, wd:Q6178970, wd:Q6178971 . ?film wdt:P279* wd:Q34646 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{ wd:Q363666 wdt:P50 ?writer . } UNION \",\n      \"{ wd:Q363666 wdt:P57 ?director . } UNION \",\n      \"{ wd:Q363666 wdt:P1431 ?executiveProducer . }\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q363666 wdt:P50 ?writer . } UNION { wd:Q363666 wdt:P57 ?director . } UNION { wd:Q363666 wdt:P1431 ?executiveProducer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:5037 kg:6275 . } UNION \",\n        \"{ ?resource kg:2115 kg:6275 . } UNION \",\n        \"{ ?resource kg:6431 kg:6275 . }\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5037 kg:6275 . } UNION { ?resource kg:2115 kg:6275 . } UNION { ?resource kg:6431 kg:6275 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P50 wd:Q1237489 . } UNION \",\n      \"{ ?resource wdt:P162 wd:Q1237489 . } UNION \",\n      \"{ ?resource wdt:P57 wd:Q1237489 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P50 wd:Q1237489 . } UNION { ?resource wdt:P162 wd:Q1237489 . } UNION { ?resource wdt:P57 wd:Q1237489 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q363666 wdt:P50 ?writer . } UNION \",\n        \"{ wd:Q363666 wdt:P1431 ?executiveProducer . } UNION \",\n        \"{ wd:Q363666 wdt:P57 ?director . }\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q363666 wdt:P50 ?writer . } UNION { wd:Q363666 wdt:P1431 ?executiveProducer . } UNION { wd:Q363666 wdt:P57 ?director . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:P57 kg:Q497256 . } UNION \",\n        \"{ ?resource kg:P1431 kg:Q497256 . } UNION \",\n        \"{ ?resource kg:P58 kg:Q497256 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:P57 kg:Q497256 . } UNION { ?resource kg:P1431 kg:Q497256 . } UNION { ?resource kg:P58 kg:Q497256 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P57 wd:Q206984 ;\",\n    \"           wdt:P58 wd:Q206984 ;\",\n    \"           wdt:P68 wd:Q206984 .\",\n    \"  ?resource wdt:P162 wd:Q379244 ;\",\n    \"           wdt:P162 wd:Q5374949 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P57 wd:Q206984 ; wdt:P58 wd:Q206984 ; wdt:P68 wd:Q206984 . ?resource wdt:P162 wd:Q379244 ; wdt:P162 wd:Q5374949 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2085 wdt:P57 ?writer . } UNION \",\n        \"{ wd:Q1431 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q1431 wdt:P162 ?producer . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2085 wdt:P57 ?writer . } UNION { wd:Q1431 wdt:P57 ?director . } UNION { wd:Q1431 wdt:P162 ?producer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:5715 kg:6937 .\",\n          \"?resource kg:5715 kg:6667 .\",\n          \"?resource kg:8419 kg:6667 .\",\n          \"?resource kg:7564 kg:6779 .\",\n          \"?resource kg:7564 kg:6807 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5715 kg:6937 . ?resource kg:5715 kg:6667 . ?resource kg:8419 kg:6667 . ?resource kg:7564 kg:6779 . ?resource kg:7564 kg:6807 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"{ ?film wdt:P57 ?director . } UNION { ?film wdt:P58 ?writer . }\",\n    \"VALUES ?directorWriter { wd:Q1342690 wd:Q311419 wd:Q1342690 wd:Q719099 wd:Q135819 }\",\n    \"{ ?film wdt:P57 ?directorWriter . } UNION { ?film wdt:P58 ?directorWriter . }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P57 ?director . } UNION { ?film wdt:P58 ?writer . } VALUES ?directorWriter { wd:Q1342690 wd:Q311419 wd:Q1342690 wd:Q719099 wd:Q135819 } { ?film wdt:P57 ?directorWriter . } UNION { ?film wdt:P58 ?directorWriter . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P31 wd:Q11424.}\",\n        \"UNION\",\n        \"{?film wdt:P57 wd:Q7546.}\",\n        \"UNION\",\n        \"{?film wdt:P58 wd:Q982339.}\",\n        \"UNION\",\n        \"{?film wdt:P50 wd:Q1033656.}\",\n        \"UNION\",\n        \"{?film wdt:P57 wd:Q116760.}\",\n        \"UNION\",\n        \"{?film wdt:P58 wd:Q1365463.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film wdt:P31 wd:Q11424.} UNION {?film wdt:P57 wd:Q7546.} UNION {?film wdt:P58 wd:Q982339.} UNION {?film wdt:P50 wd:Q1033656.} UNION {?film wdt:P57 wd:Q116760.} UNION {?film wdt:P58 wd:Q1365463.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:7292 kg:7158 . } UNION \",\n        \"{ ?film kg:7292 kg:4032 . } UNION \",\n        \"{ ?film kg:7292 kg:6160 . } UNION \",\n        \"{ ?film kg:7292 kg:5061 . } UNION \",\n        \"{ ?film kg:7292 kg:8025 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:7292 kg:7158 . } UNION { ?film kg:7292 kg:4032 . } UNION { ?film kg:7292 kg:6160 . } UNION { ?film kg:7292 kg:5061 . } UNION { ?film kg:7292 kg:8025 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P31 wd:Q5.\",\n    \"{\",\n      \"?film wdt:P86 wd:Q207499; wdt:P162 ?composer. # Spy Kids 3-D: Game Over composer\",\n      \"?film wdt:P57 wd:Q207499; wdt:P58 ?composer. # Spy Kids 3-D: Game Over director\",\n    \"} UNION {\",\n      \"?film wdt:P86 wd:Q1340067; wdt:P2554 ?composer. # Sin City cinematographer\",\n      \"?film wdt:P952 wd:Q1340067; wdt:P58 ?composer. # Sin City director\",\n    \"} UNION {\",\n      \"?film wdt:P86 wd:Q15230958; wdt:P2554 ?composer. # Sin City: A Dame to Kill For cinematographer\",\n      \"?film wdt:P7936 wd:Q15230958; wdt:P58 ?composer. # Sin City: A Dame to Kill For director\",\n    \"} UNION {\",\n      \"?film wdt:P86 wd:Q1461795; wdt:P58 ?composer. # The Adventures of Sharkboy and Lavagirl in 3-D director\",\n    \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5. { ?film wdt:P86 wd:Q207499; wdt:P162 ?composer. ?film wdt:P57 wd:Q207499; wdt:P58 ?composer. } UNION { ?film wdt:P86 wd:Q1340067; wdt:P2554 ?composer. ?film wdt:P952 wd:Q1340067; wdt:P58 ?composer. } UNION { ?film wdt:P86 wd:Q15230958; wdt:P2554 ?composer. ?film wdt:P7936 wd:Q15230958; wdt:P58 ?composer. } UNION { ?film wdt:P86 wd:Q1461795; wdt:P58 ?composer. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q1653396 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION \",\n      \"{ wd:Q204629 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION \",\n      \"{ wd:Q301684 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION \",\n      \"{ wd:Q295609 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1653396 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION { wd:Q204629 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION { wd:Q301684 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } UNION { wd:Q295609 wdt:P175|wdt:P57|wdt:P58|wdt:P86 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q207676"], ["wd:Q47284"], ["wd:Q611586"]], "gold": [true]}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:7469 kg:8123 . } UNION \",\n        \"{ ?resource kg:9896 kg:8123 . } UNION \",\n        \"{ ?resource kg:8021 kg:8123 . } UNION \",\n        \"{ ?resource kg:7469 kg:1324 . } UNION \",\n        \"{ ?resource kg:9896 kg:1324 . } UNION \",\n        \"{ ?resource kg:8021 kg:1324 . } UNION \",\n        \"{ ?resource kg:7469 kg:7836 . } UNION \",\n        \"{ ?resource kg:9896 kg:7836 . } UNION \",\n        \"{ ?resource kg:8021 kg:7836 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7469 kg:8123 . } UNION { ?resource kg:9896 kg:8123 . } UNION { ?resource kg:8021 kg:8123 . } UNION { ?resource kg:7469 kg:1324 . } UNION { ?resource kg:9896 kg:1324 . } UNION { ?resource kg:8021 kg:1324 . } UNION { ?resource kg:7469 kg:7836 . } UNION { ?resource kg:9896 kg:7836 . } UNION { ?resource kg:8021 kg:7836 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?composer WHERE {\",\n    \"{\",\n      \"?composer wdt:P31 wd:Q5 .\",\n      \"?composer wdt:P800 wd:Q249677 .\",\n      \"?composer wdt:P800 wd:Q249678 .\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5 .\",\n      \"?composer wdt:P58 ?filmEditorStar .\",\n      \"?filmEditorStar wdt:P31 wd:Q249679 .\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5 .\",\n      \"?composer wdt:P58 ?filmEditorStar .\",\n      \"?filmEditorStar wdt:P31 wd:Q249670 .\",\n    \"} UNION {\",\n      \"?composer wdt:P31 wd:Q5 .\",\n      \"?composer wdt:P58 ?filmEditorStar .\",\n      \"?filmEditorStar wdt:P31 wd:Q249671 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?composer WHERE { { ?composer wdt:P31 wd:Q5 . ?composer wdt:P800 wd:Q249677 . ?composer wdt:P800 wd:Q249678 . } UNION { ?composer wdt:P31 wd:Q5 . ?composer wdt:P58 ?filmEditorStar . ?filmEditorStar wdt:P31 wd:Q249679 . } UNION { ?composer wdt:P31 wd:Q5 . ?composer wdt:P58 ?filmEditorStar . ?filmEditorStar wdt:P31 wd:Q249670 . } UNION { ?composer wdt:P31 wd:Q5 . ?composer wdt:P58 ?filmEditorStar . ?filmEditorStar wdt:P31 wd:Q249671 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q3986814 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q238211 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q199039 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q470895 wdt:P86 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q3986814 wdt:P161 ?resource. } UNION { wd:Q238211 wdt:P1040 ?resource. } UNION { wd:Q45602 wdt:P1040 ?resource. } UNION { wd:Q199039 wdt:P86 ?resource. } UNION { wd:Q470895 wdt:P86 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q235313"], ["wd:Q882"], ["wd:Q1383202"], ["wd:Q153292"]], "gold": [true]}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:4883 kg:2240 .\",\n          \"?resource kg:4883 kg:9905 .\",\n          \"?resource kg:6431 kg:6301 .\",\n          \"?resource kg:6431 kg:3454 .\",\n          \"?resource kg:6431 kg:9197 .\",\n        \"} UNION {\",\n          \"?resource kg:8510 kg:2240 .\",\n          \"?resource kg:8510 kg:9905 .\",\n          \"?resource kg:6431 kg:6301 .\",\n          \"?resource kg:6431 kg:3454 .\",\n          \"?resource kg:6431 kg:9197 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4883 kg:2240 . ?resource kg:4883 kg:9905 . ?resource kg:6431 kg:6301 . ?resource kg:6431 kg:3454 . ?resource kg:6431 kg:9197 . } UNION { ?resource kg:8510 kg:2240 . ?resource kg:8510 kg:9905 . ?resource kg:6431 kg:6301 . ?resource kg:6431 kg:3454 . ?resource kg:6431 kg:9197 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P57 wd:Q609899 .\",\n          \"?film wdt:P58 wd:Q609899 .\",\n          \"?film wdt:P3320 wd:Q609899 .\",\n        \"} UNION {\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P57 wd:Q610000 .\",\n          \"?film wdt:P58 wd:Q610000 .\",\n          \"?film wdt:P3320 wd:Q610000 .\",\n        \"} UNION {\",\n          \"?film wdt:P31 wd:Q11424 .\",\n          \"?film wdt:P57 wd:Q610008 .\",\n          \"?film wdt:P58 wd:Q610008 .\",\n          \"?film wdt:P3320 wd:Q610008 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q609899 . ?film wdt:P58 wd:Q609899 . ?film wdt:P3320 wd:Q609899 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q610000 . ?film wdt:P58 wd:Q610000 . ?film wdt:P3320 wd:Q610000 . } UNION { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q610008 . ?film wdt:P58 wd:Q610008 . ?film wdt:P3320 wd:Q610008 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ wd:Q448604 wdt:P1431 ?film . } UNION \",\n        \"{ wd:Q363666 wdt:P1431 ?film . } UNION \",\n        \"{ wd:Q452794 wdt:P1431 ?film . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { wd:Q448604 wdt:P1431 ?film . } UNION { wd:Q363666 wdt:P1431 ?film . } UNION { wd:Q452794 wdt:P1431 ?film . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:6282 kg:6837 . } UNION \",\n        \"{ ?film kg:6106 kg:6837 . } UNION \",\n        \"{ ?film kg:54 kg:6837 . } UNION \",\n        \"{ ?film kg:6282 kg:8970 . } UNION \",\n        \"{ ?film kg:6106 kg:8970 . } UNION \",\n        \"{ ?film kg:54 kg:8970 . } UNION \",\n        \"{ ?film kg:6282 kg:6390 . } UNION \",\n        \"{ ?film kg:6106 kg:6390 . } UNION \",\n        \"{ ?film kg:54 kg:6390 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:6282 kg:6837 . } UNION { ?film kg:6106 kg:6837 . } UNION { ?film kg:54 kg:6837 . } UNION { ?film kg:6282 kg:8970 . } UNION { ?film kg:6106 kg:8970 . } UNION { ?film kg:54 kg:8970 . } UNION { ?film kg:6282 kg:6390 . } UNION { ?film kg:6106 kg:6390 . } UNION { ?film kg:54 kg:6390 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{ ?resource wdt:P57 ?director . } UNION \",\n    \"{ ?resource wdt:P58 ?writer . } UNION \",\n    \"{ ?resource wdt:P1040 ?editor . } \",\n    \"VALUES (?director ?writer ?editor) {\",\n    \"(wd:Q12345678 wd:Q87654321 wd:Q98765432)\",\n    \"(wd:Q12345678 wd:Q87654321 wd:Q98765432) \",\n    \"(wd:Q12345678 wd:Q87654321 wd:Q98765432) \",\n    \"(wd:Q12345678 wd:Q87654321 wd:Q98765432)\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 ?director . } UNION { ?resource wdt:P58 ?writer . } UNION { ?resource wdt:P1040 ?editor . } VALUES (?director ?writer ?editor) { (wd:Q12345678 wd:Q87654321 wd:Q98765432) (wd:Q12345678 wd:Q87654321 wd:Q98765432) (wd:Q12345678 wd:Q87654321 wd:Q98765432) (wd:Q12345678 wd:Q87654321 wd:Q98765432) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q74535"]]}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P57 wd:Q5836844.} UNION \",\n        \"{?resource wdt:P1040 wd:Q5836844.} UNION \",\n        \"{?resource wdt:P58 wd:Q5836844.} UNION \",\n        \"{?resource wdt:P57 wd:Q5658534.} UNION \",\n        \"{?resource wdt:P1040 wd:Q5658534.} UNION \",\n        \"{?resource wdt:P58 wd:Q5658534.} UNION \",\n        \"{?resource wdt:P57 wd:Q4022902.} UNION \",\n        \"{?resource wdt:P1040 wd:Q4022902.} UNION \",\n        \"{?resource wdt:P58 wd:Q4022902.} UNION \",\n        \"{?resource wdt:P57 wd:Q4023328.} UNION \",\n        \"{?resource wdt:P1040 wd:Q4023328.} UNION \",\n        \"{?resource wdt:P58 wd:Q4023328.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P57 wd:Q5836844.} UNION {?resource wdt:P1040 wd:Q5836844.} UNION {?resource wdt:P58 wd:Q5836844.} UNION {?resource wdt:P57 wd:Q5658534.} UNION {?resource wdt:P1040 wd:Q5658534.} UNION {?resource wdt:P58 wd:Q5658534.} UNION {?resource wdt:P57 wd:Q4022902.} UNION {?resource wdt:P1040 wd:Q4022902.} UNION {?resource wdt:P58 wd:Q4022902.} UNION {?resource wdt:P57 wd:Q4023328.} UNION {?resource wdt:P1040 wd:Q4023328.} UNION {?resource wdt:P58 wd:Q4023328.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:0443 kg:4619.} UNION \",\n        \"{?resource kg:0706 kg:4619.} UNION \",\n        \"{?resource kg:0443 kg:6471.} UNION \",\n        \"{?resource kg:0706 kg:6471.} UNION \",\n        \"{?resource kg:0443 kg:7010.} UNION \",\n        \"{?resource kg:0706 kg:7010.} UNION \",\n        \"{?resource kg:0443 kg:2377.} UNION \",\n        \"{?resource kg:0706 kg:2377.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:0443 kg:4619.} UNION {?resource kg:0706 kg:4619.} UNION {?resource kg:0443 kg:6471.} UNION {?resource kg:0706 kg:6471.} UNION {?resource kg:0443 kg:7010.} UNION {?resource kg:0706 kg:7010.} UNION {?resource kg:0443 kg:2377.} UNION {?resource kg:0706 kg:2377.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?editor WHERE {\",\n    \"?editor wdt:P31 wd:Q5 .\",\n    \"{ ?film wdt:P647 ?editor ; wdt:P31 wd:Q11424 . } UNION \",\n    \"{ ?film wdt:P809 ?editor ; wdt:P31 wd:Q11424 . } UNION \",\n    \"{ ?film wdt:P58 ?editor ; wdt:P31 wd:Q11424 . }\",\n    \"VALUES ?film { wd:Q7192069 wd:Q1214556 wd:Q13415917 }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?editor WHERE { ?editor wdt:P31 wd:Q5 . { ?film wdt:P647 ?editor ; wdt:P31 wd:Q11424 . } UNION { ?film wdt:P809 ?editor ; wdt:P31 wd:Q11424 . } UNION { ?film wdt:P58 ?editor ; wdt:P31 wd:Q11424 . } VALUES ?film { wd:Q7192069 wd:Q1214556 wd:Q13415917 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P1040 wd:Q483197 .\",\n          \"?resource wdt:P1431 wd:Q483197 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P1040 wd:Q484679 .\",\n          \"?resource wdt:P1431 wd:Q484679 .\",\n        \"} UNION {\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P1040 wd:Q13471372 .\",\n          \"?resource wdt:P1431 wd:Q13471372 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P1040 wd:Q483197 . ?resource wdt:P1431 wd:Q483197 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P1040 wd:Q484679 . ?resource wdt:P1431 wd:Q484679 . } UNION { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P1040 wd:Q13471372 . ?resource wdt:P1431 wd:Q13471372 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:P106 kg:Q7042855 . } UNION \",\n        \"{ ?resource kg:P1040 kg:Q13471372 . } UNION \",\n        \"{ ?resource kg:P1040 kg:Q483197 . } UNION \",\n        \"{ ?resource kg:P1040 kg:Q484679 . } UNION \",\n        \"{ ?resource kg:P1431 kg:Q13471372 . } UNION \",\n        \"{ ?resource kg:P1431 kg:Q483197 . } UNION \",\n        \"{ ?resource kg:P1431 kg:Q484679 . } UNION \",\n        \"{ ?resource kg:P58 kg:Q13471372 . } UNION \",\n        \"{ ?resource kg:P58 kg:Q483197 . } UNION \",\n        \"{ ?resource kg:P58 kg:Q484679 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:P106 kg:Q7042855 . } UNION { ?resource kg:P1040 kg:Q13471372 . } UNION { ?resource kg:P1040 kg:Q483197 . } UNION { ?resource kg:P1040 kg:Q484679 . } UNION { ?resource kg:P1431 kg:Q13471372 . } UNION { ?resource kg:P1431 kg:Q483197 . } UNION { ?resource kg:P1431 kg:Q484679 . } UNION { ?resource kg:P58 kg:Q13471372 . } UNION { ?resource kg:P58 kg:Q483197 . } UNION { ?resource kg:P58 kg:Q484679 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P57 wd:Q10869583 .\",\n        \"?film wdt:P58 wd:Q10869583 .\",\n        \"?film wdt:P50 wd:Q10869583 .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label ?label .\",\n        \"FILTER (STR(?label) = 'Fate' || STR(?label) = 'The Confession' || STR(?label) = 'The Waiting Room')\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q10869583 . ?film wdt:P58 wd:Q10869583 . ?film wdt:P50 wd:Q10869583 . } UNION { ?film wdt:P31 wd:Q11424 . ?film rdfs:label ?label . FILTER (STR(?label) = 'Fate' || STR(?label) = 'The Confession' || STR(?label) = 'The Waiting Room') } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q26824681"], ["wd:Q85760617"], ["wd:Q12813010"], ["wd:Q13571650"], ["wd:Q1168425"], ["wd:Q20076435"], ["wd:Q4101101"], ["wd:Q22682186"], ["wd:Q4204171"], ["wd:Q1754723"], ["wd:Q30601448"], ["wd:Q7773233"], ["wd:Q7773234"], ["wd:Q7773232"], ["wd:Q68548877"], ["wd:Q124758343"], ["wd:Q105960261"], ["wd:Q66317869"], ["wd:Q5437364"], ["wd:Q28940157"], ["wd:Q5437360"], ["wd:Q6084069"]], "gold": [true]}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film wdt:P1431 wd:Q6084069 . } UNION \",\n        \"{ ?film wdt:P1431 wd:Q12813010 . } UNION \",\n        \"{ ?film wdt:P1431 wd:Q5437360 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P1431 wd:Q6084069 . } UNION { ?film wdt:P1431 wd:Q12813010 . } UNION { ?film wdt:P1431 wd:Q5437360 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2731 kg:3720 . } UNION \",\n        \"{ ?resource kg:6509 kg:8941 . } UNION \",\n        \"{ ?resource kg:1427 kg:4674 . } UNION \",\n        \"{ ?resource kg:1114 kg:3720 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2731 kg:3720 . } UNION { ?resource kg:6509 kg:8941 . } UNION { ?resource kg:1427 kg:4674 . } UNION { ?resource kg:1114 kg:3720 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 wd:Q94787 .\",\n    \"?resource wdt:P39 wd:Q108705 .\",\n    \"?resource wdt:P50 wd:Q1683419, wd:Q162227, wd:Q1683420 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q94787 . ?resource wdt:P39 wd:Q108705 . ?resource wdt:P50 wd:Q1683419, wd:Q162227, wd:Q1683420 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q63993096 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q2298257 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q2493884 wdt:P1040 ?resource. }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q63993096 wdt:P1040 ?resource. } UNION { wd:Q2298257 wdt:P1040 ?resource. } UNION { wd:Q2493884 wdt:P1040 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:1581 kg:0379 ?resource . } UNION \",\n        \"{ kg:1569 kg:0379 ?resource . } UNION \",\n        \"{ kg:8834 kg:0379 ?resource . } UNION \",\n        \"{ kg:1581 kg:5008 ?resource . } UNION \",\n        \"{ kg:1569 kg:5008 ?resource . } UNION \",\n        \"{ kg:8834 kg:5008 ?resource . } UNION \",\n        \"{ kg:1572 kg:0109 ?resource . } UNION \",\n        \"{ kg:6541 kg:3558 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:1581 kg:0379 ?resource . } UNION { kg:1569 kg:0379 ?resource . } UNION { kg:8834 kg:0379 ?resource . } UNION { kg:1581 kg:5008 ?resource . } UNION { kg:1569 kg:5008 ?resource . } UNION { kg:8834 kg:5008 ?resource . } UNION { kg:1572 kg:0109 ?resource . } UNION { kg:6541 kg:3558 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P279* wd:Q4867489 .\",\n          \"?resource wdt:P50 wd:Q1065904, wd:Q1063901 .\",\n          \"?resource wdt:P161 wd:Q1065904, wd:Q1063901 .\",\n          \"?resource wdt:P86 wd:Q1065904, wd:Q1063901 .\",\n          \"?resource wdt:P279* wd:Q1065904, wd:Q1063901 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P279* wd:Q4867489 . ?resource wdt:P50 wd:Q1065904, wd:Q1063901 . ?resource wdt:P161 wd:Q1065904, wd:Q1063901 . ?resource wdt:P86 wd:Q1065904, wd:Q1063901 . ?resource wdt:P279* wd:Q1065904, wd:Q1063901 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q166739 wdt:P57 ?writer . } UNION \",\n      \"{ wd:Q109116 wdt:P161 ?star . } UNION \",\n      \"{ wd:Q109116 wdt:P58 ?director . } UNION \",\n      \"{ wd:Q109116 wdt:P86 ?composer . }\",\n      \"wd:Q1140317 wdt:P57 ?resource .\",\n      \"FILTER (?writer = ?star && ?star = ?director && ?director = ?composer && ?composer = ?resource) \",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q166739 wdt:P57 ?writer . } UNION { wd:Q109116 wdt:P161 ?star . } UNION { wd:Q109116 wdt:P58 ?director . } UNION { wd:Q109116 wdt:P86 ?composer . } wd:Q1140317 wdt:P57 ?resource . FILTER (?writer = ?star && ?star = ?director && ?director = ?composer && ?composer = ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9331 kg:0717 .\",\n          \"?resource kg:2672 kg:4662 .\",\n          \"?resource kg:1821 kg:4662 .\",\n          \"?resource kg:5380 kg:4662 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9331 kg:0717 . ?resource kg:2672 kg:4662 . ?resource kg:1821 kg:4662 . ?resource kg:5380 kg:4662 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P106 wd:Q2405480, wd:Q36180, wd:Q793092, wd:Q108705, wd:Q21191270 .\",\n    \"?resource p:P1667 ?statement .\",\n    \"?statement ps:P1667 wd:Q487350, wd:Q1168079 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480, wd:Q36180, wd:Q793092, wd:Q108705, wd:Q21191270 . ?resource p:P1667 ?statement . ?statement ps:P1667 wd:Q487350, wd:Q1168079 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P344 wd:Q192115 .\",\n        \"?resource wdt:P57 wd:Q1165050 .\",\n        \"?resource wdt:P161 wd:Q1165050 .\",\n      \"} UNION {\",\n        \"?resource wdt:P344 wd:Q192115 .\",\n        \"?resource wdt:P57 wd:Q1165050 .\",\n        \"?resource wdt:P1040 wd:Q188473 .\",\n      \"} UNION {\",\n        \"?resource wdt:P25 wd:Q192115 .\",\n        \"?resource wdt:P57 wd:Q1165050 .\",\n        \"?resource wdt:P58 wd:Q1165050 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P344 wd:Q192115 . ?resource wdt:P57 wd:Q1165050 . ?resource wdt:P161 wd:Q1165050 . } UNION { ?resource wdt:P344 wd:Q192115 . ?resource wdt:P57 wd:Q1165050 . ?resource wdt:P1040 wd:Q188473 . } UNION { ?resource wdt:P25 wd:Q192115 . ?resource wdt:P57 wd:Q1165050 . ?resource wdt:P58 wd:Q1165050 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:6918 kg:2044 .\",\n          \"?resource kg:3755 <http://www.wikidata.org/entity/Q1165050> .\",\n          \"?resource kg:8142 <http://www.wikidata.org/entity/Q192115> .\",\n        \"} UNION {\",\n          \"?resource kg:3755 <http://www.wikidata.org/entity/Q1065889> .\",\n          \"?resource kg:8142 <http://www.wikidata.org/entity/Q192115> .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:6918 kg:2044 . ?resource kg:3755 wd:Q1165050 . ?resource kg:8142 wd:Q192115 . } UNION { ?resource kg:3755 wd:Q1065889 . ?resource kg:8142 wd:Q192115 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"{ ?resource wdt:P106 wd:Q2405480 } UNION { ?resource wdt:P106 wd:Q967263 } .\",\n      \"?resource p:P161/ps:P161 ?film .\",\n      \"{ ?film wdt:P31 wd:Q11424 . FILTER(?film IN (wd:Q50897, wd:Q175375, wd:Q175375, wd:Q668341)) } UNION\",\n      \"{ ?resource p:P2559/ps:P2559 ?film . FILTER(?film IN (wd:Q20756106)) } UNION\",\n      \"{ ?resource wdt:P8341 wd:Q20756106 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . { ?resource wdt:P106 wd:Q2405480 } UNION { ?resource wdt:P106 wd:Q967263 } . ?resource p:P161/ps:P161 ?film . { ?film wdt:P31 wd:Q11424 . FILTER(?film IN (wd:Q50897, wd:Q175375, wd:Q175375, wd:Q668341)) } UNION { ?resource p:P2559/ps:P2559 ?film . FILTER(?film IN (wd:Q20756106)) } UNION { ?resource wdt:P8341 wd:Q20756106 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ ?resource wdt:P161 wd:Q2082586 . } UNION \",\n      \"{ ?resource wdt:P179 wd:Q2082586 . } UNION \",\n      \"{ ?resource wdt:P344 wd:Q2082586 . } UNION \",\n      \"{ ?resource wdt:P161 wd:Q730888 . } UNION \",\n      \"{ ?resource wdt:P197 wd:Q730888 . } UNION \",\n      \"{ ?resource wdt:P344 wd:Q730888 . } UNION \",\n      \"{ ?resource wdt:P161 wd:Q205447 . } UNION \",\n      \"{ ?resource wdt:P197 wd:Q205447 . } UNION \",\n      \"{ ?resource wdt:P344 wd:Q205447 . } UNION \",\n      \"{ ?resource wdt:P161 wd:Q1432710 . } UNION \",\n      \"{ ?resource wdt:P197 wd:Q1432710 . } UNION \",\n      \"{ ?resource wdt:P344 wd:Q1432710 . } UNION \",\n      \"{ ?resource wdt:P161 wd:Q17893055 . } UNION \",\n      \"{ ?resource wdt:P1040 wd:Q17893055 . } UNION \",\n      \"{ ?resource wdt:P1431 wd:Q17893055 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P161 wd:Q2082586 . } UNION { ?resource wdt:P179 wd:Q2082586 . } UNION { ?resource wdt:P344 wd:Q2082586 . } UNION { ?resource wdt:P161 wd:Q730888 . } UNION { ?resource wdt:P197 wd:Q730888 . } UNION { ?resource wdt:P344 wd:Q730888 . } UNION { ?resource wdt:P161 wd:Q205447 . } UNION { ?resource wdt:P197 wd:Q205447 . } UNION { ?resource wdt:P344 wd:Q205447 . } UNION { ?resource wdt:P161 wd:Q1432710 . } UNION { ?resource wdt:P197 wd:Q1432710 . } UNION { ?resource wdt:P344 wd:Q1432710 . } UNION { ?resource wdt:P161 wd:Q17893055 . } UNION { ?resource wdt:P1040 wd:Q17893055 . } UNION { ?resource wdt:P1431 wd:Q17893055 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0792 kg:8692 .\",\n          \"?resource kg:0792 kg:0268 .\",\n          \"?resource kg:0792 kg:8110 .\",\n          \"?resource kg:0792 kg:8430 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:7537 kg:6465 .\",\n          \"?resource kg:7135 kg:6465 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:0792 kg:8692 . ?resource kg:0792 kg:0268 . ?resource kg:0792 kg:8110 . ?resource kg:0792 kg:8430 . } { ?resource kg:7537 kg:6465 . ?resource kg:7135 kg:6465 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P496 wd:Q2078509 .\",\n    \"?resource wdt:P58 wd:Q2078509 .\",\n    \"?resource p:P3320 ?statement1 .\",\n    \"?statement1 ps:P3320 wd:Q64016799 .\",\n    \"?resource p:P3320 ?statement2 .\",\n    \"?statement2 ps:P3320 wd:Q58696 .\",\n    \"?resource p:P3320 ?statement3 .\",\n    \"?statement3 ps:P3320 wd:Q174888 .\",\n    \"?resource p:P3320 ?statement4 .\",\n    \"?statement4 ps:P3320 wd:Q59646 .\",\n    \"?resource p:P3320 ?statement5 .\",\n    \"?statement5 ps:P3320 wd:Q178276 .\",\n    \"?resource p:P3320 ?statement6 .\",\n    \"?statement6 ps:P3320 wd:Q4983911 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P496 wd:Q2078509 . ?resource wdt:P58 wd:Q2078509 . ?resource p:P3320 ?statement1 . ?statement1 ps:P3320 wd:Q64016799 . ?resource p:P3320 ?statement2 . ?statement2 ps:P3320 wd:Q58696 . ?resource p:P3320 ?statement3 . ?statement3 ps:P3320 wd:Q174888 . ?resource p:P3320 ?statement4 . ?statement4 ps:P3320 wd:Q59646 . ?resource p:P3320 ?statement5 . ?statement5 ps:P3320 wd:Q178276 . ?resource p:P3320 ?statement6 . ?statement6 ps:P3320 wd:Q4983911 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q56756907 wdt:P161 ?cinematographer. } UNION \",\n      \"{ wd:Q3641257 wdt:P161 ?editor. } UNION \",\n      \"{ wd:Q862058 wdt:P161 ?resource. } UNION \",\n      \"{ wd:Q114819 wdt:P161 ?resource. } UNION \",\n      \"{ wd:Q2085 wdt:P161 ?resource. } UNION \",\n      \"{ wd:Q507285 wdt:P161 ?resource. }\",\n      \"?cinematographer wdt:P344 ?editor.\",\n      \"?editor wdt:P193 ?resource.\",\n      \"?resource wdt:P1040 wd:Q3485595.}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q56756907 wdt:P161 ?cinematographer. } UNION { wd:Q3641257 wdt:P161 ?editor. } UNION { wd:Q862058 wdt:P161 ?resource. } UNION { wd:Q114819 wdt:P161 ?resource. } UNION { wd:Q2085 wdt:P161 ?resource. } UNION { wd:Q507285 wdt:P161 ?resource. } ?cinematographer wdt:P344 ?editor. ?editor wdt:P193 ?resource. ?resource wdt:P1040 wd:Q3485595.} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4842 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:0716 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:2890 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:8977 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:5162 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:5245 kg:4756 ?cinematographer . } UNION \",\n        \"{ kg:5876 kg:4756 ?cinematographer . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4842 kg:4756 ?cinematographer . } UNION { kg:0716 kg:4756 ?cinematographer . } UNION { kg:2890 kg:4756 ?cinematographer . } UNION { kg:8977 kg:4756 ?cinematographer . } UNION { kg:5162 kg:4756 ?cinematographer . } UNION { kg:5245 kg:4756 ?cinematographer . } UNION { kg:5876 kg:4756 ?cinematographer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 wd:Q296477 .\",\n    \"?resource wdt:P26 wd:Q296477 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q296477 . ?resource wdt:P26 wd:Q296477 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q312258 wdt:P737 ?influenced. } UNION { wd:Q312258 wdt:P26 ?married. }\",\n        \"?resource wdt:P57 wd:Q2493884 ; wdt:P57 wd:Q2298257 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q312258 wdt:P737 ?influenced. } UNION { wd:Q312258 wdt:P26 ?married. } ?resource wdt:P57 wd:Q2493884 ; wdt:P57 wd:Q2298257 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0593 kg:7981 .\",\n          \"?resource kg:6829 kg:2587 .\",\n          \"?resource kg:8758 kg:7981 .\",\n        \"} UNION {\",\n          \"?resource kg:0593 kg:7981 .\",\n          \"?resource kg:6829 kg:2587 .\",\n          \"?resource kg:4612 kg:7981 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0593 kg:7981 . ?resource kg:6829 kg:2587 . ?resource kg:8758 kg:7981 . } UNION { ?resource kg:0593 kg:7981 . ?resource kg:6829 kg:2587 . ?resource kg:4612 kg:7981 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P279* wd:Q608438 .\",\n    \"?resource wdt:P39 wd:Q15849267 .\",\n    \"?resource wdt:P39 wd:Q15849268 .\",\n    \"?resource wdt:P39 wd:Q1030109 .\",\n    \"?resource wdt:P50 wd:Q17319447 .\",\n    \"?resource wdt:P50 wd:Q26858780 .\",\n    \"?resource wdt:P50 wd:Q26858781 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P279* wd:Q608438 . ?resource wdt:P39 wd:Q15849267 . ?resource wdt:P39 wd:Q15849268 . ?resource wdt:P39 wd:Q1030109 . ?resource wdt:P50 wd:Q17319447 . ?resource wdt:P50 wd:Q26858780 . ?resource wdt:P50 wd:Q26858781 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q6099428 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q6099428 wdt:P344 ?resource. } UNION { wd:Q12813010 wdt:P58 ?resource. } UNION { wd:Q12813010 wdt:P161 ?resource. } UNION { wd:Q12813010 wdt:P1431 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q187261"], ["wd:Q4875335"], ["wd:Q6088017"]], "gold": [true]}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9903 kg:6672 .\",\n          \"?resource kg:9892 kg:7113 .\",\n          \"?resource kg:6037 kg:7898 .\",\n          \"?resource kg:3648 kg:9854 .\",\n        \"} UNION {\",\n          \"?resource kg:9903 kg:6672 .\",\n          \"?resource kg:9892 kg:7113 .\",\n          \"?resource kg:6037 kg:7898 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9903 kg:6672 . ?resource kg:9892 kg:7113 . ?resource kg:6037 kg:7898 . ?resource kg:3648 kg:9854 . } UNION { ?resource kg:9903 kg:6672 . ?resource kg:9892 kg:7113 . ?resource kg:6037 kg:7898 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867;\",\n      \"wdt:P50 wd:Q19370;\",\n      \"wdt:P57 wd:Q19370;\",\n      \"wdt:P58 wd:Q19370.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867;\",\n      \"wdt:P50 wd:Q19370;\",\n      \"wdt:P57 wd:Q19370;\",\n      \"wdt:P58 wd:Q19370.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867;\",\n      \"wdt:P50 wd:Q19370;\",\n      \"wdt:P57 wd:Q19370;\",\n      \"wdt:P58 wd:Q19370.\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q24867;\",\n      \"wdt:P50 wd:Q19370;\",\n      \"wdt:P57 wd:Q19370;\",\n      \"wdt:P58 wd:Q19370.\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q24867; wdt:P50 wd:Q19370; wdt:P57 wd:Q19370; wdt:P58 wd:Q19370. } { ?resource wdt:P31 wd:Q24867; wdt:P50 wd:Q19370; wdt:P57 wd:Q19370; wdt:P58 wd:Q19370. } { ?resource wdt:P31 wd:Q24867; wdt:P50 wd:Q19370; wdt:P57 wd:Q19370; wdt:P58 wd:Q19370. } { ?resource wdt:P31 wd:Q24867; wdt:P50 wd:Q19370; wdt:P57 wd:Q19370; wdt:P58 wd:Q19370. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P106 wd:Q7042855.}\",\n        \"UNION\",\n        \"{?resource wdt:P57 wd:Q199039; wdt:P57 wd:Q166739; wdt:P57 wd:Q45602; wdt:P57 wd:Q2445896.}\",\n        \"UNION\",\n        \"{?resource wdt:P1040 wd:Q199039; wdt:P1040 wd:Q166739; wdt:P1040 wd:Q45602; wdt:P1040 wd:Q2445896.}\",\n        \"UNION\",\n        \"{?resource wdt:P58 wd:Q199039; wdt:P58 wd:Q166739; wdt:P58 wd:Q45602; wdt:P58 wd:Q2445896.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P106 wd:Q7042855.} UNION {?resource wdt:P57 wd:Q199039; wdt:P57 wd:Q166739; wdt:P57 wd:Q45602; wdt:P57 wd:Q2445896.} UNION {?resource wdt:P1040 wd:Q199039; wdt:P1040 wd:Q166739; wdt:P1040 wd:Q45602; wdt:P1040 wd:Q2445896.} UNION {?resource wdt:P58 wd:Q199039; wdt:P58 wd:Q166739; wdt:P58 wd:Q45602; wdt:P58 wd:Q2445896.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q116253"], ["wd:Q53046"], ["wd:Q55260"], ["wd:Q961776"], ["wd:Q973687"], ["wd:Q493897"], ["wd:Q731015"], ["wd:Q90629"], ["wd:Q1236774"], ["wd:Q315325"], ["wd:Q447339"], ["wd:Q508875"], ["wd:Q62942"], ["wd:Q269214"], ["wd:Q55454"], ["wd:Q1280254"], ["wd:Q129619"], ["wd:Q1045525"], ["wd:Q514311"], ["wd:Q357624"], ["wd:Q450775"], ["wd:Q1056734"], ["wd:Q1282409"], ["wd:Q494445"], ["wd:Q777271"], ["wd:Q528068"], ["wd:Q1181629"], ["wd:Q104426"], ["wd:Q944459"], ["wd:Q1168358"], ["wd:Q1392953"], ["wd:Q8301"], ["wd:Q511727"], ["wd:Q100325"], ["wd:Q96190"], ["wd:Q1174424"], ["wd:Q551861"], ["wd:Q1175663"], ["wd:Q545216"], ["wd:Q1239503"], ["wd:Q108865"], ["wd:Q1161856"], ["wd:Q1370328"], ["wd:Q55215"], ["wd:Q662257"], ["wd:Q90319"], ["wd:Q901470"], ["wd:Q992332"], ["wd:Q110464"], ["wd:Q53045"], ["wd:Q369583"], ["wd:Q41148"], ["wd:Q91191"], ["wd:Q509576"], ["wd:Q763421"], ["wd:Q715116"], ["wd:Q1163719"], ["wd:Q237207"], ["wd:Q496429"], ["wd:Q1065612"], ["wd:Q440218"], ["wd:Q364528"], ["wd:Q709633"], ["wd:Q205456"], ["wd:Q353758"], ["wd:Q348015"], ["wd:Q331446"], ["wd:Q974800"], ["wd:Q542969"], ["wd:Q8006"], ["wd:Q1356358"], ["wd:Q1228748"], ["wd:Q504638"], ["wd:Q4538"], ["wd:Q1150882"], ["wd:Q125365"], ["wd:Q268024"], ["wd:Q897115"], ["wd:Q428190"], ["wd:Q651907"], ["wd:Q436861"], ["wd:Q1161106"], ["wd:Q1379022"], ["wd:Q250420"], ["wd:Q550854"], ["wd:Q607039"], ["wd:Q205721"], ["wd:Q328379"], ["wd:Q380920"], ["wd:Q1027551"], ["wd:Q541826"], ["wd:Q727349"], ["wd:Q1299356"], ["wd:Q25186"], ["wd:Q154690"], ["wd:Q505580"], ["wd:Q99779"], ["wd:Q116760"], ["wd:Q447999"], ["wd:Q1039291"], ["wd:Q460045"], ["wd:Q704752"], ["wd:Q513098"], ["wd:Q921662"], ["wd:Q1119064"], ["wd:Q1394743"], ["wd:Q976609"], ["wd:Q1383055"], ["wd:Q1304889"], ["wd:Q360002"], ["wd:Q1238970"], ["wd:Q543779"], ["wd:Q328926"], ["wd:Q238616"], ["wd:Q352565"], ["wd:Q372692"], ["wd:Q215562"], ["wd:Q1361201"], ["wd:Q91925"], ["wd:Q1364870"], ["wd:Q8289"], ["wd:Q708727"], ["wd:Q944572"], ["wd:Q313572"], ["wd:Q1379205"], ["wd:Q544350"], ["wd:Q1000290"], ["wd:Q1039135"], ["wd:Q960230"], ["wd:Q1312007"], ["wd:Q1253489"], ["wd:Q258611"], ["wd:Q511083"], ["wd:Q340007"], ["wd:Q469073"], ["wd:Q1162246"], ["wd:Q555092"], ["wd:Q658661"], ["wd:Q1098891"], ["wd:Q301846"], ["wd:Q1271389"], ["wd:Q1150229"], ["wd:Q1346052"], ["wd:Q274070"], ["wd:Q315374"], ["wd:Q1222371"], ["wd:Q139253"], ["wd:Q1164563"], ["wd:Q203165"], ["wd:Q1310769"], ["wd:Q516057"], ["wd:Q7374"], ["wd:Q518152"], ["wd:Q636252"], ["wd:Q1159494"], ["wd:Q568869"], ["wd:Q55415"], ["wd:Q55422"], ["wd:Q1170998"], ["wd:Q1358042"], ["wd:Q99302"], ["wd:Q692550"], ["wd:Q993377"], ["wd:Q1395788"], ["wd:Q1106871"], ["wd:Q263148"], ["wd:Q510070"], ["wd:Q119348"], ["wd:Q313593"], ["wd:Q72816"], ["wd:Q436834"], ["wd:Q46139"], ["wd:Q76184"], ["wd:Q503898"], ["wd:Q540926"], ["wd:Q1181572"], ["wd:Q384122"], ["wd:Q55249"], ["wd:Q484779"], ["wd:Q184622"], ["wd:Q507555"], ["wd:Q1045199"], ["wd:Q987976"], ["wd:Q491766"], ["wd:Q1059776"], ["wd:Q1138711"], ["wd:Q1332244"], ["wd:Q298581"], ["wd:Q506352"], ["wd:Q660685"], ["wd:Q724276"], ["wd:Q520038"], ["wd:Q42574"], ["wd:Q266535"], ["wd:Q656502"], ["wd:Q1075523"], ["wd:Q1041809"], ["wd:Q315123"], ["wd:Q1381610"], ["wd:Q542167"], ["wd:Q1112776"], ["wd:Q1394956"], ["wd:Q97936"], ["wd:Q1352602"], ["wd:Q25100"], ["wd:Q313875"], ["wd:Q786206"], ["wd:Q515421"], ["wd:Q933596"], ["wd:Q183347"], ["wd:Q511472"], ["wd:Q971721"], ["wd:Q414574"], ["wd:Q888156"], ["wd:Q991678"], ["wd:Q1233096"], ["wd:Q1322681"], ["wd:Q70953"], ["wd:Q769826"], ["wd:Q1035260"], ["wd:Q103949"], ["wd:Q340421"], ["wd:Q496503"], ["wd:Q363117"], ["wd:Q64392"], ["wd:Q529454"], ["wd:Q535892"], ["wd:Q1042211"], ["wd:Q862355"], ["wd:Q1101927"], ["wd:Q1305150"], ["wd:Q55193"], ["wd:Q168169"], ["wd:Q446118"], ["wd:Q55211"], ["wd:Q1114628"], ["wd:Q703513"], ["wd:Q1381711"], ["wd:Q692127"], ["wd:Q1110463"], ["wd:Q234983"], ["wd:Q453691"], ["wd:Q465186"], ["wd:Q685462"], ["wd:Q101712"], ["wd:Q363458"], ["wd:Q495879"], ["wd:Q778812"], ["wd:Q98984"], ["wd:Q529568"], ["wd:Q541716"], ["wd:Q122352"], ["wd:Q191755"], ["wd:Q51581"], ["wd:Q1071731"], ["wd:Q86259"], ["wd:Q1053757"], ["wd:Q544658"], ["wd:Q270730"], ["wd:Q320259"], ["wd:Q335080"], ["wd:Q1252518"], ["wd:Q744852"], ["wd:Q604362"], ["wd:Q529411"], ["wd:Q1058806"], ["wd:Q53009"], ["wd:Q786469"], ["wd:Q681589"], ["wd:Q215137"], ["wd:Q44426"], ["wd:Q1001309"], ["wd:Q1318058"], ["wd:Q98520"], ["wd:Q526182"], ["wd:Q51488"], ["wd:Q726345"], ["wd:Q738544"], ["wd:Q323716"], ["wd:Q498430"], ["wd:Q827371"], ["wd:Q271223"], ["wd:Q110379"], ["wd:Q975418"], ["wd:Q1005321"], ["wd:Q1362717"], ["wd:Q810044"], ["wd:Q273379"], ["wd:Q364959"], ["wd:Q8351"], ["wd:Q55388"], ["wd:Q508871"], ["wd:Q459542"], ["wd:Q682762"], ["wd:Q457656"], ["wd:Q470097"], ["wd:Q991651"], ["wd:Q293078"], ["wd:Q1241044"], ["wd:Q503247"], ["wd:Q182835"], ["wd:Q974615"], ["wd:Q974982"], ["wd:Q338704"], ["wd:Q337588"], ["wd:Q38222"], ["wd:Q85349"], ["wd:Q966078"], ["wd:Q965654"], ["wd:Q187261"], ["wd:Q374480"], ["wd:Q55407"], ["wd:Q491248"], ["wd:Q956193"], ["wd:Q1064479"], ["wd:Q260125"], ["wd:Q603268"], ["wd:Q1071497"], ["wd:Q1056872"], ["wd:Q1190057"], ["wd:Q1279204"], ["wd:Q996387"], ["wd:Q212167"], ["wd:Q1286924"], ["wd:Q1077361"], ["wd:Q512006"], ["wd:Q1192220"], ["wd:Q1335359"], ["wd:Q511008"], ["wd:Q1077467"], ["wd:Q217324"], ["wd:Q223992"], ["wd:Q98665"], ["wd:Q453160"], ["wd:Q57932"], ["wd:Q84116"], ["wd:Q91260"], ["wd:Q460165"], ["wd:Q962071"], ["wd:Q827304"], ["wd:Q72229"], ["wd:Q500611"], ["wd:Q1384672"], ["wd:Q724172"], ["wd:Q782333"], ["wd:Q771590"], ["wd:Q346535"], ["wd:Q453761"], ["wd:Q200748"], ["wd:Q438472"], ["wd:Q114063"], ["wd:Q444545"], ["wd:Q472420"], ["wd:Q509635"], ["wd:Q560286"], ["wd:Q279287"], ["wd:Q725026"], ["wd:Q959506"], ["wd:Q362353"], ["wd:Q524897"], ["wd:Q72685"], ["wd:Q816456"], ["wd:Q358370"], ["wd:Q1041896"], ["wd:Q1324165"], ["wd:Q1223349"], ["wd:Q8877"], ["wd:Q722032"], ["wd:Q1280065"], ["wd:Q513939"], ["wd:Q441522"], ["wd:Q782982"], ["wd:Q1339951"], ["wd:Q931657"], ["wd:Q359245"], ["wd:Q1312979"], ["wd:Q1063846"], ["wd:Q1086936"], ["wd:Q78719"], ["wd:Q121425"], ["wd:Q295093"], ["wd:Q55393"], ["wd:Q602595"], ["wd:Q99662"], ["wd:Q523976"], ["wd:Q77593"], ["wd:Q1108528"], ["wd:Q56094"], ["wd:Q726925"], ["wd:Q449811"], ["wd:Q465400"], ["wd:Q503951"], ["wd:Q446083"], ["wd:Q574983"], ["wd:Q934964"], ["wd:Q53024"], ["wd:Q1253831"], ["wd:Q494444"], ["wd:Q736672"], ["wd:Q774517"], ["wd:Q780323"], ["wd:Q1346678"], ["wd:Q1386549"], ["wd:Q1094826"], ["wd:Q1364819"], ["wd:Q51511"], ["wd:Q1245240"], ["wd:Q126693"], ["wd:Q508497"], ["wd:Q518295"], ["wd:Q927439"], ["wd:Q1056063"], ["wd:Q103917"], ["wd:Q1294969"], ["wd:Q439832"], ["wd:Q1302424"], ["wd:Q84023"], ["wd:Q625655"], ["wd:Q1175194"], ["wd:Q366703"], ["wd:Q562434"], ["wd:Q750768"], ["wd:Q388328"], ["wd:Q388991"], ["wd:Q63491"], ["wd:Q807438"], ["wd:Q1138607"], ["wd:Q71253"], ["wd:Q345994"], ["wd:Q433979"], ["wd:Q920439"], ["wd:Q1168250"], ["wd:Q1344275"], ["wd:Q44131"], ["wd:Q950689"], ["wd:Q84630"], ["wd:Q537808"], ["wd:Q977419"], ["wd:Q43264"], ["wd:Q1156039"], ["wd:Q1136806"], ["wd:Q513061"], ["wd:Q1345010"], ["wd:Q1372985"], ["wd:Q920167"], ["wd:Q1351765"], ["wd:Q383764"], ["wd:Q365511"], ["wd:Q139906"], ["wd:Q1354843"], ["wd:Q110462"], ["wd:Q1270602"], ["wd:Q1179199"], ["wd:Q51566"], ["wd:Q382570"], ["wd:Q3772"], ["wd:Q515837"], ["wd:Q115064"], ["wd:Q451185"], ["wd:Q1090963"], ["wd:Q1084628"], ["wd:Q118403"], ["wd:Q461726"], ["wd:Q1323347"], ["wd:Q763507"], ["wd:Q1374687"], ["wd:Q103158"], ["wd:Q945227"], ["wd:Q734916"], ["wd:Q366239"], ["wd:Q1388800"], ["wd:Q497972"], ["wd:Q59972"], ["wd:Q434522"], ["wd:Q455383"], ["wd:Q704027"], ["wd:Q825526"], ["wd:Q704742"], ["wd:Q1056757"], ["wd:Q1123531"], ["wd:Q980695"], ["wd:Q1339485"], ["wd:Q236688"], ["wd:Q901185"], ["wd:Q977704"], ["wd:Q826169"], ["wd:Q166318"], ["wd:Q1126713"], ["wd:Q545351"], ["wd:Q1359638"], ["wd:Q113336"], ["wd:Q1082213"], ["wd:Q1160805"], ["wd:Q1391410"], ["wd:Q1114638"], ["wd:Q354010"], ["wd:Q181378"], ["wd:Q8873"], ["wd:Q31225"], ["wd:Q834658"], ["wd:Q55163"], ["wd:Q512224"], ["wd:Q8003"], ["wd:Q250324"], ["wd:Q2071"], ["wd:Q993973"], ["wd:Q1291452"], ["wd:Q31294"], ["wd:Q53013"], ["wd:Q297173"], ["wd:Q364348"], ["wd:Q436837"], ["wd:Q521502"], ["wd:Q709626"], ["wd:Q123124"], ["wd:Q612365"], ["wd:Q975002"], ["wd:Q390731"], ["wd:Q1119237"], ["wd:Q530578"], ["wd:Q1065207"], ["wd:Q728396"], ["wd:Q453792"], ["wd:Q956822"], ["wd:Q103871"], ["wd:Q621818"], ["wd:Q514904"], ["wd:Q929406"], ["wd:Q274244"], ["wd:Q447353"], ["wd:Q784527"], ["wd:Q503783"], ["wd:Q816653"], ["wd:Q1030427"], ["wd:Q1384766"], ["wd:Q435029"], ["wd:Q1161655"], ["wd:Q1313592"], ["wd:Q321365"], ["wd:Q561686"], ["wd:Q132398"], ["wd:Q740649"], ["wd:Q950542"], ["wd:Q809066"], ["wd:Q1330422"], ["wd:Q498000"], ["wd:Q529380"], ["wd:Q597096"], ["wd:Q865243"], ["wd:Q464015"], ["wd:Q102617"], ["wd:Q128828"], ["wd:Q343888"], ["wd:Q561133"], ["wd:Q225852"], ["wd:Q1314190"], ["wd:Q97919"], ["wd:Q53010"], ["wd:Q1010090"], ["wd:Q395494"], ["wd:Q97364"], ["wd:Q431848"], ["wd:Q503742"], ["wd:Q1332248"], ["wd:Q549956"], ["wd:Q977948"], ["wd:Q506338"], ["wd:Q373303"], ["wd:Q310060"], ["wd:Q114860"], ["wd:Q152272"], ["wd:Q285928"], ["wd:Q323950"], ["wd:Q238855"], ["wd:Q323074"], ["wd:Q587102"], ["wd:Q1343809"], ["wd:Q711804"], ["wd:Q211228"], ["wd:Q722890"], ["wd:Q740758"], ["wd:Q53012"], ["wd:Q951209"], ["wd:Q596137"], ["wd:Q314926"], ["wd:Q642465"], ["wd:Q98601"], ["wd:Q967544"], ["wd:Q1262219"], ["wd:Q1288863"], ["wd:Q778017"], ["wd:Q1379422"], ["wd:Q778153"], ["wd:Q51562"], ["wd:Q1276523"], ["wd:Q304707"], ["wd:Q972607"], ["wd:Q8293"], ["wd:Q1252147"], ["wd:Q516007"], ["wd:Q548887"], ["wd:Q1006624"], ["wd:Q1173856"], ["wd:Q90354"], ["wd:Q1033747"], ["wd:Q1241761"], ["wd:Q1274892"], ["wd:Q55395"], ["wd:Q55433"], ["wd:Q1373349"], ["wd:Q1228100"], ["wd:Q533272"], ["wd:Q282787"], ["wd:Q1177114"], ["wd:Q347950"], ["wd:Q473475"], ["wd:Q816551"], ["wd:Q419466"], ["wd:Q503956"], ["wd:Q611112"], ["wd:Q221843"], ["wd:Q1316101"], ["wd:Q505575"], ["wd:Q67568"], ["wd:Q449514"], ["wd:Q822240"], ["wd:Q55198"], ["wd:Q530235"], ["wd:Q1311938"], ["wd:Q472435"], ["wd:Q120386"], ["wd:Q543124"], ["wd:Q111743"], ["wd:Q935794"], ["wd:Q518366"], ["wd:Q24907"], ["wd:Q361670"], ["wd:Q818617"], ["wd:Q667386"], ["wd:Q779361"], ["wd:Q1249881"], ["wd:Q1189575"], ["wd:Q460582"], ["wd:Q212990"], ["wd:Q1116197"], ["wd:Q1117163"], ["wd:Q807470"], ["wd:Q1097458"], ["wd:Q926978"], ["wd:Q286366"], ["wd:Q495055"], ["wd:Q311256"], ["wd:Q460299"], ["wd:Q971949"], ["wd:Q1373284"], ["wd:Q1354375"], ["wd:Q273753"], ["wd:Q259433"], ["wd:Q326376"], ["wd:Q461664"], ["wd:Q218311"], ["wd:Q531208"], ["wd:Q28028"], ["wd:Q1291210"], ["wd:Q1345827"], ["wd:Q1089208"], ["wd:Q1288811"], ["wd:Q1041811"], ["wd:Q271247"], ["wd:Q626553"], ["wd:Q311311"], ["wd:Q139509"], ["wd:Q505743"], ["wd:Q51123"], ["wd:Q189526"], ["wd:Q541143"], ["wd:Q719827"], ["wd:Q509948"], ["wd:Q729124"], ["wd:Q72267"], ["wd:Q780842"], ["wd:Q90104"], ["wd:Q1283819"], ["wd:Q51545"], ["wd:Q456251"], ["wd:Q1346126"], ["wd:Q325399"], ["wd:Q389128"], ["wd:Q490198"], ["wd:Q199943"], ["wd:Q698636"], ["wd:Q998528"], ["wd:Q359315"], ["wd:Q903659"], ["wd:Q662494"], ["wd:Q708899"], ["wd:Q60637"], ["wd:Q97756"], ["wd:Q560129"], ["wd:Q603265"], ["wd:Q53043"], ["wd:Q708059"], ["wd:Q1339881"], ["wd:Q88533"], ["wd:Q1039969"], ["wd:Q1301836"], ["wd:Q1252829"], ["wd:Q1338012"], ["wd:Q496124"], ["wd:Q510815"], ["wd:Q55432"], ["wd:Q684569"], ["wd:Q1041810"], ["wd:Q1284096"], ["wd:Q1141395"], ["wd:Q275402"], ["wd:Q541264"], ["wd:Q276186"], ["wd:Q1231435"], ["wd:Q262507"], ["wd:Q924621"], ["wd:Q166887"], ["wd:Q725970"], ["wd:Q116164"], ["wd:Q72014"], ["wd:Q420041"], ["wd:Q87875"], ["wd:Q447156"], ["wd:Q682383"], ["wd:Q88944"], ["wd:Q1247263"], ["wd:Q1318165"], ["wd:Q825411"], ["wd:Q968465"], ["wd:Q1265730"], ["wd:Q1293442"], ["wd:Q1369600"], ["wd:Q705226"], ["wd:Q327726"], ["wd:Q1037792"], ["wd:Q1173828"], ["wd:Q53041"], ["wd:Q709546"], ["wd:Q509759"], ["wd:Q281964"], ["wd:Q1285792"], ["wd:Q250207"], ["wd:Q822754"], ["wd:Q365012"], ["wd:Q122187"], ["wd:Q742339"], ["wd:Q678350"], ["wd:Q1315312"], ["wd:Q919492"], ["wd:Q232470"], ["wd:Q86660"], ["wd:Q114681"], ["wd:Q55403"], ["wd:Q120187"], ["wd:Q522256"], ["wd:Q869060"], ["wd:Q450382"], ["wd:Q103446"], ["wd:Q1150251"], ["wd:Q55210"], ["wd:Q463767"], ["wd:Q704287"], ["wd:Q1252340"], ["wd:Q180962"], ["wd:Q1240288"], ["wd:Q1255794"], ["wd:Q1177226"], ["wd:Q51127"], ["wd:Q270092"], ["wd:Q364681"], ["wd:Q1354061"], ["wd:Q853"], ["wd:Q218022"], ["wd:Q487090"], ["wd:Q653778"], ["wd:Q506183"], ["wd:Q28556"], ["wd:Q551222"], ["wd:Q50713"], ["wd:Q1291985"], ["wd:Q67547"], ["wd:Q458679"], ["wd:Q151164"], ["wd:Q317614"], ["wd:Q536309"], ["wd:Q706935"], ["wd:Q803646"], ["wd:Q124187"], ["wd:Q363515"], ["wd:Q45306"], ["wd:Q55408"], ["wd:Q96024"], ["wd:Q302788"], ["wd:Q813242"], ["wd:Q925178"], ["wd:Q464098"], ["wd:Q120332"], ["wd:Q533802"], ["wd:Q1328660"], ["wd:Q313949"], ["wd:Q324753"], ["wd:Q547425"], ["wd:Q1307147"], ["wd:Q116968"], ["wd:Q241800"], ["wd:Q455279"], ["wd:Q861161"], ["wd:Q961451"], ["wd:Q436978"], ["wd:Q50764"], ["wd:Q457512"], ["wd:Q1372134"], ["wd:Q325190"], ["wd:Q1237837"], ["wd:Q971159"], ["wd:Q2001"], ["wd:Q955405"], ["wd:Q1308135"], ["wd:Q177448"], ["wd:Q462905"], ["wd:Q736300"], ["wd:Q987795"], ["wd:Q25191"], ["wd:Q62323"], ["wd:Q728360"], ["wd:Q55282"], ["wd:Q1253000"], ["wd:Q237268"], ["wd:Q1346275"], ["wd:Q113861"], ["wd:Q263730"], ["wd:Q89877"], ["wd:Q97799"], ["wd:Q520747"], ["wd:Q827386"], ["wd:Q1173825"], ["wd:Q1041936"], ["wd:Q279100"], ["wd:Q467495"], ["wd:Q565344"], ["wd:Q772880"], ["wd:Q716282"], ["wd:Q863267"], ["wd:Q55421"], ["wd:Q86545"], ["wd:Q494356"], ["wd:Q569649"], ["wd:Q1390229"], ["wd:Q139384"], ["wd:Q78666"], ["wd:Q1279691"], ["wd:Q510194"], ["wd:Q930419"], ["wd:Q534151"], ["wd:Q750983"], ["wd:Q377464"], ["wd:Q372991"], ["wd:Q316051"], ["wd:Q429973"], ["wd:Q447847"], ["wd:Q722900"], ["wd:Q462354"], ["wd:Q840437"], ["wd:Q436125"], ["wd:Q365616"], ["wd:Q1066917"], ["wd:Q1314616"], ["wd:Q808769"], ["wd:Q291141"], ["wd:Q57391"], ["wd:Q273164"], ["wd:Q949553"], ["wd:Q188988"], ["wd:Q513356"], ["wd:Q516046"], ["wd:Q49023"], ["wd:Q707773"], ["wd:Q369512"], ["wd:Q1341142"], ["wd:Q512431"], ["wd:Q938124"], ["wd:Q1053102"], ["wd:Q717147"], ["wd:Q732416"], ["wd:Q84540"], ["wd:Q511993"], ["wd:Q376563"], ["wd:Q904822"], ["wd:Q1281943"], ["wd:Q285769"], ["wd:Q469449"], ["wd:Q47284"], ["wd:Q1098016"], ["wd:Q280870"], ["wd:Q711561"], ["wd:Q214066"], ["wd:Q176929"], ["wd:Q499420"], ["wd:Q1016435"], ["wd:Q897981"], ["wd:Q966770"], ["wd:Q882"], ["wd:Q782565"], ["wd:Q484328"], ["wd:Q11338"], ["wd:Q313462"], ["wd:Q64358"], ["wd:Q1306771"], ["wd:Q1352943"], ["wd:Q127569"], ["wd:Q543867"], ["wd:Q463119"], ["wd:Q55458"], ["wd:Q111136"], ["wd:Q942822"], ["wd:Q1380406"], ["wd:Q698676"], ["wd:Q1313325"], ["wd:Q512419"], ["wd:Q832573"], ["wd:Q711370"], ["wd:Q266222"], ["wd:Q89461"], ["wd:Q717302"], ["wd:Q723745"], ["wd:Q951821"], ["wd:Q1329793"], ["wd:Q271284"], ["wd:Q737762"], ["wd:Q368197"], ["wd:Q455482"], ["wd:Q539419"], ["wd:Q562675"], ["wd:Q55400"], ["wd:Q710650"], ["wd:Q556300"], ["wd:Q107087"], ["wd:Q977546"], ["wd:Q158250"], ["wd:Q503508"], ["wd:Q966198"], ["wd:Q1162308"], ["wd:Q380237"], ["wd:Q692841"], ["wd:Q1349750"], ["wd:Q654897"], ["wd:Q933453"], ["wd:Q81963"], ["wd:Q51516"], ["wd:Q456923"], ["wd:Q60978"], ["wd:Q262608"], ["wd:Q556566"], ["wd:Q718168"], ["wd:Q199327"], ["wd:Q598238"], ["wd:Q59821"], ["wd:Q55405"], ["wd:Q149136"], ["wd:Q463497"], ["wd:Q557323"], ["wd:Q936212"], ["wd:Q19504"], ["wd:Q31637"], ["wd:Q306403"], ["wd:Q798029"], ["wd:Q1181150"], ["wd:Q4465"], ["wd:Q1304680"], ["wd:Q1114491"], ["wd:Q312472"], ["wd:Q555180"], ["wd:Q720360"], ["wd:Q1075796"], ["wd:Q745648"], ["wd:Q484948"], ["wd:Q87852"], ["wd:Q515095"], ["wd:Q977397"], ["wd:Q452236"], ["wd:Q489831"], ["wd:Q460825"], ["wd:Q270153"], ["wd:Q1044183"], ["wd:Q338042"], ["wd:Q53005"], ["wd:Q565966"], ["wd:Q528379"], ["wd:Q966270"], ["wd:Q345838"], ["wd:Q1096847"], ["wd:Q832609"], ["wd:Q1163637"], ["wd:Q1336198"], ["wd:Q1378100"]], "gold": [true]}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:106 kg:7042855 . } UNION \",\n        \"{ ?resource kg:106 kg:2445896 . } UNION \",\n        \"{ ?resource kg:57 kg:199039 . } UNION \",\n        \"{ ?resource kg:57 kg:166739 . } UNION \",\n        \"{ ?resource kg:57 kg:45602 . } UNION \",\n        \"{ ?resource kg:58 kg:199039 . } UNION \",\n        \"{ ?resource kg:58 kg:166739 . } UNION \",\n        \"{ ?resource kg:58 kg:45602 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:106 kg:7042855 . } UNION { ?resource kg:106 kg:2445896 . } UNION { ?resource kg:57 kg:199039 . } UNION { ?resource kg:57 kg:166739 . } UNION { ?resource kg:57 kg:45602 . } UNION { ?resource kg:58 kg:199039 . } UNION { ?resource kg:58 kg:166739 . } UNION { ?resource kg:58 kg:45602 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P279* wd:Q4867489 .\",\n    \"?resource wdt:P161 wd:Q106592409 .\",\n    \"?resource wdt:P3320 wd:Q106592409 .\",\n    \"?resource wdt:P87 wd:Q106592409 .\",\n    \"?resource wdt:P161 wd:Q106593000 .\",\n    \"?resource wdt:P3320 wd:Q106593000 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P279* wd:Q4867489 . ?resource wdt:P161 wd:Q106592409 . ?resource wdt:P3320 wd:Q106592409 . ?resource wdt:P87 wd:Q106592409 . ?resource wdt:P161 wd:Q106593000 . ?resource wdt:P3320 wd:Q106593000 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q5437360 wdt:P1040 ?writer . } UNION \",\n        \"{ wd:Q5437360 wdt:P1431 ?executiveProducer . } UNION \",\n        \"{ wd:Q5437360 wdt:P58 ?editor . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q5437360 wdt:P1040 ?writer . } UNION { wd:Q5437360 wdt:P1431 ?executiveProducer . } UNION { wd:Q5437360 wdt:P58 ?editor . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:5311 kg:0579 .\",\n          \"?resource kg:8765 kg:6241 .\",\n          \"?resource kg:8321 kg:6241 .\",\n        \"} UNION {\",\n          \"?resource kg:5311 kg:0579 .\",\n          \"?resource kg:8765 kg:6108 .\",\n          \"?resource kg:8321 kg:6108 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5311 kg:0579 . ?resource kg:8765 kg:6241 . ?resource kg:8321 kg:6241 . } UNION { ?resource kg:5311 kg:0579 . ?resource kg:8765 kg:6108 . ?resource kg:8321 kg:6108 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q187261"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P58 ?writer .\",\n    \"VALUES ?directorWriter { wd:Q960997 wd:Q319079 wd:Q429627 wd:Q350166 wd:Q4405 }\",\n    \"{ ?film p:P57/ps:P57 ?directorWriter .}\",\n    \"UNION\",\n    \"{ ?film p:P58/ps:P58 ?directorWriter .}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P58 ?writer . VALUES ?directorWriter { wd:Q960997 wd:Q319079 wd:Q429627 wd:Q350166 wd:Q4405 } { ?film p:P57/ps:P57 ?directorWriter .} UNION { ?film p:P58/ps:P58 ?directorWriter .} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q222633"]]}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P31 wd:Q11424.}\",\n        \"UNION\",\n        \"{?film wdt:P57 wd:Q7546.}\",\n        \"UNION\",\n        \"{?film wdt:P58 wd:Q982339.}\",\n        \"UNION\",\n        \"{?film wdt:P50 wd:Q1033656.}\",\n        \"UNION\",\n        \"{?film wdt:P57 wd:Q116760.}\",\n        \"UNION\",\n        \"{?film wdt:P58 wd:Q1365463.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film wdt:P31 wd:Q11424.} UNION {?film wdt:P57 wd:Q7546.} UNION {?film wdt:P58 wd:Q982339.} UNION {?film wdt:P50 wd:Q1033656.} UNION {?film wdt:P57 wd:Q116760.} UNION {?film wdt:P58 wd:Q1365463.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film kg:3964 kg:1055 .}\",\n        \"{?film kg:7439 kg:0962 .}\",\n        \"{?film kg:7439 kg:6787 .}\",\n        \"{?film kg:7439 kg:0694 .}\",\n        \"{?film kg:7439 kg:3303 .}\",\n        \"{?film kg:7439 kg:5554 .}\",\n        \"{?film kg:3685 kg:0962 .}\",\n        \"{?film kg:3685 kg:6787 .}\",\n        \"{?film kg:3685 kg:0694 .}\",\n        \"{?film kg:3685 kg:3303 .}\",\n        \"{?film kg:3685 kg:5554 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film kg:3964 kg:1055 .} {?film kg:7439 kg:0962 .} {?film kg:7439 kg:6787 .} {?film kg:7439 kg:0694 .} {?film kg:7439 kg:3303 .} {?film kg:7439 kg:5554 .} {?film kg:3685 kg:0962 .} {?film kg:3685 kg:6787 .} {?film kg:3685 kg:0694 .} {?film kg:3685 kg:3303 .} {?film kg:3685 kg:5554 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P496 wd:Q208725 .\",\n      \"?resource wdt:P161 wd:Q10870545 .\",\n      \"?resource wdt:P344 wd:Q10870545 .\",\n      \"?resource wdt:P58 wd:Q10870545 .\",\n    \"} UNION {\",\n      \"?resource wdt:P39 ?position .\",\n      \"?position wdt:P279* wd:Q483501 .\",\n      \"?resource wdt:P161 wd:Q10870545 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P39 ?position2 .\",\n      \"?position2 wdt:P279* wd:Q840677 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P496 wd:Q208725 . ?resource wdt:P161 wd:Q10870545 . ?resource wdt:P344 wd:Q10870545 . ?resource wdt:P58 wd:Q10870545 . } UNION { ?resource wdt:P39 ?position . ?position wdt:P279* wd:Q483501 . ?resource wdt:P161 wd:Q10870545 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P39 ?position2 . ?position2 wdt:P279* wd:Q840677 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource wdt:P161 wd:Q5265241.} UNION \",\n        \"{?resource wdt:P344 wd:Q5265241.} UNION \",\n        \"{?resource wdt:P1040 wd:Q5265241.} UNION \",\n        \"{?resource wdt:P58 wd:Q5265241.} UNION \",\n        \"{?resource wdt:P344 wd:Q6084069.} UNION \",\n        \"{?resource wdt:P1040 wd:Q6084069.} UNION \",\n        \"{?resource wdt:P58 wd:Q6084069.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource wdt:P161 wd:Q5265241.} UNION {?resource wdt:P344 wd:Q5265241.} UNION {?resource wdt:P1040 wd:Q5265241.} UNION {?resource wdt:P58 wd:Q5265241.} UNION {?resource wdt:P344 wd:Q6084069.} UNION {?resource wdt:P1040 wd:Q6084069.} UNION {?resource wdt:P58 wd:Q6084069.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0250 kg:2942 .\",\n          \"?resource kg:1408 kg:4263 .\",\n          \"?resource kg:7811 kg:4489 .\",\n          \"?resource kg:2309 ?waitingRoom .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:0250 kg:2942 .\",\n          \"?resource kg:1408 kg:4263 .\",\n          \"?resource kg:7811 kg:4489 .\",\n          \"?resource kg:2168 ?destinyTheConfession .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0250 kg:2942 . ?resource kg:1408 kg:4263 . ?resource kg:7811 kg:4489 . ?resource kg:2309 ?waitingRoom . } { ?resource kg:0250 kg:2942 . ?resource kg:1408 kg:4263 . ?resource kg:7811 kg:4489 . ?resource kg:2168 ?destinyTheConfession . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?filmEditor wdt:P31 wd:Q5 .\",\n    \"?filmEditor wdt:P26 ?spouse .\",\n    \"?spouse wdt:P39 ?occupation .\",\n    \"{ ?occupation wdt:P279* wd:Q36656. } UNION { ?occupation wdt:P106 wd:Q483501. }\",\n    \"?spouse wdt:P50 ?film .\",\n    \"{ ?film wdt:P1476 'The City Tramp'@en. } UNION { ?film wdt:P1476 'Katzelmacher'@en. } UNION { ?film wdt:P1476 \\\"Why Does Herr R. Run Amok?\\\"@en. } UNION { ?film wdt:P1476 'Whity'@en. } UNION { ?film wdt:P1476 \\\"In a Year of 13 Moons\\\"@en. }\",\n    \"BIND(?spouse AS ?resource)\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?filmEditor wdt:P31 wd:Q5 . ?filmEditor wdt:P26 ?spouse . ?spouse wdt:P39 ?occupation . { ?occupation wdt:P279* wd:Q36656. } UNION { ?occupation wdt:P106 wd:Q483501. } ?spouse wdt:P50 ?film . { ?film wdt:P1476 'The City Tramp'@en. } UNION { ?film wdt:P1476 'Katzelmacher'@en. } UNION { ?film wdt:P1476 \"Why Does Herr R. Run Amok?\"@en. } UNION { ?film wdt:P1476 'Whity'@en. } UNION { ?film wdt:P1476 \"In a Year of 13 Moons\"@en. } BIND(?spouse AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q878673 wdt:P58 ?editor . } UNION \",\n        \"{ wd:Q567519 wdt:P58 ?editor . } UNION \",\n        \"{ wd:Q543382 wdt:P58 ?editor . } UNION \",\n        \"{ wd:Q570483 wdt:P58 ?editor . } UNION \",\n        \"{ wd:Q327427 wdt:P58 ?editor . }\",\n      \"?editor wdt:P106 wd:Q7042855 .\",\n      \"?editor wdt:P26 ?spouse .\",\n      \"{ wd:Q878673 wdt:P1040 ?spouse . } UNION \",\n        \"{ wd:Q567519 wdt:P1040 ?spouse . } UNION \",\n        \"{ wd:Q543382 wdt:P1040 ?spouse . } UNION \",\n        \"{ wd:Q570483 wdt:P1040 ?spouse . } UNION \",\n        \"{ wd:Q327427 wdt:P1040 ?spouse . }\",\n      \"BIND(?editor AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q878673 wdt:P58 ?editor . } UNION { wd:Q567519 wdt:P58 ?editor . } UNION { wd:Q543382 wdt:P58 ?editor . } UNION { wd:Q570483 wdt:P58 ?editor . } UNION { wd:Q327427 wdt:P58 ?editor . } ?editor wdt:P106 wd:Q7042855 . ?editor wdt:P26 ?spouse . { wd:Q878673 wdt:P1040 ?spouse . } UNION { wd:Q567519 wdt:P1040 ?spouse . } UNION { wd:Q543382 wdt:P1040 ?spouse . } UNION { wd:Q570483 wdt:P1040 ?spouse . } UNION { wd:Q327427 wdt:P1040 ?spouse . } BIND(?editor AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q44426"]], "gold": [true]}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?filmEditor kg:9872 ?spouse .\",\n          \"?spouse kg:6727 kg:6831 ;\",\n            \"kg:4179 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 .\",\n        \"} UNION {\",\n          \"?filmEditor kg:9872 ?spouse .\",\n          \"?spouse kg:3176 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 ;\",\n            \"kg:4179 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?filmEditor kg:9872 ?spouse . ?spouse kg:6727 kg:6831 ; kg:4179 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 . } UNION { ?filmEditor kg:9872 ?spouse . ?spouse kg:3176 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 ; kg:4179 kg:8637, kg:7702, kg:9166, kg:4367, kg:4861 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n    \"?director wdt:P31 wd:Q5 .\",\n    \"?director wdt:P21 wd:Q6581072 .\",\n    \"?director wdt:P39 wd:Q48764 .\",\n    \"?director wdt:P50 wd:Q163770 .\",\n    \"?director wdt:P58 wd:Q207876 .\",\n    \"?director wdt:P58 wd:Q49576 .\",\n    \"?director wdt:P58 wd:Q1340066 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P31 wd:Q5 . ?director wdt:P21 wd:Q6581072 . ?director wdt:P39 wd:Q48764 . ?director wdt:P50 wd:Q163770 . ?director wdt:P58 wd:Q207876 . ?director wdt:P58 wd:Q49576 . ?director wdt:P58 wd:Q1340066 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director WHERE {\",\n        \"{\",\n          \"?director wdt:P57 wd:Q497617 .\",\n          \"?director wdt:P58 wd:Q497617 .\",\n          \"?director wdt:P1040 wd:Q497617 .\",\n        \"}\",\n        \"{\",\n          \"?director wdt:P57 wd:Q158069 .\",\n          \"?director wdt:P58 wd:Q158069 .\",\n          \"?director wdt:P1040 wd:Q158069 .\",\n        \"}\",\n        \"{\",\n          \"?director wdt:P57 wd:Q156497 .\",\n          \"?director wdt:P58 wd:Q156497 .\",\n          \"?director wdt:P1040 wd:Q156497 .\",\n        \"}\",\n      \"?director wdt:P21 wd:Q6581072 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?director wdt:P57 wd:Q497617 . ?director wdt:P58 wd:Q497617 . ?director wdt:P1040 wd:Q497617 . } { ?director wdt:P57 wd:Q158069 . ?director wdt:P58 wd:Q158069 . ?director wdt:P1040 wd:Q158069 . } { ?director wdt:P57 wd:Q156497 . ?director wdt:P58 wd:Q156497 . ?director wdt:P1040 wd:Q156497 . } ?director wdt:P21 wd:Q6581072 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q55415"]]}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:0937 kg:3015 .}\",\n        \"{?resource kg:0928 kg:0298 .}\",\n        \"{?resource kg:0928 kg:2814 .}\",\n        \"{?resource kg:0928 kg:9872 .}\",\n        \"{?resource kg:5041 kg:0298 .}\",\n        \"{?resource kg:5041 kg:2814 .}\",\n        \"{?resource kg:5041 kg:9872 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { {?resource kg:0937 kg:3015 .} {?resource kg:0928 kg:0298 .} {?resource kg:0928 kg:2814 .} {?resource kg:0928 kg:9872 .} {?resource kg:5041 kg:0298 .} {?resource kg:5041 kg:2814 .} {?resource kg:5041 kg:9872 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q498371 .\",\n      \"?resource wdt:P57 wd:Q11862 .\",\n      \"?resource wdt:P58 wd:Q11862 .\",\n      \"?resource wdt:P57 wd:Q490396 .\",\n      \"?resource wdt:P58 wd:Q490396 .\",\n      \"?resource wdt:P57 wd:Q1214556 .\",\n      \"?resource wdt:P58 wd:Q1214556 .\",\n      \"?resource wdt:P57 wd:Q3099669 .\",\n      \"?resource wdt:P58 wd:Q3099669 .\",\n      \"?resource wdt:P2146 wd:Q164811 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2600 wd:Q498371 . ?resource wdt:P57 wd:Q11862 . ?resource wdt:P58 wd:Q11862 . ?resource wdt:P57 wd:Q490396 . ?resource wdt:P58 wd:Q490396 . ?resource wdt:P57 wd:Q1214556 . ?resource wdt:P58 wd:Q1214556 . ?resource wdt:P57 wd:Q3099669 . ?resource wdt:P58 wd:Q3099669 . ?resource wdt:P2146 wd:Q164811 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q1277329 wdt:P57 ?resource. } UNION \",\n      \"{ wd:Q219170 wdt:P58 ?resource. } UNION \",\n      \"{ wd:Q627060 wdt:P1040 ?resource. } UNION \",\n      \"{ wd:Q219155 wdt:P57 ?resource. } UNION \",\n      \"{ wd:Q183945 wdt:P57 ?resource. } UNION \",\n      \"{ wd:Q16 wdt:P27 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1277329 wdt:P57 ?resource. } UNION { wd:Q219170 wdt:P58 ?resource. } UNION { wd:Q627060 wdt:P1040 ?resource. } UNION { wd:Q219155 wdt:P57 ?resource. } UNION { wd:Q183945 wdt:P57 ?resource. } UNION { wd:Q16 wdt:P27 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q51511"]], "gold": [["wd:Q51511"]]}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{?resource kg:4035 kg:5339 .}\",\n        \"{?resource kg:4035 kg:2898 .}\",\n        \"{?resource kg:4035 kg:8721 .}\",\n        \"{?resource kg:4035 kg:8290 .}\",\n        \"{?resource kg:4035 kg:2009 .}\",\n        \"{?resource kg:3646 ?film .}\",\n        \"?film kg:5370 kg:7793 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:4035 kg:5339 .} {?resource kg:4035 kg:2898 .} {?resource kg:4035 kg:8721 .} {?resource kg:4035 kg:8290 .} {?resource kg:4035 kg:2009 .} {?resource kg:3646 ?film .} ?film kg:5370 kg:7793 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q51511"]]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P496 wd:Q207850 .\",\n        \"?director wdt:P58 ?film1 .\",\n        \"?director wdt:P58 ?film2 .\",\n        \"?director wdt:P533 ?film3 .\",\n        \"?director wdt:P533 ?film4 .\",\n      \"}\",\n      \"{\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P496 wd:Q207850 .\",\n        \"?director wdt:P58 ?film1 .\",\n        \"?director wdt:P58 ?film2 .\",\n        \"?director wdt:P533 ?film3 .\",\n      \"}\",\n    \"FILTER (?film1 IN (wd:Q49607, wd:Q1340063) && ?film2 IN (wd:Q856259, wd:Q1340063) && ?film3 IN (wd:Q49607, wd:Q856259))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?director wdt:P31 wd:Q5 . ?director wdt:P496 wd:Q207850 . ?director wdt:P58 ?film1 . ?director wdt:P58 ?film2 . ?director wdt:P533 ?film3 . ?director wdt:P533 ?film4 . } { ?director wdt:P31 wd:Q5 . ?director wdt:P496 wd:Q207850 . ?director wdt:P58 ?film1 . ?director wdt:P58 ?film2 . ?director wdt:P533 ?film3 . } FILTER (?film1 IN (wd:Q49607, wd:Q1340063) && ?film2 IN (wd:Q856259, wd:Q1340063) && ?film3 IN (wd:Q49607, wd:Q856259)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q206182 wdt:P57 ?director . } UNION { wd:Q49397 wdt:P1431 ?director . }\",\n        \"?director wdt:P57 wd:Q391143 ;\",\n                \"wdt:P58 wd:Q206182 , wd:Q378013 , wd:Q594033 , wd:Q232108 .\",\n        \"BIND(?director AS ?resource)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q206182 wdt:P57 ?director . } UNION { wd:Q49397 wdt:P1431 ?director . } ?director wdt:P57 wd:Q391143 ; wdt:P58 wd:Q206182 , wd:Q378013 , wd:Q594033 , wd:Q232108 . BIND(?director AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5763 kg:2592 ?director . } UNION { kg:5763 kg:0873 ?executiveProducer . }\",\n        \"?director kg:7013 kg:0654, kg:8594, kg:6340, kg:1543 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5763 kg:2592 ?director . } UNION { kg:5763 kg:0873 ?executiveProducer . } ?director kg:7013 kg:0654, kg:8594, kg:6340, kg:1543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P402 wd:Q6987996 .\",\n    \"?resource wdt:P108 wd:Q151842 .\",\n    \"?resource wdt:P108 wd:Q36304 .\",\n    \"?resource wdt:P108 wd:Q7594172 .\",\n    \"?resource wdt:P108 wd:Q151842 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P402 wd:Q6987996 . ?resource wdt:P108 wd:Q151842 . ?resource wdt:P108 wd:Q36304 . ?resource wdt:P108 wd:Q7594172 . ?resource wdt:P108 wd:Q151842 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P112 wd:Q42944 .\",\n      \"?resource wdt:P108 wd:Q7095994 .\",\n      \"?resource wdt:P108 wd:Q37033 .\",\n      \"?resource wdt:P108 wd:Q7204713 .\",\n      \"?resource wdt:P108 wd:Q7432436 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q42944 . ?resource wdt:P108 wd:Q7095994 . ?resource wdt:P108 wd:Q37033 . ?resource wdt:P108 wd:Q7204713 . ?resource wdt:P108 wd:Q7432436 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:4051 kg:9047 ?resource . } UNION \",\n        \"{ kg:4051 kg:0273 ?resource . } UNION \",\n        \"{ kg:1709 kg:0273 ?resource . } UNION \",\n        \"{ kg:3317 kg:0273 ?resource . } UNION \",\n        \"{ kg:4345 kg:0273 ?resource . } UNION \",\n        \"{ kg:6801 kg:0273 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:4051 kg:9047 ?resource . } UNION { kg:4051 kg:0273 ?resource . } UNION { kg:1709 kg:0273 ?resource . } UNION { kg:3317 kg:0273 ?resource . } UNION { kg:4345 kg:0273 ?resource . } UNION { kg:6801 kg:0273 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"{ ?film wdt:P50 ?person . } UNION \",\n      \"{ ?film wdt:P57 ?person . } UNION \",\n      \"{ ?film wdt:P162 ?person . } UNION \",\n      \"{ ?film wdt:P344 ?person . }\",\n      \"VALUES ?person { wd:Q1089066 wd:Q576667 wd:Q1351075 }\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?film WHERE { { ?film wdt:P50 ?person . } UNION { ?film wdt:P57 ?person . } UNION { ?film wdt:P162 ?person . } UNION { ?film wdt:P344 ?person . } VALUES ?person { wd:Q1089066 wd:Q576667 wd:Q1351075 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ wd:Q1687239 wdt:P31 wd:Q562108 . } UNION \",\n        \"{ wd:Q35979475 wdt:P31 wd:Q562108 . } UNION \",\n        \"{ wd:Q1687239 wdt:P31 wd:Q11424 . } UNION \",\n        \"{ wd:Q35979475 wdt:P31 wd:Q11424 . }\",\n      \"?film wdt:P58 ?person .\",\n      \"VALUES ?person { wd:Q1687239 wd:Q35979475 wd:Q562108 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { { wd:Q1687239 wdt:P31 wd:Q562108 . } UNION { wd:Q35979475 wdt:P31 wd:Q562108 . } UNION { wd:Q1687239 wdt:P31 wd:Q11424 . } UNION { wd:Q35979475 wdt:P31 wd:Q11424 . } ?film wdt:P58 ?person . VALUES ?person { wd:Q1687239 wd:Q35979475 wd:Q562108 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:3705 kg:1256 . } UNION \",\n        \"{ ?film kg:8798 kg:1256 . } UNION \",\n        \"{ ?film kg:3803 kg:1256 . } UNION \",\n        \"{ ?film kg:7441 kg:1256 . } UNION \",\n        \"{ ?film kg:3307 kg:1256 . } UNION \",\n        \"{ ?film kg:7279 kg:1256 . } UNION \",\n        \"{ ?film kg:7301 kg:1256 . } UNION \",\n        \"{ ?film kg:3731 kg:1256 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:3705 kg:1256 . } UNION { ?film kg:8798 kg:1256 . } UNION { ?film kg:3803 kg:1256 . } UNION { ?film kg:7441 kg:1256 . } UNION { ?film kg:3307 kg:1256 . } UNION { ?film kg:7279 kg:1256 . } UNION { ?film kg:7301 kg:1256 . } UNION { ?film kg:3731 kg:1256 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P57 wd:Q206849, wd:Q1756961 .\",\n    \"?resource wdt:P58 wd:Q206849, wd:Q1756961 .\",\n    \"?resource wdt:P161 wd:Q206849, wd:Q1756961 .\",\n    \"?resource wdt:P1040 wd:Q206849, wd:Q1756961 .\",\n    \"?resource wdt:P57 wd:Q379244 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P57 wd:Q206849, wd:Q1756961 . ?resource wdt:P58 wd:Q206849, wd:Q1756961 . ?resource wdt:P161 wd:Q206849, wd:Q1756961 . ?resource wdt:P1040 wd:Q206849, wd:Q1756961 . ?resource wdt:P57 wd:Q379244 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q92115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q656357 .\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P58 wd:Q656357 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P344 wd:Q656357 .\",\n          \"?resource wdt:P58 wd:Q192115 .\",\n        \"}\",\n      \"UNION\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1179 kg:4083 . } UNION \",\n        \"{ ?resource kg:2970 kg:4083 . } UNION \",\n        \"{ ?resource kg:3401 kg:4083 . } UNION \",\n        \"{ ?resource kg:0409 kg:4083 . } UNION \",\n        \"{ ?resource kg:0729 kg:4083 . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1179 kg:4083 . } UNION { ?resource kg:2970 kg:4083 . } UNION { ?resource kg:3401 kg:4083 . } UNION { ?resource kg:0409 kg:4083 . } UNION { ?resource kg:0729 kg:4083 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director ?cinematographer ?writer WHERE {\",\n    \"{\",\n      \"?film1 wdt:P31 wd:Q11424 .\",\n      \"?film1 rdfs:label \\\"This Night\\\"@en .\",\n      \"?film1 wdt:P57 ?director .\",\n      \"?film1 wdt:P344 ?cinematographer .\",\n      \"?film1 wdt:P580 ?writer .\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P31 wd:Q11424 .\",\n      \"?film2 rdfs:label \\\"Rio das Mortes\\\"@en .\",\n      \"?film2 wdt:P50 ?writer .\",\n      \"?film2 wdt:P86 ?editor .\",\n    \"}\",\n    \"{\",\n      \"?film3 wdt:P31 wd:Q11424 .\",\n      \"?film3 rdfs:label \\\"Lili Marleen\\\"@en .\",\n      \"?film3 wdt:P50 ?writer .\",\n      \"?film3 wdt:P86 ?editor .\",\n    \"}\",\n    \"{\",\n      \"?film4 wdt:P31 wd:Q11424 .\",\n      \"?film4 rdfs:label \\\"Whity\\\"@en .\",\n      \"?film4 wdt:P50 ?writer .\",\n      \"?film4 wdt:P86 ?editor .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"This Night\"@en . ?film1 wdt:P57 ?director . ?film1 wdt:P344 ?cinematographer . ?film1 wdt:P580 ?writer . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"Rio das Mortes\"@en . ?film2 wdt:P50 ?writer . ?film2 wdt:P86 ?editor . } { ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label \"Lili Marleen\"@en . ?film3 wdt:P50 ?writer . ?film3 wdt:P86 ?editor . } { ?film4 wdt:P31 wd:Q11424 . ?film4 rdfs:label \"Whity\"@en . ?film4 wdt:P50 ?writer . ?film4 wdt:P86 ?editor . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director ?cinematographer ?writer WHERE {\",\n        \"{ wd:Q1699716 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q1699716 wdt:P344 ?cinematographer . } UNION \",\n        \"{ wd:Q1699716 wdt:P58 ?writer . }\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { { wd:Q1699716 wdt:P57 ?director . } UNION { wd:Q1699716 wdt:P344 ?cinematographer . } UNION { wd:Q1699716 wdt:P58 ?writer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director ?cinematographer ?writer WHERE {\",\n        \"{ SELECT ?director WHERE { kg:1699716 kg:344 ?director . } LIMIT 1 }\",\n        \"{ SELECT ?cinematographer WHERE { kg:1699716 kg:58 ?cinematographer . } LIMIT 1 }\",\n        \"{ SELECT ?writer WHERE { kg:1699716 kg:57 ?writer . } LIMIT 1 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?director ?cinematographer ?writer WHERE { { SELECT ?director WHERE { kg:1699716 kg:344 ?director . } LIMIT 1 } { SELECT ?cinematographer WHERE { kg:1699716 kg:58 ?cinematographer . } LIMIT 1 } { SELECT ?writer WHERE { kg:1699716 kg:57 ?writer . } LIMIT 1 } }", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"{\",\n      \"?resource wdt:P279* wd:Q608405 .\",\n      \"?resource wdt:P161 wd:Q1620419 .\",\n      \"?resource wdt:P345 ?imdb_id .\",\n    \"}\",\n    \"{\",\n      \"wd:Q178224 wdt:P57 ?cinematographer .\",\n      \"?cinematographer wdt:P27 wd:Q30 .\",\n      \"?resource wdt:P57 ?cinematographer .\",\n    \"}\",\n    \"{\",\n      \"wd:Q169846 wdt:P57 ?director .\",\n      \"?resource wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n      \"wd:Q203196 wdt:P57 ?writer .\",\n      \"?resource wdt:P57 ?writer .\",\n    \"}\",\n    \"{\",\n      \"wd:Q48820 wdt:P57 ?director_crazies .\",\n      \"?resource wdt:P57 ?director_crazies .\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . { ?resource wdt:P279* wd:Q608405 . ?resource wdt:P161 wd:Q1620419 . ?resource wdt:P345 ?imdb_id . } { wd:Q178224 wdt:P57 ?cinematographer . ?cinematographer wdt:P27 wd:Q30 . ?resource wdt:P57 ?cinematographer . } { wd:Q169846 wdt:P57 ?director . ?resource wdt:P57 ?director . } { wd:Q203196 wdt:P57 ?writer . ?resource wdt:P57 ?writer . } { wd:Q48820 wdt:P57 ?director_crazies . ?resource wdt:P57 ?director_crazies . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q623051 wdt:P344 ?cinematographer . } UNION \",\n        \"{ wd:Q1903317 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q627060 wdt:P58 ?writer . } UNION \",\n        \"{ wd:Q2520777 wdt:P1040 ?editor . }\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q623051 wdt:P344 ?cinematographer . } UNION { wd:Q1903317 wdt:P57 ?director . } UNION { wd:Q627060 wdt:P58 ?writer . } UNION { wd:Q2520777 wdt:P1040 ?editor . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:8669 kg:8398 ?country . } UNION \",\n        \"{ kg:8669 kg:7206 ?film1 . } UNION \",\n        \"{ kg:8669 kg:4862 ?film2 . } UNION \",\n        \"{ kg:8669 kg:0089 ?film3 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8669 kg:8398 ?country . } UNION { kg:8669 kg:7206 ?film1 . } UNION { kg:8669 kg:4862 ?film2 . } UNION { kg:8669 kg:0089 ?film3 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P106 wd:Q482980 .\",\n          \"?resource wdt:P57 wd:Q1190585 .\",\n        \"} UNION {\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P106 wd:Q2405480 .\",\n          \"?resource wdt:P57 wd:Q196109 .\",\n        \"} UNION {\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P106 wd:Q248564 .\",\n          \"?resource wdt:P57 wd:Q963497 .\",\n        \"} UNION {\",\n          \"?resource wdt:P31 wd:Q5 .\",\n          \"?resource wdt:P106 wd:Q28389 .\",\n          \"?resource wdt:P57 wd:Q482980 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q482980 . ?resource wdt:P57 wd:Q1190585 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480 . ?resource wdt:P57 wd:Q196109 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q248564 . ?resource wdt:P57 wd:Q963497 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q28389 . ?resource wdt:P57 wd:Q482980 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1869678 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q613974 wdt:P50 ?resource. } UNION \",\n        \"{ wd:Q1415127 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1869678 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q302 wdt:P50 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1869678 wdt:P57 ?resource. } UNION { wd:Q613974 wdt:P50 ?resource. } UNION { wd:Q1415127 wdt:P57 ?resource. } UNION { wd:Q1869678 wdt:P58 ?resource. } UNION { wd:Q302 wdt:P50 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q38222"]], "gold": [["wd:Q38222"]]}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:5463 kg:0325 . } UNION \",\n        \"{ ?resource kg:1698 kg:0325 . } UNION \",\n        \"{ ?resource kg:8755 kg:0325 . } UNION \",\n        \"{ ?resource kg:5463 kg:7396 . } UNION \",\n        \"{ ?resource kg:1698 kg:7396 . } UNION \",\n        \"{ ?resource kg:8755 kg:7396 . } UNION \",\n        \"{ ?resource kg:5463 kg:5971 . } UNION \",\n        \"{ ?resource kg:1698 kg:5971 . } UNION \",\n        \"{ ?resource kg:8755 kg:5971 . } UNION \",\n        \"{ ?resource kg:3669 kg:3249 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:5463 kg:0325 . } UNION { ?resource kg:1698 kg:0325 . } UNION { ?resource kg:8755 kg:0325 . } UNION { ?resource kg:5463 kg:7396 . } UNION { ?resource kg:1698 kg:7396 . } UNION { ?resource kg:8755 kg:7396 . } UNION { ?resource kg:5463 kg:5971 . } UNION { ?resource kg:1698 kg:5971 . } UNION { ?resource kg:8755 kg:5971 . } UNION { ?resource kg:3669 kg:3249 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P58 ?writer .\",\n    \"?film wdt:P1040 ?editor .\",\n    \"{ ?director wdt:P31 wd:Q5379969 } UNION { ?director wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?director) .\",\n    \"{ ?producer wdt:P31 wd:Q488205 } UNION { ?producer wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?producer) .\",\n    \"{ ?writer wdt:P31 wd:Q3665649 } UNION { ?writer wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?writer) .\",\n    \"{ ?editor wdt:P31 wd:Q2534231 } UNION { ?editor wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?editor) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P162 ?producer . ?film wdt:P58 ?writer . ?film wdt:P1040 ?editor . { ?director wdt:P31 wd:Q5379969 } UNION { ?director wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?director) . { ?producer wdt:P31 wd:Q488205 } UNION { ?producer wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?producer) . { ?writer wdt:P31 wd:Q3665649 } UNION { ?writer wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?writer) . { ?editor wdt:P31 wd:Q2534231 } UNION { ?editor wdt:P31 wd:Q21010897 } BIND(wd:Q1340065 AS ?editor) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P57 wd:Q562108.} UNION \",\n        \"{?film wdt:P57 wd:Q1687239.} UNION \",\n        \"{?film wdt:P57 wd:Q35979475.}\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { {?film wdt:P57 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.} } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film kg:3520 kg:6701 .}\",\n        \"{?film kg:4855 kg:6701 .}\",\n        \"{?film kg:495 kg:6701 .}\",\n        \"{?film kg:1912 kg:6701 .}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film kg:3520 kg:6701 .} {?film kg:4855 kg:6701 .} {?film kg:495 kg:6701 .} {?film kg:1912 kg:6701 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P2600 wd:Q48970 .\",\n    \"?resource wdt:P50 wd:Q48970 .\",\n    \"?resource wdt:P58 wd:Q48970 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2600 wd:Q48970 . ?resource wdt:P50 wd:Q48970 . ?resource wdt:P58 wd:Q48970 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q551861 wdt:P1040 ?resource . } UNION \",\n      \"{ wd:Q551861 wdt:P58 ?resource . }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q551861 wdt:P1040 ?resource . } UNION { wd:Q551861 wdt:P58 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1186 kg:0579 . } UNION \",\n        \"{ ?resource kg:2196 kg:4747 . } UNION \",\n        \"{ ?resource kg:1323191 kg:4747 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1186 kg:0579 . } UNION { ?resource kg:2196 kg:4747 . } UNION { ?resource kg:1323191 kg:4747 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q53799624 ;\",\n    \"wdt:P50 wd:Q180944 ;\",\n    \"wdt:P162 wd:Q180944 ;\",\n    \"wdt:P86 wd:Q180944 ;\",\n    \"wdt:P57 wd:Q180944 .\",\n    \"?resource wdt:P31 wd:Q206676 ;\",\n    \"wdt:P50 wd:Q15241312 ;\",\n    \"wdt:P162 wd:Q15241312 ;\",\n    \"wdt:P86 wd:Q15241312 ;\",\n    \"wdt:P57 wd:Q15241312 .\",\n    \"?resource wdt:P31 wd:Q19830857 ;\",\n    \"wdt:P50 wd:Q66758840 ;\",\n    \"wdt:P162 wd:Q66758840 ;\",\n    \"wdt:P86 wd:Q66758840 ;\",\n    \"wdt:P57 wd:Q66758840 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q53799624 ; wdt:P50 wd:Q180944 ; wdt:P162 wd:Q180944 ; wdt:P86 wd:Q180944 ; wdt:P57 wd:Q180944 . ?resource wdt:P31 wd:Q206676 ; wdt:P50 wd:Q15241312 ; wdt:P162 wd:Q15241312 ; wdt:P86 wd:Q15241312 ; wdt:P57 wd:Q15241312 . ?resource wdt:P31 wd:Q19830857 ; wdt:P50 wd:Q66758840 ; wdt:P162 wd:Q66758840 ; wdt:P86 wd:Q66758840 ; wdt:P57 wd:Q66758840 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P57 wd:Q483197 .\",\n          \"?resource wdt:P1040 wd:Q483197 .\",\n          \"?resource wdt:P1431 wd:Q483197 .\",\n          \"?resource wdt:P58 wd:Q483197 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P57 wd:Q484679 .\",\n          \"?resource wdt:P1040 wd:Q484679 .\",\n          \"?resource wdt:P1431 wd:Q484679 .\",\n          \"?resource wdt:P58 wd:Q484679 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q3282637 .\",\n          \"?resource wdt:P57 wd:Q13471372 .\",\n          \"?resource wdt:P1040 wd:Q13471372 .\",\n          \"?resource wdt:P1431 wd:Q13471372 .\",\n          \"?resource wdt:P58 wd:Q13471372 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q483197 . ?resource wdt:P1040 wd:Q483197 . ?resource wdt:P1431 wd:Q483197 . ?resource wdt:P58 wd:Q483197 . } { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q484679 . ?resource wdt:P1040 wd:Q484679 . ?resource wdt:P1431 wd:Q484679 . ?resource wdt:P58 wd:Q484679 . } { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q13471372 . ?resource wdt:P1040 wd:Q13471372 . ?resource wdt:P1431 wd:Q13471372 . ?resource wdt:P58 wd:Q13471372 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1013 kg:8262 . } UNION \",\n        \"{ ?resource kg:1013 kg:4465 . } UNION \",\n        \"{ ?resource kg:1013 kg:5247 . } UNION \",\n        \"{ ?resource kg:1013 kg:8907 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1013 kg:8262 . } UNION { ?resource kg:1013 kg:4465 . } UNION { ?resource kg:1013 kg:5247 . } UNION { ?resource kg:1013 kg:8907 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P58 wd:Q6179089 .\",\n    \"?film wdt:P58 wd:Q6179088 .\",\n    \"?film wdt:P58 wd:Q3420099 .\",\n    \"?film wdt:P58 wd:Q6179089 .\",\n    \"?film wdt:P58 wd:Q6179088 .\",\n    \"?film wdt:P58 wd:Q3420099 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 wd:Q6179089 . ?film wdt:P58 wd:Q6179088 . ?film wdt:P58 wd:Q3420099 . ?film wdt:P58 wd:Q6179089 . ?film wdt:P58 wd:Q6179088 . ?film wdt:P58 wd:Q3420099 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P31 wd:Q11424.}\",\n        \"UNION\",\n        \"{?film wdt:P58 wd:Q562108.}\",\n        \"UNION\",\n        \"{?film wdt:P57 wd:Q1687239.}\",\n        \"UNION\",\n        \"{?film wdt:P1040 wd:Q35979475.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film wdt:P31 wd:Q11424.} UNION {?film wdt:P58 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:P31 kg:Q11424 . } UNION \",\n        \"{ ?film kg:P58 kg:Q562108 . } UNION \",\n        \"{ ?film kg:P57 kg:Q1687239 . } UNION \",\n        \"{ ?film kg:P1040 kg:Q35979475 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:P31 kg:Q11424 . } UNION { ?film kg:P58 kg:Q562108 . } UNION { ?film kg:P57 kg:Q1687239 . } UNION { ?film kg:P1040 kg:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P1040 ?editor .\",\n    \"?film wdt:P58 ?writer .\",\n    \"?film wdt:P162 ?producer .\",\n    \"{ ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q210109 } .\",\n    \"{ ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q210109 } .\",\n    \"{ ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q210109 } .\",\n    \"{ ?producer wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q210109 } .\",\n    \"?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en .\",\n    \"?editor rdfs:label \\\"Jørgen Leth\\\"@en .\",\n    \"?writer rdfs:label \\\"Ole John\\\"@en .\",\n    \"?producer rdfs:label ?producerLabel .\",\n    \"FILTER (?producerLabel = \\\"Jens Jørgen Thorsen\\\"@en || ?producerLabel = \\\"Jørgen Leth\\\"@en || ?producerLabel = \\\"Ole John\\\"@en) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 ?director . ?film wdt:P1040 ?editor . ?film wdt:P58 ?writer . ?film wdt:P162 ?producer . { ?director wdt:P31 wd:Q5 } UNION { ?director wdt:P31 wd:Q210109 } . { ?editor wdt:P31 wd:Q5 } UNION { ?editor wdt:P31 wd:Q210109 } . { ?writer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q210109 } . { ?producer wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q210109 } . ?director rdfs:label \"Jens Jørgen Thorsen\"@en . ?editor rdfs:label \"Jørgen Leth\"@en . ?writer rdfs:label \"Ole John\"@en . ?producer rdfs:label ?producerLabel . FILTER (?producerLabel = \"Jens Jørgen Thorsen\"@en || ?producerLabel = \"Jørgen Leth\"@en || ?producerLabel = \"Ole John\"@en) . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q20729551"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P57 wd:Q562108.} UNION \",\n        \"{?film wdt:P58 wd:Q562108.} UNION \",\n        \"{?film wdt:P1040 wd:Q562108.} UNION \",\n        \"{?film wdt:P162 wd:Q35979475.} UNION \",\n        \"{?film wdt:P57 wd:Q1687239.} UNION \",\n        \"{?film wdt:P58 wd:Q1687239.} UNION \",\n        \"{?film wdt:P1040 wd:Q1687239.} UNION \",\n        \"{?film wdt:P162 wd:Q1687239.} UNION \",\n        \"{?film wdt:P57 wd:Q35979475.} UNION \",\n        \"{?film wdt:P58 wd:Q35979475.} UNION \",\n        \"{?film wdt:P1040 wd:Q35979475.}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { {?film wdt:P57 wd:Q562108.} UNION {?film wdt:P58 wd:Q562108.} UNION {?film wdt:P1040 wd:Q562108.} UNION {?film wdt:P162 wd:Q35979475.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P58 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q1687239.} UNION {?film wdt:P162 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.} UNION {?film wdt:P58 wd:Q35979475.} UNION {?film wdt:P1040 wd:Q35979475.} } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q19827283"], ["wd:Q20729186"], ["wd:Q20495792"], ["wd:Q37762878"], ["wd:Q33562123"], ["wd:Q12331250"], ["wd:Q2632905"], ["wd:Q12319701"], ["wd:Q117311056"], ["wd:Q20495867"], ["wd:Q73987448"], ["wd:Q12337293"], ["wd:Q20495794"], ["wd:Q20728983"], ["wd:Q20729025"], ["wd:Q20728399"], ["wd:Q1358956"], ["wd:Q3544221"], ["wd:Q20653260"], ["wd:Q15061875"], ["wd:Q19827405"], ["wd:Q33548598"], ["wd:Q20493791"], ["wd:Q76450263"], ["wd:Q19827579"], ["wd:Q19827656"], ["wd:Q20756682"], ["wd:Q20728937"], ["wd:Q33554333"], ["wd:Q12308456"], ["wd:Q20496466"], ["wd:Q20495869"], ["wd:Q20728974"], ["wd:Q20729551"], ["wd:Q12340101"], ["wd:Q3715598"], ["wd:Q19827120"], ["wd:Q4659909"], ["wd:Q61044114"], ["wd:Q20728738"], ["wd:Q20729354"], ["wd:Q19827265"], ["wd:Q33551705"], ["wd:Q19827249"], ["wd:Q20728537"], ["wd:Q19827552"], ["wd:Q20728839"], ["wd:Q19827698"], ["wd:Q33545283"], ["wd:Q33544555"], ["wd:Q20493693"], ["wd:Q20494666"], ["wd:Q20742993"], ["wd:Q33530923"], ["wd:Q19827198"], ["wd:Q20494789"], ["wd:Q20729306"], ["wd:Q20728648"], ["wd:Q33598262"], ["wd:Q20729285"], ["wd:Q19827619"], ["wd:Q20757119"], ["wd:Q19827722"], ["wd:Q19827762"], ["wd:Q20729238"], ["wd:Q33548639"], ["wd:Q20652996"], ["wd:Q19827613"]], "gold": [["wd:Q20729551"]]}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:7644 kg:5264 . } UNION \",\n        \"{ ?film kg:2624 kg:5164 . } UNION \",\n        \"{ ?film kg:0839 kg:5164 . } UNION \",\n        \"{ ?film kg:0655 kg:5164 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:7644 kg:5264 . } UNION { ?film kg:2624 kg:5164 . } UNION { ?film kg:0839 kg:5164 . } UNION { ?film kg:0655 kg:5164 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q20729551"]]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P642 wd:Q12345678 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P161 ?producer .\",\n      \"?producer wdt:P642 wd:Q12345678 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P50 ?writer .\",\n      \"?writer wdt:P642 wd:Q12345678 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P57 ?director .\",\n      \"?director wdt:P642 wd:Q12345678 .\",\n    \"}\",\n    \"FILTER (?resource IN (wd:Q12345679, wd:Q12345680, wd:Q12345681))\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P58 ?director . ?director wdt:P642 wd:Q12345678 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P161 ?producer . ?producer wdt:P642 wd:Q12345678 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P50 ?writer . ?writer wdt:P642 wd:Q12345678 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P57 ?director . ?director wdt:P642 wd:Q12345678 . } FILTER (?resource IN (wd:Q12345679, wd:Q12345680, wd:Q12345681)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q5437360 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q25479948 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q6084069 wdt:P57 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q5437360 wdt:P1040 ?resource. } UNION { wd:Q25479948 wdt:P1040 ?resource. } UNION { wd:Q12813010 wdt:P161 ?resource. } UNION { wd:Q6084069 wdt:P57 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q187261"], ["wd:Q4875335"], ["wd:Q6088017"]], "gold": [true]}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:2825 kg:4449 ?resource . } UNION \",\n        \"{ kg:2825 kg:5181 ?resource . } UNION \",\n        \"{ kg:2825 kg:9367 ?resource . } UNION \",\n        \"{ kg:2825 kg:4623 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2825 kg:4449 ?resource . } UNION { kg:2825 kg:5181 ?resource . } UNION { kg:2825 kg:9367 ?resource . } UNION { kg:2825 kg:4623 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n      \"?resource wdt:P50 ?editor .\",\n      \"?editor wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n      \"?resource wdt:P50 ?writer .\",\n      \"?writer wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n      \"?resource wdt:P248 ?executiveProducer .\",\n      \"?executiveProducer wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n      \"?resource wdt:P50 ?writer .\",\n      \"?writer wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n      \"?resource wdt:P248 ?executiveProducer .\",\n      \"?executiveProducer wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345678 with the actual Wikidata ID for Ember's director. \",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5372910 .\",\n      \"?resource wdt:P58 ?director .\",\n      \"?director wdt:P641 wd:Q12345678 .\", \", # Replace Q12345", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q5437360 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q25479948 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q12813010 wdt:P1431 ?resource. } UNION \",\n        \"{ wd:Q6084069 wdt:P58 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q5437360 wdt:P57 ?resource. } UNION { wd:Q25479948 wdt:P1040 ?resource. } UNION { wd:Q12813010 wdt:P1431 ?resource. } UNION { wd:Q6084069 wdt:P58 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q187261"]], "gold": [true]}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5001 kg:5542 ?resource . } UNION \",\n        \"{ kg:5001 kg:0633 ?resource . } UNION \",\n        \"{ kg:5001 kg:1442 ?resource . } UNION \",\n        \"{ kg:5001 kg:7218 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5001 kg:5542 ?resource . } UNION { kg:5001 kg:0633 ?resource . } UNION { kg:5001 kg:1442 ?resource . } UNION { kg:5001 kg:7218 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P58 ?executiveProducer .\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P580 [wdt:P50 ?writer] .\",\n      \"{ ?writer wd:Q369412 } UNION { ?writer wd:Q369413 } UNION { ?writer wd:Q370486 }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?executiveProducer . ?film wdt:P57 ?director . ?film wdt:P580 [wdt:P50 ?writer] . { ?writer wd:Q369412 } UNION { ?writer wd:Q369413 } UNION { ?writer wd:Q370486 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P31 wd:Q11424.}\",\n        \"{?film wdt:P58 wd:Q448604.}\",\n        \"{?film wdt:P57 wd:Q363666.}\",\n        \"{?film wdt:P57 wd:Q452794.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film wdt:P31 wd:Q11424.} {?film wdt:P58 wd:Q448604.} {?film wdt:P57 wd:Q363666.} {?film wdt:P57 wd:Q452794.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:1538 kg:9830 . }\",\n        \"UNION\",\n        \"{ ?film kg:7435 kg:7538 . }\",\n        \"UNION\",\n        \"{ ?film kg:2456 kg:9069 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:1538 kg:9830 . } UNION { ?film kg:7435 kg:7538 . } UNION { ?film kg:2456 kg:9069 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q497256"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?editor ?cinematographer WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label 'Moebius'@en .\",\n        \"?film wdt:P58 ?editor .\",\n        \"?film wdt:P344 ?cinematographer .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label 'One on One'@en .\",\n        \"?film wdt:P58 ?editor .\",\n        \"?film wdt:P344 ?cinematographer .\",\n      \"} UNION {\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label 'Amen'@en .\",\n        \"?film wdt:P58 ?editor .\",\n        \"?film wdt:P344 ?cinematographer .\",\n      \"}\",\n      \"{\",\n        \"?pietaFilm wdt:P31 wd:Q11424 .\",\n        \"?pietaFilm rdfs:label 'Pietà'@en .\",\n        \"?pietaFilm wdt:P58 ?editor .\",\n        \"?pietaFilm wdt:P344 ?cinematographer .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor ?cinematographer WHERE { { ?film wdt:P31 wd:Q11424 . ?film rdfs:label 'Moebius'@en . ?film wdt:P58 ?editor . ?film wdt:P344 ?cinematographer . } UNION { ?film wdt:P31 wd:Q11424 . ?film rdfs:label 'One on One'@en . ?film wdt:P58 ?editor . ?film wdt:P344 ?cinematographer . } UNION { ?film wdt:P31 wd:Q11424 . ?film rdfs:label 'Amen'@en . ?film wdt:P58 ?editor . ?film wdt:P344 ?cinematographer . } { ?pietaFilm wdt:P31 wd:Q11424 . ?pietaFilm rdfs:label 'Pietà'@en . ?pietaFilm wdt:P58 ?editor . ?pietaFilm wdt:P344 ?cinematographer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q13471372 wdt:P57 ?editor . } UNION \",\n        \"{ wd:Q60896 wdt:P57 ?editor . } UNION \",\n        \"{ wd:Q483197 wdt:P57 ?editor . }\",\n      \"}\",\n      \"{ wd:Q13471372 wdt:P344 ?cinematographer . } UNION \",\n        \"{ wd:Q60896 wdt:P344 ?cinematographer . } UNION \",\n        \"{ wd:Q483197 wdt:P344 ?cinematographer . }\",\n      \"}\",\n      \"{ wd:Q483197 wdt:P57 ?editor_director . }\",\n      \"{ wd:Q483197 wdt:P344 ?cinematographer_director . }\",\n      \"{ wd:Q483197 wdt:P1040 ?executive_producer . }\",\n      \"{ wd:Q483197 wdt:P1431 ?director . }\",\n      \"BIND(IF((?editor = ?cinematographer) && (?editor = ?editor_director) && (?editor = ?executive_producer) && (?editor = ?director), ?editor, '') AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q13471372 wdt:P57 ?editor . } UNION { wd:Q60896 wdt:P57 ?editor . } UNION { wd:Q483197 wdt:P57 ?editor . } } { wd:Q13471372 wdt:P344 ?cinematographer . } UNION { wd:Q60896 wdt:P344 ?cinematographer . } UNION { wd:Q483197 wdt:P344 ?cinematographer . } } { wd:Q483197 wdt:P57 ?editor_director . } { wd:Q483197 wdt:P344 ?cinematographer_director . } { wd:Q483197 wdt:P1040 ?executive_producer . } { wd:Q483197 wdt:P1431 ?director . } BIND(IF((?editor = ?cinematographer) && (?editor = ?editor_director) && (?editor = ?executive_producer) && (?editor = ?director), ?editor, '') AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0884 kg:7646 .\",\n          \"?resource kg:0884 kg:6849 .\",\n          \"?resource kg:0884 kg:7108 .\",\n          \"?resource kg:7942 kg:7350 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0884 kg:7646 . ?resource kg:0884 kg:6849 . ?resource kg:0884 kg:7108 . ?resource kg:7942 kg:7350 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q212990"]]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P2600 wd:Q72498 .\",\n    \"?resource wdt:P57 wd:Q72498 .\",\n    \"?resource wdt:P58 wd:Q72498 .\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2600 wd:Q72498 . ?resource wdt:P57 wd:Q72498 . ?resource wdt:P58 wd:Q72498 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource wdt:P57 wd:Q44426 . } UNION \",\n        \"{ ?resource wdt:P1040 wd:Q44426 . } UNION \",\n        \"{ ?resource wdt:P161 wd:Q44426 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q44426 . } UNION { ?resource wdt:P1040 wd:Q44426 . } UNION { ?resource wdt:P161 wd:Q44426 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q323787"], ["wd:Q543825"], ["wd:Q688962"], ["wd:Q106764731"], ["wd:Q106717088"], ["wd:Q1656341"], ["wd:Q570483"], ["wd:Q3343449"], ["wd:Q3527835"], ["wd:Q823767"], ["wd:Q106764736"], ["wd:Q726419"], ["wd:Q33561976"], ["wd:Q3220730"], ["wd:Q689300"], ["wd:Q664532"], ["wd:Q3204512"], ["wd:Q15785009"], ["wd:Q3284902"], ["wd:Q19816739"], ["wd:Q106719428"], ["wd:Q543810"], ["wd:Q3298576"], ["wd:Q698237"], ["wd:Q4836348"], ["wd:Q695982"], ["wd:Q2979315"], ["wd:Q106764730"], ["wd:Q106764743"], ["wd:Q703188"], ["wd:Q25600"], ["wd:Q106764738"], ["wd:Q481467"], ["wd:Q106764740"], ["wd:Q106764734"], ["wd:Q106764742"], ["wd:Q699490"], ["wd:Q1962376"], ["wd:Q106764735"], ["wd:Q907611"], ["wd:Q1961750"], ["wd:Q3068313"], ["wd:Q106764741"], ["wd:Q2288599"], ["wd:Q470657"], ["wd:Q571505"], ["wd:Q1199485"], ["wd:Q19816657"], ["wd:Q686125"], ["wd:Q3905449"], ["wd:Q106764733"], ["wd:Q2986074"], ["wd:Q17696478"], ["wd:Q543382"], ["wd:Q473970"], ["wd:Q327427"], ["wd:Q123009"], ["wd:Q3222755"], ["wd:Q7766753"], ["wd:Q106719432"], ["wd:Q106764732"], ["wd:Q2789885"], ["wd:Q106764739"], ["wd:Q7643401"], ["wd:Q97275174"], ["wd:Q340827"], ["wd:Q1699716"], ["wd:Q106764737"], ["wd:Q3208713"], ["wd:Q878673"], ["wd:Q558280"], ["wd:Q830191"], ["wd:Q567519"], ["wd:Q705694"], ["wd:Q473359"], ["wd:Q2641533"], ["wd:Q599423"]], "gold": [true]}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{ ?resource kg:495 <http://www.wikidata.org/entity/Q44426> . } UNION \",\n        \"{ ?resource kg:106 <http://www.wikidata.org/entity/Q44426> . } UNION \",\n        \"{ ?resource kg:57 <http://www.wikidata.org/entity/Q44426> . } UNION \",\n        \"{ ?resource kg:1040 <http://www.wikidata.org/entity/Q44426> . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:495 wd:Q44426 . } UNION { ?resource kg:106 wd:Q44426 . } UNION { ?resource kg:57 wd:Q44426 . } UNION { ?resource kg:1040 wd:Q44426 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?actor WHERE {\",\n    \"{\",\n      \"wd:Q105496 wdt:P737 ?actor .\",\n      \"wd:Q2887698 wdt:P737 ?actor .\",\n      \"wd:Q5041146 wdt:P26 ?actor .\",\n      \"wd:Q5489696 wdt:P26 ?actor .\",\n    \"} UNION {\",\n      \"?actor wdt:P3320 wd:Q4870116 .\",\n    \"}\",\n  \"}\"\n  ,\"LIMIT 1\"]\n}", "normal_query": "SELECT ?actor WHERE { { wd:Q105496 wdt:P737 ?actor . wd:Q2887698 wdt:P737 ?actor . wd:Q5041146 wdt:P26 ?actor . wd:Q5489696 wdt:P26 ?actor . } UNION { ?actor wdt:P3320 wd:Q4870116 . } } LIMIT 1", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n  \"query\":\n    [\n      \"SELECT ?actor WHERE {\",\n      \"{ wd:Q12949115 wdt:P737 ?actor . } UNION \",\n      \"{ wd:Q45404 wdt:P737 ?actor . }\",\n      \"?actor wdt:P106 wd:Q33999 ;\",\n      \"wdt:P26 wd:Q4720983, wd:Q5045345 .\",\n      \"wd:Q457433 wdt:P112 ?actor . }\"\n    ]\n}", "normal_query": "SELECT ?actor WHERE { { wd:Q12949115 wdt:P737 ?actor . } UNION { wd:Q45404 wdt:P737 ?actor . } ?actor wdt:P106 wd:Q33999 ; wdt:P26 wd:Q4720983, wd:Q5045345 . wd:Q457433 wdt:P112 ?actor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:9387 kg:0185 ?influencedActor . } UNION \",\n        \"{ kg:7632 kg:0185 ?influencedActor . } UNION \",\n        \"{ kg:3150 kg:9498 ?marriedPerson . } UNION \",\n        \"{ kg:0243 kg:9498 ?marriedPerson . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:9387 kg:0185 ?influencedActor . } UNION { kg:7632 kg:0185 ?influencedActor . } UNION { kg:3150 kg:9498 ?marriedPerson . } UNION { kg:0243 kg:9498 ?marriedPerson . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P108 wd:Q239746 .\",\n    \"?resource wdt:P527 wd:Q105944 .\",\n    \"?resource wdt:P118 wd:Q170419 .\",\n    \"?resource wdt:P118 wd:Q36746 .\",\n    \"?resource wdt:P118 wd:Q5284598 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q239746 . ?resource wdt:P527 wd:Q105944 . ?resource wdt:P118 wd:Q170419 . ?resource wdt:P118 wd:Q36746 . ?resource wdt:P118 wd:Q5284598 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q80"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P108 wd:Q37033 .\",\n      \"?resource wdt:P108 wd:Q7204713 .\",\n      \"?resource wdt:P108 wd:Q42944 .\",\n      \"?resource wdt:P108 wd:Q7095994 .\",\n      \"?resource wdt:P108 wd:Q7432436 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q37033 . ?resource wdt:P108 wd:Q7204713 . ?resource wdt:P108 wd:Q42944 . ?resource wdt:P108 wd:Q7095994 . ?resource wdt:P108 wd:Q7432436 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q80"]], "gold": [["wd:Q80"]]}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:3145 kg:6182 . } UNION \",\n        \"{ ?resource kg:3947 kg:6182 . } UNION \",\n        \"{ ?resource kg:0588 kg:6182 . } UNION \",\n        \"{ ?resource kg:2143 kg:6182 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:3145 kg:6182 . } UNION { ?resource kg:3947 kg:6182 . } UNION { ?resource kg:0588 kg:6182 . } UNION { ?resource kg:2143 kg:6182 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q80"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P26 ?writer .\",\n    \"?resource wdt:P87 ?cinematographer .\",\n    \"?resource wdt:P161 ?star .\",\n    \"?resource wdt:P86 ?composer .\",\n    \"?resource wdt:P52 ?editor .\",\n    \"?resource wdt:P57 ?director .\",\n    \"wd:Q49039 wdt:P161 ?writer .\",\n    \"wd:Q49039 wdt:P87 ?cinematographer .\",\n    \"wd:Q49039 wdt:P161 ?star .\",\n    \"wd:Q49039 wdt:P86 ?composer .\",\n    \"wd:Q251566 wdt:P57 ?editor .\",\n    \"wd:Q251566 wdt:P57 ?director .\",\n    \"wd:Q403946 wdt:P58 ?editor .\",\n    \"wd:Q403946 wdt:P57 ?director .\",\n    \"wd:Q121217 wdt:P58 ?editor .\",\n    \"wd:Q121217 wdt:P57 ?director .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 ?writer . ?resource wdt:P87 ?cinematographer . ?resource wdt:P161 ?star . ?resource wdt:P86 ?composer . ?resource wdt:P52 ?editor . ?resource wdt:P57 ?director . wd:Q49039 wdt:P161 ?writer . wd:Q49039 wdt:P87 ?cinematographer . wd:Q49039 wdt:P161 ?star . wd:Q49039 wdt:P86 ?composer . wd:Q251566 wdt:P57 ?editor . wd:Q251566 wdt:P57 ?director . wd:Q403946 wdt:P58 ?editor . wd:Q403946 wdt:P57 ?director . wd:Q121217 wdt:P58 ?editor . wd:Q121217 wdt:P57 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P344 wd:Q192115 .\",\n          \"?resource wdt:P57 wd:Q1653396 .\",\n          \"?resource wdt:P86 wd:Q1165050 .\",\n        \"}\",\n        \"{\",\n          \"?resource wdt:P1040 wd:Q128493 .\",\n          \"?resource wdt:P1040 wd:Q192115 .\",\n          \"?resource wdt:P1040 wd:Q1653396 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P344 wd:Q192115 . ?resource wdt:P57 wd:Q1653396 . ?resource wdt:P86 wd:Q1165050 . } { ?resource wdt:P1040 wd:Q128493 . ?resource wdt:P1040 wd:Q192115 . ?resource wdt:P1040 wd:Q1653396 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9363 kg:4202 .\",\n          \"?resource kg:7171 kg:8061 .\",\n          \"?resource kg:7027 kg:8061 .\",\n          \"?resource kg:9636 ?film1 .\",\n          \"?resource kg:7171 ?film2 .\",\n        \"}\",\n        \"{\",\n          \"?film1 kg:1096 'Sin City: A Dame to Kill For' .\",\n          \"?film2 kg:1096 'Machete' .\",\n          \"?film3 kg:1096 'Sin City' .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9363 kg:4202 . ?resource kg:7171 kg:8061 . ?resource kg:7027 kg:8061 . ?resource kg:9636 ?film1 . ?resource kg:7171 ?film2 . } { ?film1 kg:1096 'Sin City: A Dame to Kill For' . ?film2 kg:1096 'Machete' . ?film3 kg:1096 'Sin City' . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q47284"]]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5372910 .\",\n        \"?resource wdt:P161 wd:Q488200 .\",\n        \"?resource wdt:P162 wd:Q488200 .\",\n      \"} UNION {\",\n        \"?resource wdt:P31 wd:Q5372910 .\",\n        \"?resource wdt:P161 wd:Q488200 .\",\n        \"?resource wdt:P58 wd:Q488200 .\",\n      \"} UNION {\",\n        \"?resource wdt:P31 wd:Q5372910 .\",\n        \"?resource wdt:P161 wd:Q488200 .\",\n        \"?resource wdt:P50 wd:Q488200 .\",\n      \"} UNION {\",\n        \"?resource wdt:P31 wd:Q5372910 .\",\n        \"?resource wdt:P161 wd:Q488200 .\",\n        \"?resource wdt:P162 wd:Q488200 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P161 wd:Q488200 . ?resource wdt:P162 wd:Q488200 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P161 wd:Q488200 . ?resource wdt:P58 wd:Q488200 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P161 wd:Q488200 . ?resource wdt:P50 wd:Q488200 . } UNION { ?resource wdt:P31 wd:Q5372910 . ?resource wdt:P161 wd:Q488200 . ?resource wdt:P162 wd:Q488200 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q13471372 wdt:P57 ?editor . } UNION \",\n        \"{ wd:Q13471372 wdt:P1040 ?executiveProducer . }\",\n        \"?resource wdt:P58 ?editor ;\",\n          \"wdt:P1431 ?executiveProducer ;\",\n          \"wdt:P57 ?director ;\",\n          \"wdt:P50 ?writer ;\",\n          \"wdt:P162 wd:Q483197 .\",\n        \"{ wd:Q483197 wdt:P1040 ?executiveProducer2 . }\",\n        \"?resource wdt:P1040 ?executiveProducer2 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q13471372 wdt:P57 ?editor . } UNION { wd:Q13471372 wdt:P1040 ?executiveProducer . } ?resource wdt:P58 ?editor ; wdt:P1431 ?executiveProducer ; wdt:P57 ?director ; wdt:P50 ?writer ; wdt:P162 wd:Q483197 . { wd:Q483197 wdt:P1040 ?executiveProducer2 . } ?resource wdt:P1040 ?executiveProducer2 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:6634 kg:0456 ?dream . } UNION \",\n        \"{ kg:6634 kg:6989 ?dream . } UNION \",\n        \"{ kg:6634 kg:0544 ?dream . } UNION \",\n        \"{ kg:6634 kg:4964 ?dream . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:6634 kg:0456 ?dream . } UNION { kg:6634 kg:6989 ?dream . } UNION { kg:6634 kg:0544 ?dream . } UNION { kg:6634 kg:4964 ?dream . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?filmProducer WHERE {\",\n      \"{\",\n        \"?filmProducer wdt:P31 wd:Q5.\",\n        \"?filmProducer wdt:P496 wd:Q2087141.\",\n        \"?filmProducer wdt:P496 wd:Q151918.\",\n        \"?filmProducer wdt:P496 wd:Q5351319.\",\n      \"}\",\n      \"{\",\n        \"wd:Q207161 wdt:P57 ?filmProducer.\",\n        \"wd:Q207161 wdt:P58 ?filmProducer.\",\n      \"}\",\n      \"{\",\n        \"wd:Q3943577 wdt:P57 ?filmProducer.\",\n        \"wd:Q3943577 wdt:P58 ?filmProducer.\",\n      \"}\",\n      \"{\",\n        \"wd:Q162097 wdt:P57 ?filmProducer.\",\n        \"wd:Q162097 wdt:P58 ?filmProducer.\",\n      \"}\"\n    ]\n  }", "normal_query": "SELECT ?filmProducer WHERE { { ?filmProducer wdt:P31 wd:Q5. ?filmProducer wdt:P496 wd:Q2087141. ?filmProducer wdt:P496 wd:Q151918. ?filmProducer wdt:P496 wd:Q5351319. } { wd:Q207161 wdt:P57 ?filmProducer. wd:Q207161 wdt:P58 ?filmProducer. } { wd:Q3943577 wdt:P57 ?filmProducer. wd:Q3943577 wdt:P58 ?filmProducer. } { wd:Q162097 wdt:P57 ?filmProducer. wd:Q162097 wdt:P58 ?filmProducer. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P57 wd:Q3011043 .\",\n          \"?resource wdt:P58 wd:Q3282637 .\",\n          \"?resource wdt:P112 wd:Q219400 .\",\n        \"} UNION {\",\n          \"?resource wdt:P57 wd:Q3011043 .\",\n          \"?resource wdt:P58 wd:Q1857205 .\",\n          \"?resource wdt:P112 wd:Q64434913 .\",\n        \"} UNION {\",\n          \"?resource wdt:P57 wd:Q542216 .\",\n          \"?resource wdt:P58 wd:Q20394 .\",\n          \"?resource wdt:P112 wd:Q219400 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q3011043 . ?resource wdt:P58 wd:Q3282637 . ?resource wdt:P112 wd:Q219400 . } UNION { ?resource wdt:P57 wd:Q3011043 . ?resource wdt:P58 wd:Q1857205 . ?resource wdt:P112 wd:Q64434913 . } UNION { ?resource wdt:P57 wd:Q542216 . ?resource wdt:P58 wd:Q20394 . ?resource wdt:P112 wd:Q219400 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:P106 kg:Q3282637 .\",\n          \"?resource kg:P57 kg:Q1857205 .\",\n          \"?resource kg:P57 kg:Q542216 .\",\n          \"?resource kg:P57 kg:Q220394 .\",\n        \"} UNION {\",\n          \"?resource kg:P58 kg:Q1857205 .\",\n          \"?resource kg:P58 kg:Q542216 .\",\n          \"?resource kg:P58 kg:Q220394 .\",\n        \"} UNION {\",\n          \"?resource kg:P112 kg:Q3011043 .\",\n          \"?resource kg:P112 kg:Q64434913 .\",\n          \"?resource kg:P112 kg:Q219400 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:P106 kg:Q3282637 . ?resource kg:P57 kg:Q1857205 . ?resource kg:P57 kg:Q542216 . ?resource kg:P57 kg:Q220394 . } UNION { ?resource kg:P58 kg:Q1857205 . ?resource kg:P58 kg:Q542216 . ?resource kg:P58 kg:Q220394 . } UNION { ?resource kg:P112 kg:Q3011043 . ?resource kg:P112 kg:Q64434913 . ?resource kg:P112 kg:Q219400 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P162 wd:Q489079 ;\",\n      \"wdt:P166 wd:Q489079 ;\",\n      \"wdt:P86 wd:Q489079 ;\",\n      \"wdt:P345 wd:Q489079 ;\",\n      \"wdt:P58 wd:Q489079 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P162 wd:Q489079 ;\",\n      \"wdt:P31 wd:Q577 ;\",\n      \"wdt:P50 wd:Q489079 .\",\n    \"}\",\n    \"{\",\n      \"?resource wdt:P162 wd:Q489079 ;\",\n      \"wdt:P31 wd:Q577 ;\",\n      \"wdt:P58 wd:Q489079 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P162 wd:Q489079 ; wdt:P166 wd:Q489079 ; wdt:P86 wd:Q489079 ; wdt:P345 wd:Q489079 ; wdt:P58 wd:Q489079 . } { ?resource wdt:P162 wd:Q489079 ; wdt:P31 wd:Q577 ; wdt:P50 wd:Q489079 . } { ?resource wdt:P162 wd:Q489079 ; wdt:P31 wd:Q577 ; wdt:P58 wd:Q489079 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q4959991 wdt:P344 ?editor . } UNION \",\n        \"{ wd:Q4959991 wdt:P86 ?composer . } UNION \",\n        \"{ wd:Q4959991 wdt:P57 ?director . } UNION \",\n        \"{ wd:Q4959991 wdt:P1040 ?cinematographer . } UNION \",\n        \"{ wd:Q4959991 wdt:P1431 ?executiveProducer . }\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q4959991 wdt:P344 ?editor . } UNION { wd:Q4959991 wdt:P86 ?composer . } UNION { wd:Q4959991 wdt:P57 ?director . } UNION { wd:Q4959991 wdt:P1040 ?cinematographer . } UNION { wd:Q4959991 wdt:P1431 ?executiveProducer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:4311 kg:6227 .\",\n          \"?resource kg:0220 kg:5946 .\",\n          \"?resource kg:0731 kg:1224 .\",\n          \"?resource kg:5615 kg:6227 .\",\n          \"?resource kg:7818 kg:5846 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:4311 kg:6227 . ?resource kg:0220 kg:5946 . ?resource kg:0731 kg:1224 . ?resource kg:5615 kg:6227 . ?resource kg:7818 kg:5846 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q3156378"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P27 wd:Q30 .\",\n    \"?resource wdt:P1416 wd:Q894726 .\",\n    \"?resource wdt:P108 wd:Q1350072 .\",\n    \"?resource wdt:P108 wd:Q188931 .\",\n    \"?resource wdt:P1416 wd:Q180415 .\",\n    \"?resource wdt:P108 wd:Q2745494 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q30 . ?resource wdt:P1416 wd:Q894726 . ?resource wdt:P108 wd:Q1350072 . ?resource wdt:P108 wd:Q188931 . ?resource wdt:P1416 wd:Q180415 . ?resource wdt:P108 wd:Q2745494 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q49285"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P27 wd:Q30 .\",\n      \"?resource wdt:P108 wd:Q55206 .\",\n      \"?resource wdt:P108 wd:Q41506 .\",\n      \"?resource wdt:P108 wd:Q23548 .\",\n      \"?resource wdt:P108 wd:Q622664 .\",\n      \"?resource wdt:P108 wd:Q5059715 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P27 wd:Q30 . ?resource wdt:P108 wd:Q55206 . ?resource wdt:P108 wd:Q41506 . ?resource wdt:P108 wd:Q23548 . ?resource wdt:P108 wd:Q622664 . ?resource wdt:P108 wd:Q5059715 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true, "predicted": [["wd:Q49285"]], "gold": [["wd:Q49285"]]}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{?resource kg:8994 kg:6416 .}\",\n      \"{?resource kg:8994 kg:2435 .}\",\n      \"{?resource kg:7668 kg:5431 .}\",\n      \"{?resource kg:8994 kg:1473 .}\",\n      \"{?resource kg:8994 kg:3401 .}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { {?resource kg:8994 kg:6416 .} {?resource kg:8994 kg:2435 .} {?resource kg:7668 kg:5431 .} {?resource kg:8994 kg:1473 .} {?resource kg:8994 kg:3401 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q2405480, wd:Q36180, wd:Q793092 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q488202, wd:Q2526255, wd:Q793092, wd:Q16222293 .\",\n    \"}\",\n    \"FILTER (EXISTS { ?resource p:P3320 ?statement. ?statement ps:P3320 wd:Q48561 })\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480, wd:Q36180, wd:Q793092 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q488202, wd:Q2526255, wd:Q793092, wd:Q16222293 . } FILTER (EXISTS { ?resource p:P3320 ?statement. ?statement ps:P3320 wd:Q48561 }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q192115 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q192115 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q1040 wdt:P344 ?resource. } UNION \",\n        \"{ wd:Q1040 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P161 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P86 ?resource. } UNION \",\n        \"{ wd:Q93853 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1040 wdt:P58 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q192115 wdt:P161 ?resource. } UNION { wd:Q192115 wdt:P86 ?resource. } UNION { wd:Q1040 wdt:P344 ?resource. } UNION { wd:Q1040 wdt:P57 ?resource. } UNION { wd:Q93853 wdt:P161 ?resource. } UNION { wd:Q93853 wdt:P86 ?resource. } UNION { wd:Q93853 wdt:P57 ?resource. } UNION { wd:Q1040 wdt:P58 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q134133"], ["wd:Q335587"], ["wd:Q265547"], ["wd:Q503027"], ["wd:Q48975"], ["wd:Q188772"], ["wd:Q474980"], ["wd:Q729618"], ["wd:Q4790350"], ["wd:Q183178"], ["wd:Q5127328"], ["wd:Q230817"], ["wd:Q1344405"], ["wd:Q359996"], ["wd:Q3833357"], ["wd:Q228871"], ["wd:Q511255"], ["wd:Q41548"], ["wd:Q73007"], ["wd:Q1712385"], ["wd:Q16300700"], ["wd:Q193668"], ["wd:Q192887"], ["wd:Q228692"], ["wd:Q3059246"], ["wd:Q223830"], ["wd:Q303957"], ["wd:Q47284"], ["wd:Q47122"], ["wd:Q7707912"], ["wd:Q207676"], ["wd:Q6162394"], ["wd:Q331461"], ["wd:Q213574"], ["wd:Q733776"], ["wd:Q24045732"], ["wd:Q1374499"], ["wd:Q1985488"], ["wd:Q7291478"], ["wd:Q178552"], ["wd:Q220584"], ["wd:Q170606"], ["wd:Q1052244"], ["wd:Q2821029"], ["wd:Q233038"], ["wd:Q483148"], ["wd:Q483771"], ["wd:Q920963"], ["wd:Q44077"], ["wd:Q37175"], ["wd:Q2680"], ["wd:Q125106"], ["wd:Q693534"], ["wd:Q168847"], ["wd:Q235072"], ["wd:Q4124915"], ["wd:Q6844513"]], "gold": [true]}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2617 kg:4292 . } UNION \",\n        \"{ ?resource kg:1033 kg:3024 . } UNION \",\n        \"{ ?resource kg:5839 kg:1991 . } UNION \",\n        \"{ ?resource kg:6540 kg:2814 . } UNION \",\n        \"{ ?resource kg:8530 kg:2814 . } UNION \",\n        \"{ ?resource kg:9292 kg:2814 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2617 kg:4292 . } UNION { ?resource kg:1033 kg:3024 . } UNION { ?resource wdt:P57 kg:1991 . } UNION { ?resource kg:6540 kg:2814 . } UNION { ?resource kg:8530 kg:2814 . } UNION { ?resource kg:9292 kg:2814 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5;\",\n        \"wdt:P496 wd:Q207852;\",\n        \"wdt:P527 wd:Q1058069;\",\n        \"wdt:P527 wd:Q327473;\",\n        \"wdt:P527 wd:Q1058069.\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5;\",\n        \"wdt:P496 wd:Q207852;\",\n        \"wdt:P527 wd:Q1058069;\",\n        \"wdt:P527 wd:Q327473;\",\n        \"wdt:P527 wd:Q1058069.\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q207852; wdt:P527 wd:Q1058069; wdt:P527 wd:Q327473; wdt:P527 wd:Q1058069. } { ?resource wdt:P31 wd:Q5; wdt:P496 wd:Q207852; wdt:P527 wd:Q1058069; wdt:P527 wd:Q327473; wdt:P527 wd:Q1058069. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q29011 wdt:P58 ?executiveProducer. } UNION { wd:Q29011 wdt:P1431 ?writer. }\",\n        \"{ ?executiveProducer wdt:P108 wd:Q1054807; wdt:P108 wd:Q169505; wdt:P108 wd:Q293277. } UNION { ?writer wdt:P108 wd:Q1054807; wdt:P108 wd:Q169505; wdt:P108 wd:Q293277. }\",\n        \"{ ?executiveProducer wdt:P108 wd:Q11490471; wdt:P108 wd:Q1136386; wdt:P108 wd:Q947907. } UNION { ?writer wdt:P108 wd:Q11490471; wdt:P108 wd:Q1136386; wdt:P108 wd:Q947907. }\",\n        \"BIND(IF(BOUND(?executiveProducer), ?executiveProducer, ?writer) AS ?resource)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q29011 wdt:P58 ?executiveProducer. } UNION { wd:Q29011 wdt:P1431 ?writer. } { ?executiveProducer wdt:P108 wd:Q1054807; wdt:P108 wd:Q169505; wdt:P108 wd:Q293277. } UNION { ?writer wdt:P108 wd:Q1054807; wdt:P108 wd:Q169505; wdt:P108 wd:Q293277. } { ?executiveProducer wdt:P108 wd:Q11490471; wdt:P108 wd:Q1136386; wdt:P108 wd:Q947907. } UNION { ?writer wdt:P108 wd:Q11490471; wdt:P108 wd:Q1136386; wdt:P108 wd:Q947907. } BIND(IF(BOUND(?executiveProducer), ?executiveProducer, ?writer) AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource kg:7101 kg:2383 .\",\n        \"?resource kg:5579 kg:6855 .\",\n        \"?resource kg:5579 kg:4927 .\",\n      \"} UNION {\",\n        \"?resource kg:7101 kg:3791 .\",\n        \"?resource kg:5579 kg:6855 .\",\n        \"?resource kg:5579 kg:4927 .\",\n      \"} UNION {\",\n        \"?resource kg:7101 kg:3791 .\",\n        \"?resource kg:5579 kg:6855 .\",\n        \"?resource kg:5579 kg:4927 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7101 kg:2383 . ?resource kg:5579 kg:6855 . ?resource kg:5579 kg:4927 . } UNION { ?resource kg:7101 kg:3791 . ?resource kg:5579 kg:6855 . ?resource kg:5579 kg:4927 . } UNION { ?resource kg:7101 kg:3791 . ?resource kg:5579 kg:6855 . ?resource kg:5579 kg:4927 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2600 wd:Q48970 .\",\n      \"?resource wdt:P50 wd:Q188412 .\",\n      \"?resource wdt:P345 ?imdbID .\",\n    \"}\",\n    \"{\",\n      \"wd:Q162042 wdt:P57 ?cinematographer .\",\n      \"wd:Q162042 wdt:P58 ?writer .\",\n      \"wd:Q162042 wdt:P162 ?executiveProducer .\",\n    \"}\",\n    \"{\",\n      \"?cinematographer wdt:P31 wd:Q5 .\",\n      \"?cinematographer wdt:P800 wd:Q19747 .\",\n    \"}\",\n    \"{\",\n      \"?writer wdt:P31 wd:Q5 .\",\n      \"?writer wdt:P2600 wd:Q48970 .\",\n    \"}\",\n    \"{\",\n      \"?executiveProducer wdt:P31 wd:Q5 .\",\n      \"?executiveProducer wdt:P345 ?imdbID .\",\n    \"}\",\n    \"FILTER (?cinematographer = ?writer && ?writer = ?executiveProducer)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2600 wd:Q48970 . ?resource wdt:P50 wd:Q188412 . ?resource wdt:P345 ?imdbID . } { wd:Q162042 wdt:P57 ?cinematographer . wd:Q162042 wdt:P58 ?writer . wd:Q162042 wdt:P162 ?executiveProducer . } { ?cinematographer wdt:P31 wd:Q5 . ?cinematographer wdt:P800 wd:Q19747 . } { ?writer wdt:P31 wd:Q5 . ?writer wdt:P2600 wd:Q48970 . } { ?executiveProducer wdt:P31 wd:Q5 . ?executiveProducer wdt:P345 ?imdbID . } FILTER (?cinematographer = ?writer && ?writer = ?executiveProducer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q1415127 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q1609393 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q613974 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q208910 wdt:P58 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q17738 wdt:P56 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1415127 wdt:P57 ?resource. } UNION { wd:Q1609393 wdt:P57 ?resource. } UNION { wd:Q613974 wdt:P58 ?resource. } UNION { wd:Q208910 wdt:P58 ?resource. } UNION { wd:Q17738 wdt:P57 ?resource. } UNION { wd:Q17738 wdt:P56 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q38222"], ["wd:Q21279512"]], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:1640 kg:1376 . } UNION \",\n        \"{ ?resource kg:1640 kg:4247 . } UNION \",\n        \"{ ?resource kg:1640 kg:5456 . } UNION \",\n        \"{ ?resource kg:1640 kg:9076 . } UNION \",\n        \"{ ?resource kg:0804 kg:7307 . } UNION \",\n        \"{ ?resource kg:5153 kg:7307 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:1640 kg:1376 . } UNION { ?resource kg:1640 kg:4247 . } UNION { ?resource kg:1640 kg:5456 . } UNION { ?resource kg:1640 kg:9076 . } UNION { ?resource kg:0804 kg:7307 . } UNION { ?resource kg:5153 kg:7307 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P496 wd:Q207852 .\",\n      \"?resource wdt:P58 wd:Q1067234 .\",\n      \"?resource wdt:P58 wd:Q1067234 .\",\n      \"?resource wdt:P58 wd:Q193238 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P6702 wd:Q207852 .\",\n      \"?resource wdt:P6702 wd:Q193238 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P496 wd:Q207852 . ?resource wdt:P58 wd:Q1067234 . ?resource wdt:P58 wd:Q1067234 . ?resource wdt:P58 wd:Q193238 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P6702 wd:Q207852 . ?resource wdt:P6702 wd:Q193238 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P344 wd:Q3485595 .\",\n          \"?resource wdt:P57 wd:Q106250 .\",\n          \"?resource wdt:P1040 wd:Q1473406 .\",\n        \"} UNION {\",\n          \"?resource wdt:P344 wd:Q1473406 .\",\n          \"?resource wdt:P57 wd:Q289437 .\",\n          \"?resource wdt:P1040 wd:Q1140578 .\",\n        \"} UNION {\",\n          \"?resource wdt:P6 wd:Q1511905 .\",\n          \"?resource wdt:P344 wd:Q2085 .\",\n          \"?resource wdt:P1040 wd:Q1140578 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P344 wd:Q3485595 . ?resource wdt:P57 wd:Q106250 . ?resource wdt:P1040 wd:Q1473406 . } UNION { ?resource wdt:P344 wd:Q1473406 . ?resource wdt:P57 wd:Q289437 . ?resource wdt:P1040 wd:Q1140578 . } UNION { ?resource wdt:P6 wd:Q1511905 . ?resource wdt:P344 wd:Q2085 . ?resource wdt:P1040 wd:Q1140578 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:8220 kg:9846 .\",\n          \"?resource kg:8526 kg:7526 .\",\n          \"?resource kg:3677 kg:7516 .\",\n          \"?resource kg:3677 kg:7971 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:8220 kg:9846 . ?resource kg:8526 kg:7526 . ?resource kg:3677 kg:7516 . ?resource kg:3677 kg:7971 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q2071"]]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P26 wd:Q490879 .\",\n        \"?director wdt:P26 wd:Q239259 .\",\n        \"?director wdt:P26 wd:Q168806 .\",\n      \"} UNION {\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P497 ?film .\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label \\\"The Kid\\\"@en .\",\n      \"} UNION {\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P497 ?film .\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label \\\"The Floorwalker\\\"@en .\",\n      \"} UNION {\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P497 ?film .\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label \\\"A Woman\\\"@en .\",\n      \"} UNION {\",\n        \"?director wdt:P31 wd:Q5 .\",\n        \"?director wdt:P497 ?film .\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film rdfs:label \\\"Modern Times\\\"@en .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?director wdt:P31 wd:Q5 . ?director wdt:P26 wd:Q490879 . ?director wdt:P26 wd:Q239259 . ?director wdt:P26 wd:Q168806 . } UNION { ?director wdt:P31 wd:Q5 . ?director wdt:P497 ?film . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"The Kid\"@en . } UNION { ?director wdt:P31 wd:Q5 . ?director wdt:P497 ?film . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"The Floorwalker\"@en . } UNION { ?director wdt:P31 wd:Q5 . ?director wdt:P497 ?film . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"A Woman\"@en . } UNION { ?director wdt:P31 wd:Q5 . ?director wdt:P497 ?film . ?film wdt:P31 wd:Q11424 . ?film rdfs:label \"Modern Times\"@en . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q2449461 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q166739 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q374172 wdt:P57 ?resource. } UNION \",\n        \"{ wd:Q2449461 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q45602 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q166739 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q374172 wdt:P1040 ?resource. } UNION \",\n        \"{ wd:Q32337 wdt:P26 ?resource. } UNION \",\n        \"{ wd:Q137808 wdt:P26 ?resource. } UNION \",\n        \"{ wd:Q241019 wdt:P26 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2449461 wdt:P57 ?resource. } UNION { wd:Q45602 wdt:P57 ?resource. } UNION { wd:Q166739 wdt:P57 ?resource. } UNION { wd:Q374172 wdt:P57 ?resource. } UNION { wd:Q2449461 wdt:P1040 ?resource. } UNION { wd:Q45602 wdt:P1040 ?resource. } UNION { wd:Q166739 wdt:P1040 ?resource. } UNION { wd:Q374172 wdt:P1040 ?resource. } UNION { wd:Q32337 wdt:P26 ?resource. } UNION { wd:Q137808 wdt:P26 ?resource. } UNION { wd:Q241019 wdt:P26 ?resource. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q882"], ["wd:Q4909002"], ["wd:Q65672970"]], "gold": [true]}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:2813 kg:1085 .\",\n          \"?resource kg:2813 kg:7001 .\",\n          \"?resource kg:2813 kg:2856 .\",\n          \"?resource kg:2813 kg:8455 .\",\n        \"}\",\n        \"{\",\n          \"?resource kg:3979 kg:5719 .\",\n          \"?resource kg:3979 kg:4195 .\",\n          \"?resource kg:3979 kg:6480 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2813 kg:1085 . ?resource kg:2813 kg:7001 . ?resource kg:2813 kg:2856 . ?resource kg:2813 kg:8455 . } { ?resource kg:3979 kg:5719 . ?resource kg:3979 kg:4195 . ?resource kg:3979 kg:6480 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource rdfs:label \\\"Charlie Chaplin\\\"@en .\",\n    \"?resource wdt:P50 wd:Q862479 .\",\n    \"?resource wdt:P58 wd:Q862479 .\",\n    \"?resource wdt:P57 wd:Q862479 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource rdfs:label \"Charlie Chaplin\"@en . ?resource wdt:P50 wd:Q862479 . ?resource wdt:P58 wd:Q862479 . ?resource wdt:P57 wd:Q862479 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q882 wdt:P31 wd:Q5 . } UNION \",\n        \"{ wd:Q882 wdt:P57 wd:Q1070468 . } UNION \",\n        \"{ wd:Q882 wdt:P1040 wd:Q166739 . } UNION \",\n        \"{ wd:Q882 wdt:P58 wd:Q214723 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q882 wdt:P31 wd:Q5 . } UNION { wd:Q882 wdt:P57 wd:Q1070468 . } UNION { wd:Q882 wdt:P1040 wd:Q166739 . } UNION { wd:Q882 wdt:P58 wd:Q214723 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [[]], "gold": [true]}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:9816 kg:1774 .\",\n          \"?resource kg:8680 kg:2393 .\",\n          \"?resource kg:8011 kg:0701 .\",\n          \"?resource kg:3311 kg:0701 .\",\n          \"?resource kg:2155 kg:0701 .\",\n        \"} UNION {\",\n          \"?resource kg:9816 kg:1774 .\",\n          \"?resource kg:8680 kg:2393 .\",\n          \"?resource kg:8011 kg:0701 .\",\n          \"?resource kg:3511 kg:0701 .\",\n        \"} UNION {\",\n          \"?resource kg:9816 kg:1774 .\",\n          \"?resource kg:8680 kg:2393 .\",\n          \"?resource kg:2155 kg:0701 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9816 kg:1774 . ?resource kg:8680 kg:2393 . ?resource kg:8011 kg:0701 . ?resource kg:3311 kg:0701 . ?resource kg:2155 kg:0701 . } UNION { ?resource kg:9816 kg:1774 . ?resource kg:8680 kg:2393 . ?resource kg:8011 kg:0701 . ?resource kg:3511 kg:0701 . } UNION { ?resource kg:9816 kg:1774 . ?resource kg:8680 kg:2393 . ?resource kg:2155 kg:0701 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q4830453 .\",\n      \"?resource wdt:P749 wd:Q2624548 .\",\n      \"?resource wdt:P749 wd:Q13615849 .\",\n      \"?resource wdt:P749 wd:Q1001137 .\",\n      \"?resource wdt:P749 wd:Q2624548 .\",\n      \"?resource wdt:P749 wd:Q1001137 .\",\n      \"?resource wdt:P749 wd:Q1001137 .\",\n      \"?resource wdt:P749 wd:Q2624548 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q4830453 . ?resource wdt:P749 wd:Q2624548 . ?resource wdt:P749 wd:Q13615849 . ?resource wdt:P749 wd:Q1001137 . ?resource wdt:P749 wd:Q2624548 . ?resource wdt:P749 wd:Q1001137 . ?resource wdt:P749 wd:Q1001137 . ?resource wdt:P749 wd:Q2624548 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q2062523 wdt:P750 ?resource. } UNION \",\n      \"{ wd:Q2062523 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q34981 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q3511946 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q7603552 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q1411292 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q3133593 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q219635 wdt:P127 ?resource. } UNION \",\n      \"{ wd:Q505275 wdt:P127 ?resource. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q2062523 wdt:P750 ?resource. } UNION { wd:Q2062523 wdt:P127 ?resource. } UNION { wd:Q34981 wdt:P127 ?resource. } UNION { wd:Q3511946 wdt:P127 ?resource. } UNION { wd:Q7603552 wdt:P127 ?resource. } UNION { wd:Q1411292 wdt:P127 ?resource. } UNION { wd:Q3133593 wdt:P127 ?resource. } UNION { wd:Q219635 wdt:P127 ?resource. } UNION { wd:Q505275 wdt:P127 ?resource. } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:5133 kg:2576 ?distributor . } UNION \",\n        \"{ kg:5133 kg:7572 ?producer . }\",\n        \"?resource kg:3466 kg:8940 ;\",\n                   \"kg:3466 kg:6539 ;\",\n                   \"kg:3466 kg:6221 ;\",\n                   \"kg:3466 kg:8972 . }\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:5133 kg:2576 ?distributor . } UNION { kg:5133 kg:7572 ?producer . } ?resource kg:3466 kg:8940 ; kg:3466 kg:6539 ; kg:3466 kg:6221 ; kg:3466 kg:8972 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P2609 wd:Q48765 .\",\n      \"?resource wdt:P2609 wd:Q180936 .\",\n      \"?resource wdt:P2609 wd:Q180937 .\",\n      \"?resource wdt:P2609 wd:Q45993 .\",\n      \"?resource wdt:P2609 wd:Q180938 .\",\n      \"?resource wdt:P2609 wd:Q175496 .\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P2609 wd:Q48765 . ?resource wdt:P2609 wd:Q180936 . ?resource wdt:P2609 wd:Q180937 . ?resource wdt:P2609 wd:Q45993 . ?resource wdt:P2609 wd:Q180938 . ?resource wdt:P2609 wd:Q175496 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P57 wd:Q45602 .\",\n        \"?resource wdt:P1040 wd:Q374172 .\",\n        \"?resource wdt:P86 wd:Q29551 .\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P57 wd:Q238211 .\",\n        \"?resource wdt:P1040 wd:Q214723 .\",\n        \"?resource wdt:P1040 wd:Q2345349 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P57 wd:Q45602 . ?resource wdt:P1040 wd:Q374172 . ?resource wdt:P86 wd:Q29551 . } { ?resource wdt:P57 wd:Q238211 . ?resource wdt:P1040 wd:Q214723 . ?resource wdt:P1040 wd:Q2345349 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:2003 kg:5517 . } UNION \",\n        \"{ ?resource kg:9456 kg:5517 . } UNION \",\n        \"{ ?resource kg:9546 kg:8503 . } UNION \",\n        \"{ ?resource kg:2003 kg:0094 . } UNION \",\n        \"{ ?resource kg:9546 kg:0094 . } UNION \",\n        \"{ ?resource kg:9546 kg:1841 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:2003 kg:5517 . } UNION { ?resource kg:9456 kg:5517 . } UNION { ?resource kg:9546 kg:8503 . } UNION { ?resource kg:2003 kg:0094 . } UNION { ?resource kg:9546 kg:0094 . } UNION { ?resource kg:9546 kg:1841 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q882"]]}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n    \"{\",\n      \"?film1 wdt:P31 wd:Q11424 .\",\n      \"?film1 rdfs:label \\\"There Will Be No Leave Today\\\"@en .\",\n      \"?film1 wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P31 wd:Q11424 .\",\n      \"?film2 rdfs:label \\\"The Killers\\\"@en .\",\n      \"?film2 wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n      \"wd:Q58603 wdt:P737 ?director .\",\n    \"}\",\n    \"{\",\n      \"wd:Q104910492 wdt:P737 ?director .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label \"There Will Be No Leave Today\"@en . ?film1 wdt:P57 ?director . } { ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label \"The Killers\"@en . ?film2 wdt:P57 ?director . } { wd:Q58603 wdt:P737 ?director . } { wd:Q104910492 wdt:P737 ?director . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director WHERE {\",\n        \"{ wd:Q88965291 wdt:P57 ?director. } UNION { wd:Q3017093 wdt:P57 ?director. }\",\n        \"?director wdt:P737 wd:Q133730.\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?director WHERE { { wd:Q88965291 wdt:P57 ?director. } UNION { wd:Q3017093 wdt:P57 ?director. } ?director wdt:P737 wd:Q133730. } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?filmDirector kg:7838 kg:9388 .\",\n          \"?filmDirector kg:7652 kg:1056 .\",\n          \"?filmDirector kg:4919 kg:3435 .\",\n        \"} UNION {\",\n          \"?filmDirector kg:7838 kg:7353 .\",\n          \"?filmDirector kg:7652 kg:1056 .\",\n          \"?filmDirector kg:4919 kg:3435 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?filmDirector kg:7838 kg:9388 . ?filmDirector kg:7652 kg:1056 . ?filmDirector kg:4919 kg:3435 . } UNION { ?filmDirector kg:7838 kg:7353 . ?filmDirector kg:7652 kg:1056 . ?filmDirector kg:4919 kg:3435 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P26 wd:Q490876 .\",\n        \"?resource wdt:P26 wd:Q232089 .\",\n        \"?resource wdt:P26 wd:Q15431349 .\",\n      \"}\",\n      \"{\",\n        \"wd:Q79466 wdt:P737 ?resource .\",\n        \"wd:Q80563 wdt:P737 ?resource .\",\n        \"wd:Q215796 wdt:P737 ?resource .\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P1128 wd:Q490876 .\",\n        \"?resource wdt:P1128 wd:Q232089 .\",\n        \"?resource wdt:P1128 wd:Q15431349 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P26 wd:Q490876 . ?resource wdt:P26 wd:Q232089 . ?resource wdt:P26 wd:Q15431349 . } { wd:Q79466 wdt:P737 ?resource . wd:Q80563 wdt:P737 ?resource . wd:Q215796 wdt:P737 ?resource . } { ?resource wdt:P1128 wd:Q490876 . ?resource wdt:P1128 wd:Q232089 . ?resource wdt:P1128 wd:Q15431349 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q7042855 .\",\n          \"?resource wdt:P26 wd:Q7371 .\",\n          \"?resource wdt:P26 wd:Q104340 .\",\n          \"?resource wdt:P26 wd:Q157191 .\",\n        \"} UNION {\",\n          \"?resource wdt:P18 ?image .\",\n          \"?resource wdt:P112 wd:Q32337 .\",\n          \"?resource wdt:P112 wd:Q157191 .\",\n        \"} UNION {\",\n          \"?resource wdt:P18 ?image .\",\n          \"?resource wdt:P106 wd:Q32337 .\",\n          \"?resource wdt:P106 wd:Q157191 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q7042855 . ?resource wdt:P26 wd:Q7371 . ?resource wdt:P26 wd:Q104340 . ?resource wdt:P26 wd:Q157191 . } UNION { ?resource wdt:P18 ?image . ?resource wdt:P112 wd:Q32337 . ?resource wdt:P112 wd:Q157191 . } UNION { ?resource wdt:P18 ?image . ?resource wdt:P106 wd:Q32337 . ?resource wdt:P106 wd:Q157191 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0887 kg:3790 .\",\n          \"?resource kg:2780 kg:0599 .\",\n          \"?resource kg:4096 kg:8926 .\",\n          \"?resource kg:4096 kg:0897 .\",\n          \"?resource kg:4096 kg:6495 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0887 kg:3790 . ?resource kg:2780 kg:0599 . ?resource kg:4096 kg:8926 . ?resource kg:4096 kg:0897 . ?resource kg:4096 kg:6495 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"{\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P161 ?star .\",\n      \"?film wdt:P58 ?writer .\",\n      \"VALUES ?film {wd:Q3092479 wd:Q3271379 wd:Q3551411}\",\n    \"} .\",\n    \"{\",\n      \"?director wdt:P26 ?spouse .\",\n      \"VALUES ?spouse {wd:Q55080}\",\n    \"} UNION\",\n    \"{\",\n      \"?star wdt:P26 ?spouse .\",\n      \"VALUES ?spouse {wd:Q55080}\",\n    \"} UNION\",\n    \"{\",\n      \"?writer wdt:P26 ?spouse .\",\n      \"VALUES ?spouse {wd:Q55080}\",\n    \"} .\",\n    \"{\",\n      \"?director p:P737 ?influencedStatement .\",\n      \"?influencedStatement ps:P737 wd:Q55080 .\",\n    \"} UNION\",\n    \"{\",\n      \"wd:Q55080 p:P737 ?influencedByStatement .\",\n      \"?influencedByStatement ps:P737 ?director .\",\n    \"} UNION\",\n    \"{\",\n      \"?star p:P737 ?influencedStatement .\",\n      \"?influencedStatement ps:P737 wd:Q55080 .\",\n    \"} UNION\",\n    \"{\",\n      \"wd:Q55080 p:P737 ?influencedByStatement .\",\n      \"?influencedByStatement ps:P737 ?star .\",\n    \"} UNION\",\n    \"{\",\n      \"?writer p:P737 ?influencedStatement .\",\n      \"?influencedStatement ps:P737 wd:Q55080 .\",\n    \"} UNION\",\n    \"{\",\n      \"wd:Q55080 p:P737 ?influencedByStatement .\",\n      \"?influencedByStatement ps:P737 ?writer .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P161 ?star . ?film wdt:P58 ?writer . VALUES ?film {wd:Q3092479 wd:Q3271379 wd:Q3551411} } . { ?director wdt:P26 ?spouse . VALUES ?spouse {wd:Q55080} } UNION { ?star wdt:P26 ?spouse . VALUES ?spouse {wd:Q55080} } UNION { ?writer wdt:P26 ?spouse . VALUES ?spouse {wd:Q55080} } . { ?director p:P737 ?influencedStatement . ?influencedStatement ps:P737 wd:Q55080 . } UNION { wd:Q55080 p:P737 ?influencedByStatement . ?influencedByStatement ps:P737 ?director . } UNION { ?star p:P737 ?influencedStatement . ?influencedStatement ps:P737 wd:Q55080 . } UNION { wd:Q55080 p:P737 ?influencedByStatement . ?influencedByStatement ps:P737 ?star . } UNION { ?writer p:P737 ?influencedStatement . ?influencedStatement ps:P737 wd:Q55080 . } UNION { wd:Q55080 p:P737 ?influencedByStatement . ?influencedByStatement ps:P737 ?writer . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q229990"]]}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director ?star ?writer WHERE {\",\n        \"{ wd:Q2709504 wdt:P161 ?director. } UNION \",\n        \"{ wd:Q3204825 wdt:P161 ?director. } UNION \",\n        \"{ wd:Q3161846 wdt:P161 ?director. }\",\n      \"}\",\n      \"{\",\n        \"{ wd:Q2709504 wdt:P57 ?star. } UNION \",\n        \"{ wd:Q3204825 wdt:P57 ?star. } UNION \",\n        \"{ wd:Q3161846 wdt:P57 ?star. }\",\n      \"}\",\n      \"{\",\n        \"{ wd:Q2709504 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q3204825 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q3161846 wdt:P58 ?writer. }\",\n      \"}\",\n      \"?director wdt:P737 wd:Q312258.\",\n      \"?star wdt:P26 wd:Q312258.\",\n      \"?writer wdt:P737 wd:Q312258.\"\n    ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { { wd:Q2709504 wdt:P161 ?director. } UNION { wd:Q3204825 wdt:P161 ?director. } UNION { wd:Q3161846 wdt:P161 ?director. } } { { wd:Q2709504 wdt:P57 ?star. } UNION { wd:Q3204825 wdt:P57 ?star. } UNION { wd:Q3161846 wdt:P57 ?star. } } { { wd:Q2709504 wdt:P58 ?writer. } UNION { wd:Q3204825 wdt:P58 ?writer. } UNION { wd:Q3161846 wdt:P58 ?writer. } } ?director wdt:P737 wd:Q312258. ?star wdt:P26 wd:Q312258. ?writer wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?director ?star ?writer WHERE {\",\n        \"{ kg:7352 kg:8954 ?director . } UNION \",\n        \"{ kg:0549 kg:8954 ?director . } UNION \",\n        \"{ kg:9335 kg:8954 ?director . }\",\n      \"}\",\n      \"{ kg:7352 kg:5044 ?star . } UNION \",\n        \"{ kg:0549 kg:5044 ?star . } UNION \",\n        \"{ kg:9335 kg:5044 ?star . }\",\n      \"}\",\n      \"{ kg:7352 kg:3768 ?writer . } UNION \",\n        \"{ kg:0549 kg:3768 ?writer . } UNION \",\n        \"{ kg:9335 kg:3768 ?writer . }\",\n      \"}\",\n      \"?director kg:1253 kg:0156 .\",\n      \"kg:0156 kg:1253 ?director .\",\n      \"?star kg:1253 kg:0156 .\",\n      \"kg:0156 kg:1253 ?star .\",\n      \"?writer kg:1253 kg:0156 .\",\n      \"kg:0156 kg:1253 ?writer .\",\n      \"?director kg:1025 ?star .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { { kg:7352 kg:8954 ?director . } UNION { kg:0549 kg:8954 ?director . } UNION { kg:9335 kg:8954 ?director . } } { kg:7352 kg:5044 ?star . } UNION { kg:0549 kg:5044 ?star . } UNION { kg:9335 kg:5044 ?star . } } { kg:7352 kg:3768 ?writer . } UNION { kg:0549 kg:3768 ?writer . } UNION { kg:9335 kg:3768 ?writer . } } ?director kg:1253 kg:0156 . kg:0156 kg:1253 ?director . ?star kg:1253 kg:0156 . kg:0156 kg:1253 ?star . ?writer kg:1253 kg:0156 . kg:0156 kg:1253 ?writer . ?director kg:1025 ?star . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q4830453 .\",\n    \"?resource wdt:P729 wd:Q6605912 .\",\n    \"?resource wdt:P749 wd:Q10871261 .\",\n    \"?resource wdt:P749 wd:Q380915 .\",\n    \"?resource wdt:P749 wd:Q10871261 .\",\n    \"?resource wdt:P749 wd:Q10871261 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q4830453 . ?resource wdt:P729 wd:Q6605912 . ?resource wdt:P749 wd:Q10871261 . ?resource wdt:P749 wd:Q380915 . ?resource wdt:P749 wd:Q10871261 . ?resource wdt:P749 wd:Q10871261 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q17070012 wdt:P750 ?resource. } UNION \",\n        \"{ wd:Q849363 wdt:P272 ?resource. } UNION \",\n        \"{ wd:Q219635 wdt:P127 ?resource. } UNION \",\n        \"{ wd:Q65073147 wdt:P127 ?resource. } UNION \",\n        \"{ wd:Q318128 wdt:P127 ?resource. } UNION \",\n        \"{ wd:Q136469 wdt:P127 ?resource. } UNION \",\n        \"{ wd:Q1628791 wdt:P127 ?resource. }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q17070012 wdt:P750 ?resource. } UNION { wd:Q849363 wdt:P272 ?resource. } UNION { wd:Q219635 wdt:P127 ?resource. } UNION { wd:Q65073147 wdt:P127 ?resource. } UNION { wd:Q318128 wdt:P127 ?resource. } UNION { wd:Q136469 wdt:P127 ?resource. } UNION { wd:Q1628791 wdt:P127 ?resource. } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:7869 kg:0370 .\",\n          \"?resource kg:9429 kg:5185 .\",\n          \"?resource kg:6391 kg:4799 .\",\n          \"?resource kg:6391 kg:1153 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:7869 kg:0370 . ?resource kg:9429 kg:5185 . ?resource kg:6391 kg:4799 . ?resource kg:6391 kg:1153 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"{\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q2405480, wd:Q971705, wd:Q108705 .\",\n      \"?resource p:P39 ?position1 .\",\n      \"?position1 ps:P39 wd:Q667085 ; pq:P452 wd:Q1731994, wd:Q1732000 .\",\n    \"} UNION {\",\n      \"?resource wdt:P31 wd:Q5 .\",\n      \"?resource wdt:P106 wd:Q36180 .\",\n      \"?resource p:P39 ?position2 .\",\n      \"?position2 ps:P39 wd:Q667085 ; pq:P452 wd:Q1731994, wd:Q1732000 .\",\n    \"}\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480, wd:Q971705, wd:Q108705 . ?resource p:P39 ?position1 . ?position1 ps:P39 wd:Q667085 ; pq:P452 wd:Q1731994, wd:Q1732000 . } UNION { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q36180 . ?resource p:P39 ?position2 . ?position2 ps:P39 wd:Q667085 ; pq:P452 wd:Q1731994, wd:Q1732000 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P161 wd:Q4004365 .\",\n          \"?resource wdt:P344 wd:Q3207690 .\",\n          \"?resource wdt:P58 wd:Q3633009 .\",\n        \"} UNION {\",\n          \"?resource wdt:P161 wd:Q463946 .\",\n          \"?resource wdt:P57 wd:Q289021 .\",\n          \"?resource wdt:P58 wd:Q463946 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P161 wd:Q4004365 . ?resource wdt:P344 wd:Q3207690 . ?resource wdt:P58 wd:Q3633009 . } UNION { ?resource wdt:P161 wd:Q463946 . ?resource wdt:P57 wd:Q289021 . ?resource wdt:P58 wd:Q463946 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n  \"query\":\n    [\n      \"SELECT DISTINCT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:3045 kg:6030 .\",\n          \"?resource kg:3229 kg:1754 .\",\n          \"?resource kg:8940 kg:0418 .\",\n        \"} UNION {\",\n          \"?resource kg:3045 kg:0652 .\",\n          \"?resource kg:3229 kg:1754 .\",\n          \"?resource kg:8940 kg:0418 .\",\n        \"} UNION {\",\n          \"?resource kg:3045 kg:0652 .\",\n          \"?resource kg:3229 kg:1754 .\",\n          \"?resource kg:8940 kg:0418 .\",\n        \"} UNION {\",\n          \"?resource kg:3045 kg:0652 .\",\n          \"?resource kg:3229 kg:1754 .\",\n          \"?resource kg:8940 kg:0418 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { { ?resource kg:3045 kg:6030 . ?resource kg:3229 kg:1754 . ?resource kg:8940 kg:0418 . } UNION { ?resource kg:3045 kg:0652 . ?resource kg:3229 kg:1754 . ?resource kg:8940 kg:0418 . } UNION { ?resource kg:3045 kg:0652 . ?resource kg:3229 kg:1754 . ?resource kg:8940 kg:0418 . } UNION { ?resource kg:3045 kg:0652 . ?resource kg:3229 kg:1754 . ?resource kg:8940 kg:0418 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 wd:Q249677, wd:Q1058064, wd:Q1058065, wd:Q1058063, wd:Q1058062 .\",\n    \"wd:Q1058069 wdt:P26 ?spouse .\",\n    \"?resource wdt:P26 ?spouse .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P800 wd:Q249677, wd:Q1058064, wd:Q1058065, wd:Q1058063, wd:Q1058062 . wd:Q1058069 wdt:P26 ?spouse . ?resource wdt:P26 ?spouse . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q242446 wdt:P112 ?resource. } UNION \",\n      \"{ wd:Q746676 wdt:P112 ?resource. } UNION \",\n      \"{ wd:Q1044630 wdt:P112 ?resource. } UNION \",\n      \"{ wd:Q258945 wdt:P112 ?resource. } UNION \",\n      \"{ wd:Q216611 wdt:P112 ?resource. }\",\n    \"}\",\n  \"}\"\n]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q242446 wdt:P112 ?resource. } UNION { wd:Q746676 wdt:P112 ?resource. } UNION { wd:Q1044630 wdt:P112 ?resource. } UNION { wd:Q258945 wdt:P112 ?resource. } UNION { wd:Q216611 wdt:P112 ?resource. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ kg:0403 kg:4287 ?resource . } UNION \",\n        \"{ kg:1255 kg:4287 ?resource . } UNION \",\n        \"{ kg:3386 kg:4287 ?resource . } UNION \",\n        \"{ kg:7772 kg:4287 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:0403 kg:4287 ?resource . } UNION { kg:1255 kg:4287 ?resource . } UNION { kg:3386 kg:4287 ?resource . } UNION { kg:7772 kg:4287 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [false]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P106 wd:Q2405480 .\",\n        \"?resource wdt:P161 ?film1 .\",\n        \"?film1 wdt:P31 wd:Q11424 .\",\n        \"?film1 rdfs:label 'Inception'@en .\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P106 wd:Q2405480 .\",\n        \"?resource wdt:P161 ?film2 .\",\n        \"?film2 wdt:P31 wd:Q11424 .\",\n        \"?film2 rdfs:label 'Game Over'@en .\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P31 wd:Q5 .\",\n        \"?resource wdt:P106 wd:Q2405480 .\",\n        \"?resource wdt:P161 ?film3 .\",\n        \"?film3 wdt:P31 wd:Q11424 .\",\n        \"?film3 rdfs:label 'Liberation'@en .\",\n      \"}\",\n      \"{\",\n        \"?resource wdt:P50 wd:Q108705690 .\",\n        \"?resource wdt:P57 wd:Q108705690 .\",\n        \"?resource wdt:P248 wd:Q108705690 .\",\n        \"?resource wdt:P345 wd:Q108705690 .\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480 . ?resource wdt:P161 ?film1 . ?film1 wdt:P31 wd:Q11424 . ?film1 rdfs:label 'Inception'@en . } { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480 . ?resource wdt:P161 ?film2 . ?film2 wdt:P31 wd:Q11424 . ?film2 rdfs:label 'Game Over'@en . } { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q2405480 . ?resource wdt:P161 ?film3 . ?film3 wdt:P31 wd:Q11424 . ?film3 rdfs:label 'Liberation'@en . } { ?resource wdt:P50 wd:Q108705690 . ?resource wdt:P57 wd:Q108705690 . ?resource wdt:P248 wd:Q108705690 . ?resource wdt:P345 wd:Q108705690 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ wd:Q85520081 wdt:P161 ?resource . } UNION \",\n        \"{ wd:Q96054985 wdt:P344 ?resource . } UNION \",\n        \"{ wd:Q87778273 wdt:P57 ?resource . } UNION \",\n        \"{ wd:Q87778273 wdt:P1040 ?resource . } UNION \",\n        \"{ wd:Q87778273 wdt:P6 ?resource . } UNION \",\n        \"{ wd:Q85532437 wdt:P161 ?resource . } UNION \",\n        \"{ wd:Q96054985 wdt:P161 ?resource . } UNION \",\n        \"{ wd:Q85532437 wdt:P344 ?resource . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q85520081 wdt:P161 ?resource . } UNION { wd:Q96054985 wdt:P344 ?resource . } UNION { wd:Q87778273 wdt:P57 ?resource . } UNION { wd:Q87778273 wdt:P1040 ?resource . } UNION { wd:Q87778273 wdt:P6 ?resource . } UNION { wd:Q85532437 wdt:P161 ?resource . } UNION { wd:Q96054985 wdt:P161 ?resource . } UNION { wd:Q85532437 wdt:P344 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [["wd:Q100357190"], ["wd:Q92638978"], ["wd:Q84729020"], ["wd:Q106772589"], ["wd:Q96054861"], ["wd:Q84729367"], ["wd:Q106328768"], ["wd:Q84701006"]], "gold": [["wd:Q84701006"]]}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:9445 kg:3761 . } UNION \",\n        \"{ ?resource kg:9445 kg:4775 . } UNION \",\n        \"{ ?resource kg:9445 kg:3942 . } UNION \",\n        \"{ ?resource kg:8425 kg:3761 . } UNION \",\n        \"{ ?resource kg:8425 kg:4775 . } UNION \",\n        \"{ ?resource kg:8425 kg:3942 . } UNION \",\n        \"{ ?resource kg:8621 kg:1857 . } UNION \",\n        \"{ ?resource kg:6722 kg:1857 . } UNION \",\n        \"{ ?resource kg:0779 kg:1857 . } UNION \",\n        \"{ ?resource kg:0856 kg:1857 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9445 kg:3761 . } UNION { ?resource kg:9445 kg:4775 . } UNION { ?resource kg:9445 kg:3942 . } UNION { ?resource kg:8425 kg:3761 . } UNION { ?resource kg:8425 kg:4775 . } UNION { ?resource kg:8425 kg:3942 . } UNION { ?resource kg:8621 kg:1857 . } UNION { ?resource kg:6722 kg:1857 . } UNION { ?resource kg:0779 kg:1857 . } UNION { ?resource kg:0856 kg:1857 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q84701006"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"{\",\n      \"?work wdt:P31 wd:Q5398426 .\",\n      \"?work rdfs:label \\\"The Emperor\\\"@en .\",\n      \"?work wdt:P50 ?writer .\",\n      \"?work wdt:P344 ?cinematographer .\",\n    \"} UNION {\",\n      \"?work wdt:P31 wd:Q27698 .\",\n      \"?work rdfs:label \\\"Anyone Lived in a Pretty How Town\\\"@en .\",\n      \"?work wdt:P50 ?writer .\",\n    \"} UNION {\",\n      \"?work wdt:P31 wd:Q27698 .\",\n      \"?work rdfs:label \\\"1:42.08\\\"@en .\",\n      \"?work wdt:P50 ?writer .\",\n    \"} UNION {\",\n      \"?work wdt:P31 wd:Q27698 .\",\n      \"?work rdfs:label \\\"Herbie\\\"@en .\",\n      \"?work wdt:P50 ?writer .\",\n    \"}\",\n    \"?writer wdt:P26 ?spouse .\",\n    \"?writer p:P737 ?influenceStatement .\",\n    \"?influenceStatement ps:P737 wd:Q184509 .\",\n    \"?influenceStatement ps:P737 wd:Q668206 .\",\n  \"}\"\n   ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { { ?work wdt:P31 wd:Q5398426 . ?work rdfs:label \"The Emperor\"@en . ?work wdt:P50 ?writer . ?work wdt:P344 ?cinematographer . } UNION { ?work wdt:P31 wd:Q27698 . ?work rdfs:label \"Anyone Lived in a Pretty How Town\"@en . ?work wdt:P50 ?writer . } UNION { ?work wdt:P31 wd:Q27698 . ?work rdfs:label \"1:42.08\"@en . ?work wdt:P50 ?writer . } UNION { ?work wdt:P31 wd:Q27698 . ?work rdfs:label \"Herbie\"@en . ?work wdt:P50 ?writer . } ?writer wdt:P26 ?spouse . ?writer p:P737 ?influenceStatement . ?influenceStatement ps:P737 wd:Q184509 . ?influenceStatement ps:P737 wd:Q668206 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n  \"query\":\n    [\n      \"SELECT ?writer ?cinematographer WHERE {\",\n        \"{ wd:Q1609393 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q2411065 wdt:P58 ?writer. } UNION \",\n        \"{ wd:Q208910  wdt:P737 ?cinematographer. } UNION \",\n        \"{ wd:Q613974  wdt:P737 ?cinematographer. }\",\n      \"}\",\n    \"}\"\n   ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { { wd:Q1609393 wdt:P58 ?writer. } UNION { wd:Q2411065 wdt:P58 ?writer. } UNION { wd:Q208910 wdt:P737 ?cinematographer. } UNION { wd:Q613974 wdt:P737 ?cinematographer. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0611 kg:9012 .\",\n          \"?resource kg:7578 kg:3218 .\",\n          \"?resource kg:7578 kg:0352 .\",\n          \"?resource kg:7578 kg:3655 .\",\n        \"} UNION {\",\n          \"?resource kg:7316 ?person .\",\n          \"?person kg:7578 kg:8427 .\",\n          \"?person kg:7578 kg:8850 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0611 kg:9012 . ?resource kg:7578 kg:3218 . ?resource kg:7578 kg:0352 . ?resource kg:7578 kg:3655 . } UNION { ?resource kg:7316 ?person . ?person kg:7578 kg:8427 . ?person kg:7578 kg:8850 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [["wd:Q38222"]]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n    \"?director wdt:P31 wd:Q5 .\",\n    \"?director wdt:P279* wd:Q8064541 .\",\n    \"{ ?film wdt:P57 ?director ; wdt:P31 wd:Q11424 . } UNION { ?film wdt:P57 ?director ; wdt:P31 wd:Q2085381 . }\",\n    \"?film wdt:P6 ?director .\",\n    \"?film wdt:P162 ?director .\",\n    \"?film wdt:P58 ?director .\",\n    \"FILTER (?film IN (wd:Q30497, wd:Q11424))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P31 wd:Q5 . ?director wdt:P279* wd:Q8064541 . { ?film wdt:P57 ?director ; wdt:P31 wd:Q11424 . } UNION { ?film wdt:P57 ?director ; wdt:P31 wd:Q2085381 . } ?film wdt:P6 ?director . ?film wdt:P162 ?director . ?film wdt:P58 ?director . FILTER (?film IN (wd:Q30497, wd:Q11424)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n      \"{ wd:Q1361018 wdt:P57 ?director . } UNION \",\n      \"{ wd:Q2086445 wdt:P57 ?director . } UNION \",\n      \"{ wd:Q1361018 wdt:P1040 ?executiveProducer . } UNION \",\n      \"{ wd:Q2086445 wdt:P1040 ?executiveProducer . } UNION \",\n      \"{ wd:Q1361018 wdt:P1431 ?editor . } UNION \",\n      \"{ wd:Q2086445 wdt:P1431 ?editor . } UNION \",\n      \"{ wd:Q1361018 wdt:P58 ?writer . } UNION \",\n      \"{ wd:Q2086445 wdt:P58 ?writer . }\",\n      \"?director wdt:P106 wd:Q222344 ;\",\n      \"         wdt:P57 wd:Q19609037 ;\",\n      \"         wdt:P1040 wd:Q18609037 ;\",\n      \"         wdt:P1431 wd:Q18609037 ;\",\n      \"         wdt:P58 wd:Q2086445 .\",\n      \"BIND(?director AS ?resource)\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q1361018 wdt:P57 ?director . } UNION { wd:Q2086445 wdt:P57 ?director . } UNION { wd:Q1361018 wdt:P1040 ?executiveProducer . } UNION { wd:Q2086445 wdt:P1040 ?executiveProducer . } UNION { wd:Q1361018 wdt:P1431 ?editor . } UNION { wd:Q2086445 wdt:P1431 ?editor . } UNION { wd:Q1361018 wdt:P58 ?writer . } UNION { wd:Q2086445 wdt:P58 ?writer . } ?director wdt:P106 wd:Q222344 ; wdt:P57 wd:Q19609037 ; wdt:P1040 wd:Q18609037 ; wdt:P1431 wd:Q18609037 ; wdt:P58 wd:Q2086445 . BIND(?director AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:0722 kg:7860 . } UNION \",\n        \"{ ?resource kg:4939 kg:3690 . } UNION \",\n        \"{ ?resource kg:5126 kg:3690 . } UNION \",\n        \"{ ?resource kg:2405 kg:3690 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0722 kg:7860 . } UNION { ?resource kg:4939 kg:3690 . } UNION { ?resource kg:5126 kg:3690 . } UNION { ?resource kg:2405 kg:3690 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?director WHERE {\",\n      \"{\",\n        \"?film wdt:P31 wd:Q11424 .\",\n        \"?film wdt:P58 ?director .\",\n        \"?film wdt:P650 ?director .\",\n        \"VALUES (?film) {(wd:Q179863) (wd:Q1211488) (wd:Q61610997)}\",\n      \"} UNION {\",\n        \"?director wdt:P58 ?film .\",\n        \"?director wdt:P650 ?film .\",\n        \"VALUES (?film) {(wd:Q179863) (wd:Q1211488) (wd:Q61610997)}\",\n      \"}\",\n      \"?director wdt:P26 ?spouse .\",\n      \"?spouse wdt:P58 wd:Q311349 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 ?director . ?film wdt:P650 ?director . VALUES (?film) {(wd:Q179863) (wd:Q1211488) (wd:Q61610997)} } UNION { ?director wdt:P58 ?film . ?director wdt:P650 ?film . VALUES (?film) {(wd:Q179863) (wd:Q1211488) (wd:Q61610997)} } ?director wdt:P26 ?spouse . ?spouse wdt:P58 wd:Q311349 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource wdt:P106 wd:Q2526255 .\",\n          \"?resource wdt:P1040 wd:Q63993096 .\",\n          \"?resource wdt:P1040 wd:Q278937 .\",\n          \"?resource wdt:P1040 wd:Q2526255 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P106 wd:Q2526255 . ?resource wdt:P1040 wd:Q63993096 . ?resource wdt:P1040 wd:Q278937 . ?resource wdt:P1040 wd:Q2526255 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{\",\n          \"?resource kg:0316 kg:4129 .\",\n          \"?resource kg:8697 kg:6269 .\",\n          \"?resource kg:5639 kg:9798 .\",\n          \"?resource kg:0316 kg:1795 .\",\n        \"}\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:0316 kg:4129 . ?resource kg:8697 kg:6269 . ?resource kg:5639 kg:9798 . ?resource kg:0316 kg:1795 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false, "predicted": [], "gold": [true]}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q4830453 .\",\n    \"?resource wdt:P749 wd:Q2621789 .\",\n    \"?resource wdt:P749 wd:Q4955108 .\",\n    \"?resource wdt:P749 wd:Q437926 .\",\n    \"?resource wdt:P749 wd:Q1021118 .\",\n    \"?resource wdt:P749 wd:Q5155176 .\",\n    \"?resource wdt:P749 wd:Q380227 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q4830453 . ?resource wdt:P749 wd:Q2621789 . ?resource wdt:P749 wd:Q4955108 . ?resource wdt:P749 wd:Q437926 . ?resource wdt:P749 wd:Q1021118 . ?resource wdt:P749 wd:Q5155176 . ?resource wdt:P749 wd:Q380227 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource wdt:P750 wd:Q2062523 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q2062523 . } UNION \",\n        \"{ ?resource wdt:P272 wd:Q2062523 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q3511946 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q7603552 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q2007336 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q219635 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q505275 . } UNION \",\n        \"{ ?resource wdt:P127 wd:Q849363 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource wdt:P750 wd:Q2062523 . } UNION { ?resource wdt:P127 wd:Q2062523 . } UNION { ?resource wdt:P272 wd:Q2062523 . } UNION { ?resource wdt:P127 wd:Q3511946 . } UNION { ?resource wdt:P127 wd:Q7603552 . } UNION { ?resource wdt:P127 wd:Q2007336 . } UNION { ?resource wdt:P127 wd:Q219635 . } UNION { ?resource wdt:P127 wd:Q505275 . } UNION { ?resource wdt:P127 wd:Q849363 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n  \"query\":\n    [\n      \"SELECT ?resource WHERE {\",\n        \"{ ?resource kg:9566 kg:0968 . } UNION \",\n        \"{ ?resource kg:2147 kg:0968 . } UNION \",\n        \"{ ?resource kg:3944 kg:3261 . } UNION \",\n        \"{ ?resource kg:3944 kg:3199 . } UNION \",\n        \"{ ?resource kg:3944 kg:4291 . } UNION \",\n        \"{ ?resource kg:3944 kg:1622 . } UNION \",\n        \"{ ?resource kg:3944 kg:6334 . } UNION \",\n        \"{ ?resource kg:3944 kg:4156 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { { ?resource kg:9566 kg:0968 . } UNION { ?resource kg:2147 kg:0968 . } UNION { ?resource kg:3944 kg:3261 . } UNION { ?resource kg:3944 kg:3199 . } UNION { ?resource kg:3944 kg:4291 . } UNION { ?resource kg:3944 kg:1622 . } UNION { ?resource kg:3944 kg:6334 . } UNION { ?resource kg:3944 kg:4156 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\":\n  [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P162 ?producer .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?film wdt:P161 wd:Q34907, wd:Q350399 .\",\n      \"{ ?director wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q5 }\",\n      \"VALUES (?director ?producer ?writer) {\",\n        \"(wd:Q2746098 wd:Q2746098 wd:Q2746098)\",\n        \"(wd:Q2746098 wd:Q2746098 wd:Q1350939)\",\n        \"(wd:Q2746098 wd:Q1350939 wd:Q2746098)\",\n        \"(wd:Q2746098 wd:Q1350939 wd:Q1350939)\",\n        \"(wd:Q1350939 wd:Q2746098 wd:Q2746098)\",\n        \"(wd:Q1350939 wd:Q2746098 wd:Q1350939)\",\n        \"(wd:Q1350939 wd:Q1350939 wd:Q2746098)\",\n        \"(wd:Q1350939 wd:Q1350939 wd:Q1350939)\",\n      \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . ?film wdt:P162 ?producer . ?film wdt:P58 ?writer . ?film wdt:P161 wd:Q34907, wd:Q350399 . { ?director wdt:P31 wd:Q5 } UNION { ?producer wdt:P31 wd:Q5 } UNION { ?writer wdt:P31 wd:Q5 } VALUES (?director ?producer ?writer) { (wd:Q2746098 wd:Q2746098 wd:Q2746098) (wd:Q2746098 wd:Q2746098 wd:Q1350939) (wd:Q2746098 wd:Q1350939 wd:Q2746098) (wd:Q2746098 wd:Q1350939 wd:Q1350939) (wd:Q1350939 wd:Q2746098 wd:Q2746098) (wd:Q1350939 wd:Q2746098 wd:Q1350939) (wd:Q1350939 wd:Q1350939 wd:Q2746098) (wd:Q1350939 wd:Q1350939 wd:Q1350939) } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{?film wdt:P31 wd:Q11424.}\",\n        \"{?film wdt:P57 wd:Q16390.}\",\n        \"{?film wdt:P58 wd:Q295984.}\",\n        \"{?film wdt:P58 wd:Q4420093.}\",\n        \"{?film wdt:P57 wd:Q261311.}\",\n        \"{?film wdt:P161 wd:Q93188.}\",\n        \"{?film wdt:P161 wd:Q744357.}\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { {?film wdt:P31 wd:Q11424.} {?film wdt:P57 wd:Q16390.} {?film wdt:P58 wd:Q295984.} {?film wdt:P58 wd:Q4420093.} {?film wdt:P57 wd:Q261311.} {?film wdt:P161 wd:Q93188.} {?film wdt:P161 wd:Q744357.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "mistral-large:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n  \"query\":\n    [\n      \"SELECT ?film WHERE {\",\n        \"{ ?film kg:1933 kg:2669 . } UNION \",\n        \"{ ?film kg:0334 kg:5032 . } UNION \",\n        \"{ ?film kg:7895 kg:1716 . } UNION \",\n        \"{ ?film kg:5442 kg:6011 . }\",\n      \"}\"\n    ]\n}", "normal_query": "SELECT ?film WHERE { { ?film kg:1933 kg:2669 . } UNION { ?film kg:0334 kg:5032 . } UNION { ?film kg:7895 kg:1716 . } UNION { ?film kg:5442 kg:6011 . } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
