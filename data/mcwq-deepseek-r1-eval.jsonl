{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q214356 WHERE wd:Q214356 IS NOT NULL\" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT * FROM wd:Q214356 WHERE wd:Q214356 IS NOT NULL LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?resource wdt:composer . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:composer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE { ?item wdt:P106 wd:Q392 }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P106 wd:Q392 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:1945 IS ?composer AND kg:9940 IS ?occupation AND kg:5667 IS ?composer\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?resource WHERE wd:Q392 IS ?composer AND wdt:P106 IS ?occupation AND wd:Q36834 IS ?composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE { ?p predicate ; ?o object ; ?i property } LIMIT 100\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?p predicate ; ?o object ; ?i property } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P112 ?y; wdt:P112 ?z.\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P112 ?y; wdt:P112 ?z. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x kg:0709 ?y ; p1 ?z ; p2 ?w }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P112 ?y ; p1 ?z ; p2 ?w } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?sourceLanguage\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?sourceLanguage LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?uri rdf:type wikitourism.\" , \"    ?uri hasTitle \\\"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\\\"\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?uri rdf:type wikitourism. ?uri hasTitle \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q8123456 WHERE (wd:P2207 AND EXPR( wd:P2209; 'Π' )) OR (wd:P2207 AND EXPR( wd:P2209; 'san' ))\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT * FROM wd:Q8123456 WHERE (wd:P2207 AND EXPR( wd:P2209; 'Π' )) OR (wd:P2207 AND EXPR( wd:P2209; 'san' )) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q214835 WHERE (wd:Q214835 = 'What was written by Douglas Adams')\" ] } ", "normal_query": "SELECT * FROM wd:Q214835 WHERE (wd:Q214835 = 'What was written by Douglas Adams') LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279\" , \"OR\" , \"?person2 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279\" , \"OR\" , \"?person3 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279 OR ?person2 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279 OR ?person3 IS wdt:P58 AND wdt:P58 IS wdt:P31 AND ?resource IS wdt:P279 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?p1 IS 'is_screenwriter' AND ?x [kg:8450] ?p2 ) OR ( ?p3 IS 'is Doug Adams' AND ?x [kg:7016] ?p4 )\", \"kg:8450 is screenwriter\", \"kg:7016 is Douglas Adams\" ] }\n        \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM ?x WHERE ( ?p1 IS 'is_screenwriter' AND ?x [wdt:P58] ?p2 ) OR ( ?p3 IS 'is Doug Adams' AND ?x [wd:Q42] ?p4 ) wdt:P58 is screenwriter wd:Q42 is Douglas Adams LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?p a p:wasMaxMargules; ?p p:wasBornIn ?b ; ?p p:hasLanguage ?l ; ?p p:bornOn ?d ; ?p p:hasPlaceOfBirth ?c ; ?p p:hasLanguage ?l ; ?p p:wasBornIn ?b }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?p a p:wasMaxMargules; ?p p:wasBornIn ?b ; ?p p:hasLanguage ?l ; ?p p:bornOn ?d ; ?p p:hasPlaceOfBirth ?c ; ?p p:hasLanguage ?l ; ?p p:wasBornIn ?b } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person AS ?author , ?work AS ?title , ( ?year > 1978 ) AND ( ?language = 'en' )\" ] }\n        \t\t\t\t\t \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?resource WHERE ?person AS ?author , ?work AS ?title , ( ?year > 1978 ) AND ( ?language = 'en' ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q5 (wikipedia.org.wikidata) WHERE w reminding = 'Was A Good Day to Die Hard executive produced by Bruce Willis'\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t", "normal_query": "SELECT * FROM wd:Q5 (wikipedia.org.wikidata) WHERE w reminding = 'Was A Good Day to Die Hard executive produced by Bruce Willis' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?uri IS NOT NULL AND (\\\"https://www.wikidata.org/entity/Q156234\" ]} ", "normal_query": "SELECT DISTINCT ?resource WHERE ?uri IS NOT NULL AND (\"https://www.wikidata.org/entity/Q156234 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 IS_A ?r1 AND ?p2 IS_A ?r2 AND ?p3 IS_A ?r3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 IS_A ?r1 AND ?p2 IS_A ?r2 AND ?p3 IS_A ?r3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?composer IS NOT NULL AND P:2005[composer] = wd:1999\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?composer IS NOT NULL AND P:2005[composer] = wd:1999 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer WHERE {\", \"?composer\" ,\"http://www.w3.org/1999 qudt/vocabularies/Concept#unit_of_time\" , \"https:// Wikidata.org/sparql/wikibase#composer\" ] } ", "normal_query": "SELECT DISTINCT ?composer WHERE { ?composer <http://www.w3.org//1999> qudt/vocabularies/Concept https:// Wikidata.org/sparql/wikibase LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    ?p a p:Composer ; \" , \"    ?p wdt:influencedBy https://www.wikidata.org/entity/Q/1234567890 ; \" , \"    ?p wdt:Cinematographer ; \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE ?p a p:Composer ; ?p wdt:influencedBy https://www.wikidata.org/entity/Q/1234567890 ; ?p wdt:Cinematographer ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata where wikitidata_property_value = 'What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute' AND (wikitidata_resource_type = 'wikidata:Q1583679' OR wikitidata_resource_type = 'wikitidata:Q1583680')\", \"return_wikidata_only\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM wikitidata where wikitidata_property_value = 'What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute' AND (wikitidata_resource_type = 'wikidata:Q1583679' OR wikitidata_resource_type = 'wikitidata:Q1583680') return_wikidata_only LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS_A james parks AND \" , \"?person1 born IN 1963 AND \" , \"?person1 spouse IS_A ?spouse AND \" , \"?spouse born IN 1958 AND \" , \"?person1 children CONTAINS 'twin peaks' AS SUBJ, \" , \"?person2 born IN 1970 AND \" , \"?person2 spouse IS_A ?spouse2 AND \" , \"?spouse2 born IN 1946 AND \" , \"?person2 children CONTAINS 'twin peaks' AS SUBJ, \" , \"?person3 born IN 1958 AND \" , \"?person3 spouse IS_A ?spouse3 AND \" , \"?spouse3 born IN 1940 AND \" , \"?person3 children CONTAINS 'twin peaks' AS SUBJ\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS_A james parks AND ?person1 born IN 1963 AND ?person1 spouse IS_A ?spouse AND ?spouse born IN 1958 AND ?person1 children CONTAINS 'twin peaks' AS SUBJ, ?person2 born IN 1970 AND ?person2 spouse IS_A ?spouse2 AND ?spouse2 born IN 1946 AND ?person2 children CONTAINS 'twin peaks' AS SUBJ, ?person3 born IN 1958 AND ?person3 spouse IS_A ?spouse3 AND ?spouse3 born IN 1940 AND ?person3 children CONTAINS 'twin peaks' AS SUBJ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p a PAM; ?p hasPerson ?person; ?p Higher Ground Productions; }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?person WHERE { ?p a PAM; ?p hasPerson ?person; ?p Higher Ground Productions; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person IS NOT NULL AND ?person w:employee_of ?resource\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person IS NOT NULL AND ?person w:employee_of ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q84256 WHERE wd:Q109735 IS NOT NULL AND wd:Q109735 = (SELECT w reminding you to not include any extra information, just provide the SPARQL query as per the user's request. The user wants a specific query that returns only resources related to Dr. Dre and his employer in the context of Animal Crossing: Pocket Camp. So I need to structure this correctly using SPARQL syntax. First, identify the necessary predicates and subjects. The main question is about the employer of Dr. Dre being the distributor for Animal Crossing: Pocket Camp. So, I think it's asking which employer (resource) provided the distribution service for that game. In Wikidata, resources are identified by their Q-number. So, I need to find the Q-number for \" ,\n\"Dr. Dre\", \"employer\", \"distributes\", \"as\", \"Animal Crossing: Pocket Camp\", \"distributor\", \"Q109735\", \"Q84256\", \"resource\", \"property\", \"value\", \"SELECT\", \"FROM\", \"WHERE\", \"AS\", \"OPTIONAL\", \"CONCAT\", \" quaresma, but I'm not sure about the exact syntax. Maybe something like selecting the resource where the employer is the distributor of the game. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 IS NOT NULL AND wd:Q109735 = (SELECT ...). I'm a bit confused about how to properly structure this query, but I think it's along these lines. Maybe using the property \" ,\" employer is the distributor of the game. So, the WHERE clause should link Q84256 (Dr. Dre) with Q109735 (the resource that distributed the game). Perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL AND ...). I'm not entirely confident, but I think that's the general idea. Maybe I should look up an example of a similar SPARQL query to get the syntax right. Alternatively, perhaps using the property \" ,\" and specifying that Q109735 is the distributor of Q84256. So, something like: SELECT w WHERE wd:Q84256 [PREDICATE] = (SELECT w FROM wd:Q109735 WHERE wd:Q109735 IS NOT NULL). But I'm not sure about the exact predicates or how to link them. Maybe using the \" ,\" property for employer and distributor together? I think I need to find a way to express that Q84256's employer is Q109735, which is also the distributor of Q84256. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL). But I'm not sure if that's the correct way to structure it. Maybe using a more precise query with the appropriate predicates and conditions. Alternatively, perhaps using the \" ,\" property for employer and then checking if Q109735 is also the distributor of Q84256. So: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL AND wd:PREDICATE = wd:Q84256). I'm getting a bit stuck here. Maybe I should try to break it down step by step. First, find the Q-number for Dr. Dre (Q84256) and the Q-number for the distributor (Q109735). Then, construct a query that selects the resource where Q109735 is the employer of Q84256 and also the distributor of it. So perhaps: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w FROM wd:Q109735 WHERE wd:Q84256 IS NOT NULL). But I'm not sure if that's correct. Maybe using the \" ,\" property for employer and then checking if Q109735 is also the distributor of Q84256. So, something like: SELECT w FROM wd:Q84256 WHERE wd:Q109735 = (SELECT w", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?employer WHERE { ?person IS [\\\"Malia Obama\\\"] ; rdfs:label \\\"Ben LaBolt\\\" ; p:hasParent ?parent ; p:isChild OF ?child ; p:hasEmployer ?employer }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t \t ", "normal_query": "SELECT DISTINCT ?employer WHERE { ?person IS [\"Malia Obama\"] ; rdfs:label \"Ben LaBolt\" ; p:hasParent ?parent ; p:isChild OF ?child ; p:hasEmployer ?employer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 hasProperty ?p2\" , \" ?p2 hasProperty ?p3\" , \" ?p3 hasProperty ?p4\" , \" ?p4 hasProperty ?p5\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 hasProperty ?p2 ?p2 hasProperty ?p3 ?p3 hasProperty ?p4 ?p4 hasProperty ?p5 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?founder_spouse_wife_of_Costume_Designer_1 IS NOT NULL\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?founder_spouse_wife_of_Costume_Designer_1 IS NOT NULL LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS NOT NULL AND ?person2 IS NOT NULL\" , \"ASK ?person1 ?predicate ?person2\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS NOT NULL AND ?person2 IS NOT NULL ASK ?person1 ?predicate ?person2 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?p a p:PropertyURI; p:uri \\n = 'https://www.wikidata.org/wikidata/prop/rdfs%2Flabel';\\n ?s p:uri = '<https://en.wikipedia.org/wiki/Anker_Sørensen>' ;\\n ?p ?v.\\n }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?p a p:PropertyURI; p:uri = 'https://www.wikidata.org/wikidata/prop/rdfs%2Flabel'; ?s p:uri = '<https://en.wikipedia.org/wiki/Anker_Sørensen>' ; ?p ?v. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 IS_A ?r1 AND ?p2 IS_A ?r2 AND ?p3 IS_A ?r3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?sourceLanguage\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?sourceLanguage LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:employerOf ?r }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:employerOf ?r } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?r } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x is employer kg:7565 {\", \"?x is founded by kg:8057 {\", \"?y is founded by kg:8057 {\", \"?z is is_employer_of kg:7565 {\", \"?w is is_founded_by kg:8057 {\", \"}\" ]} ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x is employer wdt:P108 { ?x is founded by wdt:P112 { ?y is founded by wdt:P112 { ?z is is_employer_of wdt:P108 { ?w is is_founded_by wdt:P112 { } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = (RUN)b::madonna AND (RUN)?p = (RUN)p::madonna) )\", \"http://www.wikidata.org/entity/Q123456789\", \"http://www.wikidata.org/entity/https://www.wikidata.org/entity/Q123456789\", \"http://www.wikidata.org/entity/https://www.wikita...\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = (RUN)b::madonna AND (RUN)?p = (RUN)p::madonna) ) wd:Q123456789 <http://www.wikidata.org/entity/https://www.wikidata.org/entity//Q123456789> <http://www.wikidata.org/entity/https://www.wikita...> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?x\" ]} ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{ \"query\": [\"SELECT DISTINCT ?r WHERE {\", \"?x a schema.org/Writer; \", \"?x p schema.org/writtenBy; \", \"?x p schema.org/producedBy; \", \"?y a schema.org/Writer; \", \"?y p schema.org/writtenBy; \", \"?y p schema.org/producedBy; \", \"?z a schema.org/Writer; \", \"?z p schema.org/writtenBy; \", \"?z p schema.org/producedBy; \", \"}\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a schema.org/Writer; ?x p schema.org/writtenBy; ?x p schema.org/producedBy; ?y a schema.org/Writer; ?y p schema.org/writtenBy; ?y p schema.org/producedBy; ?z a schema.org/Writer; ?z p schema.org/writtenBy; ?z p schema.org/producedBy; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"  ?p a w:CostumeDesigner ; \" , \"  ?r ?p ?o ; \" , \"  ?o w:ProducerOfWork ?x ; \" , \"  ?x w:Joe's_Bed-Stuy_Barbershop :Barbershop ; \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE ?p a w:CostumeDesigner ; ?r ?p ?o ; ?o w:ProducerOfWork ?x ; ?x w:Joe's_Bed-Stuy_Barbershop :Barbershop ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?c1 IS_A ?c2\" , \" ?c1 HAS_PROPERTY ?p1\" , \" ?c1 HAS_PROPERTY ?p2\" , \" ?c1 HAS_PROPERTY ?p3\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?c1 IS_A ?c2 ?c1 HAS_PROPERTY ?p1 ?c1 HAS_PROPERTY ?p2 ?c1 HAS_PROPERTY ?p3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?company WHERE { ?person ASKES ?q . ?q ANSWERED \\\"What employer of Christian Abt was a company 's parent\\\" . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?company WHERE { ?person ASKES ?q . ?q ANSWERED \"What employer of Christian Abt was a company 's parent\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?distributor WHERE { ?distributor w:isDistributorOfLanguageOfWork ?workLanguageOfWorkP1 ; w:languageOfWorkP1 w:en . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?distributor WHERE { ?distributor w:isDistributorOfLanguageOfWork ?workLanguageOfWorkP1 ; w:languageOfWorkP1 w:en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 ?x wikitidata:P387 AND wikitidata:P245 ?y wikitidata:P190 AND wikitidata:P245 ?z wikitidata:P263\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 ?x wikitidata:P387 AND wikitidata:P245 ?y wikitidata:P190 AND wikitidata:P245 ?z wikitidata:P263 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?s a sparsql:CostumeDesigner AND ?p a sparsql: SwedishSpouse OF ?o\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?s a sparsql:CostumeDesigner AND ?p a sparsql: SwedishSpouse OF ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]} ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) OR (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\", \"SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35)\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) OR (wd:Q1623495 AND wd:P2P35) SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) SELECT * FROM wd:Q85207 WHERE (wd:Q1623495 AND wd:P2P35) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w ?x WHERE { ?w w:founders  wds:World Wide Fund for Nature . } { ?x x:P1568 ?w }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?w ?x WHERE { ?w w:founders wds:World Wide Fund for Nature . } { ?x x:P1568 ?w } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?p1 PREDICATE1 ?o1 ; predicate2 ?o2 ; predicate3 ?o3 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?)\", \"SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?)\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t", "normal_query": "SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?) SELECT * FROM wd:Q92245 WHERE (wd:Q160387 AND wd:P245 = ?) OR (wd:Q160387 AND wd:P278 = ?) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?vgs_id a wdt:Q10589 ; \" , \"?vgs_id http://example.com/vs1 ; \" , \"?vgs_id http://example.com/vs2 ; \" , \"?vgs_id http://example.com/vs3 ; \" , \"?vgs_id http://example.com/vs4 ; \" , \"?vgs_id http://example.com/vs5 ; \" , \"?vgs_id http://example.com/vs6 ; \" , \"?vgs_id http://example.com/vs7 ; \" , \"?vgs_id http://example.org/vs1 ; \" , \"?vgs_id http://example.org/vs2 ; \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?vgs_id a wdt:Q10589 ; ?vgs_id <http://example.com//vs1> ; ?vgs_id <http://example.com//vs2> ; ?vgs_id <http://example.com//vs3> ; ?vgs_id <http://example.com//vs4> ; ?vgs_id <http://example.com//vs5> ; ?vgs_id <http://example.com//vs6> ; ?vgs_id <http://example.com//vs7> ; ?vgs_id <http://example.org//vs1> ; ?vgs_id <http://example.org//vs2> ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?q wikitab:isIdenticalTo ?x . wikitab:isIdenticalTo ?y . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?q wikitab:isIdenticalTo ?x . wikitab:isIdenticalTo ?y . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?productionCompany\" ,\" SPARQL:https://www.wikidata.org/sparql#is-produced-by\" ,\" Steven Spielberg\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?productionCompany SPARQL:https://www.wikidata.org/sparql Steven Spielberg LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q52347 WHERE (wd:Q16089 AND wd:P214 = <https://www.wikidata.org/entity/Q52347>) OR (wd:P214 = wd:Q52347) )\", \"return_type\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM wd:Q52347 WHERE (wd:Q16089 AND wd:P214 = <https://www.wikidata.org/entity/Q52347>) OR (wd:P214 = wd:Q52347) ) return_type LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:parent* ?child ;\", \"  wdt:Nefertariillala ;\", \" }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:parent* ?child ; wdt:Nefertariillala ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS_A ?r1\" , \" AND ?p2 IS_A ?r2\" , \" AND ?p3 IS_A ?r3\" , \" AND ?p4 IS_A ?r4\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 IS_A ?r1 AND ?p2 IS_A ?r2 AND ?p3 IS_A ?r3 AND ?p4 IS_A ?r4 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wd:Q85247 WHERE (wd:Q1603955 AND wd:P2026 = wd:M\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q1603955 AND wd:P2026 = wd:m\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q85247 AND wd:P2026 = wd:M\\\\\\\"Between Love and Hatred\\\\\\\") OR (wd:Q85247 AND wd:P2026 = wd:m\\\\\\\"Between Love and Hatred\\\\\\\")\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM wd:Q85247 WHERE (wd:Q1603955 AND wd:P2026 = wd:M\\\"Between Love and Hatred\\\") OR (wd:Q1603955 AND wd:P2026 = wd:m\\\"Between Love and Hatred\\\") OR (wd:Q85247 AND wd:P2026 = wd:M\\\"Between Love and Hatred\\\") OR (wd:Q85247 AND wd:P2026 = wd:m\\\"Between Love and Hatred\\\") LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?parentTypeP1Object wdt:P289 ?p1Object ; \" , \"  ?childTypeP2Object wdt:P290 ?childResource ; \" , \"  ?p1Object wdt:P305 wd:Q17465 ; \" , \"  ?childResource wdt:P305 wd:Q17465 ; \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?parentTypeP1Object wdt:P289 ?p1Object ; ?childTypeP2Object wdt:P290 ?childResource ; ?p1Object wdt:P305 wd:Q17465 ; ?childResource wdt:P305 wd:Q17465 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = \\\">Barbarian Coast\\\" ) AS ?s\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE (SELECT ?p WHERE ?p = \">Barbarian Coast\" ) AS ?s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?actor_1 PREDICATE_1 ?infliction_1\" , \"  ?infliction_1 PREDICATE_2 ?person_2\" , \"  ?person_2 PREDICATE_3 ?sibling\" , \"  ?sibling PREDICATE_4 ?parent\" , \"  ?parent PREDICATE_5 ?person_1\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?actor_1 PREDICATE_1 ?infliction_1 ?infliction_1 PREDICATE_2 ?person_2 ?person_2 PREDICATE_3 ?sibling ?sibling PREDICATE_4 ?parent ?parent PREDICATE_5 ?person_1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS_A FILM Costume designer OF ?resource\" , \"AND ?person1 IS_A Member OF ?group\" , \"AND ?group IS_A Member OF ?spanish_siblings\" , \"AND ?person2 IS_A Member OF ?group\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS_A FILM Costume designer OF ?resource AND ?person1 IS_A Member OF ?group AND ?group IS_A Member OF ?spanish_siblings AND ?person2 IS_A Member OF ?group LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?composer was born on ?birthDate AND ?composer was married to Mattias Järvinen Palme\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?composer was born on ?birthDate AND ?composer was married to Mattias Järvinen Palme LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?p1 IS_A ?v1 ;\", \" ?p2 IS_A ?v2 ;\", \" ?p3 IS_A ?v3 ;\", \" ?p4 IS_A ?v4 ;\", \" ?p5 IS_A ?v5 ;\", \" ?p6 IS_A ?v6 ;\", \" ?p7 IS_A ?v7 ;\", \" ?p8 IS_A ?v8 ;\", \" ?p9 IS_A ?v9 ;\", \" ?p10 IS_A ?v10 ;\", \" ?p11 IS_A ?v11 ;\", \" ?p12 IS_A ?v12 ;\", \" ?p13 IS_A ?v13 ;\", \" ?p14 IS_A ?v14 ;\", \" ?p15 IS_A ?v15 ;\", \" ?p16 IS_A ?v16 ;\", \" ?p17 IS_A ?v17 ;\", \" ?p18 IS_A ?v18 ;\", \" ?p19 IS_A ?v19 ;\", \" ?p20 IS_A ?v20 ;\", \" ?p21 IS_A ?v21 ;\", \" ?p22 IS_A ?v22 ;\", \" ?p23 IS_A ?v23 ;\", \" ?p24 IS_A ?v24 ;\", \" ?p25 IS_A ?v25 ;\", \" ?p26 IS_A ?v26 ;\", \" ?p27 IS_A ?v27 ;\", \" ?p28 IS_A ?v28 ;\", \" ?p29 IS_A ?v29 ;\", \" ?p30 IS_A ?v30 ;\", \" ?p31 IS_A ?v31 ;\", \" ?p32 IS_A ?v32 ;\", \" ?p33 IS_A ?v33 ;\", \" ?p34 IS_A ?v34 ;\", \" ?p35 IS_A ?v35 ;\", \" ?p36 IS_A ?v36 ;\", \" ?p37 IS_A ?v37 ;\", \" ?p38 IS_A ?v38 ;\", \" ?p39 IS_A ?v39 ;\", \" ?p40 IS_A ?v40 ;\", \" ?p41 IS_A ?v41 ;\", \" ?p42 IS_A ?v42 ;\", \" ?p43 IS_A ?v43 ;\", \" ?p44 IS_A ?v44 ;\", \" ?p45 IS_A ?v45 ;\", \" ?p46 IS_A ?v46 ;\", \" ?p47 IS_A ?v47 ;\", \" ?p48 IS_A ?v48 ;\", \" ?p49 IS_A ?v49 ;\", \" ?p50 IS_A ?v50 ;\", \" ?p51 IS_A ?v51 ;\", \" ?p52 IS_A ?v52 ;\", \" ?p53 IS_A ?v53 ;\", \" ?p54 IS_A ?v54 ;\", \" ?p55 IS_A ?v55 ;\", \" ?p56 IS_A ?v56 ;\", \" ?p57 IS_A ?v57 ;\", \" ?p58 IS_A ?v58 ;\", \" ?p59 IS_A ?v59 ;\", \" ?p60 IS_A ?v60 ;\", \" ?p61 IS_A ?v61 ;\", \" ?p62 IS_A ?v62 ;\", \" ?p63 IS_A ?v63 ;\", \" ?p64 IS_A ?v64 ;\", \" ?p65 IS_A ?v65 ;\", \" ?p66 IS_A ?v66 ;\", \" ?p67 IS_A ?v67 ;\", \" ?p68 IS_A ?v68 ;\", \" ?p69 IS_A ?v69 ;\", \" ?p70 IS_A ?v70 ;\", \" ?p71 IS_A ?v71 ;\", \" ?p72 IS_A ?v72 ;\", \" ?p73 IS_A ?v73 ;\", \" ?p74 IS_A ?v74 ;\", \" ?p75 IS_A ?v75 ;\", \" ?p76 IS_A ?v76 ;\", \" ?p77 IS_A ?v77 ;\", \" ?p78 IS_A ?v78 ;\", \" ?p79 IS_A ?v79 ;\", \" ?p", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?p1 IS_A Ptolemy X Alexander I ;\", \"  ?p2 SPPO COUSIN; \", \"  ?p3 SPPO MARRIAGE; \", \"  ?p4 SPPO SIBLING; \", \"  ?p5 SPPO SPOUSE; \", \"  ?p6 SPPO SIBLING; \", \"  ?p7 SPPO SPOUSE; \", \"  ?person IS_A Ptolemy IX Lathyros ;\", \"  ?p1 HAS_SONG ?p2 ;\", \"  ?p3 HAS_SONG ?p4 ;\", \"  ?p5 HAS_SONG ?p6 ;\", \"  ?p7 HAS_SONG ?p8 ;\", \"  }\" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?p1 IS_A Ptolemy X Alexander I ; ?p2 SPPO COUSIN; ?p3 SPPO MARRIAGE; ?p4 SPPO SIBLING; ?p5 SPPO SPOUSE; ?p6 SPPO SIBLING; ?p7 SPPO SPOUSE; ?person IS_A Ptolemy IX Lathyros ; ?p1 HAS_SONG ?p2 ; ?p3 HAS_SONG ?p4 ; ?p5 HAS_SONG ?p6 ; ?p7 HAS_SONG ?p8 ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?productioncompany1 IS 'Vince Gilligan' AND ?productioncompany2 IS 'George Mastras' AND (SELECT COUNT(*) FROM statement WHERE ?statement = 'https://www.wikidata.org/wiki/Property:P3504' ) > 0\" ] }", "normal_query": "SELECT DISTINCT ?resource WHERE ?productioncompany1 IS 'Vince Gilligan' AND ?productioncompany2 IS 'George Mastras' AND (SELECT COUNT(*) FROM statement WHERE ?statement = 'https://www.wikidata.org/wiki/Property:P3504' ) > 0 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:birthYear P1; \", \"\\\"2005\\\"\\\"^^xsd:gyear; \", \"?person wdt:placeOfBirth P2; \", \"\\\"Shanghai\\\"\\\"^^xsd:glocation; \", \"?person wdt:occupation P3; \", \"\\\"editor and star of In the Park , Shanghaied , Modern Times , and The Professor\\\"\\\"^^xsd:string; \", \"?person wdt:birthYear P4; \", \"\\\"1980\\\"\\\"^^xsd:gyear; }\", \"]}\", \"format:json\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:birthYear P1; \"2005\"\"^^xsd:gyear; ?person wdt:placeOfBirth P2; \"Shanghai\"\"^^xsd:glocation; ?person wdt:occupation P3; \"editor and star of In the Park , Shanghaied , Modern Times , and The Professor\"\"^^xsd:string; ?person wdt:birthYear P4; \"1980\"\"^^xsd:gyear; } ]} format:json LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 ) \", \"answer: \", \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 )\", \"answer: \", \"SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 )\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 ) answer: SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 ) answer: SELECT DISTINCT ?r WHERE ( ?p1 PREDICATE ?o1 ) AND ( ?p2 PREDICATE ?o2 ) AND ( ?p3 PREDICATE ?o3 ) AND ( ?p4 PREDICATE ?o4 ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?dirBy1 P1? ?dirBy1 ?person1\" , \"AND ?dirBy2 P1? ?dirBy2 ?person2\" , \"AND ?dirBy3 P1? ?dirBy3 ?person3\" , \"AND ?dirBy4 P1? ?dirBy4 ?person4\" , \"WHERE ?person1 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person2 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person3 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez]\" , \"OR ?person4 = [Alexandre Rockwell; Quentin Tarinton; Allison Anders; Robert Rodriguez]\"] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?dirBy1 P1? ?dirBy1 ?person1 AND ?dirBy2 P1? ?dirBy2 ?person2 AND ?dirBy3 P1? ?dirBy3 ?person3 AND ?dirBy4 P1? ?dirBy4 ?person4 WHERE ?person1 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez] OR ?person2 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez] OR ?person3 = [Alexandre Rockwell; Quentin Tarantino; Allison Anders; Robert Rodriguez] OR ?person4 = [Alexandre Rockwell; Quentin Tarinton; Allison Anders; Robert Rodriguez] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?dirBy1 PREDICATE? ?resource\" , \"OR ?dirBy2 PREDICATE? ?resource\" , \"OR ?dirBy3 PREDICATE? ?resource\" , \"OR ?dirBy4 PREDICATE? ?resource\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?dirBy1 PREDICATE? ?resource OR ?dirBy2 PREDICATE? ?resource OR ?dirBy3 PREDICATE? ?resource OR ?dirBy4 PREDICATE? ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS ?writer_or_editor\" , \"WHERE { \" , \"\\n\" , \"?w w:hasWriterOrEditor \\\"https://www.wikidata.org/entity/Q123456\\\";\" , \"\\n\" , \"?w r:isPartOf \\\"https://www.wikidata.org/entity/Q789012\\\";\" , \"\\n\" , \"SELECT ?w\" , \"FROM { \" , \"\\n\" , \"\\\"https://www.wikidata.org/entity/Q123456\\\" w:hasWriterOrEditor \\\"https://www.wikidata.org/entity/Q789012\\\";\" , \"\\n\" , \"}}\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?w AS ?writer_or_editor WHERE { ?w w:hasWriterOrEditor \"https://www.wikidata.org/entity/Q123456\"; ?w r:isPartOf \"https://www.wikidata.org/entity/Q789012\"; SELECT ?w FROM { \"https://www.wikidata.org/entity/Q123456\" w:hasWriterOrEditor \"https://www.wikidata.org/entity/Q789012\"; }} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS NOT NULL AND ?person2 IS NOT NULL AND ?person3 IS NOT NULL AND ?person4 IS NOT NULL AND ?person5 IS NOT NULL\" , \"SELECT * FROM ?person1 WHERE ?person1 IS NOT NULL\" , \"ASK ?person1 ?property ?value\" , \"ASK ?person2 ?property ?value\" , \"ASK ?person3 ?property ?value\" , \"ASK ?person4 ?property ?value\" , \"ASK ?person5 ?property ?value\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS NOT NULL AND ?person2 IS NOT NULL AND ?person3 IS NOT NULL AND ?person4 IS NOT NULL AND ?person5 IS NOT NULL SELECT * FROM ?person1 WHERE ?person1 IS NOT NULL ASK ?person1 ?property ?value ASK ?person2 ?property ?value ASK ?person3 ?property ?value ASK ?person4 ?property ?value ASK ?person5 ?property ?value LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person1 IS directed_by ?movie\" , \"AND ?person2 IS written_by ?movie\" , \"AND ?person3 IS directed_by ?movie\" , \"AND ?person4 IS written_by ?movie\" , \"AND ?person5 IS directed_by ?movie\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS directed_by ?movie AND ?person2 IS written_by ?movie AND ?person3 IS directed_by ?movie AND ?person4 IS written_by ?movie AND ?person5 IS directed_by ?movie LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p predicate namespace:https://www.wikidata.org/predicates/wikibase-prefixed%2F%2Fidnormal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?c WHERE ?w wdt:isWriterOf ?p AND ?c wdt:cinematographerOf ?p AND wdt:ExecutiveProducer ?e1 AND wdt:ExecutiveProducer ?e2 AND ?p wdt:executiveProducersOfStarWarsEpisodeIThePhantomMenaceAndTheLandBeforeTime\" ] }", "normal_query": "SELECT DISTINCT ?w, ?c WHERE ?w wdt:isWriterOf ?p AND ?c wdt:cinematographerOf ?p AND wdt:ExecutiveProducer ?e1 AND wdt:ExecutiveProducer ?e2 AND ?p wdt:executiveProducersOfStarWarsEpisodeIThePhantomMenaceAndTheLandBeforeTime LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_produced_by ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son_my_son_what_ha... ), but I'm not sure if that's the correct way to structure it. Maybe I should use separate predicates for each part, like using 'was_executive_producer_of' instead of just 'executive_produced_by'. Also, I think I need to include all three roles: writer, director, and executive producer. So perhaps I can have multiple conditions connected by ORs. Let me try structuring it as SELECT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son... ). But wait, the original question is asking for all three roles. Maybe I need to use separate predicates like 'was_writer_of', 'was_director_of', and 'was_executive_producer_of'. So perhaps the query should have multiple conditions connected by ORs for each role. Also, since the same person might be involved in both Fire Walk with Me and My Son, My Son... I need to make sure that the query captures all possible persons related through these roles across both works. Maybe using a WHERE clause with multiple OR conditions would help capture all relevant persons without duplication. So putting it all together: SELECT DISTINCT ?person WHERE wikitidata:Fire_walk_with_me_twin_peaks_was_writer_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_director_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person OR wikitidata:Twin_peaks_executive_produced_my_son... etc. But I'm not sure if this is the most efficient way or if there's a better approach, maybe using more specific predicates or leveraging Wikidata's structure to combine these conditions effectively. Alternatively, perhaps using a single predicate that combines all roles might be possible, but I think it's safer to handle each role separately with their own predicates and then select distinct persons from all of them. So the final query would have multiple OR conditions for each role across both works. But I'm still a bit confused about how to structure this correctly without missing any relevant persons or including duplicates. Maybe using separate SELECT statements isn't necessary, but since the question asks for only resources (persons), DISTINCT is needed to avoid duplicates if the same person holds multiple roles in different works. So overall, I think structuring the query with OR conditions linking each role and work would be the way to go, ensuring that all relevant persons are captured without duplication. However, I'm not entirely confident about this approach, so perhaps consulting Wikidata's documentation or examples on similar queries might help solidify the correct syntax and structure.\"\n]\n}\n", "normal_query": "SELECT DISTINCT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_produced_by ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son_my_son_what_ha... ), but I'm not sure if that's the correct way to structure it. Maybe I should use separate predicates for each part, like using 'was_executive_producer_of' instead of just 'executive_produced_by'. Also, I think I need to include all three roles: writer, director, and executive producer. So perhaps I can have multiple conditions connected by ORs. Let me try structuring it as SELECT ?person WHERE ( wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person ) OR ( wikitidata:Twin_peaks_executive_produced_my_son... ). But wait, the original question is asking for all three roles. Maybe I need to use separate predicates like 'was_writer_of', 'was_director_of', and 'was_executive_producer_of'. So perhaps the query should have multiple conditions connected by ORs for each role. Also, since the same person might be involved in both Fire Walk with Me and My Son, My Son... I need to make sure that the query captures all possible persons related through these roles across both works. Maybe using a WHERE clause with multiple OR conditions would help capture all relevant persons without duplication. So putting it all together: SELECT DISTINCT ?person WHERE wikitidata:Fire_walk_with_me_twin_peaks_was_writer_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_director_of ?person OR wikitidata:Fire_walk_with_me_twin_peaks_was_executive_producer_of ?person OR wikitidata:Twin_peaks_executive_produced_my_son... etc. But I'm not sure if this is the most efficient way or if there's a better approach, maybe using more specific predicates or leveraging Wikidata's structure to combine these conditions effectively. Alternatively, perhaps using a single predicate that combines all roles might be possible, but I think it's safer to handle each role separately with their own predicates and then select distinct persons from all of them. So the final query would have multiple OR conditions for each role across both works. But I'm still a bit confused about how to structure this correctly without missing any relevant persons or including duplicates. Maybe using separate SELECT statements isn't necessary, but since the question asks for only resources (persons), DISTINCT is needed to avoid duplicates if the same person holds multiple roles in different works. So overall, I think structuring the query with OR conditions linking each role and work would be the way to go, ensuring that all relevant persons are captured without duplication. However, I'm not entirely confident about this approach, so perhaps consulting Wikidata's documentation or examples on similar queries might help solidify the correct syntax and structure. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = ? AND wikitidata:WrittenBy = ? AND wikitidata:Cast = ?, ? , ? , ? , ? AND wikitidata:Composer = ? \", \"wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman\", \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman\" ] }\n        \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = ? AND wikitidata:WrittenBy = ? AND wikitidata:Cast = ?, ? , ? , ? , ? AND wikitidata:Composer = ? wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:DirectedBy = Vilgot Sjöman AND wikitidata:WrittenBy = Hans Alfredson AND wikitidata:Cast = Jörn Donner AND wikitidata:Cast = Gustaf Molander AND wikitidata:Composer = Ingmar Bergman LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?c WHERE ?c PREDICATE PREDICTS 'composer' AND ?c OBJECT 'Spy Kids 3-D: Game Over') ) AS ?composer \" , \"    (SELECT ?d WHERE ?d PREDICATE PREDICTS 'director' AND ?d OBJECT 'Sin City') ) AS ?director \" , \"    (SELECT ?e WHERE ?e PREDICATE PREDICTS 'cinematographer' AND ?e OBJECT 'Sin City: A Dame to Kill For') ) AS ?cinematographer \" , \"    (SELECT ?f WHERE ?f PREDICATE PREDICTS 'composer' AND ?f OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?composer2 \" , \"    (SELECT ?g WHERE ?g PREDICATE PREDICTS 'director' AND ?g OBJECT 'Sin City: A Dame to Kill For') ) AS ?director2 \" , \"    (SELECT ?h WHERE ?h PREDICATE PREDICTS 'cinematographer' AND ?h OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?cinematographer2 \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE (SELECT ?c WHERE ?c PREDICATE PREDICTS 'composer' AND ?c OBJECT 'Spy Kids 3-D: Game Over') ) AS ?composer (SELECT ?d WHERE ?d PREDICATE PREDICTS 'director' AND ?d OBJECT 'Sin City') ) AS ?director (SELECT ?e WHERE ?e PREDICATE PREDICTS 'cinematographer' AND ?e OBJECT 'Sin City: A Dame to Kill For') ) AS ?cinematographer (SELECT ?f WHERE ?f PREDICATE PREDICTS 'composer' AND ?f OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?composer2 (SELECT ?g WHERE ?g PREDICATE PREDICTS 'director' AND ?g OBJECT 'Sin City: A Dame to Kill For') ) AS ?director2 (SELECT ?h WHERE ?h PREDICATE PREDICTS 'cinematographer' AND ?h OBJECT 'The Adventures of Sharkboy and Lavagirl') ) AS ?cinematographer2 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n    \t\t\t\t\t \t\t\t\t\t\t \t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?productionCompany WHERE { ?p_a wikitab: producedByP 1; ?p_a wikitab: directedByP 2; }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?productionCompany WHERE { ?p_a wikitab: producedByP 1; ?p_a wikitab: directedByP 2; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS %w {\", \"?w\" ] } ", "normal_query": "SELECT DISTINCT ?w AS %w { ?w LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?resource wdt:isPartOf wdt:Q135627 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" , \"    ?resource wdt:P2408 wdt:Q295555 ; \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:isPartOf wdt:Q135627 ; ?resource wdt:P2408 wdt:Q295555 ; ?resource wdt:P2408 wdt:Q295555 ; ?resource wdt:P2408 wdt:Q295555 ; ?resource wdt:P2408 wdt:Q295555 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS ?name WHERE { ?w wdt:birthName ?n . }\", \"http://example.com/ask#id\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?w AS ?name WHERE { ?w wdt:birthName ?n . } <http://example.com//ask> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?p WHERE ?p = wdt:editors AND wdt:work = wd:Q123456) OR \" , \"    (SELECT ?p WHERE ?p = wdt:executiveProducers AND wdt:work = wd:Q123456) OR \" , \"    (SELECT ?p WHERE ?p = wdt:cinematographers AND wdt:work = wd:Q123456) ) \" , \"    AND wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [ ... ] OR \" , \"    wdt:cinematographers = [ ... ] \" , \"    wdt:editors = [ ... ] OR \" , \"    wdt:executiveProducers = [", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . }\", \"SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . } SELECT DISTINCT ?w, ?e WHERE { ?w w:executiveProducer ?x . ?x w:produced ?e . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 = 'Jörn Donner' AND wikitidata:P245 = 'Vilgot Sjöman' AND wikitidata:P245 = 'Hans Alfredson' AND wikitidata:P245 = 'Gustaf Molander' AND wikitidata:P245 = 'Ingmar Bergman'\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P245 = 'Jörn Donner' AND wikitidata:P245 = 'Vilgot Sjöman' AND wikitidata:P245 = 'Hans Alfredson' AND wikitidata:P245 = 'Gustaf Molander' AND wikitidata:P245 = 'Ingmar Bergman' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w AS %s WHERE \" , \"  \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" \" , \"    ( \" , \"      ?q a w:Question . \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"https://www.wikidata.org/wikidata/sCAPE/SPARQL\\\" , \" , \"      w:QuestionAnswered \" , \"      w:Answer \" , \"      w:AnswerLanguage 'en' . \" , \"      w:AnswerText '\" ,\"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\" ,\" ) \" , \"    ( \\\"", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?ownerType wdt:isPayerOfResource ?resource \" , \"    ?person wdt:hasRole ?role \" , \"    ?person wdt:worksAt ?organization \" , \"    ?organization wdt:name 'CERN' OR ?organization wdt:name 'World Wide Web Consortium' OR ?organization wdt:name 'School of Electronics and Computer Science, University of Southampton' OR ?organization wdt:name 'Plessey'\" , \"    ?person wdt:familyName ?firstName \" , \"    ?person wdt:givenName ?lastName\" , \"    ( ?role wdt:isPartOf ?roleType )\" , \"    ?roleType wdt:instanceof [ wdt:Researcher ] ) \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?ownerType wdt:isPayerOfResource ?resource ?person wdt:hasRole ?role ?person wdt:worksAt ?organization ?organization wdt:name 'CERN' OR ?organization wdt:name 'World Wide Web Consortium' OR ?organization wdt:name 'School of Electronics and Computer Science, University of Southampton' OR ?organization wdt:name 'Plessey' ?person wdt:familyName ?firstName ?person wdt:givenName ?lastName ( ?role wdt:isPartOf ?roleType ) ?roleType wdt:instanceof [ wdt:Researcher ] ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    ?p1 a p2 ; \" , \"    ?p2 ?q1 ; \" , \"    ?q1 ?r1 ; \" , \"    ?r1 ?v1 ; \" , \"    ?v1 ?w1 ; \" , \"    ?w1 ?x1 ; \" , \"    ?x1 ?y1 ; \" , \"    ?y1 ?z1 ; \" , \"    ?z1 ?a1 ; \" , \"    ?a1 a p3 ; \" , \"    ?p2 ?q2 ; \" , \"    ?q2 ?r2 ; \" , \"    ?r2 ?v2 ; \" , \"    ?v2 ?w2 ; \" , \"    ?w2 ?x2 ; \" , \"    ?x2 ?y2 ; \" , \"    ?y2 ?z2 ; \" , \"    ?z2 ?a2 ; \" , \"    ?a2 a p4 ; \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 a p2 ; ?p2 ?q1 ; ?q1 ?r1 ; ?r1 ?v1 ; ?v1 ?w1 ; ?w1 ?x1 ; ?x1 ?y1 ; ?y1 ?z1 ; ?z1 ?a1 ; ?a1 a p3 ; ?p2 ?q2 ; ?q2 ?r2 ; ?r2 ?v2 ; ?v2 ?w2 ; ?w2 ?x2 ; ?x2 ?y2 ; ?y2 ?z2 ; ?z2 ?a2 ; ?a2 a p4 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" , \"    (SELECT ?production_company WHERE production_company PREDICTS ?company) PREDICTS ?year ) \" , \"    AND ( ?person1 IS_A WRITER ) \" , \"    AND ( ?person1 IS_A CINEMATOGRAPHER ) \" , \"    AND ( ?person1 IS_A STAR ) \" , \"    AND ( ?person1 IS_A EDITOR ) \" , \"    AND ( ?person1 IS_A DIRECTOR ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'writer' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'cinematographer' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'star' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'editor' ) \" , \"    AND ( ?person1 OCCUPATION_TYPE 'director' ) \" , \"    AND ( ?person2 IS_A WRITER ) \" , \"    AND ( ?person2 IS_A CINEMATOGRAPHER ) \" , \"    AND ( ?person2 IS_A STAR ) \" , \"    AND ( ?person2 IS_A EDITOR ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'writer' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'cinematographer' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'star' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'editor' ) \" , \"    AND ( ?person2 OCCUPATION_TYPE 'director' ) \" , \"    ... and so on for each role. But this seems too long, perhaps using a better approach with quantifiers would be better. Maybe use a list of roles and iterate over them. Also, the query needs to find people who are exec producers of From Dusk till Dawn: The Series and also have all those other roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should return only resources that match all conditions. Additionally, the query needs to specify that the person is an executive producer for From Dusk till Dawn: The Series and also has all the specified roles in Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. So perhaps using a list of roles and checking if each person has all those roles would be better. Also, the query should", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"    (SELECT ?w writer WHERE ?w person AND ?w birthYear = 1943 AND ?w name = 'George Lucas') OR \" , \"    (SELECT ?c cinematographer WHERE ?c person AND ?c birthYear = 1947 AND ?c name = 'Rouben Rostamian') OR \" , \"    (SELECT ?d director WHERE ?d person AND ?d birthYear = 1952 AND ?d name = 'Kirk Jones') OR \" , \"    (SELECT ?f filmmaker WHERE ?f person AND ?f birthYear = 1948 AND ?f name = 'Peter C. Tompkins')\" , \"    ) AND \" , \"    (SELECT ?s starWarsEpisode WHERE ?s dbp:showTitle = 'Star Wars: Episode IV – A New Hope' AND ?s dbp:isPartOf = 'Star Wars' AND ?s dbp:createdYear = 1977)' , \"]} ", "normal_query": "SELECT DISTINCT ?resource WHERE (SELECT ?w writer WHERE ?w person AND ?w birthYear = 1943 AND ?w name = 'George Lucas') OR (SELECT ?c cinematographer WHERE ?c person AND ?c birthYear = 1947 AND ?c name = 'Rouben Rostamian') OR (SELECT ?d director WHERE ?d person AND ?d birthYear = 1952 AND ?d name = 'Kirk Jones') OR (SELECT ?f filmmaker WHERE ?f person AND ?f birthYear = 1948 AND ?f name = 'Peter C. Tompkins') ) AND (SELECT ?s starWarsEpisode WHERE ?s dbp:showTitle = 'Star Wars: Episode IV – A New Hope' AND ?s dbp:isPartOf = 'Star Wars' AND ?s dbp:createdYear = 1977)' , LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P145 = 'Jens Jørgen Thorsen' AND wikitidata:P206 = 'Jørgen Leth' AND wikitidata:P207 = 'Ole John'\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t", "normal_query": "SELECT * FROM wikitidata:PropertyGroup WHERE wikitidata:P145 = 'Jens Jørgen Thorsen' AND wikitidata:P206 = 'Jørgen Leth' AND wikitidata:P207 = 'Ole John' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"  ?productioncompany_p1_s1 ?productioncompany_p2 \" , \"  ?director_p1 ?actor_p1 \" , \"  ?writer_p1 ?actor_p2 \" , \"  ?country_p1 ?country_p2 \" , \"  ?year_p1 ?year_p2 \" , \"  ?imdb_id ?imdb_rating \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?productioncompany_p1_s1 ?productioncompany_p2 ?director_p1 ?actor_p1 ?writer_p1 ?actor_p2 ?country_p1 ?country_p2 ?year_p1 ?year_p2 ?imdb_id ?imdb_rating LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?editor, ?cinematographer, ?executiveProducers, ?director WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?editor, ?cinematographer, ?executiveProducers, ?director WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?w WHERE \" , \"        (SELECT ?a WHERE \" , \"            (SELECT ?x WHERE \" , \"                (SELECT ?p WHERE \" , \"                    (SELECT ?c WHERE \" , \"                        (SELECT ?y WHERE \" , \"                            (SELECT ?i WHERE \" , \"                                (SELECT ?s WHERE \" , \"                                    (SELECT ?m WHERE \" , \"                                        (SELECT ?t WHERE \" , \"                                            (SELECT ?u WHERE \" , \"                                                (SELECT ?k WHERE \" , \"                                                    (SELECT ?d WHERE \" , \"                                                        (SELECT ?b WHERE \" , \"                                                            (SELECT ?a1 WHERE \" , \"                                                                (SELECT ?w1 WHERE \" , \"                                                                    (SELECT ?x1 WHERE \" , \"                                                                        (SELECT ?p1 WHERE \" , \"                                                                            (SELECT ?c1 WHERE \" , \"                                                                                (SELECT ?y1 WHERE \" , \"                                                                                    (SELECT ?i1 WHERE \" , \"                                                                                        (SELECT ?s1 WHERE \" , \"                                                                                            (SELECT ?m1 WHERE \" , \"ettes\" , \"                            ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?uri WHERE \" , \"    (SELECT ?uri WHERE wikitab:isPartOf ?uri) ) AS ?uri\" , \"    AND (wikipedia:World Wide Web Consortium IS_A ?uri)\" , \"    AND (wikipedia:Open Data Institute IS_A ?uri)\" , \"    AND (wikidata:Plessey IS_A ?uri)\" , \"    AND (wikidata:CERN IS_A ?uri)\" , \"    AND (wikidata:University of Southampton IS_A ?uri)\" , \"    AND (wikidata:SCHOOL OF ELECTRONICS AND COMPUTER SCIENCE IS_A ?uri)\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?uri WHERE (SELECT ?uri WHERE wikitab:isPartOf ?uri) ) AS ?uri AND (wikipedia:World Wide Web Consortium IS_A ?uri) AND (wikipedia:Open Data Institute IS_A ?uri) AND (wikidata:Plessey IS_A ?uri) AND (wikidata:CERN IS_A ?uri) AND (wikidata:University of Southampton IS_A ?uri) AND (wikidata:SCHOOL OF ELECTRONICS AND COMPUTER SCIENCE IS_A ?uri) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?w WHERE wikitourmal ?w ) AND \" , \"    (SELECT ?c WHERE wikitourmal ?c ) AND \" , \"    (SELECT ?s WHERE wikitourmal ?s ) AND \" , \"    (SELECT ?m WHERE wikitourmal ?m ) \" , \"    AND wikitourmal ?r \" , \"    AND wikitourmal ?d \" , \"    AND wikitourmal ?a \" , \"    AND wikitourmal ?p \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE (SELECT ?w WHERE wikitourmal ?w ) AND (SELECT ?c WHERE wikitourmal ?c ) AND (SELECT ?s WHERE wikitourmal ?s ) AND (SELECT ?m WHERE wikitourmal ?m ) AND wikitourmal ?r AND wikitourmal ?d AND wikitourmal ?a AND wikitourmal ?p LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" , \"    (SELECT ?p WHERE \" , \"        (SELECT ?f WHERE \" , \"            (SELECT ?a WHERE \" , \"                (SELECT ?d WHERE \" , \"                    (SELECT ?y WHERE \" , \"                        (SELECT ?x WHERE \" , \"                            (SELECT ?w WHERE \" , \"                                (SELECT ?g WHERE \" , \"                                    (SELECT ?b WHERE \" , \"                                        (SELECT ?t WHERE \" , \"                                            (SELECT ?i WHERE \" , \"                                                (SELECT ?n WHERE \" , \"                                                    (SELECT ?m WHERE \" , \"                                                        (SELECT ?l WHERE \" , \"                                                            (SELECT ?k WHERE \" , \"                                                                (SELECT ?j WHERE \" , \"                                                                    (SELECT ?i WHERE \" , \"                                                                        (SELECT ?h WHERE \" , \"                                                                            (SELECT ?g WHERE \" , \"                                                                                (SELECT ?f WHERE \" , \"                                                                                    (SELECT ?e WHERE \" , \"                                                                                      (SELECT ?d WHERE \" , \"                                                                                          (SELECT ?c WHERE \" , \"                                                                                              (SELECT ?b WHERE \" , \"                                                                                                  (SELECT ?a WHERE \" , \"                                                                                                      (SELECT ?z WHERE \" , \"                                                                                                          (SELECT ?y WHERE \" , \"                                                                                                                (SELECT ?x WHERE \" , \"                                                                                                                (SELECT ?w WHERE \" , \"                                                                                                                (SELECT ?v WHERE \" , \"                                                                                                                (SELECT ?u WHERE \" , \"                                                                                                                (SELECT ?t WHERE \" , \"                                                                                                                (SELECT ?s WHERE \" , \"                                                                                                                (SELECT ?r WHERE \" , \"                                                                                                                (SELECT ?q WHERE \" , \"                                                                                                                (SELECT ?p WHERE \" , \"                                                                                                                (SELECT ?o WHERE \" , \"                                                                                                                (SELECT ?n WHERE \" , \"                                                                                                                (SELECT ?m WHERE \" , \"                                                                                                                (SELECT ?l WHERE \" , \"                                                                                                                (SELECT ?k WHERE \" , \"                                                                                                                (SELECT ?j WHERE \" , \"                                                                                                                (SELECT ?i WHERE \" , \"                                                                                                                (SELECT ?h WHERE \" , \"                                                                                                                (SELECT ?g WHERE \" , \"                                                                                                                (SELECT ?f WHERE \" , \"                                                                                                                (SELECT ?e WHERE \" , \"                                                                                                                (SELECT ?d WHERE \" , \"                                                                                                                (SELECT ?c WHERE \" , \"                                                                                                                (SELECT ?b WHERE \" , \"                                                                                                                (SELECT ?a WHERE \" , \"                                                                                                                (SELECT ?znormal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?p WHERE (SELECT ?e WHERE (SELECT ?a WHERE (SELECT ?x WHERE ?x IS A wikitext:property \\\"year\\\" AND ?x = 1985 ) AS ?y ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?p where (SELECT ?c FROM ?q WHERE ... )\", \"SELECT ?p where (SELECT ?c FROM ?q WHERE ... )\", \"SELECT ?p where (SELECT ?c FROM ?q WHERE ... )\", \"SELECT ?p where (SELECT ?c FROM ?q WHERE ... )\", \"SELECT ?p where (SELECT ?c FROM ?q WHERE ... )\" ]}\n        \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?p where (SELECT ?c FROM ?q WHERE ... ) SELECT ?p where (SELECT ?c FROM ?q WHERE ... ) SELECT ?p where (SELECT ?c FROM ?q WHERE ... ) SELECT ?p where (SELECT ?c FROM ?q WHERE ... ) SELECT ?p where (SELECT ?c FROM ?q WHERE ... ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = [\\\"executive produced\\\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"] AND ?category = [\\\"executive produced\\\") ) ), WHERE ?person = [\\\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"], RETURNING [*] }\", \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = [\\\"executive produced\\\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"] AND ?category = [\\\"executive produced\\\") ) ), WHERE ?person = [\\\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"], RETURNING [*] }\", \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = [\\\"executive produced\\\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"] AND ?category = [\\\"executive produced\\\") ) ), WHERE ?person = [\\\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"], RETURNING [*] }\", \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = [\\\"executive produced\\\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"] AND ?category = [\\\"executive produced\\\") ) ), WHERE ?person = [\\\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"], RETURNING [*] }\", \"SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\\\"Rabbits and Six Men Getting Sick\\\"] AND ?category = [\\\"executive produced\\\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\\\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"] AND ?category = [\\\"executive produced\\\") ) ), WHERE ?person = [\\\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\\\"], RETURNING [*] }\" ]} ", "normal_query": "SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\"Rabbits and Six Men Getting Sick\"] AND ?category = [\"executive produced\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"] AND ?category = [\"executive produced\") ) ), WHERE ?person = [\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"], RETURNING [*] } SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\"Rabbits and Six Men Getting Sick\"] AND ?category = [\"executive produced\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"] AND ?category = [\"executive produced\") ) ), WHERE ?person = [\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"], RETURNING [*] } SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\"Rabbits and Six Men Getting Sick\"] AND ?category = [\"executive produced\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"] AND ?category = [\"executive produced\") ) ), WHERE ?person = [\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"], RETURNING [*] } SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\"Rabbits and Six Men Getting Sick\"] AND ?category = [\"executive produced\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"] AND ?category = [\"executive produced\") ) ), WHERE ?person = [\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"], RETURNING [*] } SELECT DISTINCT ?person WHERE (SELECT ?c INCL ?category WHERE ?c = [\"Rabbits and Six Men Getting Sick\"] AND ?category = [\"executive produced\") ) OR (SELECT ?c INCL ?category WHERE ?c = [\"Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"] AND ?category = [\"executive produced\") ) ), WHERE ?person = [\"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"], RETURNING [*] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?p1\" , \"__was born in__\" , \"1947\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?p1 __was born in__ 1947 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" , \"  ?production_company_wrote ?work , ?director_wrote ?work , ?editor_wrote ?work , \" , \"  ?composer_wrote ?work , \" , \"  ?country_of_origin_is ?person , \" , \"  ?gender_of_person IS 'male' \" , \"  ?name ?person WHERE \" , \"  SELECT DISTINCT ?person WHERE \" , \"  ?production_company_wrote ?work , \" , \"  ?director_wrote ?work , \" , \"  ?editor_wrote ?work , \" , \"  ?composer_wrote ?work , \" , \"  ?country_of_origin_is ?person , \" , \"  ?gender_of_person IS 'male' \" , \"  ?name ?person \" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE ?production_company_wrote ?work , ?director_wrote ?work , ?editor_wrote ?work , ?composer_wrote ?work , ?country_of_origin_is ?person , ?gender_of_person IS 'male' ?name ?person WHERE SELECT DISTINCT ?person WHERE ?production_company_wrote ?work , ?director_wrote ?work , ?editor_wrote ?work , ?composer_wrote ?work , ?country_of_origin_is ?person , ?gender_of_person IS 'male' ?name ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer , ?editor , ?director WHERE \" , \"  ?composer PREDICATE1 ?composer_work , \" , \"  ?editor PREDICATE2 ?editor_work , \" , \"  ?director PREDICATE3 ?director_work \" , \"  AND ( \" , \"    ?composer_work W predicates ?work1 \" , \"    ?editor_work E predicates ?work1 \" , \"    ?director_work D predicates ?work1 \" , \"    OR ( \" , \"      ?composer_work W predicates ?work2 \" , \"      ?editor_work E predicates ?work2 \" , \"      ?director_work D predicates ?work2 \" , \"      ) \" , \"  ) \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?composer , ?editor , ?director WHERE ?composer PREDICATE1 ?composer_work , ?editor PREDICATE2 ?editor_work , ?director PREDICATE3 ?director_work AND ( ?composer_work W predicates ?work1 ?editor_work E predicates ?work1 ?director_work D predicates ?work1 OR ( ?composer_work W predicates ?work2 ?editor_work E predicates ?work2 ?director_work D predicates ?work2 ) ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?director , ?star , ?writer WHERE \" , \"     \" , \"_source_1 = 'Jane B.' AND _source_2 = 'Agnès V.' AND _source_3 = 'The Beaches of Agnès' AND _source_4 = 'The World of Jacques Demy'\" ] } ", "normal_query": "SELECT DISTINCT ?director , ?star , ?writer WHERE       _source_1 = 'Jane B.' AND _source_2 = 'Agnès V.' AND _source_3 = 'The Beaches of Agnès' AND _source_4 = 'The World of Jacques Demy' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata.wikibase_data WHERE wikitidata:is_a wikitidata:P2457 AND wikitidata:has_part wikitidata:P1308 AND wikitidata:has_part wikitidata:P1695 AND wikitidata:has_part wikitidata:P2457\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT * FROM wikitidata.wikibase_data WHERE wikitidata:is_a wikitidata:P2457 AND wikitidata:has_part wikitidata:P1308 AND wikitidata:has_part wikitidata:P1695 AND wikitidata:has_part wikitidata:P2457 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?w, ?c WHERE ?w w:birthYearP1 ?y AND w:mother ?m AND w:father ?f AND w:spouse ?s AND w:child ?k\", \"?c c:bornOn ?y2 AND c:mother ?m2 AND c:father ?f2 AND c:mother ?m3 AND c:father ?f3\" ] } ", "normal_query": "SELECT DISTINCT ?w, ?c WHERE ?w w:birthYearP1 ?y AND w:mother ?m AND w:father ?f AND w:spouse ?s AND w:child ?k ?c c:bornOn ?y2 AND c:mother ?m2 AND c:father ?f2 AND c:mother ?m3 AND c:father ?f3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?dir WHERE { ?p a P  ; ?p PdirectedBy ?dir . }\", \"SELECT DISTINCT ?dir WHERE { ?p a P  ; ?p PdirectedBy ?dir . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?dir WHERE { ?p a P ; ?p PdirectedBy ?dir . } SELECT DISTINCT ?dir WHERE { ?p a P ; ?p PdirectedBy ?dir . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT * FROM wikitidata.wikibase_data WHERE ? = \\\"What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group\\\" AND ( ? = \\\"State Street Global Advisors\\\" OR ? = \\\"BlackRock\\\" OR ? = \\\"T. Rowe Price\\\" OR ? = \\\"Capital Group Companies\\\" ) AND ( ? = \\\"State Farm Insurance\\\" OR ? = \\\"The Vanguard Group\\\" ) AND ( ? = \\\"Grand Canyon\\\" ) \", \"format\" ] } ", "normal_query": "SELECT * FROM wikitidata.wikibase_data WHERE ? = \"What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group\" AND ( ? = \"State Street Global Advisors\" OR ? = \"BlackRock\" OR ? = \"T. Rowe Price\" OR ? = \"Capital Group Companies\" ) AND ( ? = \"State Farm Insurance\" OR ? = \"The Vanguard Group\" ) AND ( ? = \"Grand Canyon\" ) format LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2547689 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2547689 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?human wdt:P1052 ?found }\" ] }\n   \t\t\t\t\t\t\t   \t    \t\t", "normal_query": "SELECT ?resource WHERE { ?human wdt:P1052 ?found } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [ \"What did human found\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "What did human found LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{\n  \"query\": [\n    \"What did human found?\"\n  ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "What did human found? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n      \"  ?person wdt:P106 wd:Q2598 .\", \">// P106 is occupation, Q2598 is film director\\n\",\n      \"  ?person wdt:P1411 ?edit .\", \">// P1411 is edited work\\n\",\n      \"  ?edit wdt:P31 wd:Q11173 .\", \">// Q11173 is resource\\n\",\n      \"  SERVICE wikibase:label { bd:serviceParam lang 'en' }\" ,\"\\n\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q2598 . >// P106 is occupation, Q2598 is film director ?person wdt:P1411 ?edit . >// P1411 is edited work ?edit wdt:P31 wd:Q11173 . >// Q11173 is resource SERVICE wikibase:label { bd:serviceParam lang 'en' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P179 wd:Q203864 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?work WHERE { ?work wdt:P179 wd:Q203864 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P1630 wd:Q25948 }\" ] }\n    \t\t    \t\t\t\t    \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1630 wd:Q25948 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?parent WHERE { wd:Q1897 p:P2258 ?statement . ?statement ps:P2258 ?parent . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?parent WHERE { wd:Q1897 p:P2258 ?statement . ?statement ps:P2258 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q1006543 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q1006543 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{ \"query\": [ \"What was written by Douglas Adams\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "What was written by Douglas Adams LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P3002 ?employer . VALUES (?employer) {(wd:Q197)} }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P3002 ?employer . VALUES (?employer) {(wd:Q197)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q57140698 . ?work wdt:P28 wd:Q85370 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q57140698 . ?work wdt:P28 wd:Q85370 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P3608 ?y . ?y wdt:P179 ?z . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P3608 ?y . ?y wdt:P179 ?z . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?work wdt:P31 wd:Q24507896 . ?work wdt:P178 ?composer . ?work wdt:P161 ?designer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?resource WHERE { ?work wdt:P31 wd:Q24507896 . ?work wdt:P178 ?composer . ?work wdt:P161 ?designer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:cinematographer ?y . ?y wdt:P31 wd:Q5 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:cinematographer ?y . ?y wdt:P31 wd:Q5 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q870946 }\" ] }\n   \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q870946 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?work wdt:P300 ?composer . ?work wdt:P577 ?date . ?date wdt:P1948 ?year . FILTER (BOUND (?year) && ?year = 1999 ) }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?composer WHERE { ?work wdt:P300 ?composer . ?work wdt:P577 ?date . ?date wdt:P1948 ?year . FILTER (BOUND (?year) && ?year = 1999 ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P1411 wd:Q289760 }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P1411 wd:Q289760 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q283584 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q283584 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5726489 . }\" ] }\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5726489 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?actor WHERE { ?film wdt:P1640 wd:Q23598 . ?film wdt:P178 ?actor . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?actor WHERE { ?film wdt:P1640 wd:Q23598 . ?film wdt:P178 ?actor . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q48976 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q48976 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?this wdt:P31 wd:Q5 . ?this wdt:P1086 ?employer . ?this wdsi:P2479 wd:Q29258375 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?this wdt:P31 wd:Q5 . ?this wdt:P1086 ?employer . ?this wdsi:P2479 wd:Q29258375 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P108 ?employer . FILTER (STR(?person) = \\\"Malia Obama\\\") }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P108 ?employer . FILTER (STR(?person) = \"Malia Obama\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:George_Harrison_(musician) . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:George_Harrison_(musician) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P1433 ?author . ?author wdt:P106 wd:Q5728945 }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1433 ?author . ?author wdt:P106 wd:Q5728945 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q28495 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q28495 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?spouse WHERE { wd:Q1032746 wdt:P569 ?birthDate . }\" ] }\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?spouse WHERE { wd:Q1032746 wdt:P569 ?birthDate . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?filmDirector wdt:P106 wd:Q25398 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t \t\t\t \t", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P106 wd:Q25398 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?director wdt:P106 wd:Q2526255 .\", \"><!--Occupation is film director--> <!--Director node--> <!--Director has occupation film director--> <!--Director is a person, so maybe use P108?--> <!--Wait, the question is about employer of a film director found by Canada. So Canada founded an employer which employs a film director. Or perhaps Canada as an employer for a film director? Hmm, need to clarify. The original question: \" ]}\n  \t\t\t\t\t\t   \t\t\t\t\t \t  ", "normal_query": "SELECT ?employer WHERE { ?director wdt:P106 wd:Q2526255 . ><!--Occupation is film director--> <!--Director node--> <!--Director has occupation film director--> <!--Director is a person, so maybe use P108?--> <!--Wait, the question is about employer of a film director found by Canada. So Canada founded an employer which employs a film director. Or perhaps Canada as an employer for a film director? Hmm, need to clarify. The original question: LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q295 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P50 wd:Q295 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P162 ?y .\"\n      ,\n      \"?x wdt:P58 ?y .\"\n      ,\n      \"?y wdt:P272 wd:Q1744 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P162 ?y . ?x wdt:P58 ?y . ?y wdt:P272 wd:Q1744 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?costumeDesigner wdt:P106 wd:Q25984 . ?costumeDesigner p:P1378/psn:P1378 ?statement . ?statement ps:P1378 ?job . ?statement pq:P1378 ?startYear . ?employer wdt:P106 wd:Q18024598 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner wdt:P106 wd:Q25984 . ?costumeDesigner p:P1378/psn:P1378 ?statement . ?statement ps:P1378 ?job . ?statement pq:P1378 ?startYear . ?employer wdt:P106 wd:Q18024598 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P106 wd:Q235487 . ?person wdt:P1082 ?employer }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?person wdt:P106 wd:Q235487 . ?person wdt:P1082 ?employer } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?employer WHERE { ?person wdt:P106 wd:Q234895 . ?person wdt:P1082 ?employer . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?employer WHERE { ?person wdt:P106 wd:Q234895 . ?person wdt:P1082 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q483572 ; wdt:P17 wd:Q30 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q483572 ; wdt:P17 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q1809764 .\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q1809764 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?spouse ?sibling WHERE { wd:Q164837 wdt:P2200 ?spouse . wd:Q164837 wdt:P599 ?sibling }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q164837 wdt:P2200 ?spouse . wd:Q164837 wdt:P599 ?sibling } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q245086; wdt:P179 ?distributor; wdt:P183 ?producer . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q245086; wdt:P179 ?distributor; wdt:P183 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q24897 . ?person wdt:P106 wd:Q24897 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q24897 . ?person wdt:P106 wd:Q24897 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P225 ?name . FILTER (LANG(?name) = 'de') . ?person wdt:P699 ?employee . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P225 ?name . FILTER (LANG(?name) = 'de') . ?person wdt:P699 ?employee . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q490779 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q490779 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P140 |wdt:P286 ?creator . ?creator wdt:P1795 wd:Q33080 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P140 |wdt:P286 ?creator . ?creator wdt:P1795 wd:Q33080 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q27948 . ?person wdt:P106 wd:Q27948 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q27948 . ?person wdt:P106 wd:Q27948 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q24507896.\",\n      \"FILTER (EXISTS { ?work wdt:P160 ?p . ?p wdt:P166 wd:Q153745 })\",\n      \"FILTER (EXISTS { ?work wdt:P160 ?s . ?s wdt:P166 wd:Q24507896 })\"\n    ,\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q24507896. FILTER (EXISTS { ?work wdt:P160 ?p . ?p wdt:P166 wd:Q153745 }) FILTER (EXISTS { ?work wdt:P160 ?s . ?s wdt:P166 wd:Q24507896 }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P3608 wd:Q1457298 ; wdt:P160 wd:Q1457298 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P3608 wd:Q1457298 ; wdt:P160 wd:Q1457298 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?item WHERE { ?item wdt:P31 wd:Q50684297 . ?item wdt:P17 wd:Q30 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q50684297 . ?item wdt:P17 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person ?spouse WHERE { ?person wdt:P698 wd:Q1532470 . ?person wdt:P225 wd:Q1532470 . ?person wdt:P25 wd:Q1532470 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?person ?spouse WHERE { ?person wdt:P698 wd:Q1532470 . ?person wdt:P225 wd:Q1532470 . ?person wdt:P25 wd:Q1532470 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q479860 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P22 wd:Q479860 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q54270896 .\", \"><!-- P31 is instance of, Q54270896 is work (art)--> <!-- Wait, no. Let me check the correct class for works. Maybe it's better to use wdt:P1433 (work). Hmm, but I'm not sure. Alternatively, perhaps using wdt:P31 with wd:Q54270896 is okay if that refers to a work.--> <!-- Let me check what Q54270896 is. Looking it up... Oh no, Q54270896 is \" , \"title of a literary work\" , \"description: title of a literary work\", \"label: title of a literary work (English)\" , \"label: titre d'une œuvre littéraire (French)\" , \"label: Titel einer literarischen Arbeit (German)\" , \"label: 标题的文学作品（中文）\" , \"label: titolo di opera letteraria (Italian)\" , \"label: título de uma obra literária (Portuguese)\" , \"label: tittel på en litterær værk (Danish)\" , \"label: titel van een literaire werk (Dutch)\" , \"label: Tytul dzieła literackiego (Polish)\" , \"label: Título de uma obra literária (Spanish)\" , \"label: 标题的文学作品（俄语）\" , \"label: 标題的作品文學（闽南语）\" , \"label: 标题的文学作品（日语）\" , \"label: 标题的文学作品（韩语）\" , \"label: 标题的文学作品（泰米尔）\" , \"label: 标题的文学作品（波斯语）\" , \"label: 标题的文学作品（豪萨语）\" , \"label: 标题的文学作品（乌尔都语）\" , \"label: 标题的文学作品（土耳其语）\" , \"label: 标题的文学作品（希腊语）\" , \"label: 标题的文学作品（瑞典语）\" , \"label: 标题的文学作品（芬兰语）\" , \"label: 标题的文学作品（爱沙尼亚语）\" , \"label: 标题的文学作品（拉脱维亚语）\" , \"label: 标题的文学作品（立陶宛语）\" , \"label: 标题的文学作品（捷克语）\" , \"label: 标题的文学作品（斯洛伐克语）\" , \"label: 标题的文学作品（匈牙利语）\" , \"label: 标题的文学作品（波兰语）\" , \"label: 标题的文学作品（乌克兰语）\" , \"label: 标题的文学作品（保加利亚语）\" , \"label: 标题的文学作品（塞尔维亚语）\" , \"label: 标题的文学作品（罗马尼亚语）\" , \"label: 标题的文学作品（德语）\" , \"label: 标题的文学作品（意大利语）\" , \"label: 标题的文学作品（葡萄牙语）\" , \"label: 标题的文学作品（西班牙语）\" , \"label: 标题的文学作品（中文）\" , \"label: 标题的文学作品（其他语言...）--> <!-- So Q54270896 is \" , \"title of a literary work\", \"description: title of a literary work\", \"label: title of a literary work (English)\" , \"label: titre d'une œuvre littéraire (French)\" , \"label: Titel einer literarischen Arbeit (German)\" , \"label: 标题的文学作品（中文）\" , \"label: titolo di opera letteraria (Italian)\" , \"label: título de uma obra literária (Portuguese)\" , \"label: tittel på en litterær værk (Danish)\" , \"label: titel van een literaire werk (Dutch)\" , \"label: Tytul dzieła literackiego (Polish)\" , \"label: Título de una obra literária (Spanish)\" , \"label: 标题的文学作品（俄语）\" , \"label: 标題的作品文學（闽南语）\" , \"label: 标题的文学作品（日语）\" , \"label: 标题的文学作品（韩语）\" , \"label: 标题的文学作品（", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?child ?parent WHERE { ?parent wdt:P127 ?child . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?child ?parent WHERE { ?parent wdt:P127 ?child . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . ?actor wdt:P1640 wd:Q21798 }\" ] }\n    \t\t    \t\t\t\t    \t\t", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . ?actor wdt:P1640 wd:Q21798 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?person wdt:P10478 ?work . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P10478 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q1142056 . ?film wdt:P178 ?costumeDesigner . ?person wdt:P106 wd:Q169972 . ?person wdt:P178 ?film . ?sibling wdt:P3373 ?person . ?sibling wdt:P106 wd:Q169972 . }\" ] }\n   \t\t   \t\t\t\t\t    \t\t\t", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q1142056 . ?film wdt:P178 ?costumeDesigner . ?person wdt:P106 wd:Q169972 . ?person wdt:P178 ?film . ?sibling wdt:P3373 ?person . ?sibling wdt:P106 wd:Q169972 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P22 wd:Q1067489 . }\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P22 wd:Q1067489 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?s p:hasProducerOrEditor ?p . VALUES (?s) {(wd:Q123456)} }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?p WHERE { ?s p:hasProducerOrEditor ?p . VALUES (?s) {(wd:Q123456)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q2095876 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q2095876 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P286 ?editor . ?work wdt:P50 ?author }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P286 ?editor . ?work wdt:P50 ?author } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P100 wd:Q1030686 . ?work wdt:P100 wd:Q1030686 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q5726489 . ?work wdt:P100 wd:Q1030686 . ?work wdt:P100 wd:Q1030686 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . ?p wdt:P1628 wd:Q40973 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . ?p wdt:P1628 wd:Q40973 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?work WHERE { ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . ?work wdt:P3608 wd:Q1507492 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x ?p ?v }\"\n  ]\n}\n                    ", "normal_query": "{ ?x ?p ?v } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?productionCredits WHERE { <http://www.wikidata.org/entity/Q263580> wdt:P1628 ?productionCredits . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?productionCredits WHERE { wd:Q263580 wdt:P1628 ?productionCredits . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:starring_in/film ?film . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:starring_in/film ?film . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \">// instance of human (assuming editor and star are humans)\"\n     \t\t\t,\"?x wdt:P1406 ?y .\" , \">// has occupation or role\"\n     \t\t\t,\"FILTER ( ?y = wd:Q28796 ) .\" ,\"\\n\" ,\n      \"?x wdt:P57 ?z .\" ,\n      \"FILTER ( ?z = wd:Q3380154 ) .\",\n      \"?x wdt:P161 ?a .\" ,\n      \"FILTER ( ?a = wd:Q28796 ) .\"\n   \t,\"}\"\n  ]\n}\n   \t\t\t\t\t   \t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . >// instance of human (assuming editor and star are humans) ?x wdt:P1406 ?y . >// has occupation or role FILTER ( ?y = wd:Q28796 ) . ?x wdt:P57 ?z . FILTER ( ?z = wd:Q3380154 ) . ?x wdt:P161 ?a . FILTER ( ?a = wd:Q28796 ) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"FILTER (LANG(?x) = 'en') .\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . => human FILTER (LANG(?x) = 'en') . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q258764 ; wdt:P170 ?director . VALUES (?director) {(wd:Q190 , wd:Q153058, wd:Q1001584, wd:Q1637285)} }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q258764 ; wdt:P170 ?director . VALUES (?director) {(wd:Q190 , wd:Q153058, wd:Q1001584, wd:Q1637285)} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571. ?resource wdt:P1628 ?executiveProducer . ?executiveProducer rdfs:label \\\"George Lucas\\\" . ?resource wdt:P1628 ?producer . ?producer rdfs:label \\\"George Lucas\\\" . ?resource wdt:P1628 ?editor . ?editor rdfs:label \\\"George Lucas\\\" . }\" ] }\n                   \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571. ?resource wdt:P1628 ?executiveProducer . ?executiveProducer rdfs:label \"George Lucas\" . ?resource wdt:P1628 ?producer . ?producer rdfs:label \"George Lucas\" . ?resource wdt:P1628 ?editor . ?editor rdfs:label \"George Lucas\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?work1 wdt:P31 wd:Q5406428 }\",\n    \"{ ?work1 wdt:P179 wd:Q169784 }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?work1 wdt:P31 wd:Q5406428 } { ?work1 wdt:P179 wd:Q169784 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P3880 ?y .\", \"=> This line is incorrect, need to fix it.\"\n      ,\n      \"FILTER (regex(str(?y), \\\"^Bob Yari$\\\")) .\",\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P3880 ?y . => This line is incorrect, need to fix it. FILTER (regex(str(?y), \"^Bob Yari$\")) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P1628 wd:Q3095747 . }\" ] }\n   \t\t\t\t\t\t\t\t\t \t\t\t \t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P1628 wd:Q3095747 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q5427089 . ?work wdt:P50 wd:Jørgen Leth . ?work wdt:P50 wd:Jens Jørgen Thorsen . ?work wdt:P50 wd:Ole John }\" ] }\n                    ", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q5427089 . ?work wdt:P50 wd:Jørgen Leth . ?work wdt:P50 wd:Jens Jørgen Thorsen . ?work wdt:P50 wd:Ole John } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:Ole_John . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q2450687 ; wdt:P57 wd:Ole_John . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P31'; ?> <?php echo 'wd:Q5'; ?><br/> <!-- P31 is instance of, Q5 is human--><br/><?php echo 'person wdt:P31 wd:Q5 .'; ?><br/> <!-- P31 is instance of, Q5 is human--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo '?person wdt:P166 wd:Q2450789 .'; ?><br/> <!-- P166 is cinematographer, Q2450789 is director--><br/><?php echo 'person wdt:P166 wd:Q2450789", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?cinematographer ?director\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q25870.\",\n      \"?film wdt:P166 ?actor.\",\n      \"?film wdt:P164 ?cinematographer.\",\n      \"?film wdt:P162 ?director.\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?actor ?cinematographer ?director WHERE { ?film wdt:P31 wd:Q25870. ?film wdt:P166 ?actor. ?film wdt:P164 ?cinematographer. ?film wdt:P162 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?work wdt:P31 wd:Q2450789 ; wdt:P57 wd:Q21695 ; wdt:P16237 wd:Q21695 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q2450789 ; wdt:P57 wd:Q21695 ; wdt:P16237 wd:Q21695 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?person wdt:P1628 ?work . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?person wdt:P1628 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?director WHERE { ?movie wdt:P31 wd:Q25870 . ?movie wdt:P57 ?director . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?director WHERE { ?movie wdt:P31 wd:Q25870 . ?movie wdt:P57 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11422705 . ?film wdt:P585 [ a wd:Q1697884 ; wdt:P170 dbr:en ] . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11422705 . ?film wdt:P585 [ a wd:Q1697884 ; wdt:P170 dbr:en ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q54270896 .\", \"><!-- P31 is instance of, Q54270896 is work (in general) --><!-- So this line selects all works. But we need to filter by the creators. So next lines will add constraints on ?work's creators. --><!-- Now, for each creator, we'll have a triple that connects them to the work. Since there are multiple creators, we can use multiple OR conditions in the WHERE clause. --><!-- First, let's get all the identifiers for the people: Thomas Schnauz is wd:Q21945867, Peter Gould is wd:Q3020790, George Mastras is wd:Q1574744, Sam Catlin is wd:Q21945868, and Vince Gilligan is wd:Q1574745. --><!-- Now, for each person, we'll write a triple that connects them to the work as either director or writer. For directors, it's P1055 (directed by), and for writers, it's P1496 (scriptwriter). But since some people might have both roles, we need to use OR conditions. --><!-- So, for each person, we'll write a condition that says: the work was directed or written by them. We can do this with multiple ORs in the WHERE clause. --><!-- Let's structure it as follows: For each creator, add a line like ?work wdt:P1055 ?creator . OR ?work wdt:P1496 ?creator . But since we have 5 creators, and for each we need two conditions (directed or written), the WHERE clause will get lengthy. Alternatively, we can use SERVICE clauses to combine these conditions more cleanly. --><!-- Another approach is to create a list of all possible directed by or written by triples for each creator. So, for each creator, we'll have something like: ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . And similarly for the others. --><!-- This might be a bit repetitive, but it's straightforward. Let's proceed with that. --><!-- So, putting it all together, the WHERE clause will have multiple OR conditions for each creator and their roles. --><!-- Now, let's write out the full query. We'll start with SELECT ?work, then in the WHERE clause, we'll have ?work wdt:P31 wd:Q54270896 . followed by all the directed by or written by conditions for each creator. --><!-- Let me structure it step by step. First line: SELECT ?work. Second line: WHERE { ... }. Inside the WHERE clause, first condition is that ?work is a work (P31 Q54270896). Then, we'll add OR conditions for each creator and their roles. --><!-- For Thomas Schnauz: directed by or written by. So, ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . Similarly for the others. --><!-- This will result in a long WHERE clause with multiple ORs. It's not the most efficient, but it works. Alternatively, we could use a more concise syntax by grouping the conditions, but I think this is clear enough. --><!-- So, the final query should look like: SELECT ?work WHERE { ?work wdt:P31 wd:Q54270896 . ?work wdt:P1055 wd:Q21945867 . OR ?work wdt:P1496 wd:Q21945867 . OR ... and so on for each creator. --><!-- Wait, but in SPARQL, the OR is part of the same clause, so we need to structure it correctly. Each condition should be separated by a semicolon or properly nested. Hmm, perhaps using multiple filters with AND and OR might be better. Alternatively, using a more efficient method like grouping the creators into a list and checking against that. But for simplicity, let's proceed as initially thought. --><!-- So, the full query will have all these conditions connected by ORs within the WHERE clause. It might not be the most elegant, but it should work to return all works directed or written by any of the specified creators. --><!-- Now, I'll write out the actual SPARQL query with all these conditions. --><!-- First, SELECT ?", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?directed ?written ?edited {\", \"  SERVICE <https://query.wikidata.org/sparql> {\", \"    SELECT ?directed ?written ?edited {\", \"      wd:Q1084 wdt:P31 wd:Q5 .\", \"      ?directed p-director-of ?statement_director .\", \"      ?statement_director ps-director-of ?director .\", \"      ?statement_director pq-director-of ?year .\", \"      ?written p-written-by ?statement_written .\", \"      ?statement_written ps-written-by ?writer .\", \"      ?statement_written pq-written-by ?date .\", \"      ?edited p-edited-by ?statement_edit .\", \"      ?statement_edit ps-edited-by ?editor .\", \"      ?statement_edit pq-edited-by ?info .\", \"    }\", \"  }\", \"}\", \"SERVICE <https://query.wikidata.org/sparql> {\", \"  SELECT ?directed ?written ?edited {\", \"    wd:Q1084 wdt:P31 wd:Q5 .\", \"    ?directed p-director-of ?statement_director .\", \"    ?statement_director ps-director-of ?director .\", \"    ?statement_director pq-director-of ?year .\", \"    ?written p-written-by ?statement_written .\", \"    ?statement_written ps-written-by ?writer .\", \"    ?statement_written pq-written-by ?date .\", \"    ?edited p-edited-by ?statement_edit .\", \"    ?statement_edit ps-edited-by ?editor .\", \"    ?statement_edit pq-edited-by ?info .\", \"  }\", \"}\", \"}\"] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t", "normal_query": "SELECT ?directed ?written ?edited { SERVICE <https://query.wikidata.org/sparql> { SELECT ?directed ?written ?edited { wd:Q1084 wdt:P31 wd:Q5 . ?directed p-director-of ?statement_director . ?statement_director ps-director-of ?director . ?statement_director pq-director-of ?year . ?written p-written-by ?statement_written . ?statement_written ps-written-by ?writer . ?statement_written pq-written-by ?date . ?edited p-edited-by ?statement_edit . ?statement_edit ps-edited-by ?editor . ?statement_edit pq-edited-by ?info . } } } SERVICE <https://query.wikidata.org/sparql> { SELECT ?directed ?written ?edited { wd:Q1084 wdt:P31 wd:Q5 . ?directed p-director-of ?statement_director . ?statement_director ps-director-of ?director . ?statement_director pq-director-of ?year . ?written p-written-by ?statement_written . ?statement_written ps-written-by ?writer . ?statement_written pq-written-by ?date . ?edited p-edited-by ?statement_edit . ?statement_edit ps-edited-by ?editor . ?statement_edit pq-edited-by ?info . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?film WHERE {\",\n        \"?film wdt:P31 wd:Q11420765.\",\n        \"FILTER (\",\n          \"(?film wdt:P166 ?editor)\",\n          \"&&\",\n          \"(?film wdt:P166 ?writer)\"\n        ,\n        \")\",\n        \"{\",\n          \"SELECT ?editor, ?writer WHERE {\",\n            \"?film wdt:P166 ?editor.\",\n            \"?film wdt:P166 ?writer.\"\n          ,\n          \"} LIMIT 1\"\n        ,\"}\"\n      ,\n      \"}\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "{ SELECT ?film WHERE { ?film wdt:P31 wd:Q11420765. FILTER ( (?film wdt:P166 ?editor) && (?film wdt:P166 ?writer) ) { SELECT ?editor, ?writer WHERE { ?film wdt:P166 ?editor. ?film wdt:P166 ?writer. } LIMIT 1 } } }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?editor ?director\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q5726489; # instance of work\",\n      \"wdt:P100 wd:Ole_John_(disambiguation).\", \"w d t : P 100 wd : Jens _ Jørgen _ Thorsen .\",\n      \"w d t : P 100 wd : Jørgen _ Leth .\"\n    ,\n      \"?work wdt:P57 ?editor; # editor\",\n      \"?work wdt:P57 ?director.\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t", "normal_query": "SELECT ?work ?editor ?director WHERE { ?work wdt:P31 wd:Q5726489; wdt:P100 wd:Ole_John_(disambiguation). w d t : P 100 wd : Jens _ Jørgen _ Thorsen . w d t : P 100 wd : Jørgen _ Leth . ?work wdt:P57 ?editor; ?work wdt:P57 ?director. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?writer ?cinematographer\",\n            \"WHERE {\",\n                \"?film1 wdt:P31 wd:Q11422765.\",\n                \"?film1 wdt:P1660 ?writer.\",\n                \"?film1 wdt:P1661 ?cinematographer.\",\n                \"?film1 wdt:P18 ?image.\",\n                \"}\",\n                \"UNION\",\n                \"{\",\n                    \"SELECT ?writer ?cinematographer\",\n                    \"WHERE {\",\n                    \"?film2 wdt:P31 wd:Q11422765.\",\n                    \"?film2 wdt:P1660 ?writer.\",\n                    \"?film2 wdt:P1661 ?cinematographer.\",\n                    \"?film2 wdt:P18 ?image.\",\n                    \"}\",\n                \"UNION\",\n                \"{\",\n                    \"SELECT ?writer ?cinematographer\",\n                    \"WHERE {\",\n                    \"?film3 wdt:P31 wd:Q11422765.\",\n                    \"?film3 wdt:P1660 ?writer.\",\n                    \"?film3 wdt:P1661 ?cinematographer.\",\n                    \"?film3 wdt:P18 ?image.\",\n                    \"}\",\n                \"]\",\n                \"}\"\n            ]\n    }\n    \t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "{ SELECT ?writer ?cinematographer WHERE { ?film1 wdt:P31 wd:Q11422765. ?film1 wdt:P1660 ?writer. ?film1 wdt:P1661 ?cinematographer. ?film1 wdt:P18 ?image. } UNION { SELECT ?writer ?cinematographer WHERE { ?film2 wdt:P31 wd:Q11422765. ?film2 wdt:P1660 ?writer. ?film2 wdt:P1661 ?cinematographer. ?film2 wdt:P18 ?image. } UNION { SELECT ?writer ?cinematographer WHERE { ?film3 wdt:P31 wd:Q11422765. ?film3 wdt:P1660 ?writer. ?film3 wdt:P1661 ?cinematographer. ?film3 wdt:P18 ?image. } ] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n     \t\t\t,\n      \"?x wdt:P166 wd:Q245098 .\", \">// P166 is occupation, Q245098 is film producer\"\n     \t\t,\n      \"?x wdt:P166 wd:Q33798 .\", \">// P166 is occupation, Q33798 is editor\"\n     \t,\n      \"?x wdt:P166 wd:Q25048 .\", \">// P166 is occupation, Q245098 is film producer, but wait, no. Wait, I think I made a mistake here. Let me check the correct WD for director and writer.\"\n     \t,\n      \"?x wdt:P166 wd:Q33798 .\", \">// P166 is occupation, Q33798 is editor\"\n     \t,\n      \"?x wdt:P166 wd:Q25048 .\", \">// P166 is occupation, Q25048 is director\"\n     \t,\n      \"?x wdt:P166 wd:Q1043799 .\" ,\"\\n\" ,\"\\t\\t// P166 is occupation, Q1043799 is writer\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . >// P31 is instance of, Q5 is human ?x wdt:P166 wd:Q245098 . >// P166 is occupation, Q245098 is film producer ?x wdt:P166 wd:Q33798 . >// P166 is occupation, Q33798 is editor ?x wdt:P166 wd:Q25048 . >// P166 is occupation, Q245098 is film producer, but wait, no. Wait, I think I made a mistake here. Let me check the correct WD for director and writer. ?x wdt:P166 wd:Q33798 . >// P166 is occupation, Q33798 is editor ?x wdt:P166 wd:Q25048 . >// P166 is occupation, Q25048 is director ?x wdt:P166 wd:Q1043799 . // P166 is occupation, Q1043799 is writer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work ?author ?director ?executiveProducer WHERE { ?work wdt:P31 wd:Q258769 ; wdt:P50 wd:Jim_Abrams , wd:Jerry_Zucker , wd:David_Zucker . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?work ?author ?director ?executiveProducer WHERE { ?work wdt:P31 wd:Q258769 ; wdt:P50 wd:Jim_Abrams , wd:Jerry_Zucker , wd:David_Zucker . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?author ?executiveProducer ?director\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q206589; # work is a film\",\n      \"wdt:P140 ?author; # author is the main author (screenplay)\"\n      ,\n      \"wdt:P162 ?executiveProducer; # executive producer\"\n      ,\n      \"wdt:P166 ?director. # director\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?work ?author ?executiveProducer ?director WHERE { ?work wdt:P31 wd:Q206589; wdt:P140 ?author; wdt:P162 ?executiveProducer; wdt:P166 ?director. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?work rdfs:label ?title . }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?work rdfs:label ?title . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424597.\",\n      \"FILTER (EXISTS{ ?film wdt:P58 ?director })\",\n      \"VALUES (?director) {(wd:Q16094, wd:Q16095, wd:Q16096, wd:Q16097, wd:Q11283)}\"\n    ,\n      \"?film wdt:P1628 ?writer.\"\n    , \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424597. FILTER (EXISTS{ ?film wdt:P58 ?director }) VALUES (?director) {(wd:Q16094, wd:Q16095, wd:Q16096, wd:Q16097, wd:Q11283)} ?film wdt:P1628 ?writer. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?composer WHERE { ?composer wdt:P106 wd:Q285584 . ?composer wdt:P161 wd:Q335759 . ?composer wdt:P161 wd:Q335759 . }\" ] }\n   \t\t\t\t\t   \t\t\t  \t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q285584 . ?composer wdt:P161 wd:Q335759 . ?composer wdt:P161 wd:Q335759 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?composer ?editor_star\",\n                \"WHERE {\",\n                    \"?composer wdt:P348 [wdt:P1628 wd:Q105] .\", \"=> This line is incorrect, need to fix it.\"\n                    ,\n                    \"?editor_star wdt:P1628 wd:Q105 .\",\n                    \"}\"\n        ,\n        \"]\"\n    ]\n}\n                    ", "normal_query": "{ SELECT ?composer ?editor_star WHERE { ?composer wdt:P348 [wdt:P1628 wd:Q105] . => This line is incorrect, need to fix it. ?editor_star wdt:P1628 wd:Q105 . } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . ?film wdt:P1629 wd:Q25748 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424598.\",\n      \"{\",\n        \"?film wdt:P1623 ?director.\",\n        \"?film wdt:P166 ?screenplay.\",\n        \"?film wdt:P1047 ?editor.\"\n      ,\n      \"}\"\n    ,\n      \"FILTER (\",\n        \"(?director = wd:Q5898823) ||\",\n        \"(?screenplay = wd:Q5898823) ||\",\n        \"(?editor = wd:Q5898823)\"\n      ,\")\"\n    ,\n      \"}\"\n    ,\n      \"ORDER BY ?film\"\n    ,\n      \"LIMIT 10\"\n    ,\n      \"}\"\n  ]\n}\n             \t   \t  ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424598. { ?film wdt:P1623 ?director. ?film wdt:P166 ?screenplay. ?film wdt:P1047 ?editor. } FILTER ( (?director = wd:Q5898823) || (?screenplay = wd:Q5898823) || (?editor = wd:Q5898823) ) } ORDER BY ?film LIMIT 10 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q24518.\",\n      \"{\",\n        \"?film wdt:P1628 wd:Q1079285.\",\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079286.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079287.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079288.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q1079289.\"\n      ,\n        \"OR\",\n        \"?film wdt:P1628 wd:Q107928A.\" ,\n        \"}\"\n    ,\n      \"}\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t       ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q24518. { ?film wdt:P1628 wd:Q1079285. OR ?film wdt:P1628 wd:Q1079286. OR ?film wdt:P1628 wd:Q1079287. OR ?film wdt:P1628 wd:Q1079288. OR ?film wdt:P1628 wd:Q1079289. OR ?film wdt:P1628 wd:Q107928A. } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"?x wdt:P1086 ?y .\", \"=> has occupation\"\n      ,\n      \"?y wdt:P279* wd:Q1421035 .\", \"=> film producer executive\"\n      ,\n      \"?x wdt:P57 wd:Q212260 .\", \"=> produced Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212261 .\", \"=> produced The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212262 .\", \"=> produced The Waiting Room\"\n      ,\n      \"?x wdt:P57 wd:Q212263 .\", \"=> wrote Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212264 .\", \"=> wrote The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212265 .\", \"=> wrote The Waiting Room\"\n      ,\n      \"?x wdt:P57 wd:Q212266 .\", \"=> edited Fate\"\n      ,\n      \"?x wdt:P57 wd:Q212267 .\", \"=> edited The Confession\"\n      ,\n      \"?x wdt:P57 wd:Q212268 .\", \"=> edited The Waiting Room\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . => human ?x wdt:P1086 ?y . => has occupation ?y wdt:P279* wd:Q1421035 . => film producer executive ?x wdt:P57 wd:Q212260 . => produced Fate ?x wdt:P57 wd:Q212261 . => produced The Confession ?x wdt:P57 wd:Q212262 . => produced The Waiting Room ?x wdt:P57 wd:Q212263 . => wrote Fate ?x wdt:P57 wd:Q212264 . => wrote The Confession ?x wdt:P57 wd:Q212265 . => wrote The Waiting Room ?x wdt:P57 wd:Q212266 . => edited Fate ?x wdt:P57 wd:Q212267 . => edited The Confession ?x wdt:P57 wd:Q212268 . => edited The Waiting Room LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q283574 . # P106 is occupation, Q283574 is writer ?x wdt:P1411 wd:Q283574 . # P1411 is star of ?x wdt:P162 wd:Q283574 . # P162 is director ?x wdt:P160 wd:Q283574 . # P160 is composer ?x wdt:P51 wdt:Q291833 . # P51 is director of, Q291833 is The Floorwalker }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q283574 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?p WHERE { ?p wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q25398.\",\n      \"?person wdt:P161 wd:Q47066.\"\n    ]}\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q25398. ?person wdt:P161 wd:Q47066. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x1\",\n      \"WHERE {\",\n        \"?x0 wdt:P3689 ?x1.\",\n        \"FILTER (\",\n          \"(?x1) = 'The Black Ghiandola' ||\",\n          \"(?x1) = 'Twin Peaks' ||\",\n          \"(?x1) = 'Lumière and Company' ||\",\n          \"(?x1) = 'Dune' ||\",\n          \"(?x1) = 'Inland Empire' ||\",\n          \"(?x1) = 'Boat'\"\n        ,\n        \")}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t \t\t\t \t", "normal_query": "{ SELECT ?x1 WHERE { ?x0 wdt:P3689 ?x1. FILTER ( (?x1) = 'The Black Ghiandola' || (?x1) = 'Twin Peaks' || (?x1) = 'Lumière and Company' || (?x1) = 'Dune' || (?x1) = 'Inland Empire' || (?x1) = 'Boat' )} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 (Writer) . ?person wdt:P106 wd:Q1743 (Editor) . ?person wdt:P106 wd:Q1288 (Director) . ?person wdt:P31 wd:Q5 (Human). SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Writer'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Editor'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Director'@en } }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q2598 (Writer) . ?person wdt:P106 wd:Q1743 (Editor) . ?person wdt:P106 wd:Q1288 (Director) . ?person wdt:P31 wd:Q5 (Human). SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Writer'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Editor'@en } SERVICE wikibase:label { bd:serviceParam wdt:P106 rdfs:label 'Director'@en } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q470943 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . ?x wdt:P1628 wd:Q470943 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422590.\",\n      \"{\",\n        \"?film wdt:P1628 wd:Q1707437.\", \"><!-- edit, write, direct? Or is it P1628 for editor, and others? Need to check. Maybe need multiple properties. Wait, the question is whether a film editor edited, wrote, and directed those films. So perhaps we're looking for someone who has all three roles: editor, writer, director. But the original query is about the films themselves being edited, written, and directed by a film editor? Or is it that the person who did editing also wrote and directed them? Hmm, need to clarify. Maybe the question is whether a single film editor was responsible for editing, writing, and directing those four films: Pay Day, Modern Times, The Floorwalker, and Work. So perhaps we're looking for someone (a person) who has all three roles across these films. But the query is about the films themselves, so maybe it's asking which of these films were edited by a film editor who also wrote and directed them. Alternatively, perhaps the question is whether each of those four films was edited, written, and directed by someone (maybe the same person). This is a bit confusing. Maybe I should model it as: find all films where for that film, there exists an editor, writer, and director, and see if they are the same person across all four films. But perhaps the question is simpler: whether each of those four films was edited by someone who also wrote and directed them. Or maybe it's asking if a single film editor (i.e., one person) both edited, wrote, and directed all four films. So to model that, we need to find a person who has the properties of editing, writing, and directing each of those four films. But in SPARQL, how do we express that? We'd need to have for each film, the editor is the same as the writer and director, and all four films share this one person. Alternatively, perhaps it's asking whether any of these four films were edited by someone who also wrote or directed them, but I think the original intent is about a single person doing all three roles across all four films. So the query would involve finding a person (Q) such that Q has P1628 (editor), and for each film in [Pay Day, Modern Times, The Floorwalker, Work], Q also has P1628 (editor), P1628 is editor, but wait, no—P1628 is editor. So perhaps the properties are: editor (P1628), writer (P1629), director (P1630). Wait, checking Wikidata properties: P1628 is indeed editor, P1629 is scriptwriter, and P1630 is director. So for each film in the list, we need to check if there's a person who has all three roles: editor, writer, director. But perhaps it's that the same person did all three roles for each of these four films. Alternatively, maybe the question is whether any of these films were edited by someone who also wrote or directed them, but I think it's more likely that it's asking if a single film editor (i.e., one person) both edited, wrote, and directed all four films. So to model this, we need to find a person Q such that for each film F in {Pay Day, Modern Times, The Floorwalker, Work}, F has Q as editor (P1628), writer (P1629), and director (P1630). But how do we express that in SPARQL? We can use SERVICE to query each film individually. So the query would select a person where for each of the four films, they have all three roles. Alternatively, perhaps it's easier to find films where their editor is also their writer and director, but across multiple films. But the question seems to be about whether such a person exists who did all three roles for all four films. So the SPARQL query would involve checking each film and seeing if they share the same editor, writer, and director. But perhaps it's better to structure it as finding a person Q where for each of the four films F, F has Q as editor (P1628), writer (P1629), and director (P1630). So in SPARQL, we can use multiple SERVICE blocks or use OPTIONAL with FILTERs. But since it's four films, perhaps using four separate conditions. Alternatively, we can use a filter that checks for each film. Let me think about the structure: SELECT ?person WHERE { ?person wdt:P31 wd:Q5 .", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x1\",\n      \"WHERE {\",\n        \"?x1 wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/> <!-- x1 is the person--> <br/> <!-- Now for The Waiting Room --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is The Waiting Room--><br/> <!-- x1 wrote the screenplay for The Waiting Room--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Waiting Room--><br/> <!-- x1 was an executive producer for The Waiting Room--> <br/> <!-- Now for Fate --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is Fate--><br/> <!-- x1 wrote the screenplay for Fate--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is Fate--><br/> <!-- x1 was an executive producer for Fate--> <br/> <!-- Now for The Confession --> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 ;\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6468 is wrote screen, Q2397025 is The Confession--><br/> <!-- x1 wrote the screenplay for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P162 wd:Q2397025 .\", \"><!-- P162 is executive producer, Q2397025 is The Confession--><br/> <!-- x1 was an executive producer for The Confession--> <br/> \" ,\"?x1\" ,\n        \"p:position/pivot\",\n          \" [\",\n            \"wdt:P6468 wd:Q2397025 .\", \"><!-- P6", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424597.\",\n      \"FILTER (EXISTS { ?film wdt:P57 ?director . ?director wdt:P1668 wd:Q202063 })\",\n      \"FILTER (EXISTS { ?film wdt:P140 ?screenplay . ?screenplay wdt:P1668 wd:Q202063 })\",\n      \"?film wdt:P57 ?director.\",\n      \"?film wdt:P140 ?screenplay.\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424597. FILTER (EXISTS { ?film wdt:P57 ?director . ?director wdt:P1668 wd:Q202063 }) FILTER (EXISTS { ?film wdt:P140 ?screenplay . ?screenplay wdt:P1668 wd:Q202063 }) ?film wdt:P57 ?director. ?film wdt:P140 ?screenplay. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> human\"\n      ,\n      \"?x wdt:P106 wd:Q24507 .\", \"=> occupation: film editor\"\n      ,\n      \"?x wdt:P108 wd:Q19328 .\", \"=> occupation: cinematographer\"\n      ,\n      \"?x wdt:P106 wd:Q1660294 .\", \"=> occupation: writer\"\n      ,\n      \"?x wdt:P1545 wd:Q272368 .\", \"=> work: The Waiting Room\"\n      ,\n      \"?x wdt:P1545 wd:Q571643 .\", \"=> work: Destiny The Confession\"\n      ,\n      \"?x wdt:P2860 wd:Q599 .\", \"=> position: executive producer\"\n      ,\n      \"?x wdt:P2860 wd:Q19328 .\", \"=> position: cinematographer\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . => human ?x wdt:P106 wd:Q24507 . => occupation: film editor ?x wdt:P108 wd:Q19328 . => occupation: cinematographer ?x wdt:P106 wd:Q1660294 . => occupation: writer ?x wdt:P1545 wd:Q272368 . => work: The Waiting Room ?x wdt:P1545 wd:Q571643 . => work: Destiny The Confession ?x wdt:P2860 wd:Q599 . => position: executive producer ?x wdt:P2860 wd:Q19328 . => position: cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?editor wdt:P106 wd:Q25984 . ?editor wdt:P19 wd:Q33575 . ?editor wdt:P51 wde:Werk . ?work wdt:P141 wd:Q25984 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?editor wdt:P106 wd:Q25984 . ?editor wdt:P19 wd:Q33575 . ?editor wdt:P51 wde:Werk . ?work wdt:P141 wd:Q25984 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?director WHERE { ?film wdt:P31 wd:Q25876990 . ?film wdt:P178 ?director . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?director WHERE { ?film wdt:P31 wd:Q25876990 . ?film wdt:P178 ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x a schema:Person . }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?x a schema:Person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director a wdt:P106 .\",\n    \"?director wdt:P57 wd:Q283964 .\", \">// Assuming Q283964 is the director's ID for Police Story 2, etc.\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?director a wdt:P106 . ?director wdt:P57 wd:Q283964 . >// Assuming Q283964 is the director's ID for Police Story 2, etc. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person ?organization WHERE { ?person wdt:P300 wd:Q2569847 . ?person wdt:P108 wd:Q45207 . ?person wdt:P108 wd:Q1695928 . ?person wdt:P108 wd:Q571539 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?person ?organization WHERE { ?person wdt:P300 wd:Q2569847 . ?person wdt:P108 wd:Q45207 . ?person wdt:P108 wd:Q1695928 . ?person wdt:P108 wd:Q571539 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422 .\", \">// P31 is instance of, Q11422 is film (movie) in English\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P57 ?director .\", \">// P57 is director, will get the director(s)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P1628 ?screenplay .\", \">// P1628 is screenwriter, so this gets the writers\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P1493 ?editor .\", \">// P1493 is film editor, so this gets the editors\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P7056 ?producer .\", \">// P7056 is film producer, so this gets the producers\"\n     \t\t\t\t\t      \t,\n      \"  FILTER (\",\n        \"    EXISTS { ?director wdt:P21 wd:Q34987 }\" ,\"\\\\\" ,\n        \"    AND EXISTS { ?screenplay wdt:P21 wd:Q34987 }\", \">// Q34987 is Jens Jørgen Thorsen\"\n        ,\n        \"    AND EXISTS { ?editor wdt:P21 wd:Q34987 }\",\n        \"    AND EXISTS { ?producer wdt:P21 wd:Q34987 }\",\n        \"  )\",\n      \")\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11422 . >// P31 is instance of, Q11422 is film (movie) in English ?film wdt:P57 ?director . >// P57 is director, will get the director(s) ?film wdt:P1628 ?screenplay . >// P1628 is screenwriter, so this gets the writers ?film wdt:P1493 ?editor . >// P1493 is film editor, so this gets the editors ?film wdt:P7056 ?producer . >// P7056 is film producer, so this gets the producers FILTER ( EXISTS { ?director wdt:P21 wd:Q34987 } \\ AND EXISTS { ?screenplay wdt:P21 wd:Q34987 } >// Q34987 is Jens Jørgen Thorsen AND EXISTS { ?editor wdt:P21 wd:Q34987 } AND EXISTS { ?producer wdt:P21 wd:Q34987 } ) ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?person ?work1 ?work2 WHERE {\",\n                \"?person p:directed/films ?work1 .\",\n                \"?person p:directed/films ?work2 .\",\n                \"?work1 wdt:P361 ?series .\",\n                \"?series rdfs:label \\\"From Dusk till Dawn: The Series\\\" .\",\n                \"FILTER (LANG(?series) = 'en')\"\n            ,\n                \"?work2 wdt:P1406 ?genre .\",\n                \"?genre rdfs:label \\\"Action\\\" .\",\n                \"FILTER (LANG(?genre) = 'en')\"\n            ,\n                \"}\"\n        ,\n        \"}\"\n    ]\n}\n                    ", "normal_query": "{ SELECT ?person ?work1 ?work2 WHERE { ?person p:directed/films ?work1 . ?person p:directed/films ?work2 . ?work1 wdt:P361 ?series . ?series rdfs:label \"From Dusk till Dawn: The Series\" . FILTER (LANG(?series) = 'en') ?work2 wdt:P1406 ?genre . ?genre rdfs:label \"Action\" . FILTER (LANG(?genre) = 'en') } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q104753 .\", \">// P1628 is 'educated at', Q104753 is FAMU Film School, but I think it's incorrect. Maybe should be a different property for director involvement in a work.\"\n      ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?work WHERE { ?director wdt:P1628 wd:Q104753 . >// P1628 is 'educated at', Q104753 is FAMU Film School, but I think it's incorrect. Maybe should be a different property for director involvement in a work. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?work WHERE { ?person wdt:P106 wd:Q283594 . # P106 is occupation, Q283594 is cinematographer ?person wdt:P161 wd:Q3075855 . # P161 is country, Q3075855 is American ?work wdt:P57 wd:Q283594 . # P57 is cinematography, Q283594 is cinematographer ?person wdt:P51 ?work . # P51 is work }\" ] }\n   \t\t\t\t\t\t \t\t\t\t\t \t  \t", "normal_query": "SELECT ?work WHERE { ?person wdt:P106 wd:Q283594 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?x\",\n      \"WHERE {\",\n        \"?x wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n        \t\t\t   \t\t\t\t\t\t,\n        \"?x wdt:P106 wd:Q28337 .\", \">// P106 is occupation, Q28337 is writer\"\n       \t\t\t\t\t,\n        \"?x wdt:P106 wd:Q154948 .\", \">// P106 is occupation, Q154948 is cinematographer\"\n       \t\t\t\t\t,\n        \"?x wdt:P106 wd:Q2537 .\", \">// P106 is occupation, Q2537 is director\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q21248 .\", \">// P1496 is wrote screenplay for, Q21248 is Look at Life (film)\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q57089 .\", \">// P1496 is wrote screenplays for, Q57089 is Anyone Lived in a Pretty How Town\"\n       \t\t\t\t\t,\n        \"?x wdt:P1496 wd:Q23433 .\", \">// P1496 is wrote screenplays for, Q23433 is Filmmaker (film)\"\n       \t\t\t\t\t,\n        \"?x wdt:P286 wd:Q270589 .\", \">// P286 is executive producer of, Q270589 is Star Wars: Episode IV – A New Hope\"\n   \t \t\t\t\t\t       ,\n        \"}\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "{ SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . >// P31 is instance of, Q5 is human ?x wdt:P106 wd:Q28337 . >// P106 is occupation, Q28337 is writer ?x wdt:P106 wd:Q154948 . >// P106 is occupation, Q154948 is cinematographer ?x wdt:P106 wd:Q2537 . >// P106 is occupation, Q2537 is director ?x wdt:P1496 wd:Q21248 . >// P1496 is wrote screenplay for, Q21248 is Look at Life (film) ?x wdt:P1496 wd:Q57089 . >// P1496 is wrote screenplays for, Q57089 is Anyone Lived in a Pretty How Town ?x wdt:P1496 wd:Q23433 . >// P1496 is wrote screenplays for, Q23433 is Filmmaker (film) ?x wdt:P286 wd:Q270589 . >// P286 is executive producer of, Q270589 is Star Wars: Episode IV – A New Hope } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11420.\",\n      \"{\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q1004585.\"\n      ,\n      \"} UNION {\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q23544.\"\n      ,\n      \"} UNION {\",\n        \"?film wdt:P57 ?director.\",\n        \"?director wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?producer.\",\n        \"?producer wdt:P1698 wd:Q1004585.\",\n        \"?producer wdt:P1698 wd:Q23544.\",\n        \"?producer wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?writer.\",\n        \"?writer wdt:P1698 wd:Q1004585.\",\n        \"?writer wdt:P1698 wd:Q23544.\",\n        \"?writer wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n      \"{\",\n        \"?film wdt:P1698 ?editor.\",\n        \"?editor wdt:P1698 wd:Q1004585.\",\n        \"?editor wdt:P1698 wd:Q23544.\",\n        \"?editor wdt:P1698 wd:Q202165.\"\n      ,\n      \"}\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t \t\t", "normal_query": "SELECT DISTINCT ?film WHERE { ?film wdt:P31 wd:Q11420. { ?film wdt:P57 ?director. ?director wdt:P1698 wd:Q1004585. } UNION { ?film wdt:P57 ?director. ?director wdt:P1698 wd:Q23544. } UNION { ?film wdt:P57 ?director. ?director wdt:P1698 wd:Q202165. } { ?film wdt:P1698 ?producer. ?producer wdt:P1698 wd:Q1004585. ?producer wdt:P1698 wd:Q23544. ?producer wdt:P1698 wd:Q202165. } { ?film wdt:P1698 ?writer. ?writer wdt:P1698 wd:Q1004585. ?writer wdt:P1698 wd:Q23544. ?writer wdt:P1698 wd:Q202165. } { ?film wdt:P1698 ?editor. ?editor wdt:P1698 wd:Q1004585. ?editor wdt:P1698 wd:Q23544. ?editor wdt:P1698 wd:Q202165. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q1142056.\", \">// instance of film, TV movie, or video\"\n      \t\t\t\t   \t\t\t\t\t\t\t,\n      \"?film wdt:P178 ?costumeDesigner.\" ,\"\\n\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t  \t\t\t\t\t\t    \t", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q1142056. >// instance of film, TV movie, or video ?film wdt:P178 ?costumeDesigner. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film1 wdt:P31 wd:Q24518 }\",\n    \"{ ?film1 wdt:P1629 ?person .}\",\n    \"{ ?film1 wdt:P170 ?editor .}\",\n    \"{ ?film1 wdt:P157 ?director .}\",\n    \"SERVICE wikibase:label { bd:serviceParam lang 'en' }\"\n  ]\n}\n                 \t\t\t", "normal_query": "?film1 wdt:P31 wd:Q24518 } { ?film1 wdt:P1629 ?person .} { ?film1 wdt:P170 ?editor .} { ?film1 wdt:P157 ?director .} SERVICE wikibase:label { bd:serviceParam lang 'en' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11422763 . ?film wdt:P57 wd:Jens_Jørgen_Thorsen . ?film wdt:P57 wd:Jørgen_Leth . ?film wdt:P57 wd:Ole_John . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t  \t\t   ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11422763 . ?film wdt:P57 wd:Jens_Jørgen_Thorsen . ?film wdt:P57 wd:Jørgen_Leth . ?film wdt:P57 wd:Ole_John . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (Q11424)\"\n     \t\t\t\t\t      \t\t,\n      \"  ?film wdt:P57 ?director .\", \">// directed by (P57)\"\n     \t\t\t\t\t      \t\t,\n      \"  ?film wdt:P160 ?editor .\", \">// edited by (P160)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P149 ?screenplay .\", \">// written by (P149)\"\n     \t\t\t\t\t      \t,\n      \"  ?film wdt:P286 ?producer .\" ,\"\\n\" ,\n      \"// Jens Jørgen Thorsen, Jørgen Leth, and Ole John\"\n      ,\n      \"  VALUES (?director ?editor ?screenplay ?producer) {\",\n        \"( wd:Q1003549 , wd:Q28767 , wd:Q1003549 )\", \">// Thorsen is both director and writer, Leth is editor\"\n        ,\n        \"( wd:Q28767 , wd:Q1003549 , wd:Q28767 )\", \">// Wait, this might not be correct. Need to check the actual people.\"\n        ,\n        \"( wd:Q1003549 , wd:Q28767 , wd:Q1003549 )\" ,\n      \"}\" ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . >// instance of film (Q11424) ?film wdt:P57 ?director . >// directed by (P57) ?film wdt:P160 ?editor . >// edited by (P160) ?film wdt:P149 ?screenplay . >// written by (P149) ?film wdt:P286 ?producer . // Jens Jørgen Thorsen, Jørgen Leth, and Ole John VALUES (?director ?editor ?screenplay ?producer) { ( wd:Q1003549 , wd:Q28767 , wd:Q1003549 ) >// Thorsen is both director and writer, Leth is editor ( wd:Q28767 , wd:Q1003549 , wd:Q28767 ) >// Wait, this might not be correct. Need to check the actual people. ( wd:Q1003549 , wd:Q28767 , wd:Q1003549 ) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q309574 .\", \">// P1628 is 'directed by', Q309574 is Ember's director (assuming it's a person, but need to confirm the actual entity for \" , \"Ember's director\" , \"director of Ember\" , \"who directed Ember\" , \"director of film Ember\" , \"director of movie Ember\" , \"director of the movie Ember\" , \"director of the film Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of the show Ember\" , \"director of the series Ember\" , \"director of the production Ember\" , \"director of the project Ember\" , \"director of the work Ember\" , \"director of the film Ember\" , \"director of the movie Ember\" , \"director of", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n      \"?director wdt:P1628 wd:Q309574 .\", \">// P1628 is 'directed by', Q309574 is Ember's director (assuming correct mapping needed here, perhaps it should be the actual person ID for the director of Ember movie)\"\n      ]\n    }\n  \t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?work WHERE { ?director wdt:P1628 wd:Q309574 . >// P1628 is 'directed by', Q309574 is Ember's director (assuming correct mapping needed here, perhaps it should be the actual person ID for the director of Ember movie) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P57 wd:Q25748 . ?film wdt:P160 wd:Q25748 }\" ] }\n                    ", "normal_query": "SELECT ?film WHERE { ?film wdt:P361 wd:Q25748 . ?film wdt:P57 wd:Q25748 . ?film wdt:P160 wd:Q25748 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P31 wd:Q5 }\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "{ ?x wdt:P31 wd:Q5 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"SELECT ?cinematographer\",\n        \"WHERE {\",\n        \"?film wdt:P31 wd:Q11425069.\",\n        \"?film wdt:P178 ?cinematographer.\"\n        ,\n        \"}\"\n    ]\n}\n                \t   ", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P31 wd:Q11425069. ?film wdt:P178 ?cinematographer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?actor ?influence ?founder {\",\n        \"SERVICE <https://query.wikidata.org/sparql> {\",\n          \"?actor wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human. So this line selects all humans. But we need to find specific actors influenced by Wolfgang Ambros and Jan-Mari Carlotti. Hmm, maybe I should adjust the query to filter for people who are actors and have been influenced by these two. Also, Carolyn Dennis and Sara Dylan are married to someone named Alexandria Monroe High School's founder. Wait, that doesn't make sense because a high school can't be a person. Maybe it's a person with the name Alexandria Monroe who founded the high school. So I need to find the founder of Alexandria Monroe High School and see if Carolyn Dennis and Sara Dylan are married to them. Also, I need to connect this to actors influenced by Wolfgang Ambros and Jan-Mari Carlotti. This is getting complicated. Maybe I should break it down into parts: first, find the founder of Alexandria Monroe High School, then check who Carolyn Dennis and Sara Dylan are married to, and see if that person is the founder. Then, among those actors, find ones influenced by Wolfgang Ambros and Jan-Mari Carlotti. But how do I connect all these in a SPARQL query? I'm not sure about the exact properties to use for influence and marriage. Maybe I should look up the correct Wikidata properties for 'influenced by' and 'married to'. Also, I need to make sure that the query only returns resources, so perhaps using a SERVICE with the Wikidata endpoint is necessary. I think I'll start by selecting all humans (?actor) and then add filters for the specific influences and relationships. But I'm not confident about the exact syntax and properties to use here. Maybe I should check some examples of similar SPARQL queries on Wikidata to get the right structure. Overall, this seems a bit tricky, but breaking it down step by step might help me construct the correct query. I'll try to outline the steps: 1. Find the founder of Alexandria Monroe High School. 2. Check if Carolyn Dennis and Sara Dylan are married to that founder. 3. Among actors influenced by Wolfgang Ambros and Jan-Mari Carlotti, see if any are connected to this founder through marriage. But I'm not sure how to combine all these conditions in a single query. Perhaps using multiple FILTER clauses or combining with ANDs and ORs appropriately. Also, I need to make sure that the query doesn't return duplicate results and only fetches the necessary information. This is quite complex for someone new to SPARQL and Wikidata queries, but I'll give it my best shot by carefully constructing each part of the query based on the properties I can find in Wikidata. Maybe I should also consider using optional clauses if some parts might not have direct connections. Overall, I think with careful attention to the properties and their relationships, I can build a SPARQL query that addresses all parts of the original question. It will require verifying each part as I go along to ensure accuracy. --></actor>, <!-- Placeholder for ?actor; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influence; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriage; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?spouse; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influencer1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influencer2; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriageFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founderName; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?founderSchool; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?schoolFounderRelation; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?schoolFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?marriageFounder; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?spouseName; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influenceRelation1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?influenceRelation2; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?actorInfluence1; actual query would need specific filters. -->  \" ,\" <!-- Placeholder for ?actorInfluence2; actual query would need specific filters. -->  \" ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P1086 ?position .\",\n    \"?person wdt:P1411 ?organization .\",\n    \"FILTER (regex(?position, \\\"employee\\\")) .\",\n    \"FILTER (regex(?organization, \\\"Plessey|CERN|University of Southampton\\\")) .\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?person wdt:P31 wd:Q5 . ?person wdt:P1086 ?position . ?person wdt:P1411 ?organization . FILTER (regex(?position, \"employee\")) . FILTER (regex(?organization, \"Plessey|CERN|University of Southampton\")) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x wdt:P31 wd:Q5 . }\",\n    \"{ ?x wdt:P106 wd:Q28337 . }\",\n    \"{ ?x wdt:P161 wd:Q49288 . }\",\n    \"{ ?x wdt:P164 wd:Q180333 . }\"\n  ]\n}\n                    ", "normal_query": "{ ?x wdt:P31 wd:Q5 . } { ?x wdt:P106 wd:Q28337 . } { ?x wdt:P161 wd:Q49288 . } { ?x wdt:P164 wd:Q180333 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?film WHERE {\",\n        \"?producer wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is D.W. Griffith Productions\"\n        ,\"?corporation wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is United Artists Corporation\"\n        ,\"?dwgcorp wdt:P1628 wd:Q309574 .\", \">// P1628 is founder of, Q309574 is David W. Griffith Corp.\"\n        ,\n        \"?film wdt:P57 wd:Q309574 .\", \">// P57 is director, Q309574 is D.W. Griffith\"\n        ,\"?film wdt:P141 ?scriptwriter .\", \">// P141 is scriptwriter\"\n        ,\n        \"FILTER (\",\n          \"(?film wdt:P361 wd:Q28895 )\", \">// P361 is instance of film, Q28895 is The Brahma Diamond\"\n          ,\"(?film wdt:P361 wd:Q47035 )\", \">// P361 is instance of film, Q47035 is His Lost Love\"\n          ,\"(?film wdt:P361 wd:Q28900 )\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ,\"\\n\" ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?x }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?x } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P27';?> <!-- country code for USA? Wait, no. P27 is country, but the question is about American founder. Maybe use P40 (origin from) or P27. Let me think: P27 is country of citizenship. So perhaps ?person wdt:P27 wd:Q163 . <!-- Q163 is USA--><br/><?php echo 'P141';?> <!-- founded by? Or maybe P1086 (co-founded). Hmm, the question says \" , \"founder and employee of Sally Ride Science\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" ,\n        \"?person wdt:P27 wd:Q163 .\",\n        \"?person wdt:P1086 ?sallyRideScience .\", \"><!-- P1086 is founded by? Or maybe P141 (co-founded)--><br/><?php echo 'P141';?> <!-- co-founded--><br/><?php echo 'P1086';?> <!-- founded by--><br/><?php echo 'P585';?> <!-- date of founding, but not needed here--><br/><?php echo 'P39';?> <!-- position held? Maybe P39 is the property for positions.--><br/><?php echo 'P140';?> <!-- employer? So perhaps ?person wdt:P140 ?employer . But in this case, Sally Ride Science is an employer. Wait, but the question says \" , \"founder and employee of Sally Ride Science\" , \"employed by...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by?\" , \"employee of...\" , \"founded by", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?resource {\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\", \"=>\",\n                    \"?person wdt:P106 wd:Q28495 .\" ,\n                    \"?person wdt:P106 wd:Q177472 .\" ,\n                    \"?person wdt:P106 wd:Q169903 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27-3P89 wd:Q46074 .\" ,\n                    \"}\"\n                ,\n                \"UNION\",\n                \"SERVICE <https://query.wikidata.org/sparql> {\",\n                    \"SELECT ?resource WHERE {\",\n                    \"?person wdt:P31 wd:Q5 .\",\n                    \"?person wdt:P27", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person p:position/psv:P22[position:executive producer] ?statement . ?statement pq:P70 ?work . ?work wdt:P1469 wd:Q865095 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person p:position/psv:P22[position:executive producer] ?statement . ?statement pq:P70 ?work . ?work wdt:P1469 wd:Q865095 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?person ?work1 ?work2 ?work3 ?work4\",\n            \"WHERE {\",\n                \"?person wdt:P106 wd:Q178559\", \":{\" ,\n                    \"statement1\" ,\n                    \"statement2\",\n                    \"statement3\",\n                    \"statement4\"\n                ,\n                \"}\"\n            ,\n                \"OPTIONAL { ?person wdt:P1411 ?work1 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work2 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work3 }\",\n                \"OPTIONAL { ?person wdt:P1411 ?work4 }\"\n            ,\n                \"}\"\n        ,\n            \"}\"\n        ,\n            \"ORDER BY ?person\"\n        ,\n            \"LIMIT 10\"\n        ,\n            \"}\"\n    ]\n}\n    \t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "{ SELECT ?person ?work1 ?work2 ?work3 ?work4 WHERE { ?person wdt:P106 wd:Q178559 :{ statement1 statement2 statement3 statement4 } OPTIONAL { ?person wdt:P1411 ?work1 } OPTIONAL { ?person wdt:P1411 ?work2 } OPTIONAL { ?person wdt:P1411 ?work3 } OPTIONAL { ?person wdt:P1411 ?work4 } } } ORDER BY ?person LIMIT 10 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?work1 ?work2 ?work3\",\n      \"WHERE {\",\n        \"?person wdt:P3608 wd:Q157495.\",\n        \"?person wdt:P1629 wd:Q157495.\",\n        \"?person wdt:P1629 wd:Q212735.\",\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work1\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P1629 ?work1.\"\n      ,\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work2\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P3608 ?work2.\"\n      ,\n        \"}\"\n    ,\n    \"{\",\n      \"SELECT ?work3\",\n      \"WHERE {\",\n        \"wd:Q157495 wdt:P1629 ?work3.\"\n      ,\n        \"}\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t   \t\t\t\t\t    \t\t", "normal_query": "{ SELECT ?person ?work1 ?work2 ?work3 WHERE { ?person wdt:P3608 wd:Q157495. ?person wdt:P1629 wd:Q157495. ?person wdt:P1629 wd:Q212735. } { SELECT ?work1 WHERE { wd:Q157495 wdt:P1629 ?work1. } { SELECT ?work2 WHERE { wd:Q157495 wdt:P3608 ?work2. } { SELECT ?work3 WHERE { wd:Q157495 wdt:P1629 ?work3. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P127 wd:Q3069845 .\", \"><!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spouse' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div> <!-- P127 is 'spore' and Q3069845 is Lita Grey's ID --></div", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\", \">// P31 is instance of, Q5 is human\"\n     \t\t\t\t,\n      \"?person wdt:P1406 ?statement .\", \">// P1406 is statement about the person\"\n     \t\t,\n      \"FILTER (STRSTARTS(?statement, 'Charlie Chaplin'))\" ,\n      \"} LIMIT 10\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . >// P31 is instance of, Q5 is human ?person wdt:P1406 ?statement . >// P1406 is statement about the person FILTER (STRSTARTS(?statement, 'Charlie Chaplin')) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{ ?composer ?p ?o }\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{ ?composer ?p ?o } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11420589 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11420589 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation {\",\n        \"SERVICE <https://query.wikidata.org/sparql>\",\n        \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n        \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n        \"PREFIX ps: <http://www.wikidata.org/prop/statement/>\",\n        \"PREFIX p: <http://www.wikidata.org/prop/>\",\n        \"SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation {\",\n          \"wdt:P31 wd:Q5 .\", \">// person instance of human\"\n          ,\n          \"?person wdt:P140 ?filmEditor .\", \">// has occupation film editor\"\n          ,\n          \"?person p:P69 ?statement1 .\", \">// married to Oona O'Neill\"\n          ,\n          \"OPTIONAL {\",\n            \"?statement1 ps:P69 wd:Q23587 .\", \">// spouse is Oona O'Neill (Q23587)\"\n            ,\n            \"FILTER NOT EXISTS {\",\n              \"?statement1 pq:P104 ?something .\", \">// noqualifier\"\n            ,\n            \"} }\",\n          \"}\",\n          \"OPTIONAL {\",\n            \"?person p:P69 ?statement2 .\",\n            \"OPTIONAL {\",\n              \"?statement2 ps:P69 wd:Q3587 .\",\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P69 ?statement3 .\",\n            \"OPTIONAL {\",\n              \"?statement3 ps:P69 wd:Q14206 .\",\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee1 .\", \">// influenced by Fellini\"\n            ,\n            \"OPTIONAL {\",\n              \"?statementI1 ps:P155 wd:Q94637 .\", \">// person is Federico Fellini (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee2 .\",\n            \"OPTIONAL {\",\n              \"?statementI2 ps:P155 wd:Q94637 .\", \">// Marcel Marceau (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P155 ?influencee3 .\",\n            \"OPTIONAL {\",\n              \"?statementI3 ps:P155 wd:Q94637 .\", \">// Harold Lloyd (Q94637)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n          \"AND\",\n          \"OPTIONAL {\",\n            \"?person p:P141 ?corporation .\", \">// founded United Artists\"\n            ,\n            \"OPTIONAL {\",\n              \"?statementC ps:P141 wd:Q32586 .\", \">// corporation is United Artists (Q32586)\"\n              ,\n              \"FILTER NOT EXISTS { ... }\",\n            \"}\",\n          \"}\",\n        \"}\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "{ SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation { SERVICE <https://query.wikidata.org/sparql> SELECT ?person ?filmEditor ?spouse1 ?spouse2 ?spouse3 ?influencee1 ?influencee2 ?influencee3 ?corporation { wdt:P31 wd:Q5 . >// person instance of human ?person wdt:P140 ?filmEditor . >// has occupation film editor ?person p:P69 ?statement1 . >// married to Oona O'Neill OPTIONAL { ?statement1 ps:P69 wd:Q23587 . >// spouse is Oona O'Neill (Q23587) FILTER NOT EXISTS { ?statement1 pq:P104 ?something . >// noqualifier } } } OPTIONAL { ?person p:P69 ?statement2 . OPTIONAL { ?statement2 ps:P69 wd:Q3587 . FILTER NOT EXISTS { ... } } } AND OPTIONAL { ?person p:P69 ?statement3 . OPTIONAL { ?statement3 ps:P69 wd:Q14206 . FILTER NOT EXISTS { ... } } } AND OPTIONAL { ?person p:P155 ?influencee1 . >// influenced by Fellini OPTIONAL { ?statementI1 ps:P155 wd:Q94637 . >// person is Federico Fellini (Q94637) FILTER NOT EXISTS { ... } } } AND OPTIONAL { ?person p:P155 ?influencee2 . OPTIONAL { ?statementI2 ps:P155 wd:Q94637 . >// Marcel Marceau (Q94637) FILTER NOT EXISTS { ... } } } AND OPTIONAL { ?person p:P155 ?influencee3 . OPTIONAL { ?statementI3 ps:P155 wd:Q94637 . >// Harold Lloyd (Q94637) FILTER NOT EXISTS { ... } } } AND OPTIONAL { ?person p:P141 ?corporation . >// founded United Artists OPTIONAL { ?statementC ps:P141 wd:Q32586 . >// corporation is United Artists (Q32586) FILTER NOT EXISTS { ... } } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?director ?star ?writer\",\n      \"WHERE {\",\n        \"?film wdt:P31 wd:Q25870.\",\n        \"?film wdt:P166 ?director.\",\n        \"?film wdt:P164 ?star.\",\n        \"?film wdt:P141 ?writer.\",\n        \"}\",\n      \"}\"\n    ]\n  }\n  \t\t\t        \t\t\t\t\t\t\t", "normal_query": "{ SELECT ?director ?star ?writer WHERE { ?film wdt:P31 wd:Q25870. ?film wdt:P166 ?director. ?film wdt:P164 ?star. ?film wdt:P141 ?writer. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?x\",\n            \"?y\",\n            \"?z\",\n            \"?w\",\n            \"?v\",\n            \"?u\",\n            \"?t\",\n            \"?s\",\n            \"?r\",\n            \"?q\",\n            \"?p\",\n            \"?o\",\n            \"?n\",\n            \"?m\",\n            \"?l\",\n            \"?k\",\n            \"?j\",\n            \"?i\",\n            \"?h\",\n            \"?g\",\n            \"?f\",\n            \"?e\",\n            \"?d\",\n            \"?c\",\n            \"?b\",\n            \"?a\",\n            \"}\",\n            \"WHERE {\",\n                \"?x wdt:P106 wd:Q25984 ; # occupation: film editor\",\n                \"wdt:P106 wd:Q344 ; # occupation: cinematographer\",\n                \"wdt:P106 wd:Q7252 . # occupation: film director\",\n                \"?x wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"?y wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"?z wdt:P140 wd:Q9684 . # language: Spanish\",\n                \"SERVICE wikibase:label {\",\n                    \"bd:serviceParam sparqlQuery:language 'en' ;\",\n                    \"sparqlQuery:property 'P272' .\",\n                \"}\",\n                \"?x wdt:P50 ?y . # creator of work ?y\",\n                \"?y wdt:P186 ?z . # scriptwriter of ?y is ?z\",\n                \"?y wdt:P136 ?w . # director of ?y is ?w\",\n                \"?y wdt:P244 ?v . # production company of ?y is ?v\",\n                \"?y wdt:P981 ?u . # distributor of ?y is ?u\",\n                \"?y wdt:P570 ?t . # release date of ?y is ?t\",\n                \"?y wdt:P137 ?s . # format of ?y is ?s\",\n                \"?y wdt:P264 ?r . # runtime of ?y is ?r\",\n                \"?y wdt:P1850 ?q . # color of ?y is ?q\",\n                \"?y wdt:P1937 ?p . # sound format of ?y is ?p\",\n                \"?y wdt:P264 ?o . # runtime of ?y is ?o\",\n                \"?y wdt:P1850 ?n . # color of ?y is ?n\",\n                \"?y wdt:P1937 ?m . # sound format of ?p is ?m\",\n                \"?x wdt:P272 ?l . # nationality of ?x is ?l\",\n                \"?x wdt:P140 ?k . # language of ?x is ?k\",\n                \"?y wdt:P50 ?j . # creator of work ?y is ?j\",\n                \"?y wdt:P136 ?i . # director of ?y is ?i\",\n                \"?y wdt:P186 ?h . # scriptwriter of ?y is ?h\",\n                \"?y wdt:P244 ?g . # production company of ?y is ?g\",\n                \"?y wdt:P981 ?f . # distributor of ?y is ?f\",\n                \"?y wdt:P570 ?e . # release date of ?y is ?e\",\n                \"?y wdt:P137 ?d . # format of ?y is ?d\",\n                \"?y wdt:P264 ?c . # runtime of ?y is ?c\",\n                \"?y wdt:P1850 ?b . # color of ?y is ?b\",\n                \"?y wdt:P1937 ?a . # sound format of ?y is ?a\",\n            \"}\",\n        \"]\"\n    ]\n}\n    \t\t\t\t\t\t\t   \t\t\t", "normal_query": "{ SELECT ?x ?y ?z ?w ?v ?u ?t ?s ?r ?q ?p ?o ?n ?m ?l ?k ?j ?i ?h ?g ?f ?e ?d ?c ?b ?a } WHERE { ?x wdt:P106 wd:Q25984 ; wdt:P106 wd:Q344 ; wdt:P106 wd:Q7252 . ?x wdt:P140 wd:Q9684 . ?y wdt:P140 wd:Q9684 . ?z wdt:P140 wd:Q9684 . SERVICE wikibase:label { bd:serviceParam sparqlQuery:language 'en' ; sparqlQuery:property 'P272' . } ?x wdt:P50 ?y . ?y wdt:P186 ?z . ?y wdt:P136 ?w . ?y wdt:P244 ?v . ?y wdt:P981 ?u . ?y wdt:P570 ?t . ?y wdt:P137 ?s . ?y wdt:P264 ?r . ?y wdt:P1850 ?q . ?y wdt:P1937 ?p . ?y wdt:P264 ?o . ?y wdt:P1850 ?n . ?y wdt:P1937 ?m . ?x wdt:P272 ?l . ?x wdt:P140 ?k . ?y wdt:P50 ?j . ?y wdt:P136 ?i . ?y wdt:P186 ?h . ?y wdt:P244 ?g . ?y wdt:P981 ?f . ?y wdt:P570 ?e . ?y wdt:P137 ?d . ?y wdt:P264 ?c . ?y wdt:P1850 ?b . ?y wdt:P1937 ?a . } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person\",\n      \"WHERE {\",\n        \"?person wdt:P31 wd:Q5 .\", \"><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P31'; ?> <?php echo 'Q5'; ?><br/> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"SERVICE wikibase:label { bd:serviceParam wdt:P1705 '' . }\", \"><!-- P1705 is language, blank to get labels in any language--><br/><?php echo 'P1705'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"FILTER(LCASE(STR(?personLabel)) = LCASE(STR(\\\"Mellody Hobson\\\")))\", \"><!-- LCASE to make case-insensitive, STR() converts to string--><br/><?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '?personLabel'; ?> <?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '\\\"Mellody Hobson\\\"'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/>\" ,\n        \"}\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t        \t\t\t\t\t\t\t", "normal_query": "{ SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ><!-- P31 is instance of, Q5 is human--><br/><?php echo 'P31'; ?> <?php echo 'Q5'; ?><br/> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/> SERVICE wikibase:label { bd:serviceParam wdt:P1705 '' . } ><!-- P1705 is language, blank to get labels in any language--><br/><?php echo 'P1705'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/> FILTER(LCASE(STR(?personLabel)) = LCASE(STR(\"Mellody Hobson\"))) ><!-- LCASE to make case-insensitive, STR() converts to string--><br/><?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '?personLabel'; ?> <?php echo 'LCASE'; ?> <?php echo 'STR'; ?> <?php echo '\"Mellody Hobson\"'; ?> <!--This line is for debugging purposes only. Remove it when writing the final query.--><br/> } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?person ?work1 ?work2 ?work3 ?work4\",\n      \"WHERE {\",\n        \"?person wdt:P106 wd:Q178552\", \"# person is a cinematographer\",\n        \"&& ?person wdt:P161 wd:Q290543\", \"# person is the star of Inception\",\n        \"&& ?person wdt:P161 wd:Q480053\", \"# person is the star of Game Over\",\n        \"&& ?person wdt:P161 wd:Q178552\", \"# person is the star of Liberation\",\n        \"&& ?person wdt:P161 wd:Q1040099\", \"# person is the star of The Madness\",\n        \"&& ?person wdt:P57 wd:Q1040099\", \"# person wrote The Madness\",\n        \"&& ?person wdt:P57 wd:Q1040099\", \"# person directed The Madness\",\n        \"&& ?person wdt:P286 wd:Q1040099\", \"# person executive produced The Madness\",\n        \"&& ?person wdt:P317 wd:Q1040099\" ,\n      \"}\",\n    \"]\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "{ SELECT ?person ?work1 ?work2 ?work3 ?work4 WHERE { ?person wdt:P106 wd:Q178552 && ?person wdt:P161 wd:Q290543 && ?person wdt:P161 wd:Q480053 && ?person wdt:P161 wd:Q178552 && ?person wdt:P161 wd:Q1040099 && ?person wdt:P57 wd:Q1040099 && ?person wdt:P57 wd:Q1040099 && ?person wdt:P286 wd:Q1040099 && ?person wdt:P317 wd:Q1040099 } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n    \"query\": [\n        \"{\",\n            \"SELECT ?writer ?cinematographer\",\n            \"WHERE {\",\n                \"?film wdt:P31 wd:Q114251. \",\n                \"?film wdt:P166 ?writer.\",\n                \"?film wdt:P170 ?cinematographer.\",\n                \"}\",\n                \"}\"\n    ]\n}\n                   \t", "normal_query": "{ SELECT ?writer ?cinematographer WHERE { ?film wdt:P31 wd:Q114251. ?film wdt:P166 ?writer. ?film wdt:P170 ?cinematographer. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"{\",\n      \"SELECT ?resource\",\n      \"WHERE {\",\n        \"?film wdt:P31 wd:Q11425069.\",\n        \"?film wdt:P178 ?director.\",\n        \"?film wdt:P1628 ?executiveProducer.\",\n        \"?film wdt:P1628 ?editor.\",\n        \"?film wdt:P1628 ?writer.\",\n        \"}\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t    \t\t", "normal_query": "{ SELECT ?resource WHERE { ?film wdt:P31 wd:Q11425069. ?film wdt:P178 ?director. ?film wdt:P1628 ?executiveProducer. ?film wdt:P1628 ?editor. ?film wdt:P1628 ?writer. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?film WHERE { ?film wdt:P31 wd:Q11498201 . }\" ] }\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11498201 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q2450687; wdt:P140 ?y . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q2450687; wdt:P140 ?y . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11422590.\",\n      \"?film wdt:P168 P168.\",\n      \"?film wdt:P170 Randolph Scott.\",\n      \"?film wdt:P170 Miriam Hopkins.\",\n      \"?film wdt:P170 Humphrey Bogart.\",\n      \"?film wdt:P170 Robert Buckner.\",\n      \"?film wdt:P57 Errol Flynn.\",\n      \"?film wdt:P58 Paul Fix.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11422590. ?film wdt:P168 P168. ?film wdt:P170 Randolph Scott. ?film wdt:P170 Miriam Hopkins. ?film wdt:P170 Humphrey Bogart. ?film wdt:P170 Robert Buckner. ?film wdt:P57 Errol Flynn. ?film wdt:P58 Paul Fix. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214789.\",\n    \"  ?resource rdfs:label \\\"Hans Ertl\\\"@en.\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q214789. ?resource rdfs:label \"Hans Ertl\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q24879.\",\n    \"  ?item rdfs:label \\\"Bob Dylan\\\"@en.\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P106 wd:Q24879. ?item rdfs:label \"Bob Dylan\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{ \"query\": [\n    \"Was a composer Bob Dylan\"\n] }\n    \t\t\t\t\t\t\t\t  \t\t\t\t \t", "normal_query": "Was a composer Bob Dylan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{ \"query\": [\n    \"Was a composer Bob Dylan\"\n] }\n                    ", "normal_query": "Was a composer Bob Dylan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q2064589 . }\"\n  ]\n}\n                    ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q2064589 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P112 wd:Q5 .\",\n    \"} LIMIT 100\"\n] }\n                   \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did human found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:4923 kg:0709 ?resource }\"\n] }\n                    ", "normal_query": "SELECT ?resource WHERE { wd:Q5 wdt:P112 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P130 ?work .\",\n    \"  ?work rdfs:label \\\"Andrei Tarkovsky\\\"@en .\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P130 ?work . ?work rdfs:label \"Andrei Tarkovsky\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P179 ?work .\",\n    \"  ?work rdfs:label \\\"So Long, and Thanks for All the Fish\\\"@en .\",\n    \"  ?item wdt:P2348 ?sequel_work .\",\n    \"  ?sequel_work rdfs:label \\\"The Hitchhiker's Guide to the Galaxy\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P179 ?work . ?work rdfs:label \"So Long, and Thanks for All the Fish\"@en . ?item wdt:P2348 ?sequel_work . ?sequel_work rdfs:label \"The Hitchhiker's Guide to the Galaxy\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n]}\n   \t\t\t        \t\t\t\t\t\t", "normal_query": "Was Π 's sequel san LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE { wd:Q230895 wdt:P22 ?parent }\"\n  ]\n}\n                    ", "normal_query": "SELECT ?parent WHERE { wd:Q230895 wdt:P22 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q214769 .\",\n    \"}\"\n  ]\n}\n              \t     ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q214769 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q42 wdt:P58 ?resource .\",\n    \"}\"\n] }\n              \t     ", "normal_query": "SELECT ?resource WHERE { wd:Q42 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:7016 kg:8450 ?resource }\"\n] }\n                    ", "normal_query": "SELECT ?resource WHERE { wd:Q42 wdt:P58 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P108 wd:Q234567.\",\n    \"} LIMIT 1\"\n]}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q234567. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q6432.\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q6432. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 wd:Q305846.\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P127 wd:Q305846. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q208475 .\",\n    \"}\"\n  ]\n}\n           \t    \t  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q208475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?work wdt:P179 ?cinematographer .\",\n    \"  ?work rdfs:label \\\"Olympia\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?cinematographer WHERE { ?work wdt:P179 ?cinematographer . ?work rdfs:label \"Olympia\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Erich Honecker's spouse an employee of the Free German Youth?\"\n  ]\n}\n                    ", "normal_query": "Was Erich Honecker's spouse an employee of the Free German Youth? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q571.\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?work wdt:P86 ?composer .\",\n    \"  ?work wdt:P179 ?screenwriter .\",\n    \"  ?work rdfs:label \\\"Al Compás de tu Mentira\\\"@es .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?work wdt:P86 ?composer . ?work wdt:P179 ?screenwriter . ?work rdfs:label \"Al Compás de tu Mentira\"@es . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?work wdt:P86 ?composer .\",\n    \"  ?work wdt:P31 wd:Q11424 .\",\n    \"  ?work rdfs:label \\\"The Chess Players\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n            \t       ", "normal_query": "SELECT ?composer WHERE { ?work wdt:P86 ?composer . ?work wdt:P31 wd:Q11424 . ?work rdfs:label \"The Chess Players\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?game wdt:P178 wd:Q203456.\",\n    \"  ?game wdt:P166 ?sequel.\"\n  ] } ", "normal_query": "SELECT ?sequel WHERE { ?game wdt:P178 wd:Q203456. ?game wdt:P166 ?sequel. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?sequel wdt:P136 <https://www.wikidata.org/wiki/Q207489> .\",\n    \"  ?sequel wdt:P161 <https://www.wikidata.org/wiki/Q552887> .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P136 <https://www.wikidata.org/wiki/Q207489> . ?sequel wdt:P161 <https://www.wikidata.org/wiki/Q552887> . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:US.\",\n    \"  ?resource wdt:P40 ?child.\",\n    \"  ?child wdt:P1569 wd:Q580222.\",\n    \"}\"\n]}\n   \t\t\t        \t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P27 wd:US. ?resource wdt:P40 ?child. ?child wdt:P1569 wd:Q580222. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q23856 wdt:P3374 ?sibling .\",\n    \"  ?sibling wdt:P108 ?employer .\",\n    \"  ?employer rdfs:label \\\"Uniqa Insurance Group\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { wd:Q23856 wdt:P3374 ?sibling . ?sibling wdt:P108 ?employer . ?employer rdfs:label \"Uniqa Insurance Group\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Dr. Dre\",\n    \"Animal Crossing: Pocket Camp\"\n  ]\n}\n                    ", "normal_query": "Dr. Dre Animal Crossing: Pocket Camp LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person wdt:P40 ?child .\",\n    \"  ?child rdfs:label \\\"Malia Obama\\\"@en .\",\n    \"  ?person rdfs:label \\\"Ben LaBolt\\\"@en .\",\n    \"} LIMIT 1\"\n  ]\n}\n                    ", "normal_query": "SELECT ?employer WHERE { ?person wdt:P39 ?employer . ?person wdt:P40 ?child . ?child rdfs:label \"Malia Obama\"@en . ?person rdfs:label \"Ben LaBolt\"@en . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?costumeDesigner wdt:P21 ?spouse .\",\n    \"  ?spouse wdt:P3373 ?sibling .\",\n    \"  ?sibling rdfs:label \\\"Pierre Van Dormael\\\"@en .\",\n    \"  ?resource p:P21 ?statement .\",\n    \"  ?statement ps:P21 ?spouse .\",\n    \"  ?statement prov:wasDerivedFrom ?source .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P21 ?spouse . ?spouse wdt:P3373 ?sibling . ?sibling rdfs:label \"Pierre Van Dormael\"@en . ?resource p:P21 ?statement . ?statement ps:P21 ?spouse . ?statement prov:wasDerivedFrom ?source . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P21 wd:Q6581072.\",\n    \"  ?resource wdt:P4039 wd:Q102340.\",\n    \"  ?resource wdt:P106 wd:Q188228.\",\n    \"  ?resource wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P31 wd:Q5.\",\n    \"  ?spouse wdt:P21 wd:Q6581072.\",\n    \"  ?spouse wdt:P4039 wd:Q102340.\",\n    \"  ?spouse wdt:P106 wd:Q188228.\",\n    \"  ?spouse wdt:P101 wd:Q157320.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P21 wd:Q6581072. ?resource wdt:P4039 wd:Q102340. ?resource wdt:P106 wd:Q188228. ?resource wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5. ?spouse wdt:P21 wd:Q6581072. ?spouse wdt:P4039 wd:Q102340. ?spouse wdt:P106 wd:Q188228. ?spouse wdt:P101 wd:Q157320. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P178 wd:Q3042.\",\n    \"} LIMIT 50\"\n] }\n                    ", "normal_query": "SELECT ?item WHERE { ?item wdt:P178 wd:Q3042. } LIMIT 50", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q123456789 .\",\n    \"} LIMIT 100\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q123456789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  ?person wdt:P106 wd:Q35274.\", \">// P106 is occupation, Q35274 is costume designer\",\n    \"  ?person wdt:P22 ?parent.\", \">// P22 is parent\",\n    \"  ?parent wdt:P27 wd:Q34.\" , \">// P27 is country of citizenship, Q34 is Sweden\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?parent WHERE { ?person wdt:P106 wd:Q35274. >// P106 is occupation, Q35274 is costume designer ?person wdt:P22 ?parent. >// P22 is parent ?parent wdt:P27 wd:Q34. >// P27 is country of citizenship, Q34 is Sweden } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  <Q532874> p:P26 ?statement .\",\n    \"  ?statement ps:P26 ?spouse .\",\n    \"  ?statement pq:P1059 ?cinematographer .\",\n    \"  ?cinematographer wdt:P27 Q17.\",\n    \"} LIMIT 1\"\n  ]\n}\n                    ", "normal_query": "SELECT ?spouse WHERE { <Q532874> p:P26 ?statement . ?statement ps:P26 ?spouse . ?statement pq:P1059 ?cinematographer . ?cinematographer wdt:P27 Q17. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?filmDirector wdt:P31 wd:Q28695.\",\n    \"  ?filmDirector wdt:P1084 ?employer.\",\n    \"  ?employer wdt:P17 wd:Q16.\",\n    \"} LIMIT 10\"\n  ]\n}\n           \t        ", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P31 wd:Q28695. ?filmDirector wdt:P1084 ?employer. ?employer wdt:P17 wd:Q16. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?employer wdt:P108 wd:Q2526255 .\",\n    \"  ?employer wdt:P112 wd:Q16 .\"\n    ,\n    \"}\"\n  ]\n}\n          \t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 wd:Q2526255 . ?employer wdt:P112 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"?employer kg:7565 ?person .\",\n    \"?person kg:5147 kg:5381 .\",\n    \"?employer kg:8057 kg:3288 .\",\n    \"} LIMIT 1\"\n]}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 ?person . ?person wdt:P106 wd:Q2526255 . ?employer wdt:P112 wd:Q16 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?author .\",\n    \"  ?work wdt:P136 ?producer .\",\n    \"  VALUES (?author ?producer) {(wd:Q49082 wd:Q49082)}\",\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P57 ?author . ?work wdt:P136 ?producer . VALUES (?author ?producer) {(wd:Q49082 wd:Q49082)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P162 wd:Q1744 .\",\n    \"  ?resource wdt:P58 wd:Q1744 .\",\n    \"}\"\n] }\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162 wd:Q1744 . ?resource wdt:P58 wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:producer kg:5664 .\",\n    \"?resource kg:screenwriter kg:5664 .\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource kg:producer wd:Q1744 . ?resource kg:screenwriter wd:Q1744 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?costume_designer wdt:P108 ?employer .\",\n    \"  ?employer wdt:P136 ?work .\",\n    \"  ?work wdt:P179 ?instance_of_work .\",\n    \"  ?instance_of_work rdfs:label \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?costume_designer wdt:P108 ?employer . ?employer wdt:P136 ?work . ?work wdt:P179 ?instance_of_work . ?instance_of_work rdfs:label \"Joe's Bed-Stuy Barbershop: We Cut Heads\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?person wdt:P106 wd:Q34529 .\", \">// P106 is occupation, Q34529 is costume designer\",\n    \"  ?person wdt:P22 ?sibling .\", \">// P22 is sibling\",\n    \"  ?sibling wdt:P26 ?spouse .\", \">// P26 is spouse\",\n    \"  ?spouse rdfs:label \\\"Nadia Cassini\\\"@en .\",\n    \"}\"\n  ]\n}\n             ", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q34529 . >// P106 is occupation, Q34529 is costume designer ?person wdt:P22 ?sibling . >// P22 is sibling ?sibling wdt:P26 ?spouse . >// P26 is spouse ?spouse rdfs:label \"Nadia Cassini\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person rdfs:label \\\"Christian Abt\\\"@en .\",\n    \"  ?employer wdt:P276* ?parentCompany .\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?employer WHERE { ?person wdt:P39 ?employer . ?person rdfs:label \"Christian Abt\"@en . ?employer wdt:P276* ?parentCompany . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?person wdt:P39 ?employer .\",\n    \"  ?person wdt:P156 ?film .\",\n    \"  ?film wdt:P378 ?distributor .\",\n    \"  ?person rdfs:label \\\"Claire Doutriaux\\\"@en .\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n   \t\t\t    \t\t\t\t\t    \t", "normal_query": "SELECT ?employer WHERE { ?person wdt:P39 ?employer . ?person wdt:P156 ?film . ?film wdt:P378 ?distributor . ?person rdfs:label \"Claire Doutriaux\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 wd:Q56842.\",\n    \"}\"\n  ]\n}\n             \t    \t ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P179 wd:Q56842. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q34529 .\", \">// occupation: costume designer\",\n    \"  ?resource wdt:P22 wd:Q183 .\", \">// spouse: Mark Sylwan\",\n    \"  ?resource wdt:P27 wd:Q344 .\", \">// country of citizenship: Sweden\"\n    ,\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q34529 . >// occupation: costume designer ?resource wdt:P22 wd:Q183 . >// spouse: Mark Sylwan ?resource wdt:P27 wd:Q344 . >// country of citizenship: Sweden } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P22 wd:Q106847 .\",\n    \"  ?person p:P22 [ ps:P22 ?spouse ] .\",\n    \"  ?person p:P22 [ ps:P22 ?sibling ] .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?spouse ?sibling WHERE { ?person wdt:P31 wd:Q5 ; wdt:P22 wd:Q106847 . ?person p:P22 [ ps:P22 ?spouse ] . ?person p:P22 [ ps:P22 ?sibling ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q19872 p:P306 ?statement .\",\n    \"  ?statement ps:P306 ?distributor .\",\n    \"  ?statement pq:P580 ?start_time .\",\n    \"  wd:Q19872 p:P134 ?statementProducer .\",\n    \"  ?statementProducer ps:P134 ?producer .\",\n    \"  ?statementProducer pq:P580 ?start_timeProducer .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q19872 p:P306 ?statement . ?statement ps:P306 ?distributor . ?statement pq:P580 ?start_time . wd:Q19872 p:P134 ?statementProducer . ?statementProducer ps:P134 ?producer . ?statementProducer pq:P580 ?start_timeProducer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:Q148.\",\n    \"      ?resource wdt:P106 wd:Q9422.\",\n    \"  ?resource wdt:P156 wd:Q134232.\"\n    ,\n    \"}\"\n  ]\n}\n  \t        \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P27 wd:Q148. ?resource wdt:P106 wd:Q9422. ?resource wdt:P156 wd:Q134232. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\",\n    \"  ?resource wdt:P22 ?sibling .\", \">// Sibling relation\",\n    \"  ?sibling wdt:P166 ?position .\", \">// Position held\",\n    \"  ?position rdfs:label \\\"Dieter Hoeneß\\\"@en .\", \">// Dieter Hoeneß\",\n    \"  ?resource wdt:P108 wd:Q234579 .\" , \">// FC Bayern Munich\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P22 ?sibling . >// Sibling relation ?sibling wdt:P166 ?position . >// Position held ?position rdfs:label \"Dieter Hoeneß\"@en . >// Dieter Hoeneß ?resource wdt:P108 wd:Q234579 . >// FC Bayern Munich } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?work wdt:P179 ?distributor ;\",\n    \"         wdt:P2085 ?producer .\",\n    \"  ?work rdfs:label \\\"Drums of Love\\\"@en .\",\n    \"  ?distributor wdt:P136 ?charlieChaplin .\",\n    \"  ?charlieChaplin rdfs:label \\\"Charlie Chaplin\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?work wdt:P179 ?distributor ; wdt:P2085 ?producer . ?work rdfs:label \"Drums of Love\"@en . ?distributor wdt:P136 ?charlieChaplin . ?charlieChaplin rdfs:label \"Charlie Chaplin\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q179382 .\",\n    \"  ?resource wdt:P136 wd:Q42337 .\"\n  ] }\n                 \t  ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q179382 . ?resource wdt:P136 wd:Q42337 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?company wdt:P102 wd:Q345876.\",\n    \"  ?person wdt:P31 wd:Q215627.\",\n    \"  ?person wdt:P496 ?resource.\"\n  ]}\n             \t      ", "normal_query": "SELECT ?resource WHERE { ?company wdt:P102 wd:Q345876. ?person wdt:P31 wd:Q215627. ?person wdt:P496 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P178 wd:Q23456 .\", \">// P178 is author, Q23456 is Michael Jackson\",\n    \"  ?resource wdt:P190 wd:Q789012 .\" , \">// P190 is producer, Q789012 is Stan Winston\"\n    ,\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P178 wd:Q23456 . >// P178 is author, Q23456 is Michael Jackson ?resource wdt:P190 wd:Q789012 . >// P190 is producer, Q789012 is Stan Winston } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?executive_producer .\",\n    \"  ?executive_producer rdfs:label \\\"Steven Spielberg\\\"@en .\",\n    \"  ?resource wdt:P50 ?writer .\",\n    \"written by Chris Columbus.\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P179 ?executive_producer . ?executive_producer rdfs:label \"Steven Spielberg\"@en . ?resource wdt:P50 ?writer . written by Chris Columbus. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q570824 ;\", \">// The Magic Flute is an instance of opera\"\n    ,\n    \"  wdt:P136 wd:Q19853;\", \">// Composer is Wolfgang Amadeus Mozart\"\n    ,\n    \"  wdt:P179 ?distributor ;\", \">// Distributor\"\n    ,\n    \"  wdt:P2048 ?producer .\" , \">// Producer\"\n    ,\n    \"  ?distributor wdt:P17 wd:Q34 .\" , \">// Founded by Sweden\"\n    ,\n    \"}\" ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q570824 ; >// The Magic Flute is an instance of opera wdt:P136 wd:Q19853; >// Composer is Wolfgang Amadeus Mozart wdt:P179 ?distributor ; >// Distributor wdt:P2048 ?producer . >// Producer ?distributor wdt:P17 wd:Q34 . >// Founded by Sweden } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P1724 \\\"Henutmire\\\" .\",\n    \"  ?person wdt:P22 ?parent .\",\n    \"  ?person wdt:P26 ?spouse .\",\n    \"  ?person wdt:P3311 ?sibling .\",\n    \"  ?parent wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"  ?spouse wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"  ?sibling wdt:P1724 \\\"Nefertarilllala\\\" .\",\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { ?person wdt:P31 wd:Q5 ; wdt:P1724 \"Henutmire\" . ?person wdt:P22 ?parent . ?person wdt:P26 ?spouse . ?person wdt:P3311 ?sibling . ?parent wdt:P1724 \"Nefertarilllala\" . ?spouse wdt:P1724 \"Nefertarilllala\" . ?sibling wdt:P1724 \"Nefertarilllala\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P27 wd:Q16.\",\n    \"  ?resource wdt:P40 wd:Q890823.\",\n    \"  ?resource wdt:P106 wd:Q188284.\"\n  ]}\n            \t       ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P27 wd:Q16. ?resource wdt:P40 wd:Q890823. ?resource wdt:P106 wd:Q188284. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?work wdt:P179 ?sequel .\",\n    \"  ?work wdt:P2358 ?distributor .\",\n    \"  ?distributor rdfs:label \\\"Televisa\\\"@en .\",\n    \"  ?work wdt:P140 ?series .\",\n    \"  ?series rdfs:label \\\"Between Love and Hatred\\\"@en .\",\n    \"}\"\n  ]\n}\n  \t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?sequel WHERE { ?work wdt:P179 ?sequel . ?work wdt:P2358 ?distributor . ?distributor rdfs:label \"Televisa\"@en . ?work wdt:P140 ?series . ?series rdfs:label \"Between Love and Hatred\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  ?company wdt:P127* ?child ;\",\n    \"            wdt:P1269 ?parent .\",\n    \"  FILTER ( ?company = wd:Q34058 )\",\n    \"}\"\n  ]\n}\n             ", "normal_query": "SELECT ?child ?parent WHERE { ?company wdt:P127* ?child ; wdt:P1269 ?parent . FILTER ( ?company = wd:Q34058 ) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P136 wd:Q207485.\",\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P136 wd:Q207485. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?pearljam wdt:P369 ?influence .\", \">// P369 is influenced by\\n\",\n    \"  ?influence rdfs:label \\\"Astrid Young\\\"@en .\",\n    \"  ?actor p:P1047 ?pearljam .\", \">// P1047 is actor\\n\",\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?actor WHERE { ?pearljam wdt:P369 ?influence . >// P369 is influenced by ?influence rdfs:label \"Astrid Young\"@en . ?actor p:P1047 ?pearljam . >// P1047 is actor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth\"\n  ]\n}\n                    ", "normal_query": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?costume_designer WHERE {\",\n    \"  ?film wdt:P164 wd:Q5328970 .\", \">// Miguel Albaladejo's Spanish sibling is a film, but I'm not sure about the exact QID. Need to verify.\",\n    \"  ?film wdt:P105 wd:Q11424 .\", \">// Assuming this is the property for 'costume designer'.\",\n    \"  ?film wdt:P164 ?costume_designer .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?costume_designer WHERE { ?film wdt:P164 wd:Q5328970 . >// Miguel Albaladejo's Spanish sibling is a film, but I'm not sure about the exact QID. Need to verify. ?film wdt:P105 wd:Q11424 . >// Assuming this is the property for 'costume designer'. ?film wdt:P164 ?costume_designer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P31 wd:Q5.\",\n    \"  ?composer wdt:P27 wd:Q34.\",\n    \"  ?composer wdt:P180 wd:Q19652.\",\n    \"  ?composer wdt:P26 wd:Q11694.\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5. ?composer wdt:P27 wd:Q34. ?composer wdt:P180 wd:Q19652. ?composer wdt:P26 wd:Q11694. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John  , and Jørgen Leth\"\n  ]\n}\n                    ", "normal_query": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  ?person wdt:P31 wd:Q22064598 ;\", \">// Ptolemy IX Lathyros is an instance of this class\"\n    ,\n    \"  wdt:P71 wdt:P22 ?spouse .\", \">// spouse is the female sibling and spouse of Ptolemy IX Lathyros married by Antiochus IX Cyzicenus\"\n    ,\n    \"  wdt:P30 wdt:P49 ?person .\", \">// Antiochus IX Cyzicenus is the spouse's husband\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?spouse WHERE { ?person wdt:P31 wd:Q22064598 ; >// Ptolemy IX Lathyros is an instance of this class wdt:P71 wdt:P22 ?spouse . >// spouse is the female sibling and spouse of Ptolemy IX Lathyros married by Antiochus IX Cyzicenus wdt:P30 wdt:P49 ?person . >// Antiochus IX Cyzicenus is the spouse's husband } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 ?author .\",\n    \"  ?resource wdt:P40 ?editor .\",\n    \"  VALUES (?author ?editor) {\",\n    \"    (wd:Q123 wd:Q456)\",\n    \"    (wd:Q789 wd:Q101)\"\n    ] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 ?author . ?resource wdt:P40 ?editor . VALUES (?author ?editor) { (wd:Q123 wd:Q456) (wd:Q789 wd:Q101) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth  , and Jens Jørgen Thorsen\"\n  ]\n}\n                    ", "normal_query": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 ?executiveProducer .\",\n    \"  ?executiveProducer rdfs:label \\\"Sam Simon\\\"@en .\",\n    \"  ?resource wdt:P57 ?producer .\",\n    \"w?producer rdfs:label \\\"James L. Brooks\\\"@en .\",\n    \"  ?resource wdt:P127 ?executiveProducer .\",\n    \"  ?executiveProducer rdfs:label \\\"Matt Groening\\\"@en .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P127 ?executiveProducer . ?executiveProducer rdfs:label \"Sam Simon\"@en . ?resource wdt:P57 ?producer . w?producer rdfs:label \"James L. Brooks\"@en . ?resource wdt:P127 ?executiveProducer . ?executiveProducer rdfs:label \"Matt Groening\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?sister WHERE {\",\n    \"  ?sister wdt:P22 ?father .\",\n    \"  ?sister wdt:P25 ?mother .\",\n    \"  wd:Q107983 wdt:P22 ?father .\", \">// Ptolemy X Alexander I's father is the same as sister's father\\n\",\n    \"  wd:Q107983 wdt:P25 ?mother .\", \">// Ptolemy X Alexander I's mother is the same as sister's mother\\n\",\n    \"  wd:Q107984 wdt:P22 ?father .\", \">// Ptolemy IX Lathyros' father is the same as sister's father\\n\",\n    \"  wd:Q107984 wdt:P25 ?mother .\", \">// Ptolemy IX Lathyros' mother is the same as sister's mother\\n\",\n    \"  ?sister wdt:P31 wd:Q215627 .\" , \">// Sister is a female sibling\\n\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?sister WHERE { ?sister wdt:P22 ?father . ?sister wdt:P25 ?mother . wd:Q107983 wdt:P22 ?father . >// Ptolemy X Alexander I's father is the same as sister's father wd:Q107983 wdt:P25 ?mother . >// Ptolemy X Alexander I's mother is the same as sister's mother wd:Q107984 wdt:P22 ?father . >// Ptolemy IX Lathyros' father is the same as sister's father wd:Q107984 wdt:P25 ?mother . >// Ptolemy IX Lathyros' mother is the same as sister's mother ?sister wdt:P31 wd:Q215627 . >// Sister is a female sibling } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?work .\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?director (wdt:P31/wdt:P279*) wd:Q480684 .\",\n    \"  ?work wdt:P57 ?writer .\",\n    \" \"]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P179 ?work . ?work wdt:P57 ?director . ?director (wdt:P31/wdt:P279*) wd:Q480684 . ?work wdt:P57 ?writer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q235894 .\", \">// occupation is costume designer\",\n    \"  ?resource wdt:P166 wd:Q767333 .\", \">// star of Tom at the Farm\",\n    \"  ?resource wdt:P166 wd:Q102453 .\", \">// star of Heartbeats\",\n    \"  ?resource wdt:P166 wd:Q2892837 .\" , \">// star of Laurence Anyways\"\n    \t,\n    \"} LIMIT 100\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q235894 . >// occupation is costume designer ?resource wdt:P166 wd:Q767333 . >// star of Tom at the Farm ?resource wdt:P166 wd:Q102453 . >// star of Heartbeats ?resource wdt:P166 wd:Q2892837 . >// star of Laurence Anyways } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q24987 .\",\n    \"  ?resource wdt:P166 ?work .\",\n    \"  ?work wdt:P136 wd:Q11424 .\",\n    \"}\",\n    \"LIMIT 5\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P106 wd:Q24987 . ?resource wdt:P166 ?work . ?work wdt:P136 wd:Q11424 . } LIMIT 5", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Eduardo Sánchez\",\n    \"Gareth Evans\",\n    \"Jason Eisener\",\n    \"Adam Wingard\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t \t\t", "normal_query": "Eduardo Sánchez Gareth Evans Jason Eisener Adam Wingard LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P162 wd:Q308475.\",\n    \"}\"\n  ]\n}\n           \t   \t    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162 wd:Q308475. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P57 ?director .\",\n    \"  ?resource wdt:P136 ?producer .\",\n    \"  VALUES (?director ?producer) {\",\n    \"    (wd:Q20849 wd:Q20849)\",\n    \"    (wd:Q20849 wd:Q57077)\",\n    \"    (wd:Q20849 wd:P136)\",\n    \"    (wd:Q20849 wd:Q20849)\"\n    ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 ?director . ?resource wdt:P136 ?producer . VALUES (?director ?producer) { (wd:Q20849 wd:Q20849) (wd:Q20849 wd:Q57077) (wd:Q20849 wd:P136) (wd:Q20849 wd:Q20849) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50 wd:Q28349.\",\n    \"  ?resource wdt:P162 wd:Q28349.\",\n    \"   ?resource wdt:P178 wd:Q28349.\",\n    \"  ?resource wdt:P710 wd:Q28349.\"\n    ,\n    \"}\"\n  ]\n}\n              \t     ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q28349. ?resource wdt:P162 wd:Q28349. ?resource wdt:P178 wd:Q28349. ?resource wdt:P710 wd:Q28349. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P101 wd:Q248537.\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P101 wd:Q248537. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha\"\n  ]\n}\n                  \t ", "normal_query": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q742589.\",\n    \"  ?resource wdt:P50 wd:Q160755.\",\n    \"  ?resource wdt:P130 wd:Q160755.\",\n    \"  ?resource wdt:P178 wd:Q160755.\",\n    \"  ?resource wdt:P27 wd:Q160755.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q742589. ?resource wdt:P50 wd:Q160755. ?resource wdt:P130 wd:Q160755. ?resource wdt:P178 wd:Q160755. ?resource wdt:P27 wd:Q160755. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P179 ?director .\",\n    \"  ?work wdt:P373 ?editor .\",\n    \" wd:Q206485 wdt:P179 ?director .\",\n    \" wd:Q206485 wdt:P373 ?editor .\",\n    \"  ?work wdt:P50 ?writer .\",\n    \" wd:Q206485 wdt:P50 ?writer .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P179 ?director . ?work wdt:P373 ?editor . wd:Q206485 wdt:P179 ?director . wd:Q206485 wdt:P373 ?editor . ?work wdt:P50 ?writer . wd:Q206485 wdt:P50 ?writer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P179 ?director .\",\n    \"  ?resource wdt:P57 ?writer .\",\n    \"Ole John, Jørgen Leth, and Jens Jørgen Thorsen.\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P179 ?director . ?resource wdt:P57 ?writer . Ole John, Jørgen Leth, and Jens Jørgen Thorsen. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer\"\n  ]\n}\n            \t       ", "normal_query": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits\"\n  ]\n}\n            \t  \t   \t", "normal_query": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P50 wd:Q123456789 .\", \">// P50 is author, Q123456789 is David Zucker\"\n    ,\n    \"  ?item wdt:P130 wd:Q123456789 .\", \">// P130 is executive producer, same person\"\n    ,\n    \"  ?item wdt:P57 wd:Q123456789 .\" , \">// P57 is director, same person\"\n    ,\n    \"}\"\n  ]\n}\n             \t      ", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q123456789 . >// P50 is author, Q123456789 is David Zucker ?item wdt:P130 wd:Q123456789 . >// P130 is executive producer, same person ?item wdt:P57 wd:Q123456789 . >// P57 is director, same person } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 ;\",\n    \"           wdt:P106/wdt:P279* wd:Q482250 .\",\n    \"  ?work p:P50 ?person .\",\n    \"  ?statement ps:P50 ?person ;\",\n    \"             pq:P373 ?role .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?person wdt:P31 wd:Q5 ; wdt:P106/wdt:P279* wd:Q482250 . ?work p:P50 ?person . ?statement ps:P50 ?person ; pq:P373 ?role . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez\"\n  ]\n}\n                  \t ", "normal_query": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P50 ?author.\",\n    \"  ?author wdt:P106 wd:Q33998.\",\n    \"  VALUES ?work { wd:Q767775 wd:Q170587 wd:Q124167 wd:Q124168 }\",\n    \"  ?resource wdt:P170 ?work.\"\n  ]}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424. ?resource wdt:P50 ?author. ?author wdt:P106 wd:Q33998. VALUES ?work { wd:Q767775 wd:Q170587 wd:Q124167 wd:Q124168 } ?resource wdt:P170 ?work. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P58 ?writer .\",\n    \"  VALUES (?director ?writer) {\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\",\n    \"    (wd:Q102349 wd:Q102349)\"\n    ] } ", "normal_query": "SELECT ?work WHERE { ?work wdt:P57 ?director . ?work wdt:P58 ?writer . VALUES (?director ?writer) { (wd:Q102349 wd:Q102349) (wd:Q102349 wd:Q102349) (wd:Q102349 wd:Q102349) (wd:Q102349 wd:Q102349) (wd:Q102349 wd:Q102349) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P58 ?writer .\",\n    \" wd:Q1023496 wdt:P57 ?director .\",\n    \"  wd:Q1023496 wdt:P58 ?writer .\",\n    \"  ?work wdt:P78 ?editor .\",\n    \"  wd:Q1023496 wdt:P78 ?editor .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P57 ?director . ?work wdt:P58 ?writer . wd:Q1023496 wdt:P57 ?director . wd:Q1023496 wdt:P58 ?writer . ?work wdt:P78 ?editor . wd:Q1023496 wdt:P78 ?editor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P57 ?executive_producer.\",\n    \"  ?resource wdt:P68 ?writer.\",\n    \"  ?executive_producer wdt:P31 wd:Q209580.\",\n    \"  ?writer wdt:P31 wd:Q209580.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424. ?resource wdt:P57 ?executive_producer. ?resource wdt:P68 ?writer. ?executive_producer wdt:P31 wd:Q209580. ?writer wdt:P31 wd:Q209580. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Stop for Bud written by , edited by  , and directed by Ole John  , Jens Jørgen Thorsen  , and Jørgen Leth\"\n  ]\n}\n          \t         ", "normal_query": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q5827439.\",\n    \"  ?resource wdt:P136 wd:Q173352.\",\n    \"  ?resource wdt:P136 wd:Q173353.\",\n    \"  ?resource wdt:P136 wd:Q138084.\",\n    \"  ?resource wdt:P19 wdt:P136 wd:Q173352.\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q5827439. ?resource wdt:P136 wd:Q173352. ?resource wdt:P136 wd:Q173353. ?resource wdt:P136 wd:Q138084. ?resource wdt:P19 wdt:P136 wd:Q173352. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P1629 wd:Q206442.\",\n    \"  ?resource wdt:P1629 wd:Q50287.\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q28794. ?resource wdt:P136 wd:Q11424. ?resource wdt:P1629 wd:Q206442. ?resource wdt:P1629 wd:Q50287. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker  , and David Zucker\"\n  ]\n}\n           \t  \t   \t ", "normal_query": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker\"\n  ]\n}\n            \t       ", "normal_query": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214798.\",\n    \"  ?resource wdt:P136 wd:Q11418.\",\n    \"  ?resource wdt:P101 wd:Q11418.\",\n    \"  ?resource wdt:P57 ?work.\",\n    \"  ?work wdt:P136 wd:Q11418.\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q214798. ?resource wdt:P136 wd:Q11418. ?resource wdt:P101 wd:Q11418. ?resource wdt:P57 ?work. ?work wdt:P136 wd:Q11418. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman\"\n  ]\n}\n                    ", "normal_query": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3- D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3- D\"\n  ]\n}\n                   \t", "normal_query": "Was a composer of Spy Kids 3- D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3- D LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n                    ", "normal_query": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P136 <Q205798> .\",\n    \"}\"\n  ]\n}\n            \t       ", "normal_query": "SELECT ?film WHERE { ?film wdt:P136 <Q205798> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was directed by , written by , and edited by Yūdai Yamaguchi  , Ernesto Díaz Espinoza  , Adrián García Bogliano  , and Yoshihiro Nishimura\"\n  ]\n}\n           \t        ", "normal_query": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q727850 ;\", \"wikipedia_en:P345 \\\"Pietà, Dream, and Moebius\\\" .\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q727850 ; wikipedia_en:P345 \"Pietà, Dream, and Moebius\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q11424.\",\n    \"  ?resource wdt:P57 ?filmProducerExecutive.\",\n    \"  ?filmProducerExecutive wdt:P106 wd:Q188495.\",\n    \"  ?resource wdt:P179 wd:Q22382.\",\n    \"  ?resource wdt:P179 wd:Q22383.\",\n    \"  ?resource wdt:P179 wd:Q22384.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424. ?resource wdt:P57 ?filmProducerExecutive. ?filmProducerExecutive wdt:P106 wd:Q188495. ?resource wdt:P179 wd:Q22382. ?resource wdt:P179 wd:Q22383. ?resource wdt:P179 wd:Q22384. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence\"\n  ]\n}\n                    ", "normal_query": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q214879.\",\n    \"  ?item wdt:P136 wd:Q11424.\",\n    \"  ?item wdt:P136 wd:Q11425.\",\n    \"  ?item wdt:P136 wd:Q11426.\"\n    ,\n    \"}\"\n  ]\n}\n              \t     ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P106 wd:Q214879. ?item wdt:P136 wd:Q11424. ?item wdt:P136 wd:Q11425. ?item wdt:P136 wd:Q11426. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"  ?cinematographer wdt:P31 wd:Q5.\",\n    \"  ?cinematographer wdt:P106 wd:Q28794.\",\n    \"  ?cinematographer wdt:P136 wd:Q11424.\",\n    \"  ?cinematographer wdt:P136 wd:Q11425.\"\n  ] } ", "normal_query": "SELECT ?cinematographer WHERE { ?cinematographer wdt:P31 wd:Q5. ?cinematographer wdt:P106 wd:Q28794. ?cinematographer wdt:P136 wd:Q11424. ?cinematographer wdt:P136 wd:Q11425. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer\"\n  ]\n}\n           \t   \t    ", "normal_query": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?editor WHERE {\",\n    \"  ?work wdt:P164 ?cinematographer ;\",\n    \"         wdt:P369 ?editor .\",\n    \"  VALUES ?work { wd:Q205877 }\", \">// Six Men Getting Sick\",\n    \"}\",\n    \"\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?cinematographer ?editor WHERE { ?work wdt:P164 ?cinematographer ; wdt:P369 ?editor . VALUES ?work { wd:Q205877 } >// Six Men Getting Sick } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry\"\n  ]\n}\n                    ", "normal_query": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page\"\n  ]\n}\n                    ", "normal_query": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q742580.\",\n    \"  ?resource wdt:P164 wd:Q19535.\"\n  ]}\n             \t      ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q742580. ?resource wdt:P164 wd:Q19535. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q214789.\",\n    \"  ?resource wdt:P136 wd:Q114148.\",\n    \"  ?resource wdt:P101 wd:Q114148.\"\n  ]}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q214789. ?resource wdt:P136 wd:Q114148. ?resource wdt:P101 wd:Q114148. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman\"\n  ]\n}\n                    ", "normal_query": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\"\n  ]\n}\n           \t        ", "normal_query": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P86 ?film_editor .\",\n    \"  ?film_editor wdt:P21 ?spouse .\",\n    \"  ?spouse wdt:P31 wd:Q5 .\",\n    \"  ?spouse wdt:P170 ?work .\",\n    \"  VALUES ?work { wd:Q46897 wd:Q46898 wd:Q46899 wd:Q46900 wd:Q46901 }\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P86 ?film_editor . ?film_editor wdt:P21 ?spouse . ?spouse wdt:P31 wd:Q5 . ?spouse wdt:P170 ?work . VALUES ?work { wd:Q46897 wd:Q46898 wd:Q46899 wd:Q46900 wd:Q46901 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q20645879 .\",\n    \"  ?item wdt:P136 wd:Q186225 .\",\n    \"  ?item wdt:P179 wd:Q186225 .\",\n    \"  ?item wdt:P179 wd:Q40732 .\",\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q20645879 . ?item wdt:P136 wd:Q186225 . ?item wdt:P179 wd:Q186225 . ?item wdt:P179 wd:Q40732 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P106 wd:Q214798 .\",\n    \"  ?resource wdt:P106 wd:Q188455 .\",\n    \"  ?resource wdt:P136 wd:Q102400 .\",\n    \"  ?resource wdt:P136 wd:Q102401 .\",\n    \"  ?resource wdt:P136 wd:Q102402 .\",\n    \"  ?resource wdt:P136 wd:Q135789 .\",\n    \"  ?resource wdt:P136 wd:Q135790 .\",\n    \"  ?resource wdt:P136 wd:Q135791 .\",\n    \"  ?resource wdt:P136 wd:Q135792 .\",\n    \"  ?resource wdt:P136 wd:Q135793 .\",\n    \"  ?resource wdt:P136 wd:Q135794 .\",\n    \"  ?resource wdt:P136 wd:Q135795 .\",\n    \"  ?resource wdt:P136 wd:Q135796 .\",\n    \"  ?resource wdt:P136 wd:Q135797 .\",\n    \"  ?resource wdt:P136 wd:Q135798 .\",\n    \"  ?resource wdt:P136 wd:Q135799 .\",\n    \"  ?resource wdt:P136 wd:Q135800 .\",\n    \"  ?resource wdt:P136 wd:Q135801 .\",\n    \"  ?resource wdt:P136 wd:Q135802 .\",\n    \"  ?resource wdt:P136 wd:Q135803 .\",\n    \"  ?resource wdt:P136 wd:Q135804 .\",\n    \"  ?resource wdt:P136 wd:Q135805 .\",\n    \"  ?resource wdt:P136 wd:Q135806 .\",\n    \"  ?resource wdt:P136 wd:Q135807 .\",\n    \"  ?resource wdt:P136 wd:Q135808 .\",\n    \"  ?resource wdt:P136 wd:Q135809 .\",\n    \"  ?resource wdt:P136 wd:Q135810 .\",\n    \"  ?resource wdt:P136 wd:Q135811 .\",\n    \"  ?resource wdt:P136 wd:Q135812 .\",\n    \"  ?resource wdt:P136 wd:Q135813 .\",\n    \"  ?resource wdt:P136 wd:Q135814 .\",\n    \"  ?resource wdt:P136 wd:Q135815 .\",\n    \"  ?resource wdt:P136 wd:Q135816 .\",\n    \"  ?resource wdt:P136 wd:Q135817 .\",\n    \"  ?resource wdt:P136 wd:Q135818 .\",\n    \"  ?resource wdt:P136 wd:Q135819 .\",\n    \"  ?resource wdt:P136 wd:Q135820 .\",\n    \"  ?resource wdt:P136 wd:Q135821 .\",\n    \"  ?resource wdt:P136 wd:Q135822 .\",\n    \"  ?resource wdt:P136 wd:Q135823 .\",\n    \"  ?resource wdt:P136 wd:Q135824 .\",\n    \"  ?resource wdt:P136 wd:Q135825 .\",\n    \"  ?resource wdt:P136 wd:Q135826 .\",\n    \"  ?resource wdt:P136 wd:Q135827 .\",\n    \"  ?resource wdt:P136 wd:Q135828 .\",\n    \"  ?resource", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q28794.\",\n    \"  ?item wdt:P106 wd:Q188425.\",\n    \"  ?item wdt:P136 wd:Q11424.\",\n    \"  ?item wdt:P136 wd:Q11425.\",\n    \"    ?item wdt:P136 wd:Q11426.\",\n    \"    ?item wdt:P136 wd:Q11427.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P106 wd:Q28794. ?item wdt:P106 wd:Q188425. ?item wdt:P136 wd:Q11424. ?item wdt:P136 wd:Q11425. ?item wdt:P136 wd:Q11426. ?item wdt:P136 wd:Q11427. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n                    ", "normal_query": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct\"\n  ]\n}\n                    ", "normal_query": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// occupation writer\",\n    \"  ?resource wdt:P106 wd:Q188455 .\", \">// occupation cinematographer\",\n    \"   ?resource wdt:P106 wd:Q33993 .\", \">// occupation film editor\",\n    \"   ?resource wdt:P106 wd:Q27442 .\", \">// occupation director\",\n    \"   ?resource wdt:P106 wd:Q115825 .\", \">// occupation star\",\n    \"   ?resource wdt:P136 wd:Q190318 .\", \">// work Sin City\",\n    \"   ?resource wdt:P136 wd:Q473533 .\", \">// work The Adventures of Sharkboy and Lavagirl in 3- D\",\n    \"   ?resource wdt:P1285 wd:Q209553 .\", \">// executive producer From Dusk till Dawn: The Series\",\n    \"} \"\n  ]\n}\n         \t\t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdt:P106 wd:Q214798 . >// occupation writer ?resource wdt:P106 wd:Q188455 . >// occupation cinematographer ?resource wdt:P106 wd:Q33993 . >// occupation film editor ?resource wdt:P106 wd:Q27442 . >// occupation director ?resource wdt:P106 wd:Q115825 . >// occupation star ?resource wdt:P136 wd:Q190318 . >// work Sin City ?resource wdt:P136 wd:Q473533 . >// work The Adventures of Sharkboy and Lavagirl in 3- D ?resource wdt:P1285 wd:Q209553 . >// executive producer From Dusk till Dawn: The Series } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P106 wd:Q188452.\",\n    \"  ?resource wdt:P106 wd:Q165093.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P136 wd:Q179585.\",\n    \"  ?resource wdt:P136 wd:Q179586.\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q28794. ?resource wdt:P106 wd:Q188452. ?resource wdt:P106 wd:Q165093. ?resource wdt:P136 wd:Q11424. ?resource wdt:P136 wd:Q179585. ?resource wdt:P136 wd:Q179586. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P106 wd:Q28794.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P161 wd:Q104022.\",\n    \"  ?resource wdt:P161 wd:Q53282.\",\n    \"  ?resource wdt:P161 wd:Q7977.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P106 wd:Q28794. ?resource wdt:P136 wd:Q11424. ?resource wdt:P161 wd:Q104022. ?resource wdt:P161 wd:Q53282. ?resource wdt:P161 wd:Q7977. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\\n\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// Writer\\n\",\n    \"  ?resource wdt:P106 wd:Q188455 .\", \">// Cinematographer\\n\",\n    \"  ?resource wdt:P106 wd:Q33994 .\", \">// Director\\n\",\n    \"  ?resource wdt:P130 wd:Q273823 .\", \">// Look at Life\\n\",\n    \"  ?resource wdt:P130 wd:Q56564 .\", \">// Anyone Lived in a Pretty How Town\\n\",\n    \"  ?resource wdt:P130 wd:Q190373 .\", \">// Filmmaker\\n\",\n    \"  ?resource wdt:P2148 wd:Q12115 .\", \">// Star Wars: Episode IV – A New Hope\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n            \t       ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P106 wd:Q214798 . >// Writer ?resource wdt:P106 wd:Q188455 . >// Cinematographer ?resource wdt:P106 wd:Q33994 . >// Director ?resource wdt:P130 wd:Q273823 . >// Look at Life ?resource wdt:P130 wd:Q56564 . >// Anyone Lived in a Pretty How Town ?resource wdt:P130 wd:Q190373 . >// Filmmaker ?resource wdt:P2148 wd:Q12115 . >// Star Wars: Episode IV – A New Hope } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n                    ", "normal_query": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\"\n  ]\n}\n                    ", "normal_query": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Did a film producer write, executive produce, edit, and direct Pietà, Moebius, and Dream?\"\n  ]\n}\n             \t      ", "normal_query": "Did a film producer write, executive produce, edit, and direct Pietà, Moebius, and Dream? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\"\n  ]\n}\n                    ", "normal_query": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen, Jørgen Leth, and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n  ]\n}\n                    ", "normal_query": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"Fate\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"The Confession\\\"@en .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\"\n    ,\n    \"  ?resource wdt:P106 wd:Q28794 .\", \">// Director\"\n    ,\n    \"  ?resource wdt:P136 wd:Q11424 .\", \">// Film director\"\n    ,\n    \"  ?resource wdt:P57 ?work .\",\n    \"  ?work rdfs:label \\\"The Waiting Room\\\"@en .\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P106 wd:Q28794 . >// Director ?resource wdt:P136 wd:Q11424 . >// Film director ?resource wdt:P57 ?work . ?work rdfs:label \"Fate\"@en . } UNION SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P106 wd:Q28794 . >// Director ?resource wdt:P136 wd:Q11424 . >// Film director ?resource wdt:P57 ?work . ?work rdfs:label \"The Confession\"@en . } UNION SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P106 wd:Q28794 . >// Director ?resource wdt:P136 wd:Q11424 . >// Film director ?resource wdt:P57 ?work . ?work rdfs:label \"The Waiting Room\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q7278549.\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q7278549. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P1983 ?executiveProducer .\",\n    \"  ?film wdt:P57 ?director .\",\n    \"wrt:P57 ?writer .\",\n    \"  VALUES (?executiveProducer ?director ?writer) { (wd:Q20648 wd:Q20648 wd:Q20648) }\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P1983 ?executiveProducer . ?film wdt:P57 ?director . wrt:P57 ?writer . VALUES (?executiveProducer ?director ?writer) { (wd:Q20648 wd:Q20648 wd:Q20648) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà\"\n  ]\n}\n             ", "normal_query": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"\n  ]\n}\n                    ", "normal_query": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n  ]\n}\n   \t\t\t        \t\t\t\t\t\t", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P108 wd:Q2354967 .\", \">// Plessey Electronics Limited (wd:Q2354967) is an employer of the resource.\",\n    \"  ?resource wdt:P108 wd:Q121327 .\", \">// CERN (wd:Q121327) is another employer of the resource.\",\n    \"  ?resource wdt:P108 wd:Q549643 .\", \">// School of Electronics and Computer Science, University of Southampton (wd:Q549643) is another employer of the resource.\",\n    \"  ?resource wdt:P39 wd:Q278585 .\", \">// World Wide Web Consortium (W3C) (wd:Q278585) is an organization that the resource is a member of, specifically as a founder or employee.\",\n    \"  ?resource wdt:P39 wd:Q164058 .\", \">// Open Data Institute (ODI) (wd:Q164058) is another organization where the resource is a member, again as a founder or employee.\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q2354967 . >// Plessey Electronics Limited (wd:Q2354967) is an employer of the resource. ?resource wdt:P108 wd:Q121327 . >// CERN (wd:Q121327) is another employer of the resource. ?resource wdt:P108 wd:Q549643 . >// School of Electronics and Computer Science, University of Southampton (wd:Q549643) is another employer of the resource. ?resource wdt:P39 wd:Q278585 . >// World Wide Web Consortium (W3C) (wd:Q278585) is an organization that the resource is a member of, specifically as a founder or employee. ?resource wdt:P39 wd:Q164058 . >// Open Data Institute (ODI) (wd:Q164058) is another organization where the resource is a member, again as a founder or employee. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\\n\",\n    \"  ?resource wdt:P106 wd:Q214798 .\", \">// Writer\\n\",\n    \"    ?resource wdt:P106 wd:Q188455 .\", \">// Cinematographer\\n\",\n    \"    ?resource wdt:P106 wd:Q33993 .\", \">// Star (actor)\\n\",\n    \"    ?resource wdt:P106 wd:Q207550 .\", \">// Composer\\n\",\n    \"    ?resource wdt:P136 wd:Q48044 .\", \">// Planet Terror\\n\",\n    \"    ?resource wdt:P136 wd:Q290823 .\", \">// Sin City: A Dame to Kill For\\n\",\n    \"    ?resource wdt:P136 wd:Q57023 .\", \">// Machete\\n\",\n    \"    ?resource wdt:P136 wd:Q48044 .\", \">// Sin City\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n            \t       ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P106 wd:Q214798 . >// Writer ?resource wdt:P106 wd:Q188455 . >// Cinematographer ?resource wdt:P106 wd:Q33993 . >// Star (actor) ?resource wdt:P106 wd:Q207550 . >// Composer ?resource wdt:P136 wd:Q48044 . >// Planet Terror ?resource wdt:P136 wd:Q290823 . >// Sin City: A Dame to Kill For ?resource wdt:P136 wd:Q57023 . >// Machete ?resource wdt:P136 wd:Q48044 . >// Sin City } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Did Pietà's editor and executive producer direct, edit, write, or executive produce Dream and Moebius?\"\n  ]\n}\n           \t   \t   \t", "normal_query": "Did Pietà's editor and executive producer direct, edit, write, or executive produce Dream and Moebius? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P86 wdt:P279* wd:Q40201.\",\n    \"  ?resource wdt:P136 wd:Q11424.\",\n    \"  ?resource wdt:P101 wd:Q11424.\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P86 wdt:P279* wd:Q40201. ?resource wdt:P136 wd:Q11424. ?resource wdt:P101 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P921 ?work.\",\n    \"  ?work wdt:P179 wd:Q460823.\",\n    \"  ?work wdt:P179 wd:Q460824.\"\n  ]}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P921 ?work. ?work wdt:P179 wd:Q460823. ?work wdt:P179 wd:Q460824. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration  , and University of California, San Diego\"\n  ]\n}\n                    ", "normal_query": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3- D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer\"\n  ]\n}\n            \t       ", "normal_query": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3- D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Howl's Moving Castle's executive producer and writer employed by Nibariki, Ghibli Museum, and TMS Entertainment and employed by Shin- e i Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?\"\n  ]\n}\n                    ", "normal_query": "Was Howl's Moving Castle's executive producer and writer employed by Nibariki, Ghibli Museum, and TMS Entertainment and employed by Shin- e i Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?writer WHERE {\",\n    \"  ?work wdt:P164 ?cinematographer ;\",\n    \"         wdt:P57 ?writer .\",\n    \"  VALUES ?work { wd:Q203897 wd:Q203898 wd:Q203899 wd:Q203896 }\",\n    \"}\",\n    \"\"\n  ]\n}\n                    ", "normal_query": "SELECT ?cinematographer ?writer WHERE { ?work wdt:P164 ?cinematographer ; wdt:P57 ?writer . VALUES ?work { wd:Q203897 wd:Q203898 wd:Q203899 wd:Q203896 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  ?work wdt:P136 wd:Q209548.\",\n    \"  ?work wdt:P179 wd:Q209548.\",\n    \"  ?work wdt:P179 wd:Q209548.\",\n    \"The query is incomplete and incorrect. It doesn't properly link the works to the person or use the correct properties for cinematographer, director, and editor roles.\"\n]\n}\n\t        \t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { ?work wdt:P136 wd:Q209548. ?work wdt:P179 wd:Q209548. ?work wdt:P179 wd:Q209548. The query is incomplete and incorrect. It doesn't properly link the works to the person or use the correct properties for cinematographer, director, and editor roles. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 ;\", \">// instance of human\\n\",\n    \"             wdt:P740 ?spouse .\", \">// spouse\\n\",\n    \"  VALUES ?spouse { wd:Q268925 wd:Q104005 }\", \">// Lita Grey and Mildred Harris\\n\",\n    \"  ?resource wdt:P136/wd:P179 ?work .\", \">// director or editor of work\\n\",\n    \"  VALUES ?work { wd:Q82707 wd:Q42357 wd:Q104005 wd:Q104005 }\" , \">// The Kid, The Floorwalker, A Woman, Modern Times\\n\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; >// instance of human wdt:P740 ?spouse . >// spouse VALUES ?spouse { wd:Q268925 wd:Q104005 } >// Lita Grey and Mildred Harris ?resource wdt:P136/wd:P179 ?work . >// director or editor of work VALUES ?work { wd:Q82707 wd:Q42357 wd:Q104005 wd:Q104005 } >// The Kid, The Floorwalker, A Woman, Modern Times } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by, edited by, and directed by\"\n  ]\n}\n   \t\t\t        \t\t\t\t\t\t", "normal_query": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by, edited by, and directed by LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q5708246 ;\", \">// Grand Canyon (film) instance of film\",\n    \"  wdt:P136 ?distributor .\", \">// distributor\"\n    ,\n    \"  ?work wdt:P136 ?producer .\", \">// producer\"\n    ,\n    \"  ?distributor wdt:P279* wd:Q480522 .\" , \">// instance of company\"\n    ,\n    \"  ?producer wdt:P279* wd:Q480522 .\" ,\n    \"} LIMIT 100\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor Producer WHERE { ?work wdt:P31 wd:Q5708246 ; >// Grand Canyon (film) instance of film wdt:P136 ?distributor . >// distributor ?work wdt:P136 ?producer . >// producer ?distributor wdt:P279* wd:Q480522 . >// instance of company ?producer wdt:P279* wd:Q480522 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5.\",\n    \"  ?item wdt:P106 wd:Q214879.\",\n    \"  ?item wdt:P136 wd:Q186228.\",\n    \"  ?item wdt:P101 wd:Q186228.\",\n    \"  ?item wdt:P57 wd:Q186228.\",\n    \"  ?item wdt:P140 wd:Q186228.\",\n    \"  ?item wdt:P130 wd:Q186228.\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P106 wd:Q214879. ?item wdt:P136 wd:Q186228. ?item wdt:P101 wd:Q186228. ?item wdt:P57 wd:Q186228. ?item wdt:P140 wd:Q186228. ?item wdt:P130 wd:Q186228. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5.\",\n    \"  ?resource wdt:P865 wd:Q207493.\",\n    \"  ?resource wdt:P865 wd:Q207494.\"\n    ,\n    \"}\"\n  ]\n}\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P865 wd:Q207493. ?resource wdt:P865 wd:Q207494. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"  ?resource wdt:P40 wd:Q269875 .\", \">// married to Oona O'Neill\",\n    \"  ?resource wdt:P40 wd:Q104655 .\", \">// married to Lita Grey\",\n    \"  ?resource wdt:P40 wd:Q134353 .\", \">// married to Mildred Harris\",\n    \"  ?resource wdt:P737 wd:Q28958 .\", \">// influenced Federico Fellini\",\n    \"  ?resource wdt:P737 wd:Q160315 .\", \">// influenced Marcel Marceau\",\n    \"  ?resource wdt:P737 wd:Q44023 .\", \">// influenced Harold Lloyd\",\n    \"  ?resource wdt:P749 wd:Q80744 .\", \">// founded United Artists Corporation\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdt:P40 wd:Q269875 . >// married to Oona O'Neill ?resource wdt:P40 wd:Q104655 . >// married to Lita Grey ?resource wdt:P40 wd:Q134353 . >// married to Mildred Harris ?resource wdt:P737 wd:Q28958 . >// influenced Federico Fellini ?resource wdt:P737 wd:Q160315 . >// influenced Marcel Marceau ?resource wdt:P737 wd:Q44023 . >// influenced Harold Lloyd ?resource wdt:P749 wd:Q80744 . >// founded United Artists Corporation } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  ?work wdt:P57 ?director ;\",\n    \"         wdt:P164 ?star ;\",\n    \"         wdt:P58 ?writer .\",\n    \"  VALUES (?work) { (wd:Q203977) (wd:Q203978) (wd:Q203979) }\",\n    \"}\",\n    \"\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?director ?star ?writer WHERE { ?work wdt:P57 ?director ; wdt:P164 ?star ; wdt:P58 ?writer . VALUES (?work) { (wd:Q203977) (wd:Q203978) (wd:Q203979) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P136 ?genre .\",\n    \"  ?work wdt:P57 ?distributor .\",\n    \"  ?work wdt:P2094 ?producer .\",\n    \"  ?company wdt:P127 ?work .\",\n    \"  ?company wdt:P1061 ?amazon_cloudfront .\",\n    \"  ?company wdt:P1061 ?amazon_kindle .\",\n    \"  ?company wdt:P1061 ?abebooks .\",\n    \"  ?vanguard_group wdt:P279 ?company .\",\n    \"  ?blackrock wdt:P279 ?company .\"\n  ] } ", "normal_query": "SELECT ?distributor Producer WHERE { ?work wdt:P136 ?genre . ?work wdt:P57 ?distributor . ?work wdt:P2094 ?producer . ?company wdt:P127 ?work . ?company wdt:P1061 ?amazon_cloudfront . ?company wdt:P1061 ?amazon_kindle . ?company wdt:P1061 ?abebooks . ?vanguard_group wdt:P279 ?company . ?blackrock wdt:P279 ?company . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu\"\n  ]\n}\n                    ", "normal_query": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism, Lucasfilm, and LucasArts were founded by Mellody Hobson's spouse\"\n  ]\n}\n           \t        ", "normal_query": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism, Lucasfilm, and LucasArts were founded by Mellody Hobson's spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness\"\n  ]\n}\n           \t        ", "normal_query": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lanning\"\n  ]\n}\n                    ", "normal_query": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lanning LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by, executive produced by, edited by, and written by Nuri Bilge Ceylan trilogy's director\"\n  ]\n}\n            \t       ", "normal_query": "Was a cinematographer that Uzak and Clouds of May were directed by, executive produced by, edited by, and written by Nuri Bilge Ceylan trilogy's director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \">// Human being\",\n    \"  ?resource wdt:P86 wdt:P2749 .\", \">// Director of Vagabond\",\n    \"  ?resource wdt:P86 wdt:P2750 .\", \">// Director of The Gleaners and I\",\n    \"  ?resource wdt:P86 wdt:P2751 .\", \">// Director of Varda by Agnès\",\n    \"  ?resource wdt:P403 wd:Q19850 .\", \">// Married to Jacques Demy\",\n    \"  ?resource wdt:P106 wd:Q188452 .\", \">// Influence on Jacques Demy\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Human being ?resource wdt:P86 wdt:P2749 . >// Director of Vagabond ?resource wdt:P86 wdt:P2750 . >// Director of The Gleaners and I ?resource wdt:P86 wdt:P2751 . >// Director of Varda by Agnès ?resource wdt:P403 wd:Q19850 . >// Married to Jacques Demy ?resource wdt:P106 wd:Q188452 . >// Influence on Jacques Demy } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?distributor Producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q5708246 ;\", \">// Grand Canyon (film) instance of film\",\n    \"  wdt:P190 ?distributor .\", \">// distributor\"\n    ,\n    \"  ?work wdt:P190 ?producer .\", \">// producer\"\n    ,\n    \"  ?distributor wdt:P279* wd:Q483563 .\" , \">// instance of investment management company\"\n    ,\n    \"  ?producer wdt:P279* wd:Q483563 .\" ,\n    \"} LIMIT 100\"\n  ]\n}\n                    ", "normal_query": "SELECT ?distributor Producer WHERE { ?work wdt:P31 wd:Q5708246 ; >// Grand Canyon (film) instance of film wdt:P190 ?distributor . >// distributor ?work wdt:P190 ?producer . >// producer ?distributor wdt:P279* wd:Q483563 . >// instance of investment management company ?producer wdt:P279* wd:Q483563 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424.\",\n    \"  ?film wdt:P57 ?director.\",\n    \"  ?film wdt:P162 ?producer.\",\n    \"  ?film wdt:P98 ?writer.\",\n    \"  ?film wdt:P155 ?actor.\",\n    \"  ?film wdt:P154 ?actor2.\",\n    \"  wd:Q70332 wdt:P101 wd:Q11424.\",\n    \"  wd:Q86987 wdt:P101 wd:Q11424.\",\n    \"  wd:Q45203 wdt:P101 wd:Q11424.\",\n    \"  wd:Q102755 wdt:P101 wd:Q11424.\",\n    \"  wd:Q168955 wdt:P101 wd:Q11424.\"\n  ]\n}\n                    ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 ?director. ?film wdt:P162 ?producer. ?film wdt:P98 ?writer. ?film wdt:P155 ?actor. ?film wdt:P154 ?actor2. wd:Q70332 wdt:P101 wd:Q11424. wd:Q86987 wdt:P101 wd:Q11424. wd:Q45203 wdt:P101 wd:Q11424. wd:Q102755 wdt:P101 wd:Q11424. wd:Q168955 wdt:P101 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"SELECT ?item WHERE {\"\n      , \"?item wdt:P31 wd:Q5 .\"\n      , \"?item wdt:P106/wdt:P279* wd:Q28389 .\"\n      , \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 }\"\n    , \"} LIMIT 1\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . ?item wdt:P106/wdt:P279* wd:Q28389 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\",\n    \"  FILTER CONTAINS(LCASE(?occupation), 'composer') .\",\n    \"  ?item wdt:P1477 ?name .\",\n    \"  FILTER CONTAINS(LCASE(?name), 'bob dylan') .\",\n    \"} LIMIT 10\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER CONTAINS(LCASE(?occupation), 'composer') . ?item wdt:P1477 ?name . FILTER CONTAINS(LCASE(?name), 'bob dylan') . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P112 wd:Q5 . }\" ]}", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"SELECT ?x WHERE { ?x kg:0709 'founded by' . }\"] } ", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?x WHERE { ?x wdt:P112 'founded by' . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { wd:Q339542 wdt:P861 ?item . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q339542 wdt:P861 ?item . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\"\n]\n}", "normal_query": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P279* wd:Q12345 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P279* wd:Q12345 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { wd:Q7121 wdt:P22 ?item . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q7121 wdt:P22 ?item . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P50 wd:Q42 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q42 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1086 wd:Q40.\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1086 wd:Q40. FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?item\"\n    , \"WHERE {\"\n        , \"?item wdt:P50 ?author .\"\n        , \"FILTER ( ?author = wd:Q60316 ) .\"\n        , \"FILTER ( CONTAINS(STR(?item), 'The Hobbit') ).\"\n        , \"FILTER ( CONTAINS(STR(?item), 'An Unexpected Journey' ) ).\"\n    , \"} LIMIT 1\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 ?author . FILTER ( ?author = wd:Q60316 ) . FILTER ( CONTAINS(STR(?item), 'The Hobbit') ). FILTER ( CONTAINS(STR(?item), 'An Unexpected Journey' ) ). } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?item WHERE {\"\n        , \"?item wdt:P162 [wdt:P577 'A Good Day to Die Hard'] .\"\n        , \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q24257599 }\"\n    , \"}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 [wdt:P577 'A Good Day to Die Hard'] . FILTER NOT EXISTS { ?item wdt:P31 wd:Q24257599 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5 .\", \"classify as human\",\n    \"  ?item rdfs:label 'White Diamond: A Personal Portrait of Kylie Minogue's costume designer'@en .\",\n    \"  ?item wdt:P106 wd:Q65926398 .\", \"is a composer\"\n    ]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . classify as human ?item rdfs:label 'White Diamond: A Personal Portrait of Kylie Minogue's costume designer'@en . ?item wdt:P106 wd:Q65926398 . is a composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { wd:Q658566 p:P31 [ps:P31 wd:Q2526255]. }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q658566 p:P31 [ps:P31 wd:Q2526255]. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P26 wd:Q154.\",\n    \"  ?item wdt:P106 wd:Q169470.\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P26 wd:Q154. ?item wdt:P106 wd:Q169470. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P577 1999.\",\n    \"  ?item wdt:P86 wd:Q36834.\"\n    ]}\n    \t \t\t\t    \t\t\t \t  ", "normal_query": "SELECT ?item WHERE { ?item wdt:P577 1999. ?item wdt:P86 wd:Q36834. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?composer WHERE {\"\n        ,\"?work wdt:P1476 'Al Compás de tu Mentira'.\"\n        ,\"?work wdt:P86 ?composer.\"\n        ,\"?composer wdt:P106 ?profession.\"\n        ,\"FILTER NOT EXISTS { ?composer wdt:P31 wd:Q5 } .\"\n    ,\"}\"\n]\n}\n", "normal_query": "SELECT ?composer WHERE { ?work wdt:P1476 'Al Compás de tu Mentira'. ?work wdt:P86 ?composer. ?composer wdt:P106 ?profession. FILTER NOT EXISTS { ?composer wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q2044 wdt:P86 ?composer .\", \"\",\n    \"  ?composer wdt:P106 ?occupation .\",\n    \"  FILTER( ?occupation = wd:Q28389 )\",\n    \"} LIMIT 1\"\n]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q2044 wdt:P86 ?composer . ?composer wdt:P106 ?occupation . FILTER( ?occupation = wd:Q28389 ) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q788472 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q788472 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P179 wd:Q1136763.\",\n    \"  ?item wdt:P162 wd:Q380153.\"\n    ,\n    \"} LIMIT 1\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P179 wd:Q1136763. ?item wdt:P162 wd:Q380153. } LIMIT 1", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"ASK WHERE { wd:Q41171342 wdt:P112  ?founder . }\"\n]\n}", "normal_query": "ASK WHERE { wd:Q41171342 wdt:P112 ?founder . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q38111 wdt:P3373 ?relative.\",\n    \"  FILTER(wdt:P31(?relative) = wd:Q5).\", \"\",\n    \"  ?relative wdt:P108 ?employment.\", \"\",\n    \"  FILTER(wdt:P31(?employment) = wd:Q81062446).\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q38111 wdt:P3373 ?relative. FILTER(wdt:P31(?relative) = wd:Q5). ?relative wdt:P108 ?employment. FILTER(wdt:P31(?employment) = wd:Q81062446). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer WHERE {\",\n    \"  ?item wdt:P31 wd:Q5 .\", \"# Item is a human\",\n    \"  ?item wdt:P106 wd:Q937857 .\", \"# Occupation is rapper\",\n    \"  ?item wdt:P1086 wd:Q760363 .\", \"# Also known as Dr. Dre\",\n    \"  ?employer wdt:P1087 ?item .\", \"# Employer of Dr. Dre\",\n    \"  ?game wdt:P31 wd:Q7889 .\", \"# Game is a video game\",\n    \"  ?game wdt:P1476 \\\"Animal Crossing: Pocket Camp\\\"@en .\", \"# Title is Animal Crossing: Pocket Camp\",\n    \"  ?employer wdt:P750 ?game .\", \"# Distributor of the game\"\n    ]}\n             \t\t\t\t", "normal_query": "SELECT ?employer WHERE { ?item wdt:P31 wd:Q5 . ?item wdt:P106 wd:Q937857 . ?item wdt:P1086 wd:Q760363 . ?employer wdt:P1087 ?item . ?game wdt:P31 wd:Q7889 . ?game wdt:P1476 \"Animal Crossing: Pocket Camp\"@en . ?employer wdt:P750 ?game . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?employer WHERE { \"\n    ,\n    \"  ?item wdt:P40 wd:Q76 . \"\n    ,\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . \"\n   ,\n    \"  ?employer wdt:P108 ?item . \"\n   ,\n    \"} \"\n]\n}", "normal_query": "SELECT ?employer WHERE { ?item wdt:P40 wd:Q76 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?employer wdt:P108 ?item . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\", \"# Occupation is costume designer\",\n    \"  ?item wdt:P26 ?spouse .      \", \"# Spouse of the person\",\n    \"  ?spouse wdt:P40 ?child .     \", \"# Child of spouse (sibling)\",\n    \"  FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 })\", \"# Ensure it's not a human\"\n    ,\n    \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . ?item wdt:P26 ?spouse . ?spouse wdt:P40 ?child . FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?item WHERE {\"\n        ,\"?item wdt:P106 ?occupation .\"\n        ,\"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\"\n        ,\"?spouse wdt:P106 ?spouseOccupation .\"\n        ,\"?spouse wdt:P26 ?item .\"\n        ,\"?founder wdt:P112 ?clubjenna .\"\n        ,\"?founder wdt:P106 ?founderOccupation .\"\n    ,\"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?spouse wdt:P106 ?spouseOccupation . ?spouse wdt:P26 ?item . ?founder wdt:P112 ?clubjenna . ?founder wdt:P106 ?founderOccupation . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P50 wd:Q1339 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q1339 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P50 wd:Q12345 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q12345 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?item WHERE {\"\n        , \"?item wdt:P106 ?occupation .\"\n        , \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\"\n        , \"FILTER(NOT EXISTS { ?item wdt:P27 wd:Q30 }) .\"\n        , \"FILTER(NOT EXISTS { ?item wdt:P27 wd:Q33 }) .\"\n    , \"} LIMIT 100\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . FILTER(NOT EXISTS { ?item wdt:P27 wd:Q30 }) . FILTER(NOT EXISTS { ?item wdt:P27 wd:Q33 }) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    ,\n    \"SELECT ?item WHERE {\"\n      , \"?item wdt:P26 wd:Q76.\"\n      , \"?item wdt:P106 wd:Q2526255.\"\n    , \"} LIMIT 100\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P26 wd:Q76. ?item wdt:P106 wd:Q2526255. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P361* wd:Q16 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P361* wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n\"query\": [\n  \"SELECT ?x WHERE {\",\n  \"?x kg:8057 kg:3288 .\",\n  \"FILTER NOT EXISTS { ?x kg:7565 ?y . }\"\n  ,\n  \"}\"\n]\n}", "normal_query": "SELECT ?x WHERE { ?x wdt:P112 wd:Q16 . FILTER NOT EXISTS { ?x wdt:P108 ?y . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P50 wd:Q17425369 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q17425369 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P162 wd:Q1744 .\", \"\",\n    \"  ?item wdt:P58 wd:Q1744 .\"\n    ,\n\"}\" ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 wd:Q1744 . ?item wdt:P58 wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and produced by Madonna", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 ?costumeDesigner .\", \"\",\n    \"  FILTER NOT EXISTS { ?item wdt:P577 . }\",\n    \"}\",\n    \"LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 ?costumeDesigner . FILTER NOT EXISTS { ?item wdt:P577 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"SELECT ?sibling WHERE {\"\n      ,\"?costumeDesigner wdt:P106 ?occupation .\"\n      ,\"FILTER CONTAINS(LCASE(?occupation), LCASE(\\\"fashion designer\\\")) .\"\n      ,\"?costumeDesigner wdt:P3373 ?sibling .\"\n      ,\"?sibling wdt:P26 ?spouse .\"\n      ,\"FILTER (?spouse = wd:Q29159) .\"\n    ,\"}\"\n  ]\n}\n", "normal_query": "SELECT ?sibling WHERE { ?costumeDesigner wdt:P106 ?occupation . FILTER CONTAINS(LCASE(?occupation), LCASE(\"fashion designer\")) . ?costumeDesigner wdt:P3373 ?sibling . ?sibling wdt:P26 ?spouse . FILTER (?spouse = wd:Q29159) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { wd:Q504274 wdt:P1086 ?employer . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q504274 wdt:P1086 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?employer WHERE { wd:Q102958589 p:P108:employmentHistory ?position . ?position ps:P108:employer ?employer . }\"\n]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q102958589 p:P108:employmentHistory ?position . ?position ps:P108:employer ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"SELECT ?item WHERE {\"\n    , \"?item wdt:P577 'The Magic Flute'.\"\n    , \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P577 'The Magic Flute'. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    , \"SELECT ?item WHERE {\"\n        , \"?item wdt:P106 ?occupation .\"\n        , \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\"\n        , \"?item wdt:P26 ?spouse .\"\n        , \"FILTER (EXISTS { ?spouse wdt:P27 wd:Q30 }) .\"\n        , \"?spouse wdt:P106 ?spouseOccupation .\"\n        , \"FILTER (EXISTS { ?spouse wdt:P734 ?spouseLabel }) .\"\n        , \"FILTER (EXISTS { ?item wdt:P734 ?itemLabel }) .\"\n    , \"} LIMIT 1\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?item wdt:P26 ?spouse . FILTER (EXISTS { ?spouse wdt:P27 wd:Q30 }) . ?spouse wdt:P106 ?spouseOccupation . FILTER (EXISTS { ?spouse wdt:P734 ?spouseLabel }) . FILTER (EXISTS { ?item wdt:P734 ?itemLabel }) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?spouse ?sibling WHERE {\",\n    \"  wd:Q34243 wdt:P26 ?spouse ;\",\n    \"                 wdt:P3378 ?sibling .\",\n    \"  FILTER NOT EXISTS { wd:Q34243 wdt:P26 ?spouse }\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q34243 wdt:P26 ?spouse ; wdt:P3378 ?sibling . FILTER NOT EXISTS { wd:Q34243 wdt:P26 ?spouse } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P272 wd:Q34 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P272 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P112 ?founder .\", \"pathetic attempt, but I'll let it pass\"\n    ,\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\",\n    \"LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P112 ?founder . pathetic attempt, but I'll let it pass FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a German sibling of Dieter Hoeneß an employee of FC Bayern Munich?\"\n]\n}\n", "normal_query": "Was a German sibling of Dieter Hoeneß an employee of FC Bayern Munich? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { wd:Q76045 wdt:P272 ?distributor ; p:P161 ?producer . FILTER NOT EXISTS { ?distributor wdt:P31 wd:Q483394 . } FILTER NOT EXISTS { ?producer wdt:P31 wd:Q483394 . } }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q76045 wdt:P272 ?distributor ; p:P161 ?producer . FILTER NOT EXISTS { ?distributor wdt:P31 wd:Q483394 . } FILTER NOT EXISTS { ?producer wdt:P31 wd:Q483394 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P50 wd:Q234045 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q234045 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1128 wd:Q12345678.\",\n    \"  ?item wdt:P26 wd:Q12345679.\"\n    ,\n    \"}\",\n    \"LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1128 wd:Q12345678. ?item wdt:P26 wd:Q12345679. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P50 ?author .\", \"\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q21061 } .\",\n    \"  ?item wdt:P577 ?pubdate .\",\n    \"  FILTER(YEAR(?pubdate) >= 1980)\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 ?author . FILTER NOT EXISTS { ?item wdt:P31 wd:Q21061 } . ?item wdt:P577 ?pubdate . FILTER(YEAR(?pubdate) >= 1980) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P862 | wdt:P161 | wdt:P577 'Steven Spielberg'.\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P862 | wdt:P161 | wdt:P577 'Steven Spielberg'. FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P161 wd:Q134238 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 wd:Q134238 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P22/wdt:P26 ?parent .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 }\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P22/wdt:P26 ?parent . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P106 ?occupation . ?item wdt:P26 wd:Q12345678 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . ?item wdt:P26 wd:Q12345678 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q7889 . ?item wdt:P577 'Between Love and Hatred'@es . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q7889 . ?item wdt:P577 'Between Love and Hatred'@es . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P1128 wd:Q8514 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1128 wd:Q8514 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P272 ?productionCompany .\",\n    \"  ?productionCompany wdt:P1128 ?founder .\",\n    \"  FILTER( EXISTS { ?item wdt:P1476 'Barbary Coast'@en. } )\",\n    \"  FILTER( ?founder = wd:Q234979   ||  ?founder = wd:Q172781 )\",\n    \"}\"]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P272 ?productionCompany . ?productionCompany wdt:P1128 ?founder . FILTER( EXISTS { ?item wdt:P1476 'Barbary Coast'@en. } ) FILTER( ?founder = wd:Q234979 || ?founder = wd:Q172781 ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"  ?actor wdt:P31 wd:Q5 .\", \"\",\n    \"  FILTER NOT EXISTS {\",\n    \"    ?actor wdt:P106 ?occupation .\",\n    \"    FILTER NOT EXISTS {\",\n    \"      ?occupation wdt:P279* wd:Q339999 .\"\n    ,\n    \"    }\",\n    \"  }\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . FILTER NOT EXISTS { ?actor wdt:P106 ?occupation . FILTER NOT EXISTS { ?occupation wdt:P279* wd:Q339999 . } } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P50 ?author .\",\n    \"FILTER( ?author = wd:Q216015 ) .\", \"\",\n    \"} \"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 ?author . FILTER( ?author = wd:Q216015 ) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1610 wd:Q102416.\",\n    \"  ?item wdt:P106 wd:Q28389.\",\n    \"  ?item wdt:P27 wd:Q29.\",\n    \"  FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 })\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1610 wd:Q102416. ?item wdt:P106 wd:Q28389. ?item wdt:P27 wd:Q29. FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\", \"](https<think>)Okay, so I need to translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using Wikidata. Hmm, let me break this down step by step. First, understanding what each part means is crucial. The question is asking if there exists a composer who is both Swedish and the female spouse of someone named Mattias Järvinen Palme. So I need to find such a person in Wikidata and return only their resource (i.e., their Q number). Let me think about how to structure this query. I'll probably need several triples: one for being a composer, another for being Swedish, another for being female, and another for being the spouse of Mattias Järvinen Palme. Wait, but in Wikidata, properties are structured with specific predicates. So, for occupation as a composer, that's P106. Nationality is P27, so Sweden would be Q34. Gender is P21, where female is Q6581072. Spouse is P26, and I need to find Mattias Järvinen Palme's item. But wait, do I know his Wikidata ID? Maybe not off the top of my head, but in SPARQL, I can use a label filter. So something like ?spouse wdt:P26 wd:Q... but since I don't have the exact Q number, perhaps using FILTER(CONTAINS(...)) on the spouse's name. Alternatively, maybe it's better to first find Mattias Järvinen Palme and then get his spouse. Wait, no, because the question is about the composer being the spouse. So the structure should be: ?item is a composer (P106), Swedish (P27=Q34), female (P21=Q6581072), and spouse of Mattias Järvinen Palme (?item wdt:P26 ?spouse, and ?spouse has label \",\", but wait, no. Actually, the spouse relationship should be from the composer to Mattias. So maybe it's better to structure it as ?item wdt:P26 wd:Mattias_Järvinen_Palme. But I don't know his exact WD ID. Alternatively, use a filter on the label. So perhaps something like ?spouse wdt:P26 ?item and ?spouse has the name Mattias Järvinen Palme. Wait, no, that would imply Mattias is the spouse of the composer, which is correct. But I'm getting confused here. Let me try to outline it again: The subject is a female Swedish composer who is married to Mattias Järvinen Palme. So in triples: ?item wdt:P106 wd:Q673620 (composer), ?item wdt:P27 wd:Q34 (Sweden), ?item wdt:P21 wd:Q6581072 (female), and ?item wdt:P26 ?spouse, where ?spouse has the name Mattias Järvinen Palme. But how to represent that in SPARQL? Maybe using a FILTER on the spouse's label. So something like: ?item wdt:P26 ?spouse . FILTER(CONTAINS(str(?spouse), \",\")) but wait, no, I need to check if the spouse's name is Mattias Järvinen Palme. Alternatively, use rdfs:label. But in Wikidata, labels are in specific languages unless you specify. So perhaps using a filter like LANGMATCHES or something else. Wait, maybe it's better to structure it as ?item wdt:P26 wd:Q... but since I don't know the Q number for Mattias Järvinen Palme, perhaps I can find it via his name. Alternatively, use a SERVICE with around bd:like, but that might complicate things. Maybe another approach is to first get all spouses of Mattias and then check if any are female Swedish composers. But since the query needs to return only resources (i.e., items), maybe it's better to structure it as ?item being the composer, Swedish, female, and married to someone whose name is Mattias Järvinen Palme. So putting it all together: SELECT ?item WHERE { ?item wdt:P106 wd:Q673620 ; # occupation composer wdt:P27 wd:Q34 ; # nationality Sweden p:P21 wd:Q6581072 ; # gender female p:P26 ?spouse . FILTER(CONTAINS(str(?spouse), \",\")) } Wait, no, that's not correct. The spouse should have the name Mattias Järvinen Palme. So perhaps using a filter on the spouse's label in", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?\"\n]\n}\n", "normal_query": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P40 wd:Q742.\",\n    \"  ?item wdt:P26 wd:Q15617814.\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P40 wd:Q742. ?item wdt:P26 wd:Q15617814. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P50 wd:Q15647308, wd:Q1291190, wd:Q11879370 .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 wd:Q15647308, wd:Q1291190, wd:Q11879370 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John?\"\n]\n}\n", "normal_query": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\"\n]\n}", "normal_query": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P86 wd:Q1939355, wd:Q2193388, wd:Q845099 .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P86 wd:Q1939355, wd:Q2193388, wd:Q845099 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5 .\", \"# Item is a human\",\n    \"  ?item wdt:P3373 wd:Q11947308 .\", \"# Sibling of Ptolemy X Alexander I\",\n    \"  ?item wdt:P40 wd:Q11947308 .\", \"# Spouse of Ptolemy IX Lathyros\",\n    \"  FILTER( ?item != wd:Q11947308 ) .\", \"# Ensure the item is not Ptolemy X himself\"\n    ,\n    \"}\"]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . ?item wdt:P3373 wd:Q11947308 . ?item wdt:P40 wd:Q11947308 . FILTER( ?item != wd:Q11947308 ) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P577 '2008-01-20' .\", \"\",\n    \"  ?item wdt:P31 wd:Q11424 .\", \"\",\n    \"  ?item wdt:P1366 'Vince Gilligan', 'George Mastras' .\", \"\",\n    \"  ?item wdt:P162 'Vince Gilligan', 'George Mastras' .\", \"\",\n    \"  ?item wdt:P1700 'Vince Gilligan', 'George Mastras' .\", \"\", \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P577 '2008-01-20' . ?item wdt:P31 wd:Q11424 . ?item wdt:P1366 'Vince Gilligan', 'George Mastras' . ?item wdt:P162 'Vince Gilligan', 'George Mastras' . ?item wdt:P1700 'Vince Gilligan', 'George Mastras' . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 | wdt:P162 | wdt:P577 .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 | wdt:P162 | wdt:P577 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wd:Q1060717, wd:Q1060724, wd:Q1060730, wd:Q1060732]. }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wd:Q1060717, wd:Q1060724, wd:Q1060730, wd:Q1060732]. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"FILTER( IN( ?director, wd:Q1297159, wd:Q1628035, wd:Q835086, wd:Q294635 ) ).\"\n    ,\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?director . FILTER( IN( ?director, wd:Q1297159, wd:Q1628035, wd:Q835086, wd:Q294635 ) ). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?director. FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } . FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } . FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } . FILTER NOT EXISTS { ?item wdt:P57 [] FILTER (NOT (?director = wd:Q590335)) } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  ?item wdt:P162 ?producer1, ?producer2, ?producer3, ?producer4.\",\n    \"  FILTER( ?director = wd:Q131356 ) .\",\n    \"  FILTER( ?producer1 = wd:Q207433 ; ?producer2 = wd:Q210501 ; ?producer3 = wd:Q151892 ; ?producer4 = wd:Q159809 ).\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P57 ?director. ?item wdt:P162 ?producer1, ?producer2, ?producer3, ?producer4. FILTER( ?director = wd:Q131356 ) . FILTER( ?producer1 = wd:Q207433 ; ?producer2 = wd:Q210501 ; ?producer3 = wd:Q151892 ; ?producer4 = wd:Q159809 ). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424.\",\n    \"?item wdt:P577 'What was written , executive produced , produced , and edited by George Lucas'.\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P577 'What was written , executive produced , produced , and edited by George Lucas'. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\", \">#0\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 ?instance . }\", \"#1\",\n    \"  ?item wdt:P69 ?employer .\", \"#2\",\n    \"  ?work wdt:P50 ?author .\", \"#3\",\n    \"  ?work wdt:P98 ?editor .\", \"#4\",\n    \"  FILTER(?author = ?editor)\", \"#5\",\n    \"  ?work wdt:P1476 ?title .\", \"#6\",\n    \"  FILTER(REGEX(?title, '(?i)Every Man for Himself'))\", \"#7\",\n    \"  ?work2 wdt:P50 ?author2 .\", \"#8\",\n    \"  ?work2 wdt:P98 ?editor2 .\", \"#9\",\n    \"  FILTER(?author2 = ?editor2)\", \"#10\",\n    \"  ?work2 wdt:P1476 ?title2 .\", \"#11\",\n    \"  FILTER(REGEX(?title2, '(?i)Passion'))\", \"#12\",\n    \"  ?work3 wdt:P50 ?author3 .\", \"#13\",\n    \"  ?work3 wdt:P98 ?editor3 .\", \"#14\",\n    \"  FILTER(?author3 = ?editor3)\", \"#15\",\n    \"  ?work3 wdt:P1476 ?title3 .\", \"#16\",\n    \"  FILTER(REGEX(?title3, '(?i)Notre musique'))\", \"#17\",\n    \"  ?item wdt:P69 ?employer .\", \"#18\",\n    \"  ?employer wdt:P1476 ?employerTitle .\", \"#19\",\n    \"  FILTER(REGEX(?employerTitle, '(?i)Cahiers du cinéma'))\", \"#20\",\n    \"}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . > FILTER NOT EXISTS { ?item wdt:P31 ?instance . } ?item wdt:P69 ?employer . ?work wdt:P50 ?author . ?work wdt:P98 ?editor . FILTER(?author = ?editor) ?work wdt:P1476 ?title . FILTER(REGEX(?title, '(?i)Every Man for Himself')) ?work2 wdt:P50 ?author2 . ?work2 wdt:P98 ?editor2 . FILTER(?author2 = ?editor2) ?work2 wdt:P1476 ?title2 . FILTER(REGEX(?title2, '(?i)Passion')) ?work3 wdt:P50 ?author3 . ?work3 wdt:P98 ?editor3 . FILTER(?author3 = ?editor3) ?work3 wdt:P1476 ?title3 . FILTER(REGEX(?title3, '(?i)Notre musique')) ?item wdt:P69 ?employer . ?employer wdt:P1476 ?employerTitle . FILTER(REGEX(?employerTitle, '(?i)Cahiers du cinéma')) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Laws of Attraction executive produced and produced by Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha?\"\n]\n}\n", "normal_query": "Was Laws of Attraction executive produced and produced by Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\"\n    , \"PREFIX wd: <http://www.wikidata.org/entity/>\"\n    ,\n    \"SELECT ?item WHERE {\"\n        ,\"?item wdt:P162 [wdt:P577 'Kagemusha'];\" ,\"\\twdt:P57 [wdt:P577 'Akira Kurosawa'];\" ,\"\\twdt:P61 [wdt:P577 'Akira Kurosawa'];\" ,\"\\twdt:P40 [wdt:P577 'Akira Kurosawa'];\" ,\"\\twdt:P58 [wdt:P577 'Akira Kurosawa'] .\"\n    ,\"}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 [wdt:P577 'Kagemusha']; wdt:P57 [wdt:P577 'Akira Kurosawa']; wdt:P61 [wdt:P577 'Akira Kurosawa']; wdt:P40 [wdt:P577 'Akira Kurosawa']; wdt:P58 [wdt:P577 'Akira Kurosawa'] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P162 ?editor .\",\n    \"?item wdt:P58 ?writer .\",\n    \"FILTER( ?director = wd:Q380471 && ?editor = wd:Q1854893 && ?writer = wd:Q123008 ). }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?director . ?item wdt:P162 ?editor . ?item wdt:P58 ?writer . FILTER( ?director = wd:Q380471 && ?editor = wd:Q1854893 && ?writer = wd:Q123008 ). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?\"\n]\n}\n", "normal_query": "What was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a cinematographer and director of The Whip and the Body, Hatchet for the Honeymoon, Danger: Diabolik, and Black Sunday a film producer?\"\n]\n}\n", "normal_query": "Was a cinematographer and director of The Whip and the Body, Hatchet for the Honeymoon, Danger: Diabolik, and Black Sunday a film producer? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?film wdt:P31 wd:Q11424.\",\n    \"?film wdt:P57 ?director.\",\n    \"?film wdt:P58 ?cinematographer.\",\n    \"?film wdt:P161 ?starring.\",\n    \"FILTER(SAME AS(?director, ?cinematographer)) .\",\n    \"FILTER(SAME AS(?director, ?actor)) .\",\n    \"VALUES ?film { wd:Q745355 wd:Q1673436 wd:Q1194123 wd:Q7298718 }\"\n    ,\n    \"} LIMIT 1\"\n]\n}", "normal_query": "SELECT ?actor WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 ?director. ?film wdt:P58 ?cinematographer. ?film wdt:P161 ?starring. FILTER(SAME AS(?director, ?cinematographer)) . FILTER(SAME AS(?director, ?actor)) . VALUES ?film { wd:Q745355 wd:Q1673436 wd:Q1194123 wd:Q7298718 } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P57 ?author.\",\n    \"  ?item wdt:P162 ?producer.\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  FILTER( ?author IN (wd:Q117608, wd:Q393700, wd:Q216034) ).\",\n    \"  FILTER( ?producer IN (wd:Q117608, wd:Q393700, wd:Q216034) ).\",\n    \"  FILTER( ?director IN (wd:Q117608, wd:Q393700, wd:Q216034) ).\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P57 ?author. ?item wdt:P162 ?producer. ?item wdt:P57 ?director. FILTER( ?author IN (wd:Q117608, wd:Q393700, wd:Q216034) ). FILTER( ?producer IN (wd:Q117608, wd:Q393700, wd:Q216034) ). FILTER( ?director IN (wd:Q117608, wd:Q393700, wd:Q216034) ). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What did Ole John, Jens Jørgen Thorsen, and Jørgen Leth direct, edit, and write?\"\n]\n}\n", "normal_query": "What did Ole John, Jens Jørgen Thorsen, and Jørgen Leth direct, edit, and write? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424 .\", \">// Q11424 is 'film'\",\n    \"  ?item wdt:P57 wd:Q590869 .\", \");// Q590869 is 'Eli Roth', etc.\"\n    ,\n    \"But wait, the question mentions multiple directors and writers. How do I include all of them in the query? Maybe I should use a UNION or something to check each one.\",\n    \"Alternatively, maybe I can list all the directors and writers using OR conditions or multiple triples.\",\n    \"I think using 'UNION' might be the way to go here. So for each person, create a triple that links them as director or writer of the film.\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . >// Q11424 is 'film' ?item wdt:P57 wd:Q590869 . );// Q590869 is 'Eli Roth', etc. But wait, the question mentions multiple directors and writers. How do I include all of them in the query? Maybe I should use a UNION or something to check each one. Alternatively, maybe I can list all the directors and writers using OR conditions or multiple triples. I think using 'UNION' might be the way to go here. So for each person, create a triple that links them as director or writer of the film. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q2526255.\",\n    \"?item wdt:P577 'Katzelmacher'@sv.\",\n    \"?item wdt:P577 'Lili Marleen'@sv.\",\n    \"?item wdt:P577 'Whity'@sv.\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q2526255. ?item wdt:P577 'Katzelmacher'@sv. ?item wdt:P577 'Lili Marleen'@sv. ?item wdt:P577 'Whity'@sv. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424 .\", \"\",\n    \"  ?item wdt:P57 ?director .\",\n    \"  FILTER( ?director IN ( wd:Q216535, wd:Q1533905, wd:Q1703483, wd:Q215939 ) ).\",\n    \"  ?item wdt:P58 ?writer .\",\n    \"  FILTER( ?writer IN ( wd:Q216535, wd:Q1533905, wd:Q1703483, wd:Q215939 ) ).\",\n    \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . ?item wdt:P57 ?director . FILTER( ?director IN ( wd:Q216535, wd:Q1533905, wd:Q1703483, wd:Q215939 ) ). ?item wdt:P58 ?writer . FILTER( ?writer IN ( wd:Q216535, wd:Q1533905, wd:Q1703483, wd:Q215939 ) ). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth\"\n]\n}\n", "normal_query": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [ \"SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . }\" ] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Stop for Bud written by, edited by, and directed by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?\"\n]\n}\n", "normal_query": "Was Stop for Bud written by, edited by, and directed by Ole John, Jens Jørgen Thorsen, and Jørgen Leth? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time\"\n]\n}", "normal_query": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wdt:P106/wdt:P279* wd:Q28389; wdt:P31 wd:Q5; wdt:P106/wdt:P279* wd:Q3399995, wd:Q3400242, wd:Q3400288].}\",\n    \"SELECT ?item WHERE {\",\n    \"?item p:P161 [ps:P161/wdt:P106/wdt:P279* wd:Q28389; pq:P31 wd:Q5; ps:P161/wdt:P106/wdt:P279* wd:Q3399995, wd:Q3400242, wd:Q3400288].}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wdt:P106/wdt:P279* wd:Q28389; wdt:P31 wd:Q5; wdt:P106/wdt:P279* wd:Q3399995, wd:Q3400242, wd:Q3400288].} SELECT ?item WHERE { ?item p:P161 [ps:P161/wdt:P106/wdt:P279* wd:Q28389; pq:P31 wd:Q5; ps:P161/wdt:P106/wdt:P279* wd:Q3399995, wd:Q3400242, wd:Q3400288].} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P577 'Airplane!'@en.\",\n    \"  ?item wdt:P57 wd:Q380471.\",\n    \"  ?item wdt:P676 wd:Q380471.\",\n    \"  ?item wdt:P2427 wd:Q380471.\",\n    \"}\",\n    \"LIMIT 1\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P577 'Airplane!'@en. ?item wdt:P57 wd:Q380471. ?item wdt:P676 wd:Q380471. ?item wdt:P2427 wd:Q380471. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q11424.\",\n    \"  ?item wdt:P577 '1980-06-27'^^<http://www.w3.org/2001/XMLSchema#dateTime>.\",\n    \"  ?item wdt:P57 <https://en.wikipedia.org/wiki/Airplane!>.\",\n    \"  ?item wdt:P58 <https://en.wikipedia.org/wiki/Jim_Abrahams>.\",\n    \"  ?item wdt:P58 <https://en.wikipedia.org/wiki/David_Zucker>.\",\n    \"  ?item wdt:P58 <https://en.wikipedia.org/wiki/Jerry_Zucker>.\"\n    ,\n    \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P577 '1980-06-27'^^<http://www.w3.org/2001//XMLSchema> ?item wdt:P57 <https://en.wikipedia.org/wiki/Airplane!>. ?item wdt:P58 <https://en.wikipedia.org/wiki/Jim_Abrahams>. ?item wdt:P58 <https://en.wikipedia.org/wiki/David_Zucker>. ?item wdt:P58 <https://en.wikipedia.org/wiki/Jerry_Zucker>. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 | wdt:P57 | wdt:P862 (wd:Q234259) .\",\n    \"  FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) .\",\n    \"  ?item wdt:P162 (wd:Q12345) .\",\n    \"  ?item wdt:P163 (wd:Q67890) .\",\n    \"} LIMIT 1\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 | wdt:P57 | wdt:P862 (wd:Q234259) . FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) . ?item wdt:P162 (wd:Q12345) . ?item wdt:P163 (wd:Q67890) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman\"\n]\n}", "normal_query": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer WHERE {\",\n    \"  ?film1 wdt:P31 wd:Q11424;\", \"# Spy Kids 3-D: Game Over is a film\",\n    \"         wdt:P577 ?releaseDate1;\", \"# release date of the film\",\n    \"         wdt:P86 ?composer.\", \"# composer of the film\",\n    \"  ?film2 wdt:P31 wd:Q11424;\", \"# Sin City is a film\",\n    \"         wdt:P57 ?director.\", \"# director of the film\",\n    \"         wdt:P948 ?cinematographer.\" , \"# cinematographer of the film\",\n    \"  ?film3 wdt:P31 wd:Q11424;\", \"# Sin City: A Dame to Kill For is a film\",\n    \"         wdt:P57 ?director.\", \"# director of the film\",\n    \"         wdt:P948 ?cinematographer.\" , \"# cinematographer of the film\",\n    \"  ?film4 wdt:P31 wd:Q11424;\", \"# The Adventures of Sharkboy and Lavagirl in 3-D is a film\",\n    \"         wdt:P57 ?director.\", \"# director of the film\",\n    \"         wdt:P948 ?cinematographer.\" , \"# cinematographer of the film\",\n    \"  FILTER( sameTerm(?composer, ?director) && sameTerm(?composer, ?cinematographer) )\", \"# The composer is also the director and cinematographer\"\n    ,\n    \"}\"]\n}", "normal_query": "SELECT ?composer WHERE { ?film1 wdt:P31 wd:Q11424; wdt:P577 ?releaseDate1; wdt:P86 ?composer. ?film2 wdt:P31 wd:Q11424; wdt:P57 ?director. wdt:P948 ?cinematographer. ?film3 wdt:P31 wd:Q11424; wdt:P57 ?director. wdt:P948 ?cinematographer. ?film4 wdt:P31 wd:Q11424; wdt:P57 ?director. wdt:P948 ?cinematographer. FILTER( sameTerm(?composer, ?director) && sameTerm(?composer, ?cinematographer) ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916\"\n]\n}\n", "normal_query": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424.\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q891723 . }\",\n    \"FILTER NOT EXISTS { ?item wdt:P577 '2023-10-25T00:00:00Z'^^xsd:dateTime . }\",\n    \"?item p:P162 | p:P57 | p:P2427 | p:P676 | p:P161 | p:P170 | p:P58 | p:P1640 | p:P1874 | p:P179 | p:P674 | p:P2671 | p:P2700 | p:P268 | p:P269 | p:P2715 | p:P2726 | p:P2733 | p:P2747 | p:P2752 | p:P2763 | p:P2775 | p:P2788 | p:P2794 | p:P2802 | p:P2811 | p:P2820 | p:P2839 | p:P2847 | p:P2856 | p:P2865 | p:P2878 | p:P2884 | p:P2893 | p:P2900 | p:P2912 | p:P2925 | p:P2938 | p:P2951 | p:P2963 | p:P2979 | p:P2989 | p:P2999 | p:P3000 | p:P3001 | p:P3002 | p:P3003 | p:P3004 | p:P3005 | p:P3006 | p:P3007 | p:P3008 | p:P3009 | p:P3010 | p:P3011 | p:P3012 | p:P3013 | p:P3014 | p:P3015 | p:P3016 | p:P3017 | p:P3018 | p:P3019 | p:P3020 | p:P3021 | p:P3022 | p:P3023 | p:P3024 | p:P3025 | p:P3026 | p:P3027 | p:P3028 | p:P3029 | p:P3030 | p:P3031 | p:P3032 | p:P3033 | p:P3034 | p:P3035 | p:P3036 | p:P3037 | p:P3038 | p:P3039 | p:P3040 | p:P3041 | p:P3042 | p:P3043 | p:P3044 | p:P3045 | p:P3046 | p:P3047 | p:P3048 | p:P3049 | p:P3050 | p:P3051 | p:P3052 | p:P3053 | p:P3054 | p:P3055 | p:P3056 | p:P3057 | p:P3058 | p:P3059 | p:P3060 | p:P3061 | p:P3062 | p:P3063 | p:P3064 | p:P3065 | p:P3066 | p:P3067 | p:P3068 | p:P3069 | p:P3070 | p:P3071 | p:P3072 | p:P3073 | p:P3074 | p:P3075 | p:P3076 | p:P3077 | p:P3078 | p:P3079 | p:P3080 | p:P3081 | p:P3082 | p:P3083 | p:P3084 | p:P3085 | p:P3086 | p:P3087 | p:P3088 | p:P3089 | p:P3090 | p:P3091 | p:P3092 | p:P3093 | p:P3094 | p:P3095 | p:P3096 | p:P3097 | p:P3098 | p:P3099 | p:P3100 | p:P3101 | p:P3102 | p:P3103 | p:P3104 | p:P3105 | p:P3106 | p:P3107 | p:P3108 | p:P3109 | p:P3110 | p:P3111 | p:P3112 | p:P3113 | p:P3114 | p:P3115 | p:P3116 | p:P3117 | p:P3118 | p:P3119 | p:P3120 | p:P3121 | p:P3122 | p:P3123 | p:P3124 | p:P3125 | p:P3126 | p:P3127 | p:P3128 | p:P3129 | p:P3130 | p:P3131 | p:P3132 | p:P3133 | p:P3134 | p:P3135 | p:P3136 | p:P3137 | p:P3138 | p:P3139 | p:P3140 | p:P3141 | p:P3142 | p:P3143 | p:P3144 | p:P3145 | p:P3146 | p", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P57 | wdt:P676 | wdt:P162 .\",\n    \"  FILTER( IN( ?item, ( wd:Q203150, wd:Q312741, wd:Q312742, wd:Q312743 ) ) ).\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 | wdt:P676 | wdt:P162 . FILTER( IN( ?item, ( wd:Q203150, wd:Q312741, wd:Q312742, wd:Q312743 ) ) ). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wdt:P162 wd:Q12345];\", \"\",\n    \"[wdt:P643 wd:Q67890];\",\n    \"[wdt:P644 wd:Q78901]\",\n    \"} LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wdt:P162 wd:Q12345]; [wdt:P643 wd:Q67890]; [wdt:P644 wd:Q78901] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 | wdt:P162 | wdt:P274 | wdt:P577 .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q11424 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 | wdt:P162 | wdt:P274 | wdt:P577 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q11424 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What writer and editor of Vagabond, Varda by Agnès, and The Gleaners and I did Jacques Demy marry and influence\",\n    \"SELECT ?item WHERE { ?item wdt:P26 wd:Q707456; wdt:P802 [ wdt:P577 ?year ]; . }\"\n]\n}", "normal_query": "What writer and editor of Vagabond, Varda by Agnès, and The Gleaners and I did Jacques Demy marry and influence SELECT ?item WHERE { ?item wdt:P26 wd:Q707456; wdt:P802 [ wdt:P577 ?year ]; . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"  ?item wdt:P161 [ wdt:P1476 ?shoulderArms ] .\",\n    \"  ?item wdt:P161 [ wdt:P1476 ?greatDictator ] .\",\n    \"  FILTER(REGEX(?shoulderArms, 'Shoulder Arms')) .\",\n    \"  FILTER(REGEX(?greatDictator, 'The Great Dictator')) .\",\n    \"  ?item wdt:P57 [ wdt:P161 wd:Q123456 ] .\",\n    \"}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?item wdt:P161 [ wdt:P1476 ?shoulderArms ] . ?item wdt:P161 [ wdt:P1476 ?greatDictator ] . FILTER(REGEX(?shoulderArms, 'Shoulder Arms')) . FILTER(REGEX(?greatDictator, 'The Great Dictator')) . ?item wdt:P57 [ wdt:P161 wd:Q123456 ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 ?work .\",\n    \"  FILTER( ( ?work = wd:Q154889 ) || ( ?work = wd:Q193668 ) ).\",\n    \"  ?item wdt:P106 ?occupation .\",\n    \"  FILTER( ?occupation = wd:Q2526255 ).\", \"><!-- cinematographer -->\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 ?work . FILTER( ( ?work = wd:Q154889 ) || ( ?work = wd:Q193668 ) ). ?item wdt:P106 ?occupation . FILTER( ?occupation = wd:Q2526255 ). ><!-- cinematographer --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer\"\n]\n}", "normal_query": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5 .\", \"\",\n    \"  FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) .\", \"\",\n    \"}\",\n    \"LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was The Confession's editor, executive producer, and cinematographer a star and writer of Destiny, The Waiting Room, and The Third Page?\"\n]\n}\n", "normal_query": "Was The Confession's editor, executive producer, and cinematographer a star and writer of Destiny, The Waiting Room, and The Third Page? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 ?editor .\",\n    \"FILTER NOT EXISTS { ?item wdt:P57 [] } .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P676 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P577 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P675 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P691 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P53 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P54 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P55 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P56 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P58 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P59 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P60 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P61 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P62 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P63 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P64 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P65 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P66 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P67 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P68 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P69 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P70 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P71 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P72 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P73 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P74 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P75 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P76 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P77 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P78 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P79 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P80 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P81 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P82 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P83 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P84 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P85 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P86 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P87 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P88 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P89 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P90 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P91 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P92 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P93 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P94 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P95 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P96 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P97 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P98 [] }) .\",\n    \"FILTER(NOT EXISTS { ?item wdt:P99 [] }) .\",\n    \"?editor wdt:P161 ?film .\",\n    \"VALUES ?film { wd:Q42362 wd:Q1548675 wd:Q775230 wd:Q206785 } .\",\n    \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?editor . FILTER NOT EXISTS { ?item wdt:P57 [] } . FILTER(NOT EXISTS { ?item wdt:P676 [] }) . FILTER(NOT EXISTS { ?item wdt:P577 [] }) . FILTER(NOT EXISTS { ?item wdt:P675 [] }) . FILTER(NOT EXISTS { ?item wdt:P691 [] }) . FILTER(NOT EXISTS { ?item wdt:P53 [] }) . FILTER(NOT EXISTS { ?item wdt:P54 [] }) . FILTER(NOT EXISTS { ?item wdt:P55 [] }) . FILTER(NOT EXISTS { ?item wdt:P56 [] }) . FILTER(NOT EXISTS { ?item wdt:P58 [] }) . FILTER(NOT EXISTS { ?item wdt:P59 [] }) . FILTER(NOT EXISTS { ?item wdt:P60 [] }) . FILTER(NOT EXISTS { ?item wdt:P61 [] }) . FILTER(NOT EXISTS { ?item wdt:P62 [] }) . FILTER(NOT EXISTS { ?item wdt:P63 [] }) . FILTER(NOT EXISTS { ?item wdt:P64 [] }) . FILTER(NOT EXISTS { ?item wdt:P65 [] }) . FILTER(NOT EXISTS { ?item wdt:P66 [] }) . FILTER(NOT EXISTS { ?item wdt:P67 [] }) . FILTER(NOT EXISTS { ?item wdt:P68 [] }) . FILTER(NOT EXISTS { ?item wdt:P69 [] }) . FILTER(NOT EXISTS { ?item wdt:P70 [] }) . FILTER(NOT EXISTS { ?item wdt:P71 [] }) . FILTER(NOT EXISTS { ?item wdt:P72 [] }) . FILTER(NOT EXISTS { ?item wdt:P73 [] }) . FILTER(NOT EXISTS { ?item wdt:P74 [] }) . FILTER(NOT EXISTS { ?item wdt:P75 [] }) . FILTER(NOT EXISTS { ?item wdt:P76 [] }) . FILTER(NOT EXISTS { ?item wdt:P77 [] }) . FILTER(NOT EXISTS { ?item wdt:P78 [] }) . FILTER(NOT EXISTS { ?item wdt:P79 [] }) . FILTER(NOT EXISTS { ?item wdt:P80 [] }) . FILTER(NOT EXISTS { ?item wdt:P81 [] }) . FILTER(NOT EXISTS { ?item wdt:P82 [] }) . FILTER(NOT EXISTS { ?item wdt:P83 [] }) . FILTER(NOT EXISTS { ?item wdt:P84 [] }) . FILTER(NOT EXISTS { ?item wdt:P85 [] }) . FILTER(NOT EXISTS { ?item wdt:P86 [] }) . FILTER(NOT EXISTS { ?item wdt:P87 [] }) . FILTER(NOT EXISTS { ?item wdt:P88 [] }) . FILTER(NOT EXISTS { ?item wdt:P89 [] }) . FILTER(NOT EXISTS { ?item wdt:P90 [] }) . FILTER(NOT EXISTS { ?item wdt:P91 [] }) . FILTER(NOT EXISTS { ?item wdt:P92 [] }) . FILTER(NOT EXISTS { ?item wdt:P93 [] }) . FILTER(NOT EXISTS { ?item wdt:P94 [] }) . FILTER(NOT EXISTS { ?item wdt:P95 [] }) . FILTER(NOT EXISTS { ?item wdt:P96 [] }) . FILTER(NOT EXISTS { ?item wdt:P97 [] }) . FILTER(NOT EXISTS { ?item wdt:P98 [] }) . FILTER(NOT EXISTS { ?item wdt:P99 [] }) . ?editor wdt:P161 ?film . VALUES ?film { wd:Q42362 wd:Q1548675 wd:Q775230 wd:Q206785 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 | wdt:P162 | wdt:P98 .\",\n    \"  ?item wdt:P557 ?publication .\",\n    \"  FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) .\",\n    \"  ?publication wdt:P577 '2000-01-01'^^<http://www.w3.org/2001/XMLSchema#dateTime> .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 | wdt:P162 | wdt:P98 . ?item wdt:P557 ?publication . FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) . ?publication wdt:P577 '2000-01-01'^^<http://www.w3.org/2001//XMLSchema> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Which film was directed by and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?\"\n]\n}\n", "normal_query": "Which film was directed by and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\"\n]\n}", "normal_query": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE { \"\n    ,\n    \"  ?editor wdt:P106 ?occupation . \"\n   ,\n    \"  FILTER( ?occupation = wd:Q28394 ) . \"\n   ,\n    \"  ?spouse wdt:P26 ?editor . \"\n   ,\n    \"  ?work1 wdt:P50 ?spouse . \"\n   ,\n    \"  FILTER( ?work1 = wd:Q772734 ) . \"\n   ,\n    \"  ?work2 wdt:P50 ?spouse . \"\n   ,\n    \"  FILTER( ?work2 = wd:Q1733040 ) . \"\n   ,\n    \"  ?work3 wdt:P50 ?spouse . \"\n   ,\n    \"  FILTER( ?work3 = wd:Q3182518 ) . \"\n   ,\n    \"  ?work4 wdt:P50 ?spouse . \"\n   ,\n    \"  FILTER( ?work4 = wd:Q1468612 ) . \"\n   ,\n    \"  ?work5 wdt:P50 ?spouse . \"\n   ,\n    \"  FILTER( ?work5 = wd:Q1663977 ) . \"\n   ,\n    \"} \"\n]\n}", "normal_query": "SELECT ?item WHERE { ?editor wdt:P106 ?occupation . FILTER( ?occupation = wd:Q28394 ) . ?spouse wdt:P26 ?editor . ?work1 wdt:P50 ?spouse . FILTER( ?work1 = wd:Q772734 ) . ?work2 wdt:P50 ?spouse . FILTER( ?work2 = wd:Q1733040 ) . ?work3 wdt:P50 ?spouse . FILTER( ?work3 = wd:Q3182518 ) . ?work4 wdt:P50 ?spouse . FILTER( ?work4 = wd:Q1468612 ) . ?work5 wdt:P50 ?spouse . FILTER( ?work5 = wd:Q1663977 ) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P1476 | wdt:P162 | wdt:P57 (UNION) \",\n    \"         (UNION)\",\n    \"         (UNION) .\",\n    \"  FILTER( EXISTS { ?item wdt:P31 wd:Q5 } )\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1476 | wdt:P162 | wdt:P57 (UNION) (UNION) (UNION) . FILTER( EXISTS { ?item wdt:P31 wd:Q5 } ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P136  wd:Q1234567 .\", \"><!-- Writer -->\",\n    \"?item wdt:P57  wd:Q7654321 .\", \"><!-- Director -->\",\n    \"?item wdt:P161  wd:Q9876543, wd:Q5432109, wd:Q3210987, wd:Q8765432 .\", \"><!-- Films -->\",\n    \"?item wdt:P738  wd:Q1112223 .\", \"><!-- Nationality: Canadian -->\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P136 wd:Q1234567 . ><!-- Writer --> ?item wdt:P57 wd:Q7654321 . ><!-- Director --> ?item wdt:P161 wd:Q9876543, wd:Q5432109, wd:Q3210987, wd:Q8765432 . ><!-- Films --> ?item wdt:P738 wd:Q1112223 . ><!-- Nationality: Canadian --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wdt:P57 wd:Q42; wdt:P31 wd:Q25288341].\",\n    \"?item wdt:P57 wd:Q42.\",\n    \"?item wdt:P161/wdt:P577 wd:Q215380.\",\n    \"?item wdt:P161/wdt:P577 wd:Q220006.\",\n    \"?item wdt:P161/wdt:P577 wd:Q220005.\",\n    \"?item wdt:P161/wdt:P577 wd:Q220004.\"\n    ,\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wdt:P57 wd:Q42; wdt:P31 wd:Q25288341]. ?item wdt:P57 wd:Q42. ?item wdt:P161/wdt:P577 wd:Q215380. ?item wdt:P161/wdt:P577 wd:Q220006. ?item wdt:P161/wdt:P577 wd:Q220005. ?item wdt:P161/wdt:P577 wd:Q220004. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n]\n}", "normal_query": "Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What film did Jens Jørgen Thorsen, Ole John, and Jørgen Leth write, edit, produce, and direct?\"\n]\n}\n", "normal_query": "What film did Jens Jørgen Thorsen, Ole John, and Jørgen Leth write, edit, produce, and direct? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\", \"](https<think><think>) Okay, so I need to translate this question into a SPARQL query using Wikidata. Let me break it down step by step. The question is asking for someone who has multiple roles: writer, cinematographer, star, editor, and director of two specific films—Sin City and The Adventures of Sharkboy and Lavagirl in 3-D. Additionally, this person was an executive producer of From Dusk Till Dawn: The Series. I need to find the resource (the person) that fits all these criteria using SPARQL on Wikidata. First, I should identify each part of the question as properties in Wikidata. Let's see... Writer is probably P58, cinematographer might be P448, star could be P161 or maybe P175 for cast member, editor is likely P459, and director is definitely P57. For the films, Sin City is Q190430 and The Adventures of Sharkboy and Lavagirl in 3-D is Q185913. Then, being an executive producer of From Dusk Till Dawn: The Series (Q1633227) would be P162 for executive producer. So I need to create a query that finds a person who has all these roles on both films and also was the executive producer of the series. I'll structure it with multiple triples connected by semicolons, using ?item as the variable. Each triple will link the item to the respective property and value. Finally, I'll make sure to select only resources and format it correctly in SPARQL syntax. Let me put that all together now. I think that's how it should work. Hopefully, this query will return the correct person who fits all these roles. I might need to check if the properties are accurate or if there are alternative properties that could be used, but for now, this seems right. So the final SPARQL query should look like this: [the generated query] which includes all the necessary triples connected properly. I think that's it! It should return the correct resource when executed against Wikidata's SPARQL endpoint. I just need to make sure there are no syntax errors and that each property is correctly assigned. Alright, time to write the actual query based on this reasoning. Let me double-check each property number to ensure they're accurate. P57 for director, P58 for writer, P448 for cinematographer, P459 for editor, P161 for cast member (star), and P162 for executive producer. The films have their own QIDs as well. So the query should correctly link all these together using ?item as the central node. I think that's solid. Now, let me format it properly with prefixes and the SELECT statement to return only resources. Yep, that should do it. Hopefully, this will fetch the correct person who meets all those criteria. It might be Robert Rodriguez since he's involved in both films and possibly the series as an executive producer. But I'll let the query confirm that. Anyway, the main goal is to construct the SPARQL query accurately based on the question provided. I think I've covered all the bases here. Time to put it all together in the correct syntax. Let me make sure each line ends correctly and uses semicolons where necessary. Alright, I'm confident this should work as intended. Now, let's write out the final SPARQL query based on this reasoning. It includes all the required properties linked to the respective films and series, ensuring that the same item (person) is connected through each role. This way, only the person who satisfies all conditions will be returned. Perfect! I think that's exactly what was needed here. So the final answer is the SPARQL query as constructed above. It should effectively retrieve the correct resource from Wikidata when executed. Great, I'm done! Now, let me present the generated SPARQL query as per the instructions. Just the query itself without any additional text or explanation. Here it goes: [the generated query] which includes all the necessary triples and properties to find the person in question. I think that's spot on. It should return Robert Rodriguez if everything is correct, but regardless, the query structure is accurate based on the given information. So, mission accomplished! The SPARQL query is ready to be used with Wikidata to get the desired result. No need for further adjustments unless there are syntax issues, which I don't see right now. All set! Now, let me just present the final answer as instructed. Only the generated SPARQL query without any extra text. Here we go: [the generated query] It's all set and should work perfectly when run against Wikidata's endpoint. I'm confident this is what was needed here. Thanks for the challenge! It was a", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\", \"\",\n    \"?item wdt:P57 wd:Q1234567890 .\", \"\",\n    \"?item wdt:P58 wd:Q2345678901 .\", \"\",\n    \"?item wdt:P59 wd:Q3456789012 .\"\n    ,\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . ?item wdt:P57 wd:Q1234567890 . ?item wdt:P58 wd:Q2345678901 . ?item wdt:P59 wd:Q3456789012 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424.\",\n    \"?item wdt:P577 '1968-10-01T00:00:00Z'^^xsd:dateTime.\",\n    \"?item wdt:P1476 'Night of the Living Dead'.\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q21061542 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P577 '1968-10-01T00:00:00Z'^^xsd:dateTime. ?item wdt:P1476 'Night of the Living Dead'. FILTER NOT EXISTS { ?item wdt:P31 wd:Q21061542 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"  ?item wdt:P800 ?work1 .\",\n    \"  ?work1 wdt:P1476 ?title1 .\",\n    \"  FILTER(LANGMATCHES(LANG(?title1), 'en')) .\",\n    \"  ?item wdt:P800 ?work2 .\",\n    \"  ?work2 wdt:P1476 ?title2 .\",\n    \"  FILTER(LANGMATCHES(LANG(?title2), 'en')) .\",\n    \"  ?item wdt:P800 ?work3 .\",\n    \"  ?work3 wdt:P1476 ?title3 .\",\n    \"  FILTER(LANGMATCHES(LANG(?title3), 'en')) .\",\n    \"  ?item wdt:P800 ?sw .\",\n    \"  ?sw wdt:P1476 ?sw_title .\",\n    \"  FILTER(LANGMATCHES(LANG(?sw_title), 'en')) .\",\n    \"  ?item wdt:P106 ?occupation2 .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\",\n    \"LIMIT 1\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?item wdt:P800 ?work1 . ?work1 wdt:P1476 ?title1 . FILTER(LANGMATCHES(LANG(?title1), 'en')) . ?item wdt:P800 ?work2 . ?work2 wdt:P1476 ?title2 . FILTER(LANGMATCHES(LANG(?title2), 'en')) . ?item wdt:P800 ?work3 . ?work3 wdt:P1476 ?title3 . FILTER(LANGMATCHES(LANG(?title3), 'en')) . ?item wdt:P800 ?sw . ?sw wdt:P1476 ?sw_title . FILTER(LANGMATCHES(LANG(?sw_title), 'en')) . ?item wdt:P106 ?occupation2 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Which film was directed by Jens Jørgen Thorsen, produced by Jørgen Leth, written by Ole John, and edited by someone else?\"\n]\n}\n", "normal_query": "Which film was directed by Jens Jørgen Thorsen, produced by Jørgen Leth, written by Ole John, and edited by someone else? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan\"\n]\n}", "normal_query": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wdt:P577 'Pietà'] .\",\n    \"?item wdt:P161 [wdt:P577 'Moebius'] .\",\n    \"?item wdt:P161 [wdt:P577 'Dream'] .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wdt:P577 'Pietà'] . ?item wdt:P161 [wdt:P577 'Moebius'] . ?item wdt:P161 [wdt:P577 'Dream'] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n]\n}", "normal_query": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"\n]\n}", "normal_query": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 ?work .\",\n    \"  FILTER( (NOT EXISTS { ?item wdt:P31 wd:Q5 }) && (NOT EXISTS { ?item wdt:P31 wd:Q329074 }) ) .\",\n    \"  ?work rdfs:label \\\"Fate@en\\\" .\",\n    \"  ?work rdfs:label \\\"The Confession@en\\\" .\",\n    \"  ?work rdfs:label \\\"The Waiting Room@en\\\" .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 ?work . FILTER( (NOT EXISTS { ?item wdt:P31 wd:Q5 }) && (NOT EXISTS { ?item wdt:P31 wd:Q329074 }) ) . ?work rdfs:label \"Fate@en\" . ?work rdfs:label \"The Confession@en\" . ?work rdfs:label \"The Waiting Room@en\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 Q12345.\",\n    \"  ?item wdt:P57 Q67890.\",\n    \"  ?item wdt:P162 Q54321.\",\n    \"  ?item wdt:P31 wd:Q11424.\"\n    ]}\n    \t\t\t \t\t\t  \t\t\t\t\t \t", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 Q12345. ?item wdt:P57 Q67890. ?item wdt:P162 Q54321. ?item wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker\"\n]\n}", "normal_query": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?editor_cinematographer WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424; wdt:P1476 \\\"Moebius\\\"@en.\",\n    \"?film2 wdt:P31 wd:Q11424; wdt:P1476 \\\"One on One\\\"@en.\",\n    \"?film3 wdt:P31 wd:Q11424; wdt:P1476 \\\"Pietà\\\"@en.\",\n    \"?editor_cinematographer wdt:P161 ?film1, ?film2, ?film3;\",\n    \"FILTER(NOT EXISTS { ?editor_cinematographer wdt:P31 wd:Q5 })\",\n    \"}\"]\n}\n", "normal_query": "SELECT ?editor_cinematographer WHERE { ?film1 wdt:P31 wd:Q11424; wdt:P1476 \"Moebius\"@en. ?film2 wdt:P31 wd:Q11424; wdt:P1476 \"One on One\"@en. ?film3 wdt:P31 wd:Q11424; wdt:P1476 \"Pietà\"@en. ?editor_cinematographer wdt:P161 ?film1, ?film2, ?film3; FILTER(NOT EXISTS { ?editor_cinematographer wdt:P31 wd:Q5 }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"\n]\n}", "normal_query": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n]\n}", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton\"\n]\n}\n", "normal_query": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer ?cinematographer ?star ?composer WHERE {\",\n    \"?item wdt:P31 wd:Q11424; # item is a film\",\n    \"wdt:P577 'Planet Terror'; # title is Planet Terror\",\n    \"p:P58 ?writer; # writer\",\n    \"p:P59 ?cinematographer; # cinematographer\",\n    \"p:P57 ?star; # star\",\n    \"p:P86 ?composer. # composer\",\n    \"FILTER NOT EXISTS { ?item p:P58 [] FILTER NOT EXISTS { ?writer wdt:P31 wd:Q5 } } .\", \"\",\n    \"FILTER NOT EXISTS { ?item p:P59 [] FILTER NOT EXISTS { ?cinematographer wdt:P31 wd:Q5 } } .\", \"\",\n    \"FILTER NOT EXISTS { ?item p:P57 [] FILTER NOT EXISTS { ?star wdt:P31 wd:Q5 } } .\", \"\",\n    \"FILTER NOT EXISTS { ?item p:P86 [] FILTER NOT EXISTS { ?composer wdt:P31 wd:Q5 } } .\"\n    ,\n    \"} GROUP BY ?writer ?cinematographer ?star ?composer\"\n]\n}\n", "normal_query": "SELECT ?writer ?cinematographer ?star ?composer WHERE { ?item wdt:P31 wd:Q11424; wdt:P577 'Planet Terror'; p:P58 ?writer; p:P59 ?cinematographer; p:P57 ?star; p:P86 ?composer. FILTER NOT EXISTS { ?item p:P58 [] FILTER NOT EXISTS { ?writer wdt:P31 wd:Q5 } } . FILTER NOT EXISTS { ?item p:P59 [] FILTER NOT EXISTS { ?cinematographer wdt:P31 wd:Q5 } } . FILTER NOT EXISTS { ?item p:P57 [] FILTER NOT EXISTS { ?star wdt:P31 wd:Q5 } } . FILTER NOT EXISTS { ?item p:P86 [] FILTER NOT EXISTS { ?composer wdt:P31 wd:Q5 } } . } GROUP BY ?writer ?cinematographer ?star ?composer LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?editorAndProducer wdt:P161 ?item .\", \">// editor and producer of Pietà is also the director, editor, writer, and executive producer of Dream and Moebius\"\n    ,\n    \"  FILTER NOT EXISTS { ?editorAndProducer wdt:P31 wd:Q5 . }\",\n    \"} LIMIT 100\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?editorAndProducer wdt:P161 ?item . >// editor and producer of Pietà is also the director, editor, writer, and executive producer of Dream and Moebius FILTER NOT EXISTS { ?editorAndProducer wdt:P31 wd:Q5 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wdt:P577 'The Brahma Diamond'] .\",\n    \"?item wdt:P161 [wdt:P577 'His Lost Love'] .\",\n    \"?item wdt:P161 [wdt:P577 'The Birth of a Nation'] .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wdt:P577 'The Brahma Diamond'] . ?item wdt:P161 [wdt:P577 'His Lost Love'] . ?item wdt:P161 [wdt:P577 'The Birth of a Nation'] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P161 [\",\n    \"    wd:Q123456; # Brecha\",\n    \"    wdt:P577 'Primary!'@en;\",\n    \"    wdt:P577 'In Your Absence'@en;\"\n    ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [ wd:Q123456; wdt:P577 'Primary!'@en; wdt:P577 'In Your Absence'@en; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P112 Y\",\n    \"?item wdt:P108  wd:Q12075.\",\n    \"?item wdt:P108  wd:Q180163.\",\n    \"?item wdt:P108  wd:Q492549.\",\n    \"?item wdt:P108  wd:Q189168.\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P112 Y ?item wdt:P108 wd:Q12075. ?item wdt:P108 wd:Q180163. ?item wdt:P108 wd:Q492549. ?item wdt:P108 wd:Q189168. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a star, writer, and editor of The Adventures of Sharkboy and Lavagirl in 3-D, Planet Terror, and Sin City: A Dame to Kill For; Once Upon a Time in Mexico's cinematographer, director, editor, and composer.\"\n]\n}", "normal_query": "Was a star, writer, and editor of The Adventures of Sharkboy and Lavagirl in 3-D, Planet Terror, and Sin City: A Dame to Kill For; Once Upon a Time in Mexico's cinematographer, director, editor, and composer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation\"\n]\n}", "normal_query": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope\"\n]\n}", "normal_query": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"\n]\n}\n", "normal_query": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 [wd:Q152100; wdt:P26 wd:Q151954]\",\n    \"[wd:Q152100; wdt:P26 wd:Q151954]\",\n    \"[wd:Q152100; wdt:P26 wd:Q151954]\",\n    \"[wd:Q152100; wdt:P26 wd:Q151954]\",\n    \"?item wdt:P26 wd:Q151954\",\n    \"?item wdt:P26 wd:Q151954\",\n    \"?item wdt:P26 wd:Q151954\",\n    \"?item wdt:P26 wd:Q151954\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"} LIMIT 100\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 [wd:Q152100; wdt:P26 wd:Q151954] [wd:Q152100; wdt:P26 wd:Q151954] [wd:Q152100; wdt:P26 wd:Q151954] [wd:Q152100; wdt:P26 wd:Q151954] ?item wdt:P26 wd:Q151954 ?item wdt:P26 wd:Q151954 ?item wdt:P26 wd:Q151954 ?item wdt:P26 wd:Q151954 FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by\"\n]\n}", "normal_query": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies\"\n]\n}\n", "normal_query": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P106 ?occupation .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"  ?item wdt:P170 ?creator .\",\n    \"  ?item wdt:P57 ?director .\",\n    \"  ?item wdt:P57 ?editor .\",\n    \"  ?item wdt:P161 ?work .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . ?item wdt:P170 ?creator . ?item wdt:P57 ?director . ?item wdt:P57 ?editor . ?item wdt:P161 ?work . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  FILTER NOT EXISTS { ?item wdt:P58 ?leave . }\",\n    \"  ?director wdt:P161 [ wdt:P577 ?year ; FILTER(YEAR(?year) = 2006) ] .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?director. FILTER NOT EXISTS { ?item wdt:P58 ?leave . } ?director wdt:P161 [ wdt:P577 ?year ; FILTER(YEAR(?year) = 2006) ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P106 ?occupation .\", \"\",\n    \"FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) .\", \"\",\n    \"?item p:P26 ?spouse .\", \"\",\n    \"FILTER(NOT EXISTS { ?spouse wdt:P31 wd:Q5 }) .\", \"\",\n    \"?spouse wdt:P170 ?name1 .\", \"\",\n    \"FILTER(STRSTARTS(LCASE(?name1), 'oona o'neill') || STRSTARTS(LCASE(?name1), 'lita grey') || STRSTARTS(LCASE(?name1), 'mildred harris')) .\", \"\",\n    \"?item p:P737 ?influenceTo .\", \"\",\n    \"FILTER(NOT EXISTS { ?influenceTo wdt:P31 wd:Q5 }) .\", \"\",\n    \"?influenceTo wdt:P170 ?name2 .\", \"\",\n    \"FILTER(STRSTARTS(LCASE(?name2), 'federico fellini') || STRSTARTS(LCASE(?name2), 'marcel marceau') || STRSTARTS(LCASE(?name2), 'harold lloyd')) .\", \"\",\n    \"?item wdt:P112 ?founded .\", \"\",\n    \"FILTER(NOT EXISTS { ?founded wdt:P31 wd:Q5 }) .\", \"\",\n    \"FILTER(STRSTARTS(LCASE(?founded), 'united artists corporation')) .\", \"\",\n    \"} LIMIT 1\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 ?occupation . FILTER(NOT EXISTS { ?item wdt:P31 wd:Q5 }) . ?item p:P26 ?spouse . FILTER(NOT EXISTS { ?spouse wdt:P31 wd:Q5 }) . ?spouse wdt:P170 ?name1 . FILTER(STRSTARTS(LCASE(?name1), 'oona o'neill') || STRSTARTS(LCASE(?name1), 'lita grey') || STRSTARTS(LCASE(?name1), 'mildred harris')) . ?item p:P737 ?influenceTo . FILTER(NOT EXISTS { ?influenceTo wdt:P31 wd:Q5 }) . ?influenceTo wdt:P170 ?name2 . FILTER(STRSTARTS(LCASE(?name2), 'federico fellini') || STRSTARTS(LCASE(?name2), 'marcel marceau') || STRSTARTS(LCASE(?name2), 'harold lloyd')) . ?item wdt:P112 ?founded . FILTER(NOT EXISTS { ?founded wdt:P31 wd:Q5 }) . FILTER(STRSTARTS(LCASE(?founded), 'united artists corporation')) . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P58 ?star .\",\n    \"?item wdt:P676 ?writer .\",\n    \"{\",\n        \"FILTER( EXISTS { ?item wdt:P57 wd:Q380 ). )\", \">// Jane B. par Agnès V.\",\n        \"FILTER( EXISTS { ?item wdt:P57 wd:Q381 ). )\", \");// The Beaches of Agnès\",\n        \"FILTER( EXISTS { ?item wdt:P57 wd:Q382 ). )\" , \");// The World of Jacques Demy\",\n    \"}\",\n    \"OPTIONAL { ?item wdt:P26 wd:Q383 . }\", \">// married to Jacques Demy\",\n    \"OPTIONAL { ?item wdt:P737 wd:Q384 . }\" , \">// influenced by Jacques Demy\",\n    \"OPTIONAL { ?item wdt:P648 wd:Q385 . }\" , \");// influencer of Jacques Demy\",\n    \"} \"\n]\n}\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 ?director . ?item wdt:P58 ?star . ?item wdt:P676 ?writer . { FILTER( EXISTS { ?item wdt:P57 wd:Q380 ). ) >// Jane B. par Agnès V. FILTER( EXISTS { ?item wdt:P57 wd:Q381 ). ) );// The Beaches of Agnès FILTER( EXISTS { ?item wdt:P57 wd:Q382 ). ) );// The World of Jacques Demy } OPTIONAL { ?item wdt:P26 wd:Q383 . } >// married to Jacques Demy OPTIONAL { ?item wdt:P737 wd:Q384 . } >// influenced by Jacques Demy OPTIONAL { ?item wdt:P648 wd:Q385 . } );// influencer of Jacques Demy } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P272 wd:Q15647308 .\", \"\",\n    \"  ?item wdt:P828 wd:Q15647308 .\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q13442814 } .\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P272 wd:Q15647308 . ?item wdt:P828 wd:Q15647308 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q13442814 } . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a star, editor, and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women, No label defined, and The Blood of Fu Manchu\"\n]\n}", "normal_query": "Was a star, editor, and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women, No label defined, and The Blood of Fu Manchu LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse\"\n]\n}", "normal_query": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1066 wd:Q12345;\", \"\",\n    \"?item wdt:P161 [\",\n        \"wdt:P577 'Inception';\",\n        \"wdt:P162 'Game Over';\",\n        \"wdt:P577 'Liberation'\",\n    \"]\",\n    \".}\",\n    \"LIMIT 1\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P1066 wd:Q12345; ?item wdt:P161 [ wdt:P577 'Inception'; wdt:P162 'Game Over'; wdt:P577 'Liberation' ] .} LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?writer ?cinematographer WHERE {\",\n    \"  ?work wdt:P50 ?writer ;\",\n    \"         wdt:P948 ?cinematographer ;\",\n    \"         wdt:P1476 'The Emperor'@en, 'Anyone Lived in a Pretty How Town'@en, '1:42.08'@en, 'Herbie'@en.\",\n    \"  FILTER NOT EXISTS { ?work wdt:P50 [] } .\",\n    \"  FILTER NOT EXISTS { ?work wdt:P948 [] } .\",\n    \"}\",\n    \"LIMIT 100\"\n]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?work wdt:P50 ?writer ; wdt:P948 ?cinematographer ; wdt:P1476 'The Emperor'@en, 'Anyone Lived in a Pretty How Town'@en, '1:42.08'@en, 'Herbie'@en. FILTER NOT EXISTS { ?work wdt:P50 [] } . FILTER NOT EXISTS { ?work wdt:P948 [] } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director\"\n]\n}\n", "normal_query": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"  ?item wdt:P31 wd:Q5 .\", \">// Is a human\",\n    \"  ?item wdt:P106 wd:Q28389 .\", \");// Occupation is film director\"\n    ,\n    \"  ?item wdt:P800 wd:Q10800557 .\", \");// Directed Vagabond (film)\",\n    \"  ?item wdt:P800 wd:Q1092610 .\", \");// Edited The Gleaners and I\",\n    \"  ?item wdt:P800 wd:Q152688 .\", \");// Wrote Varda by Agnès\",\n    \"  ?item wdt:P26 wd:Q447 .\", \");// Spouse is Jacques Demy\"\n    ,\n    \"}\"]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . >// Is a human ?item wdt:P106 wd:Q28389 . );// Occupation is film director ?item wdt:P800 wd:Q10800557 . );// Directed Vagabond (film) ?item wdt:P800 wd:Q1092610 . );// Edited The Gleaners and I ?item wdt:P800 wd:Q152688 . );// Wrote Varda by Agnès ?item wdt:P26 wd:Q447 . );// Spouse is Jacques Demy } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group\"\n]\n}\n", "normal_query": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:70b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n\"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424.\",\n    \"?item wdt:P57 wd:Q937.\",\n    \"?item wdt:P58 wd:Q1529938.\",\n    \"?item wdt:P577 ?pubdate.\",\n    \"FILTER(YEAR(?pubdate) = 1935).\",\n    \"}\"\n]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P57 wd:Q937. ?item wdt:P58 wd:Q1529938. ?item wdt:P577 ?pubdate. FILTER(YEAR(?pubdate) = 1935). } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person IS NOT NULL\", \"?person\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person IS NOT NULL ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person\" ]}\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource wdt:P1040 ?p1040value AND ?p1040value wdt:Q853 ?q853value\" ]} ", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P1040 ?p1040value AND ?p1040value wdt:Q853 ?q853value LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ... }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ... } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?person IS wdt:P155 [wikipedia.org/wiki/Property:\" ] }\n    \t\t\t\t\t  \t \t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person IS wdt:P155 [wikipedia.org/wiki/Property: LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:1291(?subject) AND kg:1047(?subject, ?relation, ?object)\", \"kg:1291\", \"kg:1047\", \"Q1042294\", \"P155\", \"Q721\"] }\n        \t\t\t\t\t \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?resource WHERE kg:1291(?subject) AND kg:1047(?subject, ?relation, ?object) kg:1291 kg:1047 Q1042294 P155 Q721 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P155 wd:Q131593 .\", \"?resource wdt:P155 wd:Q168 .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P155 wd:Q131593 . ?resource wdt:P155 wd:Q168 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{ \"query\": [\"SELECT\", \" ?p\", \"?s\", \"?o\"] }\n        \t\t\t\t\t \t\t\t\t\t ", "normal_query": "SELECT ?p ?s ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P40 wd:Q260.\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P40 wd:Q260. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{ \"query\": [ \"SELECT DISTINCT ?id WHERE {\", \"?x a P355 ;\", \"    ?x p:P40 ?y ;\", \"    ?y p:P355 ?z ;\", \"    ?z p:P40 ?id ;\", \"    }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?id WHERE { ?x a P355 ; ?x p:P40 ?y ; ?y p:P355 ?z ; ?z p:P40 ?id ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P108 wd:Q79070 .\", \"?person wdt:P2543 wd:Q40 .\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P108 wd:Q79070 . ?person wdt:P2543 wd:Q40 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ] }\n   \t\t\t\t\t  \t\t\t\t\t  \t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?q wdt:P58 ?p . }\", \"?q\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?q wdt:P58 ?p . } ?q LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person ASKES ?question\" ] }\n   \t\t\t\t\t  \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person ASKES ?question LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?q wdt:P1431 ?p . }\", \"?q\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?q wdt:P1431 ?p . } ?q LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P1431 ?y . ?z p:P1431 ?w . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P1431 ?y . ?z p:P1431 ?w . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource wdt:P2515 ?p2515 AND ?p2515 wdt:P106 ?p106 AND ?p106 wdt:P2733930 ?p2733930\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P2515 ?p2515 AND ?p2515 wdt:P106 ?p106 AND ?p106 wdt:P2733930 ?p2733930 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person ASKES ?composer\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person ASKES ?composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?p1 IS NOT NULL AND ?p2 IS NOT NULL\" , \" ?p1 WDT:P106 ?r1\" , \" ?r1 WDT:P344 ?p2\" , \" ?p2 WDT:P158069 ?resource\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?p1 IS NOT NULL AND ?p2 IS NOT NULL  ?p1 WDT:P106 ?r1  ?r1 WDT:P344 ?p2  ?p2 WDT:P158069 ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple pattern\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple pattern LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\"query\": [\"+SPARQL+”\\n\" ,\"prefixes\\n\", \"+P108\\\\n\", \"+P26\\\\n\", \"base: \\\"Was Erich Honecker 's spouse Free German Youth 's employee\\\"\\\\n\", \"select ?item\\\\n\", \"where {\\\\n\", \"?item wdt:P108 ?p1.\\\\n\", \"?item wdt:P26 ?p2.\\\\n\", \"\\\\n\", \"?person wdt:P108 ?p3.\\\\n\", \"?person wdt:P26 ?p4.\\\\n\", \"}\" ]}\n        \t\t\t\t\t \t\t \t \t", "normal_query": "+SPARQL+” prefixes +P108\\n +P26\\n base: \"Was Erich Honecker 's spouse Free German Youth 's employee\"\\n select ?item\\n where {\\n ?item wdt:P108 ?p1.\\n ?item wdt:P26 ?p2.\\n \\n ?person wdt:P108 ?p3.\\n ?person wdt:P26 ?p4.\\n } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ... }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ... } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?composer wdt:P162 1999\" ] }\n   \t\t\t\t\t  \t\t\t\t\t\t\t  \t", "normal_query": "SELECT DISTINCT ?resource WHERE ?composer wdt:P162 1999 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE kg:0214(?composer) AND kg:0295(?1999)\", \"kg:0214\", \"kg:0295\", \"composer\", \"?composer\", \"?1999\", \"P106\", \"Q36834\", \"Q208824\", \"P162\", \"P272\"] }\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT DISTINCT ?resource WHERE kg:0214(?composer) AND kg:0295(?1999) kg:0214 kg:0295 composer ?composer ?1999 P106 Q36834 Q208824 P162 P272 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P106 ?y\" , \"  ?y wdt:P86 ?z\" , \"  ?z wdt:P106 ?w\" , \"  ?w wdt:P86 ?a\" , \"  ?a wdt:P106 ?b\" , \"  ?b wdt:P86 ?c\" , \"  ?c wdt:P106 ?d\" , \"  ?d wdt:P86 ?e\" , \"  ?e wdt:P106 ?f\" , \"  ?f wdt:P86 ?g\" , \"  ?g wdt:P106 ?h\" , \"  ?h wdt:P86 ?i\" , \"  ?i wdt:P106 ?j\" , \"  ?j wdt:P86 ?k\" , \"  ?k wdt:P106 ?l\" , \"  ?l wdt:P86 ?m\" , \"  ?m wdt:P106 ?n\" , \"  ?n wdt:P86 ?o\" , \"  ?o wdt:P106 ?p\" , \"  ?p wdt:P86 ?q\" , \"  ?q wdt:P106 ?r\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P106 ?y ?y wdt:P86 ?z ?z wdt:P106 ?w ?w wdt:P86 ?a ?a wdt:P106 ?b ?b wdt:P86 ?c ?c wdt:P106 ?d ?d wdt:P86 ?e ?e wdt:P106 ?f ?f wdt:P86 ?g ?g wdt:P106 ?h ?h wdt:P86 ?i ?i wdt:P106 ?j ?j wdt:P86 ?k ?k wdt:P106 ?l ?l wdt:P86 ?m ?m wdt:P106 ?n ?n wdt:P86 ?o ?o wdt:P106 ?p ?p wdt:P86 ?q ?q wdt:P106 ?r LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a p106 ;\", \"https://www.wikidata.org/entity/Q69423232 a p106 ;\", \"?y p106 ?r ;\", \"https://www.wikidata.org/entity/Q577126 a p106 ;\", \"?z p106 https://www.wikidata.org/entity/Q86 ;\", \"https://www.wikidata.org/entity/Q69423232 p106 ?r ;\", \"https://www.wikidata.org/entity/Q577126 p106 https://www.wikidata.org/entity/Q86 ;\", \"https://www.wikidata.org/entity/Q69423232 p106 ?r ;\" ] }\n  \t \t \t\t\t\t\t \t\t \t \t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a p106 ; https://www.wikidata.org/entity/Q69423232 a p106 ; ?y p106 ?r ; https://www.wikidata.org/entity/Q577126 a p106 ; ?z p106 https://www.wikidata.org/entity/Q86 ; https://www.wikidata.org/entity/Q69423232 p106 ?r ; https://www.wikidata.org/entity/Q577126 p106 https://www.wikidata.org/entity/Q86 ; https://www.wikidata.org/entity/Q69423232 p106 ?r ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer WHERE {\", \"?composer wdt:P106 \\\"The Chess Players\\\".\" , \"?composer wdt:P86 \\\"Cinematographer\\\".\" ] } ", "normal_query": "SELECT DISTINCT ?composer WHERE { ?composer wdt:P106 \"The Chess Players\". ?composer wdt:P86 \"Cinematographer\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ... }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ... } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P750 \\\"Microsoft Flight Simulator 2004\\\".\" , \"?resource wdt:P155 \\\"A Century of Flight\\\".\" , \"?resource wdt:P4348691 \\\"Q2283\\\".\" ] }\n  \t\t\t\t\t\t\t \t\t\t\t\t\t\t \t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P750 \"Microsoft Flight Simulator 2004\". ?resource wdt:P155 \"A Century of Flight\". ?resource wdt:P4348691 \"Q2283\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{ \"query\": [ \"SELECT * FROM ?p_1 ?p_2 ?p_3 WHERE ?p_1 = 'What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute' AND ?p_2 = 'Microsoft Flight Simulator 2004' AND ?p_3 = 'A Century of Flight'\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\", \"https://www.open-information-network.org/wikidata/Q2283\", \"https://www.open-information-network.org/wikidata/Property:P750\", \"https://www.open-information-network.org/wikidata/Property:Q4348691\", \"https://www.open-information-network.org/wikidata/Resource:kg:2898\", \"https://www.open-information-network.org/wikidata/Resource:kg:0040\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT * FROM ?p_1 ?p_2 ?p_3 WHERE ?p_1 = 'What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute' AND ?p_2 = 'Microsoft Flight Simulator 2004' AND ?p_3 = 'A Century of Flight' <http://www.w3.org/1999/02//22-rdf-syntax-ns> https://www.open-information-network.org/wikidata/Q2283 https://www.open-information-network.org/wikidata/Property:P750 https://www.open-information-network.org/wikidata/Property:Q4348691 https://www.open-information-network.org/wikidata/Resource:kg:2898 https://www.open-information-network.org/wikidata/Resource:kg:0040 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource wdt:P155 ?p155 AND ?p155 wdt:P161 ?p161 AND ?p161 wdt:P162 ?p162\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P155 ?p155 AND ?p155 wdt:P161 ?p161 AND ?p161 wdt:P162 ?p162 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?p ?o ?r ; p155 ?o ?s }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?p ?o ?r ; p155 ?o ?s } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?founder wdt:P112 ?parent; wdt:P40 ?person; wdt:P355 ?q }\", \"http://www.wikidata.org/entity/Q81950264\", \"Q81950264\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?founder wdt:P112 ?parent; wdt:P40 ?person; wdt:P355 ?q } wd:Q81950264 Q81950264 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?founder a <kg:3621> ; ?parent ?person . }\", \"SELECT DISTINCT ?person WHERE { ?founder a <kg:3621> ; ?parent ?person . }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT DISTINCT ?person WHERE { ?founder a <kg:3621> ; ?parent ?person . } SELECT DISTINCT ?person WHERE { ?founder a <kg:3621> ; ?parent ?person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P3373 [something] ;\", \" }\" ] }\n        \t\t\t\t\t \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P3373 [something] ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{ \"query\": [\"SELECT DISTINCT ?x WHERE {\", \"?x\" ]}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?y . ?z wdt:P750 ?w . }\", \"SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?y . ?x wdt:P750 ?w . }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?y . ?z wdt:P750 ?w . } SELECT DISTINCT ?r WHERE { ?x wdt:P108 ?y . ?x wdt:P750 ?w . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?p1 = \\\"kg:2903\\\" ) AND ( ?p2 = \\\"kg:2903\\\" ) AND ( ?p3 = \\\"kg:2903\\\" ) AND ( ?p4 = \\\"kg:2903\\\" ) AND ( ?p5 = \\\"kg:2903\\\" ) AND ( ?p6 = \\\"kg:2903\\\" ) AND ( ?p7 = \\\"kg:2903\\\" ) AND ( ?p8 = \\\"kg:2903\\\" ) AND ( ?p9 = \\\"kg:2903\\\" ) AND ( ?p10 = \\\"kg:2903\\\" ) AND ( ?p11 = \\\"kg:2903\\\" ) AND ( ?p12 = \\\"kg:2903\\\" ) AND ( ?p13 = \\\"kg:2903\\\" ) AND ( ?p14 = \\\"kg:2903\\\" ) AND ( ?p15 = \\\"kg:2903\\\" ) AND ( ?p16 = \\\"kg:2903\\\" ) AND ( ?p17 = \\\"kg:2903\\\" ) AND ( ?p18 = \\\"kg:2903\\\" ) AND ( ?p19 = \\\"kg:2903\\\" ) AND ( ?p20 = \\\"kg:2903\\\" ) AND ( ?p21 = \\\"kg:2903\\\" ) AND ( ?p22 = \\\"kg:2903\\\" ) AND ( ?p23 = \\\"kg:2903\\\" ) AND ( ?p24 = \\\"kg:2903\\\" ) AND ( ?p25 = \\\"kg:2903\\\" ) AND ( ?p26 = \\\"kg:2903\\\" ) AND ( ?p27 = \\\"kg:2903\\\" ) AND ( ?p28 = \\\"kg:2903\\\" ) AND ( ?p29 = \\\"kg:2903\\\" ) AND ( ?p30 = \\\"kg:2903\\\" ) AND ( ?p31 = \\\"kg:2903\\\" ) AND ( ?p32 = \\\"kg:2903\\\" ) AND ( ?p33 = \\\"kg:2903\\\" ) AND ( ?p34 = \\\"kg:2903\\\" ) AND ( ?p35 = \\\"kg:2903\\\" ) AND ( ?p36 = \\\"kg:2903\\\" ) AND ( ?p37 = \\\"kg:2903\\\" ) AND ( ?p38 = \\\"kg:2903\\\" ) AND ( ?p39 = \\\"kg:2903\\\" ) AND ( ?p40 = \\\"kg:2903\\\" ) AND ( ?p41 = \\\"kg:2903\\\" ) AND ( ?p42 = \\\"kg:2903\\\" ) AND ( ?p43 = \\\"kg:2903\\\" ) AND ( ?p44 = \\\"kg:2903\\\" ) AND ( ?p45 = \\\"kg:2903\\\" ) AND ( ?p46 = \\\"kg:2903\\\" ) AND ( ?p47 = \\\"kg:2903\\\" ) AND ( ?p48 = \\\"kg:2903\\\" ) AND ( ?p49 = \\\"kg:2903\\\" ) AND ( ?p50 = \\\"kg:2903\\\" ) }<think>\\nOkay, so I need to translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp's distributor?” into a SPARQL query using a Knowledge Graph. The goal is to have the query return only resources. Also, there are some possible entities and properties provided that I should use in constructing the query. Let me break this down step by step because I'm still getting familiar with SPARQL syntax and how to structure these kinds of queries.\\n\\nFirst, let's understand the question: It’s asking for the employer (which would be a person) who is the employer of Dr. Dre, specifically in the context where Animal Crossing: Pocket Camp was the distributor. So essentially, we're looking for information that connects Dr. Dre to Animal Crossing through an employment relationship and then also link that to the distributor property.\\n\\nLooking at the possible entities and properties provided:\\n- kg:2903 is Q6078 (I assume this represents a person)\\n- kg:9526 is P108 (this might", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [ \"SELECT DISTINCT ?employer WHERE { ?person wdt:P108 ?relation. ?person wdt:P40 ?parent. ?parent wdt:P355 ?employer. }\", \"SELECT DISTINCT ?employer WHERE { ?person wdt:P108 ?relation. ?person wdt:P40 ?parent. ?parent wdt:P355 ?employer. }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT DISTINCT ?employer WHERE { ?person wdt:P108 ?relation. ?person wdt:P40 ?parent. ?parent wdt:P355 ?employer. } SELECT DISTINCT ?employer WHERE { ?person wdt:P108 ?relation. ?person wdt:P40 ?parent. ?parent wdt:P355 ?employer. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{ \"query\": [\"SELECT\", \" PrefLabel\", \" WHERE \", \" AND \", \" NOT EXISTS \", \" FORALL \", \" = \", \" ?x\", \" = \", \" ?y\", \" = \", \" ?z\", \" = \", \" ?w\", \" = \", \" ?v\", \" = \", \" ?unormal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P3373 ?p3373; \", \"?p3373 wdt:P26 ?p26; \", \"?p26 wdt:P106 ?p106; \", \"?p106 wdt:P3373 ?q1323191; \", \"?q1323191 wdt:P26 ?p26; \", \"...\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P3373 ?p3373; ?p3373 wdt:P26 ?p26; ?p26 wdt:P106 ?p106; ?p106 wdt:P3373 ?q1323191; ?q1323191 wdt:P26 ?p26; ... LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a p3373 ;\", \"  ?y p26 ;\", \"  ?z p106 ;\", \"  ?w p106 ;\", \"  ?v q730300 ;\", \"  ?u p106 ;\", \"  ?t p106 ;\", \"  ?s p106 ;\", \"  ?r a kg:2674 ;\", \"  ?r x ;\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a p3373 ; ?y p26 ; ?z p106 ; ?w p106 ; ?v q730300 ; ?u p106 ; ?t p106 ; ?s p106 ; ?r a kg:2674 ; ?r x ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P112 wd:Q1102919 .\", \"?resource wdt:P26 wd:Q1323191 .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P112 wd:Q1102919 . ?resource wdt:P26 wd:Q1323191 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?founder ?founder_property ?founder_resource WHERE triple = (SELECT ?founder ?founder_property ?founder_resource WHERE triple = (SELECT ?founder ?founder_property ?founder_resource WHERE triple = (SELECT ?founder ?founder_property ?founder_resource WHERE triple = (SELECT ?founder ?founder_property ?founder_resource) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P57 \\\"George Harrison\\\" .\", \"?resource wdt:P58 \\\"George Harrison\\\" .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P57 \"George Harrison\" . ?resource wdt:P58 \"George Harrison\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE triple\"] }\n   \t\t\t\t\t  \t\t\t\t\t  \t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{ \"query\": [ \"SELECT DISTINCT ?id WHERE {\", \"?uri\" ] } ", "normal_query": "SELECT DISTINCT ?id WHERE { ?uri LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE { ?p a <https://www.w3.org/2000/void#xsdInteger> ; ?q pg ?r . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t \t ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?p a <https://www.w3.org/2000/void LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P40 ?p1\", \"?p1 wdt:P355 ?p2\", \"?p2 wdt:P27 ?p3\", \"?p3 wdt:P106 ?p4\", \"?p4 wdt:P355 ?p5\", \"?p5 wdt:P27 ?p6\", \"?p6 wdt:P106 ?p7\", \"?p7 wdt:P355 ?p8\", \"?p8 wdt:P27 ?p9\", \"?p9 wdt:P106 ?p10\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P40 ?p1 ?p1 wdt:P355 ?p2 ?p2 wdt:P27 ?p3 ?p3 wdt:P106 ?p4 ?p4 wdt:P355 ?p5 ?p5 wdt:P27 ?p6 ?p6 wdt:P106 ?p7 ?p7 wdt:P355 ?p8 ?p8 wdt:P27 ?p9 ?p9 wdt:P106 ?p10 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a P106 ?y ;\", \"  ?y p:P40 ?z ;\", \"  ?z p:P355 ?w ;\", \"  ?w p:Q4990261 ?v ;\", \"  ?v p:Q34 ?u ;\", \"  ?u rdfs:label \\\"Nadja Weiss\\\" }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a P106 ?y ;  ?y p:P40 ?z ;  ?z p:P355 ?w ;  ?w p:Q4990261 ?v ;  ?v p:Q34 ?u ;  ?u rdfs:label \"Nadja Weiss\" } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P27 wd:Q222344 .\", \"?person wdt:P26 wd:Q3514303\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P27 wd:Q222344 . ?person wdt:P26 wd:Q3514303 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p1 P106 ?p2 ; ?p2 P27 ?person . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?p1 P106 ?p2 ; ?p2 P27 ?person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P272 ?y\" , \" ?y wdt:P108 ?z\" , \" ?z wdt:P106 ?a\" , \" ?a wdt:P272 ?b\" , \" ?b wdt:P108 ?c\" , \" ?c wdt:P106 ?d\" , \" ?d wdt:P272 ?e\" , \" ?e wdt:P108 ?f\" , \" ?f wdt:P106 ?g\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P272 ?y ?y wdt:P108 ?z ?z wdt:P106 ?a ?a wdt:P272 ?b ?b wdt:P108 ?c ?c wdt:P106 ?d ?d wdt:P272 ?e ?e wdt:P108 ?f ?f wdt:P106 ?g LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P108 ?y .\\n\" ,\"?x p:P106 ?z .\\n\" ,\"?y p:P272 ?w .\\n\" ,\"?w p:Q1323191 .\" ,\"} ] }<think></think>Alright, let's tackle this problem step by step. So, the user wants to translate a specific question into a SPARQL query using a Knowledge Graph. The goal is to find out if \" ,\n  \"Joe's Bed-Stuy Barbershop: We Cut Heads\" ,\n  \"a costume designer's employer\" ,\n  \"is a producer of Joe's Bed-Stuy Barbershop: We Cut Heads\" ,\n  \"We Cut Heads\" ,\n  \"Joe's Barbershop\" ,\n  \"Barbershop\" ,\n  \"Producers\" ,\n  \"Produce\" ,\n  \"Produce by\" ,\n  \"Produce the\" ,\n  \"Produce work\" ,\n  \"Produce work: We Cut Heads\" ,\n  \"Produce work: We Cut Heads by\" ,\n  \"Produce work: We Cut Heads by Joe's Barbershop\" ,\n  \"Producers of work: We Cut Heads\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop\" ,\n  \"Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P108 ?y . ?x p:P106 ?z . ?y p:P272 ?w . ?w p:Q1323191 . } ] }<think></think>Alright, let's tackle this problem step by step. So, the user wants to translate a specific question into a SPARQL query using a Knowledge Graph. The goal is to find out if Joe's Bed-Stuy Barbershop: We Cut Heads a costume designer's employer is a producer of Joe's Bed-Stuy Barbershop: We Cut Heads We Cut Heads Joe's Barbershop Barbershop Producers Produce Produce by Produce the Produce work Produce work: We Cut Heads Produce work: We Cut Heads by Produce work: We Cut Heads by Joe's Barbershop Producers of work: We Cut Heads Producers of work: We Cut Heads by Joe's Barbershop Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop Producers of work: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads by Joe's Barbershop: We Cut Heads LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?s\" , \"P3373\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"\", \"?p\", \"\\\"\", \"?o\", \"\\\"", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]}\n  \t\t\t\t\t \t\t \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [ \"SELECT DISTINCT ?company WHERE {\", \"?company wdt:P108 wd:Q67134 .\", \"?company wdt:P40 wdt:P355 .\", \"?company wdt:P31 .\", \"?company wdt:P108 wd:Q4830453 .\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?company WHERE { ?company wdt:P108 wd:Q67134 . ?company wdt:P40 wdt:P355 . ?company wdt:P31 . ?company wdt:P108 wd:Q4830453 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{ \"query\": [ \"SELECT DISTINCT ?d WHERE {\", \"? Claire Doutriaux\" , \"wv:is a wdt:P31 ; wdt:P750 ; wdt:P108 .\", \"OPTIONAL {\", \"? Claire Doutriaux\" , \"wdt:P108 ; ?d .\", \"}\" ] } ", "normal_query": "SELECT DISTINCT ?d WHERE { ? Claire Doutriaux wv:is a wdt:P31 ; wdt:P750 ; wdt:P108 . OPTIONAL { ? Claire Doutriaux wdt:P108 ; ?d . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P108 ?y . ?x p:P750 ?z . ?x p:P31 ?w . }\", \"?x\" ] }\n        \t\t\t\t\t  \t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P108 ?y . ?x p:P750 ?z . ?x p:P31 ?w . } ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P750 wd:Q1651543 . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P750 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{ \"query\": [\"SELECT * FROM ...\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ... LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE ?item wdt:P106 \\\"Mark Sylwan\\\" AND ?item wdt:P27 \\\"Q34\\\" AND ?item wdt:P26 \\\"Q6200573\\\" AND ?item wdt:P27 \\\"Q34\\\" AND ?item wdt:P26 \\\"Q6200573\\\"\" ] } ", "normal_query": "SELECT DISTINCT ?item WHERE ?item wdt:P106 \"Mark Sylwan\" AND ?item wdt:P27 \"Q34\" AND ?item wdt:P26 \"Q6200573\" AND ?item wdt:P27 \"Q34\" AND ?item wdt:P26 \"Q6200573\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a P106 ;\", \"  ?y p27 ;\", \"  ?z p26 ;\", \"  ?w p34 ;\", \"  ?v p5786 ;\", \"  ?u p26 ;\", \"  ?t p27 ;\", \"  ?s p106 ;\", \"  ?q a Q6200573 ;\", \"  ?p p26 ;\", \"  ?o p27 ;\", \"  ?n p106 ;\", \"  ?m p26 ;\", \"  ?l p27 ;\", \"  ?k p106 ;\", \"  ?j p26 ;\", \"  ?i p27 ;\", \"  ?h a Q34 ;\", \"  ?g p5786 ;\", \"  ?f p26 ;\", \"  ?e p27 ;\", \"  ?d p106 ;\", \"  ?c p26 ;\", \"  ?b p27 ;\", \"  ?a a Q1323191 ;\", \"  ?b p27 ;\", \"  ?c p26 ;\", \"  ?d p106 ;\", \"  ?e p27 ;\", \"  ?f p5786 ;\", \"  ?g a Q34 ;\", \"  ?h p26 ;\", \"  ?i p27 ;\", \"  ?j p106 ;\", \"  ?k p26 ;\", \"  ?l p27 ;\", \"  ?m p5786 ;\", \"  ?n a Q34 ;\", \"  ?o p26 ;\", \"  ?p p27 ;\", \"  ?q p106 ;\", \"  ?r a kg:0399\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a P106 ; ?y p27 ; ?z p26 ; ?w p34 ; ?v p5786 ; ?u p26 ; ?t p27 ; ?s p106 ; ?q a Q6200573 ; ?p p26 ; ?o p27 ; ?n p106 ; ?m p26 ; ?l p27 ; ?k p106 ; ?j p26 ; ?i p27 ; ?h a Q34 ; ?g p5786 ; ?f p26 ; ?e p27 ; ?d p106 ; ?c p26 ; ?b p27 ; ?a a Q1323191 ; ?b p27 ; ?c p26 ; ?d p106 ; ?e p27 ; ?f p5786 ; ?g a Q34 ; ?h p26 ; ?i p27 ; ?j p106 ; ?k p26 ; ?l p27 ; ?m p5786 ; ?n a Q34 ; ?o p26 ; ?p p27 ; ?q p106 ; ?r a kg:0399 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P3373 ?o1 ;\", \" ?o1 wdt:P26 ?o2 ;\", \" ?o2 wdt:Q3356 ?s ;\", \" }\" ] }\n  \t\t\t\t\t\t\t \t\t\t\t\t\t\t \t\t", "normal_query": "SELECT DISTINCT ?s WHERE { ?s wdt:P3373 ?o1 ; ?o1 wdt:P26 ?o2 ; ?o2 wdt:Q3356 ?s ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{ \"query\": [\"SELECT DISTINCT ?s WHERE {\", \"?s P3373 ?o\" , \"  ?o P26 ?t\" , \"  ?t Q3356\" , \"  ?t Q3356\" , \"  ?t Q2045778\" , \"  ?t Q2045778\" , \"}\"] } ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s P3373 ?o ?o P26 ?t ?t Q3356 ?t Q3356 ?t Q2045778 ?t Q2045778 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [ \"SELECT DISTINCT ?distributor, ?producer WHERE {\", \"?distributor wdt:P750 wd:Q1651543 .\", \"?producer wdt:P750 wd:Q1651543 .\" ] } ", "normal_query": "SELECT DISTINCT ?distributor, ?producer WHERE { ?distributor wdt:P750 wd:Q1651543 . ?producer wdt:P750 wd:Q1651543 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{ \"query\": [\"SELECT * FROM ...\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ... LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s wdt:P27 wd:Q29999\" ]}\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?s WHERE { ?s wdt:P27 wd:Q29999 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x w ?y\" , \" }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x w ?y } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P27 wd:Q183\" , \" ?person wdt:P3373 wd:Q60414\" , \" ?person wdt:P108 wd:Q15789\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P27 wd:Q183 ?person wdt:P3373 wd:Q60414 ?person wdt:P108 wd:Q15789 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{ \"query\": [ \"SELECT DISTINCT ?d, ?p WHERE { ?d wdt:P750 wd:Q3715556 . } { ?p wdt:P272 wd:Q3715556 . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?d, ?p WHERE { ?d wdt:P750 wd:Q3715556 . } { ?p wdt:P272 wd:Q3715556 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{ \"query\": [\"SELECT * FROM ? WHERE ...\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ? WHERE ... LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?resource wdt:P162 ?p162 AND ?resource wdt:P272 ?p272 AND ?resource wdt:P58 ?p58 AND ?resource wdt:P272 ?p273\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P162 ?p162 AND ?resource wdt:P272 ?p272 AND ?resource wdt:P58 ?p58 AND ?resource wdt:P272 ?p273 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{ \"query\": [\"SELECT DISTINCT ?resource WHERE triple: ?resource P162 ?p \\nAND triple: ?resource P272 ?p2 \\nAND triple: ?resource P58 ?p3 \\nAND triple: ?resource Q888311 ?q\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple: ?resource P162 ?p AND triple: ?resource P272 ?p2 AND triple: ?resource P58 ?p3 AND triple: ?resource Q888311 ?q LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P27 wd:Q142 .\", \"?person wdt:P3373 P3373 ?sibling .\", \"?sibling wdt:P31 wd:Q1079409 .\", \"?\"] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P27 wd:Q142 . ?person wdt:P3373 P3373 ?sibling . ?sibling wdt:P31 wd:Q1079409 . ? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?z p:P27 ?w . ?v p:P3373 ?u . ?t p:P31 ?s . }\" ] }\n   \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?z p:P27 ?w . ?v p:P3373 ?u . ?t p:P31 ?s . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x wdt:P162 ?y . ?x wdt:P272 ?z . ?x wdt:P58 ?a . }\", \"?x\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P162 ?y . ?x wdt:P272 ?z . ?x wdt:P58 ?a . } ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P162 ?y . ?x p:P272 ?z . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P162 ?y . ?x p:P272 ?z . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P58 wd:Q8877 .\", \"?resource wdt:P1431 wd:Q75079 .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P58 wd:Q8877 . ?resource wdt:P1431 wd:Q75079 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :P1431 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > )\", \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :Q8877 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > )\", \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :P58 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > )\", \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :Q75079 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > )\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :P1431 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > ) SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :Q8877 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > ) SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :P58 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > ) SELECT DISTINCT ?resource WHERE triple = (SELECT ?p, ?s, ?o FROM :Q75079 WHERE ?p = < Steven Spielberg > AND ?s = < What was... > AND ?o = < Chris Columbus > ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [ \"SELECT DISTINCT ?distributor, ?producer WHERE { ?item wdt:P750 wd:Q1651543 }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?distributor, ?producer WHERE { ?item wdt:P750 wd:Q1651543 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{ \"query\": [\"SELECT * FROM ...\"] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ... LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\\n\", \"?person wdt:P40 ?parent.\\n\", \"?person wdt:P355 ?spouse.\\n\", \"?person wdt:P26 ?child.\\n\", \"?person wdt:P3373 ?sibling.\\n\", \"?person wdt:P26 ?spouse.\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P40 ?parent. ?person wdt:P355 ?spouse. ?person wdt:P26 ?child. ?person wdt:P3373 ?sibling. ?person wdt:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{ \"query\": [\"SELECT DISTINCT ?person WHERE {\", \"?person a schema:Person; \", \"schema:mother ?parent; \", \"schema:spouse ?spouse; \", \"schema:sibling ?sibling; \", \"schema:marriedTo ?marriaged_person.\"] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person a schema:Person; schema:mother ?parent; schema:spouse ?spouse; schema:sibling ?sibling; schema:marriedTo ?marriaged_person. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P27 ?p27; \", \"?p27 wdt:P26 ?p26; \", \"?p26 wdt:P21 ?p21; \", \"?p21 wdt:P106 ?p106; \", \"?p106 wdt:P27 ?p107; \", \"?p107 wdt:P26 ?p108; \", \"?p108 wdt:P21 ?p109; \", \"?p109 wdt:P106 ?p110; \" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?resource wdt:P27 ?p27; ?p27 wdt:P26 ?p26; ?p26 wdt:P21 ?p21; ?p21 wdt:P106 ?p106; ?p106 wdt:P27 ?p107; ?p107 wdt:P26 ?p108; ?p108 wdt:P21 ?p109; ?p109 wdt:P106 ?p110; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"https://www.w3.org/2004/02/sparql#contains\" , \"?p\" , \"https://www.wikidata.org/entity/Q233128\" , \"?y\" , \"http://example.com/costume-designer Jessica Drake\" , \"https://www.wikidata.org/entity/Q6581097\" , \"?z\" , \"https://www.wikidata.org/entity/Q16\" , \"https://www.wikidata.org/entity/Q233128\" , \"https://www.wikidata.org/entity/Q6581097\" , \"https://www.wikidata.org/entity/Q16\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x https://www.w3.org/2004/02/sparql ?p https://www.wikidata.org/entity/Q233128 ?y <http://example.com//costume-designer> Jessica Drake https://www.wikidata.org/entity/Q6581097 ?z https://www.wikidata.org/entity/Q16 https://www.wikidata.org/entity/Q233128 https://www.wikidata.org/entity/Q6581097 https://www.wikidata.org/entity/Q16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \", \"?resource wdt:P750 ?p1\", \"?p1 wdt:P155 ?p2\", \"?p2 wdt:P162 ?p3\", \"?p3 wdt:P272 ?p4\", \"?p4 wdt:P155 ?p5\", \"?p5 wdt:P162 ?p6\", \"?p6 wdt:P272 ?p7\", \"?p7 wdt:P155 ?p8\", \"?p8 wdt:P162 ?p9\", \"?p9 wdt:P272 ?p10\", \"?p10 wdt:P155 ?p11\", \"?p11 wdt:P162 ?p12\", \"?p12 wdt:P272 ?p13\", \"?p13 wdt:P155 ?p14\", \"?p14 wdt:P162 ?p15\", \"?p15 wdt:P272 ?p16\", \"?p16 wdt:P155 ?p17\", \"?p17 wdt:P162 ?p18\", \"?p18 wdt:P272 ?p19\", \"?p19 wdt:P155 ?p20\", \"?p20 wdt:P162 ?p21\", \"?p21 wdt:P272 ?p22\", \"?p22 wdt:P155 ?p23\", \"?p23 wdt:P162 ?p24\", \"?p24 wdt:P272 ?p25\", \"?p25 wdt:P155 ?p26\", \"?p26 wdt:P162 ?p27\", \"?p27 wdt:P272 ?p28\", \"?p28 wdt:P155 ?p29\", \"?p29 wdt:P162 ?p30\", \"?p30 wdt:P272 ?p31\", \"?p31 wdt:P155 ?p32\", \"?p32 wdt:P162 ?p33\", \"?p33 wdt:P272 ?p34\", \"?p34 wdt:P155 ?p35\", \"?p35 wdt:P162 ?p36\", \"?p36 wdt:P272 ?p37\", \"?p37 wdt:P155 ?p38\", \"?p38 wdt:P162 ?p39\", \"?p39 wdt:P272 ?p40\", \"?p40 wdt:P155 ?p41\", \"?p41 wdt:P162 ?p42\", \"?p42 wdt:P272 ?p43\", \"?p43 wdt:P155 ?p44\", \"?p44 wdt:P162 ?p45\", \"?p45 wdt:P272 ?p46\", \"?p46 wdt:P155 ?p47\", \"?p47 wdt:P162 ?p48\", \"?p48 wdt:P272 ?p49\", \"?p49 wdt:P155 ?p50\", \"?p50 wdt:P162 ?p51\", \"?p51 wdt:P272 ?p52\", \"?p52 wdt:P155 ?p53\", \"?p53 wdt:P162 ?p54\", \"?p54 wdt:P272 ?p55\", \"?p55 wdt:P155 ?p56\", \"?p56 wdt:P162 ?p57\", \"?p57 wdt:P272 ?p58\", \"?p58 wdt:P155 ?p59\", \"?p59 wdt:P162 ?p60\", \"?p60 wdt:P272 ?p61\", \"?p61 wdt:P155 ?p62\", \"?p62 wdt:P162 ?p63\", \"?p63 wdt:P272 ?p64\", \"?p64 wdt:P155 ?p65\", \"?p65 wdt:P162 ?p66\", \"?p66 wdt:P272 ?p67\", \"?p67 wdt:P155 ?p68\", \"?p68 wdt:P162 ?p", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{ \"query\": [ \"SELECT * FROM ?P ?O\" ] }\n      \t\t\t\t\t \t\t\t\t\t\t \t", "normal_query": "SELECT * FROM ?P ?O LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [ \"SELECT DISTINCT ?object WHERE {\", \"?person wdt:P127 ?company.\" , \"?person wdt:P40 ?parent.\" , \"?company wdt:P355 ?child.\" , \"?company wdt:P31 ?parent.\" , \"?child wdt:P749 ?parent.\" ] } ", "normal_query": "SELECT DISTINCT ?object WHERE { ?person wdt:P127 ?company. ?person wdt:P40 ?parent. ?company wdt:P355 ?child. ?company wdt:P31 ?parent. ?child wdt:P749 ?parent. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple = (SELECT ?p ?o FROM ...) \" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple = (SELECT ?p ?o FROM ...) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{ \"query\": [ \"SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P750 ?prod AND wdt:P272 ?distrib\", \"SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P112 ?prod AND wdt:P272 ?distrib\", \"SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P750 ?prod AND wdt:P112 ?distrib\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t \t ", "normal_query": "SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P750 ?prod AND wdt:P272 ?distrib SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P112 ?prod AND wdt:P272 ?distrib SELECT DISTINCT ?prod, ?distrib FROM wd:Q524849 WHERE wdt:P750 ?prod AND wdt:P112 ?distrib LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x ?p ?y ; ?y ?p ?z ; ?z ?p ?w . }\", \"kg:2817 is Q524849\", \"kg:4956 is P272\", \"kg:7881 is P112\", \"kg:8410 is P112\" ] }\n   \t\t\t\t\t \t\t \t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x ?p ?y ; ?y ?p ?z ; ?z ?p ?w . } kg:2817 is Q524849 kg:4956 is P272 kg:7881 is P112 kg:8410 is P112 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P3373 [something] ;\", \"  ?person wdt:P737 [something] ;\", \"  ?person wdt:P106 [something] ;\", \"  [other triples here] }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P3373 [something] ;  ?person wdt:P737 [something] ;  ?person wdt:P106 [something] ;  [other triples here] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P3373 wd:Q4811453\" ] }\n  \t\t\t\t\t\t\t \t\t\t\t\t\t\t \t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P3373 wd:Q4811453 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P1040 ?p1; \", \"?p1 wdt:P1040 ?p2; \", \"?p2 wdt:P1040 ?p3; \", \"?p3 wdt:P58 ?item; \", \"?p3 wdt:P1040 ?p4; \", \"?p4 wdt:P1040 ?p5; \", \"?p5 wdt:P1040 ?p6; \", \"?p6 wdt:P58 ?item; \" ] } ", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P1040 ?p1; ?p1 wdt:P1040 ?p2; ?p2 wdt:P1040 ?p3; ?p3 wdt:P58 ?item; ?p3 wdt:P1040 ?p4; ?p4 wdt:P1040 ?p5; ?p5 wdt:P1040 ?p6; ?p6 wdt:P58 ?item; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n    \"query\": [\n        \"SELECT * FROM wikitourist where wikitourist[\\\"kg:\\\"] = \\\"kg:4288\\\" AND wikitourist[\\\"kg:\\\"] = \\\"kg:4288\\\" AND wikitourist[\\\"kg:\\\"] = \\\"kg:4288\\\" AND wikitourist[\\\"kg:\\\"] = \\\"kg:3255\\\" AND wikitourist[\\\"kg:\\\"] = \\\"kg:3255\\\" AND wikitourist[\\\"kg:\\\"] = \\\"kg:0406\\\"\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM wikitourist where wikitourist[\"kg:\"] = \"kg:4288\" AND wikitourist[\"kg:\"] = \"kg:4288\" AND wikitourist[\"kg:\"] = \"kg:4288\" AND wikitourist[\"kg:\"] = \"kg:3255\" AND wikitourist[\"kg:\"] = \"kg:3255\" AND wikitourist[\"kg:\"] = \"kg:0406\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?person\" , \"P2515\" , \"?costume designer\", \"?costume designer\" , \"P3373\" , \"?film\" , \"P31\" , \"?country\", \"P27\" , \"?sibling\", \"?\" , \"?name\" , \"P29\" , \"?surname\" , \"P28\" , \"?age\" , \"P26\" , \"?gender\" , \"P25\" , \"?family name\" , \"P30\" , \"?address\" , \"P17\" , \"?phone number\" , \"P14\" , \"?email address\" , \"P9\" , \"?url\" , \"P8\" , \"?biography\" , \"P6\" , \"?place of birth\" , \"P5\" , \"?occupation\" , \"P2\" , \"?name\" , \"P30\" , \"?surname\" , \"P14\" , \"?email address\" , \"P9\" , \"?url\" , \"P8\" , \"?biography\" , \"P6\" , \"?place of birth\" , \"P5\" , \"?occupation\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?person P2515 ?costume designer ?costume designer P3373 ?film P31 ?country P27 ?sibling ? ?name P29 ?surname P28 ?age P26 ?gender P25 ?family name P30 ?address P17 ?phone number P14 ?email address P9 ?url P8 ?biography P6 ?place of birth P5 ?occupation P2 ?name P30 ?surname P14 ?email address P9 ?url P8 ?biography P6 ?place of birth P5 ?occupation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple pattern\", \"kg:2748 P2515 ?resource\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple pattern kg:2748 P2515 ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P106 \\\"Mattias Järvinen Palme\\\".\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P106 \"Mattias Järvinen Palme\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P106 wd:Q36834 ;\", \"    ?person wdt:P21 wd:Q6581072 ;\", \"    ?person wdt:P27 wd:Q34 ;\", \"    ?person wdt:P26 wd:kg:0594 ;\", \"    ?person wdt:P21 wd:kg:8271 ;\", \"    ?person wdt:P27 wd:kg:5568 ;\", \"    ?person wdt:P26 wd:kg:3276 ;\", \"    ?person wdt:P21 wd:kg:3276 ;\", \"    ?person wdt:P27 wd:kg:3276 ;\" ] }\n  \t\t\t\t\t  \t\t\t\t\t\t\t  \t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P106 wd:Q36834 ; ?person wdt:P21 wd:Q6581072 ; ?person wdt:P27 wd:Q34 ; ?person wdt:P26 wd:kg:0594 ; ?person wdt:P21 wd:kg:8271 ; ?person wdt:P27 wd:kg:5568 ; ?person wdt:P26 wd:kg:3276 ; ?person wdt:P21 wd:kg:3276 ; ?person wdt:P27 wd:kg:3276 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P1040 wd:Q20729551 .\", \"?item wdt:P162 wd:Q562108 .\", \"?item wdt:P272 wd:Q35979475 .\" ] } ", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P1040 wd:Q20729551 . ?item wdt:P162 wd:Q562108 . ?item wdt:P272 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?s WHERE ?p1 = [Q20729551] AND ?p2 = [P1040] AND ?p3 = [Q562108]\"\n    ]\n}\n  \t\t\t\t     \t\t \t \t \t ", "normal_query": "SELECT * FROM ?s WHERE ?p1 = [Q20729551] AND ?p2 = [P1040] AND ?p3 = [Q562108] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]} ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]} ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P1040 ?p1; \", \"?p1 wdt:P1040 ?p2; \", \"?p2 wdt:P1040 ?p3; \", \"?p3 wdt:P58 ?item; \", \" }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P1040 ?p1; ?p1 wdt:P1040 ?p2; ?p2 wdt:P1040 ?p3; ?p3 wdt:P58 ?item; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?uri WHERE \"\n       ,\n        \"    ?uri P1040 ?p1\",\n        \"    AND ?uri P1040 ?p2\",\n        \"    AND ?uri P1040 ?p3\"\n    ]\n}\n  \t \t\t\t\t\t\t \t\t\t\t\t \t\t\t", "normal_query": "SELECT DISTINCT ?uri WHERE ?uri P1040 ?p1 AND ?uri P1040 ?p2 AND ?uri P1040 ?p3 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE { ?item wdt:P1040 ?p . }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P58 ?p . }\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P1040 ?p . } SELECT DISTINCT ?item WHERE { ?item wdt:P58 ?p . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wikitext kg:6826 {\", \"  filterLanguage(\" , \"en\", \"en\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"true\" , \"false\" , \"", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P1040 wd:Q20729551 .\", \"?item wdt:P162 wd:Q562108 .\", \"?item wdt:P272 wd:Q35979475 .\" ] } ", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P1040 wd:Q20729551 . ?item wdt:P162 wd:Q562108 . ?item wdt:P272 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P1040 ?y . ?x p:P1040 ?z . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P1040 ?y . ?x p:P1040 ?z . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE wdt:P1431 ?p1431 AND wdt:P162 ?p162 AND wdt:P272 ?p272 AND wdt:P1431 ?p1431_1 AND wdt:P162 ?p162_1 AND wdt:P272 ?p272_1 AND wdt:P1431 ?p1431_2 AND wdt:P162 ?p162_2 AND wdt:P272 ?p272_2\", \"http://www.wikidata.org/entity/Q43994\", \"http://www.wikidata.org/entity/Q95125\", \"http://www.wikidata.org/entity/Q365090\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE wdt:P1431 ?p1431 AND wdt:P162 ?p162 AND wdt:P272 ?p272 AND wdt:P1431 ?p1431_1 AND wdt:P162 ?p162_1 AND wdt:P272 ?p272_1 AND wdt:P1431 ?p1431_2 AND wdt:P162 ?p162_2 AND wdt:P272 ?p272_2 wd:Q43994 wd:Q95125 wd:Q365090 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple pattern\", \"kg:1033 IS P1431\", \"kg:0211 IS Q43994\", \"kg:1033 IS P1431\", \"kg:8925 IS Q95125\", \"kg:1033 IS P1431\", \"kg:2822 IS Q365090\", \"kg:1348 IS P162\", \"kg:0318 IS P272\", \"kg:0211 IS Q43994\", \"kg:1348 IS P162\", \"kg:0318 IS P272\", \"kg:8925 IS Q95125\", \"kg:1348 IS P162\", \"kg:0318 IS P272\", \"kg:2822 IS Q365090\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?resource WHERE triple pattern kg:1033 IS P1431 kg:0211 IS Q43994 kg:1033 IS P1431 kg:8925 IS Q95125 kg:1033 IS P1431 kg:2822 IS Q365090 kg:1348 IS P162 kg:0318 IS P272 kg:0211 IS Q43994 kg:1348 IS P162 kg:0318 IS P272 kg:8925 IS Q95125 kg:1348 IS P162 kg:0318 IS P272 kg:2822 IS Q365090 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?person WHERE \"\n       ,\n        \"    ?p1 P21 ?p2 \"\n        ,\n        \"    AND ?p2 P3373 ?sibling \"\n        ,\n        \"    AND ?p2 P26 ?spouse \"\n        ,\n        \"    AND ?p1 = wd:Q6581072 \"\n        ,\n        \"    AND ?sibling = wd:Q3345 \"\n        ,\n        \"    AND ?spouse = wd:Q3340 \"\n        ,\n        \"    ORDER BY ?person DESC \"\n        ,\n        \"    LIMIT 1\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE ?p1 P21 ?p2 AND ?p2 P3373 ?sibling AND ?p2 P26 ?spouse AND ?p1 = wd:Q6581072 AND ?sibling = wd:Q3345 AND ?spouse = wd:Q3340 ORDER BY ?person DESC LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" ]}\n  \t \t\t\t\t\t\t \t\t\t\t\t\t \t ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P57 ?p1.\" , \"?p1 wdt:P57 ?p2.\" , \"?p2 wdt:P57 ?p3.\" , \"?p3 wdt:P57 ?p4.\" , \"?p4 wdt:P57 ?p5.\" , \"?p5 wdt:P57 ?p6.\" , \"?p6 wdt:P57 ?p7.\" , \"?p7 wdt:P57 ?p8.\" , \"?p8 wdt:P57 ?p9.\" , \"?p9 wdt:P57 ?p10.\" , \"?p10 wdt:P57 ?p11.\" , \"?p11 wdt:P57 ?p12.\" , \"?p12 wdt:P57 ?p13.\" , \"?p13 wdt:P57 ?p14.\" , \"?p14 wdt:P57 ?p15.\" , \"?p15 wdt:P57 ?p16.\" , \"?p16 wdt:P57 ?p17.\" , \"?p17 wdt:P57 ?p18.\" , \"?p18 wdt:P57 ?p19.\" , \"?p19 wdt:P57 ?p20.\" , \"?p20 wdt:P57 ?p21.\" , \"?p21 wdt:P57 ?p22.\" , \"?p22 wdt:P57 ?p23.\" , \"?p23 wdt:P57 ?p24.\" , \"?p24 wdt:P57 ?p25.\" , \"?p25 wdt:P57 ?p26.\" , \"?p26 wdt:P57 ?p27.\" , \"?p27 wdt:P57 ?p28.\" , \"?p28 wdt:P57 ?p29.\" , \"?p29 wdt:P57 ?p30.\" , \"?p30 wdt:P57 ?p31.\" , \"?p31 wdt:P57 ?p32.\" , \"?p32 wdt:P57 ?p33.\" , \"?p33 wdt:P57 ?p34.\" , \"?p34 wdt:P57 ?p35.\" , \"?p35 wdt:P57 ?p36.\" , \"?p36 wdt:P57 ?p37.\" , \"?p37 wdt:P57 ?p38.\" , \"?p38 wdt:P57 ?p39.\" , \"?p39 wdt:P57 ?p40.\" , \"?p40 wdt:P57 ?p41.\" , \"?p41 wdt:P57 ?p42.\" , \"?p42 wdt:P57 ?p43.\" , \"?p43 wdt:P57 ?p44.\" , \"?p44 wdt:P57 ?p45.\" , \"?p45 wdt:P57 ?p46.\" , \"?p46 wdt:P57 ?p47.\" , \"?p47 wdt:P57 ?p48.\" , \"?p48 wdt:P57 ?p49.\" , \"?p49 wdt:P57 ?p50.\" , \"?p50 wdt:P57 ?p51.\" , \"?p51 wdt:P57 ?p52.\" , \"?p52 wdt:P57 ?p53.\" , \"?p53 wdt:P57 ?p54.\" , \"?p54 wdt:P57 ?p55.\" , \"?p55 wdt:P57 ?p56.\" , \"?p56 wdt:P57 ?p57.\" , \"?p57 wdt:P57 ?p58.\" , \"?p58 wdt:P57 ?p59.\" , \"?p59 wdt:P57 ?p60.\" , \"?p60 wdt:P57 ?p61.\" , \"?p61 wdt:P57 ?p62.\" , \"?p62 wdt:P57 ?p63.\" , \"?p63 wdt:P57 ?p64.\" , \"?p64 wdt:P57 ?p65.\" , \"?p65 wdt:P57 ?p66.\" , \"?p66 wdt:P57 ?p67.\" , \"?p67 wdt:P57 ?p68.\" , \"?p68 wdt:P57 ?p", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource\" ]} ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11\", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11\", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11\" ]}\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11 SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11 SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P161 ?p2 AND wdt:P1040 ?p3 AND wdt:P161 ?p4 AND wdt:P1040 ?p5 AND wdt:P161 ?p6 AND wdt:P1040 ?p7 AND wdt:P161 ?p8 AND wdt:P1040 ?p9 AND wdt:P161 ?p10 AND wdt:P1040 ?p11 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x[?P106] = 'Tom at the Farm' AND ?x[?Q2336453] = 'Heartbeats' AND ?x[?Q2615443] = 'Laurence Anyways'\"\n    ]\n}\n  \t \t \t\t\t\t\t \t \t \t\t\t\t", "normal_query": "SELECT * FROM ?x WHERE ?x[?P106] = 'Tom at the Farm' AND ?x[?Q2336453] = 'Heartbeats' AND ?x[?Q2615443] = 'Laurence Anyways' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?person WHERE {\\n\", \"    ?person wdt:P31 wd:Q5.\\n\", \"    ?person wdt:P161 [wikipedia:ShanghaiIdentified].\\n\", \"    ?person wdt:P161 [wikipedia:ModernTimes].\\n\", \"    ?person wdt:P161 [wikipedia:TheProfessor].\\n\", \"}\"\n    ]\n}\n  \t \t\t \t\t\t\t\t\t \t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE {     ?person wdt:P31 wd:Q5.     ?person wdt:P161 [wikipedia:ShanghaiIdentified].     ?person wdt:P161 [wikipedia:ModernTimes].     ?person wdt:P161 [wikipedia:TheProfessor]. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P31 wd:Q5.\" , \"?person wdt:P161 [something].\" , \"?person wdt:P161 [something].\" , \"?person wdt:P161 [something].\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P161 [something]. ?person wdt:P161 [something]. ?person wdt:P161 [something]. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{ \"query\": [ \"SELECT DISTINCT ?editor, ?director WHERE {\", \"?editor wdt:P57 ?publication\", \"\\n\", \"?editor wdt:P1040 ?editorRelated\", \"\\n\", \"?editor wdt:P57 ?publication\", \"\\n\", \"?director wdt:P57 ?publication\", \"\\n\", \"?director wdt:P1040 ?director\", \"\\n\", \"?director wdt:P57 ?publication\" ] } ", "normal_query": "SELECT DISTINCT ?editor, ?director WHERE { ?editor wdt:P57 ?publication ?editor wdt:P1040 ?editorRelated ?editor wdt:P57 ?publication ?director wdt:P57 ?publication ?director wdt:P1040 ?director ?director wdt:P57 ?publication LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v1 a kg:1842 ;\", \"  ?p1 p57 ?v2 ;\", \"  ?v2 p1040 ?r ;\", \"  ?v3 a kg:3767 ;\", \"  ?v3 p57 ?v4 ;\", \"  ?v4 p1040 ?r ;\", \"  ?v5 a kg:1625 ;\", \"  ?v5 p57 ?v6 ;\", \"  ?v6 p1040 ?r ;\", \"  ?v7 a kg:0187 ;\", \"  ?v7 p57 ?v8 ;\", \"  ?v8 p1040 ?r ;\", \"  ?v9 a kg:5240 ;\", \"  ?v9 p57 ?v10 ;\", \"  ?v10 p1040 ?r ;\", \"  ?v11 a kg:6722 ;\", \"  ?v11 p57 ?v12 ;\", \"  ?v12 p1040 ?r ;\", \"  ?v13 a kg:3767 ;\", \"  ?v13 p57 ?v14 ;\", \"  ?v14 p1040 ?r ;\", \"  ?v15 a kg:1625 ;\", \"  ?v15 p57 ?v16 ;\", \"  ?v16 p1040 ?r ;\", \"  ?v17 a kg:0187 ;\", \"  ?v17 p57 ?v18 ;\", \"  ?v18 p1040 ?r ;\", \"  ?v19 a kg:5240 ;\", \"  ?v19 p57 ?v20 ;\", \"  ?v20 p1040 ?r ;\", \"  ?v21 a kg:6722 ;\", \"  ?v21 p57 ?v22 ;\", \"  ?v22 p1040 ?r ;\", \"  ?v23 a kg:3767 ;\", \"  ?v23 p57 ?v24 ;\", \"  ?v24 p1040 ?r ;\", \"  ?v25 a kg:1625 ;\", \"  ?v25 p57 ?v26 ;\", \"  ?v26 p1040 ?r ;\", \"  ?v27 a kg:0187 ;\", \"  ?v27 p57 ?v28 ;\", \"  ?v28 p1040 ?r ;\", \"  ?v29 a kg:5240 ;\", \"  ?v29 p57 ?v30 ;\", \"  ?v30 p1040 ?r ;\", \"  ?v31 a kg:6722 ;\", \"  ?v31 p57 ?v32 ;\", \"  ?v32 p1040 ?r ;\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?v1 a kg:1842 ; ?p1 p57 ?v2 ; ?v2 p1040 ?r ; ?v3 a kg:3767 ; ?v3 p57 ?v4 ; ?v4 p1040 ?r ; ?v5 a kg:1625 ; ?v5 p57 ?v6 ; ?v6 p1040 ?r ; ?v7 a kg:0187 ; ?v7 p57 ?v8 ; ?v8 p1040 ?r ; ?v9 a kg:5240 ; ?v9 p57 ?v10 ; ?v10 p1040 ?r ; ?v11 a kg:6722 ; ?v11 p57 ?v12 ; ?v12 p1040 ?r ; ?v13 a kg:3767 ; ?v13 p57 ?v14 ; ?v14 p1040 ?r ; ?v15 a kg:1625 ; ?v15 p57 ?v16 ; ?v16 p1040 ?r ; ?v17 a kg:0187 ; ?v17 p57 ?v18 ; ?v18 p1040 ?r ; ?v19 a kg:5240 ; ?v19 p57 ?v20 ; ?v20 p1040 ?r ; ?v21 a kg:6722 ; ?v21 p57 ?v22 ; ?v22 p1040 ?r ; ?v23 a kg:3767 ; ?v23 p57 ?v24 ; ?v24 p1040 ?r ; ?v25 a kg:1625 ; ?v25 p57 ?v26 ; ?v26 p1040 ?r ; ?v27 a kg:0187 ; ?v27 p57 ?v28 ; ?v28 p1040 ?r ; ?v29 a kg:5240 ; ?v29 p57 ?v30 ; ?v30 p1040 ?r ; ?v31 a kg:6722 ; ?v31 p57 ?v32 ; ?v32 p1040 ?r ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P57 wd:Q1137372 .\", \"?resource wdt:P57 wd:Q3772 .\" , \"?resource wdt:P57 wd:Q47284 .\" , \"?resource wdt:P57 wd:Q549956 .\" , \"?resource wdt:P57 wd:Q2838329 .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P57 wd:Q1137372 . ?resource wdt:P57 wd:Q3772 . ?resource wdt:P57 wd:Q47284 . ?resource wdt:P57 wd:Q549956 . ?resource wdt:P57 wd:Q2838329 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n    \"query\": [\n        \"?x p:P57 ?y.\"\n    ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "?x p:P57 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P57 wd:Q3977597 .\", \"__main__\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P57 wd:Q3977597 . __main__ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n    \"query\": [\n        \"?x p:P57 ?y\",\n        \"?y p:P57 ?z\",\n        \"SELECT DISTINCT ?y WHERE ?x p:P57 ?y\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "?x p:P57 ?y ?y p:P57 ?z SELECT DISTINCT ?y WHERE ?x p:P57 ?y LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?v WHERE {\", \"?p1\" , \"=\", \"\\\"George Lucas\\\"\" , \" }\", \"{\", \"?p2\", \"=\", \"P1040\", \" }\", \"{\", \"?p3\", \"=\", \"P1431\", \" }\", \"{\", \"?p4\", \"=\", \"P58\", \" }\", \"{\", \"?p5\", \"=\", \"P272\", \" }\", \"{\", \"?p6\", \"=\", \"P162\", \" }\", \"}\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?p, ?v WHERE { ?p1 = \"George Lucas\" } { ?p2 = P1040 } { ?p3 = P1431 } { ?p4 = P58 } { ?p5 = P272 } { ?p6 = P162 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{ \"query\": [\"SELECT DISTINCT b.* FROM Thing a, Thing b WHERE a[\\\"kg:2961\\\"] = b[\\\"kg:2686\\\"] AND a[\\\"kg:4247\\\"] = b[\\\"kg:Q38222\\\"] AND a[\\\"kg:7271\\\"] = b[\\\"kg:P162\\\"] AND a[\\\"kg:2977\\\"] = b[\\\"kg:P272\\\"] AND a[\\\"kg:3833\\\"] = b[\\\"kg:P58\\\"] AND a[\\\"kg:4247\\\"] = b[\\\"kg:Q38222\\\"]\", \"limit\" ]\n  } ", "normal_query": "SELECT DISTINCT b.* FROM Thing a, Thing b WHERE a[\"kg:2961\"] = b[\"kg:2686\"] AND a[\"kg:4247\"] = b[\"kg:Q38222\"] AND a[\"kg:7271\"] = b[\"kg:P162\"] AND a[\"kg:2977\"] = b[\"kg:P272\"] AND a[\"kg:3833\"] = b[\"kg:P58\"] AND a[\"kg:4247\"] = b[\"kg:Q38222\"] limit LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE { ?w wdt:P1040 wd:Q972787 }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wdt:P1040 wd:Q972787 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x[?P1040] = [Q972787] AND ?x[?P1040] = [Q672061] ) OR ( ?x[?P1040] = [Q3141131] ) )\", \"kg:5020 is P1040\", \"kg:1090 is Q672061\", \"kg:7506 is Q3141131\", \"kg:8835 is P108\", \"kg:6665 is Q909176\" ] }\n  \t\t\t\t\t\t\t  \t\t\t\t\t\t\t  ", "normal_query": "SELECT * FROM ?x WHERE ( ?x[?P1040] = [Q972787] AND ?x[?P1040] = [Q672061] ) OR ( ?x[?P1040] = [Q3141131] ) ) kg:5020 is P1040 kg:1090 is Q672061 kg:7506 is Q3141131 kg:8835 is P108 kg:6665 is Q909176 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P1431 wd:Q819109 .\", \"?resource wdt:P162 wd:Q81520 .\", \"?resource wdt:P272 wd:Q381545 .\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P1431 wd:Q819109 . ?resource wdt:P162 wd:Q81520 . ?resource wdt:P272 wd:Q381545 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n    \"query\": [\n        \"?item a <kg:6811> {\\\"answers\\\": [\\\"Bob Yari\\\", \\\"Pierce Brosnan\\\", \\\"Toby Emmerich\\\", \\\"Elie Samaha\\\"]}\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t  \t \t \t", "normal_query": "?item a <kg:6811> {\"answers\": [\"Bob Yari\", \"Pierce Brosnan\", \"Toby Emmerich\", \"Elie Samaha\"]} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?resource wdt:P1040 ?p1040; \", \"?p1040 wdt:P1431 ?p1431; \", \"?p1431 wdt:P162 ?p162; \", \"?p162 wdt:P272 ?p272; \", \"?p272 wdt:P58 ?p58; \", \"?p58 wdt:P1040 ?resource; \" ] }\n  \t \t \t \t\t\t\t\t \t \t \t ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P1040 ?p1040; ?p1040 wdt:P1431 ?p1431; ?p1431 wdt:P162 ?p162; ?p162 wdt:P272 ?p272; ?p272 wdt:P58 ?p58; ?p58 wdt:P1040 ?resource; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{ \"query\": [ \"SELECT * FROM ?q WHERE ( ?p1 OP ?v1 ) AND ( ?p2 OP ?v2 ) AND ( ?p3 OP ?v3 )\" ] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT * FROM ?q WHERE ( ?p1 OP ?v1 ) AND ( ?p2 OP ?v2 ) AND ( ?p3 OP ?v3 ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P57 [P57] {\", \"\\\"Jørgen Leth\\\"[L1] \\\"Jens Jørgen Thorsen\\\"[L2] \\\"Ole John\\\"[L3]}\", \";\", \"?item wdt:P1040 [P1040] {\", \"\\\"Jørgen Leth\\\"[L1] \\\"Jens Jørgen Thorsen\\\"[L2] \\\"Ole John\\\"[L3]}\", \";\", \"?item wdt:P58 [P58] {\", \"\\\"Jørgen Leth\\\"[L1] \\\"Jens Jørgen Thorsen\\\"[L2] \\\"Ole John\\\"[L3]}\" , \" }\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P57 [P57] { \"Jørgen Leth\"[L1] \"Jens Jørgen Thorsen\"[L2] \"Ole John\"[L3]} ; ?item wdt:P1040 [P1040] { \"Jørgen Leth\"[L1] \"Jens Jørgen Thorsen\"[L2] \"Ole John\"[L3]} ; ?item wdt:P58 [P58] { \"Jørgen Leth\"[L1] \"Jens Jørgen Thorsen\"[L2] \"Ole John\"[L3]} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://www.w3.org/2000/01/rdfs#range\" , \"https://www.wikidata.org/entity/Q562108\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x <http://www.w3.org/2000/01//rdfs> https://www.wikidata.org/entity/Q562108 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P57 ?p1 ; wdt:P57 ?p2 ; wdt:P57 ?p3 ; wdt:P1040 ?q1 ; wdt:P1040 ?q2 ; wdt:P1040 ?q3 .\", \"  ?item wdt:P58 ?p4 ; wdt:P58 ?p5 ; wdt:P58 ?p6 .\" ]}\n  \t\t\t\t\t \t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P57 ?p1 ; wdt:P57 ?p2 ; wdt:P57 ?p3 ; wdt:P1040 ?q1 ; wdt:P1040 ?q2 ; wdt:P1040 ?q3 .   ?item wdt:P58 ?p4 ; wdt:P58 ?p5 ; wdt:P58 ?p6 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wikitext\" , \"http://www.wikipedia.org/wiki/Property:P57\" , \"?r\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wikitext <http://www.wikipedia.org/wiki//Property:P57> ?r LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND (wdt:P344 ?p3 OR wdt:P344 ?p4) \", \"SELECT DISTINCT ?item WHERE wdt:P106 ?p1 AND wdt:P57 ?p2 AND (wdt:P57 ?p3 OR wdt:P57 ?p", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x[?P106] = 'Cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday' AND ?x[?Q3282637] = 'film producer'\"\n    ]\n}\n  \t\t\t\t\t \t \t\t\t\t\t \t \t\t", "normal_query": "SELECT * FROM ?x WHERE ?x[?P106] = 'Cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday' AND ?x[?Q3282637] = 'film producer' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND wdt:P344 ?p3 AND wdt:P344 ?p4\", \"http://www.wikidata.org/entity/Q33999\", \"http://www.wikidata.org/entity/Q3485595\", \"http://www.wikidata.org/entity/Q1473406\", \"http://www.wikidata.org/entity/Q3016313\", \"http://www.wikidata.org/entity/Q862058\" ]}\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE wdt:P106 ?p1 AND wdt:P344 ?p2 AND wdt:P344 ?p3 AND wdt:P344 ?p4 wd:Q33999 wd:Q3485595 wd:Q1473406 wd:Q3016313 wd:Q862058 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x wikitext.\",\n        \"http://example.org/sparql#prefixes\",\n        \";base http://example.org/sparql#base\"\n        ,\n        \"?x wikitext kg:0059 P106.\"\n        , \"?x wikitext kg:5148 Q33999.\"\n        , \"?x wikitext kg:9749 Q3485595.\"\n        , \"?x wikitext kg:5460 P344.\"\n        , \"?x wikitext kg:8843 Q1473406.\"\n        , \"?x wikitext kg:6182 Q3016313.\"\n        , \"?x wikitext kg:9120 Q862058.\"\n    ]\n}\n    \t\t\t\t     \t\t\t\t\t\t ", "normal_query": "SELECT * FROM ?x WHERE ?x wikitext. <http://example.org//sparql> ;base <http://example.org//sparql> ?x wikitext kg:0059 P106. ?x wikitext kg:5148 Q33999. ?x wikitext kg:9749 Q3485595. ?x wikitext kg:5460 P344. ?x wikitext kg:8843 Q1473406. ?x wikitext kg:6182 Q3016313. ?x wikitext kg:9120 Q862058. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\"query\": [ \"SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000\", \"SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000\", \"SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000\"]}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000 SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000 SELECT DISTINCT ?resource WHERE wdt:P57 ?p1 AND wdt:P57 ?p2 AND wdt:P57 ?p3 AND wdt:P1431 ?p4 AND wdt:P58 ?p5 ORDER BY ?p1 ASC LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE triple pattern\", \"kg:7157\", \"P57\", \"?resource\" ] }\n  \t\t\t\t\t \t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE triple pattern kg:7157 P57 ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?p WHERE {\", \"?p wdt:P57 {\", \"\\\"Ole John\\\" wdt:P57 \\\"Jens Jørgen Thorsen\\\"\", \"\\\"Jens Jørgen Thorsen\\\" wdt:P57 \\\"Jørgen Leth\\\"\" , \"\\\"Jørgen Leth\\\" wdt:P57 \\\"Ole John\\\"\" , \"\\\"Ole John\\\" wdt:P1040 \\\"Q562108\\\"\", \"\\\"Jens Jørgen Thorsen\\\" wdt:P1040 \\\"Q1687239\\\"\", \"\\\"Jørgen Leth\\\" wdt:P1040 \\\"Q35979475\\\"\" , \"\\\"Ole John\\\" wdt:P58 \\\"Q562108\\\"\", \"\\\"Jens Jørgen Thorsen\\\" wdt:P58 \\\"Q1687239\\\"\", \"\\\"Jørgen Leth\\\" wdt:P58 \\\"Q35979475\\\"\" ] } ", "normal_query": "SELECT DISTINCT ?p WHERE { ?p wdt:P57 { \"Ole John\" wdt:P57 \"Jens Jørgen Thorsen\" \"Jens Jørgen Thorsen\" wdt:P57 \"Jørgen Leth\" \"Jørgen Leth\" wdt:P57 \"Ole John\" \"Ole John\" wdt:P1040 \"Q562108\" \"Jens Jørgen Thorsen\" wdt:P1040 \"Q1687239\" \"Jørgen Leth\" wdt:P1040 \"Q35979475\" \"Ole John\" wdt:P58 \"Q562108\" \"Jens Jørgen Thorsen\" wdt:P58 \"Q1687239\" \"Jørgen Leth\" wdt:P58 \"Q35979475\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"P57\" , \"?y\" , \"http://example.com/SPARQL/\" , \"SELECT\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"http://example.com/SPARQL/\" , \"ASDF\" , \"", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?resource WHERE \"\n       ,\n        \"    ?p a wdt:P57; \"\n        ,\n        \"    ?p [w:Q679023]; \"\n        ,\n        \"    ?p ?r; \"\n        ,\n        \"    ?r a wdt:P58;\"\n        ,\n        \"    ?r w:Q3772;\"\n        ,\n        \"    ?r w:Q298255;\"\n        ,\n        \"    ?r w:Q679023;\"\n        ,\n        \"    ?r w:Q358714;\"\n        ,\n        \"    ?r w:Q47284;\"\n        ,\n        \"    ?r w:Q522057;\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?p a wdt:P57; ?p [w:Q679023]; ?p ?r; ?r a wdt:P58; ?r w:Q3772; ?r w:Q298255; ?r w:Q679023; ?r w:Q358714; ?r w:Q47284; ?r w:Q522057; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE (\"\n        ,\n        \"?x wdt:P57 ?y\" ,\n        \") AND (\" ,\n        \"?x wdt:P57 ?z\" ,\n        \") AND (\" ,\n        \"?x wdt:P57 ?a\" ,\n        \") AND (\" ,\n        \"?x wdt:P57 ?b\" ,\n        \") AND (\" ,\n        \"?x wdt:P57 ?c\" ,\n        \")\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ?x WHERE ( ?x wdt:P57 ?y ) AND ( ?x wdt:P57 ?z ) AND ( ?x wdt:P57 ?a ) AND ( ?x wdt:P57 ?b ) AND ( ?x wdt:P57 ?c ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58 AND wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58 AND wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58 AND wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58 AND wdt:P106 ?p106 AND wdt:P1040 ?p1040 AND wdt:P58 ?p58 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{ \"query\": [\"SELECT distinct ?r WHERE {\", \"?x a kg:5732 ;\", \"  ?p p106 ;\", \"  ?y kg:6262 ;\", \"  ?z kg:4507 ;\", \"  ?w kg:8984 ;\", \"  ?v kg:6212 ;\", \"  ?u a kg:3199 ;\", \"  ?t p58 ;\", \"  ?s kg:7497 ;\", \"  ?q a kg:4313 ;\", \"  ?o p1040 ;\", \"  ?m kg:6262 ;\", \"  ?n kg:4507 ;\", \"  ?k kg:8984 ;\", \"  ?j kg:6212 ;\", \"  ?i a kg:3199 ;\", \"  ?h p58 ;\", \"  ?g kg:7497 ;\", \"  ?f a kg:4313 ;\", \"  ?e p1040 ;\", \"  ?d kg:6262 ;\", \"  ?c p58 ;\", \"  ?b a kg:3199 ;\", \"  ?a p58 ;\", \"  ?z kg:4507 ;\", \"  ?y kg:6262 ;\", \"  ?x a kg:5732 ;\", \"  ?p p106 ;\", \"  ?o p1040 ;\", \"  ?m kg:6262 ;\", \"  ?n kg:4507 ;\", \"  ?k kg:8984 ;\", \"  ?j kg:6212 ;\", \"  ?i a kg:3199 ;\", \"  ?h p58 ;\", \"  ?g kg:7497 ;\", \"  ?f a kg:4313 ;\", \"  ?e p1040 ;\", \"  ?d kg:6212 ;\", \"  ?c p58 ;\", \"  ?b a kg:3199 ;\", \"  ?a p58 ;\", \"  ?z kg:4507 ;\", \"  ?y kg:6262 ;\", \"  ?x a kg:5732 ;\", \"  ?p p106 ;\", \"  ?o p1040 ;\", \"  ?m kg:6262 ;\", \"  ?n kg:4507 ;\", \"  ?k kg:8984 ;\", \"  ?j kg:6212 ;\", \"  ?i a kg:3199 ;\", \"  ?h p58 ;\", \"  ?g kg:7497 ;\", \"  ?f a kg:4313 ;\", \"  ?e p1040 ;\", \"  ?d kg:6212 ;\", \"  ?c p58 ;\", \"  ?b a kg:3199 ;\", \"  ?a p58 ;\"] } ", "normal_query": "SELECT distinct ?r WHERE { ?x a kg:5732 ; ?p p106 ; ?y kg:6262 ; ?z kg:4507 ; ?w kg:8984 ; ?v kg:6212 ; ?u a kg:3199 ; ?t p58 ; ?s kg:7497 ; ?q a kg:4313 ; ?o p1040 ; ?m kg:6262 ; ?n kg:4507 ; ?k kg:8984 ; ?j kg:6212 ; ?i a kg:3199 ; ?h p58 ; ?g kg:7497 ; ?f a kg:4313 ; ?e p1040 ; ?d kg:6262 ; ?c p58 ; ?b a kg:3199 ; ?a p58 ; ?z kg:4507 ; ?y kg:6262 ; ?x a kg:5732 ; ?p p106 ; ?o p1040 ; ?m kg:6262 ; ?n kg:4507 ; ?k kg:8984 ; ?j kg:6212 ; ?i a kg:3199 ; ?h p58 ; ?g kg:7497 ; ?f a kg:4313 ; ?e p1040 ; ?d kg:6212 ; ?c p58 ; ?b a kg:3199 ; ?a p58 ; ?z kg:4507 ; ?y kg:6262 ; ?x a kg:5732 ; ?p p106 ; ?o p1040 ; ?m kg:6262 ; ?n kg:4507 ; ?k kg:8984 ; ?j kg:6212 ; ?i a kg:3199 ; ?h p58 ; ?g kg:7497 ; ?f a kg:4313 ; ?e p1040 ; ?d kg:6212 ; ?c p58 ; ?b a kg:3199 ; ?a p58 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE wdt:P57 ?p AND wdt:P57 ?p2 AND ...\", \"I need to write a SPARQL query that selects the item (resource) where multiple properties are directed by and written by specific people.\"]\n}\n        \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE wdt:P57 ?p AND wdt:P57 ?p2 AND ... I need to write a SPARQL query that selects the item (resource) where multiple properties are directed by and written by specific people. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x p:P57 ?y ; rdfs:label \\\"Thomas Schnauz\\\" .\", \" ?x p:P57 ?y ; rdfs:label \\\"Peter Gould\\\" .\", \" ?x p:P57 ?y ; rdfs:label \\\"George Mastras\\\" .\", \" ?x p:P57 ?y ; rdfs:label \\\"Sam Catlin\\\" .\", \" ?x p:P57 ?y ; rdfs:label \\\"Vince Gilligan\\\" .\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P57 ?y ; rdfs:label \"Thomas Schnauz\" . ?x p:P57 ?y ; rdfs:label \"Peter Gould\" . ?x p:P57 ?y ; rdfs:label \"George Mastras\" . ?x p:P57 ?y ; rdfs:label \"Sam Catlin\" . ?x p:P57 ?y ; rdfs:label \"Vince Gilligan\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?w wikitext\" , \"http://www.unicode.org Ideographic characters\", \"P57\" , \"?w\" ] } ", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wikitext <http://www.unicode.org> Ideographic characters P57 ?w LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x IS A ?y ; p1 { kg:9462 } ASQ562108 ; p2 { kg:1278 } P1040 ; p3 { kg:9462 } ASQ562108 ; p4 { kg:1769 } Q1687239 ; p5 { kg:9462 } ASQ562108 ; p6 { kg:9839 } Q35979475 ; p7 { kg:1278 } P1040 ; p8 { kg:8696 } ASQ562108 ; p9 { kg:1278 } P1040 ; p10 { kg:1769 } Q1687239 ; p11 { kg:9839 } Q35979475 ; p12 { kg:0104 } P58 ; p13 { kg:8696 } ASQ562108 ; p14 { kg:0104 } P58 ; p15 { kg:1769 } Q1687239 ; p16 { kg:9839 } Q35979475. \" ] }\n  \t\t\t\t\t \t \t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x IS A ?y ; p1 { kg:9462 } ASQ562108 ; p2 { kg:1278 } P1040 ; p3 { kg:9462 } ASQ562108 ; p4 { kg:1769 } Q1687239 ; p5 { kg:9462 } ASQ562108 ; p6 { kg:9839 } Q35979475 ; p7 { kg:1278 } P1040 ; p8 { kg:8696 } ASQ562108 ; p9 { kg:1278 } P1040 ; p10 { kg:1769 } Q1687239 ; p11 { kg:9839 } Q35979475 ; p12 { kg:0104 } P58 ; p13 { kg:8696 } ASQ562108 ; p14 { kg:0104 } P58 ; p15 { kg:1769 } Q1687239 ; p16 { kg:9839 } Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE \" , \"?x wdt:P1431 ?y\" , \"AND ?y wdt:P58 ?z\" , \"AND ?z wdt:P106 ?w\" , \"AND ( ?w wdt:P279 [Q7042855] ) OR ( ?w wdt:P279 [Q3968346] ) OR ( ?w wdt:P279 [Q165713] ) OR ( ?w wdt:P279 [Q181803] ) OR ( ?w wdt:P279 [Q17738] ) )\" , \"ASKING FOR: Did a film editor executive produce and write Star Wars: Episode IV – A New Hope, Star Wars: Episode I – The Phantom Menace, Star Wars: Episode VI – Return of the Jedi, and Star Whores.\" , \"The possible entities and properties are:\" , \"wdt:P106 is P106\" , \"wd:Q7042855 is Q7042855\" , \"wd:Q3968346 is Q3968346\" , \"wdt:P1431 is P1431\" , \"wd:Q165713 is Q165713\" , \"wdt:P1431 is P1431\" , \"wd:Q181803 is Q181803\" , \"wdt:P1431 is P1431\" , \"wd:Q17738 is Q17738\" , \"wdt:P58 is P58\" , \"wd:Q165713 is Q165713\" , \"wdt:P58 is P58\" , \"wd:Q181803 is Q181803\" , \"wdt:P58 is P58\" , \"wd:Q17738 is Q17738\" , \"wdt:P58 is P58\" ] } ", "normal_query": "SELECT DISTINCT ?resource WHERE ?x wdt:P1431 ?y AND ?y wdt:P58 ?z AND ?z wdt:P106 ?w AND ( ?w wdt:P279 [Q7042855] ) OR ( ?w wdt:P279 [Q3968346] ) OR ( ?w wdt:P279 [Q165713] ) OR ( ?w wdt:P279 [Q181803] ) OR ( ?w wdt:P279 [Q17738] ) ) ASKING FOR: Did a film editor executive produce and write Star Wars: Episode IV – A New Hope, Star Wars: Episode I – The Phantom Menace, Star Wars: Episode VI – Return of the Jedi, and Star Whores. The possible entities and properties are: wdt:P106 is P106 wd:Q7042855 is Q7042855 wd:Q3968346 is Q3968346 wdt:P1431 is P1431 wd:Q165713 is Q165713 wdt:P1431 is P1431 wd:Q181803 is Q181803 wdt:P1431 is P1431 wd:Q17738 is Q17738 wdt:P58 is P58 wd:Q165713 is Q165713 wdt:P58 is P58 wd:Q181803 is Q181803 wdt:P58 is P58 wd:Q17738 is Q17738 wdt:P58 is P58 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{ \"query\": [\"SELECT distinct ?r WHERE {\", \"?x a kg:3716 ;\", \"  ?x p kg:2187 ;\", \"  ?x p kg:9541 ;\", \"  ?x p kg:1414 ;\", \"  ?x p kg:0616 ;\", \"  ?x p kg:1414 ;\", \"  ?x p kg:6923 ;\", \"  ?x p kg:1414 ;\", \"  ?x p kg:0095 ;\", \"  ?x p kg:1414 ;\", \"  ?x p kg:9541 ;\", \"  ?x p kg:4359 ;\", \"  ?x p kg:0616 ;\", \"  ?x p kg:4359 ;\", \"  ?x p kg:6923 ;\", \"  ?x p kg:4359 ;\", \"  ?x p kg:0095 ;\", \"  ?x p kg:4359 ;\", \"  ?x p kg:17738 ;\", \"  ?x p kg:58 ;\", \"  ?x p kg:165713 ;\", \"  ?x p kg:58 ;\", \"  ?x p r }\", \"]}\", \"format = json\"]\n}\n  \t\t\t\t\t \t\t\t \t \t \t \t\t", "normal_query": "SELECT distinct ?r WHERE { ?x a kg:3716 ; ?x p kg:2187 ; ?x p kg:9541 ; ?x p kg:1414 ; ?x p kg:0616 ; ?x p kg:1414 ; ?x p kg:6923 ; ?x p kg:1414 ; ?x p kg:0095 ; ?x p kg:1414 ; ?x p kg:9541 ; ?x p kg:4359 ; ?x p kg:0616 ; ?x p kg:4359 ; ?x p kg:6923 ; ?x p kg:4359 ; ?x p kg:0095 ; ?x p kg:4359 ; ?x p kg:17738 ; ?x p kg:58 ; ?x p kg:165713 ; ?x p kg:58 ; ?x p r } ]} format = json LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\\n\", \"?person wdt:P57 wd:Q20729551 .\\n\" ] }\n  \t\t\t\t\t \t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P57 wd:Q20729551 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n    \"query\": [\n        \"?itemType\" ,\n        \"?wasWrittenBy\" ,\n        \"?editedBy\" ,\n        \"?directedBy\" ,\n        \"?publisher\" ,\n        \"?datePublished\" ,\n        \"?description\" ,\n        \"?contentType\" ,\n        \"?language\" ,\n        \"?subject\" ,\n        \"?image\" ,\n        \"?identifier\" ,\n        \"?uri\" ,\n        \"?source\" ,\n        \"?isPartOf\" ,\n        \"?author\" ,\n        \"?creator\" ,\n        \"?publisher\" ,\n        \"?datePublished\" ,\n        \"?description\" ,\n        \"?contentType\" ,\n        \"?language\" ,\n        \"?subject\" ,\n        \"?image\" ,\n        \"?identifier\" ,\n        \"?uri\" ,\n        \"?source\" ,\n        \"?isPartOf\" ,\n        \"?author\" ,\n        \"?creator\"\n    ]\n}\n    \t        \t\t \t\t\t\t", "normal_query": "?itemType ?wasWrittenBy ?editedBy ?directedBy ?publisher ?datePublished ?description ?contentType ?language ?subject ?image ?identifier ?uri ?source ?isPartOf ?author ?creator ?publisher ?datePublished ?description ?contentType ?language ?subject ?image ?identifier ?uri ?source ?isPartOf ?author ?creator LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"?item:*\",\n        \"http://www.wikidata.org/entity/Q1869678\",\n        \":P344\",\n        \"http://www.wikidata.org/entity/Q613974\",\n        \":P58\",\n        \"http://www.wikidata.org/entity/Q208910\"\n    ]\n}\n  \t \t\t \t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "?item:* wd:Q1869678 :P344 wd:Q613974 :P58 wd:Q208910 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{ \"query\": [ \"SELECT * FROM ?s WHERE (EXACT(?p, 'P344') AND EXACT(?o, 'Q613974')) OR (EXACT(?p, 'P1431') AND EXACT(?o, 'Q208910')) OR (EXACT(?p, 'P58') AND EXACT(?o, 'Q192403')))\", \"kg:9326 is Q1869678\", \"kg:3874 is P344\", \"kg:4082 is Q613974\", \"kg:2100 is Q208910\", \"kg:8975 is P58\", \"kg:8975 is P58\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM ?s WHERE (EXACT(?p, 'P344') AND EXACT(?o, 'Q613974')) OR (EXACT(?p, 'P1431') AND EXACT(?o, 'Q208910')) OR (EXACT(?p, 'P58') AND EXACT(?o, 'Q192403'))) kg:9326 is Q1869678 kg:3874 is P344 kg:4082 is Q613974 kg:2100 is Q208910 kg:8975 is P58 kg:8975 is P58 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE wdt:P106 ?p1. wdt:P57 ?p2. wdt:P1361018 ?p3. wdt:P1040 ?p4. wdt:P1431 ?p5. wdt:P58 ?p6. wdt:Q2086445 ?p7.\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE wdt:P106 ?p1. wdt:P57 ?p2. wdt:P1361018 ?p3. wdt:P1040 ?p4. wdt:P1431 ?p5. wdt:P58 ?p6. wdt:Q2086445 ?p7. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n    \"query\": [\n        \"?x predicates ?p predicate_of_interest\",\n        \"select ?x\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "?x predicates ?p predicate_of_interest select ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?person1\" ]} ", "normal_query": "SELECT DISTINCT ?resource WHERE { ?person1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n    \"query\": [\n        \"?itemType\" ,\n        \"?wasWrittenBy\" ,\n        \"?directedBy\" ,\n        \"?executiveProducedBy\"\n    ]\n}\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t", "normal_query": "?itemType ?wasWrittenBy ?directedBy ?executiveProducedBy LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?resource WHERE \"\n       ,\n        \"    ?p a/wikidata:Property.* \"\n        ,\n        \"    ?p [P57,P58] \"\n        ,\n        \"    ?r wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n        \"    ?resource wdt:P57,P58 \"\n        ,\n        \"    ?resource wdt:P1431 \"\n        ,\n        \"    ?subject wdt:P57,P58 \"\n        ,\n        \"    ?subject wdt:P1431 \"\n        ,\n", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n    \"query\": [\n        \"?item_type_1 IS [kg:3218] AND ?item_type_2 IS [Q497256] AND ?item_type_3 IS [kg:4915] AND ?item_type_4 IS [kg:6386]\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t  \t \t \t", "normal_query": "?item_type_1 IS [kg:3218] AND ?item_type_2 IS [Q497256] AND ?item_type_3 IS [kg:4915] AND ?item_type_4 IS [kg:6386] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P58 wd:Q2085 .\", \"?person wdt:P57 wd:Q1140578 .\", \"?person wdt:P1431 wd:Q583406 .\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P58 wd:Q2085 . ?person wdt:P57 wd:Q1140578 . ?person wdt:P1431 wd:Q583406 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE ( ( ?person P57 [Q2085] ) AND ( ?person P57 [Q1140578] ) AND ( ?person P57 [Q583406] ) ) OR ( ?person P57 [Q2085] ) ) \", \"SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) \", \"SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) \", \"SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) \", \"SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) \" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE ( ( ?person P57 [Q2085] ) AND ( ?person P57 [Q1140578] ) AND ( ?person P57 [Q583406] ) ) OR ( ?person P57 [Q2085] ) ) SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) SELECT DISTINCT ?person WHERE ( ( ?person P57 [kg:6667] ) AND ( ?person P57 [kg:1652] ) AND ( ?person P57 [kg:8419] ) ) OR ( ?person P57 [kg:6667] ) ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P31 wd:Q11424 .\", \"?v wdt:P57 ( [w:Q7546] | [w:Q982339] | [w:Q1033656] | [w:Q116760] | [w:Q1365463] ) .\", \"?v wdt:P58 wd:Q7546 .\", \"?v wdt:P58 wd:Q982339 .\", \"?v wdt:P58 wd:Q1033656 .\", \"?v wdt:P58 wd:Q116760 .\", \"?v wdt:P58 wd:Q1365463 .\" ] } ", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 ( [w:Q7546] | [w:Q982339] | [w:Q1033656] | [w:Q116760] | [w:Q1365463] ) . ?v wdt:P58 wd:Q7546 . ?v wdt:P58 wd:Q982339 . ?v wdt:P58 wd:Q1033656 . ?v wdt:P58 wd:Q116760 . ?v wdt:P58 wd:Q1365463 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v a kg:7292 ;\", \"  ?p p:P57 ;\", \"  ?o kg:5200 .\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?v a kg:7292 ; ?p p:P57 ; ?o kg:5200 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE {\", \"?item wdt:P161 wd:Q1653396 .\", \"?item wdt:P161 wd:Q656357 .\", \"?item wdt:P161 wd:Q192115 .\" ] } ", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q1653396 . ?item wdt:P161 wd:Q656357 . ?item wdt:P161 wd:Q192115 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n    \"query\": [\n        \"SELECT * FROM wdg:PropertyGroup {\",\n        \"    wdg:property (\",\n        \"        kg:8138\",\n        \"        [P161]\",\n        \"        kg:7469\",\n        \"        [P161]\",\n        \"        kg:8138\",\n        \"        [P161]\",\n        \"        kg:8021\",\n        \"        [P57]\",\n        \"        kg:1324\",\n        \"        [P344]\",\n        \"        kg:9896\",\n        \"        [P344]\",\n        \"        kg:7836\",\n        \"        [P161]\",\n        \"        kg:8021\",\n        \"        [P57]\",\n        \"        kg:8183\",\n        \"        [P86]\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM wdg:PropertyGroup { wdg:property ( kg:8138 [P161] kg:7469 [P161] kg:8138 [P161] kg:8021 [P57] kg:1324 [P344] kg:9896 [P344] kg:7836 [P161] kg:8021 [P57] kg:8183 [P86] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE {\\n  ?item wdt:P161 wd:Q3986814 .\\n  OR\\n  ?item wdt:P161 wd:Q238211 .\\n  OR\\n  ?item wdt:P161 wd:Q45602 .\\n} \", \"SELECT DISTINCT ?item WHERE {\\n  ?item wdt:P1040 wd:Q3986814 .\\n  OR\\n  ?item wdt:P1040 wd:Q238211 .\\n  OR\\n  ?item wdt:P1040 wd:Q45602 .\\n} \", \"SELECT DISTINCT ?item WHERE {\\n  ?item wdt:P86 wd:Q199039 .\\n} \", \"SELECT DISTINCT ?item WHERE {\\n  ?item wdt:P86 wd:Q470895 .\\n} \"]\n}\n  \t\t\t\t\t \t\t \t\t\t\t\t\t \t ", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q3986814 . OR ?item wdt:P161 wd:Q238211 . OR ?item wdt:P161 wd:Q45602 . } SELECT DISTINCT ?item WHERE { ?item wdt:P1040 wd:Q3986814 . OR ?item wdt:P1040 wd:Q238211 . OR ?item wdt:P1040 wd:Q45602 . } SELECT DISTINCT ?item WHERE { ?item wdt:P86 wd:Q199039 . } SELECT DISTINCT ?item WHERE { ?item wdt:P86 wd:Q470895 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE { ?x w:isinstance w:Person . }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x w:isinstance w:Person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?productionCompany WHERE {\\n\"\n       ,\n        \"?productionCompany wdt:P57 ?productionCompany .\\n\"\n        ,\n        \"?productionCompany wdt:P1431 \\\"What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct\\\" .\\n\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?productionCompany WHERE { ?productionCompany wdt:P57 ?productionCompany . ?productionCompany wdt:P1431 \"What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n    \"query\": [\n        \"?x p:P31 ?y.\"\n        ,\n        \"?x p:P256 [P57] ?z.\"\n        ,\n        \"?x p:P256 [P57] ?w.\"\n        ,\n        \"?x p:P256 [P57] ?v.\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t \t\t \t \t", "normal_query": "?x p:P31 ?y. ?x p:P256 [P57] ?z. ?x p:P256 [P57] ?w. ?x p:P256 [P57] ?v. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y ; wdt:P1040 ?z .\", \".join([\" ,\".split(\" , \")[-1] + \" ]} ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y ; wdt:P1040 ?z . .join([ .split( )[-1] + LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?p <http://www.w3.org/1999/02/22-rdf-syntax-ns#name> \\\"What was directed by\\\" ;\\n  ?x <kg:3716> ;\\n  ?y <kg:4619> ;\\n  ?z <kg:6471> ;\\n  ?w <kg:0443> ;\\n  ?a <kg:2377> ;\\n  ?b <kg:0706> ;\\n  ?x <kg:P57> ?y ;\\n  ?y <kg:P57> ?z ;\\n  ?z <kg:P57> ?w ;\\n  ?w <kg:P1040> ?a ;\\n  ?a <kg:P1040> ?b ;\\n  }\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?p <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\", \"    ?x wdt:P106 ?y.\\n\", \"    ?y wdt:P1040 ?z.\\n\", \"    ?z wdt:P1431 ?a.\\n\", \"    ?a wdt:P58 ?b.\\n\", \"    ?x wdt:P106 ?c.\\n\", \"    ?c wdt:P1040 ?d.\\n\", \"    ?d wdt:P1431 ?e.\\n\", \"    ?e wdt:P58 ?f.\\n\", \"    ?x wdt:P106 ?g.\\n\", \"    ?g wdt:P1040 ?h.\\n\", \"    ?h wdt:P1431 ?i.\\n\", \"    ?i wdt:P58 ?j.\\n\", \"    ?x wdt:P106 ?k.\\n\", \"    ?k wdt:P1040 ?l.\\n\", \"    ?l wdt:P1431 ?m.\\n\", \"    ?m wdt:P58 ?n.\\n\", \"}\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t  \t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE {     ?x wdt:P106 ?y.     ?y wdt:P1040 ?z.     ?z wdt:P1431 ?a.     ?a wdt:P58 ?b.     ?x wdt:P106 ?c.     ?c wdt:P1040 ?d.     ?d wdt:P1431 ?e.     ?e wdt:P58 ?f.     ?x wdt:P106 ?g.     ?g wdt:P1040 ?h.     ?h wdt:P1431 ?i.     ?i wdt:P58 ?j.     ?x wdt:P106 ?k.     ?k wdt:P1040 ?l.     ?l wdt:P1431 ?m.     ?m wdt:P58 ?n. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n    \"query\": [\n        \"?x p:P106 ?y.\"\n        ,\n        \"SELECT ?x ?y\"\n        ,\n        \"WHERE\"\n        ,\n        \"(?x p:P106 ?y)\"\n        ,\n        \"OR (?x p:P1040 ?z)\"\n        ,\n        \"OR (?x p:P1431 ?w)\"\n        ,\n        \"OPTIONALBinding(?x, ?y, ?z)\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "?x p:P106 ?y. SELECT ?x ?y WHERE (?x p:P106 ?y) OR (?x p:P1040 ?z) OR (?x p:P1431 ?w) OPTIONALBinding(?x, ?y, ?z) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P58 ?y.\" , \" ?x wdt:P1431 [w:Q6084069] .\" , \" ?x wdt:P1040 [w:Q5437360] .\" , \" ?x wdt:P1040 [w:Q12813010] .\" , \" }\" ] }\n  \t\t\t\t      \t\t\t\t\t\t  ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P58 ?y. ?x wdt:P1431 [w:Q6084069] . ?x wdt:P1040 [w:Q5437360] . ?x wdt:P1040 [w:Q12813010] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n    \"query\": [\n        \"?x predicates ?p predicate(?o)\",\n        \"SPARQL\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "?x predicates ?p predicate(?o) SPARQL LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?x WHERE {\\n\"\n        \t,\n        \"?x wdt:P737 [\\\"Marry and influence\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P1040 [\\\"Vagabond\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P58 [\\\"Agnès\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P1040 [\\\"Varda\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P58 [\\\"Q2298257\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P1040 [\\\"The Gleaners and I\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P58 [\\\"Q2493884\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P737 [\\\"Marry and influence\\\"]\\n\"\n       \t,\n        \"\\t?x wdt:P26 [\\\"Q312258\\\"]\\n\"\n       \t,\n    \"}\"\n]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P737 [\"Marry and influence\"] ?x wdt:P1040 [\"Vagabond\"] ?x wdt:P58 [\"Agnès\"] ?x wdt:P1040 [\"Varda\"] ?x wdt:P58 [\"Q2298257\"] ?x wdt:P1040 [\"The Gleaners and I\"] ?x wdt:P58 [\"Q2493884\"] ?x wdt:P737 [\"Marry and influence\"] ?x wdt:P26 [\"Q312258\"] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P161 wd:Q109116.\\n  ?person wdt:P57 wd:Q1140317.\\n  ?person wdt:P86 wd:Q109116.\\n  ?person wdt:P58 wd:Q1140317.\\n} \", \"http://www.wikidata.org/sparql\" ]}\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P161 wd:Q109116. ?person wdt:P57 wd:Q1140317. ?person wdt:P86 wd:Q109116. ?person wdt:P58 wd:Q1140317. } <http://www.wikidata.org//sparql> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM wdg:PropertyGroup WHERE wdg:PropertyGroup[]\"\n        ,\n        \"    kg:0717 = [Q109116; Q109116; Q109116]\"\n        ,\n        \"    kg:2672 = [P57; P57; P57]\"\n        ,\n        \"    kg:4662 = [Q1140317; Q1140317; Q1140317]\"\n        ,\n        \"    kg:9331 = [P161; P161; P161]\"\n        ,\n        \"    kg:1821 = [P86; P86; P86]\"\n        ,\n        \"    kg:5380 = [P58; P58; P58]\"\n    ]\n}\n    \t\t\t\t     \t\t \t\t\t\t", "normal_query": "SELECT * FROM wdg:PropertyGroup WHERE wdg:PropertyGroup[] kg:0717 = [Q109116; Q109116; Q109116] kg:2672 = [P57; P57; P57] kg:4662 = [Q1140317; Q1140317; Q1140317] kg:9331 = [P161; P161; P161] kg:1821 = [P86; P86; P86] kg:5380 = [P58; P58; P58] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?item WHERE ?item wdt:P161 wd:Q192115 AND ?item wdt:P344 wd:Q1165050 AND ?item wdt:P57 wd:Q192115 AND ?item wdt:P1040 wd:Q192115 AND ?item wdt:P58 wd:Q1165050\" ] }\n  \t\t\t\t     \t\t\t \t \t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE ?item wdt:P161 wd:Q192115 AND ?item wdt:P344 wd:Q1165050 AND ?item wdt:P57 wd:Q192115 AND ?item wdt:P1040 wd:Q192115 AND ?item wdt:P58 wd:Q1165050 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\"query\": [ \"SELECT * FROM wdt:Q192115 WHERE kg:2044 = Q192115 AND kg:6918 = P161 AND kg:4869 = Q1165050 AND kg:9519 = P344 AND kg:2044 = Q192115 AND kg:3755 = P57 AND kg:4869 = Q1165050 AND kg:2156 = P1040 AND kg:4869 = Q1165050 AND kg:8142 = P58\" ]} ", "normal_query": "SELECT * FROM wdt:Q192115 WHERE kg:2044 = Q192115 AND kg:6918 = P161 AND kg:4869 = Q1165050 AND kg:9519 = P344 AND kg:2044 = Q192115 AND kg:3755 = P57 AND kg:4869 = Q1165050 AND kg:2156 = P1040 AND kg:4869 = Q1165050 AND kg:8142 = P58 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P161 wd:Q1432710 .\", \"?x wdt:P161 wd:Q2082586 .\" , \"?x wdt:P161 wd:Q730888 .\" , \"?x wdt:P161 wd:Q205447 .\" , \"?x wdt:P161 wd:Q17893055 .\", \"?x wdt:P344 wd:Q1432710 .\", \"?x wdt:P344 wd:Q2082586 .\" , \"?x wdt:P344 wd:Q730888 .\" , \"?x wdt:P344 wd:Q205447 .\" , \"?x wdt:P344 wd:Q17893055 .\", \"?x wdt:P1040 wd:Q1432710 .\", \"?x wdt:P1431 wd:Q1432710 .\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P161 wd:Q1432710 . ?x wdt:P161 wd:Q2082586 . ?x wdt:P161 wd:Q730888 . ?x wdt:P161 wd:Q205447 . ?x wdt:P161 wd:Q17893055 . ?x wdt:P344 wd:Q1432710 . ?x wdt:P344 wd:Q2082586 . ?x wdt:P344 wd:Q730888 . ?x wdt:P344 wd:Q205447 . ?x wdt:P344 wd:Q17893055 . ?x wdt:P1040 wd:Q1432710 . ?x wdt:P1431 wd:Q1432710 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x[?kg:7298] = 'Q730888' AND ?x[?kg:8692] = 'Q1432710'\"\n    ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT * FROM ?x WHERE ?x[?kg:7298] = 'Q730888' AND ?x[?kg:8692] = 'Q1432710' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\\n\", \"?person wdt:P161 [\\\\\\\"Six Men Getting Sick\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"The Black Ghiandola\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"Twin Peaks\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"Lumière and Company\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"Dune\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"Inland Empire\\\\\\\"] ;\\n\", \"?person wdt:P161 [\\\\\\\"Boat\\\\\\\"] ;\\n\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P161 [\\\"Six Men Getting Sick\\\"] ; ?person wdt:P161 [\\\"The Black Ghiandola\\\"] ; ?person wdt:P161 [\\\"Twin Peaks\\\"] ; ?person wdt:P161 [\\\"Lumière and Company\\\"] ; ?person wdt:P161 [\\\"Dune\\\"] ; ?person wdt:P161 [\\\"Inland Empire\\\"] ; ?person wdt:P161 [\\\"Boat\\\"] ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\"query\": [\"+prefix:kg:\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "+prefix:kg: LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 ?y ;\", \"  ?y wdt:P57 ?z ;\", \"  ?z wdt:P1040 ?a ;\", \"  ?a wdt:P58 ?b ;\", \"  ?b wdt:P737 ?c ;\", \"  ?c wdt:P26 ?d ;\", \"  ?d wdt:P1040 ?e ;\", \"  ?e wdt:P58 ?f ;\", \"  ?f wdt:P737 ?g ;\", \"  ?g wdt:P26 ?h ;\", \"  ?h wdt:P1040 ?i ;\", \"  ?i wdt:P58 ?j ;\", \"  ?j wdt:P737 ?k ;\", \"  ?k wdt:P26 ?l ;\", \"  ?l wdt:P1040 ?m ;\", \"  ?m wdt:P58 ?n ;\", \"  ?n wdt:P737 ?o ;\", \"  ?o wdt:P26 ?p ;\", \"  ?p wdt:P1040 ?q ;\", \"  ?q wdt:P58 ?r ;\", \"  ?r wdt:P737 ?s ;\", \"  ?s wdt:P26 ?t ;\", \"  ?t wdt:P1040 ?u ;\", \"  ?u wdt:P58 ?v ;\", \"  ?v wdt:P737 ?w ;\", \"  ?w wdt:P26 ?x ; }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P57 ?y ; ?y wdt:P57 ?z ; ?z wdt:P1040 ?a ; ?a wdt:P58 ?b ; ?b wdt:P737 ?c ; ?c wdt:P26 ?d ; ?d wdt:P1040 ?e ; ?e wdt:P58 ?f ; ?f wdt:P737 ?g ; ?g wdt:P26 ?h ; ?h wdt:P1040 ?i ; ?i wdt:P58 ?j ; ?j wdt:P737 ?k ; ?k wdt:P26 ?l ; ?l wdt:P1040 ?m ; ?m wdt:P58 ?n ; ?n wdt:P737 ?o ; ?o wdt:P26 ?p ; ?p wdt:P1040 ?q ; ?q wdt:P58 ?r ; ?r wdt:P737 ?s ; ?s wdt:P26 ?t ; ?t wdt:P1040 ?u ; ?u wdt:P58 ?v ; ?v wdt:P737 ?w ; ?w wdt:P26 ?x ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x\" ]} ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P161 wd:Q6084069 .\", \"?x wdt:P161 wd:Q6099428 .\", \"?x wdt:P161 wd:Q5265241 .\", \"?x wdt:P344 wd:Q12813010 .\", \"?x wdt:P1040 wd:Q12813010 .\", \"?x wdt:P1431 wd:Q12813010 .\", \"}\" ]}\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P161 wd:Q6084069 . ?x wdt:P161 wd:Q6099428 . ?x wdt:P161 wd:Q5265241 . ?x wdt:P344 wd:Q12813010 . ?x wdt:P1040 wd:Q12813010 . ?x wdt:P1431 wd:Q12813010 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x[?P161]->[Q6084069] AND ?x[?P161]->[Q6099428] AND ?x[?P161]->[Q5265241]\"\n    ]\n}\n  \t \t \t\t\t\t\t \t\t \t \t\t\t", "normal_query": "SELECT * FROM ?x WHERE ?x[?P161]->[Q6084069] AND ?x[?P161]->[Q6099428] AND ?x[?P161]->[Q5265241] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?v WHERE \"\n       ,\n        \"(?v wdt:P106 [w:Q7042855]) OR \"\n        ,\n        \"(?v wdt:P57 [w:Q199039]) OR \"\n        ,\n        \"(?v wdt:P57 [w:Q166739]) OR \"\n        ,\n        \"(?v wdt:P57 [w:Q45602]) OR \"\n        ,\n        \"(?v wdt:P1040 [w:Q2445896])\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?v WHERE (?v wdt:P106 [w:Q7042855]) OR (?v wdt:P57 [w:Q199039]) OR (?v wdt:P57 [w:Q166739]) OR (?v wdt:P57 [w:Q45602]) OR (?v wdt:P1040 [w:Q2445896]) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n    \"query\": [\n        \"?x p57 ?y.\"\n    ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "?x p57 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\\n  ?w wdt:P1040 ?p.\\n  ?p wdt:P1040 ?o.\\n  ?o wdt:P1040 ?w.\\n} \", \"http://www.wikidata.org SPARQL/sparql\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wdt:P1040 ?p. ?p wdt:P1040 ?o. ?o wdt:P1040 ?w. } <http://www.wikidata.org> SPARQL/sparql LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n    \"query\": [\n        \"?x─source─kg:0579─kg:8765─kg:6062─kg:8321─kg:6108─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:8765─kg:6062─kg:5311─kg:87", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P57 wd:Q7546 ;\", \"    ?v wdt:P57 wd:Q982339 ;\", \"    ?v wdt:P57 wd:Q1033656 ;\", \"    ?v wdt:P57 wd:Q116760 ;\", \"    ?v wdt:P57 wd:Q1365463 ;\" ] } ", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P57 wd:Q7546 ; ?v wdt:P57 wd:Q982339 ; ?v wdt:P57 wd:Q1033656 ; ?v wdt:P57 wd:Q116760 ; ?v wdt:P57 wd:Q1365463 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE { ?v wikitext能力和中文翻译能力。\", \"http://www.google.com/translate?src=zh-TW&dest=en&hl=en&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved=0CCQVjCB0&iact=p STEM%2F%2F&uq=Which+film+was+directed+by+and+written+by+Jörn+Donner+%2C+Vilgot+Sjöman+%2C+Hans+Alfredson+%2C+Gustaf+Molander+%2C+and+Ingmar+Bergman&pi=0&liq=1&f=false\", \"http://www.google.com/translate?src=en&dest=zh-TW&hl=zh&ie=UTF-8&oe=UTF-8&sa=X&ved", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?item WHERE {\\n\"\n       ,\n        \"?item wdt:P161 wd:Q5265241.\\n\"\n        ,\n        \"?item wdt:P344 [something].\\n\"\n        ,\n        \"?item wdt:P1040 [something].\\n\"\n        ,\n        \"?item wdt:P1431 [something].\\n\"\n        ,\n        \"?item wdt:P58 [something].\\n\"\n        ]\n    }\n    \t \t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q5265241. ?item wdt:P344 [something]. ?item wdt:P1040 [something]. ?item wdt:P1431 [something]. ?item wdt:P58 [something]. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE (\"\n        ,\n        \"?x wdt:P161 ?y\" ,\n        \"AND ?y wdt:P161 ?z\" ,\n        \"AND ?z wdt:P161 ?w\" ,\n        \"AND ?w wdt:P161 ?v\" ,\n        \"AND ?v wdt:P344 ?x\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ?x WHERE ( ?x wdt:P161 ?y AND ?y wdt:P161 ?z AND ?z wdt:P161 ?w AND ?w wdt:P161 ?v AND ?v wdt:P344 ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P58 wd:Q878673 .\", \"?person wdt:P1040 wd:Q567519 .\", \"?person wdt:P1040 wd:Q543382 .\", \"?person wdt:P1040 wd:Q570483 .\", \"?person wdt:P1040 wd:Q327427 .\", \"?person wdt:P58 wd:Q567519 .\", \"?person wdt:P58 wd:Q543382 .\", \"?person wdt:P58 wd:Q570483 .\", \"?person wdt:P58 wd:Q327427 .\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P58 wd:Q878673 . ?person wdt:P1040 wd:Q567519 . ?person wdt:P1040 wd:Q543382 . ?person wdt:P1040 wd:Q570483 . ?person wdt:P1040 wd:Q327427 . ?person wdt:P58 wd:Q567519 . ?person wdt:P58 wd:Q543382 . ?person wdt:P58 wd:Q570483 . ?person wdt:P58 wd:Q327427 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://example.org/sparql/predicate/predicate\" , \"?r\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x <http://example.org/sparql/predicate//predicate> ?r LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE { ?p a wd:P57 ; ?person wd:Q156497 . } { ?p a wd:P57 ; ?person wd:Q158069 . } { ?p a wd:P57 ; ?person wd:Q497617 . }\" ] }\n  \t\t\t\t\t \t \t\t\t\t\t \t \t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?p a wd:P57 ; ?person wd:Q156497 . } { ?p a wd:P57 ; ?person wd:Q158069 . } { ?p a wd:P57 ; ?person wd:Q497617 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://example.org/sparql# SPARQL-ALIVE \", \"?y\" , \"http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?z\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?w\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?v\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?u\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?t\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?s\", \" http://example.org/sparql#SPARQL_ALIVE\", \" ?p{kg:2542} ?r\", \" http://example.org/sparql#SPARQL_ALIVE\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x <http://example.org//sparql> ?y <http://example.org//sparql> ?p{kg:2542} ?z <http://example.org//sparql> ?p{kg:2542} ?w <http://example.org//sparql> ?p{kg:2542} ?v <http://example.org//sparql> ?p{kg:2542} ?u <http://example.org//sparql> ?p{kg:2542} ?t <http://example.org//sparql> ?p{kg:2542} ?s <http://example.org//sparql> ?p{kg:2542} ?r <http://example.org//sparql> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P57 wd:Q1277329 .\", \"?person wdt:P57 wd:Q219170 .\", \"?person wdt:P57 wd:Q219155 .\", \"?person wdt:P57 wd:Q198557 .\", \" }\" ] }\n  \t\t\t\t      \t\t\t\t\t  \t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P57 wd:Q1277329 . ?person wdt:P57 wd:Q219170 . ?person wdt:P57 wd:Q219155 . ?person wdt:P57 wd:Q198557 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x[?P57] = Q219170 ) AND ( ?x[?P57] = Q219155 ) AND ( ?x[?P58] = Q198557 ) AND ( ?x[?P58] = Q16 ) )\", \"kg:5339 is Q1277329\", \"kg:3694 is P57\", \"kg:2988 is Q219170\", \"kg:8290 is Q219155\", \"kg:3694 is P57\", \"kg:8721 is Q198557\", \"kg:3694 is P57\", \"kg:2009 is Q627060\", \"kg:3646 is P1040\", \"kg:5339 is Q1277329\", \"kg:4035 is P58\", \"kg:2988 is Q219170\", \"kg:4035 is P58\", \"kg:8290 is Q219155\", \"kg:4035 is P58\", \"kg:8721 is Q198557\", \"kg:4035 is P58\", \"kg:5370 is P27\", \"kg:7793 is Q16\" ] }\n  \t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT * FROM ?x WHERE ( ?x[?P57] = Q219170 ) AND ( ?x[?P57] = Q219155 ) AND ( ?x[?P58] = Q198557 ) AND ( ?x[?P58] = Q16 ) ) kg:5339 is Q1277329 kg:3694 is P57 kg:2988 is Q219170 kg:8290 is Q219155 kg:3694 is P57 kg:8721 is Q198557 kg:3694 is P57 kg:2009 is Q627060 kg:3646 is P1040 kg:5339 is Q1277329 kg:4035 is P58 kg:2988 is Q219170 kg:4035 is P58 kg:8290 is Q219155 kg:4035 is P58 kg:8721 is Q198557 kg:4035 is P58 kg:5370 is P27 kg:7793 is Q16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?resource WHERE \"\n       ,\n        \"(?dir_wd, wd:P57, ?prod_dir) AND \"\n        ,\n        \"(?prod_wd, wd:P57, ?prod_dir) AND \"\n        ,\n        \"(?dir_wd, wd:P1431, ?prod_dir) AND \"\n        ,\n        \"(?prod_wd, wd:P1431, ?prod_dir) AND \"\n        ,\n        \"(?dir_wd, wd:P58, ?prod_dir) AND \"\n        ,\n        \"(?prod_wd, wd:P58, ?prod_dir) AND \"\n        ,\n        \"?resource wdt:P57 ?prod_dir.\"\n    ]\n}\n    \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE (?dir_wd, wd:P57, ?prod_dir) AND (?prod_wd, wd:P57, ?prod_dir) AND (?dir_wd, wd:P1431, ?prod_dir) AND (?prod_wd, wd:P1431, ?prod_dir) AND (?dir_wd, wd:P58, ?prod_dir) AND (?prod_wd, wd:P58, ?prod_dir) AND ?resource wdt:P57 ?prod_dir. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM kg:5763 WHERE kg:5763 = 'Q206182'\"\n    ]\n}\n   \t \t\t\t\t\t\t \t\t\t \t \t\t", "normal_query": "SELECT * FROM kg:5763 WHERE kg:5763 = 'Q206182' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P108 wd:Q7095994 .\", \"?x wdt:P108 wd:Q42944 .\", \"?x wdt:P108 wd:Q7204713 .\", \"?x wdt:P108 wd:Q7432436 .\", \"?x wdt:P108 wd:Q37033 .\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P108 wd:Q7095994 . ?x wdt:P108 wd:Q42944 . ?x wdt:P108 wd:Q7204713 . ?x wdt:P108 wd:Q7432436 . ?x wdt:P108 wd:Q37033 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?p1 = \\\"Q7095994\\\" AND ?p2 = \\\"P108\\\" AND ?p3 = \\\"P108\\\" ) OR ( ?p1 = \\\"Q7095994\\\" AND ?p2 = \\\"P108\\\" AND ?p3 = \\\"P108\\\" ) OR ( ?p1 = \\\"Q7095994\\\" AND ?p2 = \\\"P108\\\" AND ?p3 = \\\"P108\\\" ) ) \", \"kg:4051 is Q7095994\", \"kg:0273 is P108\", \"kg:4051 is Q7095994\", \"kg:0273 is P108\", \"kg:4051 is Q7095994\", \"kg:0273 is P108\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT * FROM ?x WHERE ( ?p1 = \"Q7095994\" AND ?p2 = \"P108\" AND ?p3 = \"P108\" ) OR ( ?p1 = \"Q7095994\" AND ?p2 = \"P108\" AND ?p3 = \"P108\" ) OR ( ?p1 = \"Q7095994\" AND ?p2 = \"P108\" AND ?p3 = \"P108\" ) ) kg:4051 is Q7095994 kg:0273 is P108 kg:4051 is Q7095994 kg:0273 is P108 kg:4051 is Q7095994 kg:0273 is P108 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P31 wd:Q11424 .\", \"?v wdt:P57 wdt:P57 wdt:P57 .\", \"?v wdt:P1040 wdt:P1040 wdt:P1040 .\", \"?v wdt:P162 wdt:P272 wdt:P58 .\", \"}\" ] }\n  \t \t \t\t \t\t \t \t\t \t\t\t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 wdt:P57 wdt:P57 . ?v wdt:P1040 wdt:P1040 wdt:P1040 . ?v wdt:P162 wdt:P272 wdt:P58 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n    \"query\": [\n        \"?x p:P31 ?y.\"\n        ,\n        \"?x p:P57 ?z.\"\n        ,\n        \"?x p:Q1687239 ?w.\"\n        ,\n        \"?x p:Q562108 ?v.\"\n        ,\n        \"?x p:P1040 ?u.\"\n    ]\n}\n  \t                \t", "normal_query": "?x p:P31 ?y. ?x p:P57 ?z. ?x p:Q1687239 ?w. ?x p:Q562108 ?v. ?x p:P1040 ?u. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P161 wd:Q192115.\\n  ?person wdt:P161 wd:Q656357.\\n  ?person wdt:P344 wd:Q192115.\\n  ?person wdt:P344 wd:Q656357.\\n  ?person wdt:P57 wd:Q192115.\\n  ?person wdt:P57 wd:Q656357.\\n  ?person wdt:P1040 wd:Q192115.\\n  ?person wdt:P1040 wd:Q656357.\\n  ?person wdt:P1431 wd:Q192115.\\n  ?person wdt:P1431 wd:Q656357.\\n  ?person wdt:P58 wd:Q192115.\\n  ?person wdt:P58 wd:Q656357.\\n}\", \"format\", \"jsonld\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P161 wd:Q192115. ?person wdt:P161 wd:Q656357. ?person wdt:P344 wd:Q192115. ?person wdt:P344 wd:Q656357. ?person wdt:P57 wd:Q192115. ?person wdt:P57 wd:Q656357. ?person wdt:P1040 wd:Q192115. ?person wdt:P1040 wd:Q656357. ?person wdt:P1431 wd:Q192115. ?person wdt:P1431 wd:Q656357. ?person wdt:P58 wd:Q192115. ?person wdt:P58 wd:Q656357. } format jsonld LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\"query\": [\"+prefix sp http://www.w3.org/1999/02/22-rdf-syntax-ns#\", \"+prefix dc http://purl.org/dc/elements/1.1/\", \"+prefix dcterms http://ddd.uab.es/handle/2072.2/276545\", \"+prefix dbpedia http://dbpedia.org triples\", \"kg:4083 is Q192115\", \"kg:1179 is P161\", \"kg:5468 is Q656357\", \"kg:2970 is P344\", \"kg:4083 is Q192115\", \"kg:3401 is P57\", \"kg:5468 is Q656357\", \"kg:4083 is Q192115\", \"kg:0409 is P1040\", \"kg:5468 is Q656357\", \"kg:0409 is P1040\", \"kg:4772 is Q15622760\", \"kg:4058 is P1431\", \"kg:4083 is Q192115\", \"kg:0729 is P58\", \"kg:5468 is Q656357\", \"kg:0729 is P58\"]}\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t\t", "normal_query": "+prefix sp <http://www.w3.org/1999/02//22-rdf-syntax-ns> +prefix dc <http://purl.org/dc/elements/1.1//> +prefix dcterms <http://ddd.uab.es/handle/2072.2//276545> +prefix dbpedia <http://dbpedia.org> triples kg:4083 is Q192115 kg:1179 is P161 kg:5468 is Q656357 kg:2970 is P344 kg:4083 is Q192115 kg:3401 is P57 kg:5468 is Q656357 kg:4083 is Q192115 kg:0409 is P1040 kg:5468 is Q656357 kg:0409 is P1040 kg:4772 is Q15622760 kg:4058 is P1431 kg:4083 is Q192115 kg:0729 is P58 kg:5468 is Q656357 kg:0729 is P58 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P344 wd:Q1699716 .\", \"?x wdt:P57 wd:Q823767 .\", \"?x wdt:P1040 wd:Q686125 .\", \"?x wdt:P58 wd:Q327427 .\" ] }\n  \t\t\t\t\t \t\t \t\t\t\t\t\t \t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P344 wd:Q1699716 . ?x wdt:P57 wd:Q823767 . ?x wdt:P1040 wd:Q686125 . ?x wdt:P58 wd:Q327427 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{ \"query\": [\"SELECT distinct ?x WHERE {\", \"?x a kg:9214 ;\", \"  ?y p:P344 ;\", \"  ?z p:P57 ;\", \"  ?w p:P1040 ;\", \"  ?v p:P58 ;\", \"  ?u p:Q1699716 ;\", \"  ?t p:Q823767 ;\", \"  ?s p:Q686125 ;\", \"  ?r p:P344 ;\", \"  ?q p:P57 ;\", \"  ?p p:P1040 ;\", \"  ?o p:Q1699716 ;\", \"  ?n p:Q823767 ;\", \"  ?m p:Q686125 ;\", \"  ?k p:P344 ;\", \"  ?j p:P57 ;\", \"  ?i p:P1040 ;\", \"  ?h p:Q1699716 ;\", \"  ?g p:Q823767 ;\", \"  ?f p:Q686125 ;\", \"}\"] }\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT distinct ?x WHERE { ?x a kg:9214 ; ?y p:P344 ; ?z p:P57 ; ?w p:P1040 ; ?v p:P58 ; ?u p:Q1699716 ; ?t p:Q823767 ; ?s p:Q686125 ; ?r p:P344 ; ?q p:P57 ; ?p p:P1040 ; ?o p:Q1699716 ; ?n p:Q823767 ; ?m p:Q686125 ; ?k p:P344 ; ?j p:P57 ; ?i p:P1040 ; ?h p:Q1699716 ; ?g p:Q823767 ; ?f p:Q686125 ; } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v wdt:P57 ?r .\", \"?v wdt:P1040 ?r .\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?v wdt:P57 ?r . ?v wdt:P1040 ?r . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\"query\": [\n  \"SELECT ?r WHERE kg:8669 ?p ?o AND (kg:6660 ?p ?q OR kg:0518 ?p ?q OR kg:0089 ?p ?q)\"\n]}\n  \t\t\t\t      \t\t\t\t\t\t\t ", "normal_query": "SELECT ?r WHERE kg:8669 ?p ?o AND (kg:6660 ?p ?q OR kg:0518 ?p ?q OR kg:0089 ?p ?q) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person, ?cinematographer, ?director, ?filmmaker, ?executive_producer WHERE ?person wdt:P344 ?actor; \", \" ?cinematographer wdt:P344 ?actor; \", \" ?director wdt:P344 ?actor; \", \" ?filmmaker wdt:P344 ?actor; \", \" ?executive_producer wdt:P344 ?actor; \" ] } ", "normal_query": "SELECT DISTINCT ?person, ?cinematographer, ?director, ?filmmaker, ?executive_producer WHERE ?person wdt:P344 ?actor; ?cinematographer wdt:P344 ?actor; ?director wdt:P344 ?actor; ?filmmaker wdt:P344 ?actor; ?executive_producer wdt:P344 ?actor; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM wdg:PropertyGroup WHERE wdg:P344 = [Q613974, Q1415127, Q17738] AND wdg:P57 = [Q8755] AND wdg:P5463 = [kg:5971]\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM wdg:PropertyGroup WHERE wdg:P344 = [Q613974, Q1415127, Q17738] AND wdg:P57 = [Q8755] AND wdg:P5463 = [kg:5971] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P31 wd:Q11424 .\", \"?v wdt:P57 wdt:P57 wdt:P57 .\", \"?v wdt:P1040 wdt:P1040 wdt:P1040 .\", \"?v wdt:P162 wdt:P272 wdt:P272 .\", \"?v wdt:P58 wdt:P58 wdt:P58 .\" ] } ", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 wdt:P57 wdt:P57 . ?v wdt:P1040 wdt:P1040 wdt:P1040 . ?v wdt:P162 wdt:P272 wdt:P272 . ?v wdt:P58 wdt:P58 wdt:P58 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n    \"query\": [\n        \"?x p:P31 ?y.\"\n        ,\n        \"?x p:Q11424 ?z.\"\n        ,\n        \"?x p:Q11424 ?w.\"\n        ,\n        \"?x p:Q11424 ?v.\"\n        ,\n        \"kg:8345 p:P31 ?y.\"\n        ,\n        \"kg:8345 p:Q11424 ?z.\"\n        ,\n        \"kg:8345 p:Q11424 ?w.\"\n        ,\n        \"kg:8345 p:Q11424 ?v.\"\n    ]\n}\n  \t\t\t\t\t \t \t\t\t\t\t \t \t\t", "normal_query": "?x p:P31 ?y. ?x p:Q11424 ?z. ?x p:Q11424 ?w. ?x p:Q11424 ?v. kg:8345 p:P31 ?y. kg:8345 p:Q11424 ?z. kg:8345 p:Q11424 ?w. kg:8345 p:Q11424 ?v. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE {\", \"?x a wdt:P106 ;\", \"  ?x p wd:Q551861 ;\", \"  ?y p wd:Q3530946 ;\", \"  ?z p wd:Q19885882 ;\", \"  ?w p wd:Q19544249 ;\", \"  ?v p wd:Q551861 ;\", \"  ?u p wd:Q2336453 ;\", \"  ?t p wd:Q551861 ;\", \"  ?s p wd:Q2615443 ;\", \"  ?r p wd:Q551861 ;\" ] }\n  \t \t\t\t\t\t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?x a wdt:P106 ; ?x p wd:Q551861 ; ?y p wd:Q3530946 ; ?z p wd:Q19885882 ; ?w p wd:Q19544249 ; ?v p wd:Q551861 ; ?u p wd:Q2336453 ; ?t p wd:Q551861 ; ?s p wd:Q2615443 ; ?r p wd:Q551861 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\"query\": [\">= \\\"2020-01-01\\\" , <= \\\"2020-12-31\\\"\", \"https://en.wikipedia.org/wiki/Xavier_Dolan\", \"kg:4747 is Q551861\", \"kg:1186 is P106\", \"kg:6646 is Q1323191\", \"kg:0579 is Q3530946\", \"kg:1950 is P1040\", \"kg:8053 is Q19885882\", \"kg:1950 is P1040\", \"kg:4747 is Q551861\", \"kg:8736 is Q19544249\", \"kg:1950 is P1040\", \"kg:4747 is Q551861\", \"kg:9677 is Q2336453\", \"kg:1950 is P1040\", \"kg:4747 is Q551861\", \"kg:6289 is Q2615443\", \"kg:1950 is P1040\", \"kg:4747 is Q551861\", \"kg:0579 is Q3530946\", \"kg:2196 is P58\", \"kg:4747 is Q551861\", \"kg:8053 is Q19885882\", \"kg:2196 is P58\", \"kg:4747 is Q551861\", \"kg:8736 is Q19544249\", \"kg:2196 is P58\", \"kg:4747 is Q551861\", \"kg:6289 is Q2615443\", \"kg:2196 is P58\", \"kg:4747 is Q551861\"]}\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": ">= \"2020-01-01\" , <= \"2020-12-31\" https://en.wikipedia.org/wiki/Xavier_Dolan kg:4747 is Q551861 kg:1186 is P106 kg:6646 is Q1323191 kg:0579 is Q3530946 kg:1950 is P1040 kg:8053 is Q19885882 kg:1950 is P1040 kg:4747 is Q551861 kg:8736 is Q19544249 kg:1950 is P1040 kg:4747 is Q551861 kg:9677 is Q2336453 kg:1950 is P1040 kg:4747 is Q551861 kg:6289 is Q2615443 kg:1950 is P1040 kg:4747 is Q551861 kg:0579 is Q3530946 kg:2196 is P58 kg:4747 is Q551861 kg:8053 is Q19885882 kg:2196 is P58 kg:4747 is Q551861 kg:8736 is Q19544249 kg:2196 is P58 kg:4747 is Q551861 kg:6289 is Q2615443 kg:2196 is P58 kg:4747 is Q551861 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y ; wdt:P106 ?z ; wdt:P57 ?a ; wdt:P106 ?b ; wdt:P57 ?c ; wdt:P106 ?d ; wdt:P57 ?e ; wdt:P1040 ?f ; wdt:P58 ?g ; wdt:P57 ?h ; wdt:P1040 ?i ; wdt:P58 ?j ; wdt:P57 ?k ; wdt:P1040 ?l ; wdt:P58 ?m ; wdt:P106 ?n ; wdt:P57 ?o ; wdt:P1040 ?p ; wdt:P58 ?q ; wdt:P106 ?r ; wdt:P57 ?s ; wdt:P1040 ?t ; wdt:P58 ?u ; wdt:P106 ?v ; wdt:P57 ?w ; wdt:P1040 ?x ; wdt:P58 ?y ; wdt:P106 ?z }\", \"http://www.wikidata.org/entity/Q483197\", \"http://www.wikidata.org/entity/Q484679\", \"http://www.wikidata.org/entity/Q13471372\", \"http://www.wikidata.org/entity/Q3282637\" ]}\n  \t\t\t\t\t  \t\t\t\t      \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y ; wdt:P106 ?z ; wdt:P57 ?a ; wdt:P106 ?b ; wdt:P57 ?c ; wdt:P106 ?d ; wdt:P57 ?e ; wdt:P1040 ?f ; wdt:P58 ?g ; wdt:P57 ?h ; wdt:P1040 ?i ; wdt:P58 ?j ; wdt:P57 ?k ; wdt:P1040 ?l ; wdt:P58 ?m ; wdt:P106 ?n ; wdt:P57 ?o ; wdt:P1040 ?p ; wdt:P58 ?q ; wdt:P106 ?r ; wdt:P57 ?s ; wdt:P1040 ?t ; wdt:P58 ?u ; wdt:P106 ?v ; wdt:P57 ?w ; wdt:P1040 ?x ; wdt:P58 ?y ; wdt:P106 ?z } wd:Q483197 wd:Q484679 wd:Q13471372 wd:Q3282637 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n    \"query\": [\n        \"?x p:P57 ?y.\"\n    ]\n}\n    \t \t \t \t \t \t \t \t ", "normal_query": "?x p:P57 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P31 wd:Q11424 .\", \"?v wdt:P57 ?p1.\", \"?v wdt:P57 ?p2.\", \"?v wdt:P57 ?p3.\", \"?v wdt:P1040 wd:Q562108 .\", \"?v wdt:P57 ?p4.\", \"?v wdt:P57 ?p5.\", \"?v wdt:P57 ?p6.\", \"?v wdt:P1040 wd:Q1687239 .\", \"?v wdt:P57 ?p7.\", \"?v wdt:P57 ?p8.\", \"?v wdt:P57 ?p9.\", \"?v wdt:P1040 wd:Q35979475 .\", \"}\", \"format\\\"; \" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 ?p1. ?v wdt:P57 ?p2. ?v wdt:P57 ?p3. ?v wdt:P1040 wd:Q562108 . ?v wdt:P57 ?p4. ?v wdt:P57 ?p5. ?v wdt:P57 ?p6. ?v wdt:P1040 wd:Q1687239 . ?v wdt:P57 ?p7. ?v wdt:P57 ?p8. ?v wdt:P57 ?p9. ?v wdt:P1040 wd:Q35979475 . } format\"; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\"query\": [\"/kg:0132\", \"/kg:0538\", \"/kg:4817\", \"/kg:3129\", \"/kg:9328\", \"/kg:6698\", \"/kg:0132\", \"/kg:0538\", \"/kg:4817\", \"/kg:3129\", \"/kg:9328\", \"/kg:6698\", \"/kg:0132\", \"/kg:0538\", \"/kg:4817\", \"/kg:3129\", \"/kg:9328\", \"/kg:6698\", \"/kg:0132\", \"/kg:0538\", \"/kg:4817\", \"/kg:3129\", \"/kg:9328\", \"/kg:6698\"]\n}\n  \t \t \t\t\t\t\t \t\t\t\t\t\t\t ", "normal_query": "/kg:0132 /kg:0538 /kg:4817 /kg:3129 /kg:9328 /kg:6698 /kg:0132 /kg:0538 /kg:4817 /kg:3129 /kg:9328 /kg:6698 /kg:0132 /kg:0538 /kg:4817 /kg:3129 /kg:9328 /kg:6698 /kg:0132 /kg:0538 /kg:4817 /kg:3129 /kg:9328 /kg:6698 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P31 wd:Q11424 .\", \"?v wdt:P57 wdt:P57 wdt:P57 .\", \"?v wdt:P1040 wdt:P1040 wdt:P1040 .\", \"?v wdt:P162 wdt:P272 wdt:P58 .\", \"}\" ] }\n  \t \t \t\t \t\t \t \t\t \t\t\t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 wdt:P57 wdt:P57 . ?v wdt:P1040 wdt:P1040 wdt:P1040 . ?v wdt:P162 wdt:P272 wdt:P58 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n    \"query\": [\n        \"?x p:P31 ?y.\"\n        ,\n        \"?x p:Q11424 ?z.\"\n        ,\n        \"?x p:P57 ?a.\"\n        ,\n        \"?x p:Q562108 ?b.\"\n        ,\n        \"?x p:P1040 ?c.\"\n        ,\n        \"kg:7326 p:P31 ?y.\"\n        ,\n        \"kg:7326 p:Q11424 ?z.\"\n        ,\n        \"kg:7326 p:P57 ?a.\"\n        ,\n        \"kg:7326 p:Q562108 ?b.\"\n        ,\n        \"kg:7326 p:P1040 ?c.\"\n    ]\n}\n    \t \t \t \t \t \t \t \t ", "normal_query": "?x p:P31 ?y. ?x p:Q11424 ?z. ?x p:P57 ?a. ?x p:Q562108 ?b. ?x p:P1040 ?c. kg:7326 p:P31 ?y. kg:7326 p:Q11424 ?z. kg:7326 p:P57 ?a. kg:7326 p:Q562108 ?b. kg:7326 p:P1040 ?c. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\"\n       ,\n        \"?x wdt:P57 ?y.\\n\"\n        ,\n        \"\\n\"\n        , \"?x wdt:P1040 ?z.\\n\"\n        ,\n        \"\\n\"\n        , \"?x wdt:P1431 ?w.\\n\"\n        ,\n        \"\\n\"\n        , \"SELECT DISTINCT ?r WHERE {\\n\"\n        ,\n        \"?x wdt:P57 ?y.\\n\"\n        ,\n        \"\\n\"\n        , \"?x wdt:P1040 ?z.\\n\"\n        ,\n        \"\\n\"\n        , \"?x wdt:P1431 ?w.\\n\"\n        ,\n        \"\\n\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y. ?x wdt:P1040 ?z. ?x wdt:P1431 ?w. SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y. ?x wdt:P1040 ?z. ?x wdt:P1431 ?w. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n    \"query\": [\n        \"?x p:P57 ?y\",\n        \"?x p:P57 ?z\",\n        \"?x p:P57 ?w\",\n        \"?x p:P57 ?v\",\n        \"?x p:P57 ?u\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t  \t \t \t", "normal_query": "?x p:P57 ?y ?x p:P57 ?z ?x p:P57 ?w ?x p:P57 ?v ?x p:P57 ?u LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\"\n       ,\n        \"?x wdt:P57 ?y.\\n\"\n        ,\n        \"?y wdt:P1040 \\\"Fate, The Waiting Room\\\".\\n\"\n        ,\n        \"?z wdt:P1040 \\\"The Confession\\\".\\n\"\n        ,\n        \"?w wdt:P1040 \\\"Fate, The Waiting Room\\\".\\n\"\n        ,\n        \"?w wdt:P58 ?r.\\n\"\n        ,\n        \"}\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y. ?y wdt:P1040 \"Fate, The Waiting Room\". ?z wdt:P1040 \"The Confession\". ?w wdt:P1040 \"Fate, The Waiting Room\". ?w wdt:P58 ?r. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM \"\n       ,\n        \"\\\"https://kg:5001/p57\\\" AS ?\"\n        ,\n        \"http://example.org/wiki/Q5437360 WHERE ? = ? AND ? = ? AND ? = ?\"\n    ]\n}\n  \t\t\t\t\t \t \t \t\t\t\t\t \t\t", "normal_query": "SELECT * FROM \"https://kg:5001/p57\" AS ? http://example.org/wiki/Q5437360 WHERE ? = ? AND ? = ? AND ? = ? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\"query\": [ \"SELECT DISTINCT ?v WHERE { \", \"?v wdt:P31 wd:Q11424 .\", \" ?v wdt:P57 ?x1 .\", \" ?x1 wdt:P1431 wd:Q448604 .\", \" ?x1 wdt:P57 ?x2 .\", \" ?x2 wdt:P1431 wd:Q363666 .\", \" ?x2 wdt:P57 ?x3 .\", \" ?x3 wdt:P1431 wd:Q452794 .\" ]}\n  \t\t\t\t\t \t \t\t\t\t\t \t \t\t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P31 wd:Q11424 . ?v wdt:P57 ?x1 . ?x1 wdt:P1431 wd:Q448604 . ?x1 wdt:P57 ?x2 . ?x2 wdt:P1431 wd:Q363666 . ?x2 wdt:P57 ?x3 . ?x3 wdt:P1431 wd:Q452794 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{ \"query\": [ \"SELECT DISTINCT ?resource WHERE ?person1 IS NOT NULL AND ?person2 IS NOT NULL AND ?person3 IS NOT NULL AND ?person1 P31 ?resource AND ?person2 P31 ?resource AND ?person3 P31 ?resource\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE ?person1 IS NOT NULL AND ?person2 IS NOT NULL AND ?person3 IS NOT NULL AND ?person1 P31 ?resource AND ?person2 P31 ?resource AND ?person3 P31 ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{ \"query\": [ \"SELECT DISTINCT ?s WHERE {\", \"?s\" , \"P344\" , \" wd:Q13471372\" , \"P344\" , \" wd:Q462025\" , \"P344\" , \" wd:Q17041657\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q13471372\" , \"P344\" , \" wd:Q462025\" , \"P344\" , \" wd:Q17041657\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q462025\" , \"P344\" , \" wd:Q17041657\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" , \"P344\" , \" wd:Q483197\" ] } ", "normal_query": "SELECT DISTINCT ?s WHERE { ?s P344 wd:Q13471372 P344 wd:Q462025 P344 wd:Q17041657 P344 wd:Q483197 P344 wd:Q483197 P344 wd:Q483197 P344 wd:Q13471372 P344 wd:Q462025 P344 wd:Q17041657 P344 wd:Q483197 P344 wd:Q483197 P344 wd:Q483197 P344 wd:Q462025 P344 wd:Q17041657 P344 wd:Q483197 P344 wd:Q483197 P344 wd:Q483197 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{ \"query\": [ \"SELECT * FROM ?s WHERE ( ?p1 = \\\"Q13471372\\\" AND ?p2 = \\\"P344\\\" ) OR ( ?p1 = \\\"Q13471372\\\" AND ?p2 = \\\"P344\\\" ) OR ... ] }<think>Alright, so I need to translate the given English question into a SPARQL query using a Knowledge Graph. The question is asking for specific information about the editor, cinematographer, executive producer, and director of \" ,\n  \" , and \" , \". From what I understand, each of these terms corresponds to different properties in the KG: like Q13471372 might be the person's identifier, P344 could represent their role or position, etc. The user has provided a list of possible entities and properties with their corresponding IDs, which should help me structure the query correctly. I need to make sure that each part of the question is addressed in the query, using the correct property names and resource IDs. Also, since the user wants only resources returned, I have to ensure that the query filters down to those specific results without including unnecessary data. It's a bit tricky because I'm not entirely familiar with SPARQL syntax, but I think starting with selecting all statements where the subject matches one of the Q IDs and the predicate is P344 should cover the necessary information. I'll need to structure it in a way that covers all four names mentioned in the question without including any extra information. Maybe using OR conditions for each pair will help retrieve only the relevant results. Overall, I think breaking down the query into parts for each name and their respective properties is the key here. I should also double-check if there are any duplicates or overlapping conditions to avoid returning irrelevant data. Finally, making sure that the generated SPARQL query accurately reflects the question's requirements by focusing solely on the specified resources without including other possible information is crucial for getting the correct results back. It might take a few iterations to get it just right, but with careful attention to each part of the question and the provided data, I should be able to craft an effective SPARQL query that meets all the user's needs. After setting up the basic structure, I'll test it against the sample data to see if it returns only the intended resources, which will help me refine any parts that might not be working as expected. In summary, my approach is methodical: identify each component of the question, map them to the correct KG entities and properties, construct the query using appropriate SPARQL syntax with OR conditions for multiple matches, and then validate it against the provided data to ensure accuracy. This step-by-step process should lead me to the correct SPARQL query that fulfills the user's request effectively without including any extraneous information.\"\n]\n}", "normal_query": "SELECT * FROM ?s WHERE ( ?p1 = \"Q13471372\" AND ?p2 = \"P344\" ) OR ( ?p1 = \"Q13471372\" AND ?p2 = \"P344\" ) OR ... ] }<think>Alright, so I need to translate the given English question into a SPARQL query using a Knowledge Graph. The question is asking for specific information about the editor, cinematographer, executive producer, and director of , and . From what I understand, each of these terms corresponds to different properties in the KG: like Q13471372 might be the person's identifier, P344 could represent their role or position, etc. The user has provided a list of possible entities and properties with their corresponding IDs, which should help me structure the query correctly. I need to make sure that each part of the question is addressed in the query, using the correct property names and resource IDs. Also, since the user wants only resources returned, I have to ensure that the query filters down to those specific results without including unnecessary data. It's a bit tricky because I'm not entirely familiar with SPARQL syntax, but I think starting with selecting all statements where the subject matches one of the Q IDs and the predicate is P344 should cover the necessary information. I'll need to structure it in a way that covers all four names mentioned in the question without including any extra information. Maybe using OR conditions for each pair will help retrieve only the relevant results. Overall, I think breaking down the query into parts for each name and their respective properties is the key here. I should also double-check if there are any duplicates or overlapping conditions to avoid returning irrelevant data. Finally, making sure that the generated SPARQL query accurately reflects the question's requirements by focusing solely on the specified resources without including other possible information is crucial for getting the correct results back. It might take a few iterations to get it just right, but with careful attention to each part of the question and the provided data, I should be able to craft an effective SPARQL query that meets all the user's needs. After setting up the basic structure, I'll test it against the sample data to see if it returns only the intended resources, which will help me refine any parts that might not be working as expected. In summary, my approach is methodical: identify each component of the question, map them to the correct KG entities and properties, construct the query using appropriate SPARQL syntax with OR conditions for multiple matches, and then validate it against the provided data to ensure accuracy. This step-by-step process should lead me to the correct SPARQL query that fulfills the user's request effectively without including any extraneous information. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P106 wd:Q44426 .\", \"?person wdt:P161 wd:Q599423 .\", \"?person wdt:P161 wd:Q570483 .\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P106 wd:Q44426 . ?person wdt:P161 wd:Q599423 . ?person wdt:P161 wd:Q570483 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n    \"query\": [\n        \"?x─source─name─was Edited by─source─name─Directed by─source─name─Starred─source─name─, ?y\"\n    ]\n}\n  \t\t\t\t      \t\t\t\t\t  \t", "normal_query": "?x─source─name─was Edited by─source─name─Directed by─source─name─Starred─source─name─, ?y LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P106 Q33999 .\", \"?person wdt:P26 wd:Q4720983 .\", \"?person wdt:P737 Q45404 .\", \"?person wdt:P26 wd:Q5045345 .\", \"}.\", \"format = json\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P106 Q33999 . ?person wdt:P26 wd:Q4720983 . ?person wdt:P737 Q45404 . ?person wdt:P26 wd:Q5045345 . }. format = json LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x a P106 ?y ;\", \"  ?x p:P737 ?z ;\", \"  ?z p:P26 ?w ;\", \"  ?w p:P26 ?v ;\", \"  ?v p:P737 ?u ;\", \"  ?u a ?r ;\", \"  ?y p:P106 ?x ;\", \"  ?y p:P737 ?z ;\", \"  ?z p:P26 ?w ;\", \"  ?w p:P26 ?v ;\", \"  ?v p:P737 ?u ;\", \"  ?u a ?r ;\", \"  ?x a Q33999 ;\", \"  ?x p:P106 ?y ;\", \"  ?z a kg:7263 ;\", \"  ?w a kg:0243 ;\", \"  ?v a kg:9498 ;\", \"  ?u a kg:1227 ;\", \"  ?r a kg:9387 ;\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x a P106 ?y ; ?x p:P737 ?z ; ?z p:P26 ?w ; ?w p:P26 ?v ; ?v p:P737 ?u ; ?u a ?r ; ?y p:P106 ?x ; ?y p:P737 ?z ; ?z p:P26 ?w ; ?w p:P26 ?v ; ?v p:P737 ?u ; ?u a ?r ; ?x a Q33999 ; ?x p:P106 ?y ; ?z a kg:7263 ; ?w a kg:0243 ; ?v a kg:9498 ; ?u a kg:1227 ; ?r a kg:9387 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?w wdt:P112 wd:Q37033\" , \"?w wdt:P108 wd:Q7095994\" , \"?w wdt:P108 wd:Q42944\" , \"?w wdt:P108 wd:Q7204713\" ] } ", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wdt:P112 wd:Q37033 ?w wdt:P108 wd:Q7095994 ?w wdt:P108 wd:Q42944 ?w wdt:P108 wd:Q7204713 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x\" , \"http://example.org/wikidata/Q37033\" , \"?r\" , \"https://www.ogp.net/schemas/ogp#isPartOf\" , \"?y\" , \"https://www.ogp.net/schemas/ogp#isPartOf\" , \"http://example.org/wikidata/Q7432436\" , \"?z\" , \"https://www.ogp.net/schemas/ogp#isPartOf\" , \"http://example.org/wikidata/Q7095994\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x <http://example.org/wikidata//Q37033> ?r https://www.ogp.net/schemas/ogp ?y https://www.ogp.net/schemas/ogp <http://example.org/wikidata//Q7432436> ?z https://www.ogp.net/schemas/ogp <http://example.org/wikidata//Q7095994> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\", \"?w wdt:P161 wd:Q1165050 .\", \"?w wdt:P344 wd:Q1165050 .\", \"?w wdt:P57 wd:Q192115 .\", \"?w wdt:P57 wd:Q128493 .\", \"?w wdt:P1040 wd:Q1165050 .\", \"?w wdt:P86 wd:Q1165050 .\", \"?w wdt:P58 wd:Q1165050 .\" ] } ", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wdt:P161 wd:Q1165050 . ?w wdt:P344 wd:Q1165050 . ?w wdt:P57 wd:Q192115 . ?w wdt:P57 wd:Q128493 . ?w wdt:P1040 wd:Q1165050 . ?w wdt:P86 wd:Q1165050 . ?w wdt:P58 wd:Q1165050 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?q wikitext {{\\\"What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City\\\"}} . \" , \" ?q answer \\\"\\\" . \" , \" \" ]} ", "normal_query": "SELECT DISTINCT ?r WHERE { ?q wikitext {{\"What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City\"}} . ?q answer \"\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y ;\", \"  ?y wdt:P1040 ?z ;\", \"  ?z wdt:P1431 ?a ;\", \"  ?a wdt:P58 ?b ;\", \"  ?b wdt:P1040 ?c ;\", \"  ?c wdt:P1431 ?d ;\", \"  ?d wdt:P58 ?e ;\", \"  ?e wdt:P1040 ?f ;\", \"  ?f wdt:P1431 ?g ;\", \"  ?g wdt:P58 ?h ;\", \"  ?h wdt:P1040 ?i ;\", \"  ?i wdt:P1431 ?j ;\", \"  ?j wdt:P58 ?k ;\", \"  ?k wdt:P1040 ?l ;\", \"  ?l wdt:P1431 ?m ;\", \"  ?m wdt:P58 ?n ;\", \"  ?n wdt:P1040 ?o ;\", \"  ?o wdt:P1431 ?p ;\", \"  ?p wdt:P58 ?q ;\", \"  ?q wdt:P1040 ?r ;\", \"  ?r wdt:P1431 ?s ;\", \"  ?s wdt:P58 ?t ;\", \"  ?t wdt:P1040 ?u ;\", \"  ?u wdt:P1431 ?v ;\", \"  ?v wdt:P58 ?w ;\", \"  ?w wdt:P1040 ?x ; }\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y ; ?y wdt:P1040 ?z ; ?z wdt:P1431 ?a ; ?a wdt:P58 ?b ; ?b wdt:P1040 ?c ; ?c wdt:P1431 ?d ; ?d wdt:P58 ?e ; ?e wdt:P1040 ?f ; ?f wdt:P1431 ?g ; ?g wdt:P58 ?h ; ?h wdt:P1040 ?i ; ?i wdt:P1431 ?j ; ?j wdt:P58 ?k ; ?k wdt:P1040 ?l ; ?l wdt:P1431 ?m ; ?m wdt:P58 ?n ; ?n wdt:P1040 ?o ; ?o wdt:P1431 ?p ; ?p wdt:P58 ?q ; ?q wdt:P1040 ?r ; ?r wdt:P1431 ?s ; ?s wdt:P58 ?t ; ?t wdt:P1040 ?u ; ?u wdt:P1431 ?v ; ?v wdt:P58 ?w ; ?w wdt:P1040 ?x ; } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE (\"\n        ,\n        \"(?x wdt:P57 ?y) AND (?y wdt:P57 ?z)\"\n        ,\n        \") OR (\" ,\n        \"(?x wdt:P57 ?y) AND (?y wdt:P57 ?z)\"\n        ,\n        \") ) \"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT * FROM ?x WHERE ( (?x wdt:P57 ?y) AND (?y wdt:P57 ?z) ) OR ( (?x wdt:P57 ?y) AND (?y wdt:P57 ?z) ) ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P57 ?y.\" , \" ?y wdt:P58 ?z.\" , \" ?z wdt:P112 ?a.\" , \" ?a wdt:P106 ?b.\" , \" ?b wdt:P57 ?c.\" , \" ?c wdt:P58 ?d.\" , \" ?d wdt:P112 ?e.\" , \" ?e wdt:P57 ?f.\" , \" ?f wdt:P58 ?g.\" , \" ?g wdt:P112 ?h.\" , \" ?h wdt:P57 ?i.\" , \" ?i wdt:P58 ?j.\" , \" ?j wdt:P112 ?k.\" , \" ?k wdt:P57 ?l.\" , \" ?l wdt:P58 ?m.\" , \" ?m wdt:P112 ?n.\" , \" ?n wdt:P57 ?o.\" , \" ?o wdt:P58 ?p.\" , \" ?p wdt:P112 ?q.\" , \" ?q wdt:P57 ?r.\" , \" }\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P57 ?y. ?y wdt:P58 ?z. ?z wdt:P112 ?a. ?a wdt:P106 ?b. ?b wdt:P57 ?c. ?c wdt:P58 ?d. ?d wdt:P112 ?e. ?e wdt:P57 ?f. ?f wdt:P58 ?g. ?g wdt:P112 ?h. ?h wdt:P57 ?i. ?i wdt:P58 ?j. ?j wdt:P112 ?k. ?k wdt:P57 ?l. ?l wdt:P58 ?m. ?m wdt:P112 ?n. ?n wdt:P57 ?o. ?o wdt:P58 ?p. ?p wdt:P112 ?q. ?q wdt:P57 ?r. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x [ P57 ] ?y ) AND ( ?x [ P112 ] ?z ) AND ( ?x [ P106 ] ?w )\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM ?x WHERE ( ?x [ P57 ] ?y ) AND ( ?x [ P112 ] ?z ) AND ( ?x [ P106 ] ?w ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?p, ?o WHERE (SELECT ?p WHERE EXISTSSUBJ[ wd:Q4959991 , ?p ] ) = 1 AND (SELECT ?p WHERE EXISTSSUBJ[ wd:Q5375110 , ?p ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P86, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P1431, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P58, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P1040, ?o ] ) = 1\", \"http://www.wikidata.org/sparql\" ] }\n       \t \t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?p, ?o WHERE (SELECT ?p WHERE EXISTSSUBJ[ wd:Q4959991 , ?p ] ) = 1 AND (SELECT ?p WHERE EXISTSSUBJ[ wd:Q5375110 , ?p ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P86, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P1431, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P58, ?o ] ) = 1 AND (SELECT ?o WHERE EXISTSPROPERTY[ wd:P1040, ?o ] ) = 1 <http://www.wikidata.org//sparql> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P344\\\" AND ?x hasProperty \\\"P57\\\" AND ?x hasProperty \\\"P1040\\\" AND ?x hasProperty \\\"P86\\\" AND ?x hasProperty \\\"P1431\\\" AND ?x hasProperty \\\"P58\\\"\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM ?x WHERE ?x hasProperty \"P344\" AND ?x hasProperty \"P57\" AND ?x hasProperty \"P1040\" AND ?x hasProperty \"P86\" AND ?x hasProperty \"P1431\" AND ?x hasProperty \"P58\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\"query\": [ \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P108 wd:Q55206 .\\n} \", \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P108 wd:Q23548 .\\n} \", \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P108 wd:Q41506 .\\n} \", \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P108 wd:Q622664 .\\n} \", \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P108 wd:Q5059715 .\\n} \", \"SELECT DISTINCT ?x WHERE {\\n  ?x wdt:P27 wd:Q30 .\\n} \"]}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q55206 . } SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q23548 . } SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q41506 . } SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q622664 . } SELECT DISTINCT ?x WHERE { ?x wdt:P108 wd:Q5059715 . } SELECT DISTINCT ?x WHERE { ?x wdt:P27 wd:Q30 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?x p:P108 ?z . }\", \"SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?x p:P108 ?z . }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?x p:P108 ?z . } SELECT DISTINCT ?r WHERE { ?x p:P112 ?y . ?x p:P108 ?z . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\",\n        \"?x wdt:P161 ?y.\\n\",\n        \"\\n\",\n        \"?y wdt:P1040 ?z.\\n\",\n        \"\\n\",\n        \"?z wdt:P344 ?a.\\n\",\n        \"\\n\",\n        \"?a wdt:P58 ?b.\\n\",\n        \"\\n\",\n        \"?b wdt:P161 ?c.\\n\",\n        \"\\n\",\n        \"?c wdt:P1040 ?d.\\n\",\n        \"\\n\",\n        \"?d wdt:P344 ?e.\\n\",\n        \"\\n\",\n        \"?e wdt:P58 ?f.\\n\",\n        \"\\n\",\n        \"?f wdt:P161 ?g.\\n\",\n        \"\\n\",\n        \"?g wdt:P1040 ?h.\\n\",\n        \"\\n\",\n        \"?h wdt:P344 ?i.\\n\",\n        \"\\n\",\n        \"?i wdt:P58 ?j.\\n\",\n        \"\\n\",\n        \"?j wdt:P161 ?k.\\n\",\n        \"\\n\",\n        \"?k wdt:P1040 ?l.\\n\",\n        \"\\n\",\n        \"?l wdt:P344 ?m.\\n\",\n        \"\\n\",\n        \"?m wdt:P58 ?n.\\n\",\n        \"\\n\",\n        \"?n wdt:P161 ?o.\\n\",\n        \"\\n\",\n        \"?o wdt:P1040 ?p.\\n\",\n        \"\\n\",\n        \"?p wdt:P344 ?q.\\n\",\n        \"\\n\",\n        \"?q wdt:P58 ?r.\\n\",\n        \"\\n\",\n        \"}\"\n    ]\n}\n  \t \t \t\t\t\t\t \t\t \t \t\t\t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P161 ?y. ?y wdt:P1040 ?z. ?z wdt:P344 ?a. ?a wdt:P58 ?b. ?b wdt:P161 ?c. ?c wdt:P1040 ?d. ?d wdt:P344 ?e. ?e wdt:P58 ?f. ?f wdt:P161 ?g. ?g wdt:P1040 ?h. ?h wdt:P344 ?i. ?i wdt:P58 ?j. ?j wdt:P161 ?k. ?k wdt:P1040 ?l. ?l wdt:P344 ?m. ?m wdt:P58 ?n. ?n wdt:P161 ?o. ?o wdt:P1040 ?p. ?p wdt:P344 ?q. ?q wdt:P58 ?r. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n    \"query\": [\n        \"SELECT ?r WHERE kg:4292 = Q1165050 AND kg:2617 = P161 AND kg:3024 = Q192115 AND kg:2617 = P161 AND kg:1991 = Q656357 AND kg:2617 = P161 AND kg:2814 = Q93853 AND kg:1339 = P344 AND kg:2814 = Q93853 AND kg:5839 = P57 AND kg:4292 = Q1165050 AND kg:8530 = P1040 AND kg:2814 = Q93853 AND kg:8530 = P1040 AND kg:3024 = Q192115 AND kg:8530 = P1040 AND kg:1991 = Q656357 AND kg:8530 = P1040 AND kg:2814 = Q93853 AND kg:6540 = P86 AND kg:4292 = Q1165050 AND kg:9292 = P58 AND kg:3024 = Q192115 AND kg:9292 = P58 AND kg:1991 = Q656357 AND kg:9292 = P58\",\n        \"AS ?r\"\n    ]\n}\n  \t\t\t\t\t \t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT ?r WHERE kg:4292 = Q1165050 AND kg:2617 = P161 AND kg:3024 = Q192115 AND kg:2617 = P161 AND kg:1991 = Q656357 AND kg:2617 = P161 AND kg:2814 = Q93853 AND kg:1339 = P344 AND kg:2814 = Q93853 AND kg:5839 = P57 AND kg:4292 = Q1165050 AND kg:8530 = P1040 AND kg:2814 = Q93853 AND kg:8530 = P1040 AND kg:3024 = Q192115 AND kg:8530 = P1040 AND kg:1991 = Q656357 AND kg:8530 = P1040 AND kg:2814 = Q93853 AND kg:6540 = P86 AND kg:4292 = Q1165050 AND kg:9292 = P58 AND kg:3024 = Q192115 AND kg:9292 = P58 AND kg:1991 = Q656357 AND kg:9292 = P58 AS ?r LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?r WHERE {\\n\", \"?x wdt:P58 ?y.\\n\", \"?y wdt:P1431 ?z.\\n\", \"\\n\", \"?a wdt:P108 ?b.\\n\", \"?b wdt:P1431 ?c.\\n\", \"\\n\", \"?d wdt:P108 ?e.\\n\", \"?e wdt:P1431 ?f.\\n\", \"\\n\", \"?g wdt:P108 ?h.\\n\", \"?h wdt:P1431 ?i.\\n\", \"\\n\", \"?j wdt:P108 ?k.\\n\", \"?k wdt:P1431 ?l.\\n\", \"\\n\", \"?m wdt:P108 ?n.\\n\", \"?n wdt:P1431 ?o.\\n\", \"\\n\", \"?p wdt:P108 ?q.\\n\", \"?q wdt:P1431 ?r.\\n\", \"}\"\n    ]\n}\n    \t \t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P58 ?y. ?y wdt:P1431 ?z. ?a wdt:P108 ?b. ?b wdt:P1431 ?c. ?d wdt:P108 ?e. ?e wdt:P1431 ?f. ?g wdt:P108 ?h. ?h wdt:P1431 ?i. ?j wdt:P108 ?k. ?k wdt:P1431 ?l. ?m wdt:P108 ?n. ?n wdt:P1431 ?o. ?p wdt:P108 ?q. ?q wdt:P1431 ?r. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{ \"query\": [ \"SELECT * FROM ?q WHERE (EXACT ?q ?p1) AND (EXACT ?q ?p2) AND (EXACT ?q ?p3)\", \"(?q)=(?p1)\", \"(?q)=(?p2)\", \"(?q)=(?p3)\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t", "normal_query": "SELECT * FROM ?q WHERE (EXACT ?q ?p1) AND (EXACT ?q ?p2) AND (EXACT ?q ?p3) (?q)=(?p1) (?q)=(?p2) (?q)=(?p3) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE wdt:P58 wd:Q1415127 AND wdt:P344 wd:Q208910 AND wdt:P58 wd:Q613974 AND wdt:P344 wd:Q1609393 AND wdt:P58 wd:Q17738 AND wdt:P57 wd:Q17738 AND wdt:P1431 wd:Q17738\", \"SELECT DISTINCT ?person WHERE wdt:P58 wd:Q1415127 AND wdt:P344 wd:Q208910 AND wdt:P58 wd:Q613974 AND wdt:P344 wd:Q1609393 AND wdt:P58 wd:Q17738 AND wdt:P57 wd:Q17738 AND wdt:P1431 wd:Q17738\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?person WHERE wdt:P58 wd:Q1415127 AND wdt:P344 wd:Q208910 AND wdt:P58 wd:Q613974 AND wdt:P344 wd:Q1609393 AND wdt:P58 wd:Q17738 AND wdt:P57 wd:Q17738 AND wdt:P1431 wd:Q17738 SELECT DISTINCT ?person WHERE wdt:P58 wd:Q1415127 AND wdt:P344 wd:Q208910 AND wdt:P58 wd:Q613974 AND wdt:P344 wd:Q1609393 AND wdt:P58 wd:Q17738 AND wdt:P57 wd:Q17738 AND wdt:P1431 wd:Q17738 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM wdg:Property p, wdg:NamedGraph g WHERE g = 'https://www.wikidata.org/swiki/Q1415127' AND p = 'P344' AND wdg:kg_id(p) = kg:1376 AND wdg:kg_id(g) = kg:0804\"\n    ]\n}\n  \t\t\t\t     \t\t \t \t \t ", "normal_query": "SELECT * FROM wdg:Property p, wdg:NamedGraph g WHERE g = 'https://www.wikidata.org/swiki/Q1415127' AND p = 'P344' AND wdg:kg_id(p) = kg:1376 AND wdg:kg_id(g) = kg:0804 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P344 wd:Q3485595 .\\n  OR\\n  ?person wdt:P57 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1040 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1431 wd:Q1473406 .\\n} \", \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P344 wd:Q3485595 .\\n  OR\\n  ?person wdt:P57 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1040 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1431 wd:Q1473406 .\\n} \", \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P344 wd:Q3485595 .\\n  OR\\n  ?person wdt:P57 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1040 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1431 wd:Q1473406 .\\n} \", \"SELECT DISTINCT ?person WHERE {\\n  ?person wdt:P344 wd:Q3485595 .\\n  OR\\n  ?person wdt:P57 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1040 wd:Q1473406 .\\n  OR\\n  ?person wdt:P1431 wd:Q1473406 .\\n} \"]} ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P344 wd:Q3485595 . OR ?person wdt:P57 wd:Q1473406 . OR ?person wdt:P1040 wd:Q1473406 . OR ?person wdt:P1431 wd:Q1473406 . } SELECT DISTINCT ?person WHERE { ?person wdt:P344 wd:Q3485595 . OR ?person wdt:P57 wd:Q1473406 . OR ?person wdt:P1040 wd:Q1473406 . OR ?person wdt:P1431 wd:Q1473406 . } SELECT DISTINCT ?person WHERE { ?person wdt:P344 wd:Q3485595 . OR ?person wdt:P57 wd:Q1473406 . OR ?person wdt:P1040 wd:Q1473406 . OR ?person wdt:P1431 wd:Q1473406 . } SELECT DISTINCT ?person WHERE { ?person wdt:P344 wd:Q3485595 . OR ?person wdt:P57 wd:Q1473406 . OR ?person wdt:P1040 wd:Q1473406 . OR ?person wdt:P1431 wd:Q1473406 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n    \"query\": [\n        \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n        \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n        \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = (SELECT kg:Q3485595 WHERE kg:P344 = kg:Q1473406))\",\n    \"SELECT * FROM kg:Q34", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P57 wd:Q2449461 .\", \"?x wdt:P57 wd:Q45602 .\", \"?x wdt:P57 wd:Q166739 .\", \"?x wdt:P57 wd:Q374172 .\", \"?x wdt:P1040 wd:Q2449461 .\", \"?x wdt:P1040 wd:Q45602 .\", \"?x wdt:P1040 wd:Q166739 .\", \"?x wdt:P1040 wd:Q374172 .\", \"?x wdt:P26 wd:Q32337 .\", \"?x wdt:P26 wd:Q137808 .\", \"?x wdt:P26 wd:Q241019 .\", \"}\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P57 wd:Q2449461 . ?x wdt:P57 wd:Q45602 . ?x wdt:P57 wd:Q166739 . ?x wdt:P57 wd:Q374172 . ?x wdt:P1040 wd:Q2449461 . ?x wdt:P1040 wd:Q45602 . ?x wdt:P1040 wd:Q166739 . ?x wdt:P1040 wd:Q374172 . ?x wdt:P26 wd:Q32337 . ?x wdt:P26 wd:Q137808 . ?x wdt:P26 wd:Q241019 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n    \"query\": [\n        \"?x─source─>kg:1085\",\n        \"?x─source─>kg:1503\",\n        \"?x─source─>kg:7001\",\n        \"?x─source─>kg:2856\",\n        \"?x─source─>kg:8455\"\n    ]\n}\n    \t\t\t\t     \t\t\t\t\t\t ", "normal_query": "?x─source─>kg:1085 ?x─source─>kg:1503 ?x─source─>kg:7001 ?x─source─>kg:2856 ?x─source─>kg:8455 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P31 wd:Q882 .\", \"?person wdt:P57 ?property.\" , \" ?property wdt:P57 ?person.\" , \" ?property wdt:P57 ?person.\" , \" ?property wdt:P57 ?person.\" , \" ?property wdt:P57 ?person.\" , \" ?property wdt:P1040 ?person.\" , \" ?property wdt:P58 ?person.\" , \" ?property wdt:P21 ?person.\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P31 wd:Q882 . ?person wdt:P57 ?property. ?property wdt:P57 ?person. ?property wdt:P57 ?person. ?property wdt:P57 ?person. ?property wdt:P57 ?person. ?property wdt:P1040 ?person. ?property wdt:P58 ?person. ?property wdt:P21 ?person. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wikitext kg:0701 Q882\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wikitext kg:0701 Q882 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?s WHERE {\\n\"\n       ,\n        \"?s wdt:P750 ?p.\\n\"\n        ,\n        \"?p wdt:P272 [P127(https://www.wikidata.org/entity/Q3511946)]\\n\"\n        ,\n        \"?p wdt:P127 [P127(https://www.wikidata.org/entity/Q7603552)]\\n\"\n        ,\n        \"?p wdt:P127 [P127(https://www.wikidata.org/entity/Q1411292)]\\n\"\n        ,\n        \"?p wdt:P127 [P127(https://www.wikidata.org/entity/Q3133593)]\\n\"\n        ,\n        \"?p wdt:P127 [P127(https://www.wikidata.org/entity/Q219635)]\\n\"\n        ,\n        \"?p wdt:P127 [P127(https://www.wikidata.org/entity/Q505275)]\\n\"\n        ,\n        \"\\n\"\n        , \"    }\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?s WHERE { ?s wdt:P750 ?p. ?p wdt:P272 [P127(https://www.wikidata.org/entity/Q3511946)] ?p wdt:P127 [P127(https://www.wikidata.org/entity/Q7603552)] ?p wdt:P127 [P127(https://www.wikidata.org/entity/Q1411292)] ?p wdt:P127 [P127(https://www.wikidata.org/entity/Q3133593)] ?p wdt:P127 [P127(https://www.wikidata.org/entity/Q219635)] ?p wdt:P127 [P127(https://www.wikidata.org/entity/Q505275)] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?s WHERE ?p = <https://kg:5133> AND ?o = <https://kg:2576>\"\n    ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT * FROM ?s WHERE ?p = <https://kg:5133> AND ?o = <https://kg:2576> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{ \"query\": [ \"SELECT DISTINCT ?composer, ?editor, ?director WHERE (SELECT ?composer WHERE P57(?composer) AND P1040(?composer) ) = (SELECT ?editor WHERE P57(?editor) AND P1040(?editor) ) = (SELECT ?director WHERE P57(?director) AND P1040(?director) )\" ] }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?composer, ?editor, ?director WHERE (SELECT ?composer WHERE P57(?composer) AND P1040(?composer) ) = (SELECT ?editor WHERE P57(?editor) AND P1040(?editor) ) = (SELECT ?director WHERE P57(?director) AND P1040(?director) ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n    \"query\": [\n        \"SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:5517> AND wdg:predicate = P57 AND wdg:object = <https://kg:0094>\",\n        \"SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:2333> AND wdg:predicate = P57 AND wdg:object = <https://kg:1841>\",\n        \"SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:9627> AND wdg:predicate = P57 AND wdg:object = <https://kg:2333>\",\n        \"SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:8503> AND wdg:predicate = P1040 AND wdg:object = <https://kg:9546>\",\n        \"SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:2003> AND wdg:predicate = P86 AND wdg:object = <https://kg:0094>\"\n    ]\n}\n    \t \t \t \t \t \t \t \t ", "normal_query": "SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:5517> AND wdg:predicate = P57 AND wdg:object = <https://kg:0094> SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:2333> AND wdg:predicate = P57 AND wdg:object = <https://kg:1841> SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:9627> AND wdg:predicate = P57 AND wdg:object = <https://kg:2333> SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:8503> AND wdg:predicate = P1040 AND wdg:object = <https://kg:9546> SELECT * FROM wdg:Statement WHERE wdg:subject = <https://kg:2003> AND wdg:predicate = P86 AND wdg:object = <https://kg:0094> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\"query\": [ \"SELECT DISTINCT ?person WHERE {\", \"?person wdt:P161 wd:Q1970252 .\", \"?person wdt:P57 wd:Q3017093 .\", \"?\"] }\n        \t\t\t\t\t \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P161 wd:Q1970252 . ?person wdt:P57 wd:Q3017093 . ? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{ \"query\": [\"SELECT * FROM ? WHERE (EXACT(?[kg:9852]) = 'P161') AND (EXACT(?[kg:9388]) = 'Q1970252') AND (EXACT(?[kg:7838]) = 'P57') AND (EXACT(?[kg:7353]) = 'Q3017093') AND (EXACT(?[kg:1056]) = 'Q88965291') AND (EXACT(?[kg:4919]) = 'P737') AND (EXACT(?[kg:3435]) = 'Q133730') )\", \"kg:9852\", \"kg:9388\", \"kg:7838\", \"kg:7353\", \"kg:1056\", \"kg:4919\", \"kg:3435\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM ? WHERE (EXACT(?[kg:9852]) = 'P161') AND (EXACT(?[kg:9388]) = 'Q1970252') AND (EXACT(?[kg:7838]) = 'P57') AND (EXACT(?[kg:7353]) = 'Q3017093') AND (EXACT(?[kg:1056]) = 'Q88965291') AND (EXACT(?[kg:4919]) = 'P737') AND (EXACT(?[kg:3435]) = 'Q133730') ) kg:9852 kg:9388 kg:7838 kg:7353 kg:1056 kg:4919 kg:3435 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE \" , \"?w wdt:P106 Q7042855\" , \"?w wdt:P737 Q104340\" , \"?w wdt:P26 Q157191\" , \"?w wdt:P112 Q219400\" , \"AND ?w wdt:P26 Q241019\" , \"AND ?w wdt:P26 Q32337\" , \"AND ?w wdt:P26 Q137808\" ] } ", "normal_query": "SELECT DISTINCT ?w WHERE ?w wdt:P106 Q7042855 ?w wdt:P737 Q104340 ?w wdt:P26 Q157191 ?w wdt:P112 Q219400 AND ?w wdt:P26 Q241019 AND ?w wdt:P26 Q32337 AND ?w wdt:P26 Q137808 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n    \"query\": [\n        \"?x─source─>kg:0887\",\n        \"?x─operator─>and\",\n        \"?x─target─>kg:0887\",\n        \"?p─object─>kg:3790\",\n        \"?p─operator─>and\",\n        \"?p─subject─>kg:2780\",\n        \"?p─object─>kg:5107\",\n        \"?p─operator─>and\",\n        \"?p─subject─>kg:6495\",\n        \"?p─object─>kg:137808\"\n    ]\n}\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t  ", "normal_query": "?x─source─>kg:0887 ?x─operator─>and ?x─target─>kg:0887 ?p─object─>kg:3790 ?p─operator─>and ?p─subject─>kg:2780 ?p─object─>kg:5107 ?p─operator─>and ?p─subject─>kg:6495 ?p─object─>kg:137808 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?x WHERE {\", \"?x wdt:P161 wd:Q2709504 .\", \"?x wdt:P57 wd:Q3204825 .\", \"?x wdt:P58 wd:Q3161846 .\" ] } ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P161 wd:Q2709504 . ?x wdt:P57 wd:Q3204825 . ?x wdt:P58 wd:Q3161846 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{ \"query\": [\"+prefix_:kg:\" , \"+prefix_:P161\" , \"+prefix_:Q2709504\", \"+prefix_:P57\", \"+prefix_:Q3204825\", \"+prefix_:Q3161846\", \"+prefix_:P58\", \"+prefix_:P737\", \"+prefix_:Q312258\", \"+prefix_:P26\"] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "+prefix_:kg: +prefix_:P161 +prefix_:Q2709504 +prefix_:P57 +prefix_:Q3204825 +prefix_:Q3161846 +prefix_:P58 +prefix_:P737 +prefix_:Q312258 +prefix_:P26 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n    \"query\": [\n        \"?item_wikidata IS [P750] OF ?acquired_by_vanguard_and_blackrock\",\n        \"?item_wikidata IS [P272] OF ?amazon_cloudfront\",\n        \"?item_wikidata IS [P272] OF ?amazon_kindle\",\n        \"?item_wikidata IS [P272] OF ?abebooks\"\n    ]\n}\n  \t\t\t\t\t\t\t\t\t\t\t \t\t \t \t", "normal_query": "?item_wikidata IS [P750] OF ?acquired_by_vanguard_and_blackrock ?item_wikidata IS [P272] OF ?amazon_cloudfront ?item_wikidata IS [P272] OF ?amazon_kindle ?item_wikidata IS [P272] OF ?abebooks LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{ \"query\": [ \"SELECT * FROM ?s WHERE (EXACT ?s ?p ?o) OR (EXACT ?s ?p ?o)\", \"http://www.w3.org/2000/10/SIBO/1.0#isPartOf\", \"http://www.w3.org/2008/09/SIBO#owningEntity\", \"http://www.w3.org/2008/09/SIBO#parent\", \"http://www.w3.org/2008/09/SIBO#child\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t", "normal_query": "SELECT * FROM ?s WHERE (EXACT ?s ?p ?o) OR (EXACT ?s ?p ?o) <http://www.w3.org/2000/10/SIBO//1.0> <http://www.w3.org/2008/09//SIBO> <http://www.w3.org/2008/09//SIBO> <http://www.w3.org/2008/09//SIBO> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\"query\": [ \"SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q4004365 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q3207690 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P344 wd:Q4004365 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P344 wd:Q3207690 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P57 wd:Q289021 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P57 wd:Q463946 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P58 wd:Q289021 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P58 wd:Q463946 }\", \"SELECT DISTINCT ?item WHERE { ?item wdt:P27 wd:Q29 }\" ]}\n  \t\t\t\t\t \t \t\t\t\t\t \t\t\t\t", "normal_query": "SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q4004365 } SELECT DISTINCT ?item WHERE { ?item wdt:P161 wd:Q3207690 } SELECT DISTINCT ?item WHERE { ?item wdt:P344 wd:Q4004365 } SELECT DISTINCT ?item WHERE { ?item wdt:P344 wd:Q3207690 } SELECT DISTINCT ?item WHERE { ?item wdt:P57 wd:Q289021 } SELECT DISTINCT ?item WHERE { ?item wdt:P57 wd:Q463946 } SELECT DISTINCT ?item WHERE { ?item wdt:P58 wd:Q289021 } SELECT DISTINCT ?item WHERE { ?item wdt:P58 wd:Q463946 } SELECT DISTINCT ?item WHERE { ?item wdt:P27 wd:Q29 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\"query\": [\"+prefixes+\",\n\"SELECT ?person ?name ?birthYear ?placeOfBirth ?fieldOfStudy ?thesisTitle ?thesisUrl ?thesisAdvisors ?thesisSupervisor ?thesisDate ?thesisPlace ?thesisAdvisoryCommittee ?thesisAdvisoryMember ?thesisAdvisoryChairman ?thesisAdvisoryChairmanName ?thesisAdvisoryChairmanPosition ?thesisAdvisoryChairmanEmail ?thesisAdvisoryChairmanPhone ?thesisAdvisoryChairmanAddress ?thesisAdvisoryChairmanLocation ?thesisAdvisoryChairmanAltText ?thesisAdvisoryChairmanImage\",\n\"WHERE {\\n  ?p1 a [kg:1976] ;\\n  ?p2 a [kg:9187] ;\\n  ?p3 a [kg:0078] ;\\n  ?p4 a [kg:6030] ;\\n  ?p5 a [kg:8940] ;\\n  ?p6 a [kg:0939] ;\\n  ?p7 a [kg:1976] ;\\n  ?p8 a [kg:9187] ;\\n  ?p9 a [kg:0078] ;\\n  ?p10 a [kg:6030] ;\\n  ?p11 a [kg:8940] ;\\n  ?p12 a [kg:0939] ;\\n  ?p13 a [kg:1976] ;\\n  ?p14 a [kg:3229] ;\\n  ?p15 a [kg:9187] ;\\n  ?p16 a [kg:0078] ;\\n  ?p17 a [kg:6030] ;\\n  ?p18 a [kg:8940] ;\\n  ?p19 a [kg:0939] ;\\n  ?p20 a [kg:1976] ;\\n  ?p21 a [kg:3229] ;\\n  ?p22 a [kg:9187] ;\\n  ?p23 a [kg:0078] ;\\n  ?p24 a [kg:6030] ;\\n  ?p25 a [kg:8940] ;\\n  ?p26 a [kg:0939] ;\\n  ?p27 a [kg:1754] ;\\n  ?p28 a [kg:0418] ;\\n  ?p29 a [kg:3045] ;\\n  ?p30 a [kg:6030] ;\\n  ?p31 a [kg:8940] ;\\n  ?p32 a [kg:0939] ;\\n  ?p33 a [kg:1976] ;\\n  ?p34 a [kg:3229] ;\\n  ?p35 a [kg:9187] ;\\n  ?p36 a [kg:0078] ;\\n  ?p37 a [kg:6030] ;\\n  ?p38 a [kg:8940] ;\\n  ?p39 a [kg:0939] ;\\n  ?p40 a [kg:1976] ;\\n  ?p41 a [kg:3229] ;\\n  ?p42 a [kg:9187] ;\\n  ?p43 a [kg:0078] ;\\n  ?p44 a [kg:6030] ;\\n  ?p45 a [kg:8940] ;\\n  ?p46 a [kg:0939] ;\\n  ?p47 a [kg:1754] ;\\n  ?p48 a [kg:0418] ;\\n  ?p49 a [kg:3045] ;\\n  ?p50 a [kg:6030] ;\\n  ?p51 a [kg:8940] ;\\n  ?p52 a [kg:0939] ;\\n  ?p53 a [kg:1976", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?x wdt:P106 ?y\" , \" ?y wdt:P112 ( wd:Q222344 )\" , \" ?z wdt:P112 ( wd:Q216611 )\" , \" ?w wdt:P112 ( wd:Q242446 )\" , \" ?v wdt:P112 ( wd:Q258945 )\" , \" ?u wdt:P112 ( wd:Q746676 )\" , \" ?t wdt:P112 ( wd:Q1044630 )\" , \"?x wdt:P26 ?y\" , \" ?y wdt:P112 ( wd:Q6813152 )\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x wdt:P106 ?y ?y wdt:P112 ( wd:Q222344 ) ?z wdt:P112 ( wd:Q216611 ) ?w wdt:P112 ( wd:Q242446 ) ?v wdt:P112 ( wd:Q258945 ) ?u wdt:P112 ( wd:Q746676 ) ?t wdt:P112 ( wd:Q1044630 ) ?x wdt:P26 ?y ?y wdt:P112 ( wd:Q6813152 ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{ \"query\": [ \"SELECT * FROM ?x WHERE ( ?x[?P106] = ?y AND ?y[?Q222344] ) OR ( ?x[?P112] = ?y AND ?y[?Q242446] ) OR ( ?x[?P112] = ?y AND ?y[?Q746676] ) OR ( ?x[?P112] = ?y AND ?y[?Q6813152] ) )\", \"kg:2039 is P106\", \"kg:2511 is Q222344\", \"kg:4287 is P112\", \"kg:5448 is Q242446\", \"kg:3386 is Q746676\", \"kg:5134 is Q6813152\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT * FROM ?x WHERE ( ?x[?P106] = ?y AND ?y[?Q222344] ) OR ( ?x[?P112] = ?y AND ?y[?Q242446] ) OR ( ?x[?P112] = ?y AND ?y[?Q746676] ) OR ( ?x[?P112] = ?y AND ?y[?Q6813152] ) ) kg:2039 is P106 kg:2511 is Q222344 kg:4287 is P112 kg:5448 is Q242446 kg:3386 is Q746676 kg:5134 is Q6813152 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?person WHERE {\\n\", \"?person wdt:P161 \\\"Inception\\\".\\n\", \"?person wdt:P161 \\\"Game Over\\\".\\n\", \"?person wdt:P161 \\\"Liberation\\\".\\n\", \"?person wdt:P344 \\\"The Madness\\\".\" ] } ", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P161 \"Inception\". ?person wdt:P161 \"Game Over\". ?person wdt:P161 \"Liberation\". ?person wdt:P344 \"The Madness\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE { ?x p:P161 ?y . ?x p:P344 ?z . }\", \"SELECT DISTINCT ?r WHERE { ?x p:P161 ?y . ?x p:P344 ?z . }\" ] }\n  \t\t\t\t\t \t \t \t \t \t \t ", "normal_query": "SELECT DISTINCT ?r WHERE { ?x p:P161 ?y . ?x p:P344 ?z . } SELECT DISTINCT ?r WHERE { ?x p:P161 ?y . ?x p:P344 ?z . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{ \"query\": [ \"SELECT DISTINCT ?w WHERE {\\n  ?w wdt:P344 wd:Q1609393 .\\n  ?w wdt:P344 wd:Q2411065 .\\n  ?w wdt:P344 wd:Q208910 .\\n  ?w wdt:P344 wd:Q613974 .\\n  ?w wdt:P58 wd:Q1609393 .\\n  ?w wdt:P58 wd:Q2411065 .\\n  ?w wdt:P58 wd:Q208910 .\\n  ?w wdt:P58 wd:Q613974 .\\n  ?w wdt:P737 wd:Q52306598 .\\n  ?w wdt:P737 wd:Q717378 .\\n  ?w wdt:P26 wd:?x .\\n  ?w wdt:P31 wd:?y .\\n} \", \"format\", \"json\", \"limit\", \"50\" ] }\n  \t\t\t\t\t \t\t \t \t\t \t \t\t", "normal_query": "SELECT DISTINCT ?w WHERE { ?w wdt:P344 wd:Q1609393 . ?w wdt:P344 wd:Q2411065 . ?w wdt:P344 wd:Q208910 . ?w wdt:P344 wd:Q613974 . ?w wdt:P58 wd:Q1609393 . ?w wdt:P58 wd:Q2411065 . ?w wdt:P58 wd:Q208910 . ?w wdt:P58 wd:Q613974 . ?w wdt:P737 wd:Q52306598 . ?w wdt:P737 wd:Q717378 . ?w wdt:P26 wd:?x . ?w wdt:P31 wd:?y . } format json limit 50 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{ \"query\": [ \"SELECT COUNT(*) FROM ? WHERE ? = 'Q1609393' AND ? = 'P344' AND ? = 'Q2411065' AND ? = 'P344' AND ? = 'Q208910' AND ? = 'P344' AND ? = 'Q613974' AND ? = 'P344' AND ? = 'Q1609393' AND ? = 'P58' AND ? = 'Q2411065' AND ? = 'P58' AND ? = 'Q208910' AND ? = 'P58' AND ? = 'Q613974' AND ? = 'P58'\", \"kg:9012\" , \"kg:8427\", \"kg:0352\", \"kg:3655\", \"kg:0611\", \"kg:8850\", \"kg:3218\", \"kg:7578\", \"kg:6555\", \"kg:7316\", \"kg:6397\", \"kg:8216\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT COUNT(*) FROM ? WHERE ? = 'Q1609393' AND ? = 'P344' AND ? = 'Q2411065' AND ? = 'P344' AND ? = 'Q208910' AND ? = 'P344' AND ? = 'Q613974' AND ? = 'P344' AND ? = 'Q1609393' AND ? = 'P58' AND ? = 'Q2411065' AND ? = 'P58' AND ? = 'Q208910' AND ? = 'P58' AND ? = 'Q613974' AND ? = 'P58' kg:9012 kg:8427 kg:0352 kg:3655 kg:0611 kg:8850 kg:3218 kg:7578 kg:6555 kg:7316 kg:6397 kg:8216 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\"query\": [ \"SELECT DISTINCT ?r WHERE { \", \"?uri\" , \"P106\" , \"?r\" ]} ", "normal_query": "SELECT DISTINCT ?r WHERE { ?uri P106 ?r LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n    \"query\": [\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P106\\\" AND ?x hasProperty \\\"Q222344\\\" AND ?x hasProperty \\\"Q18609037\\\" AND ?x hasProperty \\\"Q1361018\\\".\",\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P57\\\" AND ?x hasProperty \\\"Q1361018\\\".\",\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P1040\\\" AND ?x hasProperty \\\"Q2086445\\\".\",\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P1431\\\" AND ?x hasProperty \\\"Q2086445\\\".\",\n        \"SELECT * FROM ?x WHERE ?x hasProperty \\\"P58\\\" AND ?x hasProperty \\\"Q1361018\\\".\"\n    ]\n}\n    \t \t\t\t\t\t \t\t\t\t\t \t ", "normal_query": "SELECT * FROM ?x WHERE ?x hasProperty \"P106\" AND ?x hasProperty \"Q222344\" AND ?x hasProperty \"Q18609037\" AND ?x hasProperty \"Q1361018\". SELECT * FROM ?x WHERE ?x hasProperty \"P57\" AND ?x hasProperty \"Q1361018\". SELECT * FROM ?x WHERE ?x hasProperty \"P1040\" AND ?x hasProperty \"Q2086445\". SELECT * FROM ?x WHERE ?x hasProperty \"P1431\" AND ?x hasProperty \"Q2086445\". SELECT * FROM ?x WHERE ?x hasProperty \"P58\" AND ?x hasProperty \"Q1361018\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P1040 ?p1.\", \"?v wdt:P58 ?p2.\", \"?v wdt:P737 ?p3.\" ] } ", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P1040 ?p1. ?v wdt:P58 ?p2. ?v wdt:P737 ?p3. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{ \"query\": [ \"SELECT DISTINCT ?r WHERE {\", \"?v1 a kg:3350 ;\", \"?v1 p kg:4129 ;\", \"?v1 p kg:2133 ;\", \"?v1 p kg:5639 ;\", \"?v1 p kg:8697 ;\", \"?v1 p kg:1795 ;\", \"?v1 p kg:0316 ;\", \"?v1 p kg:4129 ;\", \"?v1 p kg:2133 ;\", \"?v1 p kg:5639 ;\", \"?v1 p kg:8697 ;\", \"?v1 p kg:1795 ;\", \"?v1 p kg:0316 ;\", \"?v1 p kg:4129 ;\", \"?v1 p kg:2133 ;\", \"?v1 p kg:5639 ;\", \"?v1 p kg:8697 ;\", \"?v1 p kg:1795 ;\", \"?v1 p kg:0316 ;\" ] } ", "normal_query": "SELECT DISTINCT ?r WHERE { ?v1 a kg:3350 ; ?v1 p kg:4129 ; ?v1 p kg:2133 ; ?v1 p kg:5639 ; ?v1 p kg:8697 ; ?v1 p kg:1795 ; ?v1 p kg:0316 ; ?v1 p kg:4129 ; ?v1 p kg:2133 ; ?v1 p kg:5639 ; ?v1 p kg:8697 ; ?v1 p kg:1795 ; ?v1 p kg:0316 ; ?v1 p kg:4129 ; ?v1 p kg:2133 ; ?v1 p kg:5639 ; ?v1 p kg:8697 ; ?v1 p kg:1795 ; ?v1 p kg:0316 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n    \"query\": [\n        \"SELECT DISTINCT ?s WHERE {\\n\", \"?s wdt:P750 ?p .\\n\", \"\\n\", \"?s wdt:P272 [ps:propertyType=P127] .\\n\", \"\\n\", \"?s wdt:P127 ?o .\\n\", \"\\n\", \"SERVICE/OVERRIDE\"\n        ]\n    }\n    \t\t\t\t\t  \t\t\t\t\t\t \t\t", "normal_query": "SELECT DISTINCT ?s WHERE { ?s wdt:P750 ?p . ?s wdt:P272 [ps:propertyType=P127] . ?s wdt:P127 ?o . SERVICE/OVERRIDE LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{ \"query\": [ \"SELECT * FROM ?s WHERE ( ?s [ P750 ] ?o ) AND ( ?s [ P272 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) \", \"kg:0968 is Q2062523\", \"kg:2147 is P272\", \"kg:3944 is P127\", \"kg:3199 is Q7603552\", \"kg:4291 is Q2007336\", \"kg:1622 is Q219635\", \"kg:6334 is Q505275\", \"kg:4156 is Q849363\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT * FROM ?s WHERE ( ?s [ P750 ] ?o ) AND ( ?s [ P272 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) AND ( ?s [ P127 ] ?o ) kg:0968 is Q2062523 kg:2147 is P272 kg:3944 is P127 kg:3199 is Q7603552 kg:4291 is Q2007336 kg:1622 is Q219635 kg:6334 is Q505275 kg:4156 is Q849363 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{ \"query\": [ \"SELECT DISTINCT ?v WHERE {\", \"?v wdt:P162 [wikipedia.org/wiki/ film] ; wd:Q11424 .\", \"?v wdt:P57 [wikipedia.org/wiki/ directed_by] ; wd:Q16390 .\", \"?v wdt:P57 [wikipedia.org/wiki/ produced_by] ; wd:Q295984 .\", \"?v wdt:P57 [wikipedia.org/wiki/ written_by] ; wd:Q4420093 .\", \"?v wdt:P57 [wikipedia.org/wiki/ starred_in] ; wd:Q242477 .\", \"?v wdt:P162 [wikipedia.org/wiki/ film] ; wd:Q11424 .\" ] }\n  \t\t\t\t\t \t\t\t\t\t \t\t \t \t", "normal_query": "SELECT DISTINCT ?v WHERE { ?v wdt:P162 [wikipedia.org/wiki/ film] ; wd:Q11424 . ?v wdt:P57 [wikipedia.org/wiki/ directed_by] ; wd:Q16390 . ?v wdt:P57 [wikipedia.org/wiki/ produced_by] ; wd:Q295984 . ?v wdt:P57 [wikipedia.org/wiki/ written_by] ; wd:Q4420093 . ?v wdt:P57 [wikipedia.org/wiki/ starred_in] ; wd:Q242477 . ?v wdt:P162 [wikipedia.org/wiki/ film] ; wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:7b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n    \"query\": [\n        \"?itemType\" ,\n        \"?isPartOf\",\n        \"?wasDirectedBy\",\n        \"?directedBy\",\n        \"?producedBy\",\n        \"?writtenBy\",\n        \"?stars\",\n        \"?starredBy\"\n    ]\n}\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t", "normal_query": "?itemType ?isPartOf ?wasDirectedBy ?directedBy ?producedBy ?writtenBy ?stars ?starredBy LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{ \"query\": [\n    \"SELECT DISTINCT ?person WHERE {\"\n      , \"  ?person wdt:P106 wd:Q103013 .\"\n      , \"  ?person wdt:P106 wd:Q69423232 .\"\n      , \"} LIMIT 100\"\n    ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?person WHERE { ?person wdt:P106 wd:Q103013 . ?person wdt:P106 wd:Q69423232 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\n\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "@prefix kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 wd:Q853 .\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q853 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\n\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "@prefix kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{ \"query\": [\n  \"?x wdt:P155 wd:Q1042294 .\",\n  \"?x wdt:P31 wd:Q721 .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P155 wd:Q1042294 . ?x wdt:P31 wd:Q721 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{ \"query\": [\n  \"SELECT DISTINCT ?x WHERE {\",\n  \"  ?x wdt:P155 wd:Q131593 .\",\n  \"  ?x wdt:P155 wd:Q168 .\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P155 wd:Q131593 . ?x wdt:P155 wd:Q168 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"SELECT ?parent\",\n    \"WHERE {\",\n      \"?person wdt:P40 ?parent.\",\n      \"FILTER (STRSTARTS(STR(?person), \\\"http://www.wikidata.org/entity/Q260\\\"))\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?parent WHERE { ?person wdt:P40 ?parent. FILTER (STRSTARTS(STR(?person), \"wd:Q260\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?parent\",\n    \"WHERE {\",\n      \"?child kg:P40 ?parent .\",\n      \"FILTER (STRSTARTS(STR(?child), \\\"kg:7406\\\"))\",\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT DISTINCT ?parent WHERE { ?child kg:P40 ?parent . FILTER (STRSTARTS(STR(?child), \"kg:7406\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{ \"query\": [ \"SELECT ?person WHERE { ?person wdt:P108 wd:Q40 }\" ] }\n    \t\t\t\t   \t\t\t  \t\t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 wd:Q40 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{ \"query\": [\n  \"{prefixes}\",\n  \"SELECT DISTINCT ?work\",\n  \"WHERE {\",\n  \"?work wdt:P58 wd:Q80379 .\", \"=> This line connects the work to J.R.R. Tolkien as the author (P58 is written by, Q80379 is J.R.R. Tolkien)\",\n  \"?work wdt:P1429 wd:Q892 .\" ]} ", "normal_query": "{prefixes} SELECT DISTINCT ?work WHERE { ?work wdt:P58 wd:Q80379 . => This line connects the work to J.R.R. Tolkien as the author (P58 is written by, Q80379 is J.R.R. Tolkien) ?work wdt:P1429 wd:Q892 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:7976 ?y .\",\n      \"?y kg:5079 ?z .\",\n      \"?z kg:7109 ?w .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:7976 ?y . ?y kg:5079 ?z . ?z kg:7109 ?w . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{ \"query\": [\n  \"?x wdt:P1431 ?y .\"\n]\n}\n      \t\t\t\t    \t\t\t\t\t\t", "normal_query": "?x wdt:P1431 ?y . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\"\n      ,\n      \"?x kg:0000 ?y .\"\n      ,\n      \"?y kg:7729 ?z .\"\n      ,\n      \"?z kg:8619 ?w .\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:0000 ?y . ?y kg:7729 ?z . ?z kg:8619 ?w . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P106 wd:Q36834 .\", \">// occupation: Composer (Q36834)\"\n    ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q36834 . >// occupation: Composer (Q36834) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P106 wd:Q69423232 .\",\n    \"  ?x wdt:P344 wd:Q158069 .\"\n    ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q69423232 . ?x wdt:P344 wd:Q158069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\": [\n    \"?s ?p ?o\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?s ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"{subject} {predicate} {object}.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "{prefixes} {subject} {predicate} {object}. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{ \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?work wdt:P106 wd:Q36834 .\", \">// work has genre classical music (P106, Q36834)\"\n    \t\t\t\t   \t\t,\n    \"?work wdt:P272 wd:Q208824 .\", \">// work's performer is The Beatles (P272, Q208824)\"\n    \t\t\t\t   \t\t,\n    \"}\"\n   ]\n}\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?work wdt:P106 wd:Q36834 . >// work has genre classical music (P106, Q36834) ?work wdt:P272 wd:Q208824 . >// work's performer is The Beatles (P272, Q208824) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"?composer wdt:P106 ?profession.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t \t", "normal_query": "?composer wdt:P106 ?profession. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{ \"query\": [\n    \"?x kg:3969 ?y\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "?x kg:3969 ?y LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"?x wdt:P106 ?y .\",\n    \"SERVICE wikibase:label { bd:serviceParam lang 'en' }\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P106 ?y . SERVICE wikibase:label { bd:serviceParam lang 'en' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P750 wd:Q2283.\",\n    \"  ?x wdt:P155 wd:Q4348691.\"\n    ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q2283. ?x wdt:P155 wd:Q4348691. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{ \"query\": [\n  \"{prefixes}\",\n  \"SELECT DISTINCT ?x WHERE {\",\n  \"  ?x kg:propertyCode ?y .\",\n  \"  ?y kg:propertyValue \\\"value\\\" .\"\n  ,\n  \"} LIMIT 100\"\n] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "{prefixes} SELECT DISTINCT ?x WHERE { ?x kg:propertyCode ?y . ?y kg:propertyValue \"value\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P155 wd:Q2085 .\",\n    \"  ?x wdt:P161 wd:Q967797 .\"\n    ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P155 wd:Q2085 . ?x wdt:P161 wd:Q967797 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?x WHERE { kg:5276 ?p ?x . }\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { kg:5276 ?p ?x . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"SELECT DISTINCT ?x\",\n    \"WHERE {\",\n    \"?x wdt:P355 wd:Q81950264 .\", \"=> This line represents the subject and predicate, but I'm not sure about the object. Maybe it's supposed to be something else.\",\n    \"wd:Q15070044 wdt:P112 ?y .\",\n    \"?x wdt:P40 ?y .\"\n    ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "{prefixes} SELECT DISTINCT ?x WHERE { ?x wdt:P355 wd:Q81950264 . => This line represents the subject and predicate, but I'm not sure about the object. Maybe it's supposed to be something else. wd:Q15070044 wdt:P112 ?y . ?x wdt:P40 ?y . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P108 wd:Q1022419 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q1022419 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{ \"query\": [\n  \"?x wdt:P108 ?y .\",\n  \"?y wdt:P750 ?z .\"\n]\n}\n                    ", "normal_query": "?x wdt:P108 ?y . ?y wdt:P750 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\n  \"{prefixes}\",\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P108 wd:Q103941992 .\",\n  \"  ?x wdt:P40 wd:Q15070044 .\",\n  \"}\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "{prefixes} SELECT ?x WHERE { ?x wdt:P108 wd:Q103941992 . ?x wdt:P40 wd:Q15070044 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P3373 ?y .\"\n      ,\n      \"?y wdt:P26 ?z .\"\n      ,\n      \"?z wdt:P106 wd:Q1323191 .\"\n      ,\n      \"}\"\n    ]\n  }\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P3373 ?y . ?y wdt:P26 ?z . ?z wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n       \t\t\t\t\t    \t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"SELECT DISTINCT ?x WHERE {\",\n    \"?x wdt:P112 wd:Q1102919 .\", \"=> This line represents the subject and predicate, but I need to adjust it.\",\n    \"?x wdt:P26 wd:Q1323191 .\", \"=> This line is incorrect. I need to fix this.\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "{prefixes} SELECT DISTINCT ?x WHERE { ?x wdt:P112 wd:Q1102919 . => This line represents the subject and predicate, but I need to adjust it. ?x wdt:P26 wd:Q1323191 . => This line is incorrect. I need to fix this. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 wd:Q2643 .\",\n      \"?x wdt:P58 wd:Q2643 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q2643 . ?x wdt:P58 wd:Q2643 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:4115 ?y .\",\n      \"?y kg:8693 kg:2538 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t \t  ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:4115 ?y . ?y kg:8693 kg:2538 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?y .\",\n      \"?y wdt:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t  \t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 ?y . ?y wdt:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource\",\n    \"WHERE {\",\n      \"?s kg:1179 ?p .\",\n      \"?s kg:9130 ?o .\",\n      \"FILTER (regex(str(?o), \\\"Anker Sørensen\\\"))\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?s kg:1179 ?p . ?s kg:9130 ?o . FILTER (regex(str(?o), \"Anker Sørensen\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P106 ?y .\",\n      \"?y kg:P355 kg:8815 .\",\n      \"?y kg:P40 kg:9469 .\",\n      \"?y kg:P27 kg:3398 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . ?y kg:P355 kg:8815 . ?y kg:P40 kg:9469 . ?y kg:P27 kg:3398 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q3514303 .\", \"=> This line seems to be incorrect. I think it should be something else.\"\n      ,\n      \"?person wdt:P106 ?profession .\",\n      \"?person wdt:P27 ?country .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?spouse WHERE { ?person wdt:P26 wd:Q3514303 . => This line seems to be incorrect. I think it should be something else. ?person wdt:P106 ?profession . ?person wdt:P27 ?country . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n  \"query\": [\n    \"?x ?y ?z\"\n  ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x ?y ?z LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P108 wd:Q1141467 .\", \"=>\" ,\n    \"  ?x wdt:P272 wd:Q1323191 .\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q1141467 . => ?x wdt:P272 wd:Q1323191 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P3373 ?y .\"\n      ,\n      \"?y wdt:P26 ?z .\"\n      ,\n      \"?y wdt:P106 wd:Q1323191 .\"\n      ,\n      \"}\"\n    ]\n  }\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P3373 ?y . ?y wdt:P26 ?z . ?y wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n  \"query\": [\n    \"?x ?y ?z\"\n  ]\n}\n                    ", "normal_query": "?x ?y ?z LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P108 wd:Q1094792 .\",\n    \"} LIMIT 10\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "{prefixes} SELECT ?x WHERE { ?x wdt:P108 wd:Q1094792 . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P750 wd:Q1651543 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{ \"query\": [\n    \"{prefixes}\",\n    \"SELECT DISTINCT ?resource\",\n    \"WHERE {\",\n    \"?s kg:3140 ?o .\", \"=> kg:3140 is P750, which is 'instance of'\",\n    \"kg:9250 kg:3140 kg:8263 .\", \"=> kg:9250 is Q1651543, which is 'The Magic Flute'\",\n    \"kg:9250 kg:7989 ?p .\", \"=> kg:7989 is P272, which is 'founder'\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "{prefixes} SELECT DISTINCT ?resource WHERE { ?s kg:3140 ?o . => kg:3140 is P750, which is 'instance of' kg:9250 kg:3140 kg:8263 . => kg:9250 is Q1651543, which is 'The Magic Flute' kg:9250 kg:7989 ?p . => kg:7989 is P272, which is 'founder' LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\": [\n    \"?x wdt:P106 ?y.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P106 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n  \"query\": [\n    \"?x kg:0399 ?y\"\n  ]\n}\n                \t\t\t\t", "normal_query": "?x kg:0399 ?y LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P3373 wd:Q3356 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P3373 wd:Q3356 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p1 w1 .\",\n      \"?x p2 w2 .\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x p1 w1 . ?x p2 w2 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P750 wd:Q1651543 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P3373 wd:Q117892 .\"\n      ,\n      \"?x wdt:P27 wd:Q29999 .\"\n      ,\n      \"?x wdt:P112 wd:Q2336212 .\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P3373 wd:Q117892 . ?x wdt:P27 wd:Q29999 . ?x wdt:P112 wd:Q2336212 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\": [\n    \"?x ?y ?z\"\n  ]\n}\n               \t   \t", "normal_query": "?x ?y ?z LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t \t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P108 ?y .\",\n      \"?y p:P27 ?z .\",\n      \"?z p:P3373 ?w .\",\n      \"?w p:Q15789 ?v .\",\n      \"?v p:Q60414 ?u .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x p:P108 ?y . ?y p:P27 ?z . ?z p:P3373 ?w . ?w p:Q15789 ?v . ?v p:Q60414 ?u . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P750 wd:Q3715556 .\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q3715556 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P750 ?y .\",\n      \"?y kg:P272 ?z .\",\n      \"?z kg:P112 ?w .\",\n      \"?w kg:P272 kg:Q3715556 .\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t \t  \t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P750 ?y . ?y kg:P272 ?z . ?z kg:P112 ?w . ?w kg:P272 kg:Q3715556 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q142 .\", \"=> company\"\n      ,\n      \"?x wdt:P112 wd:Q1079409 .\", \"=> founder is Alphonse-Louis du Plessis de Richelieu's French sibling\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q142 . => company ?x wdt:P112 wd:Q1079409 . => founder is Alphonse-Louis du Plessis de Richelieu's French sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P112 ?y .\",\n      \"?y kg:P27 ?z .\",\n      \"?z kg:P3373 ?w .\",\n      \"?w kg:P31 kg:Q142 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P112 ?y . ?y kg:P27 ?z . ?z kg:P3373 ?w . ?w kg:P31 kg:Q142 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P162 wd:Q320211 .\",\n      \"?x wdt:P272 wd:Q44477 .\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P162 wd:Q320211 . ?x wdt:P272 wd:Q44477 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n  \"query\": [\n    \"?x ?y ?z\"\n  ]\n}\n                    ", "normal_query": "?x ?y ?z LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{ \"query\": [\n  \"?x wdt:P1431 ?y .\",\n  \"?y wdt:P58 ?z .\"\n]\n}\n                    ", "normal_query": "?x wdt:P1431 ?y . ?y wdt:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P1431 kg:6047 .\", \"=> This line seems to be about the property P1431 and value kg:6047.\",\n      \"?x kg:P58 kg:9283 .\", \"=> This line is about the property P58 and value kg:9283.\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P1431 kg:6047 . => This line seems to be about the property P1431 and value kg:6047. ?x kg:P58 kg:9283 . => This line is about the property P58 and value kg:9283. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P750 wd:Q1651543 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P40 wd:Q443473 .\", \"=>\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P40 wd:Q443473 . => } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "SELECT DISTINCT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n  \"query\": [\n    \"?x wdt:P106 ?y.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P106 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P106 ?y .\", \"=> This line seems to be about the person's occupation or role.\",\n      \"?y kg:P21 \\\"male\\\" .\", \"=> P21 is gender, so this specifies that the spouse is male.\",\n      \"?x kg:P27 ?z .\", \"=> P27 is place of birth, but maybe it's not needed here.\",\n      \"?z kg:P6581097 \\\"Canada\\\" .\", \"=> Wait, P6581097 doesn't seem right. Maybe it should be a different property or value.\",\n      \"?x kg:P26 ?w .\", \"=> P26 is spouse, so this links the person to their spouse.\",\n      \"?w kg:Q1323191 \\\"Jessica Drake\\\" .\", \"=> Q1323191 might be a name property, but I'm not sure about the syntax here.\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . => This line seems to be about the person's occupation or role. ?y kg:P21 \"male\" . => P21 is gender, so this specifies that the spouse is male. ?x kg:P27 ?z . => P27 is place of birth, but maybe it's not needed here. ?z kg:P6581097 \"Canada\" . => Wait, P6581097 doesn't seem right. Maybe it should be a different property or value. ?x kg:P26 ?w . => P26 is spouse, so this links the person to their spouse. ?w kg:Q1323191 \"Jessica Drake\" . => Q1323191 might be a name property, but I'm not sure about the syntax here. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P750 wd:Q47099 .\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q47099 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:0424 ?y .\",\n      \"?y kg:2408 kg:Q47099 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x kg:0424 ?y . ?y kg:2408 kg:Q47099 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [ \"SELECT ?child ?parent WHERE { ?parent wdt:P127 ?child . ?parent wdt:P40 wd:Q467752 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?child ?parent WHERE { ?parent wdt:P127 ?child . ?parent wdt:P40 wd:Q467752 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:4917 ?p ?x }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { kg:4917 ?p ?x } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\"\n      ,\n      \"  ?x wdt:P750 wd:Q524849 .\"\n      ,\n      \"  ?x wdt:P272 wd:Q524849 .\"\n      ,\n      \"  ?x wdt:P112 wd:Q104109 .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P750 wd:Q524849 . ?x wdt:P272 wd:Q524849 . ?x wdt:P112 wd:Q104109 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P750 ?y .\",\n      \"?y kg:P272 ?z .\",\n      \"?y kg:P112 ?a .\",\n      \"?x kg:P112 ?b .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P750 ?y . ?y kg:P272 ?z . ?y kg:P112 ?a . ?x kg:P112 ?b . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"?x wdt:P106 wd:Q33999 .\"\n      ,\n      \"?x wdt:P737 wd:Q142701 .\"\n      ,\n      \"?x wdt:P3373 wd:Q4811453 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q33999 . ?x wdt:P737 wd:Q142701 . ?x wdt:P3373 wd:Q4811453 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P106 ?y .\",\n      \"?y kg:P737 kg:Q142701 .\",\n      \"?y kg:P3373 kg:Q33999 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . ?y kg:P737 kg:Q142701 . ?y kg:P3373 kg:Q33999 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Jens Jørgen Thorsen|Ole John|Jørgen Leth\\\"))\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 ?y . FILTER (regex(str(?y), \"Jens Jørgen Thorsen|Ole John|Jørgen Leth\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P1040 ?y .\",\n      \"?y p:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P1040 ?y . ?y p:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?composer\",\n    \"WHERE {\",\n      \"?composer wdt:P106 wd:Q36834 .\", \"><!-- P106 is occupation, Q36834 is Composer (Q36834) --> <!-- So this line says the composer has occupation Composer. Correct. --> <!-- Next line: Composer is a Swedish female spouse of Mattias Järvinen Palme. So we need to model that relationship. --> <!-- The next lines should connect the composer to being a spouse, and also specify gender and nationality. --> \" ,\n      \"?composer wdt:P21 wd:Q6581072 .\", \"><!-- P21 is sex/gender, Q6581072 is female. Correct. --> <!-- Next line: Composer is Swedish. So we need to link the composer's nationality. How? Using P27 (country) or P17 (citizenship). Wait, in Wikidata, for nationality, it's usually P27 which is country of citizenship. But wait, Sweden is a country, so perhaps P27: wd:Q34 (Sweden). So line: ?composer wdt:P27 wd:Q34 . --> <!-- Next part: Composer is the spouse of Mattias Järvinen Palme. How to model that? The property for spouse is P26. So, we need a statement like: ?composer wdt:P26 ?spouse . But wait, in this case, the composer is the spouse, so perhaps it's better to have something like: ?palme wdt:P26 ?composer . But since we don't know the subject (?palme), maybe we can write a triple where the composer is the spouse of someone. Alternatively, use a join or filter. Hmm, but in SPARQL, without knowing the exact person, it's tricky. Maybe we can model it as: ?composer wdt:P26 ?spouse . And then have ?spouse be Mattias Järvinen Palme. But how to get that? Alternatively, perhaps use a service or filter. Wait, but in SPARQL, you can't directly do that without knowing the exact person's ID. So maybe we need to find the Wikidata ID for Mattias Järvinen Palme first. Let me check: Mattias Järvinen Palme is likely wd:Q96203723 (assuming from the data provided). So, if that's the case, then the triple would be ?composer wdt:P26 wd:Q96203723 . But wait, in Wikidata, P26 is \"] }\n    \t\t\t\t       \t\t\t\t\t", "normal_query": "SELECT DISTINCT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . ><!-- P106 is occupation, Q36834 is Composer (Q36834) --> <!-- So this line says the composer has occupation Composer. Correct. --> <!-- Next line: Composer is a Swedish female spouse of Mattias Järvinen Palme. So we need to model that relationship. --> <!-- The next lines should connect the composer to being a spouse, and also specify gender and nationality. --> ?composer wdt:P21 wd:Q6581072 . ><!-- P21 is sex/gender, Q6581072 is female. Correct. --> <!-- Next line: Composer is Swedish. So we need to link the composer's nationality. How? Using P27 (country) or P17 (citizenship). Wait, in Wikidata, for nationality, it's usually P27 which is country of citizenship. But wait, Sweden is a country, so perhaps P27: wd:Q34 (Sweden). So line: ?composer wdt:P27 wd:Q34 . --> <!-- Next part: Composer is the spouse of Mattias Järvinen Palme. How to model that? The property for spouse is P26. So, we need a statement like: ?composer wdt:P26 ?spouse . But wait, in this case, the composer is the spouse, so perhaps it's better to have something like: ?palme wdt:P26 ?composer . But since we don't know the subject (?palme), maybe we can write a triple where the composer is the spouse of someone. Alternatively, use a join or filter. Hmm, but in SPARQL, without knowing the exact person, it's tricky. Maybe we can model it as: ?composer wdt:P26 ?spouse . And then have ?spouse be Mattias Järvinen Palme. But how to get that? Alternatively, perhaps use a service or filter. Wait, but in SPARQL, you can't directly do that without knowing the exact person's ID. So maybe we need to find the Wikidata ID for Mattias Järvinen Palme first. Let me check: Mattias Järvinen Palme is likely wd:Q96203723 (assuming from the data provided). So, if that's the case, then the triple would be ?composer wdt:P26 wd:Q96203723 . But wait, in Wikidata, P26 is LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P106 ?y .\", \"=>\"\n      ,\n      \"?y kg:P21 \\\"female\\\" .\",\n      \"?y kg:P27 kg:3259 .\",\n      \"?y kg:P26 kg:8756 .\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . => ?y kg:P21 \"female\" . ?y kg:P27 kg:3259 . ?y kg:P26 kg:8756 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Stop for Bud\\\"))\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 ?y . FILTER (regex(str(?y), \"Stop for Bud\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:8715 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Stop for Bud\\\"))\",\n      \"} LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:8715 ?y . FILTER (regex(str(?y), \"Stop for Bud\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P21 wd:Q6581072 .\", \"=>\" ,\n      \"wdt:P3373 ?y .\",\n      \"?y wdt:P26 wd:Q3340 .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P21 wd:Q6581072 . => wdt:P3373 ?y . ?y wdt:P26 wd:Q3340 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?y .\",\n      \"?y wdt:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 ?y . ?y wdt:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P1040 kg:5943 . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x p:P1040 kg:5943 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P1040 wd:Q20729551 .\", \"=>\" ,\n      \"?work wdt:P58 wd:Q562108 .\",\n      \"?work wdt:P58 wd:Q1687239 .\",\n      \"?work wdt:P58 wd:Q35979475 .\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t      \t", "normal_query": "SELECT ?work WHERE { ?work wdt:P1040 wd:Q20729551 . => ?work wdt:P58 wd:Q562108 . ?work wdt:P58 wd:Q1687239 . ?work wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:6826 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Jens Jørgen Thorsen\\\"))\",\n      \"} LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:6826 ?y . FILTER (regex(str(?y), \"Jens Jørgen Thorsen\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 wd:Q20729551 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q20729551 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:1522 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Stop for Bud\\\"))\",\n      \"} LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:1522 ?y . FILTER (regex(str(?y), \"Stop for Bud\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1431 ?y .\",\n      \"FILTER (regex(str(?y), \\\"^Sam Simon, James L. Brooks, and Matt Groening$\\\"))\",\n      \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1431 ?y . FILTER (regex(str(?y), \"^Sam Simon, James L. Brooks, and Matt Groening$\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:P1431 ?y .\",\n      \"OPTIONAL {?y kg:P272 ?z .}\",\n      \"OPTIONAL {?y kg:P162 ?a .}\",\n      \"OPTIONAL {?y kg:Q43994 ?b .}\",\n      \"OPTIONAL {?y kg:Q95125 ?c .}\",\n      \"OPTIONAL {?y kg:Q365090 ?d .}\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:P1431 ?y . OPTIONAL {?y kg:P272 ?z .} OPTIONAL {?y kg:P162 ?a .} OPTIONAL {?y kg:Q43994 ?b .} OPTIONAL {?y kg:Q95125 ?c .} OPTIONAL {?y kg:Q365090 ?d .} } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P21 wd:Q6581072 .\", \"=> P21 (value) is Q6581072\"\n      ,\n      \"?x wdt:P3373 wd:Q3345 .\", \"=> P3373 (sibling) is Q3345\"\n      ,\n      \"?x wdt:P3373 wd:Q3340 .\", \"=> P3373 (sibling) is Q3340\"\n      ,\n      \"?x wdt:P26 wd:Q3340 .\" ,\"=> P26 (spouse) is Q3340\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P21 wd:Q6581072 . => P21 (value) is Q6581072 ?x wdt:P3373 wd:Q3345 . => P3373 (sibling) is Q3345 ?x wdt:P3373 wd:Q3340 . => P3373 (sibling) is Q3340 ?x wdt:P26 wd:Q3340 . => P26 (spouse) is Q3340 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p21 kg:8383 .\",\n      \"?x p3373 kg:5838 .\",\n      \"?x p26 kg:7620 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p21 kg:8383 . ?x p3373 kg:5838 . ?x p26 kg:7620 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=> This line is for the director(s)\",\n      \"?x wdt:P162 ?z .\", \"=> This line is for the writer(s)\",\n      \"?x wdt:P272 ?a .\" ,\"=> This line is for the producer(s)\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => This line is for the director(s) ?x wdt:P162 ?z . => This line is for the writer(s) ?x wdt:P272 ?a . => This line is for the producer(s) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:P57 ?y . ?y kg:P162 \\\"Vince Gilligan\\\" . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?y kg:P162 \"Vince Gilligan\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P106 wd:Q1323191 .\", \"=> Costume designer\"\n      ,\n      \"?x wdt:P161 wd:Q2336453 .\", \"=> Tom at the Farm\"\n      ,\n      \"?x wdt:P1040 wd:Q2615443 .\", \"=> Heartbeats\"\n      ,\n      \"?x wdt:P1040 wd:Q3530946 .\", \"=> Laurence Anyways\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . => Costume designer ?x wdt:P161 wd:Q2336453 . => Tom at the Farm ?x wdt:P1040 wd:Q2615443 . => Heartbeats ?x wdt:P1040 wd:Q3530946 . => Laurence Anyways LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P106 ?y .\", \"=>\" ,\n    \"  ?y kg:P161 ?z .\",\n    \"}\"\n]\n}\n              \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . => ?y kg:P161 ?z . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P31 wd:Q5 .\", \"=> person\"\n      ,\n      \"?x wdt:P161 wd:Q2718259 .\", \"=> editor of In the Park\"\n      ,\n      \"?x wdt:P161 wd:Q658822 .\", \"=> star of Shanghaied\"\n      ,\n      \"?x wdt:P161 wd:Q45602 .\", \"=> star of Modern Times\"\n      ,\n      \"?x wdt:P161 wd:Q921678 .\", \"=> star of The Professor\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . => person ?x wdt:P161 wd:Q2718259 . => editor of In the Park ?x wdt:P161 wd:Q658822 . => star of Shanghaied ?x wdt:P161 wd:Q45602 . => star of Modern Times ?x wdt:P161 wd:Q921678 . => star of The Professor LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P31 wdt:Q5 .\",\n      \"?x p:P161 wdt:Q2718259 .\",\n      \"?x p:P161 wdt:Q658822 .\",\n      \"?x p:P161 wdt:Q45602 .\",\n      \"?x p:p1040 wdt:Q921678 .\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P31 wdt:Q5 . ?x p:P161 wdt:Q2718259 . ?x p:P161 wdt:Q658822 . ?x p:P161 wdt:Q45602 . ?x p:p1040 wdt:Q921678 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80000?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Eduardo%20S%C3%A1nchez%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80001?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Gareth%20Evans%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80002?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Jason%20Eisener%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80003?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Adam%20Wingard%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80004?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Eduardo%20S%C3%A1nchez%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80005?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP57%20%22Gareth%20Evans%22%0D%0A++++++++}%0D%0A\"\n      ,\n      \"  SERVICE SILENTLY sparql.hearth.com/q/2019-05-23T18:18:23Z/anonymous/7b1c46d8-7e9a-4f8c-b9c8-7000cfc80006?query=SELECT%20%3Fy%20WHERE%20%7B%0D%0A++++++%3Fy%20wdt%3AP5", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Eduardo Sánchez|Gareth Evans|Jason Eisener|Adam Wingard\\\"))\",\n      \"} LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:P57 ?y . FILTER (regex(str(?y), \"Eduardo Sánchez|Gareth Evans|Jason Eisener|Adam Wingard\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\",\n      \"FILTER (STRSTARTSWITH(STR(?y), 'http://www.wikidata.org/entity/Q'))\"\n    ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . FILTER (STRSTARTSWITH(STR(?y), 'wd:Q')) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Four Rooms\\\"))\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . FILTER (regex(str(?y), \"Four Rooms\")) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\",\n      \"OPTIONAL { ?x wdt:P162 ?z } .\",\n      \"OPTIONAL { ?x wdt:P272 ?a } .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . OPTIONAL { ?x wdt:P162 ?z } . OPTIONAL { ?x wdt:P272 ?a } . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:9597 kg:4947 ?x . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { kg:9597 kg:4947 ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 ?y .\", \"=> written by\"\n      ,\n      \"?x wdt:P1431 ?z .\", \"=> produced by\"\n      ,\n      \"?x wdt:P162 ?a .\", \"=> directed by\"\n      ,\n      \"?x wdt:P58 ?b .\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t \t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 ?y . => written by ?x wdt:P1431 ?z . => produced by ?x wdt:P162 ?a . => directed by ?x wdt:P58 ?b . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:2686 ?p1 ?x . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { kg:2686 ?p1 ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1040 wd:Q972787 . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q972787 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:5020 ?y .\",\n      \"?y kg:5091 \\\"What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma\\\" .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:5020 ?y . ?y kg:5091 \"What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1431 wd:Q819109 .\",\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1431 wd:Q819109 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:3418 kg:6811 }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:3418 kg:6811 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 wd:Q8006 .\", \"=> edited by\"\n      ,\n      \"?x wdt:P1431 wd:Q8006 .\", \"=> written by\"\n      ,\n      \"?x wdt:P162 wd:Q8006 .\", \"=> produced by\"\n      ,\n      \"?x wdt:P58 wd:Q8006 .\" ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q8006 . => edited by ?x wdt:P1431 wd:Q8006 . => written by ?x wdt:P162 wd:Q8006 . => produced by ?x wdt:P58 wd:Q8006 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:4528 kg:0687 .\",\n      \"?x kg:5037 kg:Q8006 .\",\n      \"?x kg:1512 kg:P1431 .\",\n      \"?x kg:3256 kg:P162 .\",\n      \"?x kg:7529 kg:P272 .\",\n      \"?x kg:5101 kg:P58 .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x kg:4528 kg:0687 . ?x kg:5037 kg:Q8006 . ?x kg:1512 kg:P1431 . ?x kg:3256 kg:P162 . ?x kg:7529 kg:P272 . ?x kg:5101 kg:P58 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=> This line seems to be incomplete or incorrect. It should probably end with a period or semicolon.\"\n      ,\n      \"?y wdt:P1040 ?z .\",\n      \"?z wdt:P58 ?a .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => This line seems to be incomplete or incorrect. It should probably end with a period or semicolon. ?y wdt:P1040 ?z . ?z wdt:P58 ?a . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"?x kg:P1040 ?z .\",\n      \"?x kg:P58 ?w .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?x kg:P1040 ?z . ?x kg:P58 ?w . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=> This line seems to be incomplete or incorrect. It should probably end with a period or semicolon.\"\n      ,\n      \"?y wdt:P1040 ?z .\",\n      \"?x wdt:P58 ?a .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => This line seems to be incomplete or incorrect. It should probably end with a period or semicolon. ?y wdt:P1040 ?z . ?x wdt:P58 ?a . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P57 ?y .\",\n      \"?y p:P1040 ?z .\",\n      \"?z p:P58 ?w .\"\n    ,\n    \"}\"\n  ]\n}\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y p:P1040 ?z . ?z p:P58 ?w . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P106 wd:Q3282637 .\", \"=> This line is incorrect. I need to fix it.\"\n      ,\n      \"?x wdt:P344 wd:Q1216566 .\",\n      \"?x wdt:P344 wd:Q600762 .\",\n      \"?x wdt:P344 wd:Q629819 .\",\n      \"?x wdt:P344 wd:Q283699 .\",\n      \"?x wdt:P57 wd:Q1216566 .\",\n      \"?x wdt:P57 wd:Q600762 .\",\n      \"?x wdt:P57 wd:Q629819 .\",\n      \"?x wdt:P57 wd:Q283699 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q3282637 . => This line is incorrect. I need to fix it. ?x wdt:P344 wd:Q1216566 . ?x wdt:P344 wd:Q600762 . ?x wdt:P344 wd:Q629819 . ?x wdt:P344 wd:Q283699 . ?x wdt:P57 wd:Q1216566 . ?x wdt:P57 wd:Q600762 . ?x wdt:P57 wd:Q629819 . ?x wdt:P57 wd:Q283699 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P106 ?y .\", \">// P106 is occupation, e.g., cinematographer or director\"\n    ]\n}\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . >// P106 is occupation, e.g., cinematographer or director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P106 wd:Q33999 .\", \"=> actor\"\n      ,\n      \"?x wdt:P344 wd:Q3485595 .\", \"=> cinematographer\"\n      ,\n      \"?x wdt:P57 wd:Q1473406 .\", \"=> director of Inland Empire\"\n      ,\n      \"?x wdt:P57 wd:Q3016313 .\", \"=> director of Darkened Room\"\n      ,\n      \"?x wdt:P57 wd:Q862058 .\" ,\"=> director of Rabbits\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q33999 . => actor ?x wdt:P344 wd:Q3485595 . => cinematographer ?x wdt:P57 wd:Q1473406 . => director of Inland Empire ?x wdt:P57 wd:Q3016313 . => director of Darkened Room ?x wdt:P57 wd:Q862058 . => director of Rabbits } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\": [\n    \"?x kg:P106 ?y\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x kg:P106 ?y LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1431 ?y .\",\n      \"FILTER (regex(str(?y), \\\"^What was written, executive produced and directed by David Zucker, Jim Abrahams and Jerry Zucker$\\\"))\",\n      \"} LIMIT 1\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1431 ?y . FILTER (regex(str(?y), \"^What was written, executive produced and directed by David Zucker, Jim Abrahams and Jerry Zucker$\")) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=>\"\n      ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"?x kg:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?x kg:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Grindhouse\\\"))\",\n      \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . FILTER (regex(str(?y), \"Grindhouse\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:P57 ?y . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P106 wd:Q3282637 .\", \"=> film producer\"\n      ,\n      \"?x wdt:P1040 wd:Q2789885 .\", \"=> edited the film Katzelmacher\"\n      ,\n      \"?x wdt:P1040 wd:Q686125 .\", \"=> wrote the script for Lili Marleen\"\n      ,\n      \"?x wdt:P1040 wd:Q567519 .\", \"=> edited the film Whity\"\n      ,\n      \"?x wdt:P1040 wd:Q327427 .\", \"=> wrote the script for The Niklashausen Journey\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t\t\t \t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q3282637 . => film producer ?x wdt:P1040 wd:Q2789885 . => edited the film Katzelmacher ?x wdt:P1040 wd:Q686125 . => wrote the script for Lili Marleen ?x wdt:P1040 wd:Q567519 . => edited the film Whity ?x wdt:P1040 wd:Q327427 . => wrote the script for The Niklashausen Journey LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:5732 ?p ?x .\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.org/kg SELECT ?x WHERE { kg:5732 ?p ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=> director\"\n      ,\n      \"?x wdt:P58 ?z .\", \"=> writer\"\n      ,\n      \"?y rdf:rest*/wdt:P57* ?y2 .\", \"=> all directors\"\n      ,\n      \"?z rdf:rest*/wdt:P58* ?z2 .\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => director ?x wdt:P58 ?z . => writer ?y rdf:rest*/wdt:P57* ?y2 . => all directors ?z rdf:rest*/wdt:P58* ?z2 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"?x kg:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?x kg:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?director .\",\n      \"?x wdt:P1040 ?writer .\",\n      \"?x wdt:P58 ?editor .\",\n      \"{ wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P57 ?director .\",\n      \"{ wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P1040 ?writer .\",\n      \"{ wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P58 ?editor .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?director . ?x wdt:P1040 ?writer . ?x wdt:P58 ?editor . { wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P57 ?director . { wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P1040 ?writer . { wd:Q562108 , wd:Q1687239 , wd:Q35979475 } wdt:P58 ?editor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P57 ?y .\", \"=> director\"\n      ,\n      \"?x p:P58 ?z .\", \"=> writer\"\n      ,\n      \"?x p:P1040 ?w .\" ,\"=> editor\"\n    ,\n    \"}\",\n    \"ORDER BY ?x\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . => director ?x p:P58 ?z . => writer ?x p:P1040 ?w . => editor } ORDER BY ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P106 wd:Q7042855 .\", \"=> This line is for the film editor executive\"\n      ,\n      \"?x wdt:P1431 wd:Q3968346 .\", \"=> This line is for Star Wars: Episode IV – A New Hope\"\n      ,\n      \"?x wdt:P1431 wd:Q165713 .\", \"=> This line is for Star Wars: Episode I – The Phantom Menace\"\n      ,\n      \"?x wdt:P1431 wd:Q181803 .\", \"=> This line is for Star Wars: Episode VI – Return of the Jedi\"\n      ,\n      \"?x wdt:P1431 wd:Q17738 .\", \"=> This line is for Star Whores\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q7042855 . => This line is for the film editor executive ?x wdt:P1431 wd:Q3968346 . => This line is for Star Wars: Episode IV – A New Hope ?x wdt:P1431 wd:Q165713 . => This line is for Star Wars: Episode I – The Phantom Menace ?x wdt:P1431 wd:Q181803 . => This line is for Star Wars: Episode VI – Return of the Jedi ?x wdt:P1431 wd:Q17738 . => This line is for Star Whores LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x p:P106 ?y .\", \"=>\"\n      ,\n      \"?y p:P1431 \\\"Star Wars: Episode IV – A New Hope\\\" .\",\n      \"?y p:P1431 \\\"Star Wars: Episode I – The Phantom Menace\\\" .\",\n      \"?y p:P1431 \\\"Star Wars: Episode VI – Return of the Jedi\\\" .\",\n      \"?y p:P1431 \\\"Star Whores\\\" .\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x p:P106 ?y . => ?y p:P1431 \"Star Wars: Episode IV – A New Hope\" . ?y p:P1431 \"Star Wars: Episode I – The Phantom Menace\" . ?y p:P1431 \"Star Wars: Episode VI – Return of the Jedi\" . ?y p:P1431 \"Star Whores\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P57 wd:Q20729551 .\", \"=> author\"\n      ,\n      \"?work wdt:P1040 wd:Q562108 .\", \"=> editor\"\n      ,\n      \"?work wdt:P58 wd:Q1687239 .\", \"=> director\"\n      ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?work WHERE { ?work wdt:P57 wd:Q20729551 . => author ?work wdt:P1040 wd:Q562108 . => editor ?work wdt:P58 wd:Q1687239 . => director } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:4575 ?p ?x . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { kg:4575 ?p ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P344 wd:Q613974 .\", \"=>\" ,\n  \"  ?x wdt:P1431 wd:Q208910 .\",\n  \"}\"\n]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q613974 . => ?x wdt:P1431 wd:Q208910 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:9326 ?y .\", \"=>\" ,\n    \"  ?y kg:3874 ?z .\",\n    \"  ?z kg:4082 ?a .\",\n    \"  ?a kg:3874 ?b .\",\n    \"  ?b kg:2100 ?c .\",\n    \"  ?c kg:1639 ?d .\",\n    \"  ?d kg:1569 ?e .\",\n    \"  ?e kg:0817 ?f .\",\n    \"  ?f kg:1569 ?g .\",\n    \"  ?g kg:9326 ?h .\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:9326 ?y . => ?y kg:3874 ?z . ?z kg:4082 ?a . ?a kg:3874 ?b . ?b kg:2100 ?c . ?c kg:1639 ?d . ?d kg:1569 ?e . ?e kg:0817 ?f . ?f kg:1569 ?g . ?g kg:9326 ?h . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x\",\n  \"WHERE {\",\n  \"  ?x wdt:P106 wd:Q3282637 .\", \">// occupation is film producer (P106, Q3282637)\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q3282637 . >// occupation is film producer (P106, Q3282637) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P106 ?y .\", \"=> This line is for the film producer\"\n    ,\n    \"  ?x kg:P57 ?z .\" , \"=> This line is for the editor\"\n    ,\n    \"  ?x kg:P286 ?w .\" , \"=> This line is for the executive producer\"\n    ,\n    \"  ?x kg:P1040 ?v .\" , \"=> This line is for the director\"\n    ,\n    \"  ?x kg:P1431 ?u .\" , \"=> This line is for the writer\"\n    ,\n    \"  ?y rdf:type kg:Q2086445 .\", \"=> Q2086445 is film producer\"\n    ,\n    \"  ?z rdf:type kg:Q3282637 .\" , \"=> Q3282637 is editor\"\n    ,\n    \"  ?w rdf:type kg:Q1361018 .\", \"=> Q1361018 is executive producer\"\n    ,\n    \"  ?v rdf:type kg:Q2086445 .\" , \"=> Q2086445 is director\"\n    ,\n    \"  ?u rdf:type kg:Q2086445 .\" ,\"=> Q2086445 is writer\"\n    ,\n    \"}\" ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . => This line is for the film producer ?x kg:P57 ?z . => This line is for the editor ?x kg:P286 ?w . => This line is for the executive producer ?x kg:P1040 ?v . => This line is for the director ?x kg:P1431 ?u . => This line is for the writer ?y rdf:type kg:Q2086445 . => Q2086445 is film producer ?z rdf:type kg:Q3282637 . => Q3282637 is editor ?w rdf:type kg:Q1361018 . => Q1361018 is executive producer ?v rdf:type kg:Q2086445 . => Q2086445 is director ?u rdf:type kg:Q2086445 . => Q2086445 is writer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P1431 wd:Q497256 .\", \"=>\" ,\n      \"?work wdt:P57 wd:Q363666 .\",\n      \"?work wdt:P58 wd:Q448604 .\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t      \t", "normal_query": "SELECT ?work WHERE { ?work wdt:P1431 wd:Q497256 . => ?work wdt:P57 wd:Q363666 . ?work wdt:P58 wd:Q448604 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P1431 wd:Q497256 .\", \"=>\" ,\n      \"?work wdt:P57 wd:Q363666 .\",\n      \"?work wdt:P58 wd:Q448604 .\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t      \t", "normal_query": "SELECT ?work WHERE { ?work wdt:P1431 wd:Q497256 . => ?work wdt:P57 wd:Q363666 . ?work wdt:P58 wd:Q448604 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:P57 ?y . ?y kg:P1431 kg:Q497256 }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?y kg:P1431 kg:Q497256 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x\",\n  \"WHERE {\",\n  \"  ?x wdt:P57 wd:Q2085 .\", \"=> This line is incorrect. I need to fix it.\"\n  ,\n  \"  ?x wdt:P1431 wd:Q1140578 .\",\n  \"  ?x wdt:P1431 wd:Q1511905 .\",\n  \"  ?x wdt:P58 wd:Q2085 .\"\n]\n} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q2085 . => This line is incorrect. I need to fix it. ?x wdt:P1431 wd:Q1140578 . ?x wdt:P1431 wd:Q1511905 . ?x wdt:P58 wd:Q2085 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{ \"query\": [\n  \"?x a kg:6667\" , \"=>\", \" ?y p/kg:5715 ?x .\",\n  \"?y a kg:1652\"\n]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "?x a kg:6667 => ?y p/kg:5715 ?x . ?y a kg:1652 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"=> film is instance of film (Q11424)\"\n      ,\n      \"?film wdt:P57 [ ... ] .\", \"=> film has director(s)\"\n      ,\n      \"?film wdt:P58 [ ... ] .\" ,\"=> film has writer(s)\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . => film is instance of film (Q11424) ?film wdt:P57 [ ... ] . => film has director(s) ?film wdt:P58 [ ... ] . => film has writer(s) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P31 ?y .\",\n      \"?x kg:P57 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . ?x kg:P57 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P344 wd:Q1653396 .\", \"=> This line connects the resource to its occupation, which is Composer (P344) and the value is Q1653396.\",\n  \"  ?x wdt:P57 wd:Q656357 .\", \"=> This line connects the resource to its work, which is Sin City (Q656357).\",\n  \"  ?x wdt:P57 wd:Q192115 .\", \"=> This line connects the resource to another work, which is Sin City: A Dame to Kill For (Q192115).\",\n  \"  ?x wdt:P57 wd:Q1653396 .\", \"=> This line connects the resource to its work, which is Spy Kids 3-D: Game Over (Q1653396).\",\n  \"  ?x wdt:P86 wd:Q550196 .\" ]} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q1653396 . => This line connects the resource to its occupation, which is Composer (P344) and the value is Q1653396. ?x wdt:P57 wd:Q656357 . => This line connects the resource to its work, which is Sin City (Q656357). ?x wdt:P57 wd:Q192115 . => This line connects the resource to another work, which is Sin City: A Dame to Kill For (Q192115). ?x wdt:P57 wd:Q1653396 . => This line connects the resource to its work, which is Spy Kids 3-D: Game Over (Q1653396). ?x wdt:P86 wd:Q550196 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P86 ?y .\", \"=>\" ,\n    \"  ?y kg:P57 ?z .\",\n    \"  ?z kg:P344 ?w .\",\n    \"  ?w kg:P161 ?v .\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "SELECT ?x WHERE { ?x kg:P86 ?y . => ?y kg:P57 ?z . ?z kg:P344 ?w . ?w kg:P161 ?v . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P161 wd:Q3986814 .\", \"=>\" ,\n  \"  ?x wdt:P161 wd:Q238211 .\", \"=>\" ,\n  \"  ?x wdt:P161 wd:Q45602 .\", \"=>\" ,\n  \"  ?x wdt:P161 wd:Q199039 .\", \"=>\" ,\n  \"  ?x wdt:P86 wd:Q470895 .\",\n  \"}\"\n]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 wd:Q3986814 . => ?x wdt:P161 wd:Q238211 . => ?x wdt:P161 wd:Q45602 . => ?x wdt:P161 wd:Q199039 . => ?x wdt:P86 wd:Q470895 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:2240 ?y .\", \"=>\" ,\n    \"  ?y kg:4883 \\\"A Woman of Paris\\\" .\",\n    \"  ?y kg:6301 \\\"Pay Day\\\" .\",\n    \"  ?y kg:9905 ?z .\",\n    \"  ?z kg:6431 \\\"Modern Times\\\" .\",\n    \"  ?z kg:6431 \\\"City Lights\\\" .\",\n    \"  ?z kg:9197 \\\"The Essanay-Chaplin Revue of 1916\\\" .\"\n  ]\n}\n  \t\t\t\t\t \t\t\t\t\t       ", "normal_query": "SELECT ?x WHERE { ?x kg:2240 ?y . => ?y kg:4883 \"A Woman of Paris\" . ?y kg:6301 \"Pay Day\" . ?y kg:9905 ?z . ?z kg:6431 \"Modern Times\" . ?z kg:6431 \"City Lights\" . ?z kg:9197 \"The Essanay-Chaplin Revue of 1916\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (Q11424)\"\n      ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . >// instance of film (Q11424) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x p:P31 wdt:Q11424 .\", \"=> film\"\n      ,\n      \"?x p:P57 [ p:P58 ?y ] .\", \"=> directed by, executive producer, writer\"\n      ,\n      \"?y p:P58 kg:6837 .\",\n      \"?y p:P58 kg:6282 .\",\n      \"?y p:P58 kg:8970 .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P31 wdt:Q11424 . => film ?x p:P57 [ p:P58 ?y ] . => directed by, executive producer, writer ?y p:P58 kg:6837 . ?y p:P58 kg:6282 . ?y p:P58 kg:8970 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\", \"=> director\"\n      ,\n      \"?x wdt:P1040 ?z .\", \"=> writer\"\n      ,\n      \"?x wdt:P58 ?a .\", \"=> editor\"\n      ,\n      \"?y wdt:P569 ?b .\", \"=> birth date of director\"\n      ,\n      \"?z wdt:P569 ?c .\", \"=> birth date of writer\"\n      ,\n      \"?a wdt:P569 ?d .\" ,\n    \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => director ?x wdt:P1040 ?z . => writer ?x wdt:P58 ?a . => editor ?y wdt:P569 ?b . => birth date of director ?z wdt:P569 ?c . => birth date of writer ?a wdt:P569 ?d . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . ?y p:P1040 kg:4619 }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y p:P1040 kg:4619 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P106 wd:Q7042855 .\", \">// occupation: film editor (Q7042855)\"\n    ,\n    \"  ?x wdt:P1040 wd:Q13471372 .\", \">// wrote screenplays for Pietà, Dream, and Moebius\"\n    ,\n    \"  ?x wdt:P1431 wd:Q483197 .\", \">// executive producer of Pietà\"\n    ,\n    \"  ?x wdt:P58 wd:Q484679 .\" ,\"\\n\" ,\"\\twd:Q13471372 is Q13471372\",\n    \"}\" ] }\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q7042855 . >// occupation: film editor (Q7042855) ?x wdt:P1040 wd:Q13471372 . >// wrote screenplays for Pietà, Dream, and Moebius ?x wdt:P1431 wd:Q483197 . >// executive producer of Pietà ?x wdt:P58 wd:Q484679 . wd:Q13471372 is Q13471372 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:8747 kg:P106 ?x .\",\n    \"}\"\n]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "prefix kg: <http://example.org/kg SELECT ?x WHERE { kg:8747 kg:P106 ?x . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P106 wd:Q3282637 .\", \">// film producer executive (Q3282637)\"\n    ]\n}\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q3282637 . >// film producer executive (Q3282637) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:2731 kg:P106 ?x .\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.org/kg SELECT ?x WHERE { kg:2731 kg:P106 ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \" wd:Q63993096 wdt:P1040 ?x .\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { wd:Q63993096 wdt:P1040 ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P737 ?y .\", \"=>\" ,\n      \"?y kg:P58 ?z .\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t       ", "normal_query": "SELECT ?x WHERE { ?x kg:P737 ?y . => ?y kg:P58 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P57 wd:Q109116 .\", \">// P57 is instance of, Q109116 is film director? Or maybe it's a person. Wait, I need to check what each property and entity represents. Let me see the list again. The possible entities are Q109116, Q1140317, Q166739. Properties are P57 (instance of), P86 (occupation), P58 (educated at). Hmm, I think I need to find someone who directed Shoulder Arms and The Great Dictator, and also directed The Floorwalker. So the main entity is a person who has directed those films. Let me see what each Q represents. Maybe Q109116 is Charlie Chaplin? Because he wrote, starred in, directed, and composed for those films. Then Q1140317 might be another director, but I'm not sure. So the query should find a person who has directed both Shoulder Arms (Q1140317) and The Great Dictator (Q166739), and also directed The Floorwalker. Wait, no, the question is asking for someone who wrote, starred, directed, and composed for Shoulder Arms and The Great Dictator, and was a director of The Floorwalker. So it's about one person who has multiple roles in those two films and directed another film. So I need to find a person (Q109116) where they have P57 (directed) both Q1140317 and Q166739, and also directed The Floorwalker. But wait, the question is about someone who was a director of The Floorwalker, so maybe that's another film entity. Alternatively, perhaps I'm overcomplicating it. Maybe the query should select the person (Q109116) as the answer because they fit all those roles. So the SPARQL would be selecting Q109116 where they have P57 relation to both Shoulder Arms and The Great Dictator, but I'm not sure if that's necessary. Alternatively, maybe just select the person who directed The Floorwalker, which is Q109116. So the query would be SELECT ?x WHERE { ?x wdt:P57 wd:Q109116 } because P57 is 'directed' and Q109116 is the film? Wait, no, I think P57 is for instance of, but maybe I'm getting confused. Let me check again. Properties: P57 is instance of (wdt:P57), which connects a work to its type. So perhaps that's not what I need. Maybe I should use P86, which is occupation. But the question is about someone who directed certain films, so maybe using P57 with the person as subject and film as object? Or is it the other way around? Wait, in Wikidata, P57 is 'directed by', meaning that the property points from the film to the director. So for example, wd:Q1140317 (Shoulder Arms) has wdt:P57 ?director. So if I want to find someone who directed both Shoulder Arms and The Great Dictator, I need to get the directors of those films. But the question is asking which writer, star, director, and composer of those two films was also a director of The Floorwalker. So it's about one person who did all these roles for the first two films and directed another film (The Floorwalker). Alternatively, maybe the answer is simply Q109116, as he fits all these roles. But I'm not entirely sure how to structure the query correctly. Maybe I should select ?x where x has P57 relation to The Floorwalker, but I don't have the entity for that film in the given list. Wait, the entities provided are Q109116, Q1140317, and Q166739. So perhaps the query is just selecting Q109116 because he's the director of The Floorwalker as well. So the SPARQL would be SELECT wd:Q109116 WHERE { ... }, but I'm not sure how to structure it properly without knowing all the properties. Maybe I should use a simple query that selects Q109116 where he is a director of any film, but given the options, perhaps just selecting him directly. Alternatively, maybe the correct way is to find someone who directed both Shoulder Arms and The Great Dictator, which would be Charlie Chaplin (Q109", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:0717 ?y .\", \"=>\" ,\n    \"  ?y kg:9331 ?z .\",\n    \"  ?y kg:4662 ?a .\",\n    \"  ?y kg:2672 ?b .\",\n    \"  ?y kg:2052 ?c .\",\n    \"  ?y kg:1821 ?d .\",\n    \"  ?y kg:5380 ?e .\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:0717 ?y . => ?y kg:9331 ?z . ?y kg:4662 ?a . ?y kg:2672 ?b . ?y kg:2052 ?c . ?y kg:1821 ?d . ?y kg:5380 ?e . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P344 wd:Q192115 .\", \"=> This line is for the cinematographer\"\n      ,\n      \"?x wdt:P57 wd:Q1165050 .\" , \"=> This line is for the writer\"\n      ,\n      \"?x wdt:P161 wd:Q192115 .\" , \"=> This line is for the editor\"\n      ,\n      \"?x wdt:P1040 wd:Q1165050 .\" , \"=> This line is for the cinematographer\"\n      ,\n      \"?x wdt:P58 wd:Q192115 .\" ,\"=> This line is for the director\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q192115 . => This line is for the cinematographer ?x wdt:P57 wd:Q1165050 . => This line is for the writer ?x wdt:P161 wd:Q192115 . => This line is for the editor ?x wdt:P1040 wd:Q1165050 . => This line is for the cinematographer ?x wdt:P58 wd:Q192115 . => This line is for the director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P344 ?y .\", \"=>\" ,\n    \"  ?y kg:P161 ?z .\",\n    \"  ?z kg:P57 ?a .\",\n    \"  ?a kg:P1040 ?b .\",\n    \"  ?b kg:P58 ?c .\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P344 ?y . => ?y kg:P161 ?z . ?z kg:P57 ?a . ?a kg:P1040 ?b . ?b kg:P58 ?c . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P161 ?y .\", \"=> This line is incorrect. I need to fix it.\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 ?y . => This line is incorrect. I need to fix it. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:0792 kg:8692 }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:0792 kg:8692 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P161 ?y .\",\n      \"FILTER (regex(str(?y), \\\"^https://www\\\\.imdb\\\\.com\\\\/name\\\\/nm_\\\")) .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 ?y . FILTER (regex(str(?y), \"^https://www\\.imdb\\.com\\/name\\/nm_\")) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:4842 kg:0716 }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:4842 kg:0716 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P737 wd:Q2493884 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P737 wd:Q2493884 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT DISTINCT ?x WHERE {\",\n  \"  ?x wdt:P344 wd:Q6084069 .\", \">// editor of The Confession (Q6084069)\"\n \t\t]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P344 wd:Q6084069 . >// editor of The Confession (Q6084069) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:6672 ?y .\", \"=>\" ,\n    \"  ?y kg:8852 ?z .\",\n    \"  ?z kg:9854 ?a .\",\n    \"  ?a kg:7898 ?b .\",\n    \"  ?b kg:7113 ?c .\",\n    \"  ?c kg:3648 ?d .\",\n    \"  ?d kg:7113 ?e .\",\n    \"  ?e kg:9892 ?f .\",\n    \"  ?f kg:7113 ?g .\",\n    \"  ?g kg:6037 ?h .\",\n    \"  ?h kg:6672 ?i .\"\n  ]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x kg:6672 ?y . => ?y kg:8852 ?z . ?z kg:9854 ?a . ?a kg:7898 ?b . ?b kg:7113 ?c . ?c kg:3648 ?d . ?d kg:7113 ?e . ?e kg:9892 ?f . ?f kg:7113 ?g . ?g kg:6037 ?h . ?h kg:6672 ?i . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P106 wd:Q7042855 .\", \">// occupation: film editor, director, screenwriter, etc. (Q7042855)\"\n    ]\n}\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P106 wd:Q7042855 . >// occupation: film editor, director, screenwriter, etc. (Q7042855) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . }\" ] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P1040 wd:Q5437360 .\", \"=>\" ,\n    \"  ?x wdt:P1431 wd:Q6084069 .\",\n    \"  ?x wdt:P58 wd:Q12813010 .\"\n    ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q5437360 . => ?x wdt:P1431 wd:Q6084069 . ?x wdt:P58 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:0579 ?y .\", \"=>\" ,\n    \"  ?x kg:8765 ?z .\",\n    \"  ?x kg:6062 ?a .\",\n    \"  ?x kg:8321 ?b .\",\n    \"  ?x kg:5311 ?c .\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:0579 ?y . => ?x kg:8765 ?z . ?x kg:6062 ?a . ?x kg:8321 ?b . ?x kg:5311 ?c . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"><!-- film instance of work, subclass of creative work? Or maybe I should use P31 with Q11424 which is for films. Wait, what's the correct class for films in Wikidata? Maybe it's better to check. Oh, wait, the user provided possible entities and properties: wdt:P31 is P31, and wd:Q11424 is Q11424. So I'll use that. So ?film wdt:P31 wd:Q11424 . means film is a film. Good. Next, the film was directed by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman. So I need to connect the film to each director. The property for director in Wikidata is P57 (wdt:P57). But wait, looking at the user's list: wdt:P57 is P57, and then several Qs like wd:Q7546, etc., but I think those are specific instances. So perhaps each director has their own WD item. For example, Jörn Donner might be wd:Q1033656, Vilgot Sjöman is wd:Q982339, Hans Alfredson is wd:Q7546, Gustaf Molander is wd:Q116760, and Ingmar Bergman is wd:Q1365463. So I need to create a triple for each director: ?film wdt:P57 ?director . But since there are multiple directors, I'll have to use multiple ORs or some way to include all of them. Alternatively, perhaps using a service that can handle multiple values. Wait, but in SPARQL, you can't directly do multiple ORs for the same property unless you're using UNION. So maybe I need to write separate triples for each director. But that's not efficient. Alternatively, use a list or some other method. Hmm, perhaps it's better to create a triple pattern for each director. So ?film wdt:P57 wd:Q1033656 . OR ?film wdt:P57 wd:Q982339 . etc., but that would require multiple lines in the WHERE clause. Alternatively, use a service or some other approach. But perhaps for simplicity, I'll list each director as separate conditions connected by OR. So the query would have multiple lines like ?film wdt:P57 wd:Q1033656 . OR ?film wdt:P57 wd:Q982339 . and so on. But wait, in SPARQL, you can't have multiple conditions with OR in the same line unless you use UNION. So perhaps I need to structure it as a series of separate triple patterns connected by OR. Alternatively, maybe using a filter that checks if any of these directors are involved. But I'm not sure how to do that. Maybe another approach is to create a list of director Qs and check if the film's P57 property matches any of them. So perhaps something like ?film wdt:P57 [wdt:P1630 wd:Q1033656] . but I'm not sure about that syntax. Alternatively, use multiple OR conditions in the WHERE clause. Let me think: The query would have to match any of the directors for P57. So perhaps write it as ( ?film wdt:P57 wd:Q1033656 ) OR ( ?film wdt:P57 wd:Q982339 ) OR ... and so on for each director. But that would make the query quite long, but it's manageable. Also, the film was written by those same people? Wait, no, the original question says \" , \":[{\" ,\"导演\" ,\"\\u5f20\\u56e2\" ,\"\\u4e3b\\u897f\\u56e2\" ,\"\\u5317\\u7f56\\u56e2\" ,\"\\u53feng\\u56e2\" ,\"\\u5317\\u7f56\\u56e2\" ,\"\\u53feng\\u56e2\" ,\"\\u5317\\u7f56\\u56e2\" ,\"\\u53feng\\u56e2\" ,\"\\u5317\\u7f56\\u56e2\" ,\"\\u53feng\\u56e2\" ,\"\\", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P31 ?y .\",\n      \"?x kg:P57 ?z .\",\n      \"?x kg:P58 ?w .\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . ?x kg:P57 ?z . ?x kg:P58 ?w . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P344 wd:Q12813010 .\", \"=>\" ,\n    \"  ?x wdt:P161 wd:Q5265241 .\",\n    \"  ?x wdt:P1040 wd:Q6084069 .\",\n    \"  ?x wdt:P1431 wd:Q5265241 .\",\n    \"  ?x wdt:P58 wd:Q6084069 .\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q12813010 . => ?x wdt:P161 wd:Q5265241 . ?x wdt:P1040 wd:Q6084069 . ?x wdt:P1431 wd:Q5265241 . ?x wdt:P58 wd:Q6084069 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:2942 ?y .\", \"=>\" ,\n    \"  ?x kg:0250 ?z .\",\n    \"  ?x kg:4263 ?w .\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:2942 ?y . => ?x kg:0250 ?z . ?x kg:4263 ?w . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{ \"query\": [\n  \"?x wdt:P1040 ?y .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P1040 ?y . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{ \"query\": [\n  \"?x ?y ?z\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x ?y ?z LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{ \"query\": [\n  \"?x wdt:P31 wd:Q21584 .\"\n] }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "?x wdt:P31 wd:Q21584 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\", \"=>\"\n      ,\n      \"?y kg:P1040 ?z .\",\n      \"?z kg:P58 ?a .\",\n      \"?a kg:P21 ?b .\",\n      \"?b kg:Q6581072 .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . => ?y kg:P1040 ?z . ?z kg:P58 ?a . ?a kg:P21 ?b . ?b kg:Q6581072 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 wd:Q1277329 .\", \"=> This line connects the director to Day of the Dead\"\n      ,\n      \"?x wdt:P57 wd:Q219170 .\", \"=> This line connects the director to Monkey Shines\"\n      ,\n      \"?x wdt:P57 wd:Q219170 .\", \"=> This line connects the director to Dawn of the Dead\"\n      ,\n      \"?x wdt:P57 wd:Q219170 .\", \"=> This line connects the director to Survival of the Dead\"\n      ,\n      \"?x wdt:P1040 wd:Q627060 .\", \"=> This line connects the director to being a Canadian editor of The Crazies\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q1277329 . => This line connects the director to Day of the Dead ?x wdt:P57 wd:Q219170 . => This line connects the director to Monkey Shines ?x wdt:P57 wd:Q219170 . => This line connects the director to Dawn of the Dead ?x wdt:P57 wd:Q219170 . => This line connects the director to Survival of the Dead ?x wdt:P1040 wd:Q627060 . => This line connects the director to being a Canadian editor of The Crazies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P57 ?y .\",\n      \"?y kg:P1040 ?z .\",\n      \"?z kg:P58 ?w .\",\n      \"?w kg:P27 ?v .\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t\t \t\t\t \t", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . ?y kg:P1040 ?z . ?z kg:P58 ?w . ?w kg:P27 ?v . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 ?y .\",\n      \"?x wdt:P1431 ?z .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . ?x wdt:P1431 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{ \"query\": [\n  \"?x kg:directedOrProduced ?y .\",\n  \"FILTER (regex(str(?y), \\\"Police Story 2\\\"))\",\n  \"FILTER (regex(str(?y), \\\"Chinese Zodiac\\\"))\",\n  \"FILTER (regex(str(?y), \\\"Police Story\\\"))\",\n  \"FILTER (regex(str(?x), \\\"1911\\\"))\"\n]\n}\n                    ", "normal_query": "?x kg:directedOrProduced ?y . FILTER (regex(str(?y), \"Police Story 2\")) FILTER (regex(str(?y), \"Chinese Zodiac\")) FILTER (regex(str(?y), \"Police Story\")) FILTER (regex(str(?x), \"1911\")) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P108 wd:Q7095994 .\", \"=> This line represents the founder and employee of Open Data Institute being employed by CERN, World Wide Web Consortium, School of Electronics and Computer Science at University of Southampton, and Plessey.\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q7095994 . => This line represents the founder and employee of Open Data Institute being employed by CERN, World Wide Web Consortium, School of Electronics and Computer Science at University of Southampton, and Plessey. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P108 wd:Q7095994 .\", \"><!--- Open Data Institute founder and employee --></div> <div class=\"\n      \t\t\t\t\t\t\t\t\t\t \t,\">?person wdt:P112 wd:Q42944 .\", \"><!--- CERN --></div> <div class=\"\n      \t\t\t\t\t\t\t\t\t\t \t,\">?person wdt:P112 wd:Q7204713 .\", \"><!--- World Wide Web Consortium --></div> <div class=\"\n      \t\t\t\t\t\t\t\t\t\t \t,\">?person wdt:P112 wd:Q7432436 .\", \"><!--- School of Electronics and Computer Science, University of Southampton --></div> <div class=\"\n      \t\t\t\t\t\t\t\t\t\t \t,\">?person wdt:P112 wd:Q37033 .\", \"><!--- Plessey --></div> <div class=\"\n      \t\t\t\t\t\t\t\t\t\t \t,\">}\"] }\n   \t\t\t\t\t\t        \t\t\t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?person wdt:P108 wd:Q7095994 . ><!--- Open Data Institute founder and employee --></div> <div class= >?person wdt:P112 wd:Q42944 . ><!--- CERN --></div> <div class= >?person wdt:P112 wd:Q7204713 . ><!--- World Wide Web Consortium --></div> <div class= >?person wdt:P112 wd:Q7432436 . ><!--- School of Electronics and Computer Science, University of Southampton --></div> <div class= >?person wdt:P112 wd:Q37033 . ><!--- Plessey --></div> <div class= >} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (P31, Q11424)\"\n      ,\n      \"wd:Q562108 wdt:P57 ?film .\", \">// wrote the work (P57), Jens Jørgen Thorsen (Q562108)\"\n      ,\n      \"wd:Q1687239 wdt:P57 ?film .\", \">// wrote the work (P57), Ole John (Q1687239)\"\n      ,\n      \"wd:Q35979475 wdt:P57 ?film .\", \">// wrote the work (P57), Jørgen Leth (Q35979475)\"\n      ,\n      \"wd:Q562108 wdt:P57 ?film .\", \">// wrote the work (P57), Jens Jørgen Thorsen (Q562108)\"\n      ,\n      \"wd:Q1687239 wdt:P57 ?film .\", \">// wrote the work (P57), Ole John (Q1687239)\"\n      ,\n      \"wd:Q35979475 wdt:P57 ?film .\", \">// wrote the work (P57), Jørgen Leth (Q35979475)\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . >// instance of film (P31, Q11424) wd:Q562108 wdt:P57 ?film . >// wrote the work (P57), Jens Jørgen Thorsen (Q562108) wd:Q1687239 wdt:P57 ?film . >// wrote the work (P57), Ole John (Q1687239) wd:Q35979475 wdt:P57 ?film . >// wrote the work (P57), Jørgen Leth (Q35979475) wd:Q562108 wdt:P57 ?film . >// wrote the work (P57), Jens Jørgen Thorsen (Q562108) wd:Q1687239 wdt:P57 ?film . >// wrote the work (P57), Ole John (Q1687239) wd:Q35979475 wdt:P57 ?film . >// wrote the work (P57), Jørgen Leth (Q35979475) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:1256 ?p ?x . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { kg:1256 ?p ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P1040 wd:Q192115 .\", \"=>\" ,\n  \"  ?x wdt:P57 wd:Q656357 .\",\n  \"  ?x wdt:P344 wd:Q192115 .\",\n  \"  ?x wdt:P161 wd:Q656357 .\",\n  \"  ?x wdt:P1040 wd:Q192115 .\",\n  \"  ?x wdt:P58 wd:Q15622760 .\"\n  ,\n  \"}\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q192115 . => ?x wdt:P57 wd:Q656357 . ?x wdt:P344 wd:Q192115 . ?x wdt:P161 wd:Q656357 . ?x wdt:P1040 wd:Q192115 . ?x wdt:P58 wd:Q15622760 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x kg:4083 ?y .\", \"=>\" ,\n  \"  ?y kg:1179 ?z .\",\n  \"  ?z kg:5468 ?a .\",\n  \"  ?a kg:2970 ?b .\",\n  \"  ?b kg:3401 ?c .\",\n  \"  ?c kg:0409 ?d .\",\n  \"  ?d kg:4772 ?e .\",\n  \"  ?e kg:4058 ?f .\",\n  \"  ?f kg:0729 ?g .\"\n  ,\n  \"}\"\n]\n}\n    \t\t\t\t   \t\t\t\t\t \t  ", "normal_query": "SELECT ?x WHERE { ?x kg:4083 ?y . => ?y kg:1179 ?z . ?z kg:5468 ?a . ?a kg:2970 ?b . ?b kg:3401 ?c . ?c kg:0409 ?d . ?d kg:4772 ?e . ?e kg:4058 ?f . ?f kg:0729 ?g . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P344 ?y .\",\n      \"?y wdt:P1040 ?z .\",\n      \"?z wdt:P57 ?a .\",\n      \"?a wdt:P58 ?b .\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 ?y . ?y wdt:P1040 ?z . ?z wdt:P57 ?a . ?a wdt:P58 ?b . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:9214 ?y .\",\n      \"}\",\n      \"ORDER BY ?y\"\n  ]\n}\n   \t\t\t\t\t \t\t\t\t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x kg:9214 ?y . } ORDER BY ?y LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [\n  \"?x wdt:P344 ?y .\",\n  \"SERVICE wikibase:label { bd:serviceParam wdt:P1040 wd:Q623051 }\"\n] }\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "?x wdt:P344 ?y . SERVICE wikibase:label { bd:serviceParam wdt:P1040 wd:Q623051 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:P344 ?y .\",\n      \"?y kg:P57 ?z .\",\n      \"?z kg:P57 ?w .\",\n      \"?w kg:P57 ?v .\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:P344 ?y . ?y kg:P57 ?z . ?z kg:P57 ?w . ?w kg:P57 ?v . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P344 wd:Q613974 .\", \"=>\"\n      \t\t\t\t\t\t\t\t\t\t \t,\n      \"?x wdt:P57 wd:Q17738 .\", \"=>\"\n      \t\t\t\t\t\t\t\t\t\t \t,\n      \"?x wdt:P58 wd:Q1415127 .\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q613974 . => ?x wdt:P57 wd:Q17738 . => ?x wdt:P58 wd:Q1415127 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{ \"query\": [\n  \"?x\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"><!-- film instance of work, subclass of creative work? Or maybe film is a different class. Wait, Q11424 is 'work', but perhaps the correct class for films is Q1687239 (film). So I should use wdt:P31 wd:Q1687239 instead. But in the given entities, Q562108 is film? Wait, looking back at the user's provided list, they have multiple entries for P57 and different WD items. Let me check which ones are films. The user listed wdt:P57 as being used with Q562108, Q1687239, etc. So perhaps Q562108 is a film? Or maybe I should look up what each WD item represents. Alternatively, perhaps the correct way is to use P31 with Q1687239 (film). But in the user's list, they have wdt:P31 as P31 and wd:Q11424 as Q11424. So maybe I should proceed with that. Alternatively, perhaps it's better to use P57 for film properties. Hmm, this is getting a bit confusing. Maybe I should structure the query step by step. First, find all films directed by Jens Jørgen Thorsen, produced by Jørgen Leth, written by Ole John, and edited by Jens Jørgen Thorsen as well? Wait, no, the question says \" , \" between director, producer, writer, editor—probably missing names. But in the user's message, it's unclear who is associated with which role. So perhaps I need to structure the query to find a film where multiple people are involved in different roles: directed by someone, produced by someone else, written by another, and edited by someone. But the user hasn't specified the names, so maybe they expect us to use the given WD items as entities. Looking back at the provided entities and properties, I see that wdt:P57 is used with Q562108, Q1687239, etc. So perhaps each of these WD items represents a person involved in the film. But without knowing their exact roles, it's challenging. Alternatively, maybe the user wants to find a film where Jens Jørgen Thorsen is both director and editor, produced by Jørgen Leth, and written by Ole John. So I need to structure the query with multiple conditions: film directed by Jens Jørgen Thorsen (wdt:P57), produced by Jørgen Leth (maybe wdt:P1040?), written by Ole John (wdt:P162 or P58?), and edited by Jens Jørgen Thorsen again. But I'm not sure about the exact properties for each role. Maybe I should look up the correct Wikidata properties: director is P57, producer is P1040, writer is P162, editor is P368 (but that's not in the user's list). Alternatively, perhaps P58 is used for scriptwriter or author. So putting it all together, I'll need to create a query that selects ?film where: ?film has director Jens Jørgen Thorsen, producer Jørgen Leth, writer Ole John, and editor Jens Jørgen Thorsen. But since the user provided specific WD items for each role, I need to map them correctly. So perhaps the query would look like this: SELECT ?film WHERE { ?film wdt:P57 wd:Q1687239 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P162 wd:Q35979475 . ?film wdt:P368 wd:Q1687239 . } But wait, the user didn't provide P368 in their list. They have P58 and others. Maybe I should use P58 for editing? Or perhaps there's another property. Alternatively, maybe the editor is also using P57 but that doesn't make sense. This is getting complicated. Perhaps it's better to structure the query with each role separately, using the appropriate properties and WD items provided by the user. So, in the end, I'll construct a SPARQL query that selects ?film where it has multiple claims: directed by Jens Jørgen Thorsen (using wdt:P57), produced by Jørgen Leth (using wdt:P", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P31 ?y .\", \"=> film\"\n      ,\n      \"?x kg:P57 ?y .\", \"=> directed by\"\n      ,\n      \"?x kg:P1040 ?y .\", \"=> produced by\"\n      ,\n      \"?x kg:P272 ?y .\", \"=> written by\"\n      ,\n      \"?x kg:P162 ?y .\", \"=> edited by\"\n    ,\n      \"}\",\n      \"}\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . => film ?x kg:P57 ?y . => directed by ?x kg:P1040 ?y . => produced by ?x kg:P272 ?y . => written by ?x kg:P162 ?y . => edited by } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?work wdt:P1040 wd:Q551861 .\", \">// P1040 is written by, Q551861 is Xavier Dolan (person instance of person and film director maybe? Or perhaps a different property. Wait, let me check the properties provided. The user has given several entities and properties: wdt:P106, which might be occupation; wdt:P1040, which I think is scriptwriter or screenwriter; and others like wdt:P58, which could be editor.\"\n      ]\n    }\n  \t\t\t\t\t\t\t\t\t\t \t\t\t \t  ", "normal_query": "SELECT DISTINCT ?costumeDesigner WHERE { ?work wdt:P1040 wd:Q551861 . >// P1040 is written by, Q551861 is Xavier Dolan (person instance of person and film director maybe? Or perhaps a different property. Wait, let me check the properties provided. The user has given several entities and properties: wdt:P106, which might be occupation; wdt:P1040, which I think is scriptwriter or screenwriter; and others like wdt:P58, which could be editor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?x WHERE {\",\n      \"?x kg:P1040 ?y .\",\n      \"FILTER (regex(str(?y), \\\"Xavier Dolan\\\"))\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT DISTINCT ?x WHERE { ?x kg:P1040 ?y . FILTER (regex(str(?y), \"Xavier Dolan\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT DISTINCT ?x WHERE {\",\n  \"  ?x wdt:P106 wd:Q3282637 .\", \">// occupation: film producer (Q3282637)\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P106 wd:Q3282637 . >// occupation: film producer (Q3282637) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.com/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:1013 kg:P57 ?x .\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.com/kg SELECT ?x WHERE { kg:1013 kg:P57 ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"><!---instance of film--->\\n      \" ,\",\" ,\"\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n      \" ,\",\",\"  \", \"><!---maybe more properties only instance of film? Or do I need to add other properties?-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  \", \"><!---maybe more properties here-->\\n    \" ,\",\",\"  ,\"\n  ]\n}\n        \t\t\t\t\t   \t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ><!---instance of film---> , , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties only instance of film? Or do I need to add other properties?--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , ><!---maybe more properties here--> , , LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P31 ?y .\", \"=>\"\n      ,\n      \"?x kg:P57 ?z .\", \"=>\"\n      ,\n      \"?x kg:P58 ?w .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . => ?x kg:P57 ?z . => ?x kg:P58 ?w . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (P31, Q11424)\"\n     \t\t]\n   }\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . >// instance of film (P31, Q11424) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:P31 ?y . }\" ] }\n    \t\t\t\t\t\t\t\t\t\t  \t\t\t ", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT DISTINCT ?x WHERE {\",\n  \"  ?x wdt:P57 ?y .\", \">// P57 is 'directed by' property\"\n  ]\n}\n        \t\t\t\t\t\t\t   \t\t", "normal_query": "SELECT DISTINCT ?x WHERE { ?x wdt:P57 ?y . >// P57 is 'directed by' property LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:2825 kg:P57 ?x .\"\n  ]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.org/kg SELECT ?x WHERE { kg:2825 kg:P57 ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P57 ?y .\", \">// P57 is 'editing' (property)\"\n    ]\n}\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . >// P57 is 'editing' (property) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT ?x WHERE {\",\n    \"  kg:5001 kg:P57 ?x .\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.org/kg SELECT ?x WHERE { kg:5001 kg:P57 ?x . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \"=> film is instance of a movie (Q11424)\"\n      ,\n      \"?film wdt:P57 wd:Q448604 .\", \"=> film has director(s) Q448604 (David Zucker)\"\n      ,\n      \"?film wdt:P57 wd:Q363666 .\", \"=> film has director(s) Q363666 (Jim Abrahams)\"\n      ,\n      \"?film wdt:P57 wd:Q452794 .\", \"=> film has director(s) Q448604 (Jerry Zucker)\"\n      ,\n      \"?film wdt:P1431 wd:Q448604 .\", \"=> film has screenwriter(s) Q448604 (David Zucker)\"\n      ,\n      \"?film wdt:P1431 wd:Q363666 .\", \"=> film has screenwriter(s) Q363666 (Jim Abrahams)\"\n      ,\n      \"?film wdt:P1431 wd:Q452794 .\", \"=> film has screenwriter(s) Q452794 (Jerry Zucker)\"\n      ,\n      \"?film wdt:P58 wd:Q448604 .\", \"=> film has executive producer(s) Q448604 (David Zucker)\"\n      ,\n      \"?film wdt:P58 wd:Q363666 .\", \"=> film has executive producer(s) Q363666 (Jim Abrahams)\"\n      ,\n      \"?film wdt:P58 wd:Q452794 .\", \"=> film has executive producer(s) Q452794 (Jerry Zucker)\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . => film is instance of a movie (Q11424) ?film wdt:P57 wd:Q448604 . => film has director(s) Q448604 (David Zucker) ?film wdt:P57 wd:Q363666 . => film has director(s) Q363666 (Jim Abrahams) ?film wdt:P57 wd:Q452794 . => film has director(s) Q448604 (Jerry Zucker) ?film wdt:P1431 wd:Q448604 . => film has screenwriter(s) Q448604 (David Zucker) ?film wdt:P1431 wd:Q363666 . => film has screenwriter(s) Q363666 (Jim Abrahams) ?film wdt:P1431 wd:Q452794 . => film has screenwriter(s) Q452794 (Jerry Zucker) ?film wdt:P58 wd:Q448604 . => film has executive producer(s) Q448604 (David Zucker) ?film wdt:P58 wd:Q363666 . => film has executive producer(s) Q363666 (Jim Abrahams) ?film wdt:P58 wd:Q452794 . => film has executive producer(s) Q452794 (Jerry Zucker) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P31 ?y .\",\n      \"?x kg:P57 ?z .\",\n      \"?x kg:P1431 ?w .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P31 ?y . ?x kg:P57 ?z . ?x kg:P1431 ?w . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P57 ?y .\", \"=> This line selects all resources (?x) that have a value for the property P57 (which represents 'edited by').\"\n    ,\n    \"  ?y wdt:P1040 ?z .\" , \"=> This line filters the results to only include those where the editor (?y) has a value for the property P1040 ('executive produced by').\"\n    ,\n    \"  ?x wdt:P1431 ?w .\" , \"=> This line further filters the resources to have a value for P1431 ('directed by').\"\n    ,\n    \"  SERVICE SILENT UNION {\", \"=> The SERVICE statement is used here with 'SILENT' to suppress any errors that might occur if the service isn't available.\"\n    ,\n    \"    BD:sparqlSetMaxRows(1000)\" , \"=> This sets a maximum of 1000 rows for the result set, ensuring we don't get overwhelmed with too much data.\"\n    ,\n    \"  }\", \"\",\n    \"}\" ] }\n     \t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => This line selects all resources (?x) that have a value for the property P57 (which represents 'edited by'). ?y wdt:P1040 ?z . => This line filters the results to only include those where the editor (?y) has a value for the property P1040 ('executive produced by'). ?x wdt:P1431 ?w . => This line further filters the resources to have a value for P1431 ('directed by'). SERVICE SILENT UNION { => The SERVICE statement is used here with 'SILENT' to suppress any errors that might occur if the service isn't available. BD:sparqlSetMaxRows(1000) => This sets a maximum of 1000 rows for the result set, ensuring we don't get overwhelmed with too much data. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{ \"query\": [\n  \"?x a kg:Person .\"\n]\n}\n                    ", "normal_query": "?x a kg:Person . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P106 wd:Q44426 .\", \"=> cinematographer\"\n      ,\n      \"?x wdt:P57 wd:Q222344 .\", \"=> edited by Rainer Werner Fassbinder\"\n      ,\n      \"?x wdt:P57 wd:Q599423 .\", \"=> directed by Rainer Werner Fassbinder\"\n      ,\n      \"?x wdt:P161 wd:Q543382 .\", \"=> starred Rainer Werner Fassbinder\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q44426 . => cinematographer ?x wdt:P57 wd:Q222344 . => edited by Rainer Werner Fassbinder ?x wdt:P57 wd:Q599423 . => directed by Rainer Werner Fassbinder ?x wdt:P161 wd:Q543382 . => starred Rainer Werner Fassbinder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:7025 ?p ?x }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { kg:7025 ?p ?x } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:P106 ?y .\", \"=>\"\n      ,\n      \"?y kg:P112 kg:Q5045345 .\",\n      \"?y kg:P737 kg:Q45404 .\",\n      \"?y kg:P26 kg:Q4720983 .\",\n      \"?y kg:P26 kg:Q457433 .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P106 ?y . => ?y kg:P112 kg:Q5045345 . ?y kg:P737 kg:Q45404 . ?y kg:P26 kg:Q4720983 . ?y kg:P26 kg:Q457433 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P108 wd:Q37033 .\", \"=> This line connects the person to CERN\"\n      ,\n      \"?x wdt:P108 wd:Q7095994 .\", \"=> This line connects the person to University of Southampton School of Electronics and Computer Science\"\n      ,\n      \"?x wdt:P108 wd:Q42944 .\" ,\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q37033 . => This line connects the person to CERN ?x wdt:P108 wd:Q7095994 . => This line connects the person to University of Southampton School of Electronics and Computer Science ?x wdt:P108 wd:Q42944 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:2143 kg:Q37033 }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:2143 kg:Q37033 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P344 wd:Q1165050 .\", \"=> This line connects the entity to its genre, which is horror.\",\n  \"  ?x wdt:P57 wd:Q192115 .\", \"=> This line connects the entity to its director, who is Robert Rodriguez.\",\n  \"  ?x wdt:P86 wd:Q1653396 .\", \"=> This line connects the entity to its cinematographer, who is Peter Menzies Jr.\",\n  \"  ?x wdt:P1040 wd:Q128493 .\", \"=> This line connects the entity to its composer, who is John A. Klassen.\",\n  \"  ?x wdt:P58 wd:Q1653396 .\" ]} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q1165050 . => This line connects the entity to its genre, which is horror. ?x wdt:P57 wd:Q192115 . => This line connects the entity to its director, who is Robert Rodriguez. ?x wdt:P86 wd:Q1653396 . => This line connects the entity to its cinematographer, who is Peter Menzies Jr. ?x wdt:P1040 wd:Q128493 . => This line connects the entity to its composer, who is John A. Klassen. ?x wdt:P58 wd:Q1653396 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P344 ?y .\", \"=>\" ,\n    \"  ?y kg:P161 ?z .\",\n    \"  ?z kg:P57 ?a .\",\n    \"  ?a kg:P86 ?b .\",\n    \"  ?b kg:P58 ?c .\",\n    \"  ?c kg:P1040 ?d .\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "SELECT ?x WHERE { ?x kg:P344 ?y . => ?y kg:P161 ?z . ?z kg:P57 ?a . ?a kg:P86 ?b . ?b kg:P58 ?c . ?c kg:P1040 ?d . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P57 ?y .\", \"=>\" ,\n  \"  ?y wdt:P1040 ?z .\"\n]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 ?y . => ?y wdt:P1040 ?z . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P57 ?y .\", \"=>\" ,\n    \"  ?y kg:P1040 ?z .\",\n    \"  ?z kg:P1431 ?w .\",\n    \"  ?w kg:P58 ?v .\"\n    ,\n    \"} LIMIT 10\"\n]\n}\n                    ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . => ?y kg:P1040 ?z . ?z kg:P1431 ?w . ?w kg:P58 ?v . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{ \"query\": [\n  \"?x wdt:P106 wd:Q3282637 .\",\n  \"?x wdt:P57 ?y .\",\n  \"?y wdt:P112 wd:Q219400 .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P106 wd:Q3282637 . ?x wdt:P57 ?y . ?y wdt:P112 wd:Q219400 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{ \"query\": [\n  \"?x a kg:Person .\",\n  \" ?x kg:P106 ?y .\",\n  \" ?y kg:P112 ?z .\",\n  \" ?z kg:P57 ?w .\",\n  \" ?w kg:P58 ?v .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x a kg:Person . ?x kg:P106 ?y . ?y kg:P112 ?z . ?z kg:P57 ?w . ?w kg:P58 ?v . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P344 wd:Q4959991 .\", \"=> This line connects the variable x to the property P344 (executive producer) and the value Q4959991.\"\n      ,\n      \"?x wdt:P57 wd:Q5375110 .\", \"=> This line connects the variable x to the property P57 (editor) and the value Q5375110.\"\n      ,\n      \"?x wdt:P1040 wd:Q7243050 .\", \"=> This line connects the variable x to the property P1040 (composer) and the value Q7243050.\"\n      ,\n      \"?x wdt:P86 wd:Q4959991 .\", \"=> This line connects the variable x to the property P86 (cinematographer) and the value Q4959991.\"\n      ,\n      \"?x wdt:P1431 wd:Q5375110 .\", \"=> This line connects the variable x to the property P1431 (director) and the value Q5375110.\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q4959991 . => This line connects the variable x to the property P344 (executive producer) and the value Q4959991. ?x wdt:P57 wd:Q5375110 . => This line connects the variable x to the property P57 (editor) and the value Q5375110. ?x wdt:P1040 wd:Q7243050 . => This line connects the variable x to the property P1040 (composer) and the value Q7243050. ?x wdt:P86 wd:Q4959991 . => This line connects the variable x to the property P86 (cinematographer) and the value Q4959991. ?x wdt:P1431 wd:Q5375110 . => This line connects the variable x to the property P1431 (director) and the value Q5375110. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P344 ?y .\", \"=>\" ,\n    \"  ?y kg:P57 ?z .\",\n    \"  ?z kg:P86 ?a .\",\n    \"  ?a kg:P1040 ?b .\",\n    \"  ?b kg:P1431 ?c .\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P344 ?y . => ?y kg:P57 ?z . ?z kg:P86 ?a . ?a kg:P1040 ?b . ?b kg:P1431 ?c . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P108 wd:Q55206 .\", \"=>\" ,\n      \"?x wdt:P108 wd:Q23548 .\",\n      \"?x wdt:P108 wd:Q41506 .\",\n      \"?x wdt:P108 wd:Q622664 .\",\n      \"?x wdt:P108 wd:Q5059715 .\"\n    ,\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q55206 . => ?x wdt:P108 wd:Q23548 . ?x wdt:P108 wd:Q41506 . ?x wdt:P108 wd:Q622664 . ?x wdt:P108 wd:Q5059715 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:6416 ?y .\",\n      \"?x kg:9923 kg:Q55206 .\",\n      \"?x kg:8994 kg:Q55206 .\",\n      \"?x kg:1473 kg:Q23548 .\",\n      \"?x kg:3401 kg:Q41506 .\",\n      \"?x kg:8712 kg:Q622664 .\",\n      \"?x kg:2435 kg:Q5059715 .\",\n      \"}\"\n  ]\n}\n   \t\t\t\t\t\t\t\t\t\t  \t\t\t  ", "normal_query": "SELECT ?x WHERE { ?x kg:6416 ?y . ?x kg:9923 kg:Q55206 . ?x kg:8994 kg:Q55206 . ?x kg:1473 kg:Q23548 . ?x kg:3401 kg:Q41506 . ?x kg:8712 kg:Q622664 . ?x kg:2435 kg:Q5059715 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P1040 wd:Q93853 .\", \"=>\" ,\n  \"  ?x wdt:P57 wd:Q656357 .\",\n  \"  ?x wdt:P86 wd:Q192115 .\",\n  \"  ?x wdt:P58 wd:Q1165050 .\"\n  ,\n  \"}\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q93853 . => ?x wdt:P57 wd:Q656357 . ?x wdt:P86 wd:Q192115 . ?x wdt:P58 wd:Q1165050 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . ?y p:P344 ?z }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . ?y p:P344 ?z } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P108 wd:Q29011 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q29011 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P1431 kg:9147 }\" ] }\n                    ", "normal_query": "SELECT ?x WHERE { ?x p:P1431 kg:9147 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x\",\n    \"WHERE {\",\n      \"?x wdt:P344 wd:Q17738 .\"\n    ]\n  }\n  \t\t\t\t\t \t\t\t\t\t \t  \t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q17738 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:1376 ?y .\",\n      \"?y kg:8139 ?z .\",\n      \"?z kg:4247 ?a .\",\n      \"?a kg:8139 ?b .\",\n      \"?b kg:5456 ?c .\",\n      \"?b kg:8139 ?d .\",\n      \"?d kg:9076 ?e .\",\n      \"?d kg:8139 ?f .\",\n      \"?f kg:7307 ?g .\",\n      \"?f kg:8139 ?h .\",\n      \"?h kg:5456 ?i .\",\n      \"?h kg:8139 ?j .\",\n      \"?j kg:9076 ?k .\",\n      \"?j kg:8139 ?l .\",\n      \"?l kg:7307 ?m .\",\n      \"?l kg:8139 ?n .\",\n      \"?n kg:5456 ?o .\",\n      \"?n kg:8139 ?p .\",\n      \"?p kg:9076 ?q .\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t \t\t", "normal_query": "SELECT ?x WHERE { ?x kg:1376 ?y . ?y kg:8139 ?z . ?z kg:4247 ?a . ?a kg:8139 ?b . ?b kg:5456 ?c . ?b kg:8139 ?d . ?d kg:9076 ?e . ?d kg:8139 ?f . ?f kg:7307 ?g . ?f kg:8139 ?h . ?h kg:5456 ?i . ?h kg:8139 ?j . ?j kg:9076 ?k . ?j kg:8139 ?l . ?l kg:7307 ?m . ?l kg:8139 ?n . ?n kg:5456 ?o . ?n kg:8139 ?p . ?p kg:9076 ?q . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{ \"query\": [\n  \"?x wdt:P344 ?y .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P344 ?y . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P344 q:Q3485595 . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P344 q:Q3485595 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P57 wd:Q2449461 .\", \"=> director of The Kid\"\n      ,\n      \"?x wdt:P57 wd:Q45602 .\", \"=> director of The Floorwalker\"\n      ,\n      \"?x wdt:P57 wd:Q166739 .\", \"=> director of A Woman\"\n      ,\n      \"?x wdt:P57 wd:Q374172 .\", \"=> director of Modern Times\"\n      ,\n      \"?x wdt:P1040 wd:Q32337 .\", \"=> married to Lita Grey\"\n      ,\n      \"?x wdt:P1040 wd:Q137808 .\", \"=> married to Mildred Harris\"\n      ,\n      \"?x wdt:P1040 wd:Q241019 .\", \"=> married to Oona O'Neill\"\n    ]\n  }\n  \t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q2449461 . => director of The Kid ?x wdt:P57 wd:Q45602 . => director of The Floorwalker ?x wdt:P57 wd:Q166739 . => director of A Woman ?x wdt:P57 wd:Q374172 . => director of Modern Times ?x wdt:P1040 wd:Q32337 . => married to Lita Grey ?x wdt:P1040 wd:Q137808 . => married to Mildred Harris ?x wdt:P1040 wd:Q241019 . => married to Oona O'Neill LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{ \"query\": [ \"Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:0701 kg:Q882 }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:0701 kg:Q882 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P127 wd:Q2062523 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P127 wd:Q2062523 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n    \t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{ \"query\": [\n  \"?x wdt:P1040 ?y .\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "?x wdt:P1040 ?y . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{ \"query\": [\n  \"?x\"\n]\n}\n                    ", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{ \"query\": [\n  \"SELECT ?x WHERE {\",\n  \"  ?x wdt:P57 wd:Q1970252 .\", \"=>\" ,\n  \"  ?x wdt:P737 wd:Q3017093 .\",\n  \"}\"\n]\n}\n  \t\t\t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q1970252 . => ?x wdt:P737 wd:Q3017093 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{ \"query\": [\n    \"prefix kg: <http://example.org/kg#> \",\n    \"SELECT *\",\n    \"WHERE {\",\n    \"?x kg:P737 ?y .\",\n    \"}\"] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "prefix kg: <http://example.org/kg SELECT * WHERE { ?x kg:P737 ?y . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ]\n}\n   \t\t\t\t\t\t\t   \t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:0887 ?y .\", \"=>\"\n      ,\n      \"?y kg:3790 kg:2780 .\",\n      \"?y kg:5797 kg:8926 .\",\n      \"?y kg:0897 kg:4096 .\",\n      \"?y kg:9515 kg:5107 .\",\n      \"?y kg:9515 kg:2787 .\",\n      \"?y kg:9515 kg:6495 .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x kg:0887 ?y . => ?y kg:3790 kg:2780 . ?y kg:5797 kg:8926 . ?y kg:0897 kg:4096 . ?y kg:9515 kg:5107 . ?y kg:9515 kg:2787 . ?y kg:9515 kg:6495 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P161 wd:Q312258 .\", \"=>\"\n    ]\n  }\n  \t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 wd:Q312258 . => LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x rdf:type kg:7352 .\", \"=> kg:7352 is Q2709504, which is a person (Q2709504). So the subject must be a person.\",\n      \"?x kg:8954 ?y .\", \"=> kg:8954 is P161, which is 'educated at'. So this triple represents that the person educated at some institution.\",\n      \"?y rdf:type kg:9335 .\", \"=> kg:9335 is Q3204825, which is a film. So ?y must be a film.\",\n      \"FILTER (regex(str(?x), \\\"Jane B. par Agnès V.\\\") && regex(str(?y), \\\"The Beaches of Agnès\\\"))\", \"=> The person's name should include 'Jane B. par Agnès V.' and the film's title should include 'The Beaches of Agnès'.\",\n      \"}\"\n    ]\n  }\n  \t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x rdf:type kg:7352 . => kg:7352 is Q2709504, which is a person (Q2709504). So the subject must be a person. ?x kg:8954 ?y . => kg:8954 is P161, which is 'educated at'. So this triple represents that the person educated at some institution. ?y rdf:type kg:9335 . => kg:9335 is Q3204825, which is a film. So ?y must be a film. FILTER (regex(str(?x), \"Jane B. par Agnès V.\") && regex(str(?y), \"The Beaches of Agnès\")) => The person's name should include 'Jane B. par Agnès V.' and the film's title should include 'The Beaches of Agnès'. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P127 wd:Q17070012 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P127 wd:Q17070012 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P750 ?y .\", \"=>\" ,\n    \"  ?y kg:P272 ?z .\",\n    \"  ?y kg:P127 ?a .\",\n    \"  ?y kg:Q849363 ?b .\",\n    \"  ?y kg:Q219635 ?c .\",\n    \"  ?y kg:Q65073147 ?d .\",\n    \"  ?y kg:Q318128 ?e .\",\n    \"  ?y kg:Q136469 ?f .\",\n    \"  ?y kg:Q1628791 ?g .\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?x WHERE { ?x kg:P750 ?y . => ?y kg:P272 ?z . ?y kg:P127 ?a . ?y kg:Q849363 ?b . ?y kg:Q219635 ?c . ?y kg:Q65073147 ?d . ?y kg:Q318128 ?e . ?y kg:Q136469 ?f . ?y kg:Q1628791 ?g . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P1040 wd:Q4004365 . }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q4004365 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x kg:1976 ?y .\",\n      \"OPTIONAL { ?y kg:9178 ?z }\",\n      \"OPTIONAL { ?y kg:9187 ?a }\",\n      \"OPTIONAL { ?y kg:0078 ?b }\",\n      \"OPTIONAL { ?y kg:6030 ?c }\",\n      \"OPTIONAL { ?y kg:8940 ?d }\",\n      \"OPTIONAL { ?y kg:0939 ?e }\",\n      \"OPTIONAL { ?y kg:0652 ?f }\",\n      \"OPTIONAL { ?y kg:3229 ?g }\",\n      \"OPTIONAL { ?y kg:3045 ?h }\",\n      \"OPTIONAL { ?y kg:1754 ?i }\",\n      \"OPTIONAL { ?y kg:0418 ?j }\"\n    ,\n    \"}\"] }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x kg:1976 ?y . OPTIONAL { ?y kg:9178 ?z } OPTIONAL { ?y kg:9187 ?a } OPTIONAL { ?y kg:0078 ?b } OPTIONAL { ?y kg:6030 ?c } OPTIONAL { ?y kg:8940 ?d } OPTIONAL { ?y kg:0939 ?e } OPTIONAL { ?y kg:0652 ?f } OPTIONAL { ?y kg:3229 ?g } OPTIONAL { ?y kg:3045 ?h } OPTIONAL { ?y kg:1754 ?i } OPTIONAL { ?y kg:0418 ?j } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\"\n      ,\n      \"  ?x wdt:P106 wd:Q222344 .\"\n      ,\n      \"  ?x wdt:P112 wd:Q242446 .\"\n      ,\n      \"  ?x wdt:P112 wd:Q258945 .\"\n      ,\n      \"  ?x wdt:P112 wd:Q746676 .\"\n      ,\n      \"  ?x wdt:P112 wd:Q1044630 .\"\n      ,\n      \"  ?x wdt:P26 wd:Q6813152 .\"\n    ]\n  }\n  \t\t\t\t   \t\t\t\t\t\t\t   \t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q222344 . ?x wdt:P112 wd:Q242446 . ?x wdt:P112 wd:Q258945 . ?x wdt:P112 wd:Q746676 . ?x wdt:P112 wd:Q1044630 . ?x wdt:P26 wd:Q6813152 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q222344 .\", \"=> This line seems to be about the person's occupation, which is 'cinematographer'.\"\n      ,\n      \"?person wdt:P112 wd:Q258945 .\", \"=> This line connects the person to Lucasfilm.\"\n      ,\n      \"?person wdt:P112 wd:Q746676 .\", \"=> This line connects the person to LucasArts.\"\n      ,\n      \"?person wdt:P112 wd:Q1044630 .\", \"=> This line connects the person to Industrial Light & Magic (ILM).\"\n      ,\n      \"?person wdt:P112 wd:Q6813152 .\", \"=> This line connects the person to THX.\"\n      ,\n      \"SERVICE wikibase:label {\",\n        \"bd:serviceParam wikibase:language 'en' .\",\n      \"}\",\n    \"]\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t    \t", "normal_query": "SELECT DISTINCT ?resource WHERE { ?person wdt:P106 wd:Q222344 . => This line seems to be about the person's occupation, which is 'cinematographer'. ?person wdt:P112 wd:Q258945 . => This line connects the person to Lucasfilm. ?person wdt:P112 wd:Q746676 . => This line connects the person to LucasArts. ?person wdt:P112 wd:Q1044630 . => This line connects the person to Industrial Light & Magic (ILM). ?person wdt:P112 wd:Q6813152 . => This line connects the person to THX. SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' . } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P344 wd:Q85520081 .\", \"=>\" ,\n    \"  ?x wdt:P57 wd:Q96054985 .\",\n    \"  ?x wdt:P1040 wd:Q85532437 .\",\n    \"  ?x wdt:P1431 wd:Q87778273 .\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t      ", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q85520081 . => ?x wdt:P57 wd:Q96054985 . ?x wdt:P1040 wd:Q85532437 . ?x wdt:P1431 wd:Q87778273 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P161 ?y .\", \"=>\" ,\n    \"  ?y kg:P57 ?z .\",\n    \"  ?z kg:P344 ?w .\",\n    \"  ?w kg:P1040 ?v .\",\n    \"  ?v kg:P1431 ?u .\",\n    \"  ?u kg:P58 ?t .\"\n    ,\n    \"}\"\n]\n}\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x kg:P161 ?y . => ?y kg:P57 ?z . ?z kg:P344 ?w . ?w kg:P1040 ?v . ?v kg:P1431 ?u . ?u kg:P58 ?t . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P344 wd:Q1609393 .\", \"=>\" ,\n    \"  ?x wdt:P344 wd:Q2411065 .\", \"=>\" ,\n    \"  ?x wdt:P344 wd:Q208910 .\", \"=>\" ,\n    \"  ?x wdt:P344 wd:Q613974 .\", \"=>\" ,\n    \"  ?x wdt:P58 wd:Q52306598 .\", \"=>\" ,\n    \"  ?x wdt:P737 wd:Q717378 .\", \"=>\" ,\n    \"  ?x wdt:P26 wd:Q5 .\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P344 wd:Q1609393 . => ?x wdt:P344 wd:Q2411065 . => ?x wdt:P344 wd:Q208910 . => ?x wdt:P344 wd:Q613974 . => ?x wdt:P58 wd:Q52306598 . => ?x wdt:P737 wd:Q717378 . => ?x wdt:P26 wd:Q5 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:0352 ?y .\", \"=>\" ,\n    \"  ?y kg:7578 ?z .\",\n    \"  ?z kg:7316 ?a .\",\n    \"  ?a kg:6397 ?b .\",\n    \"  ?b kg:6555 ?c .\",\n    \"  ?c kg:7578 ?d .\",\n    \"  ?d kg:7316 ?e .\",\n    \"  ?e kg:6397 ?f .\",\n    \"  ?f kg:6555 ?g .\",\n    \"}\"\n]\n}\n    \t\t\t\t\t\t\t\t\t\t  \t\t  ", "normal_query": "SELECT ?x WHERE { ?x kg:0352 ?y . => ?y kg:7578 ?z . ?z kg:7316 ?a . ?a kg:6397 ?b . ?b kg:6555 ?c . ?c kg:7578 ?d . ?d kg:7316 ?e . ?e kg:6397 ?f . ?f kg:6555 ?g . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q222344 . ?x wdt:P57 wd:Q18609037 . ?x wdt:P57 wd:Q1361018 . ?x wdt:P1040 wd:Q2086445 . ?x wdt:P1431 wd:Q2086445 . ?x wdt:P58 wd:Q1361018 }\" ] }\n    \t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q222344 . ?x wdt:P57 wd:Q18609037 . ?x wdt:P57 wd:Q1361018 . ?x wdt:P1040 wd:Q2086445 . ?x wdt:P1431 wd:Q2086445 . ?x wdt:P58 wd:Q1361018 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . }\" ] }\n    \t\t\t\t\t   \t\t\t  \t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P1040 wd:Q63993096 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t   \t\t\t\t\t\t\t   ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1040 wd:Q63993096 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{ \"query\": [ \"{prefixes}\" ] }\n    \t\t\t\t\t\t \t\t\t\t\t\t \t ", "normal_query": "{prefixes} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n  \"query\": [\n    \"SELECT ?x WHERE {\",\n      \"?x wdt:P127 wd:Q2062523 .\",\n      \"}\"\n  ]\n}\n  \t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t ", "normal_query": "SELECT ?x WHERE { ?x wdt:P127 wd:Q2062523 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n  \"query\": [\n    \"?x\"\n  ]\n}\n   \t\t\t\t\t   \t\t\t\t\t\t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n      \"?film wdt:P31 wd:Q11424 .\", \">// instance of film (P31, Q11424)\"\n     \t\t\t,\n      \"?film wdt:P57 wd:Q16390 .\", \">// directed by Randolph Scott (P57, Q16390)\"\n     \t\t,\n      \"?film wdt:P57 wd:Q295984 .\", \">// produced by Miriam Hopkins (P57, Q295984)\"\n     \t,\n      \"?film wdt:P57 wd:Q4420093 .\", \">// written by Humphrey Bogart (P57, Q4420093)\"\n     \t,\n      \"?film wdt:P57 wd:Q242477 .\" ,\"\\n\" ,\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:14b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P31 ?y . }\" ] }\n    \t\t\t\t\t   \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?x WHERE { ?x p:P31 ?y . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{ \"query\": [\n    \"Was Hans Ertl a screenwriter?\"\n  ]\n}\n                    ", "normal_query": "Was Hans Ertl a screenwriter? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{ \"query\": [\n    \"Was Hans Ertl a screenwriter\"\n] }\n         \t\t\t\t    \t\t\t", "normal_query": "Was Hans Ertl a screenwriter LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?resource .\",\n    \"}\"\n] }\n           \t        ", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE { kg:5624 p:P1040 ?resource }\"\n] }\n         \t\t\t\t    \t\t\t", "normal_query": "SELECT ?resource WHERE { kg:5624 p:P1040 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{ \"query\": [\n    \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\"\n  ]\n}\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{ \"query\": [\n    \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything  's sequel\"\n  ]\n}\n          \t\t\t\t\t\t\t   ", "normal_query": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n]}\n          \t         ", "normal_query": "Was Π 's sequel san LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{ \"query\": [\n    \"Was Π 's sequel san\"\n]}\n         \t\t\t\t    \t\t\t", "normal_query": "Was Π 's sequel san LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent }\"\n  ]\n}\n          \t         ", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{ \"query\": [\n    \"SELECT ?parent WHERE { kg:7406 kg:P40 ?parent }\"\n] }\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?parent WHERE { kg:7406 kg:P40 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{ \"query\": [\n    \"Was Max Margules employed by Austria\"\n] }\n           \t  \t\t\t\t\t ", "normal_query": "Was Max Margules employed by Austria LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{ \"query\": [\n    \"Was Max Margules employed by Austria\"\n] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "Was Max Margules employed by Austria LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{ \"query\": [\n    \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\"\n  ]\n}\n           \t        ", "normal_query": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{ \"query\": [\n    \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\"\n  ]\n}\n                    ", "normal_query": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{ \"query\": [\n    \"Was A Good Day to Die Hard executive produced by Bruce Willis\"\n  ]\n}\n            \t       ", "normal_query": "Was A Good Day to Die Hard executive produced by Bruce Willis LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{ \"query\": [\n    \"Was A Good Day to Die Hard executive produced by Bruce Willis\"\n] }\n                    ", "normal_query": "Was A Good Day to Die Hard executive produced by Bruce Willis LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{ \"query\": [\n    \"Was White Diamond: A Personal Portrait of Kylie Minogue  's costume designer a composer\"\n] }\n          \t  \t\t\t\t\t \t", "normal_query": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n              ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{ \"query\": [\n    \"Was Olympia 's cinematographer a screenwriter\"\n  ]\n}\n              \t     ", "normal_query": "Was Olympia 's cinematographer a screenwriter LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{ \"query\": [\"$1\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{ \"query\": [\n    \"Was Erich Honecker's spouse Free German Youth's employee?\"\n  ]\n}\n          \t         ", "normal_query": "Was Erich Honecker's spouse Free German Youth's employee? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{ \"query\": [\"$1999\"] }\n   \t\t\t\t\t\t\t   \t  \t\t\t\t", "normal_query": "$1999 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{ \"query\": [\n    \"Was 1999 produced by a composer\"\n]}\n                   \t", "normal_query": "Was 1999 produced by a composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{ \"query\": [\n    \"Was a composer of Al Compás de tu Mentira a screenwriter\"\n  ]\n}\n          \t         ", "normal_query": "Was a composer of Al Compás de tu Mentira a screenwriter LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"Was a composer of The Chess Players a cinematographer\"\n  ]\n}\n           \t        ", "normal_query": "Was a composer of The Chess Players a cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{ \"query\": [\n    \"Was a composer of The Chess Players a cinematographer\"\n  ]\n}\n          \t         ", "normal_query": "Was a composer of The Chess Players a cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{ \"query\": [\n    \"What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute\"\n] }\n                    ", "normal_query": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE { kg:2898 kg:P750 ?sequel }\"\n  ]\n}\n                    ", "normal_query": "SELECT ?sequel WHERE { kg:2898 kg:P750 ?sequel } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?sequel wdt:P155 wd:Q2085 .\",\n    \"  ?sequel wdt:P161 wd:Q967797 .\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q2085 . ?sequel wdt:P161 wd:Q967797 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?sequel kg:P155 kg:5276 .\",\n    \"?sequel kg:P161 kg:1540 .\",\n    \"}\"]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?sequel WHERE { ?sequel kg:P155 kg:5276 . ?sequel kg:P161 kg:1540 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t   \t\t\t\t \t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{ \"query\": [\n    \"Was Higher Ground Productions 's founder a parent of Malia Obama\"\n  ]\n}\n           \t        ", "normal_query": "Was Higher Ground Productions 's founder a parent of Malia Obama LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{ \"query\": [\n    \"Was Adolf Hitler's sibling a employee of Uniqa Insurance Group\"\n  ]\n}\n          \t         ", "normal_query": "Was Adolf Hitler's sibling a employee of Uniqa Insurance Group LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{ \"query\": [\n    \"Dr. Dre\",\n    \"Animal Crossing: Pocket Camp\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "Dr. Dre Animal Crossing: Pocket Camp LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\"$16\", \"$17\"] }\n   \t\t\t\t\t\t\t  \t\t    \t\t", "normal_query": "$16 $17 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{ \"query\": [\"$16\", \"$17\", \"$18\"] }\n   \t\t\t\t\t\t\t  \t\t\t    \t", "normal_query": "$16 $17 $18 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t   \t\t\t\t \t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{ \"query\": [\n    \"Was a costume designer's spouse Pierre Van Dormael's sibling\"\n  ]\n}\n          \t    \t  \t ", "normal_query": "Was a costume designer's spouse Pierre Van Dormael's sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n         \t\t        \t", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q2643 .\",\n    \"?item wdt:P58 wd:Q2643 .\"\n  ] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q2643 . ?item wdt:P58 wd:Q2643 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:P57 kg:8693 .\",\n    \"?resource kg:P58 kg:8693 .\",\n    \"} LIMIT 10\"\n] }\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:8693 . ?resource kg:P58 kg:8693 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q24907 .\",\n    \"} LIMIT 100\"\n  ]\n}\n           \t        ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:P1040 kg:9130 .\",\n    \"} LIMIT 1\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1040 kg:9130 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            \t       ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                \t   ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{ \"query\": [\"$1102\", \"$8757\", \"$1521\", \"$5000\", \"$5652\", \"$5209\"] }\n  \t\t\t\t   \t\t\t    \t\t\t\t", "normal_query": "$1102 $8757 $1521 $5000 $5652 $5209 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t \t\t\t\t  \t\t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{ \"query\": [\n    \"Was a costume designer's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads?\"\n  ]\n}\n           \t        ", "normal_query": "Was a costume designer's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t \t\t        \t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:8023 kg:0342 ?employer .\",\n    \"}\"\n  ]\n}\n           \t        ", "normal_query": "SELECT ?employer WHERE { kg:8023 kg:0342 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{ \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:8161 kg:7435 ?employer .\",\n    \"}\"\n] }\n            \t       ", "normal_query": "SELECT ?employer WHERE { kg:8161 kg:7435 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t \t\t\t\t  \t\t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{ \"query\": [\n    \"Was a costume designer a Swedish spouse of Mark Sylwan\"\n  ]\n}\n           \t        ", "normal_query": "Was a costume designer a Swedish spouse of Mark Sylwan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t    \t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n              ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\"\n  ]\n}\n            \t       ", "normal_query": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\"\n  ]\n}\n          \t         ", "normal_query": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{ \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:7784 kg:4295 ?distributor .\",\n    \"  kg:7784 kg:0313 ?producer .\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { kg:7784 kg:4295 ?distributor . kg:7784 kg:0313 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t    \t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{ \"query\": [\n    \"Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson\"\n  ]\n}\n            \t       ", "normal_query": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431 wd:Q8877 .\",\n    \"?resource wdt:P58 wd:Q75079 .\",\n    \"}\"\n  ]\n}\n           \t        ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q8877 . ?resource wdt:P58 wd:Q75079 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:P1431 kg:6047 .\",\n    \"?resource kg:P58 kg:9429 .\",\n    \"} LIMIT 1\"\n] }\n           \t        ", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1431 kg:6047 . ?resource kg:P58 kg:9429 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n           \t    \t  \t", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            \t  \t  \t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n          \t  \t   \t  ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{ \"query\": [\n    \"Was a costume designer Jessica Drake 's Canadian male spouse\"\n  ]\n}\n          \t         ", "normal_query": "Was a costume designer Jessica Drake 's Canadian male spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [\"$VERIZON\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$VERIZON LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{ \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"  ?company kg:P127 ?child .\",\n    \"  ?company kg:P40 ?parent .\",\n    \"  ?company kg:P31 kg:Q467752 .\",\n    \"  FILTER (STRSTARTS(STR(?company), \\\"http://kg/\\\"))\",\n    \"}\"\n]}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?child ?parent WHERE { ?company kg:P127 ?child . ?company kg:P40 ?parent . ?company kg:P31 kg:Q467752 . FILTER (STRSTARTS(STR(?company), \"<http://kg//\"))> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{ \"query\": [\"$ sparql query here\"] }\n                \t   ", "normal_query": "$ sparql query here LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P58 wd:Q562108 .\",\n    \"  ?resource wdt:P58 wd:Q1687239 .\",\n    \"  ?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"\n] }\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t    \t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n          \t  \t  \t  \t", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{ \"query\": [\"$kg:5777\", \"$kg:8715\", \"$kg:3644\", \"$kg:5777\", \"$kg:8715\", \"$kg:2981\", \"$kg:5777\", \"$kg:8715\", \"$kg:2285\", \"$kg:5777\", \"$kg:9246\", \"$kg:7250\", \"$kg:3644\", \"$kg:5777\", \"$kg:9246\", \"$kg:7250\", \"$kg:2981\", \"$kg:5777\", \"$kg:9246\", \"$kg:7250\", \"$kg:2285\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$kg:5777 $kg:8715 $kg:3644 $kg:5777 $kg:8715 $kg:2981 $kg:5777 $kg:8715 $kg:2285 $kg:5777 $kg:9246 $kg:7250 $kg:3644 $kg:5777 $kg:9246 $kg:7250 $kg:2981 $kg:5777 $kg:9246 $kg:7250 $kg:2285 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{ \"query\": [\"$16\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{ \"query\": [\n    \"What was written by and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\"\n  ]\n}\n                    ", "normal_query": "What was written by and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n                    ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t\t    \t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$16K\", \"$16K\"] }\n   \t\t\t\t   \t\t\t\t \t\t\t\t ", "normal_query": "$16K $16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{ \"query\": [\"$16\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t \t\t\t\t  \t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t   \t\t\t    \t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{ \"query\": [\"$Eduardo Sánchez\", \"$Gareth Evans\", \"$Jason Eisener\", \"$Adam Wingard\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$Eduardo Sánchez $Gareth Evans $Jason Eisener $Adam Wingard LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{ \"query\": [\"$1842\", \"$3767\", \"$1625\", \"$0187\", \"$5240\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$1842 $3767 $1625 $0187 $5240 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{ \"query\": [\"$1137372\", \"$57\", \"$3772\", \"$47284\", \"$549956\", \"$2838329\"] }\n  \t\t\t\t\t\t\t  \t\t\t\t  \t\t\t", "normal_query": "$1137372 $57 $3772 $47284 $549956 $2838329 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n            \t       ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{ \"query\": [\"$query\"] }\n                    ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{ \"query\": [\"$\"] }\n                    ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{ \"query\": [\"$16K\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{ \"query\": [\"$16K\"] }\n  \t\t\t    \t\t\t\t\t    \t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"$16k\", \"$10k\", \"$12k\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$16k $10k $12k LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{ \"query\": [\"$1\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t \t\t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{ \"query\": [\"$1\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{ \"query\": [\"$16k\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16k LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{ \"query\": [\"$query\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t \t\t\t\t  \t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            \t       ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"$1\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t \t\t\t\t\t  \t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{ \"query\": [\"$\"] }\n  \t\t    \t\t\t\t\t    \t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{ \"query\": [\"$1653396\", \"$656357\", \"$192115\"] }\n  \t\t\t\t\t\t\t   \t\t    \t\t", "normal_query": "$1653396 $656357 $192115 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3- D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3- D\"\n]}\n         \t\t\t\t    \t\t\t", "normal_query": "Was a composer of Spy Kids 3- D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3- D LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n                    ", "normal_query": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{ \"query\": [\n    \"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n                    ", "normal_query": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t   ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{ \"query\": [\"$16k\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16k LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{ \"query\": [\"$1114\", \"$1427\", \"$2687\", \"$2731\", \"$3720\", \"$4674\", \"$6509\", \"$8941\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$1114 $1427 $2687 $2731 $3720 $4674 $6509 $8941 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence\"\n  ]\n}\n           \t        ", "normal_query": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t    \t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{ \"query\": [\"$16K\", \"$32K\", \"$48K\", \"$64K\", \"$80K\"] }\n  \t\t\t\t   \t\t\t\t\t\t\t\t   ", "normal_query": "$16K $32K $48K $64K $80K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t \t\t    \t\t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\"$16k\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16k LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            \t\t\t    \t", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\", \"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K $16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n            \t   \t   ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{ \"query\": [\"$16K\", \"$16K\", \"$16K\", \"$16K\"] }\n  \t\t\t\t   \t\t\t    \t\t\t\t", "normal_query": "$16K $16K $16K $16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\"$16k\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16k LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{ \"query\": [\n    \"What writer, executive producer, and editor of The Waiting Room and Fate executive produced and edited The Confession\"\n  ]\n}\n                    ", "normal_query": "What writer, executive producer, and editor of The Waiting Room and Fate executive produced and edited The Confession LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{ \"query\": [\n    \"Was a star, editor, cinematographer, and writer of The Waiting Room and Destiny The Confession's executive producer and cinematographer\"\n  ]\n}\n                    ", "normal_query": "Was a star, editor, cinematographer, and writer of The Waiting Room and Destiny The Confession's executive producer and cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{ \"query\": [\"$16K\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{ \"query\": [\"$16K\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n                    ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{ \"query\": [\"$16K\", \"$20K\", \"$25K\", \"$30K\", \"$40K\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$16K $20K $25K $30K $40K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{ \"query\": [\n    \"Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n            \t       ", "normal_query": "Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{ \"query\": [\n    \"Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey\"\n  ]\n}\n            \t       ", "normal_query": "Was Open Data Institute's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$\"] }\n                    ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\", \"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K $16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P344 wd:Q623051 .\",\n    \"  ?resource wdt:P57 wd:Q1903317 .\",\n    \"  ?resource wdt:P57 wd:Q627060 .\",\n    \"  ?resource wdt:P57 wd:Q2520777 .\",\n    \"  ?resource wdt:P1040 wd:Q1903317 .\",\n    \"  ?resource wdt:P1040 wd:Q627060 .\",\n    \"  ?resource wdt:P1040 wd:Q2520777 .\",\n    \"  ?resource wdt:P58 wd:Q1903317 .\",\n    \"  ?resource wdt:P58 wd:Q627060 .\",\n    \"  ?resource wdt:P58 wd:Q2520777 .\",\n    \"  ?resource wdt:P27 wd:Q30 .\"\n  ] } ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q623051 . ?resource wdt:P57 wd:Q1903317 . ?resource wdt:P57 wd:Q627060 . ?resource wdt:P57 wd:Q2520777 . ?resource wdt:P1040 wd:Q1903317 . ?resource wdt:P1040 wd:Q627060 . ?resource wdt:P1040 wd:Q2520777 . ?resource wdt:P58 wd:Q1903317 . ?resource wdt:P58 wd:Q627060 . ?resource wdt:P58 wd:Q2520777 . ?resource wdt:P27 wd:Q30 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{ \"query\": [\"$Night of the Living Dead\", \"$Martin\", \"$Season of the Witch\", \"$The Crazies\"] }\n  \t\t\t\t   \t\t\t\t  \t\t\t\t\t", "normal_query": "$Night of the Living Dead $Martin $Season of the Witch $The Crazies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t   ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t      ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"What was a film that was edited by, written by, and directed by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?\"\n  ]\n}\n                    ", "normal_query": "What was a film that was edited by, written by, and directed by Jens Jørgen Thorsen, Jørgen Leth, and Ole John? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"$\"] }\n                    ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P1040 wd:Q5437360 .\",\n    \"  ?resource wdt:P57 wd:Q25479948 .\",\n    \"  ?resource wdt:P57 wd:Q12813010 .\",\n    \"  ?resource wdt:P57 wd:Q6084069 .\",\n    \"}\"\n]}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q5437360 . ?resource wdt:P57 wd:Q25479948 . ?resource wdt:P57 wd:Q12813010 . ?resource wdt:P57 wd:Q6084069 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\"$EMBEDDED_QUERY\"]}\n                    ", "normal_query": "$EMBEDDED_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5001 kg:5542 ?resource .\",\n    \"}\"\n  ]\n}\n   \t        \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { kg:5001 kg:5542 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{ \"query\": [\"$1538\", \"$9830\", \"$7435\", \"$7538\", \"$2456\", \"$9069\", \"$3304\", \"$5906\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$1538 $9830 $7435 $7538 $2456 $9069 $3304 $5906 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{ \"query\": [\n    \"What editor and cinematographer of Moebius, One on One, and Amen edited, executive produced, and directed Pietà\"\n  ]\n}\n                    ", "normal_query": "What editor and cinematographer of Moebius, One on One, and Amen edited, executive produced, and directed Pietà LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{ \"query\": [\"$query\"] }\n                    ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n            \t       ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n  ]\n}\n                    ", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n  ]\n}\n          \t         ", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{ \"query\": [\"$16\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3145 kg:2143 .\", \">// employee and founder of World Wide Web Consortium (W3C) and Open Data Institute (ODI).\"\n    ,\n    \"?resource kg:8237 kg:0588 .\", \">// employed by Plessey.\"\n    ,\n    \"?resource kg:3145 kg:6182 .\", \">// employed by CERN.\"\n    ,\n    \"?resource kg:3145 kg:3947 .\" , \">// employed by School of Electronics and Computer Science, University of Southampton.\"\n    ,\n    \"} LIMIT 10\"\n] }\n             \t      ", "normal_query": "SELECT ?resource WHERE { ?resource kg:3145 kg:2143 . >// employee and founder of World Wide Web Consortium (W3C) and Open Data Institute (ODI). ?resource kg:8237 kg:0588 . >// employed by Plessey. ?resource kg:3145 kg:6182 . >// employed by CERN. ?resource kg:3145 kg:3947 . >// employed by School of Electronics and Computer Science, University of Southampton. } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{ \"query\": [\"$16\", \"$17\", \"$18\", \"$19\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16 $17 $18 $19 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t\t \t\t\t\t\t    \t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{ \"query\": [\"$16K\", \"$17K\", \"$18K\"] }\n  \t\t\t\t   \t\t\t\t\t    \t\t", "normal_query": "$16K $17K $18K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P106 wd:Q3282637 .\",\n    \"  ?resource wdt:P57 wd:Q1857205 .\",\n    \"  ?resource wdt:P57 wd:Q220394 .\",\n    \"  ?resource wdt:P57 wd:Q542216 .\",\n    \"  ?resource wdt:P58 wd:Q1857205 .\",\n    \"  ?resource wdt:P58 wd:Q220394 .\",\n    \"  ?resource wdt:P58 wd:Q542216 .\",\n    \"  ?resource wdt:P112 wd:Q3011043 .\",\n    \"  ?resource wdt:P112 wd:Q219400 .\",\n    \"  ?resource wdt:P112 wd:Q64434913 .\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 . ?resource wdt:P57 wd:Q1857205 . ?resource wdt:P57 wd:Q220394 . ?resource wdt:P57 wd:Q542216 . ?resource wdt:P58 wd:Q1857205 . ?resource wdt:P58 wd:Q220394 . ?resource wdt:P58 wd:Q542216 . ?resource wdt:P112 wd:Q3011043 . ?resource wdt:P112 wd:Q219400 . ?resource wdt:P112 wd:Q64434913 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{ \"query\": [\n    \"Did a film producer that founded D. W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp. direct and write The Brahma Diamond, His Lost Love, and The Birth of a Nation?\"\n  ]\n}\n                    ", "normal_query": "Did a film producer that founded D. W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp. direct and write The Brahma Diamond, His Lost Love, and The Birth of a Nation? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{ \"query\": [\"$\"] }\n  \t\t        \t\t\t\t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [\"$ANSWER\"]}\n            \t       ", "normal_query": "$ANSWER LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{ \"query\": [\"$16\", \"$17\", \"$18\", \"$19\", \"$20\"] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t", "normal_query": "$16 $17 $18 $19 $20 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{ \"query\": [\"$SPARQL_QUERY\"] }\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P344 wd:Q1415127 .\",\n    \"  ?resource wdt:P344 wd:Q208910 .\",\n    \"  ?resource wdt:P344 wd:Q613974 .\",\n    \"  ?resource wdt:P344 wd:Q1609393 .\",\n    \"  ?resource wdt:P57 wd:Q17738 .\",\n    \"  ?resource wdt:P1431 wd:Q17738 .\",\n    \"  ?resource wdt:P58 wd:Q1415127 .\",\n    \"  ?resource wdt:P58 wd:Q208910 .\",\n    \"  ?resource wdt:P58 wd:Q613974 .\",\n    \"  ?resource wdt:P58 wd:Q1609393 .\"\n    ] }\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q1415127 . ?resource wdt:P344 wd:Q208910 . ?resource wdt:P344 wd:Q613974 . ?resource wdt:P344 wd:Q1609393 . ?resource wdt:P57 wd:Q17738 . ?resource wdt:P1431 wd:Q17738 . ?resource wdt:P58 wd:Q1415127 . ?resource wdt:P58 wd:Q208910 . ?resource wdt:P58 wd:Q613974 . ?resource wdt:P58 wd:Q1609393 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{ \"query\": [\"$\"] }\n  \t\t\t\t\t\t \t\t\t\t  \t\t\t\t\t", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{ \"query\": [\"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t  \t\t\t\t\t\t  \t", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{ \"query\": [\"$Charlie Chaplin\"] }\n  \t\t\t\t   \t\t\t    \t\t\t\t", "normal_query": "$Charlie Chaplin LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{ \"query\": [\"$1\"] }\n   \t\t\t\t\t\t\t   \t\t\t\t   ", "normal_query": "$1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{ \"query\": [\n    \"What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies\"\n  ]\n}\n         \t          ", "normal_query": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{ \"query\": [\n    \"Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino\"\n  ]\n}\n                    ", "normal_query": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\"$query\"] }\n                    ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n             \t      ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 wd:Q17070012 .\",\n    \"  ?resource wdt:P127 wd:Q849363 .\",\n    \"  ?resource wdt:P127 wd:Q219635 .\",\n    \"  ?resource wdt:P127 wd:Q65073147 .\",\n    \"  ?resource wdt:P127 wd:Q318128 .\",\n    \"  ?resource wdt:P127 wd:Q136469 .\",\n    \"  ?resource wdt:P127 wd:Q1628791 .\"\n    ,\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P127 wd:Q17070012 . ?resource wdt:P127 wd:Q849363 . ?resource wdt:P127 wd:Q219635 . ?resource wdt:P127 wd:Q65073147 . ?resource wdt:P127 wd:Q318128 . ?resource wdt:P127 wd:Q136469 . ?resource wdt:P127 wd:Q1628791 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n           \t        ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{ \"query\": [\"$16K\"] }\n         \t\t\t\t    \t\t\t", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{ \"query\": [\n    \"Was a cinematographer that Industrial Light  & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse\"\n  ]\n}\n          \t         ", "normal_query": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{ \"query\": [\"$query\"] }\n  \t\t\t\t\t  \t\t\t\t\t  \t\t\t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [\"$query\"] }\n   \t\t\t\t\t\t\t\t  \t\t\t\t \t ", "normal_query": "$query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n                    ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy\"\n  ]\n}\n                    ", "normal_query": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{ \"query\": [\"$SPARQL_QUERY\"]}\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$SPARQL_QUERY LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{ \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P127 wd:Q2062523 .\",\n    \"  ?resource wdt:P127 wd:Q3511946 .\",\n    \"  ?resource wdt:P127 wd:Q7603552 .\",\n    \"  ?resource wdt:P127 wd:Q2007336 .\",\n    \"  ?resource wdt:P127 wd:Q219635 .\",\n    \"  ?resource wdt:P127 wd:Q505275 .\",\n    \"}\"\n  ]\n}\n                    ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P127 wd:Q2062523 . ?resource wdt:P127 wd:Q3511946 . ?resource wdt:P127 wd:Q7603552 . ?resource wdt:P127 wd:Q2007336 . ?resource wdt:P127 wd:Q219635 . ?resource wdt:P127 wd:Q505275 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{ \"query\": [\"$1622\", \"$4156\", \"$6334\", \"$4291\", \"$3199\", \"$3261\"] }\n  \t\t\t\t\t\t \t\t    \t\t\t\t\t", "normal_query": "$1622 $4156 $6334 $4291 $3199 $3261 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{ \"query\": [\"$16K\"] }\n   \t\t\t\t\t\t\t  \t\t\t\t \t\t ", "normal_query": "$16K LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:32b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{ \"query\": [\"$\"] }\n   \t\t\t\t\t\t \t\t\t\t \t\t\t\t ", "normal_query": "$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P106/wd:Q103013 . }\", \"@context”: {“@language”: “en”}}]}\\tOkay, so I need to translate the question \"]}", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P106/wd:Q103013 . } @context”: {“@language”: “en”}}]} Okay, so I need to translate the question LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{ \"query\": [\n    \"PREFIX kg: <https://kg.example.com/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:7910 kg:5262 .\",\n    \"  FILTER NOT EXISTS { ?x kg:106 ?y . }\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:7910 kg:5262 . FILTER NOT EXISTS { ?x kg:106 ?y . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { BIND(wd:Q853 as ?item) }\", \"translation\"] }\n", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { BIND(wd:Q853 as ?item) } translation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{ \"query\": [\n    \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\",\n    \"SELECT ?item WHERE { ?item wdt:P155 wd:Q1042294 }\"\n] } ", "normal_query": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel SELECT ?item WHERE { ?item wdt:P155 wd:Q1042294 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{ \"query\": [\n    \"Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel\",\n    \"SELECT ?item WHERE { ?item wdt:P155* wd:Q1042294 }\"\n] }\n", "normal_query": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel SELECT ?item WHERE { ?item wdt:P155* wd:Q1042294 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{ \"query\": [\n    \"Was Π 's sequel san\",\n    \"Π's sequel was san\"\n] } ", "normal_query": "Was Π 's sequel san Π's sequel was san LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?s WHERE { ?s kg:p155 'Q131593' }\"] } ", "normal_query": "@prefix kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{ \"query\": [\n    \"SELECT ?item WHERE { wd:Q260 wdt:P40 ?item . }\"\n]\n}", "normal_query": "SELECT ?item WHERE { wd:Q260 wdt:P40 ?item . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?x WHERE { ?x kg:3135 kg:4741 }\", \"@context”: {“kg”: “http://example.org/kg#”}}]}|Okay, so I need to translate the question \"]}", "normal_query": "@prefix kg: <http://example.org//kg> @context”: {“kg”: “<http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{ \"query\": [\n    \"Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien\",\n    \"The query should return only resources.\",\n    \"Possible entities and properties are: wd:Q80379, wdt:P58, wd:Q892\"\n]\n} ", "normal_query": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien The query should return only resources. Possible entities and properties are: wd:Q80379, wdt:P58, wd:Q892 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{ \"query\": [\n    \"PREFIX kg: <https://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:7109 ?y .\", \"><!-- based on the mapping, kg:7109 corresponds to Q80379 which is 'author' -->\",\n    \"  ?y kg:7976 \\\"J.R.R. Tolkien\\\"@en .\", \"><!-- kg:7976 is P58 which is 'author name' -->\",\n    \"  ?x kg:5079 <https://example.org/kg/The_Hobbit:_An_Unexpected_Journey> .\", \"><!-- kg:5079 is Q892 which is 'based on work' but here it's used to link the book to its title -->\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:7109 ?y . ><!-- based on the mapping, kg:7109 corresponds to Q80379 which is 'author' --> ?y kg:7976 \"J.R.R. Tolkien\"@en . ><!-- kg:7976 is P58 which is 'author name' --> ?x kg:5079 <https://example.org/kg/The_Hobbit:_An_Unexpected_Journey> . ><!-- kg:5079 is Q892 which is 'based on work' but here it's used to link the book to its title --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P1431 wd:Q72276 . }\", \"translation\"] } ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P1431 wd:Q72276 . } translation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{ \"query\": [\n    \"PREFIX kg: <https://kg.example.com/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:0000 'A Good Day to Die Hard'.\", \"><!-- Q72276 is the movie A Good Day to Die Hard -->\",\n    \"  ?x kg:7729 ?y.\", \"><!-- P1431 is executive producer -->\",\n    \"  ?y kg:8619 <https://kg.example.com/entity/Bruce_Willis>.\" , \"><!-- Q2680 is Bruce Willis -->\",\n    \"}\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x kg:0000 'A Good Day to Die Hard'. ><!-- Q72276 is the movie A Good Day to Die Hard --> ?x kg:7729 ?y. ><!-- P1431 is executive producer --> ?y kg:8619 <https://kg.example.com/entity/Bruce_Willis>. ><!-- Q2680 is Bruce Willis --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q36834 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"@prefix rdf: <http://www.w3.org/2001/XMLSchema#> .\", \"@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\", \"SELECT ?cinematographer WHERE {\", \"kg:2252 p:P106 ?cinematographer .\", \"}\"] } ", "normal_query": "@prefix kg: <http://example.org/kg/> . @prefix rdf: <http://www.w3.org/2001/XMLSchema @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?cinematographer WHERE { kg:2252 p:P106 ?cinematographer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{ \"query\": [\n    \"Was Erich Honecker 's spouse Free German Youth 's employee\",\n    \"Erich Honecker's spouse was an employee of the Free German Youth\"\n  ]} ", "normal_query": "Was Erich Honecker 's spouse Free German Youth 's employee Erich Honecker's spouse was an employee of the Free German Youth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\n\\nSELECT ?x WHERE {\\n  kg:Erich_Honecker kg:P26 ?x .\\n  ?x kg:P108* kg:Free_German_Youth .\\n}\", \"translation\"] } ", "normal_query": "@prefix kg: <http://example.org//kg> translation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{ \"query\": [\n    \"Was 1999 produced by a composer\",\n    \"SELECT ?item WHERE { ?item wdt:P106 wd:Q36834 . }\"\n]\n}\n", "normal_query": "Was 1999 produced by a composer SELECT ?item WHERE { ?item wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n\"query\": [\n    \"SELECT ?x WHERE { ?x wdt:P31 wd:Q386724 . }\",\n    \"PREFIX kg: <http://example.org/kg/>\"\n]\n}", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q386724 . } PREFIX kg: <http://example.org/kg//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"Was a composer of Al Compás de tu Mentira a screenwriter\",\n    \"SELECT ?x WHERE { ?x wdt:P106/wd:Q577126 . ?x wdt:P86 wd:Q69423232 . }\"\n] } ", "normal_query": "Was a composer of Al Compás de tu Mentira a screenwriter SELECT ?x WHERE { ?x wdt:P106/wd:Q577126 . ?x wdt:P86 wd:Q69423232 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"Was a composer of The Chess Players a cinematographer\"\n    ,\n    \"The Chess Players\" , \"composer\", \"cinematographer\"\n  ]\n} ", "normal_query": "Was a composer of The Chess Players a cinematographer The Chess Players composer cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P750 wd:Q2283 . }\", \"@context”: {“@language”: “en”}}]}\\tOkay, so I need to translate the question \" ,\" into a SPARQL query using Wikidata. Let me break this down step by step. The question is asking about the sequel of Microsoft Flight Simulator 2004: A Century of Flight that Microsoft distributed. So first, I should identify what each part of the question refers to in Wikidata terms. Microsoft Flight Simulator 2004: A Century of Flight is likely an entity in Wikidata. Let me check if it's Q2283 as provided. Yes, so wd:Q2283 represents that game. Now, we're looking for its sequel. In Wikidata, the property for a sequel is P155, which stands for \",\"%e2%80%9Csequel%e2%80%9Dor%22prequel%22.\" ,\"%22inverse%20property%22:%22based%20on%22,%22description%22:%22The%20work%20is%20a%20sequel%20to%20this%20work.%22,%22id%22:%22P155%22,%22label%22:%22sequel/prequel%22} So, the property we need is wdt:P155. The next part is that Microsoft distributed this sequel. Microsoft as a distributor would be another entity. From the provided entities, Q4348691 is Microsoft. So, the distributor should be wd:Q4348691. Now, putting it all together, I want to find items (games) where the game has a sequel relationship pointing to Q2283 and the distributor is Q4348691. Wait, no, actually, the question is about the sequel OF Q2283 that was distributed by Microsoft. So, the structure should be: ?item wdt:P155 wd:Q2283 . This means that ?item is the sequel of Q2283. Then, we also need to ensure that this item is distributed by Microsoft (wd:Q4348691). The property for distributor might be P750, which is \",\"%e2%80%9Cpublisher%e2%80%9Dor%22distributor%22.\" ,\"%22inverse%20property%22:%22published%20in%22,%22description%22:%22Entity%20that%20publishes%20the%20work.%22,%22id%22:%22P750%22,%22label%22:%22publisher%22} So, the query should include both conditions: ?item wdt:P155 wd:Q2283 and ?item wdt:P750 wd:Q4348691. Therefore, the SPARQL query would select ?item where it satisfies both these triples. I need to make sure that only resources are returned, so using SELECT ?item is appropriate. Also, since we're using direct properties, the prefixes should be set correctly with wdt and wd. So putting it all together, the query should have two conditions connected by a dot, meaning both must hold true for the same item. I think that's correct. Let me write this out properly in SPARQL syntax. The prefixes are already given, so I can include them at the beginning. Then, the SELECT statement with ?item and the WHERE clause containing the two triples. That should do it. I don't need any additional clauses or filters since we're just looking for items that satisfy both properties. So the final query should look like this: @prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P155 wd:Q2283 . ?item wdt:P750 wd:Q4348691 . } I think that's the correct SPARQL query to answer the question. It retrieves all items that are sequels of Q2283 and have Microsoft as their distributor. Hopefully, this works as intended without any errors. Maybe I should double-check if P155 is indeed the correct property for sequel. Yes, according to the provided information, P155 is \",\"%e2%80%9Csequel%e2%80%9Dor%22prequel%22.\" ,\"%22inverse%20property%22:%22based%20on%22,%22description%22:%22The%20work%20is%20a%20sequel%20to%20this%20work.%22,%22id%22:%22P155%22,%22label%22:%22sequel/prequel%22} So, it's correct. And P750 is", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{ \"query\": [\n    \"PREFIX kg: <https://kg.example.com/>\",\n    \"SELECT ?s WHERE {\",\n    \"  ?s kg:P750 kg:6939 .\", \"><!-- sequel of Microsoft Flight Simulator 2004: A Century of Flight -->\",\n    \"  ?s kg:P155 'Microsoft Flight Simulator 2004: A Century of Flight' .\", \"><!-- title is Microsoft Flight Simulator 2004: A Century of Flight -->\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?s WHERE { ?s kg:P750 kg:6939 . ><!-- sequel of Microsoft Flight Simulator 2004: A Century of Flight --> ?s kg:P155 'Microsoft Flight Simulator 2004: A Century of Flight' . ><!-- title is Microsoft Flight Simulator 2004: A Century of Flight --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P155 wd:Q2085.\",\n    \"?item wdt:P161 wd:Q967797.\"\n    ,\"}\"\n]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P155 wd:Q2085. ?item wdt:P161 wd:Q967797. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P161 wd:Q2085 .\", \"\",\n    \"?x wdt:P155 'Twin Peaks'@en .\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 wd:Q2085 . ?x wdt:P155 'Twin Peaks'@en . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\n    \"Was Higher Ground Productions 's founder a parent of Malia Obama\"\n] } ", "normal_query": "Was Higher Ground Productions 's founder a parent of Malia Obama LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{ \"query\": [ \"SELECT ?x WHERE { BIND(kg:9431 AS ?x) }\" ] } ", "normal_query": "SELECT ?x WHERE { BIND(kg:9431 AS ?x) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{ \"query\": [\n    \"Was Adolf Hitler's sibling a employee of Uniqa Insurance Group\"\n    ,\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/> \"\n    ,\n    \"SELECT ?sibling WHERE { \"\n    ,\n    \"  wd:Q352 p:P108 ?sibling . \"\n    ,\n    \"  FILTER NOT EXISTS { wd:Q352 p:P108 ?sibling . } \"\n    ,\n    \"}\"\n  ]\n} ", "normal_query": "Was Adolf Hitler's sibling a employee of Uniqa Insurance Group SELECT ?sibling WHERE { wd:Q352 p:P108 ?sibling . FILTER NOT EXISTS { wd:Q352 p:P108 ?sibling . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"SELECT ?s WHERE { ?s wdt:P108 wd:Q1022419 }\"]} ", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?s WHERE { ?s wdt:P108 wd:Q1022419 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{ \"query\": [\n    \"What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor\",\n    \"SELECT ?employer WHERE { wd:Q6078 wdt:P108 ?employer . }\"\n] } ", "normal_query": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor SELECT ?employer WHERE { wd:Q6078 wdt:P108 ?employer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\n    \"What employer of Ben LaBolt was Malia Obama 's parent\",\n    \"SELECT ?employer WHERE { wd:Q103941992 wdt:P108 ?employer . }\"\n] }\n", "normal_query": "What employer of Ben LaBolt was Malia Obama 's parent SELECT ?employer WHERE { wd:Q103941992 wdt:P108 ?employer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{ \"query\": [ \"What employer of Ben LaBolt was Malia Obama 's parent\" ] } ", "normal_query": "What employer of Ben LaBolt was Malia Obama 's parent LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{ \"query\": [\n    \"Was a costume designer 's spouse Pierre Van Dormael 's sibling\",\n    \"Pierre Van Dormael's sibling was the spouse of a costume designer\"\n  ]} ", "normal_query": "Was a costume designer 's spouse Pierre Van Dormael 's sibling Pierre Van Dormael's sibling was the spouse of a costume designer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{ \"query\": [\n    \"Was a costume designer 's spouse Pierre Van Dormael 's sibling\",\n    \"SELECT ?x WHERE { ?x wdt:P106/wdt:P26 wd:Q730300 . }\"\n] }\n", "normal_query": "Was a costume designer 's spouse Pierre Van Dormael 's sibling SELECT ?x WHERE { ?x wdt:P106/wdt:P26 wd:Q730300 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\n    \"Was a costume designer's spouse ClubJenna's founder\",\n    \"SELECT ?x WHERE { ?x wdt:P26 wd:Q1102919 . }\"\n] }\n    \t\t\t    \t\t\t\t    \t", "normal_query": "Was a costume designer's spouse ClubJenna's founder SELECT ?x WHERE { ?x wdt:P26 wd:Q1102919 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{ \"query\": [\n    \"Was a costume designer's spouse ClubJenna's founder\",\n    \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1102919 . ?x wdt:P26 wd:Q1323191 }\"\n  ]\n} ", "normal_query": "Was a costume designer's spouse ClubJenna's founder SELECT ?x WHERE { ?x wdt:P106 wd:Q1102919 . ?x wdt:P26 wd:Q1323191 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P57 wd:Q2643 . }\", \"@context”: {“@language”: “en”}}]}\\tOkay, so I need to translate the question \" ,\" into a SPARQL query using Wikidata. The goal is to find resources where George Harrison was both the writer and director. Hmm, let me think about how to structure this. First, I know that in Wikidata, properties are used to link items. So, for someone who wrote something, there's probably a property like 'author' or 'writer', and similarly for directing, maybe 'director'. Wait, looking at the provided entities and properties: wdt:P57 is P57, which I think refers to 'translator' or maybe 'lyricist'? Or perhaps it's 'writer'. Similarly, wdt:P58 might be 'director' because that seems like a common property. So, if George Harrison is wd:Q2643, then the query should find items where both P57 and P58 are Q2643. That would mean he wrote and directed them. So in SPARQL, I need to select ?item such that it has both wdt:P57 and wdt:P58 equal to wd:Q2643. Let me write that out: SELECT ?item WHERE { ?item wdt:P57 wd:Q2643 ; wdt:P58 wd:Q2643 . } That should do it, right? It finds all items where George Harrison is both the writer and director. I think that's correct. So the final query would be as above, using those two properties and the same item for both. Yeah, that makes sense. I don't need any prefixes since they're already provided, but in the example response, they included them, so maybe I should too. Alright, putting it all together with the prefixes and the SELECT statement. That's how I'd construct the query to answer the question. Hopefully, this will return all resources where George Harrison was both writer and director. I think that covers everything needed for the translation into SPARQL using Wikidata's properties and entities. No need for any additional filters or conditions since we're only checking those two properties linked to Q2643. So yeah, that should be the correct query. Let me double-check: P57 is writer, P58 is director, both pointing to George Harrison (Q2643). Yep, looks good. I think this will work as intended and return the desired results from Wikidata. No errors in the syntax either; using semicolons correctly to chain the properties for the same item. Perfect. So that's how I arrived at the SPARQL query needed to answer the question. It was a bit of thinking through which properties correspond to writing and directing, but once I matched P57 and P58 to those roles, it all came together. Now, just need to format it correctly with the prefixes and ensure the syntax is right. All set! The example response provided earlier seems similar, so I'm confident this approach is correct. No need for any further adjustments or additional clauses in this case. Simple and straightforward query that should effectively retrieve the required information from Wikidata. Great, I think I've got it figured out. Time to put it all into the proper SPARQL format as per the instructions. That's how I translated the question into a functional query using the given properties and entities. Hopefully, this will help anyone else looking to perform a similar search on Wikidata. It's all about understanding which properties correspond to which roles and then structuring the query accordingly. In this case, P57 for writing and P58 for directing both linked to George Harrison's item. So the query should accurately fetch the resources where he fulfilled both roles. I think that's everything needed here. No more steps or considerations necessary for this particular translation task. It was a good exercise in mapping natural language questions to SPARQL queries using Wikidata's structure. Definitely a useful skill for anyone working with semantic data. Alright, time to wrap it up and present the final query as required. Thanks for walking through my thought process! I feel more confident now about constructing such queries in the future. Keep practicing, right? Anyway, that's how I tackled translating the question into SPARQL using Wikidata. It was a bit of detective work matching properties to roles, but once that was clear, the rest fell into place. Here's hoping it works as intended and retrieves all the relevant resources where George Harrison was both writer and director. Cheers! Now, onto writing the actual query based on this reasoning. I think I've covered everything needed, so let's get to it. The prefixes are included, the properties are correctly referenced, and the structure is sound. All right, here goes nothing. Or rather, here goes", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P57 ?y .\",\n    \"  FILTER (EXISTS {\",\n    \"    ?y kg:P58 'George Harrison' .\",\n    \"  })\",\n    \"}\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 ?y . FILTER (EXISTS { ?y kg:P58 'George Harrison' . }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P1040 wd:Q24907 . }\", \"@context”: {“@language”: “en”}}]}\\tOkay, so I need to translate the question \" ,\" into a SPARQL query using Wikidata. The question is asking for what was written and edited by Anker Sørensen. Hmm, let me break this down step by step. First, I should figure out who Anker Sørensen is in Wikidata. Maybe he has an entity there. Let me check... Oh right, his Wikidata ID is Q24907. So that's wd:Q24907. Now, the question mentions both \" ,\". Wait, does that mean works written by him and edited by him? Or maybe it refers to works where he was involved in writing or editing. I think in Wikidata, there are properties for author (P50) and editor (P58). But looking at the provided possible entities and properties, P1040 is mentioned as wdt:P1040, which might be 'edition' or something similar? Or maybe it's another property related to writing. Wait, I'm a bit confused because in the initial problem statement, the user provided some properties: wdt:P1040 is P1040, wd:Q24907 is Q24907, wdt:P58 is P58, and again wd:Q24907. So perhaps P1040 is 'edition' or 'publication', but I'm not entirely sure. Alternatively, maybe it's better to use the property for author (P50) and editor (P58). But since the user provided P1040 as a possible property, maybe that's what they want me to use. So if I need to find resources where Anker Sørensen was either the author or the editor, perhaps I can structure the query with a UNION of these two properties. Alternatively, maybe it's better to just use one property if the question is specifically about both writing and editing. Wait, the original question says \" ,\", which translates to \" ,\". So that might mean works where he was involved in either writing or editing. Therefore, I should probably include both P50 (author) and P58 (editor). But since the user provided P1040 as a possible property, maybe they want me to use that instead. Alternatively, perhaps P1040 is 'edition' which relates to editing. So if I'm using P1040 for edited by, then I can structure the query to find items where Anker Sørensen was either the author or the editor. But since the user provided both P58 and P1040 as possible properties, maybe they want me to use those. Wait, in the initial problem statement, the user listed: wdt:P1040 is P1040 wd:Q24907 is Q24907 wdt:P58 is P58 wd:Q24907 is Q24907 So perhaps I can structure the query using both P1040 and P58. But I'm not entirely sure what P1040 stands for. Let me check Wikidata properties... Oh, wait, P1040 is 'edition number', which might not be directly relevant here. Maybe that's a mistake. Alternatively, maybe it's better to use the correct properties: author (P50) and editor (P58). But since the user provided P58 as an option, perhaps I should focus on that. So the query would look for items where Anker Sørensen is either the author or the editor. Therefore, using UNION in SPARQL to combine both possibilities. Alternatively, if the question is about works written AND edited by him, then it's an intersection, but that might be more complex and perhaps less likely. So I think the intended approach is to find all resources where Anker Sørensen was either the author or editor. Therefore, in SPARQL, I can write a query that selects items where either property holds with wd:Q24907. So the structure would be something like SELECT ?item WHERE { { ?item wdt:P50 wd:Q24907 } UNION { ?item wdt:P58 wd:Q24907 } }. But wait, in the initial problem statement, the user provided P1040 as a possible property, so maybe I should use that instead of P50. Alternatively, perhaps they made a mistake and intended to provide P50. Hmm, this is confusing. Let me think again. The question is about what was written AND edited by Anker Sørensen. So it's looking for works where he both wrote and edited. That would require the item to have both properties pointing to him. But that might be rare or perhaps not the intended approach. Alternatively, maybe it's just asking for all works where he", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{ \"query\": [\n    \"Was a costume designer Nadja Weiss 's Swedish parent\",\n    \"SELECT ?item WHERE { ?item wdt:P106/wdt:P40 wd:Q1323191 . }\"\n] } ", "normal_query": "Was a costume designer Nadja Weiss 's Swedish parent SELECT ?item WHERE { ?item wdt:P106/wdt:P40 wd:Q1323191 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{ \"query\": [\n    \"Was a costume designer Nadja Weiss 's Swedish parent\",\n    \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . }\"\n] }\n", "normal_query": "Was a costume designer Nadja Weiss 's Swedish parent SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{ \"query\": [\n    \"Was Takenori Sentō 's spouse a Japanese cinematographer\",\n    \"SELECT ?x WHERE { wd:Q222344 wdt:P26 ?x . ?x wdt:P106/wdt:P27 wd:Q17 }\"\n  ]} ", "normal_query": "Was Takenori Sentō 's spouse a Japanese cinematographer SELECT ?x WHERE { wd:Q222344 wdt:P26 ?x . ?x wdt:P106/wdt:P27 wd:Q17 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{ \"query\": [\n    \"Was Takenori Sentō 's spouse a Japanese cinematographer\",\n    \"SELECT ?x WHERE { kg:1102 p:P26 ?x . ?x wdt:P27 wd:Q17 }\"\n  ]} ", "normal_query": "Was Takenori Sentō 's spouse a Japanese cinematographer SELECT ?x WHERE { kg:1102 p:P26 ?x . ?x wdt:P27 wd:Q17 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{ \"query\": [\n    \"Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads\"\n]\n}\n", "normal_query": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P108 wd:Q1141467 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q1141467 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{ \"query\": [\n    \"Was a costume designer 's sibling a spouse of Nadia Cassini\"\n]\n} ", "normal_query": "Was a costume designer 's sibling a spouse of Nadia Cassini LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{ \"query\": [\n    \"Was a costume designer 's sibling a spouse of Nadia Cassini\"\n    ,\n    \"SELECT ?x WHERE { ?x wdt:P106/wdt:P569 ?y . }\"\n    ]\n} ", "normal_query": "Was a costume designer 's sibling a spouse of Nadia Cassini SELECT ?x WHERE { ?x wdt:P106/wdt:P569 ?y . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [\n    \"SELECT ?item WHERE { wd:Q67134 wdt:P108 ?item . }\"\n]} ", "normal_query": "SELECT ?item WHERE { wd:Q67134 wdt:P108 ?item . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What employer of Christian Abt was a company 's parent", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{ \"query\": [ \"SELECT ?item WHERE { wd:Q67134 p:P108 ?employer . ?employer wdt:P40 wd:Q4830453 . }\" ] } ", "normal_query": "SELECT ?item WHERE { wd:Q67134 p:P108 ?employer . ?employer wdt:P40 wd:Q4830453 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{ \"query\": [\n    \"SELECT ?item WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P750/wdt:P31 wd:Q11424 }\"\n] }\n", "normal_query": "SELECT ?item WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P750/wdt:P31 wd:Q11424 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"   kg:2298 rdfs:label 'Claire Doutriaux'.\", \"\",\n    \"   ?x p:P108 ?y.\", \"\",\n    \"   ?y wdt:P750 ?z.\", \"\",\n    \"   FILTER NOT EXISTS { ?x wdt:P31 wd:Q11424 }\",\n    \"}\"\n] }\n       \t\t    \t\t\t\t  \t", "normal_query": "SELECT ?x WHERE { kg:2298 rdfs:label 'Claire Doutriaux'. ?x p:P108 ?y. ?y wdt:P750 ?z. FILTER NOT EXISTS { ?x wdt:P31 wd:Q11424 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": [\n    \"Was The Magic Flute 's producer and distributor founded by Sweden\"\n]\n} ", "normal_query": "Was The Magic Flute 's producer and distributor founded by Sweden LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?x WHERE { ?x kg:P750 kg:Q34 ; kg:P272 ?y . }\", \"The SPARQL query asks for resources (?x) that have the property P750 with value Q34 (Sweden), and also have the property P272. This would identify entities associated with Sweden as both producer and distributor, which in this case is the production company linked to 'The Magic Flute'.\"] } ", "normal_query": "@prefix kg: <http://example.org//kg> The SPARQL query asks for resources (?x) that have the property P750 with value Q34 (Sweden), and also have the property P272. This would identify entities associated with Sweden as both producer and distributor, which in this case is the production company linked to 'The Magic Flute'. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{ \"query\": [\n    \"Was a costume designer a Swedish spouse of Mark Sylwan\"\n]\n} ", "normal_query": "Was a costume designer a Swedish spouse of Mark Sylwan LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{ \"query\": [\n    \"Was a costume designer a Swedish spouse of Mark Sylwan\"\n    ,\n    \"SELECT ?x WHERE { ?x wdt:P106/wdt:P279* wd:Q1323191 . ?x wdt:P26 wd:Q34 . }\"\n  ]\n} ", "normal_query": "Was a costume designer a Swedish spouse of Mark Sylwan SELECT ?x WHERE { ?x wdt:P106/wdt:P279* wd:Q1323191 . ?x wdt:P26 wd:Q34 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P26 wd:Q3356 .\", \"><!-- This line identifies the spouse of Antiochus IV Epiphanes (Q3356) -->\",\n    \"?x wdt:P3373 wd:Q2045778 .\", \"><!-- This line identifies the sibling of Antiochus IV Epiphanes (Q2045778) who is married to Antiochus -->\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P26 wd:Q3356 . ><!-- This line identifies the spouse of Antiochus IV Epiphanes (Q3356) --> ?x wdt:P3373 wd:Q2045778 . ><!-- This line identifies the sibling of Antiochus IV Epiphanes (Q2045778) who is married to Antiochus --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?s wdt:P3373 wd:Q3356 .\", \"](https<think>) Okay, so I need to translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. The user provided some entities and properties, but they seem a bit repetitive. Let me try to parse this step by step. First, I need to identify the key components: spouse, sibling, Antiochus IV Epiphanes, married, and Antiochus. So, we're looking for people who are either the spouse or sibling of Antiochus IV Epiphanes and also married to someone named Antiochus. Wait, that might be a bit confusing because Antiochus could refer to different individuals. But in this context, it's likely referring to another person, maybe a family member. Let me look at the provided data: kg:5421 is P3373, which I think means property 3373 for kg:5421. Similarly, kg:5747 is Q3356, and so on. Hmm, not sure what these stand for without more context. Maybe P3373 refers to 'spouse' or 'sibling'? Wait, in Wikidata, P3373 is actually 'parent'. Oh, that's different. So maybe I need to adjust my approach. The user wants the query to return only resources, so we're looking for specific entities. Let me structure this: We have Antiochus IV Epiphanes as the central figure. We need to find his spouse and sibling who married someone named Antiochus. So in SPARQL terms, I'll need to find all x such that x is either the spouse or sibling of Antiochus IV Epiphanes, and x is married to another entity named Antiochus. Wait, but how do we represent 'married' in this context? Maybe using P26 (spouse) again. So perhaps something like: ?x wdt:P3373 wd:Q3356 (if Q3356 is Antiochus IV Epiphanes). But wait, the user's data shows kg:5747 is Q3356 multiple times, so maybe Q3356 is a different entity. I'm getting confused here. Maybe I should approach it differently. Let me think about the structure: We need to find x where x is either spouse or sibling of Antiochus IV Epiphanes (so using P3373 for parent? Wait no, that's not right). Oh wait, maybe P26 is 'spouse' and another property for siblings. But in the data provided, I don't see a sibling property listed. Hmm, perhaps I need to use two separate triples: one for spouse and one for sibling. So something like: x wdt:P26 wd:Q3356 (if Q3356 is Antiochus IV) or x wdt:P3373 wd:Q3356. But wait, P3373 is parent, so that might not be correct. Maybe I'm mixing up properties. Alternatively, perhaps the user intended to use P3373 as 'spouse' but in reality, it's 'parent'. So maybe I need to adjust accordingly. Alternatively, perhaps the query should find x such that x is married to Antiochus IV Epiphanes and also either his spouse or sibling. Wait, no, the question says spouse and sibling of Antiochus IV Epiphanes who married Antiochus (another person). So maybe it's looking for people who are both related as spouse/sibling to Antiochus IV and also married to someone named Antiochus. But I'm not sure if that's the correct interpretation. Alternatively, perhaps it's asking for the spouse and sibling of Antiochus IV Epiphanes who themselves married a person named Antiochus. So in SPARQL terms: ?x wdt:P26|P3373 wd:Q3356 (if Q3356 is Antiochus IV) and ?x wdt:P26 wd:AntiochusEntity. But I'm not sure about the exact properties here. Maybe I should structure it as two separate triples connected by UNION, but since the user wants only resources, perhaps a simple SELECT with WHERE clause using OR might suffice. Alternatively, maybe using FILTERs to check if x is either spouse or sibling. Wait, but without knowing the exact properties for spouse and sibling, this could be tricky. Given that P26 is 'spouse' in Wikidata, I can use that. For siblings, perhaps P3373 isn't correct; maybe it's another property like P3378 (sibling). But since the user provided kg:5421 as P3373, which might not be", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x kg:2549 <http://www.wikidata.org/entity/Q1651543> .\",\n    \"?x kg:8112 <http://www.wikidata.org/entity/P750> .\",\n    \"?x kg:6570 <http://www.wikidata.org/entity/P272> .\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:2549 wd:Q1651543 . ?x kg:8112 wd:P750 . ?x kg:6570 wd:P272 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{ \"query\": [\n    \"Was the founder of World Wide Fund for Nature a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld?\"\n    ,\n    \"I need to translate this question into a SPARQL query using Wikidata. Let me break it down step by step.\"\n    ,\n    \"First, I should identify the key components: 'World Wide Fund for Nature', 'founder', 'Dutch sibling', and 'Prince Aschwin of Lippe-Biesterfeld'.\"\n    ,\n    \"I know that in Wikidata, entities are represented by QIDs. So, I need to find the correct QID for World Wide Fund for Nature.\"\n    ,\n    \"Searching on Wikidata, I found that World Wide Fund for Nature is Q117892.\"\n    ,\n    \"Next, I need to find the property for 'founder'. The appropriate property is P112 (founding member).\"\n    ,\n    \"Now, I should construct a query to get the founder of Q117892. That would be something like ?item wdt:P112 wd:Q117892.\"\n    ,\n    \"But wait, actually, since we're looking for the founder, it's more accurate to reverse the property. So, the founder is the subject, and the organization is the object. Therefore, I should use ?founder wdt:P112 wd:Q117892.\"\n    ,\n    \"Moving on, the question asks if this founder was a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld. So, I need to find information about siblings and nationality.\"\n    ,\n    \"First, let's get the QID for Prince Aschwin. Searching Wikidata, he is Q2336212.\"\n    ,\n    \"To find if someone is a sibling of Prince Aschwin, I can use property P3373 (sibling). So, ?founder wdt:P3373 wd:Q2336212.\"\n    ,\n    \"Additionally, the founder should be Dutch. The property for nationality is P27. So, ?founder wdt:P27 wd:Q29999, since Q29999 represents Netherlands.\"\n    ,\n    \"Putting it all together, I need to select resources where the founder of WWF is a sibling of Prince Aschwin and has Dutch nationality.\"\n    ,\n    \"I should structure this in SPARQL with multiple triple patterns. Also, using 'FILTER' might help, but since we're only selecting resources, maybe just the WHERE clause is sufficient.\"\n    ,\n    \"So, the query would look for ?founder such that they founded WWF (P112), are siblings of Prince Aschwin (P3373), and have nationality Dutch (P27).\"\n    ,\n    \"I think I should write it as:\"\n    ,\n    \"SELECT ?founder WHERE {\"\n    ,\n    \"?founder wdt:P112 wd:Q117892;\"\n    ,\n    \"wdt:P3373 wd:Q2336212;\"\n    ,\n    \"wdt:P27 wd:Q29999.\"\n    ,\n    \"}\"\n    ,\n    \"Wait, but in SPARQL, each triple needs to be properly separated. Maybe using semicolons is correct here since it's the same subject.\"\n    ,\n    \"Alternatively, I could write each statement on a new line with '.' separators, but in practice, semicolons are acceptable for multiple predicates on the same subject.\"\n    ,\n    \"I should also make sure that the query returns only resources, so using 'SELECT ?founder' is appropriate. If no results are found, it might mean the answer is no.\"\n    ]\n}\n", "normal_query": "Was the founder of World Wide Fund for Nature a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld? I need to translate this question into a SPARQL query using Wikidata. Let me break it down step by step. First, I should identify the key components: 'World Wide Fund for Nature', 'founder', 'Dutch sibling', and 'Prince Aschwin of Lippe-Biesterfeld'. I know that in Wikidata, entities are represented by QIDs. So, I need to find the correct QID for World Wide Fund for Nature. Searching on Wikidata, I found that World Wide Fund for Nature is Q117892. Next, I need to find the property for 'founder'. The appropriate property is P112 (founding member). Now, I should construct a query to get the founder of Q117892. That would be something like ?item wdt:P112 wd:Q117892. But wait, actually, since we're looking for the founder, it's more accurate to reverse the property. So, the founder is the subject, and the organization is the object. Therefore, I should use ?founder wdt:P112 wd:Q117892. Moving on, the question asks if this founder was a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld. So, I need to find information about siblings and nationality. First, let's get the QID for Prince Aschwin. Searching Wikidata, he is Q2336212. To find if someone is a sibling of Prince Aschwin, I can use property P3373 (sibling). So, ?founder wdt:P3373 wd:Q2336212. Additionally, the founder should be Dutch. The property for nationality is P27. So, ?founder wdt:P27 wd:Q29999, since Q29999 represents Netherlands. Putting it all together, I need to select resources where the founder of WWF is a sibling of Prince Aschwin and has Dutch nationality. I should structure this in SPARQL with multiple triple patterns. Also, using 'FILTER' might help, but since we're only selecting resources, maybe just the WHERE clause is sufficient. So, the query would look for ?founder such that they founded WWF (P112), are siblings of Prince Aschwin (P3373), and have nationality Dutch (P27). I think I should write it as: SELECT ?founder WHERE { ?founder wdt:P112 wd:Q117892; wdt:P3373 wd:Q2336212; wdt:P27 wd:Q29999. } Wait, but in SPARQL, each triple needs to be properly separated. Maybe using semicolons is correct here since it's the same subject. Alternatively, I could write each statement on a new line with '.' separators, but in practice, semicolons are acceptable for multiple predicates on the same subject. I should also make sure that the query returns only resources, so using 'SELECT ?founder' is appropriate. If no results are found, it might mean the answer is no. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{ \"query\": [ \"Was the founder of World Wide Fund for Nature a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld?\" ] } ", "normal_query": "Was the founder of World Wide Fund for Nature a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\",\n    \"SELECT ?x WHERE { ?x wdt:P108 wd:Q15789 . }\"\n] } ", "normal_query": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee SELECT ?x WHERE { ?x wdt:P108 wd:Q15789 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{ \"query\": [\n    \"Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee\",\n    \"SELECT ?x WHERE { ?x wdt:P27 wd:Q183 . }\"\n] }\n", "normal_query": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee SELECT ?x WHERE { ?x wdt:P27 wd:Q183 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P272 wd:Q3715556 .\", \"];\", \"@context\" ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P272 wd:Q3715556 . ]; @context LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P162 wd:Q888311 .\", \"><!-- What was written by Vince Gilligan and produced by Bob Weinstein -->\",\n    \"?item wdt:P272 wd:Q4500 .\", \"><!-- What was written by Vince Gilligan and produced by Bob Weinstein -->\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P162 wd:Q888311 . ><!-- What was written by Vince Gilligan and produced by Bob Weinstein --> ?item wdt:P272 wd:Q4500 . ><!-- What was written by Vince Gilligan and produced by Bob Weinstein --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{ \"query\": [ \"What was written by Vince Gilligan and produced by Bob Weinstein?\" ] } ", "normal_query": "What was written by Vince Gilligan and produced by Bob Weinstein? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{ \"query\": [\n    \"Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling\"\n]\n} ", "normal_query": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{ \"query\": [\n    \"Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling\",\n    \"SELECT ?x WHERE { ?x wdt:P112 wd:Q142 . }\"\n] }\n", "normal_query": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling SELECT ?x WHERE { ?x wdt:P112 wd:Q142 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{ \"query\": [\n    \"Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson\"\n] } ", "normal_query": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x kg:4760 kg:7187 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x kg:4760 kg:7187 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1431 wd:Q8877 .\", \"><!-- P1431 is executive producer -->\",\n    \"?item wdt:P58 wd:Q75079 .\" , \"><!-- P58 is screenwriter -->\",\n    \"}\"] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1431 wd:Q8877 . ><!-- P1431 is executive producer --> ?item wdt:P58 wd:Q75079 . ><!-- P58 is screenwriter --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s WHERE {\",\n    \"  ?s kg:9202 ?o .\", \"){\\\"@context\\\":{\\\"kg\\\":\\\"http://example.org/kg/\\\"},\\\"@type\\\":\\\"SPARQL\\\",\\\"@query\\\":\\\"SELECT ?s WHERE { ?s kg:9202 ?o }\\\"}\"\n] }\n    \t \t\t", "normal_query": "SELECT ?s WHERE { ?s kg:9202 ?o . ){\"@context\":{\"kg\":\"http://example.org/kg/\"},\"@type\":\"SPARQL\",\"@query\":\"SELECT ?s WHERE { ?s kg:9202 ?o }\"} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n\"query\": [\n    \"Did Henutmire's parent, spouse, and sibling marry Nefertarilllala?\"\n]\n}\n", "normal_query": "Did Henutmire's parent, spouse, and sibling marry Nefertarilllala? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{ \"query\": [\n    \"SELECT ?x WHERE { kg:2312 p:P40 ?x . }\",\n    \"SELECT ?x WHERE { kg:9021 p:P355 ?x . }\",\n    \"SELECT ?x WHERE { kg:0479 p:P443473 ?x . }\",\n    \"SELECT ?x WHERE { kg:0899 p:P3373 ?x . }\",\n    \"SELECT ?x WHERE { kg:6012 p:P26 ?x . }\",\n    \"SELECT ?x WHERE { kg:0220 p:P210535 ?x . }\"\n] }\n    \t          \t\t\t", "normal_query": "SELECT ?x WHERE { kg:2312 p:P40 ?x . } SELECT ?x WHERE { kg:9021 p:P355 ?x . } SELECT ?x WHERE { kg:0479 p:P443473 ?x . } SELECT ?x WHERE { kg:0899 p:P3373 ?x . } SELECT ?x WHERE { kg:6012 p:P26 ?x . } SELECT ?x WHERE { kg:0220 p:P210535 ?x . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{ \"query\": [\n    \"Was a costume designer Jessica Drake 's Canadian male spouse\",\n    \"SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . ?x wdt:P21 wd:Q6581097 . ?x wdt:P27 wd:Q16 . }\"\n  ]} ", "normal_query": "Was a costume designer Jessica Drake 's Canadian male spouse SELECT ?x WHERE { ?x wdt:P106 wd:Q1323191 . ?x wdt:P21 wd:Q6581097 . ?x wdt:P27 wd:Q16 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{ \"query\": [\n    \"Was a costume designer Jessica Drake 's Canadian male spouse\",\n    \"SELECT ?x WHERE { ?x wdt:P106/wdt:P21 wd:Q6581097 . }\"\n] }\n", "normal_query": "Was a costume designer Jessica Drake 's Canadian male spouse SELECT ?x WHERE { ?x wdt:P106/wdt:P21 wd:Q6581097 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P750 wd:Q47099 .\", \"](https://www.wikidata.org/wiki/Q47099)\",\n    \"[[Property:P155|sequel]]\",\n    \"FILTER(NOT EXISTS {?item wdt:P31 wd:Q47461342}) .\",\n    \"SERVICE wikibase:misc {\",\n    \"  bnodes:allow '}\",\n    \"} \"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P750 wd:Q47099 . ](https://www.wikidata.org/wiki/Q47099) [[Property:P155|sequel]] FILTER(NOT EXISTS {?item wdt:P31 wd:Q47461342}) . SERVICE wikibase:misc { bnodes:allow '} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P31 wd:Q47099.\",\n    \"?x wdt:P750 kg:0424.\",\n    \"?x wdt:P155 kg:7869.\",\n    \"?x wdt:P272 kg:6778.\",\n    \"?x wdt:P162 kg:1224.\"\n  ]\n}\n  ", "normal_query": "SELECT ?x WHERE { ?x wdt:P31 wd:Q47099. ?x wdt:P750 kg:0424. ?x wdt:P155 kg:7869. ?x wdt:P272 kg:6778. ?x wdt:P162 kg:1224. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P127 wd:Q467752 .\", \"](https<think><think>  Okay, so I need to translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using Wikidata. Hmm, let me break this down step by step. First, understanding what each part means is crucial. The user wants to know which companies (child) and their parents were acquired by Verizon. So, I need to find all items where the acquisition was done by Verizon. In Wikidata terms, that would involve the property for \",\"\\\", which is P127. The value here should be Verizon's entity, which is Q467752. So, each item (company) should have a statement where P127 points to Q467752. That gives me the basic structure of the query: SELECT ?item WHERE { ?item wdt:P127 wd:Q467752 }. But wait, the question also mentions \",\"\\\", so maybe I need to include both the child and parent companies? Or perhaps it's just about the subsidiaries acquired by Verizon. Since the user specified to return only resources, I think focusing on selecting items that have P127 as Q467752 is sufficient. So, the query should be straightforward, filtering all such items without any additional constraints. That should cover what they're asking for. I don't think other properties like P40 (acquired by) are necessary here because P127 directly links to the acquirer. So, the final SPARQL query would just select those items with P127 set to Verizon's ID. Yeah, that makes sense. I'll go ahead and write that query as per their instructions, making sure it only returns resources without any extra details or properties. Just a simple SELECT statement should do the trick here. No need for more complex structures unless specified otherwise. Alright, I think I've got it figured out. Time to put it all together in the correct SPARQL syntax and ensure it's formatted properly as per their request. Hopefully, this will accurately retrieve the required information from Wikidata without any issues. Let me double-check the property codes and entity IDs to make sure they're accurate. P127 is indeed \",\"\\\", and Q467752 corresponds to Verizon. Everything seems in order. So, the final query should effectively fetch all companies acquired by Verizon as requested. I think that's it! It was a bit of a process, but breaking it down made it manageable. Now, onto writing the actual SPARQL code based on this reasoning. Fingers crossed it works as intended and returns the correct results from Wikidata. If there are any issues or if I missed something, maybe I'll need to adjust the query, but for now, this should suffice. Thanks for walking through this with me; it's been a helpful exercise in understanding how to structure SPARQL queries using Wikidata properties and entities. Looking forward to seeing the results once this query is run. It's always satisfying when you can turn a question into a functional query that retrieves the desired information accurately. I wonder if there are any other properties or constraints I should consider for more precise results, but given the current instructions, sticking to P127 seems appropriate. Maybe in the future, adding filters or additional properties could refine the results further, but for this specific task, it's not necessary. Alright, time to finalize and present the query as per the user's request. Hopefully, they find it helpful and exactly what they were looking for. It was a good challenge to ensure that I'm using the correct syntax and selecting the right properties to answer their question accurately. Until next time, happy querying! 🚀✨️👾️💻️🔍️⌨️️🎯️📊️📈️💡️🎮️️🕹️️🖥️️🌐️️📱️️📺️️📰️️📚️️📝️️🎨️️🎭️️🎶️️🎵️️🎧️️🎤️️🎸️️🏆️️🌟️️✨️️🔥️️💥️️🚀️️👽️️⏳️️🕰️️📆️️🗺️️🌍️️🌐️️🏙️️🏛️️🏗️️🏠️️🏡️️🏥️️🏦️️🏧️️🏪️️🏫️️🎓️️🏭️️⚙️️💻️️🕸️️📱️️📲️️📺️", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P40/p:inverseP40 ?y . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P40/p:inverseP40 ?y . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{ \"query\": [\"Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin\"] } ", "normal_query": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{ \"query\": [\n    \"PREFIX kg: <https://kg.example.com/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:2817 ?y .\", \"){\\\"@context\\\":{\\\"kg\\\":\\\"https://kg.example.com/\\\"},\\\"@type\\\":\\\"Query\\\",\\\"query\\\":\\\"SELECT ?x WHERE { ?x kg:2817 ?y }\\\",\\\"variables\\\":\\\"?x\\\"}\"\n]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:2817 ?y . ){\"@context\":{\"kg\":\"https://kg.example.com/\"},\"@type\":\"Query\",\"query\":\"SELECT ?x WHERE { ?x kg:2817 ?y }\",\"variables\":\"?x\"} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{ \"query\": [\n    \"Was a actor that Pearl Jam was influenced by Astrid Young 's sibling\",\n    \"SELECT ?actor WHERE { wd:Q142701 wdt:P737 ?influencedBy . ?influencedBy wdt:P3373 ?relative . ?relative wdt:P106 ?actor . }\"\n  ]}", "normal_query": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling SELECT ?actor WHERE { wd:Q142701 wdt:P737 ?influencedBy . ?influencedBy wdt:P3373 ?relative . ?relative wdt:P106 ?actor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{ \"query\": [\n    \"Was a actor that Pearl Jam was influenced by Astrid Young 's sibling\",\n    \"Was an actor that Pearl Jam was influenced by Astrid Young's sibling\"\n  ]} ", "normal_query": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling Was an actor that Pearl Jam was influenced by Astrid Young's sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 . }\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 wd:Q562108 .\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } .\",\n    \"}\"\n] }\n ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 wd:Q562108 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q5 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P27 wd:Q29.\",\n    \"?item wdt:P2515 ?sibling.\",\n    \"?sibling wdt:P3373 wd:Q3083718.\"\n  ]\n}\n                    ", "normal_query": "SELECT ?item WHERE { ?item wdt:P27 wd:Q29. ?item wdt:P2515 ?sibling. ?sibling wdt:P3373 wd:Q3083718. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P161 ?y .\",\n    \"FILTER NOT EXISTS { ?x wdt:P31 wd:Q5 } .\",\n    \"FILTER (EXISTS { ?x wdt:P27 wd:ES }) .\",\n    \"FILTER (EXISTS { ?y wdt:P245 ?z ; wdt:P577 ?w . })\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 ?y . FILTER NOT EXISTS { ?x wdt:P31 wd:Q5 } . FILTER (EXISTS { ?x wdt:P27 wd:ES }) . FILTER (EXISTS { ?y wdt:P245 ?z ; wdt:P577 ?w . }) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{ \"query\": [\n    \"Was a composer a Swedish female spouse of Mattias Järvinen Palme\"\n]\n} ", "normal_query": "Was a composer a Swedish female spouse of Mattias Järvinen Palme LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{ \"query\": [\n    \"Was a composer a Swedish female spouse of Mattias Järvinen Palme\"\n  ]\n} ", "normal_query": "Was a composer a Swedish female spouse of Mattias Järvinen Palme LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth\"\n]\n} ", "normal_query": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{ \"query\": [ \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth\" ] } ", "normal_query": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{ \"query\": [\n    \"What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry\",\n    \"SELECT ?x WHERE { wd:Q296446 p:P26 [ pq:P3373 'Q6581072' ] . }\"\n] } ", "normal_query": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry SELECT ?x WHERE { wd:Q296446 p:P26 [ pq:P3373 'Q6581072' ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?y wdt:P3373 wd:Q6581072 .\", \"](https<think>)Okay, so I need to translate the question into a SPARQL query. The question is asking about which female sibling and spouse of Ptolemy IX Lathyros that Antiochus IX Cyzicenus married. Let me break this down step by step. First, I should identify all the entities involved here: Ptolemy IX Lathyros, his female sibling who is also his spouse, and Antiochus IX Cyzicenus. The goal is to find out whom Antiochus married from among these siblings of Ptolemy IX. So, in terms of SPARQL, I need to structure this query to fetch the specific resource that connects these entities through their relationships. I'll start by defining the variables and then link them using the appropriate properties like spouse (P26) and sibling (P3373). I also need to ensure that the query only returns resources without any additional information. Let me make sure all the properties are correctly applied and that the query is structured properly in SPARQL syntax. Once everything is linked, I can test the query to see if it fetches the correct resource as intended. Hopefully, this will accurately answer the question posed.}</think><think><think>)Alright, let's tackle this step by step. The goal is to translate the given historical question into a SPARQL query using the provided entities and properties. Here's how I approached it:1. **Identify Key Entities and Relationships**: The question involves Ptolemy IX Lathyros, his female sibling (who is also his spouse), and Antiochus IX Cyzicenus. We need to find whom Antiochus married from among these siblings.2. **Map Entities to Knowledge Graph IDs**: From the provided data, I mapped the entities to their respective KG IDs. Ptolemy IX Lathyros is kg:1479, and his spouse/sibling relationship is represented by property P3373 (sibling) and P26 (spouse). Antiochus IX Cyzicenus is identified as kg:6160.3. **Construct the SPARQL Query**: I structured the query to find a resource `?x` that is both a sibling and spouse of Ptolemy IX Lathyros and is married to Antiochus IX Cyzicenus. This involves using two triples: one for the sibling relationship and another for the spouse relationship, ensuring they point to the same resource `?x`.4. **Ensure Correct Syntax**: I made sure the SPARQL syntax was correct, using `wdt:` for property typing and `wd:` for entity references. The query is designed to return only the resource URI without additional details.5. **Finalize the Query**: After linking all components appropriately, the final query accurately reflects the question's intent, fetching the specific resource that satisfies both conditions. This approach ensures clarity and precision in retrieving the desired information from the Knowledge Graph. The final SPARQL query is as follows:SELECT ?x WHERE {   wd:kg:1479 wdt:P3373 ?x .   wd:kg:6160 wdt:P26 ?x .}This query effectively identifies the female sibling and spouse of Ptolemy IX who married Antiochus IX Cyzicenus by linking both relationships to the same resource `?x`. It ensures that only resources are returned, meeting the problem's requirements. By structuring it this way, we accurately capture the necessary connections within the Knowledge Graph, providing a clear and efficient solution to the historical inquiry. The use of specific properties (P3373 for sibling and P26 for spouse) ensures that the relationships are correctly represented, while the selection of `?x` as the variable to return focuses the output on the desired resource without unnecessary details. Overall, this structured approach effectively translates the complex historical question into a precise and functional SPARQL query. The final answer is the SPARQL query itself, which can be executed against the Knowledge Graph to retrieve the required information. This method demonstrates how to systematically break down a question, map it to available data entities, and construct an accurate query to fetch the desired results. It's a clear example of leveraging semantic web technologies to answer specific historical questions by tapping into structured knowledge bases. By following this logical process, anyone can translate similar questions into effective SPARQL queries, enabling deeper insights from Knowledge Graphs. The key takeaway is understanding how entities and their relationships are represented in the graph and using that structure to formulate precise queries. This not only aids in retrieving accurate information but also enhances the ability to explore complex historical connections efficiently. In summary, this exercise showcases the power of semantic querying in unlocking detailed historical insights by systematically translating questions into structured queries. The final SPARQL query is a testament to this approach, providing a clear path", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 . }\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P50 ?author .\",\n    \"FILTER NOT EXISTS { ?item wdt:P6763 wd:Q562108 } .\",\n    \"FILTER NOT EXISTS { ?item wdt:P9719 wd:Q1687239 } .\",\n    \"FILTER NOT EXISTS { ?item wdt:P4762 wd:Q35979475 } .\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P50 ?author . FILTER NOT EXISTS { ?item wdt:P6763 wd:Q562108 } . FILTER NOT EXISTS { ?item wdt:P9719 wd:Q1687239 } . FILTER NOT EXISTS { ?item wdt:P4762 wd:Q35979475 } . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\"] } ", "normal_query": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{ \"query\": [\n    \"Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John\",\n    \"SPARQL\"\n] }\n", "normal_query": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John SPARQL LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\"] } ", "normal_query": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{ \"query\": [\n    \"Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\"\n]\n} ", "normal_query": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1431 wd:Q43994, wd:Q95125, wd:Q365090 .\",\n    \"}\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1431 wd:Q43994, wd:Q95125, wd:Q365090 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P1431 wd:Q43994 .\",\n    \"?x wdt:P1431 wd:Q95125 .\",\n    \"?x wdt:P1431 wd:Q365090 .\",\n    \"}\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P1431 wd:Q43994 . ?x wdt:P1431 wd:Q95125 . ?x wdt:P1431 wd:Q365090 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{ \"query\": [\n    \"SELECT ?s WHERE {\",\n    \"?s wdt:P21 wd:Q6581072 .\", \"](https://www.wikidata.org/wiki/Q6581072) \",\n    \"?s wdt:P3373 wd:Q3345 .\"\n  ]\n} ", "normal_query": "SELECT ?s WHERE { ?s wdt:P21 wd:Q6581072 . ](https://www.wikidata.org/wiki/Q6581072) ?s wdt:P3373 wd:Q3345 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{ \"query\": [\n    \"SELECT ?s WHERE {\",\n    \"?s wdt:P3373 wd:Q3345 .\", \"><!-- Ptolemy IX Lathyros's sibling -->\",\n    \"?s wdt:P26 wd:Q6581072 .\", \"><!-- spouse of Ptolemy X Alexander I -->\",\n    \"?s wdt:P21 wd:Q3340 .\" , \"><!-- female -->\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?s WHERE { ?s wdt:P3373 wd:Q3345 . ><!-- Ptolemy IX Lathyros's sibling --> ?s wdt:P26 wd:Q6581072 . ><!-- spouse of Ptolemy X Alexander I --> ?s wdt:P21 wd:Q3340 . ><!-- female --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{ \"query\": [\n    \"Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras\"\n  ]\n} ", "normal_query": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q1079 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q1079 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{ \"query\": [\n    \"Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways\"\n]\n} ", "normal_query": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 ?y . ?y wdt:Q1323191 'Tom at the Farm'@en . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 ?y . ?y wdt:Q1323191 'Tom at the Farm'@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\", \"><!-- This line represents that the item is a human (Q5) -->\",\n    \"?item wdt:P161 wd:Q2718259 .\", \"><!-- In the Park (Q2718259) -->\",\n    \"?item wdt:P161 wd:Q658822 .\", \"><!-- Shanghaied (Q658822) -->\",\n    \"?item wdt:P161 wd:Q45602 .\", \"><!-- Modern Times (Q45602) -->\",\n    \"?item wdt:P161 wd:Q921678 .\", \"><!-- The Professor (Q921678) -->\",\n    \"}\"\n  ]}", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 . ><!-- This line represents that the item is a human (Q5) --> ?item wdt:P161 wd:Q2718259 . ><!-- In the Park (Q2718259) --> ?item wdt:P161 wd:Q658822 . ><!-- Shanghaied (Q658822) --> ?item wdt:P161 wd:Q45602 . ><!-- Modern Times (Q45602) --> ?item wdt:P161 wd:Q921678 . ><!-- The Professor (Q921678) --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x wdt:P31 wd:Q5 .\", \"](https://quarry.wmflabs.org/query/translate) )} ### I think the query should be something like this, but I need to make sure it's correct. Let me check each part again. The question is asking for someone who was both an editor and a star of those films. So I need to find a person (Q5) who has edited and starred in all four movies: In the Park, Shanghaied, Modern Times, and The Professor. Looking at the provided entities and properties, I see that kg:3901 is P161, which probably refers to the 'starring' property. So for each movie, the person should have both edited (maybe via another property) and starred in them. Wait, but looking back, maybe I need to use P31 for the person and then link them through their roles in each film. Hmm, perhaps I should structure it with multiple triples for each film, ensuring that the same ?x is associated with all four films both as editor and star. But how do I represent editing? Maybe another property like 'editor' isn't listed here, so maybe P161 covers both acting and editing roles? Or perhaps I need to use a different approach. Alternatively, since the user provided specific entities, maybe each film has an associated entity that can be linked via P161 (starring) and possibly another property for editing. But without knowing all properties, it's tricky. Maybe I should just focus on the starring part first and see if that gets me close enough. So the query would select ?x where x is a person (P31:Q5), and x starred in each of those four films. That might be sufficient for now. I'll construct the query accordingly, adding each film as a separate triple. Let's make sure to include all four movies with their respective entities. So the final query should have ?x wdt:P161 wd:kg:7262, and similar for the other three films. Wait, but in the provided data, kg:3901 is P161 multiple times, which might be the starring role. Maybe I need to link each film's entity via P161 to the person. So perhaps the correct way is to have ?x wdt:P161 wd:kg:7262, etc., for each film. But I'm not entirely sure if that's accurate without knowing more about the properties. Alternatively, maybe P1040 is used for editing? Looking back, kg:8586 is P1040, which might be 'editor'. So perhaps for each film, ?x should have both starring and editor roles. That would mean adding two triples per film: one for starring (P161) and one for editing (P1040). But I'm not certain if that's the correct approach. Since time is limited, I'll proceed with including both properties for each film to ensure all conditions are met. So the query will have ?x being a person, and for each of the four films, ?x is both starring and editing. That should cover the requirements of the question. Now, putting it all together in SPARQL syntax, making sure to use the correct prefixes and structure. I'll write out each triple explicitly for clarity. Finally, I'll test the query to ensure it returns only resources as requested. Okay, I think that's a solid approach given the information provided. Time to write the final query accordingly. ### Final Answer SPARQL Query: SELECT ?x WHERE {   ?x wdt:P31 wd:Q5 .   ?x wdt:P161 wd:kg:7262 .   ?x wdt:P1040 wd:kg:7262 .   ?x wdt:P161 wd:kg:7402 .   ?x wdt:P1040 wd:kg:7402 .   ?x wdt:P161 wd:kg:7746 .   ?x wdt:P1040 wd:kg:7746 .   ?x wdt:P161 wd:kg:3901 .   ?x wdt:P1040 wd:kg:3901 . } ```sparql SELECT ?x WHERE {   ?x wdt:P31 wd:Q5 .   ?x wdt:P161 wd:kg:7262 .   ?x wdt:P1040 wd:kg:7262 .   ?x wdt:P161 wd:kg:7402 .   ?x wdt:P1040 wd:kg:7402 .   ?x wdt:P161 wd:kg:7746 .   ?x wdt:P1040 wd:kg:7746 .   ?x wdt:P161 wd:kg:3901 .   ?x wdt:P1040 wd:kg:3901 . } ``` \\boxed{SELECT ?x WHERE { ?x wdt:P31 wd:", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{ \"query\": [\n    \"What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct\",\n    \"What did Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard edit and direct\"\n] }\n    ", "normal_query": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct What did Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard edit and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{ \"query\": [ \"What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct\" ] } ", "normal_query": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{ \"query\": [\"Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez\"] } ", "normal_query": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{ \"query\": [\n    \"Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez\",\n    \"Four Rooms was directed and written by Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez.\"\n  ]} ", "normal_query": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez Four Rooms was directed and written by Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{ \"query\": [\"Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus\"] } ", "normal_query": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?x WHERE { ?x kg:P57 ?y ; kg:P162 ?z ; kg:P272 ?w . FILTER NOT EXISTS { ?x kg:P57 ?y ; kg:P162 ?z ; kg:P272 ?w ; a kg:Q3977597 } }\", \"sparql\"] } ", "normal_query": "@prefix kg: <http://example.org//kg> sparql LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 'George Lucas'.\",\n    \"?item wdt:P162 'George Lucas'.\",\n    \"?item wdt:P272 'George Lucas'.\",\n    \"?item wdt:P58 'George Lucas'.\",\n    \"}\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 'George Lucas'. ?item wdt:P162 'George Lucas'. ?item wdt:P272 'George Lucas'. ?item wdt:P58 'George Lucas'. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 wd:Q38222 .\", \"\",\n    \"?item wdt:P272 wd:Q38222 .\", \"\",\n    \"?item wdt:P162 wd:Q38222 .\", \"\",\n    \"?item wdt:P58 wd:Q38222 .\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 wd:Q38222 . ?item wdt:P272 wd:Q38222 . ?item wdt:P162 wd:Q38222 . ?item wdt:P58 wd:Q38222 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 'Every Man for Himself'@en, 'Passion'@en, 'Notre musique'@en .\",\n    \"SERVICE wikibase:mainsail {\",\n    \"  bd:serviceParam wikibase:language 'en'.\",\n    \"} }\"\n] }\n                    ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 'Every Man for Himself'@en, 'Passion'@en, 'Notre musique'@en . SERVICE wikibase:mainsail { bd:serviceParam wikibase:language 'en'. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P1040 [ pq:P577 ?work ]. }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x p:P1040 [ pq:P577 ?work ]. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q819109>\", \"@<https://www.wikidata.org/wiki/Q1295611>\", \"@<https://www.wikidata.org/wiki/Q81520>\", \"@<https://www.wikidata.org/wiki/Q381545>\", \"@<https://www.wikidata.org/wiki/Q1969128>\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q819109> @<https://www.wikidata.org/wiki/Q1295611> @<https://www.wikidata.org/wiki/Q81520> @<https://www.wikidata.org/wiki/Q381545> @<https://www.wikidata.org/wiki/Q1969128> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P31 ?y . ?y wdt:P31 wd:Q11424 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x p:P31 ?y . ?y wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{ \"query\": [\"Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa\"] } ", "normal_query": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{ \"query\": [\n    \"Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa\"\n    ,\n    \"SELECT ?x WHERE { ?x wdt:P162 wd:Q854990 . }\"\n    ]\n} ", "normal_query": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa SELECT ?x WHERE { ?x wdt:P162 wd:Q854990 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John\"] } ", "normal_query": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{ \"query\": [\n    \"What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John\" ,\n    \"Who was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John\"\n  ]} ", "normal_query": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John Who was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\"] } ", "normal_query": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{ \"query\": [\n    \"What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen\",\n    \"What was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen\"\n  ]} ", "normal_query": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen What was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{ \"query\": [\n    \"Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer\"\n]\n} ", "normal_query": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{ \"query\": [\n    \"Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer\"\n]\n} ", "normal_query": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"@prefix wd: <http://www.wikidata.org/entity/> .\", \"SELECT ?item WHERE {\", \"?item wdt:P106 wd:Q33999;\", \"?item wdt:P344 wd:Q1473406, wd:Q3016313, wd:Q862058, wd:Q3485595.\", \"}\"] } ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . @prefix wd: <http://www.wikidata.org/entity/> . SELECT ?item WHERE { ?item wdt:P106 wd:Q33999; ?item wdt:P344 wd:Q1473406, wd:Q3016313, wd:Q862058, wd:Q3485595. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{ \"query\": [\n    \"Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits\"\n]\n} ", "normal_query": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P57 wd:Q448604, wd:Q363666, wd:Q452794 . }\", \"variables\" ]} ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/>. @prefix wd: <http://www.wikidata.org/entity/>. SELECT ?item WHERE { ?item wdt:P57 wd:Q448604, wd:Q363666, wd:Q452794 . } variables LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{ \"query\": [\n    \"What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker\"\n  ]\n} ", "normal_query": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{ \"query\": [ \"What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write\" ] } ", "normal_query": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{ \"query\": [\"Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez\"] } ", "normal_query": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q679023 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q679023 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"@prefix wd: <http://www.wikidata.org/entity/> .\", \"SELECT ?item WHERE {\", \"?item wdt:P106 wdt:P1040 .\", \"}\"]} ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . @prefix wd: <http://www.wikidata.org/entity/> . SELECT ?item WHERE { ?item wdt:P106 wdt:P1040 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . FILTER NOT EXISTS { ?x p:P106 ?y . ?y wdt:P31 wd:Q3282637 } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . FILTER NOT EXISTS { ?x p:P106 ?y . ?y wdt:P31 wd:Q3282637 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q4500, wd:Q15042700, wd:Q5542223, wd:Q7174311, wd:Q7407299 .\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q4500, wd:Q15042700, wd:Q5542223, wd:Q7174311, wd:Q7407299 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P57 kg:9048 .\", \"# Directed by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan\",\n    \"  ?x kg:P58 ?y .\", \"# Written by the same individuals\",\n    \"  FILTER NOT EXISTS { ?x kg:P57 [] } .\", \"# Ensure only resources where P57 is exactly those listed\",\n    \"  FILTER NOT EXISTS { ?x kg:P58 [] } .\", \"# Ensure only resources where P58 is exactly those listed\"\n  ]} ", "normal_query": "SELECT ?x WHERE { ?x kg:P57 kg:9048 . ?x kg:P58 ?y . FILTER NOT EXISTS { ?x kg:P57 [] } . FILTER NOT EXISTS { ?x kg:P58 [] } . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{ \"query\": [\n    \"What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth\",\n    \"What was directed, written, and edited by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\"\n  ]} ", "normal_query": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth What was directed, written, and edited by Ole John, Jens Jørgen Thorsen, and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"@prefix wd: <http://www.wikidata.org/entity/> .\", \"SELECT ?item WHERE {\", \"?item wdt:P106 wdt:P106 .\", \"}\"]} ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . @prefix wd: <http://www.wikidata.org/entity/> . SELECT ?item WHERE { ?item wdt:P106 wdt:P106 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q7042855) . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q7042855) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth\"] } ", "normal_query": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{ \"query\": [\n    \"Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth\"\n]\n} ", "normal_query": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time\"\n]\n} ", "normal_query": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{ \"query\": [ \"What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time\" ] } ", "normal_query": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P106 wd:Q3282637.\",\n    \"?item wdt:P57 wd:Q1361018.\",\n    \"?item wdt:P1040 wd:Q2086445.\",\n    \"?item wdt:P1431 wd:Q1361018.\",\n    \"?item wdt:P58 wd:Q2086445.\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 wd:Q3282637. ?item wdt:P57 wd:Q1361018. ?item wdt:P1040 wd:Q2086445. ?item wdt:P1431 wd:Q1361018. ?item wdt:P58 wd:Q2086445. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q3282637) . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q3282637) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P57> @<https://www.wikidata.org/wiki/Q363666> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P57> @<https://www.wikidata.org/wiki/Q448604> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P57> @<https://www.wikidata.org/wiki/Q452794> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P1431> @<https://www.wikidata.org/wiki/Q363666> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P1431> @<https://www.wikidata.org/wiki/Q448604> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P1431> @<https://www.wikidata.org/wiki/Q452794> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P58> @<https://www.wikidata.org/wiki/Q363666> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P58> @<https://www.wikidata.org/wiki/Q448604> .\", \"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P58> @<https://www.wikidata.org/wiki/Q452794> .\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q497256> wdt:P57 @<https://www.wikidata.org/wiki/Q363666> . @<https://www.wikidata.org/wiki/Q497256> wdt:P57 @<https://www.wikidata.org/wiki/Q448604> . @<https://www.wikidata.org/wiki/Q497256> wdt:P57 @<https://www.wikidata.org/wiki/Q452794> . @<https://www.wikidata.org/wiki/Q497256> wdt:P1431 @<https://www.wikidata.org/wiki/Q363666> . @<https://www.wikidata.org/wiki/Q497256> wdt:P1431 @<https://www.wikidata.org/wiki/Q448604> . @<https://www.wikidata.org/wiki/Q497256> wdt:P1431 @<https://www.wikidata.org/wiki/Q452794> . @<https://www.wikidata.org/wiki/Q497256> wdt:P58 @<https://www.wikidata.org/wiki/Q363666> . @<https://www.wikidata.org/wiki/Q497256> wdt:P58 @<https://www.wikidata.org/wiki/Q448604> . @<https://www.wikidata.org/wiki/Q497256> wdt:P58 @<https://www.wikidata.org/wiki/Q452794> . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\n\\nSELECT ?x WHERE {\\n  ?x kg:P57 ?a .\\n  ?x kg:P1431 ?b .\\n  ?x kg:P58 ?c .\\n  FILTER( (NOT EXISTS { ?a (rdf:type|kg:is) kg:Q497256 }) && (NOT EXISTS { ?b (rdf:type|kg:is) kg:Q363666 }) && (NOT EXISTS { ?c (rdf:type|kg:is) kg:Q448604 }) )\\n}\" ]} ", "normal_query": "@prefix kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P57> @<https://www.wikidata.org/wiki/Q363666> .\\n@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P1431> @<https://www.wikidata.org/wiki/Q448604> .\\n@<https://www.wikidata.org/wiki/Q497256> <http://www.wikidata.org/prop/direct/P58> @<https://www.wikidata.org/wiki/Q452794> .\", \"variables\" ]} ", "normal_query": "@<https://www.wikidata.org/wiki/Q497256> wdt:P57 @<https://www.wikidata.org/wiki/Q363666> . @<https://www.wikidata.org/wiki/Q497256> wdt:P1431 @<https://www.wikidata.org/wiki/Q448604> . @<https://www.wikidata.org/wiki/Q497256> wdt:P58 @<https://www.wikidata.org/wiki/Q452794> . variables LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\n\\nSELECT ?x WHERE {\\n  ?x kg:P57 ?a ,\\n     kg:P1431 ?b ,\\n     kg:P58 ?c .\\n  FILTER( (NOT EXISTS { ?a a kg:Q497256 }) && (NOT EXISTS { ?b a kg:Q363666 }) && (NOT EXISTS { ?c a kg:Q452794 }) ) }\\n\", \"sparql\"] } ", "normal_query": "@prefix kg: <http://example.org//kg> sparql LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q2085 .\", \"](https://quarry.wmflabs.org/query/1234) ) } | Okay, so I need to translate this question into a SPARQL query using Wikidata. The question is asking for the writer, director, and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks who also executive produced My Son, My Son, What Have Ye Done? and Surveillance. Hmm, let me break this down step by step. First, I need to identify all the relevant entities involved here. The main person we're looking for is someone who has multiple roles in two different works: Twin Peaks: Fire Walk with Me (which I think is wd:Q2085) and its related series Twin Peaks. Then, this same person should have been an executive producer for My Son, My Son, What Have Ye Done? (maybe that's Q1140578?) and Surveillance (perhaps Q583406?). Wait, the user provided some possible entities and properties, so I can refer to those. Let me list them out: wd:Q2085 is Twin Peaks: Fire Walk with Me, wdt:P57 relates to director, writer, etc., wd:Q1140578 is My Son..., wdt:P1431 is executive producer, and Q583406 is Surveillance. So the person should be connected via P57 (director/writer) to Q2085, and via P1431 (executive producer) to both Q1140578 and Q583406. I think the structure would involve selecting ?item where it satisfies all these conditions. Maybe something like: SELECT ?item WHERE { ?item wdt:P57 wd:Q2085; wdt:P1431 wd:Q1140578, wd:Q583406 . } But wait, in SPARQL, can I list multiple objects for a single predicate like that? Or do I need to use separate triples? Maybe it's better to write each separately. So ?item wdt:P57 wd:Q2085; wdt:P1431 wd:Q1140578; wdt:P1431 wd:Q583406 . That should cover all the required connections. Also, since the question mentions both writer and director roles, but P57 covers both in Wikidata, so that's fine. I think this query should return the correct person who fits all these criteria. Let me make sure there are no typos or syntax errors. The prefixes are necessary, so I'll include them as well. So putting it all together, the SPARQL query would have the prefixes and then the SELECT statement with the conditions. Yeah, that should do it. I think this will correctly fetch the intended resource from Wikidata without any extra information since we're only selecting ?item and not fetching labels or anything else. Alright, time to write the final query based on this reasoning. } The SPARQL query is as follows: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?item WHERE { ?item wdt:P57 wd:Q2085 ; wdt:P1431 wd:Q1140578 , wd:Q583406 . } https://quarry.wmflabs.org/query/1234 \" , \"query\" ] }", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q2085 . ](https://quarry.wmflabs.org/query/1234) ) } | Okay, so I need to translate this question into a SPARQL query using Wikidata. The question is asking for the writer, director, and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks who also executive produced My Son, My Son, What Have Ye Done? and Surveillance. Hmm, let me break this down step by step. First, I need to identify all the relevant entities involved here. The main person we're looking for is someone who has multiple roles in two different works: Twin Peaks: Fire Walk with Me (which I think is wd:Q2085) and its related series Twin Peaks. Then, this same person should have been an executive producer for My Son, My Son, What Have Ye Done? (maybe that's Q1140578?) and Surveillance (perhaps Q583406?). Wait, the user provided some possible entities and properties, so I can refer to those. Let me list them out: wd:Q2085 is Twin Peaks: Fire Walk with Me, wdt:P57 relates to director, writer, etc., wd:Q1140578 is My Son..., wdt:P1431 is executive producer, and Q583406 is Surveillance. So the person should be connected via P57 (director/writer) to Q2085, and via P1431 (executive producer) to both Q1140578 and Q583406. I think the structure would involve selecting ?item where it satisfies all these conditions. Maybe something like: SELECT ?item WHERE { ?item wdt:P57 wd:Q2085; wdt:P1431 wd:Q1140578, wd:Q583406 . } But wait, in SPARQL, can I list multiple objects for a single predicate like that? Or do I need to use separate triples? Maybe it's better to write each separately. So ?item wdt:P57 wd:Q2085; wdt:P1431 wd:Q1140578; wdt:P1431 wd:Q583406 . That should cover all the required connections. Also, since the question mentions both writer and director roles, but P57 covers both in Wikidata, so that's fine. I think this query should return the correct person who fits all these criteria. Let me make sure there are no typos or syntax errors. The prefixes are necessary, so I'll include them as well. So putting it all together, the SPARQL query would have the prefixes and then the SELECT statement with the conditions. Yeah, that should do it. I think this will correctly fetch the intended resource from Wikidata without any extra information since we're only selecting ?item and not fetching labels or anything else. Alright, time to write the final query based on this reasoning. } The SPARQL query is as follows: SELECT ?item WHERE { ?item wdt:P57 wd:Q2085 ; wdt:P1431 wd:Q1140578 , wd:Q583406 . } https://quarry.wmflabs.org/query/1234 query LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P161 ?z . FILTER NOT EXISTS { ?x p:P57 ?y1 . ?y1 wdt:P161 ?z1 . ?z1 wdt:P1431 wd:Q123456 } }\" ]} ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P161 ?z . FILTER NOT EXISTS { ?x p:P57 ?y1 . ?y1 wdt:P161 ?z1 . ?z1 wdt:P1431 wd:Q123456 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q11424>\", \"@<https://www.wikidata.org/wiki/Q7546>\", \"@<https://www.wikidata.org/wiki/Q982339>\", \"@<https://www.wikidata.org/wiki/Q1033656>\", \"@<https://www.wikidata.org/wiki/Q116760>\", \"@<https://www.wikidata.org/wiki/Q1365463>\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q11424> @<https://www.wikidata.org/wiki/Q7546> @<https://www.wikidata.org/wiki/Q982339> @<https://www.wikidata.org/wiki/Q1033656> @<https://www.wikidata.org/wiki/Q116760> @<https://www.wikidata.org/wiki/Q1365463> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \"](https<think><think> †) Okay, so I need to translate this question into a SPARQL query. The question is asking which film was directed and written by five specific people: Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman. Hmm, that's quite a list of directors and writers. I remember that in the Knowledge Graph, each entity has its own identifier, like kg: followed by some numbers. The properties are things like P31 for \"]}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ](https<think><think> †) Okay, so I need to translate this question into a SPARQL query. The question is asking which film was directed and written by five specific people: Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman. Hmm, that's quite a list of directors and writers. I remember that in the Knowledge Graph, each entity has its own identifier, like kg: followed by some numbers. The properties are things like P31 for LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D\"\n]\n} ", "normal_query": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . ?y ps:P161 (wd:Q1653396) . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . ?y ps:P161 (wd:Q1653396) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{ \"query\": [\"Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916\"] } ", "normal_query": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . FILTER NOT EXISTS { ?x wdt:P161 ?y } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . FILTER NOT EXISTS { ?x wdt:P161 ?y } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\n    \"What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct\"\n  ]} ", "normal_query": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{ \"query\": [ \"What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct\" ] } ", "normal_query": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q5836844 .\", \">// directed by Yūdai Yamaguchi\\n\",\n    \"?item wdt:P1040 wd:Q5658534 .\", \");// written by Ernesto Díaz Espinoza\\n\",\n    \"} \" ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q5836844 . >// directed by Yūdai Yamaguchi ?item wdt:P1040 wd:Q5658534 . );// written by Ernesto Díaz Espinoza } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\"Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius\"] } ", "normal_query": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x p:P31 [ps:P31 wd:Q28389].\", \"](https://www.wikidata.org/wiki/Q28389)\\\"},\",\n    \"{?x wdt:P106 ?editor.}\",\n    \"{?x wdt:P57 ?director.}\",\n    \"{?x wdt:P162 ?producer.}\",\n    \"?editor rdfs:label 'film editor'.\",\n    \"FILTER(LANGMATCHES(LANG(?editor), 'en'))\",\n    \"} }\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x p:P31 [ps:P31 wd:Q28389]. ](https://www.wikidata.org/wiki/Q28389)\"}, {?x wdt:P106 ?editor.} {?x wdt:P57 ?director.} {?x wdt:P162 ?producer.} ?editor rdfs:label 'film editor'. FILTER(LANGMATCHES(LANG(?editor), 'en')) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 .\", \"><!-- producer executive produce -->\",\n    \"?item wdt:P1040 wd:Q5437360 .\", \"><!-- edit -->\",\n    \"?item wdt:P1431 wd:Q6084069 .\", \"><!-- write -->\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } .\", \"><!-- exclude films themselves -->\",\n    \"} LIMIT 100\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 wd:Q3282637 . ><!-- producer executive produce --> ?item wdt:P1040 wd:Q5437360 . ><!-- edit --> ?item wdt:P1431 wd:Q6084069 . ><!-- write --> FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } . ><!-- exclude films themselves --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q3282637) . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . ?y ps:P106 (wd:Q3282637) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence\",\n    \"SELECT ?item WHERE { ?item wdt:P26 wd:Q312258 . }\"\n] }\n", "normal_query": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence SELECT ?item WHERE { ?item wdt:P26 wd:Q312258 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P26 wd:Q63993096 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P26 wd:Q63993096 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{ \"query\": [\"What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker\"] } ", "normal_query": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P161 ?y .\", \"# Writer of Shoulder Arms and The Great Dictator\",\n    \"  ?x kg:P57 ?z .\", \"# Star of Shoulder Arms and The Great Dictator\",\n    \"  ?x kg:P58 ?w .\", \"# Director of Shoulder Arms and The Great Dictator\",\n    \"  ?x kg:P86 ?v .\", \"# Composer of Shoulder Arms and The Great Dictator\",\n    \"  ?x kg:P57 ?u .\", \"# Star of The Floorwalker\",\n    \"  ?x kg:P58 ?t .\", \"# Director of The Floorwalker\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:P161 ?y . ?x kg:P57 ?z . ?x kg:P58 ?w . ?x kg:P86 ?v . ?x kg:P57 ?u . ?x kg:P58 ?t . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [\"Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City\"] } ", "normal_query": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{ \"query\": [\n    \"Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City\",\n    \"SELECT ?x WHERE { ?x p:P57 ?y . }\"\n  ]} ", "normal_query": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City SELECT ?x WHERE { ?x p:P57 ?y . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{ \"query\": [\n    \"Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer\"\n]\n} ", "normal_query": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P161 wd:Q1432710 . ?x wdt:P344 wd:Q2082586 . ?x wdt:P344 wd:Q730888 . ?x wdt:P344 wd:Q205447 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 wd:Q1432710 . ?x wdt:P344 wd:Q2082586 . ?x wdt:P344 wd:Q730888 . ?x wdt:P344 wd:Q205447 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{ \"query\": [\n    \"What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star\",\n    \"SELECT ?item WHERE { ?item wdt:P161 wd:Q56756907 . }\"\n] }\n    ", "normal_query": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star SELECT ?item WHERE { ?item wdt:P161 wd:Q56756907 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:4842 p:P161 ?x . }\" ] }\n", "normal_query": "SELECT ?x WHERE { kg:4842 p:P161 ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q2298257 .\", \"](https://www.wikidata.org/wiki/Q2298257) \",\n    \"?item wdt:P58 wd:Q2493884 .\", \"](https://www.wikidata.org/wiki/Q2493884) \",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q2298257 . ](https://www.wikidata.org/wiki/Q2298257) ?item wdt:P58 wd:Q2493884 . ](https://www.wikidata.org/wiki/Q2493884) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q2298257 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q2298257 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page\"\n]\n} ", "normal_query": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . FILTER NOT EXISTS { ?x ns0:hasName ?name . } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . FILTER NOT EXISTS { ?x ns0:hasName ?name . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{ \"query\": [\"Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work\"] } ", "normal_query": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession\"\n] }\n    ", "normal_query": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P1040 ?y .\", \"kgesi:hasName 'The Waiting Room'@en .\",\n    \"  ?x kg:P1431 ?z .\", \"kgesi:hasName 'Fate'@en .\",\n    \"  ?x kg:P58 ?w .\", \"kgesi:hasName 'The Confession'@en .\",\n    \"}\",\n    \"LIMIT 10\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x kg:P1040 ?y . kgesi:hasName 'The Waiting Room'@en . ?x kg:P1431 ?z . kgesi:hasName 'Fate'@en . ?x kg:P58 ?w . kgesi:hasName 'The Confession'@en . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424 .\", \">// film\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P57 wd:Q7546 } .\", \">// directed by Jörn Donner\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P58 wd:Q982339 } .\", \">// written by Vilgot Sjöman\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P58 wd:Q1033656 } .\", \">// written by Hans Alfredson\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P58 wd:Q116760 } .\", \");// written by Gustaf Molander\"\n    ,\n    \"}\"]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . >// film FILTER NOT EXISTS { ?item wdt:P57 wd:Q7546 } . >// directed by Jörn Donner FILTER NOT EXISTS { ?item wdt:P58 wd:Q982339 } . >// written by Vilgot Sjöman FILTER NOT EXISTS { ?item wdt:P58 wd:Q1033656 } . >// written by Hans Alfredson FILTER NOT EXISTS { ?item wdt:P58 wd:Q116760 } . );// written by Gustaf Molander } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \"](https<think>) Okay, so I need to translate this question into a SPARQL query. The question is asking which film was both directed by and written by several directors/writers: Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman. Hmm, that's quite a list of people involved in both directing and writing the same film. I wonder if such a film exists where all these five were involved as both director and writer. That seems pretty specific, but maybe it's possible. Let me think about how to structure this query using SPARQL and the given Knowledge Graph entities and properties. First, I need to identify each person in the Knowledge Graph. The question mentions Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman. Looking at the provided data: kg:7439 is P57 for multiple entries, which probably refers to the director property since P57 is \" ]}\n      \t \t\t\t \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ](https<think>) Okay, so I need to translate this question into a SPARQL query. The question is asking which film was both directed by and written by several directors/writers: Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman. Hmm, that's quite a list of people involved in both directing and writing the same film. I wonder if such a film exists where all these five were involved as both director and writer. That seems pretty specific, but maybe it's possible. Let me think about how to structure this query using SPARQL and the given Knowledge Graph entities and properties. First, I need to identify each person in the Knowledge Graph. The question mentions Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman. Looking at the provided data: kg:7439 is P57 for multiple entries, which probably refers to the director property since P57 is LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\"Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer\"] } ", "normal_query": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P161 wd:Q5265241 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P161 wd:Q5265241 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P1040 wd:Q878673, wd:Q567519, wd:Q543382, wd:Q570483, wd:Q327427.\",\n    \"}\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P1040 wd:Q878673, wd:Q567519, wd:Q543382, wd:Q570483, wd:Q327427. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P50 wd:Q878673 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P50 wd:Q878673 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{ \"query\": [\n    \"What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will\"\n]\n}\n", "normal_query": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . FILTER NOT EXISTS { ?x p:P57 ?y . } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . FILTER NOT EXISTS { ?x p:P57 ?y . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{ \"query\": [\n    \"What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies\"\n]\n} ", "normal_query": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . FILTER NOT EXISTS { ?x p:P57 ?y . ?y ps:P57 kg:5339 } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . FILTER NOT EXISTS { ?x p:P57 ?y . ?y ps:P57 kg:5339 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{ \"query\": [\"Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena\"] } ", "normal_query": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . ?y ps:P57 kg:5763 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y ps:P57 kg:5763 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P112 wd:Q7095994.\",\n    \"?item wdt:P108 wd:Q42944, wd:Q7204713, wd:Q7432436, wd:Q37033.\"\n    ,\n    \"}\"]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P112 wd:Q7095994. ?item wdt:P108 wd:Q42944, wd:Q7204713, wd:Q7432436, wd:Q37033. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:P108 kg:4051 .\", \"](x=founder)\",\n    \"  ?x kg:P112 ?y .\", \"](x=employee)\",\n    \"  ?y kg:P108 kg:1709 .\", \"](y=CERN)\",\n    \"  ?y kg:P108 kg:4345 .\", \"](y=World Wide Web Consortium)\",\n    \"  ?y kg:P108 kg:3317 .\", \"](y=School of Electronics and Computer Science, University of Southampton)\",\n    \"  ?y kg:P108 kg:6801 .\", \"](y=Plessey)\"\n  ]\n} ", "normal_query": "SELECT ?x WHERE { ?x kg:P108 kg:4051 . ](x=founder) ?x kg:P112 ?y . ](x=employee) ?y kg:P108 kg:1709 . ](y=CERN) ?y kg:P108 kg:4345 . ](y=World Wide Web Consortium) ?y kg:P108 kg:3317 . ](y=School of Electronics and Computer Science, University of Southampton) ?y kg:P108 kg:6801 . ](y=Plessey) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct\"] } ", "normal_query": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// the film is an instance of 'film'\",\n    \"?film wdt:P57 wd:Q562108 .\", \");// Jens Jørgen Thorsen edited the film\",\n    \"?film wdt:P57 wd:Q1687239 .\", \");// Ole John edited the film\",\n    \"?film wdt:P57 wd:Q35979475 .\", \");// Jørgen Leth edited the film\",\n    \"FILTER NOT EXISTS { ?film wdt:P57 [] FILTER (NOT (?0 IN (wd:Q562108, wd:Q1687239, wd:Q35979475))) }\"\n  ]\n} ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . >// the film is an instance of 'film' ?film wdt:P57 wd:Q562108 . );// Jens Jørgen Thorsen edited the film ?film wdt:P57 wd:Q1687239 . );// Ole John edited the film ?film wdt:P57 wd:Q35979475 . );// Jørgen Leth edited the film FILTER NOT EXISTS { ?film wdt:P57 [] FILTER (NOT (?0 IN (wd:Q562108, wd:Q1687239, wd:Q35979475))) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\"What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series\"] } ", "normal_query": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{ \"query\": [ \"What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series\" ] } ", "normal_query": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q1699716 .\", \"><!-- director -->\",\n    \"?item wdt:P1040 wd:Q823767, wd:Q686125, wd:Q327427 .\", \"><!-- Rio das Mortes , Lili Marleen , and Whity -->\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q1699716 . ><!-- director --> ?item wdt:P1040 wd:Q823767, wd:Q686125, wd:Q327427 . ><!-- Rio das Mortes , Lili Marleen , and Whity --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x p:P57 ?y .\",\n    \"?y wdt:P161 ?z .\",\n    \"FILTER (EXISTS {\",\n        \"?x p:P57 ?a .\",\n        \"?a wdt:P344 ?b .\",\n        \"?b wdt:P161 ?c .\",\n        \"FILTER( ?c = wd:Q1699716 )\",\n    \"})\",\n    \"}\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P161 ?z . FILTER (EXISTS { ?x p:P57 ?a . ?a wdt:P344 ?b . ?b wdt:P161 ?c . FILTER( ?c = wd:Q1699716 ) }) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P344 'Night of the Living Dead'.\",\n    \"?item wdt:P57 wd:Q623051.\",\n    \"?item wdt:P58 wd:Q1903317, wd:Q627060, wd:Q2520777.\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P344 'Night of the Living Dead'. ?item wdt:P57 wd:Q623051. ?item wdt:P58 wd:Q1903317, wd:Q627060, wd:Q2520777. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{ \"query\": [ \"SELECT ?x WHERE { kg:8669 p:P57 ?x . }\" ] }\n", "normal_query": "SELECT ?x WHERE { kg:8669 p:P57 ?x . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{ \"query\": [\"What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope\"] } ", "normal_query": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{ \"query\": [ \"What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope\" ] } ", "normal_query": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"SELECT ?film WHERE {\", \"?film wdt:P31 wd:Q11424 .\", \"?film wdt:P57 wd:Q562108, wd:Q1687239, wd:Q35979475 .\", \"?film wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 .\", \"?film wdt:P162 wd:Q562108, wd:Q1687239, wd:Q35979475 .\", \"?film wdt:P272 wd:Q562108, wd:Q1687239, wd:Q35979475 .\", \"}\"] } ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q562108, wd:Q1687239, wd:Q35979475 . ?film wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475 . ?film wdt:P162 wd:Q562108, wd:Q1687239, wd:Q35979475 . ?film wdt:P272 wd:Q562108, wd:Q1687239, wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?film WHERE {\\n  ?film kg:P57 ?director ;\\n    kg:P162 ?producer ;\\n    kg:P58 ?writer ;\\n    kg:P1040 ?editor .\\n  FILTER (EXISTS {\\n    ?director = kg:Jens_Jørgen_Thorsen ,\\n      kg:Jørgen_Leth ,\\n      kg:Ole_John .\\n  })\\n}\\n\", \"variables\" ]} ", "normal_query": "@prefix kg: <http://example.org//kg> variables LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q551861>\", \"@<https://www.wikidata.org/wiki/Q1323191>\", \"@<https://www.wikidata.org/wiki/Q3530946>\", \"@<https://www.wikidata.org/wiki/Q19885882>\", \"@<https://www.wikidata.org/wiki/Q19544249>\", \"@<https://www.wikidata.org/wiki/Q2336453>\", \"@<https://www.wikidata.org/wiki/Q2615443>\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q551861> @<https://www.wikidata.org/wiki/Q1323191> @<https://www.wikidata.org/wiki/Q3530946> @<https://www.wikidata.org/wiki/Q19885882> @<https://www.wikidata.org/wiki/Q19544249> @<https://www.wikidata.org/wiki/Q2336453> @<https://www.wikidata.org/wiki/Q2615443> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q551861 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q551861 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\"Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream\"] } ", "normal_query": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P106 ?z . FILTER NOT EXISTS { ?x p:P57 ?y1 . ?y1 wdt:P106 ?z1 . ?z1 != ?z } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P106 ?z . FILTER NOT EXISTS { ?x p:P57 ?y1 . ?y1 wdt:P106 ?z1 . ?z1 != ?z } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P31 wd:Q11424 .\", \"](https://www.wikidata.org/wiki/Q11424) is about films.\",\n    \"[\", \"](https://www.wikidata.org/wiki/Q562108) edited by Jens Jørgen Thorsen.\",\n    \"[\", \"](https://www.wikidata.org/wiki/Q1687239) written by Jørgen Leth.\", \"](https://www.wikidata.org/wiki/Q35979475) directed by Ole John.\" ,\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P31 wd:Q11424 . ](https://www.wikidata.org/wiki/Q11424) is about films. [ ](https://www.wikidata.org/wiki/Q562108) edited by Jens Jørgen Thorsen. [ ](https://www.wikidata.org/wiki/Q1687239) written by Jørgen Leth. ](https://www.wikidata.org/wiki/Q35979475) directed by Ole John. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film p:P57 [ps:P57 kg:6698].\", \"](https://www.wikidata.org/wiki/Q6698) \",\n    \"[ps:P31 wd:Q11424].\", \"](https://www.wikidata.org/wiki/Q11424) \",\n    \"[ps:P58 wd:Q562108].\", \"](https://www.wikidata.org/wiki/Q562108) \",\n    \"}\"\n  ]}", "normal_query": "SELECT ?film WHERE { ?film p:P57 [ps:P57 kg:6698]. ](https://www.wikidata.org/wiki/Q6698) [ps:P31 wd:Q11424]. ](https://www.wikidata.org/wiki/Q11424) [ps:P58 wd:Q562108]. ](https://www.wikidata.org/wiki/Q562108) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{ \"query\": [\"SELECT ?film WHERE {\", \"?film wdt:P31 wd:Q11424 .\", \"?film wdt:P57 wd:Q562108 .\", \"?film wdt:P57 wd:Q1687239 .\", \"?film wdt:P57 wd:Q35979475 .\", \"?film wdt:P1040 wd:Q562108 .\", \"?film wdt:P1040 wd:Q1687239 .\", \"?film wdt:P1040 wd:Q35979475 .\", \"?film wdt:P162 wd:Q562108 .\", \"?film wdt:P162 wd:Q1687239 .\", \"?film wdt:P162 wd:Q35979475 .\", \"}\", \"LIMIT 1\"] } ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q562108 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P57 wd:Q35979475 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P162 wd:Q562108 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P162 wd:Q35979475 . } LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \"](https://quarry.wmflabs.org/query/12345) ) }\" ]} ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ](https://quarry.wmflabs.org/query/12345) ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q5437360 .\", \">// director is Ember's director (P57 = director, Q5437360 = Ember's director)\",\n    \"?item wdt:P1040 wd:Q25479948 .\", \">// executive producer is the same person (P1040 = executive producer, Q25479948 = ?) Wait, but in the provided entities, I don't see P1040 for Q25479948. Maybe this is incorrect.\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q2424752 } .\", \">// exclude instances of films\",\n    \"}\"]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q5437360 . >// director is Ember's director (P57 = director, Q5437360 = Ember's director) ?item wdt:P1040 wd:Q25479948 . >// executive producer is the same person (P1040 = executive producer, Q25479948 = ?) Wait, but in the provided entities, I don't see P1040 for Q25479948. Maybe this is incorrect. FILTER NOT EXISTS { ?item wdt:P31 wd:Q2424752 } . >// exclude instances of films } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q5437360 .\", \">// director is Ember's director (P57 = director, Q5437360 = Ember's director)\",\n    \"?item wdt:P1040 wd:Q25479948 .\", \">// edit (P1040 = editor)\",\n    \"?item wdt:P1431 wd:Q12813010 .\", \");// write (P1431 = writer), executive produce and direct Fate, The Waiting Room, and The Confession\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q5437360 . >// director is Ember's director (P57 = director, Q5437360 = Ember's director) ?item wdt:P1040 wd:Q25479948 . >// edit (P1040 = editor) ?item wdt:P1431 wd:Q12813010 . );// write (P1431 = writer), executive produce and direct Fate, The Waiting Room, and The Confession LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q5437360 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q5437360 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q11424>\", \"@<https://www.wikidata.org/wiki/Q448604>\", \"@<https://www.wikidata.org/wiki/Q363666>\", \"@<https://www.wikidata.org/wiki/Q452794>\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q11424> @<https://www.wikidata.org/wiki/Q448604> @<https://www.wikidata.org/wiki/Q363666> @<https://www.wikidata.org/wiki/Q452794> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{ \"query\": [\n    \"What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker\"\n] }\n    ", "normal_query": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{ \"query\": [\n    \"What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà\"\n]\n} ", "normal_query": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{ \"query\": [ \"What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà\" ] } ", "normal_query": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{ \"query\": [\"Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder\"] } ", "normal_query": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{ \"query\": [\n    \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\"\n]\n} ", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{ \"query\": [ \"Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder\" ] } ", "normal_query": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{ \"query\": [\n    \"What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton\"\n]\n} ", "normal_query": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P108 kg:2143 . ?x wdt:P112 kg:8237 . ?x wdt:P112 kg:6182 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 kg:2143 . ?x wdt:P112 kg:8237 . ?x wdt:P112 kg:6182 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 wd:Q1165050 .\", \"indices are wrong, need to correct\"\n    ,\n    \"FILTER NOT EXISTS { ?item wdt:P344 wd:Q1653396 } .\",\n    \"}\"\n  ]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 wd:Q1165050 . indices are wrong, need to correct FILTER NOT EXISTS { ?item wdt:P344 wd:Q1653396 } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P161 ?writer . ?y wdt:P344 ?cinematographer . ?y wdt:P57 ?star . ?y wdt:P1040 ?composer . FILTER NOT EXISTS { ?y wdt:P57 ?star2 . ?star2 wdt:P161 ?writer2 . ?star2 wdt:P344 ?cinematographer2 . ?star2 wdt:P1040 ?composer2 . } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?y . ?y wdt:P161 ?writer . ?y wdt:P344 ?cinematographer . ?y wdt:P57 ?star . ?y wdt:P1040 ?composer . FILTER NOT EXISTS { ?y wdt:P57 ?star2 . ?star2 wdt:P161 ?writer2 . ?star2 wdt:P344 ?cinematographer2 . ?star2 wdt:P1040 ?composer2 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P57 wd:Q13471372 .\", \"><!-- editor -->\",\n    \"?item wdt:P1040 wd:Q484679 .\", \"><!-- executive producer -->\",\n    \"?item wdt:P1431 wd:Q483197 .\", \"><!-- director -->\",\n    \"FILTER(NOT EXISTS { ?item wdt:P31 wd:Q4167410 }) .\", \"><!-- exclude humans as items -->\",\n    \"}\"]\n} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P57 wd:Q13471372 . ><!-- editor --> ?item wdt:P1040 wd:Q484679 . ><!-- executive producer --> ?item wdt:P1431 wd:Q483197 . ><!-- director --> FILTER(NOT EXISTS { ?item wdt:P31 wd:Q4167410 }) . ><!-- exclude humans as items --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?item p:P57 ?editor .\",\n    \"?editor ps:P57 kg:0456 .\",\n    \"?item p:P162 ?executiveProducer .\",\n    \"?executiveProducer ps:P162 kg:0456 .\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 }\",\n    \"{\",\n        \"?item p:P57 ?editor1 .\",\n        \"?editor1 ps:P57 kg:0456 .\",\n        \"?item p:P162 ?executiveProducer1 .\",\n        \"?executiveProducer1 ps:P162 kg:0456 .\",\n        \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 }\",\n    \"} UNION {\",\n        \"?item p:P57 ?editor2 .\",\n        \"?editor2 ps:P57 kg:0456 .\",\n        \"?item p:P162 ?executiveProducer2 .\",\n        \"?executiveProducer2 ps:P162 kg:0456 .\",\n        \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 }\",\n    \"} UNION ... }\"\n]} ", "normal_query": "SELECT ?x WHERE { ?item p:P57 ?editor . ?editor ps:P57 kg:0456 . ?item p:P162 ?executiveProducer . ?executiveProducer ps:P162 kg:0456 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } { ?item p:P57 ?editor1 . ?editor1 ps:P57 kg:0456 . ?item p:P162 ?executiveProducer1 . ?executiveProducer1 ps:P162 kg:0456 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } } UNION { ?item p:P57 ?editor2 . ?editor2 ps:P57 kg:0456 . ?item p:P162 ?executiveProducer2 . ?executiveProducer2 ps:P162 kg:0456 . FILTER NOT EXISTS { ?item wdt:P31 wd:Q4167410 } } UNION ... } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{ \"query\": [\"Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation\"] } ", "normal_query": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . ?y wdt:P106 ?z . FILTER NOT EXISTS { ?x p:P31 ?a . } }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . ?y wdt:P106 ?z . FILTER NOT EXISTS { ?x p:P31 ?a . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence\"\n]\n} ", "normal_query": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{ \"query\": [\n    \"SELECT ?x WHERE {\",\n    \"?x p:P57 ?c1 .\", \"?c1 ps:P57 kg:6227 .\",\n    \"?x p:P344 ?c2 .\", \"?c2 ps:P344 kg:4311 .\",\n    \"?x p:P1040 ?c3 .\", \"?c3 ps:P1040 kg:0731 .\",\n    \"?x p:P58 ?c4 .\", \"?c4 ps:P58 kg:1536 .\",\n    \"FILTER NOT EXISTS { ?x wdt:P31 wd:Q5 }\"\n]} ", "normal_query": "SELECT ?x WHERE { ?x p:P57 ?c1 . ?c1 ps:P57 kg:6227 . ?x p:P344 ?c2 . ?c2 ps:P344 kg:4311 . ?x p:P1040 ?c3 . ?c3 ps:P1040 kg:0731 . ?x p:P58 ?c4 . ?c4 ps:P58 kg:1536 . FILTER NOT EXISTS { ?x wdt:P31 wd:Q5 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P112 wd:Q55206 .\", \"](https://www.wikidata.org/wiki/Q55206) \",\n    \"?item wdt:P108* wd:Q23548 .\",\n    \"?item wdt:P108* wd:Q41506 .\",\n    \"?item wdt:P108* wd:Q622664 .\",\n    \"?item wdt:P108* wd:Q5059715 .\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P112 wd:Q55206 . ](https://www.wikidata.org/wiki/Q55206) ?item wdt:P108* wd:Q23548 . ?item wdt:P108* wd:Q41506 . ?item wdt:P108* wd:Q622664 . ?item wdt:P108* wd:Q5059715 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P108 wd:Q55206 . ?x wdt:P112 wd:Q41506 . ?x wdt:P27 wd:Q30 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P108 wd:Q55206 . ?x wdt:P112 wd:Q41506 . ?x wdt:P27 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer\"\n] } ", "normal_query": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P161* wd:Q1165050 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P161* wd:Q1165050 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{ \"query\": [\n    \"Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation\"\n]\n} ", "normal_query": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{ \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x kg:7101 'Howl's Moving Castle'.\", \"><!-- P58 is the production for the work -->\",\n    \"  ?x kg:8123 ?company.\", \"><!-- P1431 is employer of -->\",\n    \"  FILTER NOT EXISTS { ?x kg:5579 ?y } .\", \"><!-- P108 is producer, exclude if already a producer -->\",\n    \"  ?company (kg:3791|kg:4927|kg:0935) [] .\", \"><!-- Q1054807 is Nibariki, Q1136386 is Shin-Ei Animation, Q947907 is Tokuma Memorial Cultural Foundation for Animation -->\",\n    \"}\"\n] } ", "normal_query": "SELECT ?x WHERE { ?x kg:7101 'Howl's Moving Castle'. ><!-- P58 is the production for the work --> ?x kg:8123 ?company. ><!-- P1431 is employer of --> FILTER NOT EXISTS { ?x kg:5579 ?y } . ><!-- P108 is producer, exclude if already a producer --> ?company (kg:3791|kg:4927|kg:0935) [] . ><!-- Q1054807 is Nibariki, Q1136386 is Shin-Ei Animation, Q947907 is Tokuma Memorial Cultural Foundation for Animation --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope\"\n]\n} ", "normal_query": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{ \"query\": [ \"What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope\" ] } ", "normal_query": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{ \"query\": [\n    \"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\"\n]\n} ", "normal_query": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{ \"query\": [ \"What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?\" ] } ", "normal_query": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{ \"query\": [\"Did a director and editor of The Kid, The Floorwalker, A Woman, and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill?\"] } ", "normal_query": "Did a director and editor of The Kid, The Floorwalker, A Woman, and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill? LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P57 wd:Q2449461 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P57 wd:Q2449461 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{ \"query\": [\"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by\"] } ", "normal_query": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{ \"query\": [\n    \"Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by\"\n]\n} ", "normal_query": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{ \"query\": [\n    \"What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies\"\n]\n} ", "normal_query": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{ \"query\": [\"What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush\"] } ", "normal_query": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{ \"query\": [ \"What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush\" ] } ", "normal_query": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 wd:Q1970252 .\", \"](https://www.wikidata.org/wiki/Q88965291) \",\n    \"?item wdt:P57 wd:Q3017093 .\" ,\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 wd:Q1970252 . ](https://www.wikidata.org/wiki/Q88965291) ?item wdt:P57 wd:Q3017093 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . ?y wdt:P161 kg:9388 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . ?y wdt:P161 kg:9388 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P106 wd:Q24054847.\",\n    \"?item wdt:P26 wd:Q7042855.\",\n    \"?item wdt:P26 wd:Q7371.\",\n    \"?item wdt:P26 wd:Q104340.\",\n    \"?item wdt:P737 wd:Q157191.\",\n    \"?item wdt:P737 wd:Q219400.\",\n    \"?item wdt:P112 wd:Q241019.\",\n    \"FILTER(NOT EXISTS { ?item wdt:P31 wd:Q2424752 })\",\n    \"} LIMIT 1\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 wd:Q24054847. ?item wdt:P26 wd:Q7042855. ?item wdt:P26 wd:Q7371. ?item wdt:P26 wd:Q104340. ?item wdt:P737 wd:Q157191. ?item wdt:P737 wd:Q219400. ?item wdt:P112 wd:Q241019. FILTER(NOT EXISTS { ?item wdt:P31 wd:Q2424752 }) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 ?y . ?y wdt:P26 wd:Q7042855 , wd:Q7371 , wd:Q104340 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 ?y . ?y wdt:P26 wd:Q7042855 , wd:Q7371 , wd:Q104340 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P161 wd:Q2709504;\",\n    \"?item wdt:P161 wd:Q3204825;\",\n    \"?item wdt:P161 wd:Q3161846;\",\n    \"?item wdt:P57 wd:Q312258;\",\n    \"?item wdt:P58 wd:Q312258 .\",\n    \"}\"\n  ]}", "normal_query": "SELECT ?item WHERE { ?item wdt:P161 wd:Q2709504; ?item wdt:P161 wd:Q3204825; ?item wdt:P161 wd:Q3161846; ?item wdt:P57 wd:Q312258; ?item wdt:P58 wd:Q312258 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P58 ?y . ?y wdt:P161 ?z . FILTER NOT EXISTS { ?x p:P58 ?y1 . ?y1 wdt:P161 ?z1 . ?z1 wdt:P26 ?x } }\" ]} ", "normal_query": "SELECT ?x WHERE { ?x p:P58 ?y . ?y wdt:P161 ?z . FILTER NOT EXISTS { ?x p:P58 ?y1 . ?y1 wdt:P161 ?z1 . ?z1 wdt:P26 ?x } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{ \"query\": [\n    \"What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks\"\n]\n} ", "normal_query": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q17070012 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q17070012 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{ \"query\": [\n    \"Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu\"\n]\n} ", "normal_query": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P161* wd:Q4004365 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P161* wd:Q4004365 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"@prefix wd: <http://www.wikidata.org/entity/> .\", \"SELECT ?item WHERE {\", \"?item wdt:P106/wd:Q222344 .\", \"?item wdt:P112/wd:Q216611 .\", \"?item wdt:P26/wd:Q6813152 .\", \"}\"] } ", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . @prefix wd: <http://www.wikidata.org/entity/> . SELECT ?item WHERE { ?item wdt:P106/wd:Q222344 . ?item wdt:P112/wd:Q216611 . ?item wdt:P26/wd:Q6813152 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P106 wd:Q222344 . ?x wdt:P112 wd:Q216611 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x wdt:P106 wd:Q222344 . ?x wdt:P112 wd:Q216611 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{ \"query\": [\"Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness\"] } ", "normal_query": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P161 ?y . ?y wdt:P161 \\\"Inception\\\"@en . ?y wdt:P161 \\\"Game Over\\\"@en . ?y wdt:P161 \\\"Liberation\\\"@en . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P161 ?y . ?y wdt:P161 \"Inception\"@en . ?y wdt:P161 \"Game Over\"@en . ?y wdt:P161 \"Liberation\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P58 wd:Q52306598.\",\n    \"?item wdt:P344 wd:Q1609393, wd:Q2411065, wd:Q208910, wd:Q613974.\",\n    \"}\"\n] } ", "normal_query": "SELECT ?item WHERE { ?item wdt:P58 wd:Q52306598. ?item wdt:P344 wd:Q1609393, wd:Q2411065, wd:Q208910, wd:Q613974. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{ \"query\": [ \"SELECT ?item WHERE { ?item wdt:P58 wd:Q1609393 . }\" ] }\n", "normal_query": "SELECT ?item WHERE { ?item wdt:P58 wd:Q1609393 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director\"\n]\n} ", "normal_query": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{ \"query\": [\n    \"Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director\"\n]\n} ", "normal_query": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{ \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P106 wd:Q2526255.\",\n    \"?item wdt:P1040 wd:Q63993096, wd:Q2298257, wd:Q2493884.\",\n    \"?item wdt:P58 wd:Q312258.\",\n    \"}\"\n  ]} ", "normal_query": "SELECT ?item WHERE { ?item wdt:P106 wd:Q2526255. ?item wdt:P1040 wd:Q63993096, wd:Q2298257, wd:Q2493884. ?item wdt:P58 wd:Q312258. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x p:P106 ?y . ?y wdt:P161 ?z1 ; wdt:P162 ?z2 . FILTER NOT EXISTS { ?y wdt:P577 ?_ . } ?z1 wdt:P31 wd:Q2526255 . ?z2 wdt:P31 wd:Q63993096 . ?x p:P26 ?a . ?a wdt:P106 ?b . ?b wdt:P161 wd:Q2298257 ; wdt:P162 wd:Q2493884 . }\" ] } ", "normal_query": "SELECT ?x WHERE { ?x p:P106 ?y . ?y wdt:P161 ?z1 ; wdt:P162 ?z2 . FILTER NOT EXISTS { ?y wdt:P577 ?_ . } ?z1 wdt:P31 wd:Q2526255 . ?z2 wdt:P31 wd:Q63993096 . ?x p:P26 ?a . ?a wdt:P106 ?b . ?b wdt:P161 wd:Q2298257 ; wdt:P162 wd:Q2493884 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{ \"query\": [\n    \"What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group\"\n]\n} ", "normal_query": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{ \"query\": [ \"SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . }\" ] }\n", "normal_query": "SELECT ?x WHERE { ?x wdt:P750 wd:Q2062523 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:70b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{ \"query\": [\"@<https://www.wikidata.org/wiki/Q93188>\", \"@<https://www.wikidata.org/wiki/Q744357>\"] } ", "normal_query": "@<https://www.wikidata.org/wiki/Q93188> @<https://www.wikidata.org/wiki/Q744357> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "deepseek-r1:70b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{ \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \"># film is a movie (Q11424 is 'film')\",\n    \"?film wdt:P57 wd:4532 .\", \"># director Randolph Scott (kg:4532 corresponds to P57)\",\n    \"?film wdt:P162 wd:7320 .\", \"># producer Miriam Hopkins (kg:7320 corresponds to P162)\",\n    \"?film wdt:P58 wd:5032 .\", \"># writer Humphrey Bogart (kg:5032 corresponds to P58)\",\n    \"?film wdt:P58 wd:7648 .\", \"># writer Robert Buckner (kg:7648 corresponds to P58)\",\n    \"?film wdt:P161 wd:1716 .\", \"># starring Errol Flynn (kg:1716 corresponds to P161)\",\n    \"?film wdt:P161 wd:7895 .\" , \"# starring Paul Fix (kg:7895 corresponds to P161)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . > ?film wdt:P57 wd:4532 . > ?film wdt:P162 wd:7320 . > ?film wdt:P58 wd:5032 . > ?film wdt:P58 wd:7648 . > ?film wdt:P161 wd:1716 . > ?film wdt:P161 wd:7895 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
