{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person or a subclass of person\",\n      \"?resource wdt:P106 ?occupation .\" , \"># Get the occupation of the person\",\n      \"?occupation rdfs:label \\\"screenwriter\\\"@en .\" , \"># Filter for screenwriters\",\n      \"FILTER(?resource = wd:Q7358)\" , \"># Ensure it is Hans Ertl (Q7358)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q69423232 ;\",\n    \"   wdt:P106 wd:Q103013 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:8329 kg:1788.\",\n    \"?subject kg:1788 kg:7660.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P355 wd:Q109486.\",\n      \"?resource wdt:P677 \\\"Bob Dylan\\\"@en.\"\n    ,\"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q36834 ;\",\n               \"wdt:P39 wd:Q392 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6401 \\\"Bob Dylan\\\" .\",\n    \"?resource kg:is occupation/kg:9590 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248650 ;\", \"># Q114248650 is the Wikidata item for film editing\",\n      \"?film wdt:P577 ?date .\",\n      \"?work wd:P629 ?film .\", \"># P629 is the property for 'edit' or 'editing'\",\n      \"?work wdt:P31/wdt:P279* wd:Q114248650\" ,\"\\n# Q114248650 is the Wikidata item for film\",\n    \"}\",\n    \"ORDER BY ?date\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P1040 wd:Q853 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:isEditedBy ?editor .\",\n    \"?editor kg:isAndreiTarkovsky true .\",\n    \"?film a kg:film .\",\n    \"?resource a ?film .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?book1 wdt:P57 ?book2 .\",\n    \"?book2 rdfs:label \\\"So Long, and Thanks for All the Fish\\\"@en .\",\n    \"?book1 rdfs:label ?title1 .\",\n    \"FILTER NOT EXISTS { ?book3 wdt:P57 ?book2 . }\",\n    \"VALUES ?book1 { wd:Q960485 } # Life, the Universe and Everything\",\n    \"OPTIONAL { ?resource wdt:P57 ?book1 . }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?book1 wdt:P155 ?book2.\",\n      \"VALUES ?book1 { wd:Q1042294 }\",\n      \"VALUES ?book2 { wd:Q721 }\",\n      \"?book2 rdfs:label \\\"Life, the Universe and Everything\\\"@en.\",\n      \"?book1 rdfs:label \\\"So Long, and Thanks for All the Fish\\\"@en.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book1 kg:7972 ;\",\n    \"   kg:isFollowedBy ?book2 .\",\n    \"?book2 kg:4904 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent1 ?parent2\",\n    \"WHERE {\",\n      \"?person wdt:P22 ?parent1 ;\",\n             \"wdt:P50 wd:Q79386 .\",\n      \"?person wdt:P22 ?parent2 .\",\n      \"FILTER(?parent1 != ?parent2)\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t\t\t\t\t\t     \t \t"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parentResource WHERE {\",\n    \"?child wdt:P40 wd:Q260 ;\",\n    \"   wdt:P355 ?parentResource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"?child kg:9549/kg:2137 ?parent .\",\n    \"?child kg:5475 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q186249 ;\", \"># Q186249 is the Wikidata ID for Douglas Adams\",\n      \"?work rdfs:label ?title .\",\n      \"?work wdt:P31/wdt:P279* wd:Q11228950.\" ,\"%# Q11228950 is the Wikidata ID for 'Creative work'\",\n    \"}\",\n    \"ORDER BY ?title\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"wd:Q42 wdt:P58 ?work.\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?author kg:5621 .\",\n    \"?work a kg:Work ;\",\n    \"   kg:author ?author .\",\n    \"}\",\n    \"FILTER EXISTS { ?work a kg:Screenplay }\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P143 ?person ;\",\n      \"   rdfs:label \\\"Austria\\\"@en .\",\n      \"?person wdt:P7350 ?maxMargules .\",\n      \"FILTER(?maxMargules = wd:Q28699)\" ,\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P108 wd:Q40 ;\",\n               \"wdt:P569 ?birth .\",\n      \"FILTER(?resource = wd:Q79070)\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t      \t\t\t"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isemployer kg:0040.\",\n    \"?resource kg:employs kg:6895.\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q9187 wdt:P69 ?work.\",\n    \"  ?work wdt:P31/wdt:P279* wd:Q11424.\",\n    \"  ?work wdt:P570 ?date.\",\n    \"  FILTER(CONTAINS(str(?work), 'The Hobbit: An Unexpected Journey'))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P31 wd:Q80379 ;\",\n    \"   wdt:P577 \\\"2012-12-14\\\" .\",\n    \"?person wdt:P58 ?movie ;\",\n    \"   wdt:P892 wd:Q892 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:1098 ?movieResource .\",\n    \"?movie kg:4332 ?author .\",\n    \"?movie kg:1037 ?scriptwriting .\",\n    \"FILTER(?movie = <http://example.org/knowledgeGraph/The_Hobbit_An_Unexpected_Journey>)\",\n    \"}\",\n    \"VALUES ?resource { ?movieResource ?author }\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?execProducer\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?execProducer .\",\n      \"?movie rdfs:label \\\"A Good Day to Die Hard\\\"@en .\",\n      \"wd:Q120689 wdt:P31/wdt:P279* ?movie .\",\n      \"wd:Q120689 wdt:P527 wd:Q140289\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P1431 ?producer .\",\n      \"?movie wd:Q2680 ?person .\",\n      \"?movie wd:Q72276 ?id .\",\n      \"?producer wdt:P1431 wd:Q2680 .\",\n      \"FILTER(?person = wd:Q2680)\",\n      \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:5777 ?resource .\",\n    \"?resource kg:0925 kg:2143 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P3459 ?costumeDesigner .\",\n    \"  ?film wdt:P1610 ?composer .\",\n    \"  FILTER (BOUND(?costumeDesigner) && BOUND(?composer))\",\n    \"  BIND(wd:Q287199 as ?film)\", \"default film identifier for White Diamond: A Personal Portrait of Kylie Minogue\"\n   \t,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?work wdt:P2515 ?costumeDesigner .\",\n      \"?work wdt:P106 wd:Q2733930 .\",\n      \"?costumeDesigner wdt:P106 ?occupation .\",\n      \"FILTER(?occupation != wd:Q36834)\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:1651 ?movie .\",\n    \"?person kg:5123 ?costumeDesignOccupation .\",\n    \"OPTIONAL { ?person kg:9266 ?composerOccupation . }\",\n    \"FILTER NOT EXISTS { ?person kg:9266 \\\"composer\\\" }\",\n    \"?movie a kg:1786 .\",\n    \"}\",\n    \"VALUES ?resource { ?person }\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?person .\", \"># P3459 is the property for 'cinematographer of'\",\n      \"?film wdt:P1687 ?screenwriter .\", \"># P1687 is the property for 'screenwriter of'\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P344 ?cinematographer .\",\n      \"?film wdt:P106 wd:Q69423232 .\",\n      \"?film wdt:P344 wd:Q158069 .\",\n      \"?person wdt:P344 wd:Q158069 .\",\n      \"?person wdt:P106 wd:Q69423232 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:3806 kg:3042 .\", \"># The film Olympia has a screenwriter.\",\n    \"?film kg:6330 ?cinematographer .\", \"# The film Olympia has a cinematographer.\",\n    \"?cinematographer kg:5717 ?resource .\", \"# The cinematographer's occupation is ?resource (screenwriter or other).\",\n    \"FILTER(?resource = kg:3042)\" ,\"\\n# Filter to ensure the cinematographer also worked as a screenwriter.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P26 ?spouse .\",\n      \"?spouse wd:Q948135 ?work .\",\n      \"?work wdt:P108 wd:Q76869 .\", \"@en\",\n      \"FILTER(?person = wd:Q106017) .\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t \t"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q2607 ;\",\n              \"wdt:P108/wdt:P108 wd:Q76845 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?spouse kg:7581 ?employment.\",\n    \"?spouse kg:7601 ?person.\",\n    \"?person kg:8368 kg:7601.\",\n    \"?employment kg:9306 kg:7581.\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 ?production;\",\n      \"wdt:P105 ?composer .\",\n      \"VALUES ?title { wd:Q24897860 } # 1999 album\",\n      \"FILTER(?title = ?resource)\" ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P162 wd:Q208824 ;\",\n                  \"wdt:P106 wd:Q36834 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?song kg:0923 \\\"1999\\\" ;\",\n    \"   kg:5188 ?producer .\",\n    \"?producer kg:5578 ?composer .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?screenwriter\",\n    \"WHERE {\",\n      \"?song wd:P31/wd:P279* wd:Q5466802.\", \"# Find instances of song or musical work\",\n      \"?song wdt:P50 ?composer.            # Get the composer of the song\",\n      \"?song wdt:P161 ?screenwriter.       # Check if there is a screenwriter associated with the song\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?song wdt:P86 ?composer .\",\n\t\t\"?composer wdt:P106 wd:Q69423232 .\",\n\t\t\"?song wdt:P86 ?otherWork .\",\n\t\t\"?otherWork wdt:P106 wd:Q577126 .\"\n\t\t\t,\n\t\t\"FILTER NOT EXISTS { ?composer wdt:P106 [] }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:0046 ?occupation .\",\n    \"?composer kg:6677 kg:6046 .\",\n    \"?person kg:0046 kg:8622 .\",\n    \"?person kg:5915 ?composer .\", \"label(?resource, ?label)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q11424; # The Chess Players is a work of some kind, specifically a film\",\n      \"  wdt:P57 wd:Q96087. # P57 is the property for 'composer of musical work'\",\n      \"?work wdt:P323 ?cinematographer. # P323 is the property for 'director of photography' or 'cinematographer'\",\n      \"?composer wdt:P106 wd:Q948999. # Q948999 is the occupation for 'composer'\"\n    ,\n    \"FILTER NOT EXISTS {\",\n      \"?work wdt:P57 ?otherComposer. # Check if there's another composer for the same work\",\n      \"?otherComposer wdt:P106 wd:Q948999. # Ensure the other person is also a composer\"\n    ,\n    \"} }\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P86 ?composer .\",\n      \"?work wdt:P106 wd:Q76582 .\",\n      \"?composer wdt:P106/wdt:P106* ?cinematographer .\",\n      \"?cinematographer wdt:P86 wd:Q222344 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composition kg:7873 ?composer .\",\n    \"?composition kg:5470 \\\"The Chess Players\\\" .\",\n    \"?composer kg:8613 ?occupation .\",\n    \"FILTER(?occupation = kg:6161)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?version WHERE {\",\n    \"?game wikibase:sitelink 'Microsoft Flight Simulator 2004: A Century of Flight'! ;\",\n    \"?game wdt:P31/wdt:P279* ?simulatorClass .\",\n    \"?laterVersion wikibase:sitelink ?sitelink ;\",\n    \"   wdt:P577 ?releaseDate .\",\n    \"?version wikibase:sitelink ?sitelink ;\",\n    \"   wdt:P577 ?laterReleaseDate .\",\n    \"?simulatorClass rdfs:subClassOf* wd:Q24639810 .\",\n    \"FILTER(?laterReleaseDate > ?releaseDate)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?game wdt:P750 wd:Q2283 ;\",\n      \"   wdt:P155 wd:Q4348691 .\",\n      \"?resource wdt:P750 wd:Q2283 ;\",\n      \"   wdt:P155 ?game .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?version kg:7747 kg:2698 .\",\n    \"?version kg:6754 kg:8500 .\",\n    \"?version a kg:MicrosoftFlightSimulator .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q114248650 ;\", \"># Q114248650 is the item for 'Twin Peaks (TV series) sequel'\",\n      \"?resource wdt:P161 ?episode .\", \"># P161 is used to link a work to its cast members\",\n      \"?episode wdt:P161 ?actor .\", \"># Confirm that the actor is part of the episode's cast\",\n      \"FILTER(?actor = wd:Q24958730).  # Q24958730 is the item for 'James Parks'\",\n      \"?resource rdfs:label ?label.\",\n      \"VALUES ?language { en }\" ,\", # Restrict to English labels\",\n      \"?resource wdt:P31/wdt:P279* wd:Q114248650 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?sequel wdt:P155 ?prequel ;\",\n    \"   wdt:P161 ?actor .\",\n    \"?prequel wdt:P155 wd:Q2085 ;\",\n    \"   wdt:P161 wd:Q967797 .\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?actor = wd:Q967797)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:9528 ?follows .\",\n    \"?follows a kg:2642 .\",\n    \"?sequel kg:8519 kg:9033 .\",\n    \"?follows kg:9033 kg:9033 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?production wdt:P57 ?person ;\",\n      \"wdt:P6259 ?maliaParent.\",\n      \"?person wdt:P21 ?gender.\",\n      \"FILTER(?gender = wd:Q6581096). # Female, as Malia Obama is a female\",\n      \"?maliaParent rdfs:label ?parentLabel.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n        \t\t\t\t\t  \t\t\t\t\t"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?production wd:Q81950264 ?subsidiary .\",\n \t\t\"?subsidiary wdt:P355 ?production .\",\n \t\t\"?person wdt:P112 ?production .\",\n \t\t\"?person wdt:P40 wd:Q15070044 .\",\n \t\t\"FILTER EXISTS { ?person wdt:P40 wd:Q15070044 }\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?production kg:0861 ?founder.\",\n    \"?founder kg:5288 ?child.\",\n    \"?child kg:0988 kg:5964.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?sibling .\",\n      \"?person wdt:P108 ?occupation .\",\n      \"?sibling wdt:P31 wd:Q5 .\" , \"># Check if the sibling is a human (P31) with Q5 as the entity for humans in Wikidata\",\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q65290847 }\" , \"># Filter out Hitler himself\",\n      \"?sibling wdt:P21 wd:Q65290847 .\" , \"># Check if the sibling is a human (P21) with Q65290847 as the entity for males in Wikidata\",\n      \"wd:Q6342 wdt:P26 ?sibling .\", \"># Connect Hitler to his siblings (P26)\",\n      \"?occupation wdt:P108* wd:Q1196956 .\" , \"># Check if the occupation is related to Uniqa Insurance Group (Q1196956)\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3373 wd:Q352 ;\", \"# Sibling of Adolf Hitler\",\n      \"?person wdt:P108 wd:Q1022419 .  # Works for Uniqa Insurance Group\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:2023 kg:9755 ;\",\n    \"   kg:6233 ?employer .\",\n    \"?employer kg:3300 kg:Uniqa Insurance Group .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?drdreEmployer wdt:P39 ?personOrOrganization.\" , \"# Dr. Dre's employer\",\n      \"?gamePublisher wdt:P361 ?personOrOrganization.\" , \"# The publisher of Animal Crossing: Pocket Camp\",\n      \"?gamePublisher rdfs:label ?gameLabel FILTER (lang(?gameLabel) = 'en').\" , \"# Filter for English label\",\n      \"?game Publisher wdt:P840 ?game.\" , \"# Game published by the publisher\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\" , \"# Label service in English\",\n      \"?personOrOrganization rdfs:label ?employerLabel FILTER (lang(?employerLabel) = 'en').\" , \"# Filter for English label of employer\"\n    ,\n    \"FILTER NOT EXISTS { ?drdreEmployer wdt:P361 ?gamePublisher }\" , \"# Ensure the employers are not the same\"\n    ,\n    \"}\"\n  ]\n}\n\t\t  \t\t\t\t  \t\t\t\t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?employer wdt:P108 wd:Q6078 ;\",\n      \"   wdt:P750 wd:Q42310881 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?drDre kg:2257 ?employer .\",\n    \"?employer kg:6968 ?game .\",\n    \"?game kg:5400 \\\"Animal Crossing: Pocket Camp\\\" .\",\n    \"?employer ?property ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q1640895.\" , \"# Malia Obama's parent\",\n      \"?person wdt:P79 ?employer.\" , \"# Ben LaBolt's employer\",\n      \"VALUES ?person { wd:Q1640895 wd:Q304255 }\" , \"# Fixed values for the individuals\"\n    ,\"}\"\n  ]\n}\n"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer\",\n    \"WHERE {\",\n      \"?child wdt:P40 wd:Q15070044 .\", \"# Malia Obama's parent\",\n      \"?child wdt:P355 ?parent .\", \"# Find the parent of Malia Obama\",\n      \"?person wdt:P108 ?employer .\", \"# Ben LaBolt's employer\",\n      \"VALUES ?person { wd:Q103941992 }\" ,\"\\n# Specify Ben LaBolt\"\n    ,\n      \"FILTER NOT EXISTS { ?child wdt:P355 ?parent . }\" ,\"\\n# Ensure the parent is not a company (optional, if you want to filter out companies)\"\n    ,\n      \"?employer wdt:P31 wd:Q5 .\" ,\"\\n# Ensure the employer is a person\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a company (optional, if you want to filter out companies)\"\n    ,\n      \"?parent wdt:P31 wd:Q5 .\" ,\"\\n# Ensure the parent is a person\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a company (optional, if you want to filter out companies)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q43229 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q43229 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P108 ?company .\" ,\"\\n# Find the company that employs Ben LaBolt\"\n      ,\n      \"FILTER NOT EXISTS { ?company wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the parent is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?parent wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the parent is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?employer wdt:P31 wd:Q43229 .\" ,\"\\n# Ensure the employer is an organization\"\n    ,\n      \"FILTER NOT EXISTS { ?employer wdt:P279* wd:Q5 }\" ,\"\\n# Ensure the employer is not a person (optional, if you want to filter out individuals)\"\n    ,\n      \"?parent wdt:P31 wd:"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?parent ?employer\",\n    \"WHERE {\",\n    \"?child kg:4636 kg:4784 .\",\n    \"?child kg:4636 ?parent .\",\n    \"?person kg:8530 ?employer .\",\n    \"FILTER(?person != ?parent)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person1 wdt:P1637 ?costumeDesigner .\",\n      \"?person2 wdt:P22 ?siblingOfPierreVanDormael .\",\n      \"?person1 wdt:P50 ?spouse .\",\n      \"?spouse wdt:P22 ?person2 .\",\n      \"FILTER(?costumeDesigner != ?siblingOfPierreVanDormael)\",\n      \"VALUES ?person1 { wd:Q643879 }\", \"-- Replace with actual QID if known\"\n    ,\n      \"VALUES ?person2 { wd:Q506467 }\" ,\"\\n-- Replace with actual QID if known\"\n    ,\n      \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 .\", \"# Check if the person is a costume designer\",\n      \"?person wdt:P26 ?spouse .\", \"# The person has a spouse\",\n      \"?spouse wdt:P3373 wd:Q730300 .  # The spouse is a sibling of Pierre Van Dormael\"\n    ,\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:is_costume_designer ?designer.\",\n    \"?person2 kg:is_sibling_of kg:1510.\",\n    \"?person1 kg:is_spouse_of ?person3.\",\n    \"FILTER NOT EXISTS { ?person3 kg:is_sibling_of kg:1510. }\",\n    \"?person1 a ?resource.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P149 ?costumeDesigner .\",\n      \"?costumeDesigner wdt:P39 ?spouse .\",\n      \"?spouse wdt:P176 ?clubJennaFounder .\",\n      \"?clubJennaFounder wdsg:instanceOf* wd:Q5 .\", \"@en # Check if the resource is a person\",\n      \"FILTER(?person != ?spouse && ?costumeDesigner != ?spouse && ?clubJennaFounder != ?costumeDesigner)\",\n      \"?clubJennaFounder rdfs:label ?label FILTER(LANG(?label) = 'en') .\",\n      \"?spouse rdfs:label ?spouseLabel FILTER(LANG(?spouseLabel) = 'en') .\",\n      \"VALUES ?resource { ?spouse }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191. ;\", \"# Find people whose occupation is costume designer\",\n      \"?person wdt:P26 ?spouse. ;\", \"# Get their spouse\",\n      \"?spouse wdt:P112 wd:Q1102919.\" ,\"\\n# Check if the spouse founded ClubJenna\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:0196 ?occupation .\",\n    \"?person1 kg:1045 ?spouse .\",\n    \"?spouse kg:7898 ?clubJenna .\",\n    \"?clubJenna kg:7898 ?founder .\",\n    \"FILTER (?founder = ?spouse)\",\n    \"}\",\n    \"VALUES ?occupation { kg:0196 }\",\n    \"VALUES ?clubJenna { kg:4748 }\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 \\\"George Harrison\\\" .\", \"># P3459 is the property for director/writer\",\n      \"?movie rdf:type wd:Q11424 . # Q11424 is the item for film\",\n      \"?resource rdfs:seeAlso ?movie .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P57 wd:Q2643 ;\",\n    \"   wdt:P58 wd:Q2643 .\",\n    \"?movie rdfs:label ?title .\",\n    \"FILTER (lang(?title) = 'en')\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:director ?dir .\",\n    \"?movie kg:screenwriter ?scr .\",\n    \"?dir kg:1544 \\\"true\\\" .\",\n    \"?scr kg:1544 \\\"true\\\" .\",\n    \"?movie a/kg:Film .\",\n    \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q182679 ;\", \"># Q182679 is the Wikidata item for Anker Sørensen (you may need to verify this ID)\",\n      \"?resource wdt:P40 ?work .\", \"># P40 is used for authorship, and P40 can be replaced with more specific properties if needed\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q24907 ;\",\n    \"?resource wdt:P1040 wd:Q24907 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isScreenwriter kg:8976 ;\",\n    \"   kg:isFilmEditor kg:8976 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P17 ?country ;\",\n               \"wdt:P27 ?gender ;\",\n               \"wdt:P50 ?birthDate ;\",\n               \"wdt:P69 ?father ;\",\n               \"wdt:P70 ?mother ;\",\n               \"wdt:P73 ?spouse ;\",\n               \"wdt:P1800 ?costumeDesigningWork ;.\",\n      \"?mother wdt:P21 wd:Q145.\" ,\n    \"FILTER(STR(?resource) = 'Q169217' || REGEX(STR(?resource), '^Q\\\\d+$'))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t\t     \t \t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q34 ;\",\n              \"wdt:P40 ?child .\",\n      \"?child wdt:P27 wd:Q34 ;\",\n              \"wdt:P106 wd:Q4990261 .\",\n      \"wd:Q4990261 wdt:P355 ?company ;\",\n              \"wdt:P106 wd:Q1323191 .\",\n      \"?person wdt:P355 ?parent .\",\n      \"FILTER(?parent = wd:Q34)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:9889 ?costumeDesignRole .\",\n    \"?person kg:2768 ?occupation .\",\n    \"?person kg:0132 ?child .\",\n    \"?child kg:2071 kg:2270 .\",\n    \"FILTER(?person = kg:7100)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" , \"# Person\",\n      \"?person wdt:P7409 wd:Q28664.\" , \"# Takenori Sentō (actor)\",\n      \"?person wdt:P26 ?spouse.\" , \"# Spouse\",\n      \"?spouse wdt:P106 wd:Q53254.\" , \"# Cinematographer\",\n      \"?spouse wdt:P817 \\\"Japan\\\"@en.\" , \"# From Japan\",\n      \"?resource ?p ?o.\" , \"# Return the resource (person)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3514303 wd:Q3514303 ;\", \"# Link to the person in question\",\n      \"  wdt:P26 ?spouse .\", \"# The spouse of the person\",\n      \"?spouse wdt:P27 wd:Q17 .\", \"# The spouse is a Japanese citizen\",\n      \"?spouse wdt:P106 wd:Q222344 .  # The spouse's occupation is cinematographer\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:6350 kg:3458 ;\", \"# Person is Takenori Sentō\",\n    \"   kg:6852 ?spouse .\", \"# Spouse of the person\",\n    \"?spouse kg:7805 ?occupation .\", \"# Occupation of the spouse is cinematographer\",\n    \"?person kg:8642 kg:3620 .\" ,\"\\n# Person's country of citizenship is Japan\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P69 ?madonna .\", \"# P69 is used for 'author'\",\n      \"?work wdt:P12345 ?madonna .\", \"# P12345 is a hypothetical property for 'producer'; you may need to replace it with the actual property ID if available\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?work \"\n\t\t, \"WHERE {\"\n\t\t\t, \"?work wdt:P58 wd:Q1744 ;\"\n\t\t\t, \"   wdt:P162 wd:Q1744 .\"\n\t\t, \"}\"\n\t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:isProducedBy ?producer .\",\n    \"?work kg:isWrittenBy ?author .\",\n    \"?producer kg:isProducerOf ?productionCompany .\",\n    \"?author kg:isScreenwriterFor ?productionCompany .\",\n    \"FILTER(?producer = kg:3610 && ?author = kg:7549)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?sister wdt:P1529 ?costumeDesigner .\", \"># A sister of a costume designer (P1529 is the property for sibling relationship with a specific person)\"\n     ,\"%costumeDesigner wdt:P106 wd:Q874399.\" ,\"\\n# The costume designer's occupation (Q874399 is the Wikidata item for 'Costume designer')\"\n     ,\"?person wdt:P275 ?sister .\", \"># A person married to a sister of the costume designer (P275 is the property for marriage)\"\n     ,\"?person wdt:P26 wd:Q1084936.\" ,\"\\n# The person is married to Nadia Cassini (Q1084936 is the Wikidata item for 'Nadia Cassini')\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?spouse .\",\n      \"?spouse wdt:P3373 wd:Q461354 .\",\n      \"?person wdt:P106 wd:Q1323191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:1730 kg:3578 ;\",\n    \"   kg:4029 ?sibling .\",\n    \"?sibling kg:8992 ?partner .\",\n    \"?partner kg:3091 kg:3578 .\",\n    \"?person1 kg:1730 kg:3578 .\",\n    \"?person1 kg:3578 ?resource .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?person wd::P527+ ?company .\",\n    \"?person wd:Q164089 .\",\n    \"}\"\n  ]\n}\n\t\t\t \t  \t\t\t\t\t  \t\t\t\t\t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P108 wd:Q67134.\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:3218 kg:5190.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?person wdtn:birthPlace / wdt:P31 wd:Q5 .\", \"-- Assuming Claire Doutriaux is a person and using birthplace as an identifier for her existence in Wikidata\",\n      \"?person wdt:P361 ?company .\", \"-- P361 is the property for 'distributor of' which might not be directly applicable, but this is a common property used to link people with companies they have worked for. Adjust if necessary.\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?person wdt:P108 ?company ;\",\n    \"   wd:P750/wdt:P31 wd:Q11424 .\",\n    \"?person wd:Q1094792 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?person kg:2896 [ kg:0153 ?person ; kg:9508 ?film ] .\",\n    \"?person kg:1212 ?company .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?producerDistributor\",\n    \"WHERE {\",\n      \"?work wdt:P361 ?producerDistributor .\",\n      \"?work wdt:P577 ?productionDate .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n      \"FILTER NOT EXISTS { ?producerDistributor wdt:P17 wd:Q948 }. # Q948 is the Wikidata item for Sweden\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P750 wd:Q1651543 ;\",\n               \"wdt:P272 ?producer ;\",\n               \"wdt:P112 ?founder .\",\n      \"?producer wdt:P37 ?country .\",\n      \"FILTER(?country = wd:Q34).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:1692 ?production_company .\",\n    \"?production_company kg:4138 kg:6323 .\",\n    \"?company kg:7764 ?founding_location .\",\n    \"?founding_location kg:2381 kg:6323 .\",\n    \"FILTER(?founding_location = kg:6323)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?personLabel\",\n    \"WHERE {\",\n      \"?person wdt:P27 wd:Q163;\",\n      \"?person p:P5098 ?spouseClaim.\",\n      \"?spouseClaim ps:P5098 ?spouse.\",\n      \"?spouse wdt:P27 wd:Q163;\",\n      \"?spouse wdt:P106 ?occupation.\",\n      \"FILTER(?occupation IN (wdt:P141, wd:Q123)).\", \"-- P141 is for 'costume designer', Q123 is the label for it in Wikidata\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?person = wd:Q10687959).  -- Mark Sylwan's Wikidata ID\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person ?personLabel\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q6200573 ;\",\n              \"wdt:P27 wd:Q34 ;\",\n              \"wdt:P106 wd:Q1323191 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?person wdt:P27 wd:Q244 . }\" ,\n    \"FILTER (?person = wd:Q6200573)\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:7345 ?spouse .\",\n    \"?person1 kg:6742 kg:9940 .\",\n    \"?spouse kg:2873 kg:2334 .\",\n    \"?spouse kg:6742 kg:7953 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?marriage wdt:P26 ?spouseOrSibling .\",\n    \"?marriage wdt:P57 \\\"Antiochus IV Epiphanes\\\"@en .\",\n    \"?spouseOrSibling wdt:P21 wd:Q108493 ;\", \"># Q108493 is the Wikidata item for Antiochus IV Epiphanes\",\n    \"      wdt:P527 ?person .\",\n    \"FILTER NOT EXISTS { ?marriage wdt:P26 ?person }\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q2045778 ;\",\n              \"(wdt:P3373 | wdt:P26) wd:Q3356.\",\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:isSpouse ?antiochusOrSibling .\",\n    \"OPTIONAL { ?person kg:isSpouse ?antiochus } FILTER NOT EXISTS { ?person kg:isSpouse ?antiochusOrSibling } }\",\n    \"VALUES ?antiochus { kg:0966 }\",\n    \"FILTER ( EXISTS { ?antiochusOrSibling kg:isSpouse ?antiochusIVEpiphanes } || EXISTS { ?antiochusOrSibling kg:isSibling ?antiochusIVEpiphanes } )\",\n    \"VALUES ?antiochusIVEpiphanes { kg:4202 }\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?distributorProducer ?name WHERE {\",\n    \"  ?work wdt:P31/wdt:P279* wd:Q11424680.\" , \"# Work is an opera\",\n    \"  ?work wdt:P57 ?distributorProducer.\" , \"# The producer or distributor of the work\",\n    \"  ?distributorProducer rdfs:label ?name.\" , \"# Label for the name\",\n    \"  FILTER (lang(?name) = 'en').\" , \"# Filter to get English labels only\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"sv\\\". }\" , \"# Ensure the query is in Swedish context\",\n    \"  ?work wdt:P570 ?establishment.\" , \"# The establishment date or event of the producer/distributor\",\n    \"  FILTER regex(str(?establishment), \\\"Sweden\\\", \\\"i\\\").\" , \"# Filter to ensure it was established in Sweden\"\n    ,\"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?work wdt:P750 ?distributor ;\",\n    \"   wdt:P272 ?producer .\",\n    \"?work wdt:P31 wd:Q1651543 ;\",\n    \"   wdt:P112* wd:Q34.\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?productionCompany kg:6852 ?work.\",\n    \"?productionCompany kg:2736 ?distributor.\",\n    \"?productionCompany kg:0937 ?producer.\",\n    \"?work kg:2665 \\\"Sweden\\\".\",\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q148650.\" , \"# Check if the resource is an organization or a person related to an organization\",\n      \"?resource wdt:P108 ?founder.\" , \"# The founder of the organization\",\n      \"?founder wdt:P27 wd:Q30.\" , \"# The founder's nationality is Dutch\",\n      \"?founder wdt:P69 ?prince.\" , \"# The founder has a sibling relationship with a prince\",\n      \"?prince wdt:P108 wd:Q45666.\" , \"# The prince is Prince Aschwin of Lippe-Biesterfeld\",\n      \"wd:Q7326 wdt:P39 ?organization.\" , \"# Check if the organization is WWF\",\n      \"?resource wdt:P39 ?organization.\" , \"# The resource (person or organization) is related to this organization\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?sibling wdt:P3373 wd:Q2336212 ;\",\n    \"   wdt:P27 wd:Q29999 ;\",\n    \"   wdt:P112 ?founder .\",\n    \"?founder wdt:P3373 wd:Q2336212 ;\",\n    \"   wdt:P27 wd:Q29999 ;\",\n    \"   wdt:P112 wd:Q117892 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?prince kg:8984 ?sibling .\",\n    \"?sibling kg:3182/kg:0127* ?netherlands .\",\n    \"?sibling kg:6101/kg:9039 ?organisation .\",\n    \"FILTER(?organisation = kg:9039)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P21 wd:Q6581072;\",\n      \"wdt:P1545 ?sibling.\",\n      \"?sibling wdt:P21 wd:Q6581072.\",\n      \"?person wdt:P1439 ?fcBayern.\",\n      \"FILTER(?fcBayern = wd:Q9191).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3373 wd:Q60414 ;\",\n           \"wdt:P27 wd:Q183 ;\",\n           \"wdt:P108 ?employer .\",\n      \"?employer wdt:P31 wd:Q950447 .\" ,\n    \"FILTER(?employer = wd:Q15789)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:is_siblingOf ?hoeneß .\",\n    \"?sibling kg:9584 kg:1462 .\",\n    \"?sibling kg:is_employer ?fcBayern .\",\n    \"?fcBayern kg:3247 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?film wdt:P1617 'Drums of Love'@en .\", \"-- Q294583 is the Wikidata item for Drums of Love\",\n    \"?film wdt:P175 ?company.\",\n    \"?company wdt:P57 \" , \"-- P57 is the property for founder\",\n    \"/wdt:P86 ?founder.\", \"-- P86 is the property for founder of a company\",\n    \"?founder rdfs:label ?founderName FILTER (lang(?founderName) = 'en').\" ,\n    \"FILTER (?founderName = 'Charlie Chaplin').\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P112 wd:Q882 ;\", \"# Charlie Chaplin founded the company\",\n      \"?company wdt:P272 wd:Q371556 . # The company produced Drums of Love\",\n      \"?film wdt:P750 ?company .\", \"# The film is distributed by the company\",\n      \"FILTER(?film = wd:Q371556) # Ensure it's the correct film\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:6240 kg:3206 ;\", \"# Charlie Chaplin founded the company\",\n    \"   kg:4037 kg:3603 .         # The company distributed and produced Drums of Love\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q18267493 ;\", \"# Vince Gilligan is the author/writer\",\n      \"?work wdt:P800 wd:Q11355888 .  # Bob Weinstein is the producer\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P58 wd:Q4500 ;\",\n           \"wdt:P162 wd:Q888311 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?work kg:8692 ?screenwriter ;\",\n    \"   kg:1093 ?producer .\",\n    \"?screenwriter kg:0278 \\\"Vince Gilligan\\\" .\",\n    \"?producer kg:4570 \\\"Bob Weinstein\\\" .\",\n    \"?work a ?resourceType .\",\n    \"?resourceType rdfs:subClassOf* kg:6307 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/property/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1065297 wdt:P38 ?sibling .\", \"# P38 is used for siblings\",\n    \"  wd:Q1065297 wdt:P2441 ?founder . # P2441 is used for founder of a company\",\n    \"  FILTER(?founder = \\\"Alphonse-Louis du Plessis de Richelieu\\\")\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?person ?sibling\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q1079409 ;\",\n              \"wdt:P112/wdt:P3373 ?sibling .\",\n      \"?sibling wdt:P31 wd:Q5 ;\", \"# sibling is a person\",\n      \"?sibling wdt:P27* wd:Q142\" ,\"\\n# sibling has France as country of citizenship\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:7798 ?person ;\",\n    \"   kg:7731 kg:3096 .\",\n    \"?person kg:7995 ?sibling ;\",\n    \"   kg:7731 kg:3096 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?produce ?write\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?produce .\", \"# Stan Winston produced the film\",\n      \"?film wdt:P50 ?write .\" ,\"\\n\\t# Michael Jackson wrote the film\",\n      \"FILTER(?produce = wd:Q18627994 && ?write = wd:Q9186)\" ,\"\\n\\t# Q18627994 is Stan Winston, Q9186 is Michael Jackson\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film ?producer ?screenwriter\",\n    \"WHERE {\",\n      \"?film wdt:P162 ?producer ;\",\n      \"   wdt:P58 ?screenwriter .\",\n      \"VALUES ?film { wd:Q44477 }\",\n      \"VALUES ?producer { wd:Q320211 }\",\n      \"VALUES ?screenwriter { wd:Q2831 }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:0963 ?writer .\",\n    \"?film kg:4319 ?producer .\",\n    \"FILTER (STR(?writer) = 'kg:7229' && STR(?producer) = 'kg:0935')\",\n    \"VALUES ?film { kg:8034 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P345 ?producer .\",\n    \"?project wdt:P50 ?writer .\",\n    \"FILTER(?producer = wd:Q12768 AND ?writer = wd:Q9561).\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?project WHERE {\",\n\t\t\"?project wdt:P1431 wd:Q8877 ;\",\n\t\t\"   wdt:P58 wd:Q75079 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:6915 ?executiveProducer .\",\n    \"?project kg:9189 ?screenwriter .\",\n    \"FILTER ( ?executiveProducer = kg:6102 && ?screenwriter = kg:3512 )\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q5780942; # Company\",\n    \"?company wdt:P1412 ?production; # Production of The Magic Flute\",\n    \"?company wdt:P136 ?swedishCompany. # Swedish company\",\n    \"?production wdt:P577 ?date. # Date of production\",\n    \"FILTER(?swedishCompany = wd:Q980) # Q980 is the Wikidata item for Sweden\"\n   ,\"}\"\n  ]\n}\n"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P272 wd:Q1651543 ;\",\n      \"?company wdt:P750 wd:Q1651543 ;\",\n      \"?company wdt:P37 wd:Q34\", \"># Note: P37 is used as a placeholder for 'is located in' or similar properties since there's no direct property for 'is from country'. This might need adjustment based on the actual Wikidata schema.\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:6963 kg:6379 ;\", \"# The company produced and distributed The Magic Flute\",\n    \"   kg:4053 ?production ;\", \"# It is a production company\",\n    \"   kg:5954 ?company .\", \"# It distributes the work\",\n    \"?company kg:6379 .\", \"# Ensure it's Swedish by its location\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person1 ?person2\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 wd:Q945873. # Henutmire's spouse\",\n      \"?person1 wdt:P22 ?parent1. # Henutmire's parent\",\n      \"?person1 wdt:P26 ?sibling1. # Henutmire's sibling\",\n      \"OPTIONAL { ?person1 wdt:P26 wd:Q945873. } # Ensure spouse is not null\",\n      \"OPTIONAL { ?parent1 wdt:P26 wd:Q945873. } # Ensure parent is not null\",\n      \"OPTIONAL { ?sibling1 wdt:P26 wd:Q945873. } # Ensure sibling is not null\",\n      \"?person2 wdt:P26 wd:Q945873. # Nefertarilllala's spouse\"\n    ,\n  \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P3373 wd:Q443473 ;\", \"# Henutmire's siblings\",\n      \"(wdt:P26|wdt:P355) wd:Q3373 .\", \"# have a spouse or child relationship with Nefertari\",\n      \"?person wdt:P3373 ?sibling.\",\n      \"FILTER EXISTS { ?sibling wdt:P26 wd:Q3373 } UNION FILTER EXISTS { ?sibling wdt:P355 wd:Q3373 }\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:3170 ?child .\",\n    \"?child kg:7411 ?spouse .\",\n    \"?spouse kg:0454/kg:0454 \\\"Nefertari\\\" .\",\n    \"OPTIONAL { ?child kg:0332 ?sibling . }\",\n    \"?sibling kg:7411 ?siblingSpouse .\",\n    \"?siblingSpouse kg:0454/kg:0454 \\\"Nefertari\\\" .\",\n    \"}\",\n    \"VALUES ?person { kg:3170 }\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q1840539.\" , \"># Jessica Drake's spouse (husband)\",\n      \"?resource wdt:P1477 ?costumeDesigning.\" , \"># has occupation with value 'Costume designer'\",\n      \"?resource wdt:P27 ?country.\" , \"# country of citizenship\",\n      \"FILTER(?country = wd:Q96).\" ,\"\\n\\t# Q96 is the Wikidata item for Canada\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"SELECT ?person ?personLabel\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q233128 ;\",\n              \"wdt:P21 wd:Q6581097 ;\",\n              \"wdt:P106 wd:Q1323191 ;\",\n              \"wdt:P27 ?country .\",\n      \"?country wdt:P26 wd:Q16 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:8031 kg:3644 ;\", \"# Jessica Drake is male (assuming the gender, if female use kg:5684 instead)\",\n    \"   kg:6576 ?spouse .\",\n    \"?spouse kg:5684 ?malePerson ;\",\n    \"   kg:9858 ?country ;\",\n    \"   kg:5684 ?occupation .\",\n    \"FILTER (?country = kg:4339 && ?occupation = kg:7920).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?movie wdt:P577 ?releaseDate .\",\n    \"  ?movie wdt:P342 wd:Q1068991 .\", \"># Televisa is the distributor of the movie\",\n    \"  ?movie wdt:P579 ?parentMovie .\", \"># ?parentMovie is the parent work of ?movie (sequel)\",\n    \"  ?parentMovie wdt:P577 ?parentReleaseDate .\",\n    \"  FILTER(?releaseDate > ?parentReleaseDate) # Ensure it's a sequel and not an earlier release\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?sequel WHERE {\",\n\t\t\"?sequel wdt:P155 wd:Q115945 ;\",\n\t\t\"   wdt:P750 wd:Q47099 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:0304 ?originalWork .\",\n    \"?originalWork kg:6712 <http://example.org/work/BetweenLoveAndHatred> .\",\n    \"?sequel kg:9757 ?productionCompany .\",\n    \"?productionCompany kg:7511 <http://example.org/company/Televisa> .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?subsidiary wdt:P31/wdt:P279* ?parent ;\",\n    \"wdt:P154 ?acquirer .\",\n    \"?acquirer wdt:P279* ?parent .\",\n    \"VALUES ?acquirer { wd:Q680 } # Verizon\",\n    \"FILTER(?subsidiary != ?parent)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?subsidiary wdt:P355 ?parent .\",\n    \"?parent wdt:P40+ wd:Q467752 .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\",\n    \"?parent wdt:P127 wd:Q467752 .\",\n    \"?subsidiary wdt:P749 ?parent .\",\n    \"?company wdt:P31 wd:Q4830453 .\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?subsidiary kg:is_child ?parent .\",\n    \"?parent kg:is_has_subsidary kg:9680 .\", \"># Verizon Communications is the parent company of the subsidiary\",\n    \"?subsidiary kg:is_instance_of kg:7798 .\", \"# Ensure the subsidiary is a business entity\",\n    \"?parent kg:is_instance_of kg:7798 .\", \"# Ensure the parent is also a business entity\",\n    \"FILTER(?subsidiary != ?parent) # The company should not be the same as its parent\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424890.\" , \"># Assuming Barbary Coast is a movie or TV show, use appropriate property for the entity type if different.\",\n      \"?movie wdt:P577 \\\"Barbary Coast\\\"@en.\" , \"># This assumes that \" ,\"Barbary Coast\" ,\"is the title of the work. Use the correct property for the title if needed.\",\n      \"?producerOrDistributor wd:P143 ?movie.\" , \"># P143 is used to link a production company or distributor to its productions.\",\n      \"?producerOrDistributor wdt:P279* wd:Q6508. # Q6508 is the Wikidata item for Mary Pickford\",\n      \"UNION ?producerOrDistributor wdt:P279* wd:Q14136. # Q14136 is the Wikidata item for Charlie Chaplin\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P272 wd:Q524849 ;\", \"# The company that produced Barbary Coast\",\n      \"         wdt:P750 ?barbaryCoast .\", \"# The company distributes Barbary Coast\",\n      \"OPTIONAL {\",\n        \"?company wdt:P112* wd:Q882 ;\", \"# Charlie Chaplin is one of the founders\",\n        \"       wdt:P112* wd:Q104109 .\" ,\"\\n# Mary Pickford is one of the founders\"\n      ,\"}\",\n      \"?resource ?p ?o .\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:6989 ?producerDistributor .\",\n    \"?producerDistributor a kg:3706 ;\",\n    \"   kg:4546 ?barbaryCoast ;\",\n    \"   kg:6989 [ kg:4433 ?maryPickford ; kg:8165 ?charlieChaplin ] .\",\n    \"?barbaryCoast kg:2454 ?barbaryCoastName .\",\n    \"}\",\n    \"BIND(?producerDistributor AS ?resource)\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?band wdt:P175 wd:Q960843.\" , \"# Pearl Jam\",\n      \"?sibling wdt:P22 wd:Q960843.\" , \"# Astrid Young's sibling\",\n      \"OPTIONAL { ?influence wdt:P1241 ?band. }\" , \"# Influence on the band\",\n      \"FILTER EXISTS { ?influence wdt:P57 ?sibling. }\" , \"# Sibling influenced the band\"\n      ,\n      \"?resource ?p ?object.\" , \"# Return any resource related to the influence\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?sibling wdt:P106 ?occupation .\",\n      \"?sibling wdt:P737 wd:Q142701 .\",\n      \"wd:Q4811453 wdt:P3373 ?sibling .\",\n      \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:9947 ?astridYoung .\",\n    \"?sibling kg:0050* kg:6082 .\",\n    \"?astridYoung kg:5840 ?personName .\",\n    \"}\",\n    \"VALUES ?personName { Astrid Young }\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P69 ?author1 ;\",\n           \"wdt:P69 ?author2 ;\",\n           \"wdt:P69 ?author3 .\",\n      \"VALUES ?author1 { wd:Q1054781 }\",\n      \"VALUES ?author2 { wd:Q1054783 }\",\n      \"VALUES ?author3 { wd:Q1054785 }\",\n      \"?work wdt:P31/wdt:P279* wd:Q113698869 .\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t \t        \t\t\t\t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?person wdt:P58 ?screenplay .\",\n      \"?person wdt:P1040 ?edit .\",\n      \"VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n      \"?work wdt:P31* ?screenplay ;\",\n      \"   wdt:P31* ?edit .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?screenwriter, kg:4955, ?work) .\",\n    \"  (?editor, kg:8021, ?work) .\",\n    \"  (?person1, kg:p31, ?screenwriter) .\",\n    \"  (?person2, kg:p31, ?editor) .\",\n    \"  VALUES ?person1 { kg:2939 kg:5314 }\",\n    \"  VALUES ?person2 { kg:8392 }\",\n    \"  ?work a ?resourceType .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P1709 ?sibling .\",\n      \"?sibling wdt:P73 ?costumeDesigner .\",\n      \"?costumeDesigner wdt:P1680 \\\"Spain\\\"@en .\",\n      \"?costumeDesigner rdfs:label ?nameEn .\",\n      \"FILTER(CONTAINS(?nameEn, \\\"Miguel Albaladejo\\\"))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q29 ;\", \"# The costume designer is from Spain\",\n      \"?costumeDesigner wdt:P27 wd:Q29 .\", \"# The costume designer's country of citizenship is Spain\",\n      \"?costumeDesigner wdt:P3373 wd:Q3083718 .\", \"# The costume designer is the sibling of Miguel Albaladejo\",\n      \"?costumeDesigner wdt:P2515 ?role .\", \"# The role of the costume designer (not needed but included for context)\",\n      \"FILTER(?role = \\\"costume designer\\\"^^<http://www.w3.org/2001/XMLSchema#string>)\" ,\"\\n# Filter to ensure it's a costume designer, though this is implied by P2515\"\n    ,\n      \"?film wdt:P31 wd:Q11424 ;\", \"# The film is an instance of a film\",\n      \"wd:Q3083718 wdt:P2515 ?costumeDesigner .\", \"# Miguel Albaladejo has the costume designer as one of his roles in the film\"\n    ,\n      \"FILTER NOT EXISTS { wd:Q3083718 wdt:P2515 ?otherCostumeDesigner . FILTER(?otherCostumeDesigner = ?costumeDesigner) }\" ,\"\\n# Ensure we only get unique costume designers (Miguel Albaladejo himself should not be returned)\"\n    ,\n      \"?film wdt:P31 wd:Q11424 ;\", \"# The film is an instance of a film\"\n    ,\"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?name\",\n    \"WHERE {\",\n    \"?designer kg:8324 ?sibling .\",\n    \"?sibling kg:3905 kg:1750 ;\",\n    \"   kg:3275 kg:8085 .\",\n    \"?designer kg:9566 ?costume_designing .\",\n    \"?film kg:2186 ?costume_designing .\",\n    \"?designer kg:name ?name .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P3509 _:w1. \",\n      \"?person wdt:P26 ?spouse. \",\n      \"?spouse wdt:P27 wd:Q34289. \",\n      \"?spouse wdt:P50 ?composer. \",\n      \"?composer wdt:P17 wd:Q34289. \",\n      \"FILTER(?person = wd:Q16866792) \",\n      \"BIND(wd:Q16866792 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q96203723 ;\",\n             \"wdt:P21 wd:Q6581072 ;\",\n             \"wdt:P106 wd:Q36834 ;\",\n             \"wdt:P27 wd:Q34 .\",\n      \"FILTER(?person = wd:Q96203723)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:8981 kg:3493 ;\", \"# Mattias Järvinen Palme's wife\",\n    \"   kg:3915 ;\", \"# is female\",\n    \"   kg:7145 kg:0427 ;\", \"# has Swedish citizenship\",\n    \"   kg:3327 ?gender .\", \"# gender information (not used in the final selection)\",\n    \"?person1 kg:9843/kg:8357 kg:9843 .\", \"# occupation is composer\"\n   \t,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person1 ?person2 ?person3 ?film WHERE {\",\n    \"  wd:Q467598 wdt:P50 ?person1 .\",\n    \"  wd:Q467598 wdt:P70 ?person2 .\",\n    \"  wd:Q467598 wdt:P71 ?person3 .\",\n    \"  ?film wdt:P648 wd:Q467598 ;\",\n    \"       wdt:P31 wd:Q11926 .\",\n    \"  FILTER (STR(?person1) = 'Jens Jørgen Thorsen' && STR(?person2) = 'Ole John' && STR(?person3) = 'Jørgen Leth')\",\n    \"  FILTER (STR(?film) = 'Stop for Bud')\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q20729551 ;\",\n           \"wdt:P162 ?producer ;\",\n           \"wdt:P1040 ?editor .\",\n      \"?producer wdt:P186 wd:Q1687239 ;\",\n      \"?producer wdt:P186 wd:Q35979475 ;\",\n      \"?producer wdt:P186 wd:Q562108 .\",\n      \"?editor wdt:P186 wd:Q35979475 ;\",\n      \"?editor wdt:P186 wd:Q1687239 ;\",\n      \"?editor wdt:P186 wd:Q562108 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4937 kg:1871 ?producer .\",\n    \"  kg:4937 kg:0455 ?jensJørgenThorsen .\",\n    \"  kg:4937 kg:4823 ?jørgenLeth .\",\n    \"  kg:4937 kg:8419 ?editor .\",\n    \"}\",\n    \"FILTER(?producer IN (kg:0455, kg:8729) && ?editor IN (kg:8419))\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P34 ?spouse .\",\n      \"?person wdt:P26 ?marriageDate .\",\n      \"?spouse wdt:P527* / p:P108 ?father .\",\n      \"?father rdfs:label ?fatherName .\",\n      \"FILTER (lang(?fatherName) = 'en') .\",\n      \"?spouse wdt:P527* / p:P108 ?mother .\",\n      \"?mother rdfs:label ?motherName .\",\n      \"FILTER (lang(?motherName) = 'en') .\",\n      \"?marriagePartner wdt:P34 ?person .\",\n      \"?marriagePartner wdt:P26 ?marriageDate .\",\n      \"?marriagePartner wdt:P527* / p:P108 ?father .\",\n      \"FILTER (?father != [] && ?mother != []) .\",\n      \"?marriagePartner rdfs:label ?spouseName .\",\n      \"FILTER (lang(?spouseName) = 'en' && ?spouseName = 'Ptolemy IX Lathyros') .\",\n      \"?person wdt:P735 ?father .\",\n      \"?person rdfs:label ?personName .\",\n      \"FILTER (lang(?personName) = 'en' && ?personName = 'Antiochus IX Cyzicenus') .\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P26 ?spouse .\",\n\t\t\t\"?person wdt:P3373 wd:Q3340 .\",\n\t\t\t\"?person wdt:P21 wd:Q6581072 .\",\n\t\t\t\"?person wdt:P26/wdt:P26* wd:Q296446\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:isSpouse ?spouse .\",\n    \"?person kg:isSibling ?sibling .\",\n    \"?sibling kg:isSpouse/kg:isPtolemyIXLathyros <http://example.org/resource/kg:0538> .\",\n    \"?person kg:isAntiochusIXCyzicenus <http://example.org/resource/kg:3391> .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q182694 ;\", \"# Jens Jørgen Thorsen\",\n      \"?work wdt:P50 wd:Q37466 .\", \"# Jørgen Leth\",\n      \"?work wdt:P50 wd:Q1022666 .\", \"# Ole John\",\n      \"?work wdt:P69 ?authorship.\" ,\"\\n\",\n      \"FILTER(?authorship IN(wdtn:P50))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?person wdt:P58 ?screenplay .\",\n      \"?person wdt:P1040 ?edit .\",\n      \"VALUES ?person { wd:Q1687239 wd:Q35979475 wd:Q562108 }\",\n      \"?work wdt:P31* ?screenplay ;\",\n      \"   wdt:P31* ?edit .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?work1, kg:isScreenwriter, kg:1969) .\",\n    \"  (?work2, kg:isFilmEditor, kg:4444) .\",\n    \"  (?work3, kg:isScreenwriter, kg:4516) .\",\n    \"  (?work3, kg:isFilmEditor, kg:5002) .\",\n    \"  ?resource (kg:isScreenwriter|kg:isFilmEditor)*/kg:title ?title .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q10597284 wdt:P50 ?author1 .\",\n    \"  wd:Q10597284 wdt:P50 ?author2 .\",\n    \"  wd:Q10597284 wdt:P50 ?author3 .\",\n    \"  wd:Q10597284 wdt:P161 ?editor .\",\n    \"  wd:Q10597284 wdt:P69 ?work .\",\n    \"  FILTER(?author1 = wd:Q10597284) ;\",\n    \"         (FILTER(?author2 = wd:Q10597284)) ;\",\n    \"         (FILTER(?author3 = wd:Q10597284)) .\",\n    \"  FILTER(?editor = wd:Q10597284) ;\",\n    \"         (FILTER(?work = wd:Q10597284)) .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q20729551 ;\",\n           \"wdt:P58 ?screenwriter ;\",\n           \"wdt:P1040 ?editor .\",\n      \"?screenwriter wdt:P58 wd:Q35979475 ;\",\n      \"?editor wdt:P1040 wd:Q1687239 , wd:Q562108 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2364 kg:6557 ?screenwriter .\",\n    \"  kg:2364 kg:4093 ?editor .\",\n    \"  FILTER(?screenwriter IN (kg:7577, kg:3159, kg:5506))\",\n    \"  FILTER(?editor IN (kg:7577, kg:3159, kg:5506))\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person1 ?person2 ?person3\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?person1 ;\",\n      \"   wdt:P58 ?person2 .\",\n      \"?film wdt:P64 ?person3 .\",\n      \"VALUES ?film { wd:Q1234567 }\", \"-- Replace with the actual Wikidata ID for 'Stop for Bud'\",\n      \"?person1 wdtype:P57 wd:Q987654 ;\", \"-- Replace Q987654 with the actual Wikidata ID for Ole John\",\n      \"?person2 wdtype:P58 wd:Q567890 ;\", \"-- Replace Q567890 with the actual Wikidata ID for Jørgen Leth\",\n      \"?person3 wdtype:P64 wd:Q123456 .\", \"-- Replace Q123456 with the actual Wikidata ID for Jens Jørgen Thorsen\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P162 ?producer .\",\n      \"?film wdt:P272 wd:Q20729551 .\",\n      \"{ VALUES ?producer { wd:Q35979475 wd:Q562108 wd:Q1687239 } } UNION { VALUES ?editor { wd:Q35979475 wd:Q562108 wd:Q1687239 } }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:9129 \\\"Stop for Bud\\\" .\",\n    \"?film kg:1680 ?producer .\",\n    \"?film kg:5139 ?editor .\",\n    \"FILTER (BOUND(?producer) && BOUND(?editor))\",\n    \"?producer kg:7611 \\\"Ole John\\\" .\",\n    \"?editor kg:7611 \\\"Jørgen Leth\\\" .\",\n    \"?film_editor kg:1312 \\\"Jens Jørgen Thorsen\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?show wdt:P31/wdt:P279* wd:Q140862.\", \"# Show is a television show\",\n      \"?show p:P57 ?statement.\", \"# The statement relates to production or executive producing\",\n      \"+?statement ps:P57 ?person.\", \"# The person who produced or executive produced the show\",\n      \"FILTER(?person IN (wd:Q1024693, wd:Q8718, wd:Q1024692)).\" ,\"\\n# Filter for Sam Simon, James L. Brooks, and Matt Groening\",\n      \"?statement pq:P580 ?date.\" ,\"\\n# Optional date (can be removed if not needed)\",\n      \"?show wdt:P813 ?resource.\" ,\"\\n# The resource produced or executive produced\"\n    ,\n    \"}\"\n  ]\n}\n                 \t \t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ?person { wd:Q365090 wd:Q95125 wd:Q43994 }\",\n    \"?person wdt:P162 ?producer.\",\n    \"?person wdt:P1431 ?executiveProducer.\",\n    \"?producer wdt:P272 ?resource.\"\n   \t]}\n \t\t  \t\t\t\t\t"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:2672 | kg:7057 | kg:3178 | kg:0948 | kg:1133) kg:1976 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sister ?wife\",\n    \"WHERE {\",\n      \"?person1 p:spouse|p:sibling ?relation .\",\n      \"?relation psnv:p:spouse|psnv:p:sibling ?sister; psnv:p:spouse|psnv:p:sibling ?wife .\",\n      \"?person1 wdt:P3457 \\\"Ptolemy IX Lathyros\\\"@en .\",\n      \"?person1 p:spouse/wdt:P26 ?sister .\",\n      \"?person1 p:spouse/p:P3458 ?wife .\",\n      \"FILTER(?sister != ?wife)\",\n      \"?sibling wdt:P3457 \\\"Ptolemy X\\\"@en || wdt:P3457 \\\"Alexander I of Egypt\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"SELECT ?sister ?wife\",\n    \"WHERE {\",\n      \"?person wdt:P3373 wd:Q3340 ;\", \"# The person is a sibling of Ptolemy IX Lathyros\",\n      \"   wdt:P26 ?wife .\", \"# The person's wife\",\n      \"?sister wdt:P26 wd:Q3340 ;\", \"# The sister's spouse is Ptolemy IX Lathyros\",\n      \"   wdt:P3373 ?person .\", \"# The sister is a sibling of the same person as above\",\n      \"FILTER(?sister != ?person) # Ensure we are not selecting the person themselves\",\n      \"?sister wdt:P21 wd:Q6581072\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"?person wdt:P3373 wd:Q3345 ;\" ,\"\\n# The person is also a sibling of Ptolemy X and Alexander I\",\n      \"   wdt:P26 ?wife .\", \"# The person's wife\"\n    ,\n      \"?sister wdt:P21 wd:Q6581072.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 wd:Q6581073 }\" ,\"\\n# Ensure the person is not male\"\n    ,\n      \"?sister wdt:P21 wd:Q6581073.\" ,\"\\n# Ensure the sister is female\"\n    ,\n      \"FILTER NOT EXISTS { ?person w"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?sister ?wife\",\n    \"{\",\n    \"  ?sister kg:is_female ?female .\",\n    \"  ?sister kg:is_spouse ?wife .\",\n    \"  ?wife kg:is_spouse kg:1945 .\", \"># Ptolemy IX Lathyros is represented by kg:1945\",\n    \"  ?sister kg:is_sibling ?brother .\",\n    \"  ?brother kg:is_sibling* / kg:is_sibling* kg:4993 .\", \"># Ptolemy X and Alexander I are siblings, represented by kg:4993\"\n    ,\n    \"} UNION {\",\n    \"  ?wife kg:is_spouse kg:1945 .\",\n    \"  ?wife kg:is_sibling* / kg:is_sibling* ?sister .\",\n    \"  ?sister kg:is_female ?female .\",\n    \"  ?sister kg:is_sibling ?brother .\",\n    \"  ?brother kg:is_sibling* / kg:is_sibling* kg:4993 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" , \"># Person is a human (optional for this specific query but good practice)\",\n      \"?person wdt:P279* wd:Q10684996.\" , \"># Check if the person is associated with Breaking Bad production\",\n      \"?productionEvent wd:P36 ?person; # The production event where the person was involved\",\n      \"  (wdt:P57 # Produced,\",\n      \"   wdt:P2810 # Directed, # Note: Wikidata does not have a direct property for 'directed', this is an approximation\",\n      \"   wdt:P6934 # Wrote).\" , \"># Check if the person was involved in producing, directing, or writing\"\n    ,\n    \"FILTER(?productionEvent = wd:Q10684996) # Ensure it's about Breaking Bad\" , \"># Specify that we are talking about Breaking Bad\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P58 wd:Q4500 ;\",\n              \"wdt:P57 wd:Q4500 ;\",\n              \"wdt:P162 wd:Q5542223 ;\",\n              \"wdt:P162 wd:Q4500 ;\",\n              \"wdt:P162 wd:Q5542223 ;\",\n      \"?person wdt:P272 wd:Q1079 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:0075 ;\", \"# Vince Gilligan\",\n    \"   kg:2221|kg:6328|kg:3866 ?show .\", \"# producer, director, or screenwriter\",\n    \"?person2 kg:2805 ;\", \"# George Mastras\",\n    \"   kg:2221|kg:6328|kg:3866 ?show .\", \"# producer, director, or screenwriter\",\n    \"?show kg:5986 .\", \"# Breaking Bad\",\n    \"?person1 ?property ?show ;\",\n    \"?person2 ?property ?show .\",\n    \"FILTER NOT EXISTS { ?person1 ?property2 ?show }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P3459 ?costumeDesigner .\",\n    \"  ?film2 wdt:P3459 ?costumeDesigner .\",\n    \"  ?film3 wdt:P3459 ?costumeDesigner .\",\n    \"  VALUES ?film1 { wd:Q1086772 } # 'Tom at the Farm'\",\n    \"  VALUES ?film2 { wd:Q1086773 } # 'Heartbeats'\",\n    \"  VALUES ?film3 { wd:Q1086774 } # 'Laurence Anyways'\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P106 wd:Q1323191. \",\n    \"  ?film wdt:P161* wd:Q2615443. \",\n    \"  ?film wdt:P161* wd:Q2336453. \",\n    \"  ?film wdt:P161* wd:Q3530946. \",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2002 kg:0137. ;; Costume designer occupation\",\n    \"?film kg:9083 \\\"Laurence Anyways\\\" . ;; Laurence Anyways film\",\n    \"?film kg:6947 ?resource . ;; Star and edit the film\",\n    \"?film kg:3899 \\\"Heartbeats\\\" . ;; Heartbeats film\",\n    \"?film kg:8202 \\\"Tom at the Farm\\\". ;; Tom at the Farm film\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31* wd:Q11424;\",\n             \"wdt:P577 ?date.\",\n      \"?person wdt:P161 ?film;\",\n               \"wdt:P180 ?film.\",\n      \"VALUES ?film { wd:Q1092774 wd:Q1092776 wd:Q1092778 wd:Q1092800 }\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P161 ?person .\",\n      \"?film wdt:P31 wd:Q119268090 .\", \"># films are instances of film\",\n      \"?person wdt:P31 wd:Q5 .\", \"># person is an instance of human\",\n      \"VALUES ?film { wd:Q658822 wd:Q2718259 wd:Q921678 wd:Q45602 }\" ]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?film1 kg:7312 ?resource .\",\n\t\t\t\"?film1 a kg:1634 ;\",\n\t\t\t\t\"kg:1015 ?resource .\",\n\t\t\t\"?film2 kg:3219 ?resource .\",\n\t\t\t\"?film2 a kg:1634 ;\",\n\t\t\t\t\"kg:1015 ?resource .\",\n\t\t\t\"?film3 kg:2793 ?resource .\",\n\t\t\t\"?film3 a kg:1634 ;\",\n\t\t\t\t\"kg:1015 ?resource .\",\n\t\t\t\"?film4 kg:7833 ?resource .\",\n\t\t\t\"?film4 a kg:1634 ;\",\n\t\t\t\t\"kg:1015 ?resource .\",\n\t\t\t\"?resource a kg:3190.\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?work ?directed ?edited\",\n    \"WHERE {\",\n      \"?person wdtn:director / wdt:P31* ?directedWork .\",\n      \"?person wdt:P800 / wdt:P31* ?editedWork .\",\n      \"VALUES ?person { wd:Q249675 wd:Q11602251 wd:Q11602252 wd:Q11602253 }\",\n      \"?directedWork wdt:P1477 ?work .\",\n      \"?editedWork wdt:P800 ?work .\",\n      \"FILTER(?person = wd:Q249675 || ?person = wd:Q11602251 || ?person = wd:Q11602252 || ?person = wd:Q11602253)\",\n    \"}\",\n    \"ORDER BY ?work\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?work ?director ?editor\",\n\t\t\"WHERE {\",\n\t\t\t\"?work wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor.\",\n\t\t\t\"?director wd:Q1291210 / wd:Q4679987 / wd:Q4207987 / wd:Q16198328 .\",\n\t\t\t\"?editor wd:Q4679987 / wd:Q4207987 / wd:Q1291210 / wd:Q16198328.\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:4625 | kg:8606 | kg:9172 | kg:1102) kg:6483 ?work .\",\n    \"  ?work a kg:8022 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?film\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" ,\", \" ,\"%s\" , \"wdt:P106/wdt:P279* wd:Q11424.\" ,\", \" ,\"%s\" , \"wdt:P31 wd:Q11424.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P577 \\\"1995-02-10\\\"^^xsd:date.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?person wdt:P50 ?film.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P735 wd:Q18696456.\" ,\", \" ,\"%s\" , \"?film wdt:P648 wd:Q1869645"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P58 ?writer .\",\n      \"?film wdgt:label \\\"Four Rooms\\\"@en .\",\n      \"{ ?director wd:Q47284. } UNION { ?director wd:Q549956. } UNION { ?director wd:Q2838329. } UNION { ?director wd:Q3772. }\",\n      \"{ ?writer wd:Q47284. } UNION { ?writer wd:Q2838329. } UNION { ?writer wd:Q3772. } UNION { ?writer wd:Q549956. }\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?director kg:is_director ?movie .\",\n    \"  ?director kg:is_screenwriter ?movie .\",\n    \"  ?movie kg:is_Four_Rooms ?true .\",\n    \"  FILTER (?director IN (kg:0913, kg:8047, kg:2759, kg:2202))\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person ?film WHERE {\",\n    \"  VALUES ?person { wd:Q14652093 wd:Q87122 wd:Q10266628 wd:Q11224 }\",\n    \"  ?person wdt:P31/wdt:P279* wd:Q11424. # Check if the person is a human and has occupation related to film production\",\n    \"  ?film wdt:P345 ?person. # Check if the person directed the film\",\n    \"  ?film wdt:P661 ?person. # Check if the person produced the film\",\n    \"  FILTER EXISTS { ?film wdt:P740 'Super Rhino'@en } # Filter films with title Super Rhino\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q40220 wdt:P57 ?director .\",\n    \"  wd:Q40220 wdt:P162 ?producer .\",\n    \"  wd:Q3977597 wdt:P57 ?director ;\",\n    \"         wdt:P162 ?producer .\",\n    \"  wd:Q4235 wdt:P57 ?director ;\",\n    \"         wdt:P162 ?producer .\",\n    \"  wd:Q5127380 wdt:P57 ?director ;\",\n    \"         wdt:P162 ?producer .\",\n    \"  wd:Q40220 wdt:P272 ?productionCompany .\",\n    \"  wd:Q3977597 wdt:P272 ?productionCompany .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:9356 | kg:5093 | kg:5307 | kg:2703) kg:1096 ?movie .\",\n    \"  (kg:9356 | kg:5093 | kg:5307 | kg:2703) kg:6682 ?movie .\",\n    \"  ?movie kg:9028 \\\"Super Rhino\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P69 wd:Q15482;\", \"># P69 is the property for \\\"executive producer\\\"\",\n      \"?work wdt:P671 wd:Q15482;\\\" # P671 is the property for \\\"producer\\\"\",\n      \"?work wdt:P290 wd:Q15482.\\\" # P290 is the property for \\\"editor\\\"\",\n      \"FILTER(?work != wd:Q15482) # Exclude George Lucas himself from being a resource\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P58 wd:Q38222 ;\",\n           \"wdt:P1040 wd:Q38222 ;\",\n           \"wdt:P1431 wd:Q38222 ;\",\n           \"wdt:P162 wd:Q38222 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isScreenwriter kg:0613 ;\",\n    \"         kg:isFilmEditor kg:0613 ;\",\n    \"         kg:isExecutiveProducer kg:0613 ;\",\n    \"         kg:isProducer kg:0613 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?article wdt:P31 wd:Q13442801 ;\", \"># Assuming articles are instances of creative works\",\n    \"wdt:P6297 \\\"Every Man for Himself\\\" ;\", \"># Work title (replace with the exact property if available)\",\n    \"wdt:P6297 \\\"Passion\\\" ;\",\n    \"wdt:P6297 \\\"Notre Musique\\\" .\", \"># Add more titles as needed\",\n    \"?article wdt:P1435 ?resource .\", \"># The resource is the writer and editor\",\n    \"?resource wdt:P31 wd:Q5 .  # Ensure the resource is a person\"\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n    \"FILTER NOT EXISTS {\",\n    \"?article wdt:P6297 \\\"Cahiers du cinéma\\\" .\", \"># Exclude if the article worked at Cahiers du cinéma (if needed)\"\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n    \"} \",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P58 ?person ;\",\n           \"wdt:P1040 ?person .\",\n      \"?editor wdt:P1040 ?person .\",\n      \"?work wdt:P108 wd:Q909176 .\",\n      \"(wd:Q972787 | wd:Q672061 | wd:Q3141131) wdt:P58 ?person ;\",\n           \"wdt:P1040 ?editor .\",\n      \"?person wdt:P108 wd:Q909176 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3353/kg:5303 kg:2653 ;\", \"># Screenwriter and editor of Every Man for Himself\",\n    \"      kg:3353/kg:5303 kg:2627 ;\", \"># Screenwriter and editor of Passion\",\n    \"      kg:3353/kg:5303 kg:7573 ;\", \"># Screenwriter and editor of Notre Musique\",\n    \"      kg:2120 kg:9335 .          # Worked at Cahiers du cinéma\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?movie WHERE {\",\n\t\t\"?movie wdt:P345 ?productionRole .\",\n\t\t\"?productionRole wdt:P106 wd:Q879289 ;\", \"# Executive Producer\",\n\t\t\"wdt:P31 wd:Q11424 ; # Movie\",\n\t\t\"?productionRole wdt:P577 \\\"Laws of Attraction\\\"@en .\",\n\t\t\"?person wdt:P161 ?productionRole .\",\n\t\t\"VALUES ?person { wd:Q98063 wd:Q180421 wd:Q1027595 wd:Q1027596 }\", \"# Bob Yari, Pierce Brosnan, Toby Emmerich, Elie Samaha\",\n\t\t\"}\",\n\t\t\"ORDER BY ?person\"\n\t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?movie wdt:P272 ?production_company .\",\n      \"?movie wdt:P1431 wd:Q81520 ;\",\n           \"wdt:P1431 wd:Q1969128 ;\",\n           \"wdt:P1431 wd:Q1295611 ;\",\n           \"wdt:P1431 wd:Q819109 .\",\n      \"?movie wdt:P162 wd:Q81520 ;\",\n           \"wdt:P162 wd:Q1969128 ;\",\n           \"wdt:P162 wd:Q1295611 ;\",\n           \"wdt:P162 wd:Q819109 .\",\n      \"?person wdt:P272 ?production_company .\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?p1 kg:0533 ?movie) .\",\n    \"  (?p2 kg:9767 ?movie) .\",\n    \"  (?p3 kg:5056 ?movie) .\",\n    \"  (?p4 kg:0533 ?movie) .\",\n    \"  ?p1 kg:is ?person1 .\",\n    \"  ?p2 kg:is ?person2 .\",\n    \"  ?p3 kg:is ?person3 .\",\n    \"  ?p4 kg:is ?person4 .\",\n    \"  ?movie kg:5622 ?title .\",\n    \"  FILTER (?title = \\\"Laws of Attraction\\\")\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q106825 wdt:P31/wdt:P279* ?resource .\",\n    \"  wd:Q106825 wdt:P577 ?date .\",\n    \"  ?resource wdt:P345 ?kagemushaFilm .\",\n    \"  ?kagemushaFilm wdt:P57 ?person .\",\n    \"  FILTER (STR(?person) = 'Akira Kurosawa'@en).\",\n    \"  ?kagemushaFilm wdt:P698 ?productionRole .\",\n    \"  FILTER (?productionRole IN ('writer', 'editor', 'producer', 'executive producer')).\"\n    ,\"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q854990 ;\", \"# Film identifier for Kagemusha\",\n    \"  wdt:P58 ?screenwriter .\", \"# Screenwriter(s)\",\n    \"  wdt:P1040 ?editor .\", \"# Editor(s)\",\n    \"  wdt:P162 ?producer .\", \"# Producer(s)\",\n    \"  wdt:P1431 ?executiveProducer .\", \"# Executive producer(s)\",\n    \"?screenwriter wdt:wdt:P279* wd:Q8006 ;\", \"# Screenwriter is by Akira Kurosawa\",\n    \"?editor wdt:wdt:P279* wd:Q8006 ;\", \"# Editor is by Akira Kurosawa\",\n    \"?producer wdt:wdt:P279* wd:Q8006 ;\", \"# Producer is by Akira Kurosawa\",\n    \"?executiveProducer wdt:wdt:P279* wd:Q8006 . # Executive producer is by Akira Kurosawa\",\n    \"VALUES ?resource { wd:Q854990 }\" ,\"\\n# Filter to return only the film resource\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:director* kg:6049 ;\",\n    \"   kg:screenwriter* kg:6880 ;\",\n    \"   kg:editor* kg:3149 ;\",\n    \"   kg:producer* kg:0779 ;\",\n    \"   kg:executiveProducer* kg:3712 ;\",\n    \"   a kg:Film ;\",\n    \"   kg:title ?filmTitle .\",\n    \"FILTER(?filmTitle = kg:1415)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  ?project wdt:P31/wdt:P279* wd:Q11424; //wdt:P50|wdt:P281|wdt:P69 |wdt:P100 /wdt/P279* wd:Q7111221 ;\",\n    \"  FILTER(?project != wd:Q7111221).\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?project WHERE {\",\n\t\t\"?project wdt:P57 wd:Q562108 ;\", \"# Jørgen Leth as director\",\n\t\t\"?project wdt:P58 wd:Q35979475 ;\" ,\"# Ole John as screenwriter\",\n\t\t\"?project wdt:P1040 wd:Q1687239 .  # Jens Jørgen Thorsen as editor\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is_director kg:0365 ;\",\n    \"   kg:is_screenwriter kg:4530 ;\",\n    \"   kg:is_film_editor kg:7265 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q13437806 ;\", \"># A creative work or its subclass (e.g., movie, TV show, etc.)\",\n    \"wdt:P50 [ wikibase:claim wdt:P2659 ; wikibase.getSuggestedValue ?person ] ;\", \"># Director, writer, and editor of the work\",\n    \"?work wdt:P143 [ wikibase:claim wdt:P2659 ; wikibase.getSuggestedValue ?person ] .\", \"># Ensure all roles are attributed to Ole John, Jørgen Leth, and Jens Jørgen Thorsen\",\n    \"FILTER(?person IN (wd:Q1048731, wd:Q126594, wd:Q1048732))\" ,\"\\n# Q1048731 - Ole John, Q126594 - Jørgen Leth, Q1048732 - Jens Jørgen Thorsen\",\n    \"}\"\n  ]\n}\n"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?work WHERE {\",\n\t\t\"?work wdt:P57 wd:Q35979475 ;\", \"# Director Ole John\",\n\t\t\"?work wdt:P58 wd:Q562108 ;\" , \"# Screenwriter Jørgen Leth\",\n\t\t\"?work wdt:P1040 wd:Q1687239 . \" ,\"\\n# Editor Jens Jørgen Thorsen\\n}\",\n\t\t\"LIMIT 10\"\n\t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9712 kg:5238 ;\", \"# Ole John is the director\",\n    \"   kg:2466 kg:7889 ;\", \"# Jørgen Leth is the screenwriter\",\n    \"   kg:9552 kg:2197 .\" ,\"\\t# Jens Jørgen Thorsen is the editor\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?cinematographer ?director ?producer\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?cinematographer ;\", \"# P345 is used for cinematographer\",\n      \"?movie wdt:P318 ?director .\", \"# P318 is used for director\",\n      \"?movie wdt:P161 ?producer .\", \"# P161 is used for producer\",\n      \"VALUES ?movie { wd:Q249075 wd:Q1982096 wd:Q1022732 wd:Q1022733 }\", \"# QIDs for the movies mentioned\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?personLabel\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P57 ?director .\",\n\t\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\t\"?person wdt:P106 wd:Q283699 ;\", \"# Hatchet for the Honeymoon director\",\n\t\t\t\"?person wdt:P106 wd:Q629819 ;\", \"# Danger: Diabolik director\",\n\t\t\t\"?person wdt:P106 wd:Q1216566 ;\", \"# Black Sunday director\",\n\t\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\t\"?film wdt:P57 ?director .\",\n\t\t\t\"OPTIONAL { ?person wdt:P344 ?producer }\",\n\t\t\t\"FILTER (!BOUND(?producer))\",\n\t\t\t\"?person rdfs:label ?personLabel .\",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:6263 ?director .\",\n    \"?film2 kg:6263 ?director .\",\n    \"?film3 kg:6263 ?director .\",\n    \"?film4 kg:6263 ?director .\",\n    \"?film1 kg:3120 ?cinematographer .\",\n    \"?film2 kg:3120 ?cinematographer .\",\n    \"?film3 kg:3120 ?cinematographer .\",\n    \"?film4 kg:3120 ?cinematographer .\",\n    \"?director kg:0627 ?producer .\",\n    \"?film1 a/kg:7705 .\",\n    \"?film2 a/kg:2063 .\",\n    \"?film3 a/kg:7198 .\",\n    \"?film4 a/kg:7085 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person WHERE {\",\n    \"  VALUES ?film { wd:Q10572648 wd:Q3966722 wd:Q10572650 wd:Q10572652 }\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424.\" ,\"%s\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424.\",\n    \"  ?film wdt:P571 ?start.\",\n    \"  ?film wdt:P830 ?person.\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424.\",\n    \"  ?film wdt:P677 ?person.\" ,\n    \"  FILTER NOT EXISTS {\",\n    \"    ?film wdt:P571 ?start2. FILTER(?start < ?start2) }\",\n    \"}\",\n    \"ORDER BY ASC(?start)\"\n  ]\n}\n   \t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film ?person WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P57 ?person .\",\n\t\t\"?person wdt:P106 wd:Q33999 .\",\n\t\t\"VALUES ?film { wd:Q3485595 wd:Q862058 wd:Q3016313 wd:Q1473406 }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:9917 ?person .\",\n    \"?film2 kg:9917 ?person .\",\n    \"?film3 kg:9917 ?person .\",\n    \"?film4 kg:9917 ?person .\",\n    \"?film5 kg:9628 ?person .\",\n    \"?film6 kg:5366 ?person .\",\n    \"VALUES ?film1 { kg:9038 }\",\n    \"VALUES ?film2 { kg:9234 }\",\n    \"VALUES ?film3 { kg:0113 }\",\n    \"VALUES ?film4 { kg:1977 }\",\n    \"VALUES ?film5 { kg:9628 }\",\n    \"VALUES ?film6 { kg:5366 }\",\n    \"?person a kg:5713 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n      \"(wdt:P50|wdt:P648) [wdt:P50|wdt:P648] wd:Q1051191 ;\",\n      \"wdt:P339/wdt:P136* wd:Q762169.\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424865.\" , \"># Check if the resource is a film\",\n      \"?film wdt:P50 wd:Q1005665.\" , \"# Ole John Thorsen was director of ?film\",\n      \"?film wdt:P739 wd:Q1005665.\" , \"# Ole John Thorsen was editor of ?film\",\n      \"?film wdt:P57(P2864) wd:Q1005665.\" , \"# Ole John Thorsen was writer of ?film\",\n      \"FILTER EXISTS { ?film wdt:P50 wd:Q139665. }\" , \"# Jens Jørgen Thorsen was director of ?film\",\n      \"FILTER EXISTS { ?film wdt:P739 wd:Q139665. }\" , \"# Jens Jørgen Thorsen was editor of ?film\",\n      \"FILTER EXISTS { ?film wdt:P57(P2864) wd:Q139665. }\" , \"# Jens Jørgen Thorsen was writer of ?film\",\n      \"FILTER EXISTS { ?film wdt:P50 wd:Q100566.\" ,\"# Jørgen Leth was director of ?film\",\n      \"FILTER EXISTS { ?film wdt:P739 wd:Q100566. }\" , \"# Jørgen Leth was editor of ?film\",\n      \"FILTER EXISTS { ?film wdt:P57(P2864) wd:Q100566. }\" ,\"# Jørgen Leth was writer of ?film\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P57 wd:Q35979475 ;\",\n\t\t\"   wdt:P58 wd:Q35979475 ;\",\n\t\t\"   wdt:P1040 wd:Q35979475 .\",\n\t\t\"?film wdt:P57 wd:Q1687239 ;\",\n\t\t\"   wdt:P58 wd:Q1687239 ;\",\n\t\t\"   wdt:P1040 wd:Q1687239 .\",\n\t\t\"?film wdt:P57 wd:Q562108 ;\",\n\t\t\"   wdt:P58 wd:Q562108 ;\",\n\t\t\"   wdt:P1040 wd:Q562108 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:is_director kg:7862 ;\",\n    \"   kg:is_screenwriter kg:7862 ;\",\n    \"   kg:is_film_editor kg:7862 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"?film kg:is_director kg:3772 ;\",\n    \"   kg:is_screenwriter kg:3772 ;\",\n    \"   kg:is_film_editor kg:3772 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"?film kg:is_director kg:7339 ;\",\n    \"   kg:is_screenwriter kg:7339 ;\",\n    \"   kg:is_film_editor kg:7339 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?movie wdt:P31/wdt:P279* wd:Q114248065 ;\", \"># Q114248065 is the Wikidata item for Grindhouse movie\",\n    \"           wdt:P577 ?releaseDate .\",\n    \"  ?person wdt:P31/wdt:P279* wd:Q5 ;\", \"># Q5 is the Wikidata item for human\",\n    \"           wdt:P161 ?movie .\", \"># P161 is the property for 'is a cast member of'\",\n    \"  VALUES ?person { wd:Q438209 # Eli Roth\",\n    \"                  wd:Q57662   # Edgar Wright\",\n    \"                  wd:Q114242  # Rob Zombie\",\n    \"                  wd:Q12562   # Quentin Tarantino\",\n    \"                  wd:Q38609   # Robert Rodriguez\" ,\n    \"                } .\",\n    \"}\",\n    \"ORDER BY ?person\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?movie WHERE {\",\n\t\t\"?movie wdt:P58 ?screenwriter .\",\n\t\t\"?movie wdt:P57 ?director .\",\n\t\t\"?screenwriter wd:Q47284 ; wd:Q522057 ; wd:Q358714 ; wd:Q298255 ; wd:Q3772 .\",\n\t\t\"?director wd:Q47284 ; wd:Q522057 ; wd:Q358714 ; wd:Q298255 ; wd:Q3772 .\",\n\t\t\"FILTER(?movie = wd:Q679023)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:is director*/kg:is screenwriter* kg:2115 ;\",\n    \"      kg:is director?|kg:is screenwriter? ?role .\",\n    \"?person2 kg:is director*/kg:is screenwriter* kg:2115 ;\",\n    \"      kg:is director?|kg:is screenwriter? ?role .\",\n    \"?person3 kg:is director*/kg:is screenwriter* kg:2115 ;\",\n    \"      kg:is director?|kg:is screenwriter? ?role .\",\n    \"?person4 kg:is director*/kg:is screenwriter* kg:2115 ;\",\n    \"      kg:is director?|kg:is screenwriter? ?role .\",\n    \"?person5 kg:is director*/kg:is screenwriter* kg:2115 ;\",\n    \"      kg:is director?|kg:is screenwriter? ?role .\",\n    \"?person1 ?role kg:2115 .\",\n    \"?person2 ?role kg:2115 .\",\n    \"?person3 ?role kg:2115 .\",\n    \"?person4 ?role kg:2115 .\",\n    \"?person5 ?role kg:2115 .\",\n    \"VALUES (?person1 ?person2 ?person3 ?person4 ?person5) { (kg:1454 kg:0795 kg:8328 kg:9736 kg:2406) }\",\n    \"?person1 kg:is director/kg:is screenwriter* kg:2115 .\",\n    \"?person2 kg:is director/kg:is screenwriter* kg:2115 .\",\n    \"?person3 kg:is director/kg:is screenwriter* kg:2115 .\",\n    \"?person4 kg:is director/kg:is screenwriter* kg:2115 .\",\n    \"?person5 kg:is director/kg:is screenwriter* kg:2115 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n      \"?filmProducer wdt:P31 wd:Q11424; # Check if the resource is a film producer\",\n      \"?filmProducer wdt:P50/wdt:P161* ?film. # The film producer produced or wrote the films\",\n      \"?film wdt:P345 'Katzelmacher'@en . # Katzelmacher film\",\n      \"FILTER EXISTS { ?film wdt:P735 'Lili Marleen'@en } # Lili Marleen film exists in the graph }\",\n      \"FILTER EXISTS { ?film wdt:P735 'Whity'@en } # Whity film exists in the graph }\",\n      \"FILTER EXISTS { ?film wdt:P735 'The Niklashausen Journey'@en } # The Niklashausen Journey film exists in the graph }\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P31 wd:Q11424 .\", \"># Assuming films are instances of Q11424 (CreativeWork)\",\n\t\t\"VALUES ?film { wd:Q567519 wd:Q686125 wd:Q3282637 wd:Q2789885 } .\",\n\t\t\"?person wdt:P106 wd:Q327427 .\", \"># Person with occupation as film producer\",\n\t\t\"FILTER EXISTS { ?film wdt:P1001 ?person . } # Check if the person produced the film\",\n\t\t\"VALUES ?resource { ?editor ?writer ?person }\"\n\t\t]}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmProducer a kg:9570 ;\",\n    \"   kg:1121/kg:6788 ?screenwriter ;\",\n    \"   kg:1121/kg:3259 ?editor .\",\n    \"\",\n    \"?film1 kg:1392 ?filmProducer ;\",\n    \"   kg:1392 ?screenwriter ;\",\n    \"   kg:1392 ?editor .\",\n    \"\",\n    \"?film2 kg:1392 ?filmProducer ;\",\n    \"   kg:1392 ?screenwriter ;\",\n    \"   kg:1392 ?editor .\",\n    \"\",\n    \"?film3 kg:1392 ?filmProducer ;\",\n    \"   kg:1392 ?screenwriter ;\",\n    \"   kg:1392 ?editor .\",\n    \"\",\n    \"?film4 kg:1392 ?filmProducer ;\",\n    \"   kg:1392 ?screenwriter ;\",\n    \"   kg:1392 ?editor .\",\n    \"\",\n    \"VALUES ?film1 { kg:5693 }\",\n    \"VALUES ?film2 { kg:5270 }\",\n    \"VALUES ?film3 { kg:3942 }\",\n    \"VALUES ?film4 { kg:6788 }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wdt:P50|wdt:P648|wdt:P2790|wdt:P136|wdt:P137 ?person .\",\n    \"?person wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wikibase:sitelink 'Thomas Schnauz'@en|'Peter Gould'@en|'George Mastras'@en|'Sam Catlin'@en|'Vince Gilligan'@en .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?project WHERE {\",\n\t\t\"?project wdt:P57 wd:Q15042700 ;\", \"# Thomas Schnauz\",\n\t\t\"wdt:P58 wd:Q5542223 .\", \"# George Mastras\",\n\t\t\"?project wdt:P57 wd:Q4500 ;\", \"# Vince Gilligan\",\n\t\t\"wdt:P58 wd:Q7407299 .\", \"# Sam Catlin\",\n\t\t\"?project wdt:P57 wd:Q7174311 ;\", \"# Peter Gould\",\n\t\t\"wdt:P58 wd:Q5542223 .\" ,\"\\n# George Mastras\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:0286 ?director .\",\n    \"?project kg:5267 ?screenwriter .\",\n    \"(?director IN (kg:4558, kg:0982, kg:6928, kg:6899, kg:2196))\",\n    \"}\",\n    \"DISTINCT\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?production wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Production item\",\n      \"?production wdt:P57 \" , \"# Directed by\",\n      \"/wdt/P106 wd:Q11424806.\" , \"# Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n      \".\",\n      \"?production wdt:P73 \" , \"# Written by\",\n      \"/wdt/P106 wd:Q11424806.\" ,\n      \".\",\n      \"?production wdt:P74 \" , \"# Edited by\",\n      \"/wdt/P106 wd:Q11424806.\" ,\n      \".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?production WHERE {\",\n\t\t\"?production wdt:P57 ?director .\",\n\t\t\"?production wdt:P58 ?screenwriter .\",\n\t\t\"?production wdt:P1040 ?editor .\",\n\t\t\"?production wdt:P31 wd:Q13442964 .\", \"># Assuming the production is a film or TV show, use appropriate instance of creative work class (e.g., Q13442964 for movie)\",\n\t\t\"VALUES ?director { wd:Q35979475 }\",\n\t\t\"VALUES ?screenwriter { wd:Q1687239 }\",\n\t\t\"VALUES ?editor { wd:Q562108 }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6229 ?director .\",\n    \"?resource kg:4344 ?screenwriter .\",\n    \"?resource kg:0618 ?editor .\",\n    \"?director kg:3628 ?oleJohn .\",\n    \"?screenwriter kg:7861 ?jensJorgenThorsen .\",\n    \"?editor kg:8050 ?jorgenLeth .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?editor ?execProducer ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"      wdt:P577 ?releaseDate. # Optional: filter by release date, if needed\",\n      \"?film wdt:P678 ?editor. # Editor of the film\",\n      \"?film wdt:P3390 ?execProducer. # Executive producer of the film\",\n      \"?film wdt:P50 ?writer. # Writer of the film\",\n      \"VALUES ?film { wd:Q124612 wd:Q785652 wd:Q124613 wd:Q192629 } # Star Wars films and 'Star Whores'\",\n      \"?editor wdt:P106* wd:Q133479. # Check if the editor is a film editor\",\n      \"FILTER NOT EXISTS { ?film wdt:P815 ?execProducer. } # Filter out cases where the same person is both editor and executive producer\",\n      \"}\",\n    \"LIMIT 100\"\n  ]\n}\n"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P106 wd:Q7042855 ;\", \"# Star Wars: Episode IV – A New Hope\",\n\t\t\"(wdt:P106 wd:Q165713 ; # Star Wars: Episode I – The Phantom Menace\",\n\t\t\"wdt:P106 wd:Q181803 ; # Star Wars: Episode VI – Return of the Jedi\",\n\t\t\"wdt:P1431 ?resource .\", \"# is executive producer for one of these films\",\n\t\t\"?film wdt:P58 ?screenwriter .\", \"# has a screenwriter\",\n\t\t\"?screenwriter wdt:P106 wd:Q7042855 ; # the screenwriter is also a film editor\",\n\t\t\"wdt:P106 wd:Q7042855 } UNION {\", \"# OR\",\n\t\t\"?film wdt:P106 wd:Q3968346 ;\", \"# Star Whores\",\n\t\t\"(wdt:P106 wd:Q106 ; # is executive producer for Star Whores\",\n\t\t\"wdt:P58 ?screenwriter .\", \"# has a screenwriter\",\n\t\t\"?screenwriter wdt:P106 wd:Q7042855 } # the screenwriter is also a film editor\"\n\t\t]} "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:9486 ?film .\",\n    \"?editor kg:7901/kg:8729 ?episode1 .\",\n    \"?editor kg:7901/kg:9870 ?episode2 .\",\n    \"?episode1 kg:4212 \\\"Star Wars: Episode IV – A New Hope\\\" .\",\n    \"?episode2 kg:2824 \\\"Star Wars: Episode I – The Phantom Menace\\\" .\",\n    \"OPTIONAL { ?editor kg:7901/kg:8729 ?episode3 . ?episode3 kg:7215 \\\"Star Wars: Episode VI – Return of the Jedi\\\" }\",\n    \"OPTIONAL { ?editor kg:7901/kg:9870 ?episode4 . ?episode4 kg:3339 \\\"Star Whores\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person1 ?person2 ?person3\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248760 ;\", \"# Replace with specific film ID if known\",\n      \"  wdt:P50 ?person1 ;\",\n      \"  wdt:P51 ?person2 ;\",\n      \"  wdt:P934 ?person3 .\",\n      \"?person1 wdt:P21 wd:Q6581072 ;\", \"# Male person\",\n      \"?person2 wdt:P21 wd:Q6581072 ;\", \"# Male person\",\n      \"?person3 wdt:P21 wd:Q6581072 .\", \"# Male person\",\n      \"VALUES ?person1 { wd:Q1049271 } ;\",\n      \"   ?person2 { wd:Q1049272 } ;\",\n      \"   ?person3 { wd:Q1049273 }.  # Replace with actual Wikidata IDs if known\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director ;\",\n           \"wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer .\",\n      \"?person wdt:P31 wd:Q20729551 ;\",\n              \"wdt:P57 ?director ;\",\n              \"wdt:P1040 ?editor ;\",\n              \"wdt:P58 ?writer .\",\n      \"VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n      \"VALUES ?film { wd:Q20729551 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:2342 | kg:1653 | kg:6976) kg:8356+ ?resource ;\",\n    \"       kg:7483 kg:7483.\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P3459 ?episodeI ;\", \"# Executive producer of Star Wars: Episode I – The Phantom Menace\",\n    \"           wdt:P3459 ?landBeforeTime .\", \"# Executive producer of The Land Before Time\",\n    \"  OPTIONAL { ?resource wdt:P16180 ?anyoneLived ; } # Writer and cinematographer of Anyone Lived in a Pretty How Town\",\n    \"  OPTIONAL { ?resource wdt:P16180 ?oneFortyTwo ; } # Writer and cinematographer of 1:42.08\",\n    \"  OPTIONAL { ?resource wdt:P16180 ?lookAtLife . } # Writer and cinematographer of Look at Life\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?episodeI wdt:P31 wd:Q57790 ;\", \"# Star Wars: Episode I – The Phantom Menace is a film\"\n   ,\"  rdfs:label ?episodeILabel .\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?landBeforeTime wdt:P31 wd:Q57790 ;\", \"# The Land Before Time is a film\"\n    ,\"  rdfs:label ?landBeforeTimeLabel .\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?anyoneLived wdt:P31 wd:Q68424 ;\", \"# Anyone Lived in a Pretty How Town is a short film\"\n    ,\"  rdfs:label ?anyoneLivedLabel .\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?oneFortyTwo wdt:P31 wd:Q68424 ;\", \"# 1:42.08 is a short film\"\n    ,\"  rdfs:label ?oneFortyTwoLabel .\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?lookAtLife wdt:P31 wd:Q68424 ;\", \"# Look at Life is a short film\"\n    ,\"  rdfs:label ?lookAtLifeLabel .\",\n    \"}\"\n  ]\n}\n"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  ?film wdt:P1431 ?person ;\",\n    \"         wdt:P58 ?person .\",\n    \"  wd:Q613974 wdt:P344 ?person ;\",\n    \"           wdt:P58 ?person .\",\n    \"  wd:Q208910 wdt:P344 ?person ;\",\n    \"           wdt:P58 ?person .\",\n    \"  wd:Q208910 wdt:P344 ?person ;\",\n    \"           wdt:P58 ?person .\",\n    \"  wd:Q165713 wdt:P1431 ?person ;\",\n    \"         wdt:P58 ?person .\",\n    \"  wd:Q192403 wdt:P344 ?person ;\",\n    \"           wdt:P58 ?person .\",\n    \"  wd:Q1869678 wdt:P344 ?person ;\",\n    \"           wdt:P58 ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n \t\"query\": [\"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n \t\t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:8695 kg:3675 ;\",\n \t\t\t\"   kg:8695 kg:4438 ;\",\n \t\t\t\"   kg:3076 kg:7257 ;\",\n \t\t\t\"   kg:3076 kg:2498 ;\",\n \t\t\t\"   kg:3076 kg:4014 .\",\n \t\t\t\"}\"]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?director ?writer ?editor ?executiveProducer\",\n    \"WHERE {\",\n      \"?film wdt:P3451 ?director .\", \"# Uzak and Clouds of May director\",\n      \"?film wdt:P703 ?writer .\", \"# Uzak and Clouds of May writer\",\n      \"?film wdt:P802 ?editor .\", \"# Uzak and Clouds of May editor\",\n      \"?film wdt:P161 ?executiveProducer .\", \"# Uzak and Clouds of May executive producer\",\n      \"VALUES ?film { wd:Q459736 wd:Q180265 }\" ,\"\\n# Q459736 is the Wikidata item for 'Uzak',\\n# Q180265 is the Wikidata item for 'Clouds of May'\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  (wd:Q1361018 wd:Q2086445) wdt:P57 ?director .\",\n    \"  (wd:Q1361018 wd:Q2086445) wdt:P58 ?writer .\",\n    \"  (wd:Q1361018 wd:Q2086445) wdt:P1040 ?editor .\",\n    \"  (wd:Q1361018 wd:Q2086445) wdt:P1431 ?producer .\",\n    \"}\",\n    \"UNION {\",\n    \"  (wd:Q1361018 wd:Q2086445) wdt:P106 ?occupation .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:1533 ?director .\",\n    \"?film1 kg:8748 ?cloudsOfMay .\",\n    \"?film2 kg:1533 ?writer .\",\n    \"?film2 kg:8748 ?cloudsOfMay .\",\n    \"?film3 kg:1533 ?editor .\",\n    \"?film3 kg:8748 ?cloudsOfMay .\",\n    \"?film4 kg:1533 ?executiveProducer .\",\n    \"?film4 kg:8748 ?cloudsOfMay .\",\n    \"?film5 kg:1533 ?director2 .\",\n    \"?film5 kg:8748 ?uzak .\",\n    \"?film6 kg:1533 ?writer2 .\",\n    \"?film6 kg:8748 ?uzak .\",\n    \"?film7 kg:1533 ?editor2 .\",\n    \"?film7 kg:8748 ?uzak .\",\n    \"?film8 kg:1533 ?executiveProducer2 .\",\n    \"?film8 kg:8748 ?uzak .\",\n    \"FILTER(?director = ?writer AND ?writer = ?editor AND ?editor = ?executiveProducer AND ?director2 = ?writer2 AND ?writer2 = ?editor2 AND ?editor2 = ?executiveProducer2)\",\n    \"?director kg:5349 ?occupation1 .\",\n    \"?writer kg:5349 ?occupation2 .\",\n    \"?editor kg:5349 ?occupation3 .\",\n    \"?executiveProducer kg:5349 ?occupation4 .\",\n    \"VALUES ?occupation1 { kg:4746 }\",\n    \"VALUES ?occupation2 { kg:3862 }\",\n    \"VALUES ?occupation3 { kg:2045 }\",\n    \"VALUES ?occupation4 { kg:1324 }\",\n    \"?resource ?predicate ?value .\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person ?movie WHERE {\",\n    \"  ?person wdt:P50 wd:Q1246897. # Jim Abrahams, Jerry Zucker, and David Zucker\",\n    \"  ?person wdt:P31* wd:Q11424. # Person\",\n    \"  ?movie wdt:P345 wd:Q244043. # Airplane!\",\n    \"  ?movie wdt:P678 ?person. # Write, Direct, or Executive Produce\",\n    \"}\",\n    \"ORDER BY ?person\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person1 ?person2 ?film WHERE {\",\n    \"  ?film wdt:P3457 ?person1. # Jim Abrahams\",\n    \"  ?film wdt:P3457 ?person2. # David Zucker and Jerry Zucker (as a single entity)\",\n    \"  FILTER(?person2 = wd:Q689069) # David Zucker\",\n    \"  FILTER(?person2 = wd:Q1166429) # Jerry Zucker\",\n    \"  ?film wdt:P3458 ?person1. # Jim Abrahams (writing)\",\n    \"  ?film wdt:P3458 ?person2. # David and Jerry Zucker (writing)\",\n    \"  ?film wdt:P3460 wd:Q79586. # Airplane! film\",\n    \"  FILTER(?person1 != ?person2) # Ensure we are not counting the same person twice\"\n   ,\"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P3459 ?person ;\", \"# P3459 is used for writer, director and executive producer in Wikidata\",\n      \"?film2 wdt:P3459 ?person .\",\n      \"?film3 wdt:P6480 ?person .\",\n      \"?film4 wdt:P6480 ?person .\",\n    \"}\",\n    \"FILTER EXISTS { ?film1 wdt:P3459 ?person . }\",\n    \"FILTER EXISTS { ?film2 wdt:P3459 ?person . }\",\n    \"FILTER EXISTS { ?film3 wdt:P6480 ?person . }\",\n    \"FILTER EXISTS { ?film4 wdt:P6480 ?person . }\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P58 ?writer .\",\n    \"?film wdt:P1431 ?execProducer .\",\n    \"(wd:Q1140578 | wd:Q2085) wdt:P1431 ?execProducer .\",\n    \"FILTER(?director = ?person || ?writer = ?person || ?execProducer = ?person)\",\n    \"?otherFilm wdt:P1431 ?execProducer .\",\n    \"(wd:Q1511905 | wd:Q26876) wdt:P1431 ?execProducer .\",\n    \"FILTER(?director != ?person || ?writer != ?person)\",\n    \"?otherFilm wdt:P57 ?otherDirector .\",\n    \"?otherFilm wdt:P58 ?otherWriter .\",\n    \"FILTER(?otherDirector = ?person || ?otherWriter = ?person)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:isDirector kg:8673 ;\",\n    \"       kg:isScreenwriter kg:8673 ;\",\n    \"       kg:isExecutiveProducer kg:8673 .\",\n    \"?person kg:isExecutiveProducer kg:3424 ;\",\n    \"       kg:isExecutiveProducer kg:8911 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424806.\" , \"># Film work\"\n      ,\"?film wdt:P50/wdt:P279* wd:Q11424806.\" , \"># Director of film\"\n      ,\"?film wdt:P73/wdt:P279* wd:Q11424806.\" , \"># Writer of film\"\n      ,\"VALUES ?director { wd:Q522711 wd:Q11424806 wd:Q11424807 wd:Q366991 wd:Q11424808 }\" , \"># Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman\"\n      ,\"FILTER(?director IN (wd:Q522711, wd:Q11424806, wd:Q11424807, wd:Q366991, wd:Q11424808))\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q982339 ;\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\",\n\t\t\t\"wdt:P57 wd:Q116767 ;\",\n\t\t\t\"wdt:P58 wd:Q1033656 ;\",\n\t\t\t\"wdt:P57 wd:Q1365463 ;\",\n\t\t\t\"wdt:P58 wd:Q11424 .\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:0018 ?person ;\",\n    \"   kg:2253 ?person .\",\n    \"?person (kg:8473|kg:6967|kg:8834|kg:3385|kg:9987) [] .\",\n    \"?film a kg:8677 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?composer .\",\n      \"?movie2 wdt:P345 ?composer .\",\n      \"?movie3 wdt:P345 ?composer .\",\n      \"?movie1 wdt:P161 ?star .\",\n      \"?movie2 wdt:P161 ?star .\",\n      \"?movie3 wdt:P161 ?star .\",\n      \"?movie1 wdt:P28 ?director .\",\n      \"?movie2 wdt:P28 ?director .\",\n      \"?movie3 wdt:P28 ?director .\",\n      \"?movie1 wdt:P304 ?cinematographer .\",\n      \"?movie2 wdt:P304 ?cinematographer .\",\n      \"?movie3 wdt:P304 ?cinematographer .\",\n      \"VALUES ?movie1 { wd:Q65897 }\", \"# Spy Kids 3-D: Game Over\",\n      \"VALUES ?movie2 { wd:Q1144664 }\", \"# Sin City\",\n      \"VALUES ?movie3 { wd:Q1066666 }\" ,\"# Sin City: A Dame to Kill For\",\n      \"?movie4 wdt:P345 ?composer .\",\n      \"?movie4 wdt:P28 ?director .\",\n      \"?movie4 wdt:P304 ?cinematographer .\",\n      \"VALUES ?movie4 { wd:Q167966 }\" ,\"# The Adventures of Sharkboy and Lavagirl in 3-D\"\n    ,\n      \"FILTER NOT EXISTS { ?movie5 wdt:P345 ?composer . FILTER (?movie5 != ?movie1) }\",\n      \"FILTER NOT EXISTS { ?movie5 wdt:P161 ?star . FILTER (?movie5 != ?movie1) }\",\n      \"FILTER NOT EXISTS { ?movie5 wdt:P28 ?director . FILTER (?movie5 != ?movie1) }\",\n      \"FILTER NOT EXISTS { ?movie5 wdt:P304 ?cinematographer . FILTER (?movie5 != ?movie1) }\"\n    ,\n      \"?composer rdfs:label ?composerLabel.\"\n    ,\n      \"?star rdfs:label ?starLabel.\"\n    ,\n      \"?director rdfs:label ?directorLabel.\"\n    ,\n      \"?cinematographer rdfs:label ?cinematographerLabel.\"\n    ,\n      \"FILTER (LANG(?composerLabel) = 'en')\",\n      \"FILTER (LANG(?starLabel) = 'en')\",\n      \"FILTER (LANG(?directorLabel) = 'en')\",\n      \"FILTER (LANG(?cinematographerLabel) = 'en')\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n    ,\n      \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?movie1 wdt:P86 ?composer .\",\n\t\t\"?movie2 wdt:P57 ?composer .\",\n\t\t\"?movie3 wdt:P57 ?composer .\",\n\t\t\"?movie4 wdt:P57 ?composer .\",\n\t\t\"VALUES ?movie1 { wd:Q550196 } # Spy Kids 3-D: Game Over\",\n\t\t\"VALUES ?movie2 { wd:Q192115 } # Sin City\",\n\t\t\"VALUES ?movie3 { wd:Q1653396 } # Sin City: A Dame to Kill For\",\n\t\t\"VALUES ?movie4 { wd:Q656357 } # The Adventures of Sharkboy and Lavagirl in 3-D\",\n\t\t\"?composer wdt:P161* ?star .\",\n\t\t\"?composer wdt:P344 ?cinematographer .\",\n\t\t\"FILTER NOT EXISTS { ?composer wdt:P161* [] }\", \"# Ensure the composer is not a star (cast member)\",\n\t\t\"FILTER NOT EXISTS { ?composer wdt:P344 [] }\" ,\"\\n# Ensure the composer is not a cinematographer\",\n\t\t\"?resource ?p ?o .\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:5687 ?song .\",\n    \"?movie1 kg:9737 ?director .\",\n    \"?movie2 kg:9737 ?director .\",\n    \"?movie3 kg:9737 ?director .\",\n    \"?movie4 kg:9737 ?director .\",\n    \"?movie5 kg:7674 ?director .\",\n    \"?movie1 kg:0943 \\\"Sin City\\\" .\",\n    \"?movie2 kg:0943 \\\"Sin City: A Dame to Kill For\\\" .\",\n    \"?movie3 kg:7667 \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\" .\",\n    \"?movie4 kg:6804 \\\"Spy Kids 3-D: Game Over\\\" .\",\n    \"OPTIONAL { ?composer kg:4329 ?star }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer ?editor ?star WHERE {\",\n    \"  ?work1 wdt:P31/wdt:P279* wd:Q11424; # Work is a film or related to films\",\n    \"         wdt:P50 ?composer. # Composer of the work\",\n    \"  ?work2 wdt:P31/wdt:P279* wd:Q11424; # Another work is a film or related to films\",\n    \"         wdt:P50 ?composer. # Same composer for this work as well\",\n    \"  ?work3 wdt:P31/wdt:P279* wd:Q11424; # Another work is a film or related to films\",\n    \"         wdt:P50 ?composer. # Same composer for this work as well\",\n    \"  ?work4 wdt:P31/wdt:P279* wd:Q11424; # Another work is a film or related to films\",\n    \"         wdt:P50 ?composer. # Same composer for this work as well\",\n    \"  FILTER(?work1 != ?work2 && ?work1 != ?work3 && ?work1 != ?work4 && ?work2 != ?work3 && ?work2 != ?work4 && ?work3 != ?work4)\",\n    \"  OPTIONAL { ?work5 wdt:P700 ?editor. } # Editor of the work\",\n    \"  OPTIONAL { ?work6 wdt:P161 ?star. }   # Star of the work\",\n    \"  VALUES ?work1 { wd:Q289342 wd:Q289350 } # A Woman of Paris, Pay Day\",\n    \"  VALUES ?work2 { wd:Q748526 wd:Q748528 } # Modern Times, City Lights\",\n    \"  VALUES ?work3 { wd:Q1142429 }          # The Essanay-Chaplin Revue of 1916 (Note: This is a hypothetical value as the specific film ID might not be available)\",\n    \"}\",\n    \"ORDER BY ?composer\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P86 ?composer .\",\n    \"?composer wdt:P1040 ?editor .\",\n    \"?composer wdt:P161 ?star .\",\n    \"VALUES ?film { wd:Q238211 wd:Q45602 }\",\n    \"VALUES ?composer { wd:Q3986814 }\",\n    \"VALUES ?editor { wd:Q199039 }\",\n    \"VALUES ?star { wd:Q3986814 }\",\n    \"?film wdt:P161 ?star .\"\n    ,\n    \"?film wdt:P86 ?composer .\",\n    \"?composer wdt:P1040 ?editor .\",\n    \"?composer wdt:P161 ?star .\",\n    \"VALUES ?film { wd:Q238211 wd:Q45602 }\",\n    \"VALUES ?composer { wd:Q3986814 }\",\n    \"VALUES ?editor { wd:Q199039 }\",\n    \"VALUES ?star { wd:Q3986814 }\"\n  ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t  \t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:3584 ?work1 ;\",\n    \"   kg:7599 ?work2 ;\",\n    \"   kg:1558 ?filmEditor .\",\n    \"?work1 kg:8907 \\\"Pay Day\\\" ;\",\n    \"   kg:9350 \\\"A Woman of Paris\\\" .\",\n    \"?work2 kg:6990 \\\"City Lights\\\" ;\",\n    \"   kg:2929 \\\"Modern Times\\\" ;\",\n    \"   kg:kg:3709 \\\"The Essanay-Chaplin Revue of 1916\\\" .\",\n    \"?filmEditor kg:1558 ?film .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie wdt:P3459 ?director .\",\n    \"  ?movie wdt:P50 ?writer .\",\n    \"  ?movie wdt:P2861 ?producer .\",\n    \"  FILTER (STR(?director) = 'Jim Abrahams, Jerry Zucker, David Zucker' && STR(?writer) = 'Jim Abrahams, Jerry Zucker, David Zucker' && STR(?producer) = 'Jim Abrahams, Jerry Zucker, David Zucker')\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"  ?project wdt:P31/wdt:P279* wd:Q146850.\" , \"># Project is a type of creative work\",\n    \"  ?project wdt:P50 [wdt:P26 wd:Q1126292; # Yūdai Yamaguchi was the director, writer or editor\",\n    \"                        wdt:P50 [wdt:P26 wd:Q3047898]; # Ernesto Díaz Espinoza was the director, writer or editor\",\n    \"                        wdt:P50 [wdt:P26 wd:Q1142263]; # Adrián García Bogliano was the director, writer or editor\",\n    \"                        wdt:P50 [wdt:P26 wd:Q198743].  # Yoshihiro Nishimura was the director, writer or editor\",\n    \"  ] .\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?project WHERE {\",\n\t\t\"?project wdt:P57 wd:Q4023328 ;\", \"# Yūdai Yamaguchi as director\",\n\t\t\"wdt:P58 wd:Q5836844 ;\", \"# Ernesto Díaz Espinoza as screenwriter\",\n\t\t\"wdt:P1040 wd:Q4022902 .\", \"# Yoshihiro Nishimura as editor\",\n\t\t\"?project wdt:P57 wd:Q5658534 ;\", \"# Adrián García Bogliano as director (additional check)\",\n\t\t\"wdt:P58 wd:Q4023328 ;\", \"# Yūdai Yamaguchi as screenwriter (additional check)\",\n\t\t\"wdt:P1040 wd:Q5836844 . # Ernesto Díaz Espinoza as editor (additional check)\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?project WHERE {\",\n    \"  (?project, kg:5097, kg:4231) .\",\n    \"  (?project, kg:9452, kg:4231) .\",\n    \"  (?project, kg:7928, kg:4231) .\",\n    \"  UNION \",\n    \"  (?project, kg:5097, kg:6145) .\",\n    \"  (?project, kg:9452, kg:6145) .\",\n    \"  (?project, kg:7928, kg:6145) .\",\n    \"  UNION \",\n    \"  (?project, kg:5097, kg:2932) .\",\n    \"  (?project, kg:9452, kg:2932) .\",\n    \"  (?project, kg:7928, kg:2932) .\",\n    \"  UNION \",\n    \"  (?project, kg:5097, kg:4009) .\",\n    \"  (?project, kg:9452, kg:4009) .\",\n    \"  (?project, kg:7928, kg:4009) .\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?editor\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424;\",\n      \"?movie wdt:P577 ?releaseDate.\",\n      \"?editRole wdt:P31 wd:Q240986;\",\n      \"?editRole wdt:P108 ?editor.\",\n      \"?movie wdt:P81 ?editRole.\",\n      \"(wdt:P3459|wdt:P107) ?movie ?writer.\",\n      \"VALUES ?movie { wd:Q1234567 wd:Q2345678 wd:Q3456789 }\", \"-- Replace with actual movie QIDs\",\n      \"?movie wdt:P1370 ?producer.\"\n    ,\n    \"FILTER(?editor != ?writer && ?editor != ?producer)\",\n    \"}\",\n    \"ORDER BY ?movie\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?editor ?writer ?producer\",\n    \"WHERE {\",\n      \"?movie wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer ;\",\n           \"wdt:P1431 ?producer .\",\n      \"VALUES ?movie { wd:Q7042855 wd:Q483197 }\",\n      \"VALUES ?editor { wd:Q13471372 }\",\n      \"VALUES ?writer {}\",\n      \"VALUES ?producer {}\"\n    ,\n    \"FILTER (BOUND(?editor) && BOUND(?writer) && BOUND(?producer))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie1 kg:isMoebius true .\",\n    \"?movie2 kg:isDream true .\",\n    \"?movie3 kg:isPietà true .\",\n    \"{ ?person kg:6357 ?movie1 } UNION { ?person kg:6055 ?movie1 } .\",\n    \"{ ?person kg:6357 ?movie2 } UNION { ?person kg:6055 ?movie2 } .\",\n    \"{ ?person kg:6357 ?movie3 } UNION { ?person kg:6055 ?movie3 } .\",\n    \"?person kg:3570 ?movie1 .\",\n    \"?person kg:3570 ?movie2 .\",\n    \"?person kg:3570 ?movie3 .\",\n    \"?person kg:9419 ?movie1 .\",\n    \"?person kg:9419 ?movie2 .\",\n    \"?person kg:9419 ?movie3 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie1 ?movie2 ?movie3 ?producer\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?producer ;\", \"# P345 is used for executive producer\",\n      \"?movie2 wdt:P345 ?producer ;\",\n      \"?movie3 wdt:P345 ?producer .\",\n      \"?movie1 wdt:P939 \\\"Fate\\\"@en ;\", \"# P939 is used for title\",\n      \"?movie2 wdt:P939 \\\"The Confession\\\"@en ;\",\n      \"?movie3 wdt:P939 \\\"The Waiting Room\\\"@en .\",\n      \"FILTER(?movie1 != ?movie2 && ?movie2 != ?movie3 && ?movie1 != ?movie3)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P106 wd:Q5437360 ;\",\n           \"wdt:P1431 ?executiveProducer ;\",\n           \"wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer .\",\n      \"?film2 wdt:P106 wd:Q3282637 ;\",\n           \"wdt:P1431 ?executiveProducer ;\",\n           \"wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer .\",\n      \"?film3 wdt:P106 wd:Q12813010 ;\",\n           \"wdt:P1431 ?executiveProducer ;\",\n           \"wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer .\",\n      \"?person wdt:P1040 ?editor ;\",\n           \"wdt:P58 ?writer ;\",\n           \"wdt:P1431 ?executiveProducer .\",\n      \"VALUES ?film1 { wd:Q6084069 }\",\n      \"VALUES ?film2 { wd:Q6084069 }\",\n      \"VALUES ?film3 { wd:Q6084069 }\"\n    ,\n    \"}\"\n  ]\n}\n             \t \t\t\t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?producer a kg:0440 ;\",\n    \"   kg:8750 ?editor ;\",\n    \"   kg:0075 ?writer ;\",\n    \"   kg:8750 ?screenwriter ;\",\n    \"   kg:8750/kg:1754* kg:0001, kg:9766, kg:1742 .\",\n    \"?editor a kg:6372 ;\",\n    \"?screenwriter a kg:0075 ;\",\n    \"?producer kg:8750 ?screenwriter ;\",\n    \"   kg:8750/kg:1754* kg:0001, kg:9766, kg:1742 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?writerEditor ;\",\n           \"wdt:P6290 ?person1 .\",\n      \"?film2 wdt:P345 ?writerEditor ;\",\n           \"wdt:P6290 ?person1 .\",\n      \"?film3 wdt:P345 ?writerEditor ;\",\n           \"wdt:P6290 ?person1 .\",\n      \"?person1 wdt:P276* ?jacquesDemy .\",\n      \"?film1 rdfs:label \\\"Vagabond\\\"@en ;\",\n           \"wdt:P6290 ?writerEditor .\",\n      \"?film2 rdfs:label \\\"Varda by Agnès\\\"@en ;\",\n           \"wdt:P6290 ?writerEditor .\",\n      \"?film3 rdfs:label \\\"The Gleaners and I\\\"@en ;\",\n           \"wdt:P6290 ?writerEditor .\",\n      \"?resource wdt:P345 ?writerEditor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P26 wd:Q312258 .\",\n\t\t\"?film wdt:P737 wd:Q312258 .\",\n\t\t\"wd:Q63993096 wdt:P26 wd:Q312258 .\",\n\t\t\"wd:Q2493884 wdt:P26 wd:Q312258 .\",\n\t\t\"?film wdt:P31 wd:Q2298257 .\",\n\t\t\"?writer wdt:P26 wd:Q312258 .\",\n\t\t\"wd:Q312258 wdt:P26 ?writer .\",\n\t\t\"?editor wdt:P26 wd:Q312258 .\",\n\t\t\"wd:Q312258 wdt:P26 ?editor .\",\n\t\t\"?resource wdt:P26 wd:Q312258 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:is ?work1 ;\",\n    \"   kg:is ?person .\",\n    \"?film2 kg:is ?work2 ;\",\n    \"   kg:is ?person .\",\n    \"?film3 kg:is ?work3 ;\",\n    \"   kg:is ?person .\",\n    \"?person kg:0378 ?writer ;\",\n    \"   kg:3972 ?editor ;\",\n    \"   kg:8833 ?spouse ;\",\n    \"   kg:8577 ?film2 ;\",\n    \"   kg:8782 ?influencer .\",\n    \"?work1 kg:is \\\"Vagabond\\\" ;\",\n    \"?work2 kg:is \\\"The Gleaners and I\\\" ;\",\n    \"?work3 kg:is \\\"Varda by Agnès\\\" .\",\n    \"?spouse kg:is \\\"Jacques Demy\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?director\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?director .\", \"# P3459 is used for 'Directed by'\",\n      \"?film wdt:P6780 ?director .\", \"# P6780 is a custom property for this specific query, as Wikidata does not have an exact property for 'served as the writer, star, director, and composer'\",\n      \"VALUES ?film { wd:Q1234567 wd:Q1234568 }\", \"# Replace with actual QIDs for 'The Floorwalker', 'Shoulder Arms', and 'The Great Dictator'\"\n    ,\n      \"?film wdt:P6780 ?director .\"\n    ,\n      \"FILTER(?film = wd:Q1234567 || ?film = wd:Q1234568)\" ,\"\\n\" ,\"\\n\" ,\"}\" ,\"\\n\" ,\"LIMIT 10\"\n  ]\n}\n  \t        \t\t\t\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57 wd:Q166739 ;\",\n\t\t\"(wdt:P86|wdt:P58|wdt:P161) wd:Q1140317 ;\",\n\t\t\"(wdt:P86|wdt:P58|wdt:P161) wd:Q109116 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:is director kg:0540 .\",\n    \"{ ?resource kg:is screenwriter kg:6175 . } UNION { ?resource kg:is cast member kg:6175 . }\",\n    \"{ ?resource kg:is director kg:3835 . } UNION { ?resource kg:is screenwriter kg:3835 . } UNION { ?resource kg:is cast member kg:3835 . } UNION { ?resource kg:is composer kg:3835 . }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?otherResource kg:is director kg:0540 . FILTER (?otherResource != ?resource) }\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie1 ?movie2\",\n    \"WHERE {\",\n      \"?movie1 wdt:P3459 ?person .\", \"# person is the cinematographer of movie1\",\n      \"?movie2 wdt:P3459 ?person .\", \"# person is the cinematographer of movie2\",\n      \"?movie1 wdt:P31 wd:Q114246080 .\", \"# movie1 is a film (Planet Terror)\",\n      \"?movie2 wdt:P31 wd:Q114246080 .\", \"# movie2 is a film (Sin City)\",\n      \"?person wdt:P161 ?movie1 .\", \"# person is the star of movie1\",\n      \"?person wdt:P50 ?movie1 .\", \"# person is the writer of movie1\",\n      \"?person wdt:P74 ?movie1 .\", \"# person is the editor of movie1\",\n      \"?person wdt:P3459 ?movie1 .\", \"# person is the cinematographer of movie1\",\n      \"?person wdt:P2865 ?movie1 .\", \"# person is the director of movie1\",\n      \"?person wdt:P161 ?movie2 .\", \"# person is the star of movie2\",\n      \"?person wdt:P50 ?movie2 .\", \"# person is the writer of movie2\",\n      \"?person wdt:P74 ?movie2 .\", \"# person is the editor of movie2\",\n      \"?person wdt:P3459 ?movie2 .\", \"# person is the cinematographer of movie2\",\n      \"?person wdt:P2865 ?movie2 .\", \"# person is the director of movie2\"\n    ,\n    \"FILTER(?movie1 != ?movie2)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film1 wdt:P57 ?director .\",\n\t\t\"?film1 wdt:P58 ?writer .\",\n\t\t\"?film1 wdt:P1040 ?editor .\",\n\t\t\"?film1 wdt:P344 ?cinematographer .\",\n\t\t\"?film2 wdt:P57 ?director .\",\n\t\t\"?film2 wdt:P58 ?writer .\",\n\t\t\"?film2 wdt:P1040 ?editor .\",\n\t\t\"?film2 wdt:P344 ?cinematographer .\",\n\t\t\"wd:Q1165050 wdt:P31/wdt:P279* wd:Q1165050 ;\",\n\t\t\"wdt:P31/wdt:P279* wd:Q192115 .\",\n\t\t\"?resource ?property ?value .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:8571 kg:6254 ?director .\",\n    \"   kg:8571 kg:4600 ?writer .\",\n    \"   kg:8571 kg:9668 ?editor .\",\n    \"   kg:8571 kg:4610 ?cinematographer .\",\n    \"   kg:8571 kg:7569 ?star .\",\n    \"  )\",\n    \"  UNION \",\n    \"  (kg:7570 kg:6254 ?director .\",\n    \"   kg:7570 kg:4600 ?writer .\",\n    \"   kg:7570 kg:9668 ?editor .\",\n    \"   kg:7570 kg:4610 ?cinematographer .\",\n    \"   kg:7570 kg:7569 ?star .\",\n    \"  )\",\n    \"} \"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248700 ;\", \"># Assuming Q114248700 is the item identifier for \" ]\n    }\n  \t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?cinematographerLabel ?editorLabel ?starredInLabel\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\t\"?film wdt:P161 ?person .\",\n\t\t\t\"?film wdt:P31 wd:Q11422280 .\" , \"# Film is a movie\",\n\t\t\t\"VALUES ?film { wd:Q3641257 wd:Q114819 wd:Q2085 wd:Q56756907 wd:Q3485595 }\", \"# Specific films mentioned in the question\",\n\t\t\t\"?person wdt:P31 wd:Q5 .\" , \"# Person is a human\",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:directorOfPhotography ?cinematographer .\",\n    \"?film kg:editor ?editor .\",\n    \"?film kg:castMember ?actor .\",\n    \"?actor kg:starredIn ?otherFilm1 .\",\n    \"?actor kg:starredIn ?otherFilm2 .\",\n    \"?actor kg:starredIn ?otherFilm3 .\",\n    \"?actor kg:starredIn ?otherFilm4 .\",\n    \"?actor kg:starredIn ?otherFilm5 .\",\n    \"?actor kg:starredIn ?otherFilm6 .\",\n    \"VALUES ?film { kg:5484 }\", \"# Six Men Getting Sick\",\n    \"VALUES ?otherFilm1 { kg:9422 }\", \"# The Black Ghiandola\",\n    \"VALUES ?otherFilm2 { kg:6104 }\", \"# Twin Peaks\",\n    \"VALUES ?otherFilm3 { kg:7911 }\", \"# Lumière and Company\",\n    \"VALUES ?otherFilm4 { kg:2112 }\", \"# Dune\",\n    \"VALUES ?otherFilm5 { kg:9491 }\", \"# Inland Empire\",\n    \"VALUES ?otherFilm6 { kg:4868 }\", \"# Boat\",\n    \"?cinematographer kg:name ?cinematographerName .\",\n    \"?editor kg:name ?editorName .\",\n    \"?actor kg:name ?actorName .\",\n    \"}\",\n    \"ORDER BY ?actorName\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?person ;\", \"# 'Vagabond' and 'The Gleaners and I'\",\n      \"?film2 wdt:P345 ?person ;\",\n      \"?person wdt:P279* wd:Q168069 ;\", \"# Influenced by Jacques Demy\",\n      \"?person wdt:P104 wd:Q168069.\" ,\"\\n# Married to Jacques Demy\",\n    \"}\",\n    \"FILTER(?film1 != ?film2)\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P57 wd:Q2298257 .\", \"# Director of Vagabond\",\n      \"?person wdt:P58 wd:Q2493884 .\", \"# Screenwriter of The Gleaners and I\",\n      \"?person wdt:P1040 wd:Q2493884 .\", \"# Editor of The Gleaners and I\",\n      \"?person wdt:P26 wd:Q312258 .\", \"# Married to Jacques Demy\",\n      \"?person wdt:P737 wd:Q312258\" ,\"\\t# Influenced by Jacques Demy\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isDirector kg:0393 ;\",\n    \"   kg:isScreenwriter kg:0393 ;\",\n    \"   kg:isFilmEditor kg:0393 ;\",\n    \"   kg:isSpouseOf kg:6337 ;\",\n    \"   kg:isInfluencedBy kg:5873 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wd:T106825 ?editor .\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"?film2 wd:T106825 ?execProducer .\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"?film3 wd:T106825 ?cinematographer .\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"?film1 wd:T106826 ?starIn .\",\n      \"?film2 wd:T106865 ?write .\",\n      \"?film3 wd:T106865 ?write .\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424 .\", \"@en\",\n      \"VALUES ?film1 { wd:Q123456 }\", \"@en\",\n      \"VALUES ?film2 { wd:Q67890 }\", \"@en\",\n      \"VALUES ?film3 { wd:Q78901 }\", \"@en\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t \t\t        \t\t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P161 ?actor ;\",\n\t\t\"?film1 wdt:P344 ?cinematographer ;\",\n\t\t\"?film1 wdt:P1040 ?editor ;\",\n\t\t\"?film1 wdt:P58 ?writer ;\",\n\t\t\"?film1 wdt:P1431 ?producer .\",\n\t\t\"wd:Q12813010 wdt:P161 ?actor ;\",\n\t\t\"wd:Q12813010 wdt:P344 ?cinematographer ;\",\n\t\t\"wd:Q12813010 wdt:P1040 ?editor ;\",\n\t\t\"wd:Q12813010 wdt:P58 ?writer ;\",\n\t\t\"wd:Q12813010 wdt:P1431 ?producer .\",\n\t\t\"?film2 wdt:P161 ?actor ;\",\n\t\t\"?film2 wdt:P344 ?cinematographer ;\",\n\t\t\"?film2 wdt:P1040 ?editor ;\",\n\t\t\"?film2 wdt:P58 ?writer ;\",\n\t\t\"?film2 wdt:P1431 ?producer .\",\n\t\t\"wd:Q6099428 wdgt:P161 ?actor ;\",\n\t\t\"wd:Q6099428 wdgt:P344 ?cinematographer ;\",\n\t\t\"wd:Q6099428 wdt:P1040 ?editor ;\",\n\t\t\"wd:Q6099428 wdt:P58 ?writer ;\",\n\t\t\"wd:Q6099428 wdt:P1431 ?producer .\",\n\t\t\"?film3 wdt:P161 ?actor ;\",\n\t\t\"?film3 wdt:P344 ?cinematographer ;\",\n\t\t\"?film3 wdt:P1040 ?editor ;\",\n\t\t\"?film3 wdt:P58 ?writer ;\",\n\t\t\"?film3 wdt:P1431 ?producer .\",\n\t\t\"wd:Q6084069 wdgt:P161 ?actor ;\",\n\t\t\"wd:Q6084069 wdgt:P344 ?cinematographer ;\",\n\t\t\"wd:Q6084069 wdt:P1040 ?editor ;\",\n\t\t\"wd:Q6084069 wdt:P58 ?writer ;\",\n\t\t\"wd:Q6084069 wdt:P1431 ?producer .\",\n\t\t\"?film4 wdt:P161 ?actor ;\",\n\t\t\"?film4 wdt:P344 ?cinematographer ;\",\n\t\t\"?film4 wdt:P1040 ?editor ;\",\n\t\t\"?film4 wdt:P58 ?writer ;\",\n\t\t\"?film4 wdt:P1431 ?producer .\",\n\t\t\"wd:Q5265241 wdgt:P161 ?actor ;\",\n\t\t\"wd:Q5265241 wdgt:P344 ?cinematographer ;\",\n\t\t\"wd:Q5265241 wdt:P1040 ?editor ;\",\n\t\t\"wd:Q5265241 wdt:P58 ?writer ;\",\n\t\t\"wd:Q5265241 wdt:P1431 ?producer .\",\n\t\t\"?person wdt:P161 wd:Q12813010 ;\",\n\t\t\"?person wdt:P344 wd:Q12813010 ;\",\n\t\t\"?person wdt:P1040 wd:Q12813010 ;\",\n\t\t\"?person wdt:P58 wd:Q12813010 ;\",\n\t\t\"?person wdt:P1431 wd:Q12813010 .\",\n\t\t\"?person wdt:P161 wd:Q6099428 ;\",\n\t\t\"?person wdt:P344 wd:Q6099428 ;\",\n\t\t\"?person wdt:P1040 wd:Q6099428 ;\",\n\t\t\"?person wdt:P58 wd:Q6099428 ;\",\n\t\t\"?person wdt:P1431 wd:Q6099428 .\",\n\t\t\"?person wdt:P161 wd:Q6084069 ;\",\n\t\t\"?person wdt:P344 wd:Q6084069 ;\",\n\t\t\"?person wdt:P1040 wd:Q6084069 ;\",\n\t\t\"?person wdt:P58 wd:Q6084069 ;\",\n\t\t\"?person wdt:P1431 wd:Q6084069 .\",\n\t\t\"?person wdt:P161 wd:Q5265241 ;\",\n\t\t\"?person wdt:P344 wd:Q5265241 ;\",\n\t\t\"?person wdt:P1040 wd:Q5265241 ;\",\n\t\t\"?person wdt:P58 wd:Q5265241 ;\",\n\t\t\"?person wdt:P1431 wd:Q5265241 .\",\n\t\t\"FILTER(?actor != ?editor)\",\n\t\t\"FILTER(?actor != ?producer)\",\n\t\t\"FILTER(?actor != ?writer)\",\n\t\t\"FILTER(?cinematographer != ?editor)\",\n\t\t\"FILTER(?cinematographer != ?producer)\",\n\t\t\"FILTER(?cinematographer != ?writer)\",\n\t\t\"FILTER(?editor != ?producer)\",\n\t\t\"FILTER(?editor != ?writer)\",\n\t\t\"FILTER(?producer != ?writer)\",\n\t\t\"?person wdt:P648 wd:Q12813010 ;\",\n\t\t\"?person wdt:P648 wd:Q6099428 ;\",\n\t\t\"?person wdt:P648 wd:Q6084069 ;\",\n\t\t\"?person wdt:P648 wd:Q5265241 .\",\n\t\t\"VALUES ?film1 { wd:Q12813010 }\",\n\t\t\"VALUES ?film2 { wd:Q6099428 }\",\n\t\t\"VALUES ?film3 { wd:Q6084069 }\",\n\t\t\"VALUES ?film4 { wd:Q5265241 }\",\n\t\t\"?person a ?resource.\"\n\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:role kg:4163 ;\",\n    \"   kg:work kg:9523 .\",\n    \"?execProducer kg:role kg:6971 ;\",\n    \"   kg:work kg:9523 .\",\n    \"?cinematographer kg:role kg:8006 ;\",\n    \"   kg:work kg:9523 .\",\n    \"?editor kg:role kg:2874 ;\",\n    \"   kg:work kg:9946, kg:0948, kg:3463 .\",\n    \"?execProducer kg:role kg:2874 ;\",\n    \"   kg:work kg:9946, kg:0948, kg:3463 .\",\n    \"?cinematographer kg:role kg:2874 ;\",\n    \"   kg:work kg:9946, kg:0948, kg:3463 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person WHERE {\",\n    \"  VALUES ?title { wd:Q1052867 wd:Q439152 wd:Q1052869 wd:Q1052865 }\", \"@en\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424.\",\n    \"  ?film wdt:P577 ?date.\",\n    \"  ?film wdt:P50 ?person.\",\n    \"  ?film wdt:P70 ?writer.\",\n    \"  ?film wdt:P68 ?director.\",\n    \"  FILTER(?person = ?writer && ?person = ?director).\",\n    \"}\",\n    \"ORDER BY ASC(?date)\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film ?person WHERE {\",\n \t\t\"?film wdt:P1040 ?editor .\",\n \t\t\"?film wdt:P57 ?director .\",\n \t\t\"?film wdt:P58 ?writer .\",\n \t\t\"?person wdt:P106 wd:Q7042855 .\",\n \t\t\"VALUES ?film { wd:Q2445896 wd:Q199039 wd:Q45602 }\",\n \t\t\"FILTER(?editor = ?person && ?writer = ?person && ?director = ?person)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:3822 ?editor .\",\n    \"?film1 kg:8046 ?director .\",\n    \"?film1 kg:9435 ?writer .\",\n    \"VALUES ?film1 { kg:7167 kg:8783 }\",\n    \"OPTIONAL { ?film2 kg:3822 ?editor . }\",\n    \"OPTIONAL { ?film2 kg:8046 ?director . }\",\n    \"OPTIONAL { ?film2 kg:9435 ?writer . }\",\n    \"VALUES ?film2 { kg:7167 kg:8783 }\",\n    \"FILTER NOT EXISTS { ?film2 kg:3822 ?editor . FILTER (?film1 != ?film2) }\",\n    \"FILTER NOT EXISTS { ?film2 kg:8046 ?director . FILTER (?film1 != ?film2) }\",\n    \"FILTER NOT EXISTS { ?film2 kg:9435 ?writer . FILTER (?film1 != ?film2) }\",\n    \"?editor kg:8846 \\\"film editor\\\" .\",\n    \"?director kg:8846 \\\"director\\\" .\",\n    \"?writer kg:8846 \\\"screenwriter\\\" .\",\n    \"}\",\n    \"\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3564 ?writer .\",\n      \"?resource wdt:P8190 ?executiveProducer .\",\n      \"?resource wdt:P2790 ?editor .\",\n      \"FILTER (REGEX(str(?resource), \\\"The Waiting Room|Fate|The Confession\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ?movie { wd:Q6084069 wd:Q5437360 wd:Q12813010 }\",\n    \"OPTIONAL { ?resource wdt:P58 ?screenwriter . }\",\n    \"OPTIONAL { ?resource wdt:P1431 ?execProducer . }\",\n    \"OPTIONAL { ?resource wdt:P1040 ?editor . }\",\n    \"FILTER EXISTS { ?resource wdt:P58 ?screenwriter . }\",\n    \"FILTER EXISTS { ?resource wdt:P1431 ?execProducer . }\",\n    \"FILTER EXISTS { ?resource wdt:P1040 ?editor . }\",\n    \"}\",\n    \"VALUES ?movie { wd:Q6084069 wd:Q5437360 wd:Q12813010 }\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?waitingRoom, kg:3108, ?writer) .\",\n    \"  (?waitingRoom, kg:3108, ?execProducer) .\",\n    \"  (?waitingRoom, kg:3108, ?editor) .\",\n    \"\",\n    \"  (?fate, kg:7304, ?writer) .\",\n    \"  (?fate, kg:7304, ?execProducer) .\",\n    \"  (?fate, kg:7304, ?editor) .\",\n    \"\",\n    \"  (?confession, kg:7556, ?writer) .\",\n    \"  (?confession, kg:7556, ?execProducer) .\",\n    \"  (?confession, kg:7556, ?editor) .\",\n    \"\",\n    \"?writer a kg:2878 .\",\n    \"?execProducer a kg:0108 .\",\n    \"?editor a kg:0403 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P50/wdt:P279* wd:Q1686791, wd:Q1066219, wd:Q1066220, wd:Q1066221, wd:Q1066222;\",\n      \"wdt:P57/wdt:P279* wd:Q11424.\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q982339 ;\", \"# Jörn Donner as director and producer\",\n\t\t\"?film wdt:P31 wd:Q116760 .\", \"# Vilgot Sjöman as director and producer\",\n\t\t\"?film wdt:P31 wd:Q11424 .\", \"# film instance of\",\n\t\t\"?film wdt:P57 wd:Q1033656 ;\", \"# Hans Alfredson as director\",\n\t\t\"?film wdt:P58 wd:Q1033656 .\", \"# Hans Alfredson as screenwriter\",\n\t\t\"?film wdt:P57 wd:Q7546 ;\", \"# Ingmar Bergman as director\",\n\t\t\"?film wdt:P58 wd:Q7546.\" ,\"\\n# Ingmar Bergman as screenwriter\",\n\t\t\"?film wdt:P31 wd:Q1365463 .  # Gustaf Molander as director and producer\"\n\t\t\t,\n\t\t\"FILTER EXISTS { ?film wdt:P31 wd:Q982339 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P31 wd:Q116760 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P57 wd:Q1033656 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P58 wd:Q1033656 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P57 wd:Q7546 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P58 wd:Q7546 }\",\n\t\t\"FILTER EXISTS { ?film wdt:P31 wd:Q1365463 }\"\n\t\t,\n\t\t\"?film rdfs:label ?title.\"\n\t\t,\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:isInstanceOf kg:3111 ;\",\n    \"   kg:isDirector ?director ;\",\n    \"   kg:isScreenwriter ?screenwriter .\",\n    \"?director kg:6386 ;\",\n    \"   kg:1292 ?film .\",\n    \"?screenwriter kg:5297 ;\",\n    \"   kg:1039 ?film .\",\n    \"?screenwriter kg:5117 ;\",\n    \"   kg:1039 ?film .\",\n    \"?screenwriter kg:4781 ;\",\n    \"   kg:1039 ?film .\",\n    \"?screenwriter kg:1650 ;\",\n    \"   kg:1039 ?film .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie1 ?movie2 ?person ?role1 ?role2 ?role3 ?role4\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?person ;\", \"# Executive Producer of The Waiting Room\",\n      \"?movie2 wdt:P345 ?person ;\", \"# Executive Producer of Destiny The Confession\",\n      \"?movie1 wdt:P161 ?role1 ;\", \"# Actor for The Waiting Room\",\n      \"?movie2 wdt:P161 ?role2 ;\", \"# Actor for Destiny The Confession\",\n      \"?movie1 wdt:P70 ?role3 ;\", \"# Editor for The Waiting Room\",\n      \"?movie2 wdt:P70 ?role4 ,\", \"# Editor for Destiny The Confession\",\n      \"?movie1 wdt:P69 ?role5 ;\", \"# Writer for The Waiting Room\",\n      \"?movie2 wdt:P69 ?role6 .\", \"# Writer for Destiny The Confession\"\n    ,\n      \"FILTER(?person = ?person && ?role1 != ?role2 && ?role3 != ?role4 && ?role5 != ?role6)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P1431 ?execProducer ;\",\n\t\t\"(wdt:P1040|wdt:P344) ?editor ;\",\n\t\t\"wdt:P58 ?writer .\",\n\t\t\"?film2 wdt:P1431 ?execProducer ;\",\n\t\t\"(wdt:P1040|wdt:P344) ?editor ;\",\n\t\t\"wdt:P58 ?writer .\",\n\t\t\"VALUES ?film1 { wd:Q6084069 }\",\n\t\t\"VALUES ?film2 { wd:Q12813010 wd:Q12813010 }\",\n\t\t\"?execProducer wdt:P161 ?actor .\",\n\t\t\"FILTER NOT EXISTS { ?person wdt:P1431 ?execProducer }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:5397 ?execProducer1 ;\",\n    \"   kg:8008 ?cinematographer1 .\",\n    \"?film2 kg:5397 ?execProducer2 ;\",\n    \"   kg:8008 ?cinematographer2 .\",\n    \"?execProducer1 kg:4870 ?actor1 ;\",\n    \"   kg:8008 ?editor1 ;\",\n    \"   kg:5844 ?writer1 .\",\n    \"?execProducer2 kg:4870 ?actor2 ;\",\n    \"   kg:8008 ?editor2 ;\",\n    \"   kg:5844 ?writer2 .\",\n    \"?film1 kg:7690 \\\"The Waiting Room\\\" .\",\n    \"?film2 kg:7690 \\\"Destiny The Confession\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director ?spouse\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 ?director .\", \"sparql\",\n      \"?movie wdt:P1622 ?spouse .\", \"sparql\",\n      \"?spouse wdt:P108 ?editor .\", \"sparql\",\n      \"VALUES ?editor { wd:Q715734 }\", \"sparql\",\n      \"FILTER (STR(?movie) IN (\",\n        \"\\\"The City Tramp\\\"@en\", \"sparql\",\n        \"\\\"Katzelmacher\\\"@en\", \"sparql\",\n        \"\\\"Why Does Herr R. Run Amok?\\\"@en\", \"sparql\",\n        \"\\\"Whity\\\"@en\", \"sparql\",\n        \"\\\"In a Year of 13 Moons\\\"@en\" ,\"%s\"\n      ,\"))}\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q7042855 wdt:P1040 ?editor .\", \"# The film editor of 'The City Tramp'\",\n    \"  ?editor wdt:P26 ?spouse .\", \"# The spouse of the film editor\",\n    \"  ?spouse wdt:P58 ?screenwriter .\", \"# The screenwriter (spouse) of the film editor\",\n    \"  FILTER(?screenwriter IN(wd:Q567519, wd:Q327427, wd:Q543382, wd:Q570483))\" ,\"\\n  # Check if the screenwriter is one of the directors\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:7017 ?spouse .\",\n    \"?spouse kg:6405/kg:2960 ?movie1 ;\",\n    \"                     kg:6405/kg:2960 ?movie2 ;\",\n    \"                     kg:6405/kg:2960 ?movie3 ;\",\n    \"                     kg:6405/kg:2960 ?movie4 ;\",\n    \"                     kg:6405/kg:2960 ?movie5 .\",\n    \"?movie1 kg:4703 \\\"The City Tramp\\\" ;\",\n    \"         a kg:8794 .\",\n    \"?movie2 kg:4703 \\\"Katzelmacher\\\" ;\",\n    \"         a kg:8794 .\",\n    \"?movie3 kg:4703 \\\"Why Does Herr R. Run Amok?\\\" ;\",\n    \"         a kg:8794 .\",\n    \"?movie4 kg:4703 \\\"Whity\\\" ;\",\n    \"         a kg:8794 .\",\n    \"?movie5 kg:4703 \\\"In a Year of 13 Moons\\\" ;\",\n    \"         a kg:8794 .\",\n    \"} \"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248097 ;\", \"># Assuming Q114248097 is the item for film or movie in Wikidata\",\n      \"wdt:P577 \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@de ;\",\n      \"wdt:P577 \\\"Olympia\\\"@de ;\",\n      \"wdt:P577 \\\"Triumph of the Will\\\"@de ;\",\n      \"?film wdt:P648 ?person ;\", \"># P648 is for editor, P649 for writer, and P106 for director; assuming they are all the same person\",\n      \"wdt:P31 wd:Q5 ;\" ,\"\\n# Q5 is for human in Wikidata\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P57 ?director .\",\n\t\t\t\"?film wdt:P58 ?writer .\",\n\t\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\t\"?person wdt:P21 wd:Q6581072 .\",\n\t\t\t\"?film wdt:P31 wd:Q497617 .\",\n\t\t\t\"VALUES ?film { wd:Q156497 wd:Q158069 wd:Q497617 }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3486 ?screenwriter .\",\n    \"?resource kg:0469 ?editor .\",\n    \"?resource kg:4957 ?director .\",\n    \"?screenwriter kg:7114 ?female .\",\n    \"?editor kg:7114 ?female .\",\n    \"?director kg:7114 ?female .\",\n    \"?resource kg:8706 \\\"Tag der Freiheit: Unsere Wehrmacht\\\" .\",\n    \"?resource kg:7567 \\\"Olympia\\\" .\",\n    \"?resource kg:3675 \\\"Triumph of the Will\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108 wd:Q24352967.\" , \"# Canadian editor of 'The Crazies'\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424.\" , \"# film\",\n      \"?film wdt:P577 ?date.\" , \"# has date\",\n      \"?person wdt:P50 ?film.\" , \"# person is editor of the film\",\n      \"FILTER(?film = wd:Q186939 OR ?film = wd:Q243666 OR ?film = wd:Q766666 OR ?film = wd:Q186940).\" , \"# 'Day of the Dead', 'Monkey Shines', 'Dawn of the Dead', and 'Survival of the Dead'\",\n      \"?person wdt:P339/wdt:P279* wd:Q11228.\" , \"# person is also a writer or director\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P1040 wd:Q627060 .\", \"# Canadian editor of 'The Crazies'\",\n      \"?film wdt:P31/wdt:P279* wd:Q627060 ;\",\n        \"wdt:\" , \"wd:Q219155 ;\" , \"wd:Q219170 ;\" , \"wd:Q198557 ;\" , \"wd:Q1277329 .\", \"# 'Dawn of the Dead', 'Day of the Dead', 'Monkey Shines', and 'Survival of the Dead'\",\n      \"?person wdt:P58 ?film ;\",\n        \"wdt:P57 ?film .\" ,\"\\n# director and screenwriter of the films\"\n    ,\n      \"?person wdt:P27 wd:Q16 .\", \"# Canadian citizenship\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P31/wdt:P279* wd:Q8054 }\" ,\"\\n# Exclude organizations and non-human entities\"\n    ,\"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4112 ?film .\",\n    \"?film kg:3077 \\\"The Crazies\\\" .\",\n    \"{ ?resource kg:6796 ?film . } UNION { ?resource kg:2946 ?film . }\",\n    \"{ ?resource kg:8393 kg:3439 . }\",\n    \"?film kg:1818 \\\"Dawn of the Dead\\\" ;\",\n    \"                  kg:3778 \\\"Day of the Dead\\\" ;\",\n    \"                  kg:5806 \\\"Monkey Shines\\\" ;\",\n    \"                  kg:0019 \\\"Survival of the Dead\\\" .\",\n    \"?resource kg:3824 kg:3439 .\", \"># Assuming kg:3824 is a property for 'country' and kg:3439 is Canada\"\n   ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie1 ?movie2 ?director ?execProducer\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?director ;\", \"# '1911' movie director\",\n      \"?movie1 wdt:P734 ?execProducer .\", \"# '1911' movie executive producer\",\n      \"?movie2 wdt:P345 ?director ;\", \"# Same director for 'Police Story 2'\",\n      \"?movie2 wdt:P734 ?execProducer .\", \"# Same executive producer for 'Police Story 2'\",\n      \"FILTER(?movie1 != ?movie2) .\",\n      \"?movie3 wdt:P345 ?director ;\", \"# Same director for 'Chinese Zodiac'\",\n      \"?movie3 wdt:P734 ?execProducer .\", \"# Same executive producer for 'Chinese Zodiac'\",\n      \"FILTER(?movie1 != ?movie3, ?movie2 != ?movie3) .\",\n      \"?movie4 wdt:P345 ?director ;\", \"# Same director for 'Police Story'\",\n      \"?movie4 wdt:P734 ?execProducer .\", \"# Same executive producer for 'Police Story'\",\n      \"FILTER(?movie1 != ?movie4, ?movie2 != ?movie4, ?movie3 != ?movie4) .\",\n      \"?movie5 wdt:P345 ?director ;\", \"# Same director for 'The Fearless Hyena'\",\n      \"?movie5 wdt:P734 ?execProducer .\", \"# Same executive producer for 'The Fearless Hyena'\",\n      \"FILTER(?movie1 != ?movie5, ?movie2 != ?movie5, ?movie3 != ?movie5, ?movie4 != ?movie5) .\",\n    \"}\",\n    \"GROUP BY ?movie1 ?movie2 ?director ?execProducer\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?person ?directorWork ?screenwriterWork ?executiveProducerWork\",\n    \"WHERE {\",\n      \"?director wdt:P57 wd:Q206182 ;\",\n               \"wdt:P57 ?directorWork .\",\n      \"?screenwriter wdt:P58 wd:Q206182 ;\",\n               \"wdt:P58 ?screenwriterWork .\",\n      \"?executiveProducer wdt:P1431 wd:Q206182 ;\",\n               \"wdt:P1431 ?executiveProducerWork .\",\n      \"?person wdt:P39 ?director ;\",\n               \"wdt:P39 ?screenwriter ;\",\n               \"wdt:P39 ?executiveProducer .\",\n      \"VALUES ?director { wd:Q378013 }\",\n      \"VALUES ?screenwriter {}\",\n      \"VALUES ?executiveProducer {}\",\n      \"?directorWork wdt:P31/wdt:P279* wd:Q206182 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q594033 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q391143 .\",\n      \"?screenwriterWork wdt:P31/wdt:P279* wd:Q206182 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q594033 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q391143 .\",\n      \"?executiveProducerWork wdt:P31/wdt:P279* wd:Q206182 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q594033 ;\",\n                    \"wdt:P31/wdt:P279* wd:Q391143 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?directorOrProducer kg:is ?movie .\",\n    \"{ ?director kg:is kg:8467 } UNION { ?executiveProducer kg:is kg:7107 } .\",\n    \"?movie kg:isPoliceStory2 kg:2393 ;\",\n    \"                     kg:isChineseZodiac kg:5278 ;\", \"># Note: kg:5278 is a placeholder for 'Chinese Zodiac' as it's not provided in the entities.\",\n    \"                     kg:isTheFearlessHyena kg:1055 ;\",\n    \"                     kg:isPoliceStory kg:0536 .\",\n    \"?directorOrProducer kg:directs ?movie ;\",\n    \"                     kg:writes ?movie .\",\n    \"}\",\n    \"UNION {\",\n    \"?director kg:is kg:8467 ;\",\n    \"           kg:directs ?movie1 ;\",\n    \"           kg:writes ?movie1 .\",\n    \"?executiveProducer kg:is kg:7107 ;\",\n    \"                  kg:produces ?movie2 .\",\n    \"}\",\n    \"FILTER (?movie1 = kg:2393 && ?movie2 = kg:5278 && ?movie2 = kg:1055 && ?movie2 = kg:0536).\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?personLabel\",\n    \"WHERE {\",\n      \"?person wdt:P170 ?founderEmployment. \",\n      \"?person wdt:P580 ?employeeEmployment. \",\n      \"?founderEmployment wdt:P279* wd:Q63471. \", \"-- Open Data Institute\",\n      \"OPTIONAL { ?founderEmployment wdt:P279* wd:Q106296. }  -- CERN\",\n      \"OPTIONAL { ?founderEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?founderEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?founderEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q106296. }  -- CERN (repeated, should be different entity)\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium (repeated, should be different entity)\",\n      \"?employeeEmployment wdt:P279* wd:Q106296. \", \"-- CERN\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd:Q35486. }  -- World Wide Web Consortium\",\n      \"OPTIONAL { ?employeeEmployment wdt:P279* wd"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person ?employer WHERE {\",\n    \"?person wdt:P112 wd:Q7095994 .\", \"@en\",\n    \"{ ?person wdt:P108 wd:Q42944 } UNION { ?person wdt:P108 wd:Q37033 } UNION { ?person wdt:P108 wd:Q7432436 } UNION { ?person wdt:P108 wd:Q7204713 }\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?founderAndEmployee a kg:Person ;\",\n    \"   kg:isEmployedBy* ?employer .\",\n    \"VALUES ?employer { kg:5015 kg:8250 kg:6742 kg:9078 kg:5933 }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P31 wd:Q11424; # Check if the resource is a movie\",\n      \"?movie wdt:P50/wdt:P106 [wdt:P279* wd:Q8701]; # Writers, Editors, Producers, and Directors of Danish nationality or related roles\",\n      \"?movie wdt:P34 ?writer .\",\n      \"FILTER(?writer IN (wd:Q1052649, wd:Q1052650, wd:Q1052651)) # Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n      \"?movie wdt:P34 ?director .\",\n      \"FILTER(?director IN (wd:Q1052649, wd:Q1052650, wd:Q1052651)) # Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n      \"?movie wdt:P34 ?producer .\",\n      \"FILTER(?producer IN (wd:Q1052649, wd:Q1052650, wd:Q1052651)) # Jens Jørgen Thorsen, Ole John, and Jørgen Leth\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \"# Check if the resource is a film\",\n    \"  wdt:P57 wd:Q1687239 ; # Jens Jørgen Thorsen as director\",\n    \"  wdt:P57 wd:Q35979475 ; # Ole John as director\",\n    \"  wdt:P57 wd:Q562108 .   # Jørgen Leth as director\",\n    \"?movie wdt:P1040 ?editor .\", \"# Film editor by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"?movie wdt:P57 ?director .  # Director by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"?movie wdt:P162 ?producer .  # Producer by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"}\",\n    \"FILTER EXISTS { ?movie wdt:P58 ?screenwriter }\"\n  ]\n}\n"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie WHERE {\",\n    \"  ?movie kg:2226 kg:7110 ;\", \"# Jens Jørgen Thorsen is a screenwriter for the movie\",\n    \"                        kg:1439 kg:0980 ;\", \"# Ole John is a film editor for the production company\",\n    \"                        kg:0116 ;\", \"# Jørgen Leth is a director of the movie\",\n    \"                        kg:2722 kg:2361 .\", \"# Jøergen Leth is also a screenwriter for the movie\",\n    \"  ?movie kg:2226 kg:0980 ;\", \"# Ole John is a screenwriter for the movie\",\n    \"                        kg:1439 kg:7110 ;\", \"# Jens Jørgen Thorsen is a film editor for the production company\",\n    \"                        kg:2722 kg:2361 .\", \"# Jøergen Leth is also a director of the movie\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248097 ;\", \"# Sin City (movie)\",\n      \"?film1 wdt:P577 ?date1 .\",\n      \"?film2 wdt:P31 wd:Q114248097 ;\", \"# The Adventures of Sharkboy and Lavagirl in 3-D (movie)\",\n      \"?film2 wdt:P577 ?date2 .\",\n      \"?series wdt:P31 wd:Q16986559 ;\", \"# From Dusk till Dawn: The Series\",\n      \"?series wdt:P577 ?date3 .\",\n      \"?person wdt:P577 ?date4 .\",\n      \"?person wdt:P3302 ?film1 ;\", \"# writer of Sin City (movie)\"\n      ,\"?person wdt:P938 ?film1 ;\" ,\"\\n\\twdt:P677 ?film1 .\" ,\"\\n\\t# cinematographer of Sin City (movie)\",\n      \"?person wdt:P106 ?role1 .\", \"# star of Sin City (movie)\"\n      ,\"?person wdt:P548 ?date5 .\",\n      \"?person wdt:P3302 ?film2 ;\" ,\"\\n\\twdt:P938 ?film2 ;\" ,\"\\n\\twdt:P677 ?film2 .\" ,\"\\n\\t# writer and cinematographer of The Adventures of Sharkboy and Lavagirl in 3-D (movie)\",\n      \"?person wdt:P106 ?role2 .\", \"# star of The Adventures of Sharkboy and Lavagirl in 3-D (movie)\"\n      ,\"?person wdt:P548 ?date6 .\",\n      \"?person wdt:P710 ?series ;\" ,\"\\n\\twdt:P938 ?series .\" ,\"\\n\\t# executive producer for From Dusk till Dawn: The Series\",\n      \"?person wdt:P106 ?role3 .\", \"# director of Sin City (movie)\"\n      ,\"?person wdt:P548 ?date7 .\",\n      \"?person wdt:P106 ?role4 .\" ,\"\\n\\t# editor of Sin City (movie)\"\n    ,\n      \"VALUES ?role1 { wd:Q24939 } ;\", \"# writer\"\n      ,\"?role2 { wd:Q24939 } ;\" ,\"\\n\\twd:Q65708 .\" ,\"\\n\\t# cinematographer\"\n      ,\"?role3 { wd:Q114248098 } ;\" ,\"\\n\\t# director\"\n      ,\"?role4 { wd:Q114248100 }\" ,\"\\n\\t# editor\"\n    ,\n      \"FILTER NOT EXISTS { ?film1 wdt:P577 [] . }\",\n      \"FILTER NOT EXISTS { ?film2 wdt:P577 [] . }\",\n      \"FILTER NOT EXISTS { ?series wdt:P577 [] . }\"\n    ,\n      \"?person wdt:P31 wd:Q5 .\" ,\"\\n\\t# person\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n    ,\n      \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P161 ?star .\",\n\t\t\"?person wdt:P57 wd:Q192115 ;\",\n\t\t\"wdt:P57 wd:Q656357 ;\",\n\t\t\"wdt:P58 wd:Q192115 ;\",\n\t\t\"wdt:P58 wd:Q656357 ;\",\n\t\t\"wdt:P1040 wd:Q192115 ;\",\n\t\t\"wdt:P1040 wd:Q656357 ;\",\n\t\t\"wdt:P344 wd:Q192115 ;\",\n\t\t\"wdt:P344 wd:Q656357 ;\",\n\t\t\"wdt:P161 wd:Q192115 ;\",\n\t\t\"wdt:P161 wd:Q656357 ;\",\n\t\t\"?person wdt:P1431 wd:Q15622760 .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n \t\"query\": [\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n \t\t\t\"SELECT ?person WHERE {\",\n \t\t\t\"?person kg:isDirectorOf ?film1 ;\",\n \t\t\t\"   kg:isScreenwriterOf ?film2 ;\",\n \t\t\t\"   kg:isCastMemberOf ?film3 ;\",\n \t\t\t\"   kg:isFilmEditorOf ?film4 ;\",\n \t\t\t\"   kg:isDirectorOf ?film5 ;\",\n \t\t\t\"   kg:isExecutiveProducerOf <kg:1113> .\",\n \t\t\t\"?film1 kg:5842 .\",\n \t\t\t\"?film2 kg:6130 .\",\n \t\t\t\"?film3 kg:5842 ; kg:6130 .\",\n \t\t\t\"?film4 kg:3797 .\",\n \t\t\t\"?film5 kg:6948 .\",\n \t\t\t\"}\"]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wd:tv:director ?director.\",\n      \"?film1 wd:tv:cinematographer ?cinematographer.\",\n      \"?film1 wd:tv:writer ?writer.\",\n      \"?film2 wd:tv:writer ?writer2.\",\n      \"?film3 wd:tv:writer ?writer3.\",\n      \"?film4 wd:tv:writer ?writer4.\",\n      \"FILTER(?director = ?person, ?cinematographer = ?person, ?writer = ?person, ?writer2 = ?person, ?writer3 = ?person, ?writer4 = ?person)\",\n      \"VALUES ?film1 { wd:Q1067859 }\",\n      \"VALUES ?film2 { wd:Q1067861 }\",\n      \"VALUES ?film3 { wd:Q1067863 }\",\n      \"VALUES ?film4 { wd:Q1067865 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P57 ?director; wdt:P58 ?screenwriter; wdt:P1040 ?editor; wdt:P344 ?cinematographer.\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P57 ?director; wdt:P58 ?screenwriter; wdt:P1040 ?editor; wdt:P344 ?cinematographer.\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P57 ?director; wdt:P58 ?screenwriter; wdt:P1040 ?editor; wdt:P344 ?cinematographer.\",\n      \"?film4 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P57 ?director; wdt:P58 ?screenwriter; wdt:P1040 ?editor; wdt:P344 ?cinematographer.\",\n      \"?film1 wdt:P648 wd:Q1699716;\",\n      \"?film2 wdt:P648 wd:Q327427;\",\n      \"?film3 wdt:P648 wd:Q823767;\",\n      \"?film4 wdt:P648 wd:Q686125.\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film1 kg:isdirector ?person ;\",\n    \"   kg:isscreenwriter ?person ;\",\n    \"   kg:isfilmeditor ?person .\",\n    \"?film2 kg:isdirector ?person ;\",\n    \"   kg:isscreenwriter ?person ;\",\n    \"   kg:isfilmeditor ?person .\",\n    \"?film3 kg:isdirector ?person ;\",\n    \"   kg:isscreenwriter ?person ;\",\n    \"   kg:isfilmeditor ?person .\",\n    \"?film4 kg:isdirector ?person ;\",\n    \"   kg:isscreenwriter ?person ;\",\n    \"   kg:isfilmeditor ?person .\",\n    \"?film1 kg:name \\\"This Night\\\" ;\",\n    \"?film2 kg:name \\\"Rio das Mortes\\\" ;\",\n    \"?film3 kg:name \\\"Lili Marleen\\\" ;\",\n    \"?film4 kg:name \\\"Whity\\\" .\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film a wd:Q11424;\",\n      \"   wdt:P577 ?date .\",\n      \"?person p:P39 ?statement ;\",\n      \"   wdt:P161 ?film .\",\n      \"?statement ps:P39 ?cinematography .\",\n      \"OPTIONAL { ?person p:P40 ?directingStatement . }\",\n      \"OPTIONAL { ?person p:P28 ?writingStatement . }\",\n      \"FILTER (BOUND(?directingStatement) && BOUND(?writingStatement))\",\n      \"?film wdt:P577 ?date .\",\n      \"VALUES ?film { wd:Q1046391 wd:Q1046392 wd:Q1046393 }\", \"-- Replace with actual QIDs for the films\"\n    ,\n      \"?person wdt:P31 wd:Q5 .\" ,\n      \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?film1 ?film2 ?film3 ?film4\",\n\t\t\"{\",\n\t\t\t\"?person wdt:P344 wd:Q6230517. \",\n\t\t\t\"?person wdt:P1040 ?editorship1.\",\n\t\t\t\"?person wdt:P58 ?writership1.\",\n\t\t\t\"?person wdt:P57 ?directorship1.\",\n\t\t\t\"OPTIONAL { ?editorship1 wdt:P136 wd:Q2520777. }\",\n\t\t\t\"OPTIONAL { ?writership1 wdt:P136 wd:Q2520777. }\",\n\t\t\t\"OPTIONAL { ?directorship1 wdt:P136 wd:Q2520777. }\",\n\t\t\t\"?editorship1 wdt:P136 ?film1.\",\n\t\t\t\"?writership1 wdt:P136 ?film2.\",\n\t\t\t\"?directorship1 wdt:P136 ?film3.\",\n\t\t\t\"FILTER(?film1 = wd:Q2520777 && ?film2 = wd:Q1903317 && ?film3 = wd:Q627060)\",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?photographer kg:7456 ?film1 ;\",\n    \"   kg:8900 ?film2 ;\",\n    \"   kg:5180 ?film3 ;\",\n    \"   kg:7874 ?film4 .\",\n    \"?film1 kg:7350 \\\"Night of the Living Dead\\\" ;\",\n    \"?film2 kg:3266 \\\"Martin\\\" ;\",\n    \"?film3 kg:5535 \\\"Season of the Witch\\\" ;\",\n    \"?film4 kg:8900 \\\"The Crazies\\\" .\",\n    \"}\",\n    \"VALUES ?photographer { kg:7456 }\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P3459 \\\"Look at Life\\\" ;\",\n             \"wdt:P3460 \\\"Anyone Lived in a Pretty How Town\\\" ;\",\n             \"wdt:P3460 \\\"Filmmaker\\\" .\",\n      \"?film2 wdt:P3458 \\\"Star Wars: Episode IV – A New Hope\\\" .\",\n      \"?person wdt:P57 ?film1 ;\",\n              \"wdt:P93 ?film2 ;\",\n              \"wdt:P6770 ?film1 ;\",\n              \"wdt:P6771 ?film2 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P57 ?director .\",\n\t\t\"?film1 wdt:P58 ?writer .\",\n\t\t\"?film1 wdt:P344 ?cinematographer .\",\n\t\t\"?film2 wdt:P57 ?director .\",\n\t\t\"?film2 wdt:P58 ?writer .\",\n\t\t\"?film2 wdt:P344 ?cinematographer .\",\n\t\t\"?film3 wdt:P57 ?director .\",\n\t\t\"?film3 wdt:P58 ?writer .\",\n\t\t\"?film3 wdt:P344 ?cinematographer .\",\n\t\t\"?film1 wdt:P1431* wd:Q613974 ;\",\n\t\t\"wdt:P1431* wd:Q1415127 ;\",\n\t\t\"wdt:P1431* wd:Q1869678 .\",\n\t\t\"?film4 wdt:P57 ?director .\",\n\t\t\"?film4 wdt:P58 ?writer .\",\n\t\t\"?film4 wdt:P1431 ?producer .\",\n\t\t\"wd:Q17738 wdt:P57 ?director ;\",\n\t\t\"wd:Q17738 wdt:P58 ?writer ;\",\n\t\t\"wd:Q17738 wdt:P344 ?cinematographer ;\",\n\t\t\"wd:Q17738 wdt:P1431 ?producer .\",\n\t\t\"?person wdt:P57 ?director .\",\n\t\t\"?person wdt:P58 ?writer .\",\n\t\t\"?person wdt:P344 ?cinematographer .\",\n\t\t\"?person wdt:P1431* wd:Q613974 ;\",\n\t\t\"wdt:P1431* wd:Q1415127 ;\",\n\t\t\"wdt:P1431* wd:Q1869678 .\",\n\t\t\"?person wdt:P1431 ?producer .\"\n\t]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:isDirector ?film1 .\",\n\t\t\t\"?resource kg:isScreenwriter ?film2 .\",\n\t\t\t\"?resource kg:isDirectorPhotographer ?film3 .\",\n\t\t\t\"?resource kg:isExecutiveProducer ?film4 .\",\n\t\t\t\"?film1 kg:isTitle \\\"Look at Life\\\" .\",\n\t\t\t\"?film2 kg:isTitle \\\"Anyone Lived in a Pretty How Town\\\" .\",\n\t\t\t\"?film3 kg:isTitle \\\"Filmmaker\\\" .\",\n\t\t\t\"?film4 kg:isTitle \\\"Star Wars: Episode IV – A New Hope\\\" .\"\n\t\t]}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P577 ?date.\",\n      \"?film wdt:P673 ?director.\",\n      \"?film wdt:P648 ?producer.\",\n      \"?film wdt:P120 ?writer.\",\n      \"?film wdt:P291 ?editor.\",\n      \"FILTER (\",\n        \"(?director IN (wd:Q105268, wd:Q73469, wd:Q105269)) &&\",\n        \"(?producer IN (wd:Q105268, wd:Q73469, wd:Q105269)) &&\",\n        \"(?writer IN (wd:Q105268, wd:Q73469, wd:Q105269)) &&\",\n        \"(?editor IN (wd:Q105268, wd:Q73469, wd:Q105269))\"\n      ,\")\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"?film wdt:P57 wd:Q1687239 ; wdt:P57 wd:Q562108 ; wdt:P57 wd:Q35979475 .\",\n    \"?film wdt:P1040 wd:Q35979475 .\",\n    \"?film wdt:P58 wd:Q35979475 .\",\n    \"?film wdt:P162 ?producer .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:4621 ?producer ;\",\n    \"   kg:5363 ?director ;\",\n    \"   kg:8645 ?editor ;\",\n    \"   kg:5446 ?writer ;\",\n    \"   kg:5363/kg:8120/^kg:8120* ?person .\",\n    \"?person (kg:7976|kg:6236|kg:2605) 'Ole John'@en ;\",\n    \"(kg:6236|kg:2605) 'Jens Jørgen Thorsen'@en ;\",\n    \"(kg:6236|kg:2605) 'Jørgen Leth'@en .\",\n    \"?film kg:8419 ?resource .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248760 ;\", \"># Assuming Q114248760 is the instance of film for Pietà, Moebius, and Dream\"\n     \t\t] } "}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P57 ?director .\",\n\t\t\"?film1 wdt:P58 ?writer .\",\n\t\t\"?film1 wdt:P1040 ?editor .\",\n\t\t\"?film1 wdt:P1431 ?producer .\",\n\t\t\"?film2 wdt:P57 ?director .\",\n\t\t\"?film2 wdt:P58 ?writer .\",\n\t\t\"?film2 wdt:P1040 ?editor .\",\n\t\t\"?film2 wdt:P1431 ?producer .\",\n\t\t\"?film3 wdt:P57 ?director .\",\n\t\t\"?film3 wdt:P58 ?writer .\",\n\t\t\"?film3 wdt:P1040 ?editor .\",\n\t\t\"?film3 wdt:P1431 ?producer .\",\n\t\t\"VALUES ?film1 { wd:Q484679 }\",\n\t\t\"VALUES ?film2 { wd:Q13471372 }\",\n\t\t\"VALUES ?film3 { wd:Q3282637 }\",\n\t\t\"?director wdt:P106* ?person .\",\n\t\t\"?writer wdt:P106* ?person .\",\n\t\t\"?editor wdt:P106* ?person .\",\n\t\t\"?producer wdt:P106* ?person .\",\n\t\t\"FILTER(?person = ?director && ?person = ?writer && ?person = ?editor && ?person = ?producer)\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:is director ?person .\",\n    \"?film1 kg:is screenwriter ?person .\",\n    \"?film1 kg:is film editor ?person .\",\n    \"?film1 kg:is executive producer ?person .\",\n    \"?film2 kg:is director ?person .\",\n    \"?film2 kg:is screenwriter ?person .\",\n    \"?film2 kg:is film editor ?person .\",\n    \"?film2 kg:is executive producer ?person .\",\n    \"?film3 kg:is director ?person .\",\n    \"?film3 kg:is screenwriter ?person .\",\n    \"?film3 kg:is film editor ?person .\",\n    \"?film3 kg:is executive producer ?person .\",\n    \"FILTER(?film1 != ?film2 && ?film2 != ?film3)\",\n    \"VALUES ?film1 { kg:5916 }\",\n    \"VALUES ?film2 { kg:0621 }\",\n    \"VALUES ?film3 { kg:2644 }\"\n    ,\n    \"?person kg:is occupation [ kg:has name 'director' ] ;\",\n    \"[ kg:has name 'screenwriter' ] ;\",\n    \"[ kg:has name 'film editor' ] ;\",\n    \"[ kg:has name 'executive producer' ] .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"?film wdt:P50/wdt:P106 [wdt:P279*] wd:Q87879; # Directors (Jens Jørgen Thorsen, Jørgen Leth, Ole John)\",\n      \"?film wdt:P735 ?script; # Written by\",\n      \"?film wdt:P1006 ?edit; # Edited\",\n      \"FILTER(?script IN (wd:Q82491, wd:Q82492, wd:Q82493)) && FILTER(?edit IN (wd:Q82491, wd:Q82492, wd:Q82493))\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q11424 ;\",\n\t\t\"   wdt:P57 [wdt:P31/wdt:P279* wd:Q35979475] ;\",\n\t\t\"   wdt:P1040 [wdt:P31/wdt:P279* wd:Q35979475] ;\",\n\t\t\"   wdt:P58 [wdt:P31/wdt:P279* wd:Q35979475].\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:6315 ?director .\",\n    \"?film kg:2023 ?screenwriter .\",\n    \"?film kg:6378 ?editor .\",\n    \"?director kg:4819 \\\"Jens Jørgen Thorsen\\\" .\",\n    \"?screenwriter kg:9845 \\\"Ole John\\\" .\",\n    \"?editor kg:9845 \\\"Ole John\\\" .\",\n    \"?director kg:6683 ?film .\",\n    \"?screenwriter kg:6683 ?film .\",\n    \"?editor kg:6683 ?film .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wdt:P50/wdt:P279* ?director;\",\n    \"wdt:P810 ?editor;\",\n    \"wdt:P69 ?writer;\",\n    \"wdt:P161 ?producer.\",\n    \"?director wd:Q134411.\",\n    \"?editor wd:Q134411.\",\n    \"?writer wd:Q134411.\",\n    \"?producer wd:Q134411.\"\n   \t,\n    \"FILTER(?film != [])\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# Check if the resource is a film\",\n    \"   wdt:P57 wd:Q1687239 ; # Jens Jørgen Thorsen as director\",\n    \"   wdt:P1040 wd:Q1687239 . # Jens Jørgen Thorsen as editor\",\n    \"   ?film wdt:P58 wd:Q562108 ; # Jørgen Leth as screenwriter\",\n    \"   wdt:P162 wd:Q35979475 .  # Ole John as producer\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2375 ?director ;\",\n    \"   kg:3050 ?editor ;\",\n    \"   kg:4885 ?writer ;\",\n    \"   kg:5891 ?producer .\",\n    \"?director kg:4593 ?person1 ;\",\n    \"?editor kg:4796 ?person2 ;\",\n    \"?writer kg:1382 ?person3 ;\",\n    \"?producer kg:9610 ?person4 .\",\n    \"FILTER (\",\n    \"  (?person1 = kg:0596 &&\",\n    \"   ?person2 = kg:4796 &&\",\n    \"   ?person3 = kg:1382 &&\",\n    \"   ?person4 = kg:9610)\",\n    \")\",\n    \"?film kg:2375 ?director ;\",\n    \"   kg:3050 ?editor ;\",\n    \"   kg:4885 ?writer ;\",\n    \"   kg:5891 ?producer .\",\n    \"}\",\n    \"BIND(?film AS ?resource)\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie1 ?movie2 ?movie3 ?movie4 ?director\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?director .\", \"# Ember - director\",\n      \"?movie2 wdt:P345 ?director .\", \"# Fate - director\",\n      \"?movie3 wdt:P345 ?director .\", \"# The Confession - director\",\n      \"?movie4 wdt:P345 ?director .\", \"# The Waiting Room - director\",\n      \"?movie1 wdt:P81 ?edit1 .\", \"# Ember - edit\",\n      \"?movie2 wdt:P81 ?edit2 .\", \"# Fate - edit\",\n      \"?movie3 wdt:P81 ?edit3 .\", \"# The Confession - edit\",\n      \"?movie4 wdt:P81 ?edit4 .\", \"# The Waiting Room - edit\",\n      \"?movie1 wdt:P7305 ?write1 .\", \"# Ember - write\",\n      \"?movie2 wdt:P7305 ?write2 .\", \"# Fate - write\",\n      \"?movie3 wdt:P7305 ?write3 .\", \"# The Confession - write\",\n      \"?movie4 wdt:P7305 ?write4 .\", \"# The Waiting Room - write\",\n      \"?movie1 wdt:P921 ?execProd1 .\", \"# Ember - executive produce\",\n      \"?movie2 wdt:P921 ?execProd2 .\", \"# Fate - executive produce\",\n      \"?movie3 wdt:P921 ?execProd3 .\", \"# The Confession - executive produce\",\n      \"?movie4 wdt:P921 ?execProd4 .\", \"# The Waiting Room - executive produce\"\n    ,\n      \"FILTER(?director = ?movie1) && (FILTER(?director = ?movie2) && (FILTER(?director = ?movie3) && FILTER(?director = ?movie4)))\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie ?director ?editor ?writer ?producer\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P58 ?writer ;\",\n\t\t\t\t\"wdt:P1431 ?producer .\",\n\t\t\t\"?movie wdt:P648 'Ember'@en .\",\n\t\t\t\"?otherMovie wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P58 ?writer ;\",\n\t\t\t\t\"wdt:P1431 ?producer .\",\n\t\t\t\"?otherMovie wdt:P648 'Fate'@en .\",\n\t\t\t\"?otherOtherMovie wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P58 ?writer ;\",\n\t\t\t\t\"wdt:P1431 ?producer .\",\n\t\t\t\"?otherOtherMovie wdt:P648 'The Confession'@en .\",\n\t\t\t\"?anotherOtherMovie wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P58 ?writer ;\",\n\t\t\t\t\"wdt:P1431 ?producer .\",\n\t\t\t\"?anotherOtherMovie wdt:P648 'The Waiting Room'@en .\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:4146 ?film .\",\n    \"?film kg:7931 \\\"Ember\\\" .\",\n    \"{ ?director kg:4640+ ?film . } UNION { ?director kg:1254 ?film . } UNION { ?director kg:2420 ?film . } UNION { ?director kg:4146 ?film . }\",\n    \"FILTER(?film IN (kg:3865, kg:0732, kg:4638))\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?director .\", \"# Director of Ember\",\n      \"?movie wdt:P50 ?director .\", \"# Writer of the movie (if different from director)\",\n      \"?movie wdt:P735 ?director .\", \"# Editor of the movie (if different from director)\",\n      \"?movie wdt:P12345 ?director .\", \"# Executive producer of the movie (use specific property if known, otherwise use a placeholder)\",\n      \"VALUES ?movie { wd:Q1234567 wd:Q1234568 wd:Q1234569 }\", \"# Replace with actual Wikidata IDs for 'Fate', 'The Waiting Room', and 'The Confession'\",\n    \"}\",\n    \"GROUP BY ?movie ?director\"\n  ]\n}\n"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?movie ?director ?editor ?screenwriter ?producer\",\n\t\t\"WHERE {\",\n\t\t\t\"?movie wdt:P57 ?director ;\",\n\t\t\t\t\"wdt:P1040 ?editor ;\",\n\t\t\t\t\"wdt:P58 ?screenwriter ;\",\n\t\t\t\t\"wdt:P1431 ?producer .\",\n\t\t\t\"VALUES ?movie { wd:Q25479948 wd:Q5437360 wd:Q6084069 wd:Q12813010 }\",\n\t\t\t\"?director wdt:P57 wd:Q6084069\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n \t\"query\": [\n\t\t\"PREFIX kg: <http://example.org/knowledge_graph/>\",\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?director kg:5227 ?film .\",\n\t\t\t\"?film kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor ;\",\n\t\t\t\t\"kg:2761 ?writer ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor2 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer .\",\n\t\t\t\"?director kg:6201 ?film2 .\",\n\t\t\t\"?film2 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor3 ;\",\n\t\t\t\t\"kg:2761 ?writer2 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor4 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer2 .\",\n\t\t\t\"?director kg:6579 ?film3 .\",\n\t\t\t\"?film3 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor5 ;\",\n\t\t\t\t\"kg:2761 ?writer3 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor6 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer3 .\",\n\t\t\t\"?director kg:6581 ?film4 .\",\n\t\t\t\"?film4 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor7 ;\",\n\t\t\t\t\"kg:2761 ?writer4 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor8 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer4 .\",\n\t\t\t\"?director kg:6201 ?film5 .\",\n\t\t\t\"?film5 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor9 ;\",\n\t\t\t\t\"kg:2761 ?writer5 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor10 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer5 .\",\n\t\t\t\"?director kg:6579 ?film6 .\",\n\t\t\t\"?film6 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor11 ;\",\n\t\t\t\t\"kg:2761 ?writer6 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor12 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer6 .\",\n\t\t\t\"?director kg:6581 ?film7 .\",\n\t\t\t\"?film7 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor13 ;\",\n\t\t\t\t\"kg:2761 ?writer7 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor14 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer7 .\",\n\t\t\t\"?director kg:6201 ?film8 .\",\n\t\t\t\"?film8 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor15 ;\",\n\t\t\t\t\"kg:2761 ?writer8 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor16 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer8 .\",\n\t\t\t\"?director kg:6579 ?film9 .\",\n\t\t\t\"?film9 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor17 ;\",\n\t\t\t\t\"kg:2761 ?writer9 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor18 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer9 .\",\n\t\t\t\"?director kg:6581 ?film10 .\",\n\t\t\t\"?film10 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor19 ;\",\n\t\t\t\t\"kg:2761 ?writer10 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor20 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer10 .\",\n\t\t\t\"?director kg:6201 ?film11 .\",\n\t\t\t\"?film11 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor21 ;\",\n\t\t\t\t\"kg:2761 ?writer11 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor22 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer11 .\",\n\t\t\t\"?director kg:6579 ?film12 .\",\n\t\t\t\"?film12 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor23 ;\",\n\t\t\t\t\"kg:2761 ?writer12 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor24 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer12 .\",\n\t\t\t\"?director kg:6581 ?film13 .\",\n\t\t\t\"?film13 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor25 ;\",\n\t\t\t\t\"kg:2761 ?writer13 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor26 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer13 .\",\n\t\t\t\"?director kg:6201 ?film14 .\",\n\t\t\t\"?film14 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor27 ;\",\n\t\t\t\t\"kg:2761 ?writer14 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor28 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer14 .\",\n\t\t\t\"?director kg:6579 ?film15 .\",\n\t\t\t\"?film15 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor29 ;\",\n\t\t\t\t\"kg:2761 ?writer15 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor30 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer15 .\",\n\t\t\t\"?director kg:6581 ?film16 .\",\n\t\t\t\"?film16 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor31 ;\",\n\t\t\t\t\"kg:2761 ?writer16 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor32 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer16 .\",\n\t\t\t\"?director kg:6201 ?film17 .\",\n\t\t\t\"?film17 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor33 ;\",\n\t\t\t\t\"kg:2761 ?writer17 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor34 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer17 .\",\n\t\t\t\"?director kg:6579 ?film18 .\",\n\t\t\t\"?film18 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor35 ;\",\n\t\t\t\t\"kg:2761 ?writer18 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor36 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer18 .\",\n\t\t\t\"?director kg:6581 ?film19 .\",\n\t\t\t\"?film19 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor37 ;\",\n\t\t\t\t\"kg:2761 ?writer19 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor38 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer19 .\",\n\t\t\t\"?director kg:6201 ?film20 .\",\n\t\t\t\"?film20 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor40 ;\",\n\t\t\t\t\"kg:2761 ?writer20 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor41 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer20 .\",\n\t\t\t\"?director kg:6579 ?film21 .\",\n\t\t\t\"?film21 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor42 ;\",\n\t\t\t\t\"kg:2761 ?writer21 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor43 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer21 .\",\n\t\t\t\"?director kg:6581 ?film22 .\",\n\t\t\t\"?film22 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor44 ;\",\n\t\t\t\t\"kg:2761 ?writer22 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor45 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer22 .\",\n\t\t\t\"?director kg:6201 ?film23 .\",\n\t\t\t\"?film23 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor46 ;\",\n\t\t\t\t\"kg:2761 ?writer23 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor47 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer23 .\",\n\t\t\t\"?director kg:6579 ?film24 .\",\n\t\t\t\"?film24 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor48 ;\",\n\t\t\t\t\"kg:2761 ?writer24 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor49 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer24 .\",\n\t\t\t\"?director kg:6581 ?film25 .\",\n\t\t\t\"?film25 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor50 ;\",\n\t\t\t\t\"kg:2761 ?writer25 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor51 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer25 .\",\n\t\t\t\"?director kg:6201 ?film26 .\",\n\t\t\t\"?film26 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor52 ;\",\n\t\t\t\t\"kg:2761 ?writer26 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor53 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer26 .\",\n\t\t\t\"?director kg:6579 ?film27 .\",\n\t\t\t\"?film27 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor54 ;\",\n\t\t\t\t\"kg:2761 ?writer27 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor55 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer27 .\",\n\t\t\t\"?director kg:6581 ?film28 .\",\n\t\t\t\"?film28 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor56 ;\",\n\t\t\t\t\"kg:2761 ?writer28 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor57 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer28 .\",\n\t\t\t\"?director kg:6201 ?film29 .\",\n\t\t\t\"?film29 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor58 ;\",\n\t\t\t\t\"kg:2761 ?writer29 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor59 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer29 .\",\n\t\t\t\"?director kg:6579 ?film30 .\",\n\t\t\t\"?film30 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor60 ;\",\n\t\t\t\t\"kg:2761 ?writer30 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor61 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer30 .\",\n\t\t\t\"?director kg:6581 ?film31 .\",\n\t\t\t\"?film31 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor62 ;\",\n\t\t\t\t\"kg:2761 ?writer31 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor63 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate\\\" ;\",\n\t\t\t\t\"kg:6579 ?producer31 .\",\n\t\t\t\"?director kg:6201 ?film32 .\",\n\t\t\t\"?film32 kg:6499 \\\"The Waiting Room\\\" ;\",\n\t\t\t\t\"kg:0346 ?editor64 ;\",\n\t\t\t\t\"kg:2761 ?writer32 ;\",\n\t\t\t\t\"kg:0890 \\\"The Confession\\\" ;\",\n\t\t\t\t\"kg:6581 ?editor65 ;\",\n\t\t\t\t\"kg:6201 \\\"Fate"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424865.\" , \"># Film work\",\n    \"?film wdt:P577 ?date.\" , \"># Date (just to filter, not necessary for the answer)\",\n    \"?film p:P39 ?roleStatement.\" ,\n    \"+ ?roleStatement ps:P39 wd:Q1024864.\" , \"># David Zucker\",\n    \"+ ?roleStatement ps:P39 wd:Q576655.\" , \"># Jim Abrahams\",\n    \"+ ?roleStatement ps:P39 wd:Q1024865.\" , \"># Jerry Zucker\",\n    \"?roleStatement pq:P580 ?start.\" ,\n    \"?roleStatement pq:P582 ?end.\" ,\n    \"FILTER(?start <= \\\"1979-01-01T00:00:00Z\\\"^^xsd:dateTime && ?end >= \\\"1999-12-31T23:59:59Z\\\"^^xsd:dateTime).\" , \"># Filter by years of activity (adjust as necessary)\",\n    \"}\"\n  ]\n}\n"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film moebius / wdt:P31/wdt:P279* wd:Q114248056 ;\", \"# films mentioned in the question\",\n      \"   wdt:P31/wdt:P279* wd:Q114248056 .\",\n      \"?person wdt:P57 ?film ;\", \"# person is editor of one of the films\",\n      \"   wdt:P32 ?film ;\", \"# person is cinematographer of one of the films\",\n      \"   wdt:P648 ?film.\" ,\"\\n    # person is executive producer for Pieta\",\n      \"?person wdt:P102 wd:Q795866.\" ,\"\\n    # filter to get only resources (people)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P1431 ?producer .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"VALUES ?film { wd:Q13471372 wd:Q17041657 wd:Q462025 wd:Q483197 }\",\n\t\t\"?person wdt:P1040 ?editor ;\",\n\t\t\"wdt:P1431 ?producer ;\",\n\t\t\"wdt:P344 ?cinematographer ;\",\n\t\t\"wdt:P57 ?director .\"\n\t]\n}\n\t\t\t  \t\t\t\t\t  \t\t\t\t\t  \t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:0039 ?editor .\",\n\t\t\t\"?resource kg:5835 ?cinematographer .\",\n\t\t\t\"?resource kg:4308 ?director .\",\n\t\t\t\"?resource kg:0372 \\\"Moebius\\\" .\",\n\t\t\t\"?resource kg:3285 \\\"One on One\\\" .\",\n\t\t\t\"?resource kg:5838 \\\"Amen\\\" .\",\n\t\t\t\"?resource kg:4511 \\\"Pieta\\\" .\",\n\t\t\t\"?resource kg:0039 ?editorForPieta .\",\n\t\t\t\"?resource kg:4308 ?producerForPieta .\",\n\t\t\t\"FILTER(?editorForPieta = kg:0039 && ?producerForPieta = kg:0372)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P170 ?organization .\",\n      \"?person wdt:P27 ?organization .\", \"@en\",\n      \"?organization rdfs:label ?orgLabel .\",\n      \"FILTER (lang(?orgLabel) = 'en') .\",\n      \"VALUES ?organization { wd:Q64859 wd:Q1036156 }\",\n      \"?person wdt:P279* wd:Q11166488 .\", \"@en\",\n      \"FILTER NOT EXISTS { ?person wdt:P75 ?previousEmployer . }\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P112* wd:Q7095994 ;\",\n              \"wdt:P112* wd:Q37033 ;\",\n              \"wdt:P108* [ wdt:P112* wd:Q7204713 ] ;\",\n              \"wdt:P108* [ wdt:P112* wd:Q7432436 ].\",\n      \"?person wdt:P108* wd:Q37033. # Ensure the person is an employee of W3C\",\n      \"?person wdt:P108* [ wdt:P112* wd:Q7204713 ]. # Ensure the person was formerly employed by Plessey\",\n      \"?person wdt:P108* [ wdt:P112* wd:Q7432436 ]. # Ensure the person was formerly employed by the School of Electronics and Computer Science at the University of Southampton\"\n    ,\n      \"OPTIONAL { ?person wdt:P108* wd:Q42944. } # Optional check for CERN employment, if needed\"\n    ,\n      \"?person wdt:P108* [ wdt:P112* wd:Q7095994 ]. # Ensure the person is an employee of ODI\"\n    , \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:isFounderAndEmployeeOf ?wwwc.\",\n    \"?resource kg:isEmployer ?odin.\",\n    \"?wwwc kg:0878 ?plessey.\",\n    \"?wwwc kg:9985 ?cern.\",\n    \"?wwwc kg:5786 ?seecs.\",\n    \"?wwwc kg:2585 ?odin.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 ?person. # Writer of Planet Terror\",\n      \"?film2 wdt:P3460 ?person. # Cinematographer of Planet Terror\",\n      \"?film3 wdt:P161 ?person. # Lead actor in Planet Terror\",\n      \"?film4 wdt:P800 ?person. # Composer of Planet Terror\",\n      \"?film5 wdt:P703 ?person. # Editor of Sin City: A Dame to Kill For\",\n      \"?film6 wdt:P6629 ?person. # Director of Sin City: A Dame to Kill For\",\n      \"?film7 wdt:P703 ?person. # Editor of Machete\",\n      \"?film8 wdt:P6629 ?person. # Director of Machete\",\n      \"?film9 wdt:P6629 ?person. # Director of Sin City\",\n      \"?film10 wdt:P3457 ?person. # Writer of Sin City: A Dame to Kill For\",\n      \"?film11 wdt:P3460 ?person. # Cinematographer of Sin City: A Dame to Kill For\",\n      \"?film12 wdt:P800 ?person. # Composer of Sin City: A Dame to Kill For\",\n      \"?film13 wdt:P703 ?person. # Editor of Sin City\",\n      \"?film14 wdt:P6629 ?person. # Director of Sin City\",\n      \"?film15 wdt:P800 ?person. # Composer of Machete\",\n      \"?film16 wdt:P3457 ?person. # Writer of Machete\",\n      \"?film17 wdt:P3460 ?person. # Cinematographer of Machete\",\n      \"?film18 wdt:P703 ?person. # Editor of Sin City (2005 film)\",\n      \"?film19 wdt:P6629 ?person. # Director of Sin City (2005 film)\",\n      \"FILTER(?film1 != ?film2 && ?film1 != ?film3 && ?film1 != ?film4 &&\",\n           \"?film2 != ?film3 && ?film2 != ?film4 && ?film3 != ?film4 &&\",\n           \"?film5 != ?film6 && ?film5 != ?film7 && ?film5 != ?film8 &&\",\n           \"?film6 != ?film7 && ?film6 != ?film8 && ?film7 != ?film8 &&\",\n           \"?film10 != ?film11 && ?film10 != ?film12 && ?film10 != ?film13 &&\",\n           \"?film11 != ?film12 && ?film11 != ?film13 && ?film12 != ?film13 &&\",\n           \"?film15 != ?film16 && ?film15 != ?film17 && ?film15 != ?film18 &&\",\n           \"?film16 != ?film17 && ?film16 != ?film18 && ?film17 != ?film18)\",\n      \"FILTER(?person != wd:Q42) # Exclude fictional characters\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q1165050 wdt:P57 ?director .\",\n    \"wd:Q1165050 wdt:P86 ?composer .\",\n    \"wd:Q1165050 wdt:P58 ?writer .\",\n    \"wd:Q1165050 wdt:P1040 ?editor .\",\n    \"OPTIONAL { wd:Q1165050 wdt:P344 ?cinematographer }\",\n    \"FILTER NOT EXISTS { wd:Q192115 wdt:P57 ?director ; wdt:P86 ?composer ; wdt:P58 ?writer ; wdt:P1040 ?editor . }\",\n    \"FILTER NOT EXISTS { wd:Q1653396 wdt:P57 ?director ; wdt:P86 ?composer ; wdt:P58 ?writer ; wdt:P1040 ?editor . }\",\n    \"FILTER NOT EXISTS { wd:Q128493 wdt:P57 ?director ; wdt:P86 ?composer ; wdt:P58 ?writer ; wdt:P1040 ?editor . }\",\n    \"?resource wdt:P57 wd:Q1165050 .\",\n    \"?resource wdt:P86 wd:Q1165050 .\",\n    \"?resource wdt:P58 wd:Q1165050 .\",\n    \"?resource wdt:P1040 wd:Q1165050 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:isPlanetTerror .\",\n    \"?film2 kg:isSinCityA DameToKillFor .\",\n    \"?film3 kg:isMachete .\",\n    \"?film4 kg:isSinCity .\",\n    \"?person kg:7326 ?film1 .\", \"# director of Planet Terror\",\n    \"?person kg:6683 ?film1 .\", \"# screenwriter of Planet Terror\",\n    \"?person kg:5977 ?film1 .\", \"# cinematographer of Planet Terror\",\n    \"?person kg:9537 ?film2 .\", \"# director of Sin City: A Dame to Kill For\",\n    \"?person kg:6683 ?film2 .\", \"# screenwriter of Sin City: A Dame to Kill For\",\n    \"?person kg:6750 ?film3 .\", \"# editor of Machete\",\n    \"?person kg:9880 ?film4 .\", \"# lead actor in Sin City\",\n    \"?person kg:1594 ?film4 .\", \"# composer of Sin City\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wd:T106824 ?director .\",\n      \"?film1 wd:T106835 ?execProducer .\",\n      \"?film1 wd:T106837 ?editor .\",\n      \"?film2 wd:T106824 ?director .\",\n      \"?film2 wd:T106835 ?execProducer .\",\n      \"?film2 wd:T106836 ?writer .\",\n      \"?film2 wd:T106837 ?editor .\",\n      \"VALUES ?film1 { wd:Q1194491 }\",\n      \"VALUES ?film2 { wd:Q1562567 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?film1 ?film2\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P57 wd:Q483197. # Director of Pietà\",\n\t\t\t\"?person wdt:P1040 wd:Q483197. # Editor of Pietà\",\n\t\t\t\"?person wdt:P58 wd:Q483197. # Screenwriter of Pietà\",\n\t\t\t\"?person wdt:P1431 wd:Q13471372. # Executive producer of Moebius\",\n\t\t\t\"OPTIONAL { ?person wdt:P57 wd:Q484679. } # Director of Dream (if applicable)\",\n\t\t\t\"OPTIONAL { ?person wdt:P1040 wd:Q484679. } # Editor of Dream (if applicable)\",\n\t\t\t\"OPTIONAL { ?person wdt:P58 wd:Q484679. } # Screenwriter of Dream (if applicable)\"\n\t\t,\"}\"\n\t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (kg:5562 kg:is_director ?director .\",\n    \"   kg:9521 kg:is_executive_producer ?producer .\",\n    \"   kg:9521 kg:is_film_editor ?editor .\",\n    \"   kg:5562 kg:is_director ?director2 .\",\n    \"   kg:9764 kg:is_screenwriter ?screenwriter .\",\n    \"   kg:9521 kg:is_film_editor ?editor2 .\",\n    \"   kg:0874 kg:is_executive_producer ?producer2 .\",\n    \"   kg:2746 kg:is_director ?director3 .\",\n    \"   kg:5465 kg:is_moebius ?moebius .\",\n    \"  )\",\n    \"  UNION {\",\n    \"    (kg:5562 kg:is_executive_producer ?producer .\",\n    \"     kg:9764 kg:is_screenwriter ?screenwriter .\",\n    \"     kg:0874 kg:is_executive_producer ?producer2 .\",\n    \"     kg:2746 kg:is_director ?director3 .\",\n    \"     kg:5465 kg:is_moebius ?moebius .\",\n    \"    )\",\n    \"  }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?film1 ?film2 ?film3\",\n    \"WHERE {\",\n      \"?company a wd:Q940865 ;\",\n               \"wdt:P91 ?founder .\",\n      \"?founder wdt:P106* wd:Q11376 ;\", \"# film producer\",\n      \"?founder wdt:P31 wd:Q11223902 .\" ,\"\\n# person\",\n      \"OPTIONAL { ?company wdt:P3458 ?film1 . }\",\n      \"OPTIONAL { ?company wdt:P3458 ?film2 . }\",\n      \"OPTIONAL { ?company wdt:P3458 ?film3 . }\",\n      \"?film1 wdt:P679 \\\"The Brahma Diamond\\\"@en ;\",\n             \"wdt:P31 wd:Q11424003 .\" ,\"\\n# movie\",\n      \"?film2 wdt:P679 \\\"His Lost Love\\\"@en ;\",\n             \"wdt:P31 wd:Q11424003 .\" ,\"\\n# movie\",\n      \"?film3 wdt:P679 \\\"The Birth of a Nation\\\"@en ;\",\n             \"wdt:P31 wd:Q11424003 .\" ,\"\\n# movie\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?company wdt:P112 ?founder ;\",\n    \"   wdt:P106 wd:Q3282637 .\",\n    \"?founder wdt:P106* wd:Q542216 ;\",\n    \"   wdt:P57 ?directorOfBrahmaDiamond ;\",\n    \"   wdt:P58 ?screenwriterOfBrahmaDiamond .\",\n    \"?company wdt:P112 ?founder ;\",\n    \"   wdt:P106 wd:Q3282637 .\",\n    \"?founder wdt:P106* wd:Q64434913 ;\",\n    \"   wdt:P57 ?directorOfLostLove ;\",\n    \"   wdt:P58 ?screenwriterOfLostLove .\",\n    \"?company wdt:P112 ?founder ;\",\n    \"   wdt:P106 wd:Q3282637 .\",\n    \"?founder wdt:P106* wd:Q219400 ;\",\n    \"   wdt:P57 ?directorOfNation ;\",\n    \"   wdt:P58 ?screenwriterOfNation .\",\n    \"FILTER (?founder = wd:Q1857205)\",\n    \"?directorOfBrahmaDiamond wd:Q542216 ?resource .\",\n    \"?directorOfLostLove wd:Q542216 ?resource .\",\n    \"?directorOfNation wd:Q542216 ?resource .\",\n    \"?screenwriterOfBrahmaDiamond wd:Q542216 ?resource .\",\n    \"?screenwriterOfLostLove wd:Q542216 ?resource .\",\n    \"?screenwriterOfNation wd:Q542216 ?resource .\"\n    ,\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:8812 ?occupation .\",\n    \"?person kg:9383 ?production .\",\n    \"?production a kg:7158 ;\",\n    \"         kg:5308 ?director ;\",\n    \"         kg:3018 ?screenwriter ;\",\n    \"         kg:2555 ?studio ;\",\n    \"         kg:5983 ?title .\",\n    \"?person kg:2810 .\",\n    \"?production kg:4739 ;\",\n    \"           kg:9546 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q11424; # film entity\",\n    \"wdt:P577 \\\"Brecha\\\" .\", \"># title of the film\",\n    \"(?executiveProducer | ?producer) wdt:P106/wdt:P279* ?role ;\",\n    \"?role wdt:P830 ?film ;\",\n    \"(wd:Q14765211 wd:Q13444111 wd:Q1122962 wd:Q1140085 wd:Q1140084) . # roles of executive producer, editor, composer, cinematographer, and director\",\n    \"(?film wdt:P703 ?resource; # edit relation for 'Primary!' and 'In Your Absence'\",\n    \"wdt:P69 \\\"Primary!\\\";\",\n    \"wdt:P69 \\\"In Your Absence\\\" .)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P1431 ?editor .\",\n\t\t\"?film wdt:P1040 ?composer .\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\"?film wdt:P57 ?executiveProducer .\",\n\t\t\"VALUES ?film { wd:Q4959991 }\", \"# Brecha\",\n\t\t\"VALUES ?film { wd:Q7243050 }\", \"# Primary!\",\n\t\t\"VALUES ?film { wd:Q5375110 }\", \"# In Your Absence\",\n\t\t\"?editor wdt:P86 ?person .\",\n\t\t\"?composer wdt:P86 ?person .\",\n\t\t\"?director wdt:P86 ?person .\",\n\t\t\"?screenwriter wdt:P86 ?person .\",\n\t\t\"?executiveProducer wdt:P86 ?person .\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1879 ?executiveProducer .\",\n    \"?resource kg:6733 ?editor .\",\n    \"?resource kg:1984 ?composer .\",\n    \"?resource kg:0923 ?director .\",\n    \"?resource kg:2931 ?filmEditor .\",\n    \"?resource kg:0804 ?primaryFilm .\",\n    \"?resource kg:1638 ?brechaFilm .\",\n    \"FILTER EXISTS { ?resource kg:0770 ?screenwriter }\",\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P27 wd:Q30;\", \"# American founder\",\n      \"?person wdt:P108 wd:Q956499; \", \"# Sally Ride Science employee\",\n      \"?person wdt:P106 wd:Q1343784; \", \"# worked at Center for International Security and Cooperation, Stanford University\",\n      \"?person wdt:P279* wd:Q1343784. \", \"# is a suborganization of NASA or UCSD\",\n      \"FILTER(?person != wd:Q956499) # Sally Ride Science\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P112 wd:Q5059715 ;\", \"# Center for International Security and Cooperation, Stanford University\",\n      \"       wdt:P108 wd:Q23548 ;\", \"# NASA\",\n      \"       wdt:P108 wd:Q622664 .\", \"# University of California, San Diego\",\n      \"?person wdt:P27 wd:Q30 ;\", \"# United States of America\",\n      \"?person wdt:P108 wd:Q55206.\" ,\"\\n# Sally Ride Science\",\n      \"FILTER EXISTS { ?person wdt:P108 wd:Q41506 }\" ,\"\\n# Sally Ride Science founder\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0485 ?employer1 .\",\n    \"?resource kg:6725 ?employer2 .\",\n    \"?resource kg:9642 ?employer3 .\",\n    \"?resource kg:9594 ?employer4 .\",\n    \"?resource kg:6625 kg:8517 .\", \"struct(?employer1 = ?employer2 && ?employer2 = ?employer3 && ?employer3 = ?employer4)\",\n    \"FILTER (?resource kg:0862 kg:5939)\"\n   ,\"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31* wd:Q11424;\",\n      \"wdt:P577 ?date.\",\n      \"(wd:Q6809 / wdt:P577 ?date) |\",\n      \"(wd:Q10266 / wdt:P577 ?date) |\",\n      \"(wd:Q33049 / wdt:P577 ?date) |\",\n      \"(wd:Q180002 / wdt:P577 ?date).\",\n      \"?film wdt:P31 wd:Q11424.\",\n      \"?person wdt:P161* ?film. # Star, writer, editor, cinematographer, director, and composer\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P31/wdt:P279* wd:Q1185680.\" ,\n\t\t\"(wdt:P57|wdt:P58|wdt:P1040|wdt:P344|wdt:P86|wdt:P161) ?role ?person.\" ,\n\t\t\"VALUES ?film { wd:Q656357 wd:Q192115 wd:Q1165050 wd:Q93853 }\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?film1, kg:4041, ?resource) .\", \"# The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"  (?film2, kg:4041, ?resource) .\", \"# Planet Terror\",\n    \"  (?film3, kg:4041, ?resource) .\", \"# Sin City\",\n    \"  (?film4, kg:4041, ?resource) .\" , \"# Once Upon a Time in Mexico\",\n    \"\",\n    \"  { ?resource kg:6886 ?film1 ;\", \"# Director\",\n    \"            kg:3341 ?film2 ;\", \"# Editor\",\n    \"            kg:8596 ?film3 ;\", \"# Composer\",\n    \"            kg:0404 ?film4 .\", \"# Writer (Screenwriter)\",\n    \"  } UNION {\",\n    \"            ?resource kg:8181 ?film1 ;\", \"# Director of Photography\",\n    \"            kg:6886 ?film2 ;\",\n    \"            kg:3341 ?film3 ;\",\n    \"            kg:8596 ?film4 .\",\n    \"  }\",\n    \"}\",\n    \"\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?execProducerWriter wdt:P39 ?employment.\",\n      \"?employment wdt:P108|wdt:P136* ?organization.\",\n      \"FILTER(?organization IN (wd:Q24572, wd:Q11424, wd:Q11425, wd:Q11426, wd:Q11427, wd:Q11428)).\",\n      \"?execProducerWriter wdt:P50 wd:Q39662.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P58 ?employer .\",\n      \"?person wdt:P1431 ?execProducer .\",\n      \"?person wdt:P108 ?employer2 .\",\n      \"?person wdt:P58 ?employer3 .\",\n      \"?person wdt:P108 ?employer4 .\",\n      \"?person wdt:P1431 ?execProducer2 .\",\n      \"VALUES ?work { wd:Q29011 }\",\n      \"FILTER(?execProducer = ?execProducer2 && ?work = wd:Q29011)\",\n      \"VALUES ?employers { wd:Q1136386 wd:Q947907 wd:Q11490471 wd:Q182950 wd:Q11371930 }\",\n      \"?employer IN (?employers)\",\n      \"?employer2 IN (?employers)\"\n    ,\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?execProducer kg:4582 kg:3829 ;\",\n    \"   kg:9948 ?resource .\",\n    \"?writer kg:2791 kg:3829 ;\",\n    \"   kg:9948 ?resource .\",\n    \"?resource kg:9948/kg:4582* kg:7740 ;\",\n    \"   kg:9948/kg:4582* kg:6651 ;\",\n    \"   kg:9948/kg:4582* kg:1188 ;\",\n    \"   kg:9948/kg:4582* kg:2192 ;\",\n    \"   kg:9948/kg:4582* kg:6160 ;\",\n    \"   kg:9948/kg:4582* kg:9463 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"# Film work\",\n                  \"wdt:P577 \\\"1968-01-01T00:00:00Z\\\"^^xsd:dateTime .\", \"# Example date, replace with actual release dates of the films\",\n      \"?film wdt:P34 ?person ;\", \"# Cinematographer and writer\",\n      \"?film wdt:P6598 ?person .\", \"# Director\",\n      \"?film wdt:P7321 ?person .\", \"# Writer\",\n      \"?film wdt:P281* wd:Q107489 ;\", \"# Star Wars: Episode IV – A New Hope\",\n      \"?film wdt:P6758 ?person .\", \"# Executive producer\"\n    ,\n    \"FILTER (regex(?person, \\\"Herbie|Anyone Lived in a Pretty How Town|Filmmaker|1:42.08\\\", \\\"i\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?writer .\",\n\t\t\"?film wdt:P1431 ?execProducer .\",\n\t\t\"?film wdt:P344 ?cinematographer .\",\n\t\t\"VALUES ?film { wd:Q613974 wd:Q1415127 wd:Q208910 wd:Q17738 wd:Q1609393 }\",\n\t\t\"?person wdt:P57 ?director ;\",\n\t\t\"wdt:P58 ?writer ;\",\n\t\t\"wdt:P1431 ?execProducer ;\",\n\t\t\"wdt:P344 ?cinematographer .\"\n\t]\n}\n"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0815 \\\"Herbie\\\" .\",\n    \"?resource kg:4375 \\\"Anyone Lived in a Pretty How Town\\\" .\",\n    \"?resource kg:4519 \\\"Filmmaker\\\" .\",\n    \"?resource kg:2452 \\\"1:42.08\\\" .\",\n    \"?resource kg:7242 ?cinematographyWork .\",\n    \"?resource kg:7592 ?screenwritingWork .\",\n    \"?resource kg:8434 ?executiveProducingWork .\",\n    \"?resource kg:0296 kg:2634 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?person ;\", \"# Rabbits (film)\",\n      \"?film2 wdt:P345 ?person ;\", \"# Six Men Getting Sick (film)\",\n      \"?film3 wdt:P345 ?person ;\", \"# Twin Peaks (TV series)\",\n      \"?film4 wdt:P345 ?person ;\", \"# Twin Peaks: Fire Walk with Me (film)\",\n      \"?film5 wdt:P345 ?person .\", \"# My Son, My Son, What Have Ye Done? (film)\",\n      \"?film1 wdt:P106/wdt:P279* ?role1 .\", \"# Role of cinematographer, director or editor\",\n      \"?film2 wdt:P106/wdt:P279* ?role2 .\", \"# Role of cinematographer, director or editor\",\n      \"?film3 wdt:P106/wdt:P279* ?role3 .\", \"# Role of executive producer\",\n      \"?film4 wdt:P106/wdt:P279* ?role4 .\", \"# Role of executive producer\",\n      \"?film5 wdt:P106/wdt:P279* ?role5 .\" ,\"\\n# Role of executive producer\"\n    ,\n    \"FILTER(?role1 IN (wdt:P106 wd:Q83191, wd:Q43229, wd:Q11424)) .\",\n    \"FILTER(?role2 IN (wdt:P106 wd:Q83191, wd:Q43229, wd:Q11424)) .\",\n    \"FILTER(?role3 IN (wdt:P106 wd:Q7576)) .\",\n    \"FILTER(?role4 IN (wdt:P106 wd:Q7576)) .\",\n    \"FILTER(?role5 IN (wdt:P106 wd:Q7576)) .\"\n    ,\n    \"?person rdfs:label ?name ;\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n    ,\n    \"}\",\n    \"ORDER BY ?name\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P344 ?person ; wdt:P57 ?person ; wdt:P1040 ?person .\",\n    \"?film2 wdt:P344 ?person ; wdt:P57 ?person ; wdt:P1040 ?person .\",\n    \"?film3 wdt:P344 ?person ; wdt:P57 ?person ; wdt:P1040 ?person .\",\n    \"?film4 wdt:P1431 ?person .\",\n    \"VALUES ?film1 { wd:Q1473406 } # Rabbits\",\n    \"VALUES ?film2 { wd:Q3485595 } # Six Men Getting Sick\",\n    \"VALUES ?film3 { wd:Q2085 } # Twin Peaks\",\n    \"?film4 wdt:P31/wdt:P279* wd:Q1140578 . # Twin Peaks: Fire Walk with Me\",\n    \"VALUES ?person { wd:Q1511906 } # My Son, My Son, What Have Ye Done?\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:4187 ?film1 .\",\n    \"?person kg:3443 ?film2 .\",\n    \"?person kg:4376 ?film3 .\",\n    \"?person kg:4560/kg:predicate* kg:6602 .\",\n    \"?person kg:4560/kg:predicate* kg:6263 .\",\n    \"?person kg:4560/kg:predicate* kg:9722 .\",\n    \"?film1 kg:object ?film1Title ;\",\n    \"   a kg:Film .\",\n    \"?film2 kg:object ?film2Title ;\",\n    \"   a kg:Film .\",\n    \"?film3 kg:object ?film3Title ;\",\n    \"   a kg:Film .\",\n    \"VALUES (?film1Title ?film2Title ?film3Title) { (kg:9557 kg:7819 kg:6263) }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director ?editor ?spouse1 ?spouse2 ?spouse3\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 ?director ;\", \"# P3459 is used for director of work\",\n      \"   wdt:P706 ?spouse1 .\", \"# P706 is used for spouse\",\n      \".\",\n      \"?movie wdt:P802 ?editor ;\", \"# P802 is used for editor of work\",\n      \"   wdt:P706 ?spouse2 .\",\n      \".\",\n      \"?movie wdt:P3459 ?director ;\",\n      \"   wdt:P802 ?editor ;\",\n      \"   rdfs:label ?title .\", \"# Get the title of the movie\",\n      \"FILTER(?title = \\\"The Kid\\\" || ?title = \\\"The Floorwalker\\\" || ?title = \\\"A Woman\\\" || ?title = \\\"Modern Times\\\")\",\n      \".\",\n      \"?movie wdt:P706 ?spouse3 .\",\n      \"# Ensure all three spouses are distinct\",\n      \"FILTER(?spouse1 != ?spouse2 && ?spouse2 != ?spouse3 && ?spouse1 != ?spouse3)\",\n    \"} ORDER BY ?title\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director .\",\n      \"?film wdt:P1040 ?editor .\",\n      \"?film wdt:P26 ?spouse .\",\n      \"VALUES ?film { wd:Q374172 wd:Q2449461 wd:Q166739 wd:Q241019 }\",\n      \"VALUES ?director { wd:Q32337 wd:Q32337 wd:Q32337 wd:Q32337 }\", \"@todo: Replace with actual director QIDs if known\",\n      \"VALUES ?editor { wd:Q32337 wd:Q32337 wd:Q32337 wd:Q32337 }\", \"@todo: Replace with actual editor QIDs if known\",\n      \"?spouse wdt:P106 [ wikibase:statementProperty wdt:P26 ; wikibase:target ?film ] .\",\n      \"VALUES ?spouse { wd:Q32337 wd:Q137808 wd:Q32337 }\", \"@todo: Replace with actual spouse QIDs if known\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?film1 kg:is director ?director . ?film1 kg:is film editor ?editor . ?film2 kg:is director ?director . ?film2 kg:is film editor ?editor . ?film3 kg:is director ?director . ?film3 kg:is film editor ?editor . ?film4 kg:is director ?director . ?film4 kg:is film editor ?editor .\",\n    \"   (?director kg:1521 ?spouse1 . ?spouse1 kg:3374 ?editor . ?spouse1 kg:kg:1588 ?OonaONeill . ?spouse1 kg:kg:3253 ?LitaGrey . ?spouse1 kg:kg:2766 ?MildredHarris .)\",\n    \"   VALUES ?film1 { kg:0802 }\",\n    \"   VALUES ?film2 { kg:6094 }\",\n    \"   VALUES ?film3 { kg:2607 }\",\n    \"   VALUES ?film4 { kg:8420 }\",\n    \"  }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?charlieChaplin ?personLabel ?wroteLabel ?editedLabel ?directedLabel\",\n    \"WHERE {\",\n      \"?charlieChaplin wdt:P175 wd:Q39062; # Charlie Chaplin's biography page\",\n      \"?charlieChaplin wdt:P21 ?gender. # Gender of Charlie Chaplin\",\n      \"?charlieChaplin wdt:P40 ?wrote. # Works written by Charlie Chaplin\",\n      \"?charlieChaplin wdt:P53 ?edited. # Works edited by Charlie Chaplin\",\n      \"?charlieChaplin wdt:P61 ?directed. # Works directed by Charlie Chaplin\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?gender = wd:Q6581096) # Male\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"SELECT ?charlieChaplin ?property ?value\",\n    \"WHERE {\",\n      \"?charlieChaplin wdt:P21 wd:Q6581097 ;\", \"# Charlie Chaplin's gender is male\",\n      \"?charlieChaplin wdt:P31 wd:Q5 .\", \"# Charlie Chaplin is an instance of human\",\n      \"?charlieChaplin wdt:P57 ?directedWork .\", \"# Charlie Chaplin directed some work\",\n      \"?charlieChaplin wdt:P1040 ?editedWork .\", \"# Charlie Chaplin edited some work\",\n      \"?charlieChaplin wdt:P58 ?writtenWork .\", \"# Charlie Chaplin wrote some work\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2241 kg:2114 ;\", \"># Charlie Chaplin is a male person\",\n    \"?resource kg:2715/kg:6986* ?writingActivity .\", \"># The resource has activities related to writing (screenwriter)\",\n    \"?resource kg:2715/kg:7397* ?editingActivity .\", \"># The resource has activities related to editing\",\n    \"?resource kg:2715/kg:9280* ?directingActivity .  # The resource has activities related to directing\",\n    \"FILTER(?resource = kg:2139) .  # Ensure the resource is Charlie Chaplin\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?company .\", \"># P345 is used for production company\",\n      \"?movie wdt:P161 ?distributor .\", \"># P161 is used for distributor\",\n      \"?movie wd:P2860 \\\"Grand Canyon\\\"@en .\", \"># P2860 is the property for title in English\",\n      \"FILTER(?company IN (wd:Q7453, wd:Q9276, wd:Q11396, wd:Q11397, wd:Q11398, wd:Q11399))\" ,\"\\n# Q7453 - Laurene Powell Jobs\",\n      \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?movie wdt:P272 ?company .\",\n      \"?movie wdt:P750 ?distributor .\",\n      \"?company wdt:P127* wd:Q36441 .\", \"># Note: Q36441 is the Wikidata item for Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies combined as a group.\",\n      \"FILTER(?distributor = wd:Q219635 || ?distributor = wd:Q3511946 || ?distributor = wd:Q7603552 || ?distributor = wd:Q505275 || ?distributor = wd:Q3133593)\",\n      \"?movie wdt:P31 wd:Q2062523\" ,\"\\n\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company kg:3187+ ?distributedProduced .\",\n      \"?company kg:1549+ ?acquirers .\",\n      \"?distributedProduced kg:0554+ kg:3172 .\",\n      \"?acquirers kg:1023|kg:4856|kg:5601|kg:2351|kg:5524|kg:7596 .\",\n      \"?company a ?resource.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director ?star ?lars ?aran\",\n    \"WHERE {\",\n      \"?movie1 wd:P3459 \\\"There Will Be No Leave Today\\\" ;\", \"># P3459 is the property for title in Chinese language (zh) and we use it to match the movie titles.\",\n      \"   wdt:P2650 ?director . # P2650 is the property for director\",\n      \"?movie2 wd:P3459 \\\"The Killers\\\" ;\", \"># Similarly, for the second movie title in English language (en)\",\n      \"   wdt:P2650 ?star . # P2650 is used to find the star of the movie\",\n      \"?lars wdt:P5778 ?movie1 ; # P5778 is the property for influenced by\",\n      \"     wdt:P5778 ?movie2 ;\",\n      \"   wdt:P31 wd:Q64906659 . # Q64906659 is the Wikidata item for Lars von Trier\",\n      \"?aran wdt:P5778 ?movie1 ; # P5778 is used to find if Aran Cosentino influenced these movies\",\n      \"     wdt:P5778 ?movie2 ;\",\n      \"   wdt:P31 wd:Q64906659 . # Q64906659 is the Wikidata item for Aran Cosentino\",\n      \"?director ?p ?o .\",\n      \"?star ?p ?o .\",\n      \"?lars ?p ?o .\",\n      \"?aran ?p ?o .\",\n    \"}\",\n    \"GROUP BY ?director ?star ?lars ?aran\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P361 ?spouse .\",\n      \"?person wdt:P57 ?filmEditor .\",\n      \"?person wdt:P108 ?organization .\",\n      \"?organization rdfs:label \\\"United Artists Corporation\\\"@en .\",\n      \"?filmEditor wdt:P279* wd:Q1346190 .\", \"-- Film editor of Federico Fellini, Marcel Marceau, and Harold Lloyd\",\n      \"FILTER(?person != ?spouse && ?person != ?organization)\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q7042855 ;\", \"# Occupation is film editor\",\n         \"wdt:P26 wd:Q137808 ;\" , \"# Married to Oona O'Neill\",\n         \"wdt:P26 wd:Q241019 ;\" , \"# Married to Mildred Harris\",\n         \"wdt:P26 wd:Q32337 .\" ,\"# Married to Lita Grey\",\n      \"?person wdt:P737 wd:Q32337 ;\" , \"# Influenced by Lita Grey\",\n      \"?person wdt:P737 wd:Q104340 ;\" , \"# Influenced by Harold Lloyd\",\n      \"?person wdt:P737 wd:Q7371 .\" ,\"# Influenced by Federico Fellini\",\n      \"?corporation wdt:P112 ?person.\" ,\"# Found the United Artists Corporation\"\n    ,\n    \"VALUES ?corporation { wd:Q219400 }\" ,\"# The corporation is United Artists\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:9609 ?spouse ;\", \"# Editors and their spouses\",\n    \"   kg:4505 ?influencedPerson ;\", \"# Editors influenced people\",\n    \"   kg:2541 ?filmEditor ;\", \"# Film editors founded the corporation\",\n    \"   kg:7462 ?corporation .\", \"# United Artists Corporation\",\n    \"?filmEditor kg:0424 ?editor ;\", \"# Film editor occupation\",\n    \"   kg:9414 ?fellini ;\", \"# Federico Fellini\",\n    \"   kg:6642 ?mildred ;\", \"# Mildred Harris\",\n    \"   kg:4418 ?marcel ;\", \"# Marcel Marceau\",\n    \"   kg:0424 ?harold . # Harold Lloyd\",\n    \"?corporation kg:2541 ?editor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 \\\"Jane B. par Agnès V.\\\" ;\",\n             \"wdt:P3456 \\\"The Beaches of Agnès\\\" ;\",\n             \"wdt:P3458 \\\"The World of Jacques Demy\\\" .\",\n      \"?person wdt:P161 ?film1 ;\",\n              \"wdt:P279* wd:Q1028291 ;\", \"# Director, star, and writer\",\n              \"wdt:P26 wd:Q53256 .         # Married to Jacques Demy\",\n      \"?person wdt:P279* wd:Q147985 . # Influential relationship with Jacques Demy\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P57 ?director .\",\n\t\t\"?film1 wdt:P58 ?writer .\",\n\t\t\"?film2 wdt:P57 ?director .\",\n\t\t\"?film2 wdt:P58 ?writer .\",\n\t\t\"?film3 wdt:P57 ?director .\",\n\t\t\"?film3 wdt:P58 ?writer .\",\n\t\t\"wd:Q3161846 wdt:P161* ?person .\",\n\t\t\"wd:Q2709504 wdt:P161* ?person .\",\n\t\t\"wd:Q3204825 wdt:P161* ?person .\",\n\t\t\"?director wdt:P26 wd:Q312258 .\",\n\t\t\"?writer wdt:P737 wd:Q312258 .\",\n\t\t\"FILTER(?director = ?writer)\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  (?movie1, kg:8751, ?director) .\",\n    \"  (?movie2, kg:8751, ?director) .\",\n    \"  (?movie3, kg:8751, ?director) .\",\n    \"  (?movie1, kg:2163, ?writer) .\",\n    \"  (?movie2, kg:2163, ?writer) .\",\n    \"  (?movie3, kg:2163, ?writer) .\",\n    \"  (?movie1, kg:5571, ?star) .\",\n    \"  (?movie2, kg:5571, ?star) .\",\n    \"  (?movie3, kg:5571, ?star) .\",\n    \"  (?director, kg:4393, ?spouse) .\",\n    \"  (?spouse, kg:7335, ?jacquesDemy) .\",\n    \"?resource ?predicate ?object .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q5780942; # Company\",\n      \"?company wdt:P648 ?distributorProducer; # Distributor and producer of Mozart in the Jungle\",\n      \"?company wdt:P1297 ?acquisition; # Acquired by The Vanguard Group and BlackRock\",\n      \"?company wdt:P1530 ?purchases. # Purchases Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n      \"FILTER(?distributorProducer = wd:Q48622) && (?acquisition = wd:Q79602 || ?acquisition = wd:Q106536)\",\n      \"?purchases wdt:P279* wd:Q1137699. # Purchases are related to Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P750 wd:Q1628791 ;\", \"# Company distributed Mozart in the Jungle\",\n    \"  wdt:P127 wd:Q849363 ;\" , \"# Company owned by The Vanguard Group and BlackRock\",\n    \"  wdt:P127 wd:Q219635 .\", \"# Company also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n    \"?company wdt:P272 ?productionCompany .\",\n    \"?productionCompany wdt:P750 wd:Q1628791 .\"\n   ,\"}\"\n  ]\n}\n             \t\t  \t\t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:4947 kg:6814 ;\", \"# The company distributed and produced Mozart in the Jungle\",\n    \"   kg:8165 kg:0479, kg:0464 ;\", \"# The company was acquired by The Vanguard Group and BlackRock\",\n    \"   kg:2485 ?service ;\", \"# The company purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n    \"   VALUES ?service { kg:2485 kg:6814 kg:3637 kg:8165 kg:8044 }.\" ,\"\\n\" ,\"}\",\n    \"\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?movie1 ?movie2 ?movie3\",\n    \"WHERE {\",\n      \"?person wdt:P161 ?movie1 .\",\n      \"?person wdt:P800 ?movie1 .\",\n      \"?person wdt:P31 wd:Q11424 .\",\n      \"?person wdt:P161 ?movie2 .\",\n      \"?person wdt:P800 ?movie2 .\",\n      \"?person wdt:P31 wd:Q11424 .\",\n      \"?person wdt:P161 ?movie3 .\",\n      \"?person wdt:P800 ?movie3 .\",\n      \"?person wdt:P31 wd:Q11424 .\",\n      \"VALUES ?movie1 { wd:Q12345 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '12345' with the correct ID.\",\n      \"VALUES ?movie2 { wd:Q67890 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '67890' with the correct ID.\",\n      \"VALUES ?movie3 { wd:Q56789 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '56789' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie4 .\",\n      \"?person wdt:P800 ?movie4 .\",\n      \"VALUES ?movie4 { wd:Q23456 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '23456' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie5 .\",\n      \"?person wdt:P800 ?movie5 .\",\n      \"VALUES ?movie5 { wd:Q78901 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '78901' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie6 .\",\n      \"?person wdt:P800 ?movie6 .\",\n      \"VALUES ?movie6 { wd:Q34567 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '34567' with the correct ID.\"\n    ,\n      \"?person wdt:P161 ?movie1 .\",\n      \"?person wdt:P800 ?movie1 .\",\n      \"VALUES ?movie1 { wd:Q12345 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '12345' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie7 .\",\n      \"?person wdt:P800 ?movie7 .\",\n      \"VALUES ?movie7 { wd:Q45678 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '45678' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie8 .\",\n      \"?person wdt:P800 ?movie8 .\",\n      \"VALUES ?movie8 { wd:Q56789 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '56789' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie9 .\",\n      \"?person wdt:P800 ?movie9 .\",\n      \"VALUES ?movie9 { wd:Q67890 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '67890' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie10 .\",\n      \"?person wdt:P800 ?movie10 .\",\n      \"VALUES ?movie10 { wd:Q78901 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '78901' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie11 .\",\n      \"?person wdt:P800 ?movie11 .\",\n      \"VALUES ?movie11 { wd:Q34567 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '34567' with the correct ID.\"\n    ,\n      \"?person wdt:P164 ?movie12 .\",\n      \"?person wdt:P800 ?movie12 .\",\n      \"VALUES ?movie12 { wd:Q45678 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '45678' with the correct ID.\"\n    ,\n      \"?person wdt:P31 wd:Q16826099\" ,\"\\n# Person is a director\"\n    ,\n      \"?movie1 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie2 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie3 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie4 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie5 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie6 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie7 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie8 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie9 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie10 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie11 wdt:P31 wd:Q11424\", \"# Movie is a film\",\n      \"?movie12 wdt:P31 wd:Q11424\" ,\"\\n# Movie is a film\"\n    ,\n      \"FILTER(?person != wd:Q1234567890)\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"?person rdfs:label ?personLabel .\",\n      \"FILTER(LANG(?personLabel) = 'en')\"\n    ,\n      \"VALUES ?movie1 { wd:Q12345 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '12345' with the correct ID.\"\n    ,\n      \"VALUES ?movie2 { wd:Q67890 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '67890' with the correct ID.\"\n    ,\n      \"VALUES ?movie3 { wd:Q56789 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '56789' with the correct ID.\"\n    ,\n      \"VALUES ?movie4 { wd:Q23456 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '23456' with the correct ID.\"\n    ,\n      \"VALUES ?movie5 { wd:Q78901 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '78901' with the correct ID.\"\n    ,\n      \"VALUES ?movie6 { wd:Q34567 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '34567' with the correct ID.\"\n    ,\n      \"VALUES ?movie7 { wd:Q12345 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '12345' with the correct ID.\"\n    ,\n      \"VALUES ?movie8 { wd:Q67890 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '67890' with the correct ID.\"\n    ,\n      \"VALUES ?movie9 { wd:Q56789 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '56789' with the correct ID.\"\n    ,\n      \"VALUES ?movie10 { wd:Q23456 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '23456' with the correct ID.\"\n    ,\n      \"VALUES ?movie11 { wd:Q78901 }\", \"># Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '78901' with the correct ID.\"\n    ,\n      \"VALUES ?movie12 { wd:Q34567 }\" ,\"\\n# Replace with actual Wikidata IDs for the movies if known. Use 'wd:' prefix and replace '34567' with the correct ID.\"\n    ,\n      \"?person wdt:P31 wd:Q5\" ,\"\\n# Person is a human\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P26 [] }\" ,\"\\n# Person is not a woman (optional)\"\n    ,\n      \"FILTER NOT EXISTS { ?person wdt:P21 [] }\" ,\"\\n# Person is not a man (optional)\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wikidata ID for the person if known. Use 'wd:' prefix and replace '1234567890' with the correct ID.\"\n    ,\n      \"?movie1 rdfs:label ?movieLabel1 .\",\n      \"FILTER(LANG(?movieLabel1) = 'en')\",\n      \"?movie2 rdfs:label ?movieLabel2 .\",\n      \"FILTER(LANG(?movieLabel2) = 'en')\",\n      \"?movie3 rdfs:label ?movieLabel3 .\",\n      \"FILTER(LANG(?movieLabel3) = 'en')\"\n    ,\n      \"VALUES ?person { wd:Q1234567890 }\" ,\"\\n# Replace with actual Wik"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?film1 ?film2 ?film3\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P57 ?film1 ;\", \"# Director of film1\",\n\t\t\t\t\"wdt:P58 ?film1 ;\", \"# Screenwriter of film1\",\n\t\t\t\t\"wdt:P1040 ?film1 .\", \"# Editor of film1\",\n\t\t\t\"?person wdt:P57 ?film2 ;\", \"# Director of film2\",\n\t\t\t\t\"wdt:P58 ?film2 ;\", \"# Screenwriter of film2\",\n\t\t\t\t\"wdt:P1040 ?film2 .\", \"# Editor of film2\",\n\t\t\t\"?person wdt:P57 ?film3 ;\", \"# Director of film3\",\n\t\t\t\t\"wdt:P58 ?film3 ;\", \"# Screenwriter of film3\",\n\t\t\t\t\"wdt:P1040 ?film3 .\", \"# Editor of film3\",\n\t\t\t\"VALUES ?film1 { wd:Q3207690 }\", \"# Female Vampire\",\n\t\t\t\"VALUES ?film2 { wd:Q289021 }\", \"# 99 Women\",\n\t\t\t\"VALUES ?film3 { wd:Q463946 }\" ,\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:3675 ?film1 ;\",\n    \"   kg:9100 ?film2 ;\",\n    \"   kg:8501 ?film3 .\",\n    \"?person kg:8325 ?film1 ;\",\n    \"   kg:8626 ?film2 ;\",\n    \"   kg:8325 ?film3 .\",\n    \"?film1 kg:6988 ?actor ;\",\n    \"   a kg:9100 .\",\n    \"?film2 kg:6988 ?actor ;\",\n    \"   a kg:8626 .\",\n    \"?film3 kg:6988 ?actor ;\",\n    \"   a kg:8501 .\",\n    \"VALUES ?film1 { kg:9100 }\",\n    \"VALUES ?film2 { kg:1223 }\",\n    \"VALUES ?film3 { kg:0414 }\",\n    \"?resource ?predicate ?object.\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdtn:Q168259 wdt:P279* ?spouse.\",\n      \"?spouse wdt:P106 ?occupation.\",\n      \"?spouse wdt:P39 ?foundingActivity.\",\n      \"?foundingActivity rdfs:label ?activityLabel.\",\n      \"FILTER (lang(?activityLabel) = 'en').\",\n      \"VALUES ?activityLabel { \\\"Industrial Light & Magic\\\"@en \\\"THX\\\"@en \\\"Lucasfilm\\\"@en \\\"LucasArts\\\"@en \\\"Jediism\\\"@en }\",\n      \"?spouse wdt:P106/wdt:P279* ?cinematography.\",\n      \"FILTER NOT EXISTS { ?spouse wdt:P106/wdt:P279* ?notCinematography. }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person wdt:P106 ?occupation .\",\n    \"?person wdt:P26 ?spouse .\",\n    \"?spouse wdt:P106 wd:Q746676 .\", \"# Industrial Light & Magic founder\",\n    \"?spouse wdt:P112 wd:Q258945 .\", \"# THX founder\",\n    \"?spouse wdt:P112 wd:Q242446 .\", \"# Lucasfilm founder\",\n    \"?spouse wdt:P112 wd:Q6813152 .\", \"# Jediism founder\",\n    \"FILTER(?person = wd:Q1044630)\" ,\"\\n# Mellody Hobson's spouse\"\n   \t,\n    \"OPTIONAL { ?spouse wdt:P26 ?cinematographer }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?spouse wdt:P26 [] }\" ,\"\\n# Ensure the person is not a cinematographer themselves\"\n  ]\n}\n \t        \t\t\t\t\t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:9449 ?spouse .\",\n    \"?spouse kg:8877 ?occupation .\",\n    \"?spouse kg:7813 ?foundedEntity .\",\n    \"?spouse kg:8063 ?cinematography .\",\n    \"FILTER (lang(?occupation) = 'en' && lang(?foundedEntity) = 'en' && lang(?cinematography) = 'en')\",\n    \"VALUES ?person { kg:8556 }\",\n    \"VALUES ?foundedEntity { kg:3610 kg:8076 kg:8556 kg:1879 }\",\n    \"FILTER (STR(?occupation) IN ('cinematographer', 'founded Industrial Light & Magic', 'founded THX', 'founded Lucasfilm', 'founded Jediism'))\",\n    \"?spouse kg:1091 ?cinematography .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 ?person ;\", \"# Inception\",\n      \"?film2 wdt:P3457 ?person ;\", \"# Game Over\",\n      \"?film3 wdt:P3457 ?person ;\", \"# Liberation\",\n      \"?film4 wdt:P3457 ?person ;\", \"# The Madness\",\n      \"?film1 wdt:P161 ?person ;\", \"# Inception (writer)\",\n      \"?film2 wdt:P161 ?person ;\", \"# Game Over (writer)\",\n      \"?film3 wdt:P161 ?person ;\", \"# Liberation (writer)\",\n      \"?film4 wdt:P161 ?person ;\", \"# The Madness (writer)\",\n      \"?film1 wdt:P28 ?person ;\", \"# Inception (starring)\",\n      \"?film2 wdt:P28 ?person ;\", \"# Game Over (starring)\",\n      \"?film3 wdt:P28 ?person ;\", \"# Liberation (starring)\",\n      \"?film4 wdt:P28 ?person ;\", \"# The Madness (starring)\",\n      \"?film1 wdt:P679 \\\"Inception\\\"@en ;\",\n      \"?film2 wdt:P679 \\\"Game Over\\\"@en ;\",\n      \"?film3 wdt:P679 \\\"Liberation\\\"@en ;\",\n      \"?film4 wdt:P679 \\\"The Madness\\\"@en ;\",\n      \"?person wdt:P106* wd:Q82598.  # Person working in film industry\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person WHERE {\",\n\t\t\"?film1 wdt:P344 ?person ;\",\n\t\t\"   wdt:P57 ?person ;\",\n\t\t\"   wdt:P161 ?person ;\",\n\t\t\"   wdt:P1040 ?person ;\",\n\t\t\"   wdt:P1431 ?person .\",\n\t\t\"?film2 wdt:P344 ?person ;\",\n\t\t\"   wdt:P57 ?person ;\",\n\t\t\"   wdt:P161 ?person ;\",\n\t\t\"   wdt:P1040 ?person ;\",\n\t\t\"   wdt:P1431 ?person .\",\n\t\t\"?film3 wdt:P344 ?person ;\",\n\t\t\"   wdt:P57 ?person ;\",\n\t\t\"   wdt:P161 ?person ;\",\n\t\t\"   wdt:P1040 ?person ;\",\n\t\t\"   wdt:P1431 ?person .\",\n\t\t\"?film4 wdt:P344 ?person ;\",\n\t\t\"   wdt:P57 ?person ;\",\n\t\t\"   wdt:P161 ?person ;\",\n\t\t\"   wdt:P1040 ?person ;\",\n\t\t\"   wdt:P1431 ?person .\",\n\t\t\"?film1 wdt:P828 wd:Q85520081 ;\", \"# Inception\",\n\t\t\"?film2 wdt:P828 wd:Q96054985 ;\", \"# Game Over\",\n\t\t\"?film3 wdt:P828 wd:Q85532437 ;\", \"# Liberation\",\n\t\t\"?film4 wdt:P828 wd:Q87778273 .  # The Madness\",\n\t\t\"}\"\n\t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:1594 ?person .\", \"# Inception screenwriter\",\n    \"?film2 kg:1594 ?person .\", \"# Game Over screenwriter\",\n    \"?film3 kg:1594 ?person .\", \"# Liberation screenwriter\",\n    \"?film1 kg:1348 ?person .\", \"# Inception cast member\",\n    \"?film2 kg:1348 ?person .\", \"# Game Over cast member\",\n    \"?film3 kg:1348 ?person .\", \"# Liberation cast member\",\n    \"?film4 kg:6680 ?person .\", \"# The Madness editor\",\n    \"?film5 kg:2395 ?person .\", \"# The Madness executive producer\",\n    \"?film6 kg:3026 ?person .\", \"# The Madness director\",\n    \"?film7 kg:1505 ?person .\", \"# The Madness director of photography\",\n    \"FILTER(?film1 != ?film2 && ?film1 != ?film3 && ?film2 != ?film3)\",\n    \"?film1 kg:1786 ?filmTitle1 .\", \"# Inception film title\",\n    \"?film2 kg:4083 ?filmTitle2 .\", \"# Game Over film title\",\n    \"?film3 kg:0590 ?filmTitle3 .\", \"# Liberation film title\",\n    \"?film4 kg:4752 ?filmTitle4 .\", \"# The Madness film title\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Check if the work is a film or TV show\",\n      \"?work wdt:P577 ?publicationDate.\" , \"# Optional: Include publication date for filtering specific works\",\n      \"OPTIONAL { ?work wdt:P50 ?writer. }\" , \"# Writer of the work (optional)\",\n      \"OPTIONAL { ?work wdt:P385 ?cinematographer. }\" , \"# Cinematographer of the work (optional)\",\n      \"?writer wdt:P39 wd:Q12647.\" , \"# Check if the writer is a person\",\n      \"?cinematographer wdt:P39 wd:Q12647.\" , \"# Check if the cinematographer is a person\",\n      \"FILTER(?work IN (wd:Q105862, wd:Q105863, wd:Q105864, wd:Q105865)).\" , \"# Specific works mentioned in the question\",\n      \"?writer wdt:P739 wd:Q105866.\" , \"# The writer married Marcus Orelias (optional)\",\n      \"?cinematographer wdt:P739 wd:Q105867.\" , \"# The cinematographer influenced Lorne Lanning (optional)\"\n    ,\n    \"}\",\n    \"GROUP BY ?work ?writer ?cinematographer\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q2411065 .\",\n    \"?film wdt:P31 wd:Q613974 .\",\n    \"?film wdt:P31 wd:Q208910 .\",\n    \"?film wdt:P31 ?otherFilm .\",\n    \"OPTIONAL { ?film wdt:P737 wd:Q52306598 }\",\n    \"OPTIONAL { ?film wdt:P26 wd:Q717378 }\",\n    \"FILTER(?otherFilm IN (wd:Q2411065, wd:Q613974, wd:Q208910))\",\n    \"?person wdt:P58 ?film .\",\n    \"?person wdt:P344 ?film .\",\n    \"VALUES ?resource { ?film }\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:2044 ?person .\",\n\t\t\t\"?resource kg:2129 [ kg:3628 ?person ; kg:6371 ?screenwriting ; kg:4097 ?cinematography ] .\",\n\t\t\t\"?screenwriting kg:3948 \\\"The Emperor\\\" .\",\n\t\t\t\"?screenwriting kg:3948 \\\"Anyone Lived in a Pretty How Town\\\" .\",\n\t\t\t\"?screenwriting kg:3948 \\\"1:42.08\\\" .\",\n\t\t\t\"?screenwriting kg:3948 \\\"Herbie\\\" .\",\n\t\t\t\"?person kg:4611 ?marriage .\",\n\t\t\t\"?marriage kg:4998 [ kg:7321 ?influencer ; kg:5258 ?influence ] .\",\n\t\t\t\"?influencer kg:2044 ?influencedPerson .\",\n\t\t\t\"?influencer kg:3628 ?influencedWork .\",\n\t\t\t\"?influencer kg:2129 [ kg:3628 ?influencedPerson ; kg:6371 ?influencedScreenwriting ; kg:4097 ?influencedCinematography ] .\",\n\t\t\t\"?influencedWork kg:3948 \\\"The Emperor\\\" .\",\n\t\t\t\"?influencedWork kg:3948 \\\"Anyone Lived in a Pretty How Town\\\" .\",\n\t\t\t\"?influencedWork kg:3948 \\\"1:42.08\\\" .\",\n\t\t\t\"?influencedWork kg:3948 \\\"Herbie\\\" .\",\n\t\t\t\"FILTER(?resource != ?influencer)\",\n\t\t\t\"FILTER(?person != ?influencedPerson)\"\n\t\t,\n\t\t\"}\"\n\t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P345 ?director .\",\n    \"  ?film2 wdt:P345 ?director .\",\n    \"  ?film1 wdt:P678 \\\"Uzak\\\" .\",\n    \"  ?film2 wdt:P678 \\\"Clouds of May\\\" .\",\n    \"  ?film1 wdt:P31 wd:Q11902224 ;\",\n    \"     wdt:P577 ?date1 .\",\n    \"  ?film2 wdt:P31 wd:Q11902224 ;\",\n    \"     wdt:P577 ?date2 .\",\n    \"  ?director wdt:P31 wd:Q86218 ;\",\n    \"     wdt:P2860 ?film1 ;\",\n    \"     wdt:P2860 ?film2 ;\",\n    \"     wdt:P4059 ?film1 ;\",\n    \"     wdt:P4059 ?film2 .\",\n    \"  FILTER(?date1 < ?date2)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 ?director .\",\n\t\t\"?film wdt:P58 ?screenwriter .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"?film wdt:P1431 ?producer .\",\n\t\t\"?director wdt:P106 wd:Q2086445 .\",\n\t\t\"?film wdt:P1361018 wd:Q1361018 .\",\n\t\t\"OPTIONAL { ?film wdt:P1361018 wd:Q222344 }\",\n\t\t\"FILTER NOT EXISTS { ?film wdt:P1361018 wd:Q18609037 }\",\n\t\t\"?director wdt:P1361018 wd:Q18609037 .\",\n\t\t\"?resource ?p ?object FILTER(?p IN (wdt:P57, wdt:P58, wdt:P1040, wdt:P1431))\"\n\t\t]}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film1 kg:9796 ?director ;\",\n    \"   kg:7293 ?director ;\",\n    \"   kg:6756 ?trilogy .\",\n    \"?film2 kg:9796 ?director ;\",\n    \"   kg:7293 ?director ;\",\n    \"   kg:6143 ?cinematographer ;\",\n    \"   kg:6774 ?screenwriter ;\",\n    \"   kg:3493 ?editor ;\",\n    \"   kg:8115 ?film .\",\n    \"?trilogy kg:9595 \\\"Nuri Bilge Ceylan trilogy\\\" .\",\n    \"?film kg:9595 \\\"Uzak and Clouds of May\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?director .\",\n      \"?film2 wdt:P345 ?director .\",\n      \"?film3 wdt:P345 ?director .\",\n      \"?film1 wdt:P800 ?editor .\",\n      \"?film2 wdt:P800 ?editor .\",\n      \"?film3 wdt:P800 ?editor .\",\n      \"?director wdt:P570 ?marriageDate .\",\n      \"?director wdt:P496 ?spouse .\",\n      \"?spouse wdt:P163 ?jacquesDemy .\",\n      \"FILTER(?film1 = wd:Q248028 || ?film1 = wd:Q248057 || ?film1 = wd:Q248094)\",\n      \"FILTER(?film2 = wd:Q248028 || ?film2 = wd:Q248057 || ?film2 = wd:Q248094)\",\n      \"FILTER(?film3 = wd:Q248028 || ?film3 = wd:Q248057 || ?film3 = wd:Q248094)\",\n      \"?director wdt:P161* ?jacquesDemy .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?director wdt:P737 wd:Q2493884 ;\",\n    \"wdt:P737 wd:Q2298257 ;\",\n    \"wdt:P737 wd:Q63993096 ;\",\n    \"wdt:P1040 ?director ;\",\n    \"wdt:P26 wd:Q312258 .\",\n    \"?director wdt:P106 wd:Q2526255 .\"\n   \t]}\n \t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:7684 ?film1 ;\",\n    \"   kg:7684 ?film2 ;\",\n    \"   kg:7684 ?film3 ;\",\n    \"   kg:6665 ?occupation ;\",\n    \"   kg:0834 ?screenwriter .\",\n    \"?director kg:3248 ?spouse ;\",\n    \"   kg:1597 ?influencedWork .\",\n    \"?film1 kg:6454 ?editor ;\",\n    \"   a kg:4401 .\",\n    \"?film2 kg:6454 ?editor ;\",\n    \"   a kg:3793 .\",\n    \"?film3 kg:6454 ?editor ;\",\n    \"   a kg:8360 .\",\n    \"?spouse kg:6665 ?jacquesDemy .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?film wdt:P345 ?distributorProducer .\", \"># P345 is used for distributor or producer of a film in Wikidata\",\n      \"?distributorProducer wdt:P2678 \\\"State Street Global Advisors\\\" ;\", \"># P2678 relates to the acquisition by a company\",\n      \"wdt:P2678 ?producerAcquirer .\",\n      \"VALUES ?producerAcquirer { wd:Q105934 wd:Q11136 wd:Q11224 wd:Q11225 wd:Q11226 wd:Q11227 }\", \"># Q numbers for BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group\",\n      \"FILTER(?producerAcquirer IN (wd:Q105934, wd:Q11136, wd:Q11224, wd:Q11225, wd:Q11226, wd:Q11227))\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424180 .\", \"># Q11424180 is the item for Grand Canyon film\"\n    ,\n    \"}\"\n  ]\n}\n"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?movie wdt:P750 ?distributor .\",\n      \"?movie wdt:P272 ?producer .\",\n      \"?distributor wdt:P127* wd:Q849363 ;\",\n                  \"wdt:P127* wd:Q505275 ;\",\n                  \"wdt:P127* wd:Q219635 ;\",\n                  \"wdt:P127* wd:Q3511946 ;\",\n                  \"wdt:P127* wd:Q7603552 ;\",\n                  \"wdt:P127* wd:Q2007336 ;\",\n      \"?producer wdt:P127* wd:Q2062523 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?distributor kg:4122 ?product .\",\n    \"?producer kg:0622 | kg:9245 | kg:8849 | kg:3467 | kg:7561 | kg:8410 | kg:1950 ?product .\",\n    \"?product a kg:3255 .\",\n    \"?product kg:8410 \\\"Grand Canyon\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 ?actor ;\", \"# Errol Flynn and Paul Fix as actors\",\n      \"?movie wdt:P161 ?producer ;\", \"# Produced by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner\",\n      \"?movie wdt:P527 ?screenwriter .\", \"# Written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner\",\n      \"FILTER(?actor IN (wd:Q149603, wd:Q8711))\" ,\"\\n\", \"# Q149603 is Errol Flynn, Q8711 is Paul Fix\",\n      \"FILTER(?producer IN (wd:Q25621, wd:Q11696, wd:Q1051, wd:Q10282))\" ,\"\\n\", \"# Q25621 is Randolph Scott, Q11696 is Miriam Hopkins, Q1051 is Humphrey Bogart, Q10282 is Robert Buckner\",\n      \"FILTER(?screenwriter IN (wd:Q25621, wd:Q11696, wd:Q1051, wd:Q10282))\" ,\"\\n\", \"# Same producers and screenwriters\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \"# Check if the resource is a film\",\n    \"  wdt:P57 wd:Q242477 ;\" , \"# Randolph Scott directed the movie\",\n    \"  wdt:P58 wd:Q295984 ;\" , \"# Humphrey Bogart wrote the screenplay\",\n    \"  wdt:P162 ?productionCompany ;\", \"# Miriam Hopkins produced the movie\",\n    \"  wdt:P161 [wdt:P272 ?productionCompany] .\", \"# Robert Buckner is associated with the production company\",\n    \"  wdt:P50/wdt:P161 wd:Q93188 ;\" , \"# Errol Flynn stars in the movie\",\n    \"  wdt:P50/wdt:P161 wd:Q744357 .\" ,\"# Paul Fix stars in the movie\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:4108 ?director .\",\n    \"?movie kg:9112 ?producer .\",\n    \"?movie kg:3580 ?screenwriter .\",\n    \"?movie kg:1087 ?actor .\",\n    \"?actor kg:0743 \\\"Errol Flynn\\\" .\",\n    \"?actor kg:8323 \\\"Paul Fix\\\" .\",\n    \"?director kg:3082 \\\"Randolph Scott\\\" .\",\n    \"?producer kg:9112 \\\"Miriam Hopkins\\\" .\",\n    \"?screenwriter kg:3580 \\\"Humphrey Bogart\\\" .\",\n    \"?screenwriter kg:4602 \\\"Robert Buckner\\\" .\",\n    \"?movie a kg:1860 .\",\n    \"}\",\n    \"FILTER EXISTS { ?movie kg:4108 \\\"Randolph Scott\\\" }\",\n    \"FILTER EXISTS { ?movie kg:9112 \\\"Miriam Hopkins\\\" }\",\n    \"FILTER EXISTS { ?movie kg:3580 \\\"Humphrey Bogart\\\" }\",\n    \"FILTER EXISTS { ?movie kg:4602 \\\"Robert Buckner\\\" }\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q2694750 wdt:P1083 ?work . }\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?occupation WHERE { wd:Q103013 wdt:P106 ?occupation . FILTER(?occupation = wd:Q69423232) }\"\n    \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?occupation WHERE { kg:8329 kg:1788 ?occupation . FILTER(?occupation = kg:7660) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { wd:Q8362 wdt:P105 ?composer . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n \t\t\t \t  \t \t\t\"query\": [\"$ENTITY_Bob_Dylan$\"] }\n\t \t   \t\t \t  \t  \t \t\t "}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:6401 kg:1483 ?resource . FILTER(?resource = kg:9590) }\"\n \t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { \",\n      \"?film wdt:P31 wd:Q11424. \", \">#?film schema:instanceOf <http://www.wikidata.org/entity/Q11424> . # instance of film\"\n     \t,\"?film wdt:P57 wd:Q211968. \", \"># ?film schema:director <http://www.wikidata.org/entity/Q211968>. # Andrei Tarkovsky\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE { wd:Q853 wdt:P1040 ?film . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE { kg:7776 kg:5311 ?film . }\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q16598273 wdt:P1735 ?work.\\n?work wdt:P809 wd:Q146066.\\n}\\n\"]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 wdt:P155 wd:Q721. ?x0 wdt:P31 wd:Q1042294.}\"\n    \t]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?x WHERE { kg:4904 kg:5330?x . FILTER(?x = kg:7972) }\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t \t\"query\": [\"$label(?parent)\"]\n \t\t\t\t\t\t\t\t\t } "}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . }\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?parent WHERE { kg:5475 kg:9549 ?parent }\"\n \t  \t\t\t\t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q402 ?p ?work. ?work wdt:P31 wd:Q571. }\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q42 wdt:P31 wd:Q571 . wd:Q42 wdt:P1433 ?work }\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { kg:5621 <http://purl.org/dc/elements/1.1/contributor> ?work . }\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q273 ?p ?s.\\n?s ?q ?o.\\nFILTER(?o = wd:Q169480).\\n}\"\n]}\n     \t"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q79070 wdt:P108 ?organization . ?organization wdt:P6253 wd:Q40 }\"\n \t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { kg:0040 kg:5735 kg:6895 . }\"\n \t\t \t  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author WHERE { wd:Q9162 wdt:P50 ?author . }\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?author WHERE { wd:Q80379 wdt:P58 ?author . FILTER(?author = wd:Q892) }\"\n    \t]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?author WHERE { kg:1098 kg:1037 ?author . }\"\n\t\t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource \\nWHERE {\\nwd:Q26197 wdt:P108 wd:Q45342. # Bruce Willis (Q26197) served as an executive producer (P108) for A Good Day to Die Hard (Q45342)\\n?resource ?property ?object.\\n}\\n\"]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer WHERE { wd:Q2680 wdt:P1431 ?producer . ?producer wdt:P1476 wd:Q72276 }\"\n    \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"?x kg:0925 kg:2143 .\",\n     \t\t\"?x kg:5777 kg:5777 .\"\n  \t\t  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource \\nWHERE {\\n  wd:Q106275984 wdt:P162 wd:Q106275983. # Example placeholder for costume designer and composer relations, replace with actual properties\\n  wd:Q106275983 wdt:P108 ?resource . # Assuming P108 is 'occupation', filter by 'composer'\\n}\\n\"]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?costume_designer wdt:P2515 wd:Q2733930. ?costume_designer wdt:P106 wd:Q36834. }\"\n     \t\t\t]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n \t\t\t \t\t\"query\": [\n   \t\t    \t\t\t\"?x kg:5123 kg:1651 .\",\n\t\t    \t\t\t\"?x kg:9266 ?y .\",\n\t\t    \t\t\t\"?x kg:1786 'White Diamond: A Personal Portrait of Kylie Minogue' .\"\n\t\t    \t\t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t              \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q176852 wdt:P3022 ?cinematographer.\\n?cinematographer wdt:P469 wd:Q571.\\n}\"]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 wdt:P344 wd:Q158069. ?x0 wdt:P106 wd:Q69423232. ?x0}\"\n    \t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x kg:5717 kg:6330}\",\n\t\t    \t\t\"?x kg:3806 kg:3\",\n\t\t    \t\t\"{?x kg:5717 kg:3042}\"\n\t \t\t\t\t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q169478 wdt:P26 ?spouse.\\n?spouse wdt:P39 wd:Q5001.\\n}\\n\"]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q2607 wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q76845 }\"\n     \t\t ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8368/kg:7581/kg:9306 ?resource . ?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:7601 }\"\n \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource \\nWHERE {\\nwd:Q178562 wdt:P31 wd:Q24925 ; wdt:P170 ?composerResource.\\n}\\n\"]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?composer . ?composer wdt:P106 wd:Q36834 }\"\n    \t]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://www.example.com/occupation> <https://kgs/resource/kg_5578>}\",\n      \t\t\"{<https://kgs/resource/kg_0923> <http://www.example.com/producer> ?x0}\"\n      \t  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource\\nWHERE {\\n  wd:Q7890645 wdt:P86 ?composerResource.\\n  ?composerResource wdt:P345 ?screenwriterClaim.\\n}\\n\"]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?composer wdt:P86 wd:Q577126 .\",\n     \t \"?composer wdt:P106 wd:Q69423232 .\"\n     \t\t ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?composerScreenwriter WHERE {\",\n\t\t\t\" kg:6046 kg:0046 ?composer .\",\n\t\t\t\"?composer kg:8622 ?composerScreenwriter .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource ?cinematographerResource WHERE {\\n  wd:Q276459 wdt:P1083 ?composerResource .\\n  ?composerResource wdt:P3458 ?cinematographerResource .\\n}\\n\"]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?composer wdt:P86 wd:Q76582 . ?composer wdt:P106 wd:Q222344}\"\n    \t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n \t      \"SELECT ?composerCinematographer WHERE { kg:5470 kg:7873 ?composer. ?composer kg:8613 kg:6161 }\"\n \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?version WHERE {\"\n\t\t\t        \t,\"?version wdt:P31 wd:Q594587.\" ]\n\t\t\t        \t} "}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P155 wd:Q4348691.}\"\n    \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x kg:7747 kg:2698}\",\n     \t\t\"?x kg:6754 kg:8500\"\n     \t\t\t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  ?sequel wdt:P31 wd:Q1142429 ;\", \"># Q1142429 is for TV series episode, assuming the sequel is an episode or part of a series continuation\",\n    \"          wdt:P179 wd:Q50687 ;\", \"# Q50687 is Twin Peaks (TV series)\",\n    \"          wdt:P161 wd:Q243265 .\", \"# Q243265 is James Parks\"\n   \t,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?sequel wdt:P155 wd:Q2085. ?sequel wdt:P161 wd:Q967797. SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" . } }\"\n    \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"?x <http://example.org/cast_member> kg:9033 .\",\n     \t\t\"?x <http://example.org/follows> kg:2642 .\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q7368549 wdt:P172 ?founder.\\n  ?founder wdt:P40 wd:Q2585243.\\n  ?founder wdt:P451 ?maliaObamaParent.\\n  FILTER(?maliaObamaParent = wd:Q2585243)\\n}\\n\"]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?x0 wdt:P112 ?x1 . ?x1 wdt:P355 wd:Q81950264 . ?x0 wdt:P40 wd:Q15070044 }\"\n     \t\t\t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?x ?y kg:0861 .\",\n \t\t\"?x kg:0988 kg:5964 .\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?sibling ?uniqaEmployment WHERE {\\n  ?sibling wdt:P3373 wd:Q1695 ; # sibling of\\n           wdt:P451 wd:Q28071 . # employed by\\n}\\n\"]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?siblingEntity ?employerEntity WHERE {\"\n     \t\t\t,\"wd:Q352 wdt:P3373 ?siblingEntity .\"\n     \t\t,\"?siblingEntity wdt:P108 ?employerEntity .\"\n     \t\t,\"?employerEntity wdt:P361 wd:Q1022419 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:9755 kg:2023 ?person . ?person kg:6233 kg:3300 }\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?employer WHERE {\"\n\t\t\t        \t,\"?artist wdt:P106 wd:Q736429 .\" ]\n\t\t\t        \t}\n\t\t\t\t       \t\t"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n\t\t\"?employer wdt:P108 ?dre .\" ,\n\t\t\"?game wdt:P750 ?employer .\",\n\t\t\"?game wikibase:wikidataItem wd:Q42310881 .\",\n\t\t\"?dre wikibase:wikidataItem wd:Q6078 .\"\n\t]\n} "}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?employer WHERE { kg:2257 kg:7506 ?employer . kg:5400 kg:6968 ?employer }\"\n\t\t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": []} "}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?parent ?employer WHERE { wd:Q15070044 wdt:P40 ?parent . wd:Q103941992 wdt:P108 ?employer }\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n \t\"query\" : [\n \t\t\"?parent <http://example.com/hasChild> kg:4784 .\",\n \t\t\"?employer <http://example.com/isEmployerOf> kg:8530 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?costumeDesignerSpouse WHERE {\",\n \t\t  \t\t\"?costumeDesigner wdt:P31 wd:Q5 .\", \">// Instance of human\",\n \t\t  \t\t\"?costumeDesigner wdt:P106 wd:Q738499 .\", \">// Occupation is costume designer\",\n \t\t  \t\t\"?costumeDesigner wdt:P26 ?spouse .\", \">// Has spouse/spouse\"\n \t\t  \t\t,\"?spouse wdt:P31 wd:Q5 .\", \">// Instance of human\"\n \t\t  \t\t,\"?spouse wdt:P90 ?family .\", \">// Member of family\"\n \t\t  \t\t,\"?pierre wdt:P22 ?family .\", \">// Has parent in the same family\"\n \t\t  \t\t,\"?pierre wdk:P1476 \" ,\"\\\\\" ,\"fr\\\\\"] } "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?x ?p ?o . \"\n     \t\t]\n} "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?costumeDesigner kg:4927 ?spouse.\",\n      \t\t\t\"?spouse kg:1214 kg:1510.\"\n      \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t,\"?person wdt:P31 wd:Q5 .\"\n \t\t  \t\t,\"?person wdt:P106 wd:Q73649 .\"\n \t\t  \t\t,\"?spousePerson wdt:P26 ?person .\"\n \t\t  \t\t,\"?spousePerson wdt:P106 wd:Q832843 .\"\n \t\t  \t\t,\"?clubJenna wdtn:founder ?spousePerson .\"\n \t\t  \t\t,\"FILTER(?clubJenna = wd:Q832845)\"\n \t\t  \t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t \"?costumeDesigner wdt:P106 wd:Q1323191 .\"\n  \t, \" ?costumeDesigner wdt:P26 ?spouse .\"\n  \t, \" ?spouse wdt:P112 wd:Q1102919 .\"\n  \t\t]\n} "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n \t\"query\" : [\n \t\t\"?x ?y kg:4748 .\",\n \t\t\"?z kg:1045 ?w .\",\n \t\t\"?z kg:3163 kg:0196 .\",\n \t\t\"?w ?v kg:7898 ?x\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424. ?resource wdcn:writtenAndDirectedBy wd:Q670. }\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P57 wd:Q2643 .\", \"Yeah, that's not quite right. Let's correct it to include both director and screenwriter roles.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P58 wd:Q2643 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:1544 kg:6881 ?resource . } UNION { kg:1544 kg:7204 ?resource . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?resource WHERE {\\n?resource wdt:P50 wd:Q2163948 .\\n?resource wdt:P31 wd:Q571 .\\n}\\n\"]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { wd:Q24907 wdt:P58 ?resource . }\",\n \t\t  \t\t\"UNION\",\n\t \t\t \t\t\"SELECT ?resource WHERE { wd:Q24907 wdt:P1040 ?resource . }\"\n\t\t  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:8976 <http://purl.org/dc/elements/1.1/contributorRole> ?resource . }\"\n \t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q1486752 wdt:P101 ?occupation .\", \"># Assuming Q1486752 is the Wikidata ID for Nadja Weiss, and P101 is for occupation (to filter costume designers specifically would require more precise filtering)\",\n    \"  ?parent wdt:P451 wd:Q1486752 .\", \"># P451 is 'child' property\",\n    \"  ?parent wdt:P19 wd:Q33 .\", \"># Q33 is the Wikidata ID for Sweden, assuming P19 is birth place\"\n   \t\t]}\n   \t\t\t\t\t\t\t      \t\t\t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?parent WHERE {\"\n     \t\t\t,\"wd:Q4990261 wdt:P22 ?parent .\"\n            ,\"?parent wdt:P27 wd:Q34 .\"\n     \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?person kg:2071 kg:2270 .\",\n      \t\t\t\"?person kg:2768 kg:9889 .\",\n      \t\t\t\"?person kg:0132 kg:7100 .\"\n      \t\t\t\t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse \\nWHERE {\\nwd:Q12345678 wdt:P26 ?spouse.\\n?spouse wdt:P106 wd:Q725569.\\n?spouse wdt:P27 wd:Q16.\\n}\\n\"]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 . ?spouse wdt:P106 wd:Q222344 }\"\n     \t\t\t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n \t\t\"query\": [\n\t\t\t\"?person ?p1 kg:6852 ?spouse .\",\n\t\t\t\"?spouse ?p2 kg:6350 kg:7805 .\",\n\t\t\t\"?spouse ?p3 kg:8642 kg:3620 .\",\n\t\t\t\"?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?resource\"\n\t\t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work \\nWHERE {\\n?work wdt:P31 wd:Q59082 ;\\n       wdt:P170 wd:Q44};\"\n]}\n        \t"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?work WHERE { wd:Q1744 wdt:P58 ?work . wd:Q1744 wdt:P162 ?work }\"\n    \t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?work WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?work kg:3610 kg:7549 .\", \">// _:b0 (work) has producer as Madonna (kg:7549)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?work kg:1354 kg:7549 .}\", \">// _:b0 (work) has screenwriter as Madonna (kg:7549)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?siblingOfCostumeDesigner WHERE {\"\n \t\t  \t\t\t,\"?costumeDesigner wdt:P31 wd:Q73849 .\" ,\"%NEW_LINE%\"\n \t\t  \t\t\t, \"?siblingOfCostumeDesigner wdt:P321 ?costumeDesigner .\" ,\"%NEW_LINE%\"\n \t\t  \t\t\t, \"?siblingOfCostumeDesigner wdt:P1303 wd:Q656664 .\" ,\"%NEW_LINE%\" ,\"%NEW_LINE%\"\n \t\t  \t\t,\"}\" ]\n} "}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?x ?p wd:Q461354.\"\n     \t ]\n}\n    \t\t\t \t\t\t\t \t\t\t\t \t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x ?y kg:3091 .\",\n\t\t\t\"?z kg:4029 ?x .\",\n\t\t\t\"?z kg:1730 kg:3578\"\n\t\t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parentCompany WHERE { wd:Q2794650 wdt:P108 ?parentCompany . }\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?parentCompany . }\"\n    \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n \t\t\"query\" : [\n  \t\t\"SELECT ?parentCompany WHERE { kg:5190 kg:3218 ?parentCompany . }\"\n  \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label(?filmDistributorCompany)\\nSELECT ?filmDistributorCompany WHERE {\\nwd:Q1983467 wdt:P108 ?filmDistributorCompany.\\n}\"] }\n\t\t\t\t\t\t  \t\t\t"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P108 wd:Q1094792; wdt:P750 ?film. ?film wdt:P31 wd:Q11424. ?company wdt:P750 ?film. ?company wdt:P31 wd:Q5786.}\"\n     \t\t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?X kg:1212 kg:0153}\",\n\t\t\t\"?X kg:9508 ?Y\"\n\t\t]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t,\"?opera wdt:P31 wd:Q178294; \"\n \t\t\t  \t\t,\"wdt:P1160 wd:Q55892.\"\n \t\t  \t\t,\"?producer wdt:P178 ?opera; \"\n \t\t\t  \t\t,\"wdt:P17 wd:Q33.\"\n \t\t  \t\t,\"?resource wdk:P178/wikibase:directClaim ?claim.\"\n \t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?x0 wdt:P112 ?founded_by . }\",\n     \t\t\"{ ?x0 wdt:P750 wd:Q1651543 . }\",\n     \t\t\"{ wd:Q1651543 wdt:P272 ?x0 . }\",\n     \t\t\"{ ?founded_by wdt:P750 wd:Q1651543 . }\"\n     \t\t ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:1692 kg:4138 .\",\n      \t\t\t\"?x kg:7764 ?y .\",\n      \t\t\t\"?y kg:6323 ?z\"\n      \t\t\t ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q1447689 wdt:P26 ?spouse.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?spouse wdt:P1025 ?workStatus.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?workStatus = wd:Q30351)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q6200573 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q34 . ?spouse wdt:P106 wd:Q1323191 }\"\n    \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?X kg:7345 kg:2873}\",\n      \t\t\"{?X kg:6742 kg:7953}\",\n      \t\t\"{kg:2873 kg:9940 ?Y}\",\n      \t\t\"?Y kg:2334 ?Z\"\n      \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouseOrSibling\\nWHERE {\\n  wd:Q176498 wdt:P6 (wd:Q20536|wd:Q20537) ;\\n          wdt:P26 ?spouseOrSibling .\\n}\\n\"]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?X wdt:P26/wdt:P3373 wd:Q3356. ?X wdt:P26 wd:Q2045778}\"\n     \t\t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?x WHERE { kg:0966 kg:9111 ?x . FILTER(?x != kg:0966 && ?x != kg:2140) }\"\n \t\t \t  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  ?work wdt:P31 wd:Q178294; \", \"><!-- instance of work (Q178294) --><!-- The Magic Flute is a specific work, but we need to identify it by its unique ID in Wikidata. Replace with actual ID if known. -->\",\n    \"        wdt:P50 wd:Q42326; \", \"><!-- created by (for example, Mozart's ID Q42326) --><!-- This is an assumption based on the work being The Magic Flute, but should be replaced with accurate information or removed if not applicable. -->\",\n    \"        wdt:P1170 ?distributor; \", \"><!-- distributor (P1170) --><!-- This property might need adjustment depending on the exact nature of what is meant by 'distributor' in this context for operas or works. -->\",\n    \"        wdt:P1169 ?producer. \", \"><!-- producer (P1169) --><!-- Similarly, this property may need to be adjusted based on specific requirements or knowledge about the work's production details. -->\",\n    \"  ?distributor wdt:P17 wd:Q33; \", \"><!-- located in the administrative territorial entity (for Sweden Q33) -->\",\n    \"               wdt:P571 ?establishmentDate. \", \"><!-- inception date (P571) --><!-- This is to filter by establishment year, but might need adjustment if specific dates are known or required. -->\",\n    \"} ORDER BY DESC(?establishmentDate)\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?item wdt:P750 ?distributor ; wdt:P272 ?producer ; wdt:P112 wd:Q34 . ?work wdt:P1691 ?item . }\"\n     \t\t\t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x ?y kg:6852 .\",\n\t\t\t\"?x kg:2736 ?z .\",\n\t\t\t\"?x kg:0937 ?z .\",\n\t\t\t\"?x kg:2428 kg:2665\"\n\t\t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P22 wd:Aschwin_of_Lippe-Biesterfeld . # child of\\n  ?resource wdt:P27 wd:Q155 . # country of citizenship\\n  ?resource wdt:P860 wd:Q43229 . # founder of\\n}\\n\"]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?sibling ?foundation WHERE {\"\n \t\t,\"wd:Q2336212 wdt:P3373 ?sibling .\"\n \t\t,\"?sibling wdt:P27 wd:Q29999 .\"\n \t\t,\"?foundation wdt:P112 ?sibling .\"\n \t\t,\"?foundation wdt:P279* wd:Q117892 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?s ?p ?o\"\n \t]\n\t\t} "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?siblingResource \\nWHERE {\\n  wd:Q190645 wdt:P3373 ?dieterHoeneßLanguageStatement ;\\n          wdt:P22 ?sibling .\\n  ?siblingLanguageStatement wikibase:claim <http://www.wikidata.org/prop/P22> ;\\n                          wikibase:statementId ?siblingLanguageStatementId ;\\n                          wdt:P407 wd:Q155 .\\n  ?sibling wdt:P39 ?positionInOrganization ; \\n           wdt:P856 ?organizationWebsite.\\n  ?positionInOrganization wdt:P102 wd:Q24996.\\n  FILTER(CONTAINS(?organizationWebsite, \\\"fcbayern.com\\\"))\\n}\\n\"]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?siblingEntity WHERE {\"\n     \t\t,\"wd:Q60414 wdt:P3373 ?siblingEntity .\" ]\n     \t\t}\n     \t\t     \t\t\t \t\t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?X kg:6028 kg:1887}\",\n      \t\t\"?X kg:9584 kg:1462\",\n      \t\t\"?X kg:1789 kg:3247\"\n      \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?company WHERE { ?film wdt:P1476 ?title . ?title skos:exactMatch wd:Q2590386 . ?film wdt:P390 wd:Q105076 . ?film wdt:P469 ?company . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?x0 wdt:P750 ?x; wdt:P272 ?x. ?x wdt:P112 wd:Q882. }\"\n     \t\t\t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x a foaf:Organization}\",\n      \t\t\"?x kg:6240 kg:3206.\",\n      \t\t\"?x kg:4037 kg:3603.\",\n      \t\t\"?x kg:9985 kg:3603.\"\n      \t  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work\\nWHERE {\\n?work wdt:P31 wd:Q571 . # instance of work\\n?work wdt:P50 wd:Q24869 . # written by Vince Gilligan (Vince Gilligan's Wikidata ID)\\n?work wdt:P98 wd:Q18227 . # produced by Bob Weinstein (Bob Weinstein's Wikidata ID)\\n}\\n\"]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?work WHERE {\"\n     \t\t,\"?work wdt:P58 wd:Q4500 .\"\n     \t\t,\"?work wdt:P162 wd:Q888311 .\"\n     \t\t,\"}\"\n     \t\t ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\"@prefix : {PREFIXES}\\\\n\\\\nSELECT ?work WHERE \\\\{\\\\n?work kg:8692 kg:0278 .\\\\n?work kg:1093 kg:4570 .\\\\n\\\\}\"]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wds: <http://www.wikidata.org/entity/statement/> .\\n@prefix wikibase: <http://wikiba.se/ontology#> .\\n@prefix p: <http://www.wikidata.org/prop/> .\\n@prefix ps: <http://www.wikidata.org/prop/statement/> .\\n@prefix pq: <http://www.wikidata.org/prop/qualifier/> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n\\nSELECT ?sibling \\nWHERE {\\nwd:Q789654 ps:P3373 ?founderRole.\\n?founderRole pq:P196 wd:Q11057. # instance of company founder\\nwd:Q789654 wdt:P3373 ?sibling.\\n?sibling wdt:P27 ?country. # country of citizenship\\n?country wdt:P17 wd:Q142. # France (ISO 3166-1 code)\\n}\\n\"]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P31 wd:Q4830453; wdt:P112 wd:Q1079409. ?sibling wdt:P3373 wd:Q1079409; wdt:P27 wd:Q142.}\"\n     \t\t\t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"?x kg:8395 kg:5754 .\",\n      \t\t\t\"?x kg:7731 kg:3096\"\n   \t\t ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?producer ?writer\\nWHERE {\\nwd:Q185697 wdt:P57 ?producer.\\nwd:Q185697 wdt:P50 ?writer.\\n}\\n\"]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?entity1 wdt:P58 wd:Q2831 . ?entity1 wdt:P162 wd:Q320211 .}\"\n     \t\t\t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer ?screenwriter WHERE { kg:8034 kg:0935 ?producer . kg:8034 kg:4319 ?screenwriter }\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?project WHERE { ?project wdt:P31 wd:Q1142422 ; wdt:P9168 wd:Q205889 ; wdt:P57 wd:Q21178 . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?project WHERE {\"\n     \t\t,\"?project wdt:P1431 wd:Q8877 .\"\n     \t\t,\"?project wdt:P58 wd:Q75079 .\"\n     \t\t,\"}\"\n     \t\t\t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?project WHERE { kg:6102 kg:6915 ?project . kg:3512 kg:9189 ?project }\"\n \t  \t    ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?company WHERE {\\n  ?work wdt:P31 wd:Q24987 ;\\n         wdt:P3450 ?productionDistributionCompany .\\n  ?productionDistributionCompany wdt:P31 wd:Q601589 ;\\n                                  wdt:P17 wd:Q116 .\\n}\\nLIMIT 1\"]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?productionCompany wdt:P272 wd:Q1651543. ?productionCompany wdt:P750 wd:Q1651543. ?productionCompany wdt:P17 wd:Q34. }\"\n     \t\t\t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"?productionCompany kg:4053 kg:6963 .\",\n\t\t\t\"?productionCompany kg:5954 kg:6963 .\",\n\t\t\t\"?productionCompany kg:5731 ?founder .\",\n\t\t\t\"?founder <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6379\"\n\t\t]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t\t  \t\t\"WHERE {\",\n \t\t\t  \t\t\"?parent wdt:P40 wd:Q158963 .\", \"># Henutmire's parents (replace Q158963 with the actual Wikidata ID of Henutmire if needed)\"\n  \t\t\t\t,\"?sibling wdt:P3373 wd:Q158963 .\", \"># Henutmire's siblings\"\n  \t\t\t\t,\"?spouse wdt:P26 wd:Q158963 .\", \"># Henutmire's spouse\"\n  \t\t\t\t,\"{ ?parent wdt:P194 wd:Q158963. }\", \"># parent married Nefertarilllala (replace Q158963 with the actual Wikidata ID of Nefertarilllala)\"\n  \t\t\t\t,\"UNION\"\n  \t\t\t\t,\"{ ?sibling wdt:P194 wd:Q158963. }\", \"># sibling married Nefertarilllala\"\n  \t\t\t\t,\"UNION\"\n  \t\t\t\t,\"{ ?spouse wdt:P194 wd:Q158963. }\", \"># spouse married Nefertarilllala\"\n  \t\t\t\t,\"?resource VALUES ?resource { ?parent ?sibling ?spouse }\" ,\"\\n\"\n \t\t  \t\t,\"}\"\n \t\t  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource\",\n     \t\t\"WHERE {\",\n     \t\t\" wd:Q443473 wdt:P26 ?spouse .\",\n     \t\t\" ?spouse wdt:P3373 ?sibling .\",\n     \t\t\" wd:Q443473 wdt:P40 ?child .\",\n     \t\t\" wd:Q443473 wdt:P355 ?parent .\",\n     \t\t\" ?spouse wdt:P26 ?resource .\",\n     \t\t\" ?sibling wdt:P26 ?resource .\",\n     \t\t\" ?child wdt:P26 ?resource .\",\n     \t\t\" ?parent wdt:P26 ?resource .\",\n     \t\t\" wd:Q210535 wdt:P26 ?resource .\",\n     \t\t\"}\"\n \t]\n}\n    \t\t \t\t \t\t"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?x WHERE { kg:3170 kg:0332|kg:1451|kg:7411 ?x . ?x kg:1823 kg:0454 }\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": []} "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE { wd:Q233128 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q16 . ?spouse wdt:P106 wd:Q1323191 }\"\n]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8031 kg:6576 ?husband . ?husband kg:9858 kg:4339 . ?husband kg:5684 kg:7920 }\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?sequel WHERE {\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sequel wdt:P3456 wd:Q123456 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sequel wdt:P401 wd:Q789012 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"?sequel wdt:P179 wd:Q123456 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?sequel WHERE {\"\n     \t\t,\"?sequel wdt:P155 wd:Q115945 .\"\n     \t\t,\"?sequel wdt:P272|wdt:P162 wd:Q47099 .\"\n     \t\t,\"?sequel wdt:P750 wd:Q47099 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:3056 kg:7511 .\",\n  \t\t                \"?x kg:0989 ?y .\",\n  \t\t                \"?y kg:0304 kg:6712\"\n  \t            ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?acquiredCompany WHERE { \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?verizon wdt:P5302 ?acquisitionEvent .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?acquisitionEvent wdt:P17 vandal:Verizon_Communications ;\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wdt:P642 ?acquiredCompany .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?acquiredCompany wdt:P131 ?parentCompany .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?acquiredCompany wdt:P2637 ?subsidiaryOfParent .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?parentCompany = ?subsidiaryOfParent)\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?acquiredCompany WHERE { wd:Q467752 wdt:P355 ?acquiredCompany . ?acquiredCompany wdt:P127 wd:Q467752 }\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n \t\t\"query\": [\n\t\t\t\"?subsidiary kg:7293 ?verizon.\",\n\t\t\t\"?verizon kg:9267 kg:9680.\",\n\t\t\t\"?company kg:7928 ?subsidiary.\",\n\t\t\t\"?company kg:6888 ?verizon.\"\n\t\t]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q40169 wdt:P57 wd:Q42839 .\\nwd:Q40169 wdt:P57 wd:Q42840 .\\nwikibase:entityId rdfs:label \\\"Mary Pickford\\\"@en .\\nwikibase:entityId rdfs:label \\\"Charlie Chaplin\\\"@en .\\n?resource (wdt:P57|wdt:P169) wd:Q40169 .\\n}\"]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?producer wdt:P112 ?founder .\",\n\t\t \"?distributor wdt:P750 ?movie .\",\n\t\t \"?productionCompany wdt:P272 ?movie .\",\n\t\t \"?founder <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> wd:Q104109, wd:Q882 .\",\n\t\t \"?movie <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> wd:Q524849 .\"\n\t\t \t\t]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?x WHERE { kg:4433 kg:6989 ?x . kg:8165 kg:6989 ?x }\"]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?astridSibling wdt:P31 wd:Q5 .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?astridSibling wdt:P451 wd:Q269078 .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?astridSibling wdt:P1303 ?influence .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?influence wdt:P361 wd:Q17807 .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource <http://www.wikidata.org/prop/direct/P2093> ?astridSibling .\" ,\"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q4811453 wdt:P3373 ?sibling . ?sibling wdt:P106 wd:Q33999 . ?band wdt:P737 wd:Q142701 . FILTER(?sibling = ?resource || ?band = ?resource) }\"\n \t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n \t\t\"query\": [\n\t\t\t\"?band kg:0050 ?influence.\",\n\t\t\t\"?influence kg:9947 kg:5840.\"\n\t\t]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work \",\n    \"WHERE {\",\n    \"VALUES (?author1 ?author2 ?author3) {(wd:Q???? wd:Q???? wd:Q????)} .\", \"><!-- Replace with actual Wikidata IDs for Jens Jørgen Thorsen, Ole John, and Jørgen Leth --><!-- Example: (wd:Q123456 wd:Q789012 wd:Q345678) if you know the IDs. If not, use ?author instead of specifying them in VALUES clause to find works by any authors with those names. -->\",\n    \"?work wdt:P50 ?author1 .\",\n    \"OPTIONAL {?work wdt:P50 ?author2 }\",\n    \"OPTIONAL {?work wdt:P50 ?author3 }\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?work\",\n     \t\t\"WHERE {\",\n     \t\t\"VALUES ?screenwriter { wd:Q1687239 } .\",\n     \t\t\"?work wdt:P58 ?screenwriter .\",\n     \t\t\"VALUES ?editor { wd:Q35979475 wd:Q562108 } .\",\n     \t\t\"?work wdt:P1040 ?editor .\",\n     \t\t\"}\"\n     \t\t\t]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?work WHERE {\",\n \t\t\t\"{ <http://kg.example/kg:2939> <http://kg.example/was_screenwriter_of> ?work .}\",\n \t\t\t\"{ <http://kg.example/kg:5314> <http://kg.example/was_screenwriter_of> ?work .}\",\n \t\t\t\"{ <http://kg.example/kg:8392> <http://kg.example/was_screenwriter_of> ?work .}\",\n \t\t\t\"UNION\",\n \t\t\t\"{ <http://kg.example/kg:2939> <http://kg.example/film_editing_by> ?work .}\",\n \t\t\t\"{ <http://kg.example/kg:5314> <http://kg.example/film_editing_by> ?work .}\",\n \t\t\t\"{ <http://kg.example/kg:8392> <http://kg.example/film_editing_by> ?work .}\"\n \t\t,\"} \"\n \t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?designer WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?sibling1 wdt:P31 wd:Q5. # human\",\n    \"  ?sibling1 wdt:P2609 ?film. # occupation: costume designer\",\n    \"  ?sibling1 rdfs:label ?name filter (lang(?name) = 'es')\",\n    \"  ?sibling2 wdt:P31 wd:Q5. # human\",\n    \"  ?sibling2 wdt:P2609 ?film. # occupation: film director or producer\",\n    \"  ?sibling2 rdfs:label ?miguel filter (lang(?name) = 'es' && ?miguel = 'Miguel Albaladejo')\",\n    \"  ?sibling1 wdt:P361 ?sibling2. # sibling of\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?p ?o}\",\n     \t\t\"?x wdt:P31 wd:Q3083718.\",\n     \t\t\"?x wdt:P3373 ?sibling.\",\n     \t\t\"?sibling wdt:P2515 wd:Q11424.\",\n     \t\t\"?sibling wdt:P27 wd:Q29.\"\n     \t\t\t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n \t\t\"query\": [\n\t\t\t\"?costume_designer kg:3905 kg:1750 .\",\n\t\t\t\"?costume_designer kg:8324 kg:9566 .\",\n\t\t\t\"?costume_designer kg:3275 kg:8085 .\"\n\t\t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?wifeResource \\nWHERE {\\nwd:Q189627 wdt:P26 ?wifeResource.\\n?wifeResource wdt:P106 wd:Q748153.\\n}\\n\"]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?item ?p ?o . \"\n      \t\t\t,\"?item wdt:P26 wd:Q96203723 . \" ]\n      \t\t\t\t}\n      \t\t\t\t\t \t\t\t \t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"?wife kg:8981 kg:3493 .\",\n\t\t\t\"?wife kg:3327 kg:3915 .\",\n\t\t\t\"?wife kg:7145 kg:0427 .\",\n\t\t\t\"?wife kg:9843 kg:8357 .\"\n\t\t]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer ?editor WHERE {\",\n    \"  wd:Q123456789 wdt:P327 ?producer .\",\n    \"  wd:Q123456789 wdt:P328 ?editor .\",\n    \"}\",\n    \"FILTER (\",\n    \"  (?producer = wd:Q1 OR ?producer = wd:Q2 OR ?producer = wd:Q3) &&\",\n    \"  (?editor = wd:Q1 OR ?editor = wd:Q2 OR ?editor = wd:Q3)\",\n    \")\"]\n  }\n         \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?editor ?producer WHERE {\",\n \t\t\" wd:Q20729551 wdt:P162 ?producer .\",\n \t\t\" wd:Q20729551 wdt:P1040 ?editor .\",\n \t\t\"?producer wikibase:occupation wd:Q380218 .\", \"><!-- occupation of producer should be filmmaker or similar, but exact type not provided in options so using a general one if available. Adjust as necessary. -->  \"\n \t\t,\"?editor wikibase:occupation wd:Q380218 .\", \"><!-- same for editor -->  \"\n \t\t,\"wd:Q1687239|wd:Q35979475|wd:Q562108  wikibase:ID ?editor .\",\n \t\t\" wd:Q1687239|wd:Q35979475|wd:Q562108  wikibase:ID ?producer .\" ,\n \t\t\"}\"]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer ?editor WHERE {\",\n \t\t\" kg:0455 kg:1871 ?producer .\",\n \t\t\" kg:8729 kg:1871 ?producer .\",\n \t\t\" kg:4823 kg:1871 ?producer .\",\n \t\t\" kg:0455 kg:8419 ?editor .\",\n \t\t\" kg:8729 kg:8419 ?editor .\",\n \t\t\" kg:4823 kg:8419 ?editor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"SELECT ?wife WHERE { wd:Q185670 wdt:P26 ?wife . ?wife wdt:P40 wd:Q9439 . ?wife wdt:P40 wd:Q9440 }\"\n\t\t \t\t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?subject wdt:P26 wd:Q296446 . ?subject wdt:P26 wd:Q3340 . ?subject wdt:P3373 wd:Q3340 . ?subject wdt:P21 wd:Q6581072 . }\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:3391 kg:4633 ?resource . ?resource kg:8490 kg:0538 . ?resource kg:0357 kg:8755 }\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?work WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?work wdt:P50/wikibase:claim (wd:Q123456789, wd:Q987654321, wd:Q111111111);\", \"# Replace Q123456789, Q987654321, Q111111111 with actual Wikidata IDs for Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wdt:P31/wikibase:claim wd:Q5.\", \"># Replace with the correct property if P31 is not appropriate\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?work\",\n     \t\t\"WHERE {\",\n     \t\t\"VALUES ?screenwriter { wd:Q1687239 wd:Q562108 wd:Q35979475 }\",\n     \t\t\"?work wdt:P58 ?screenwriter ;\",\n     \t\t\"wdt:P1040 ?screenwriter .\",\n     \t\t\"}\"\n     \t\t\t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?work WHERE {\",\n\t\t    \t\t\"kg:1969 kg:4444 ?work .\",\n\t\t    \t\t\"kg:1969 kg:1424 ?work .\",\n\t\t    \t\t\"kg:5002 kg:4444 ?work .\",\n\t\t    \t\t\"kg:5002 kg:1424 ?work .\",\n\t\t    \t\t\"kg:4516 kg:4444 ?work .\",\n\t\t    \t\t\"kg:4516 kg:1424 ?work .}\",\n\t\t    \t\t\"GROUP BY ?work\"\n \t\t\t\t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q1234567 wdt:P50 wd:Q8765432 ;\\n           wdt:P50 wd:Q7654321 ;\\n           wdt:P50 wd:Q6543210 .\\nwd:Q1234567 wdt:P396 wd:Q9876543 .\\n}\\n\"]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\"\n \t\t,\"wd:Q1687239 wdt:P58/wdt:P1040* ?resource.\"\n \t\t,\"wd:Q562108 wdt:P58/wdt:P1040* ?resource.\"\n \t\t,\"wd:Q35979475 wdt:P58/wdt:P1040* ?resource.\"\n \t\t,\"?resource wdt:P1040 wd:Q20729551.\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource <http://example.com/was_screenwriter_of> kg:2364 .\",\n \t\t\t\"?resource <http://example.com/was_film_editor_of> kg:2364 .\",\n \t\t\t\"{ ?resource <http://example.com/has_name> \\\"Jens Jørgen Thorsen\\\" }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ ?resource <http://example.com/has_name> \\\"Jørgen Leth\\\" }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ ?resource <http://example.com/has_name> \\\"Ole John\\\" }\"\n \t\t,\"?resource a kg:6557 .\", \"@comment(?resource) as ?name\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q1234567 wdt:P57/wdt:P50 ?person . # Replace Q1234567 with the actual work ID\\n?person (wdt:P279*|wdt:P31) wd:Q82956. # Person or Occupation\\n}\\nORDER BY ?resource\"]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\"\n \t\t,\"?film wdt:P1476 wd:Q20729551 .\"\n \t\t,\"wd:Q35979475 wdt:P162|wdt:P1040 ?film .\"\n \t\t,\"wd:Q562108 wdt:P162|wdt:P1040 ?film .\"\n \t\t,\"wd:Q1687239 wdt:P162|wdt:P1040 ?film .\"\n \t\t,\"VALUES ?resource { wd:Q35979475 wd:Q562108 wd:Q1687239 }\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"?x kg:1680 ?y .\",\n \t   \t    \t\t\"?z kg:5139 ?w .\",\n \t   \t    \t\t\"?y foaf:name 'Stop for Bud'@en .\",\n\t   \t    \t\t\"?z foaf:name 'Stop for Bud'@en .\",\n \t   \t    \t\t\"?x foaf:name 'Ole John'@en .\",\n \t   \t    \t\t\"?w foaf:name 'Jørgen Leth'@en .\",\n \t   \t    \t\t\"?y foaf:name 'Jens Jørgen Thorsen'@en\"\n \t    \t\t]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  VALUES (?person ?job) {\\n    (wd:Q2751649 wdt:P108) # Sam Simon, producer\\n    (wd:Q2751649 wdt:P463) # Sam Simon, executive producer\\n    (wd:Q12516 wdt:P108)  # James L. Brooks, producer\\n    (wd:Q12516 wdt:P463)  # James L. Brooks, executive producer\\n    (wd:Q7957 wdt:P108)   # Matt Groening, producer\\n    (wd:Q7957 wdt:P463)   # Matt Groening, executive producer\\n  }\\n  ?person ?job ?resource .\\n}\"\n]}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n   \t\t\t,\"{ wd:Q365090 wdt:P1431 ?resource . } UNION\"\n   \t\t\t,\"{ wd:Q365090 wdt:P162 ?resource . } UNION\"\n   \t\t\t,\"{ wd:Q95125 wdt:P1431 ?resource . } UNION\"\n   \t\t\t,\"{ wd:Q95125 wdt:P162 ?resource . } UNION\"\n   \t\t\t,\"{ wd:Q43994 wdt:P1431 ?resource . } UNION\"\n   \t\t\t,\"{ wd:Q43994 wdt:P162 ?resource . }}\"\n    \t]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/CreativeWork>\" ,\n  \t                \t\"?x1 <http://data.linkedmdb.org/resource/movie/person_occurrence/person> http://data.linkedmdb.org/resource/medium/2672\" ,\n  \t                \t\"?x1 <http://data.linkedmdb.org/resource/movie/person_occurrence/filmography_role> ?y0\" ,\n  \t                \t\"?x1 <http://data.linkedmdb.org/resource/movie/person_occurrence/film> ?x0\" ,\n  \t                \t\"?x2 <http://data.linkedmdb.org/resource/movie/person_occurrence/person> http://data.linkedmdb.org/resource/medium/7057\" ,\n  \t                \t\"?x2 <http://data.linkedmdb.org/resource/movie/person_occurrence/filmography_role> ?y1\" ,\n  \t                \t\"?x2 <http://data.linkedmdb.org/resource/movie/person_occurrence/film> ?x0\" ,\n  \t                \t\"?x3 <http://data.linkedmdb.org/resource/movie/person_occurrence/person> http://data.linkedmdb.org/resource/medium/1133\" ,\n  \t                \t\"?x3 <http://data.linkedmdb.org/resource/movie/person_occurrence/filmography_role> ?y2\" ,\n  \t                \t\"?x3 <http://data.linkedmdb.org/resource/movie/person_occurrence/film> ?x0\" ,\n  \t                \t\"?y0 <http://www.w3.org/2004/02/skos/core#prefLabel> 'producer'\" ,\n  \t                \t\"?y1 <http://www.w3.org/2004/02/skos/core#prefLabel> 'executive producer'\" ,\n  \t                \t\"?y2 <http://www.w3.org/2004/02/skos/core#prefLabel> 'producer'\" ,\n  \t                \t\"?x0 <http://data.linkedmdb.org/resource/movie/production_company> ?x4\"\n  \t\t            ]\n  \t\t        }\n  \t\t      \t\t\t\t \t\t\t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\" wd:Q156879 sister: ?sister .\",\n \t\t\" ?sister wife: wd:Q156879 .\",\n \t\t\" ?sister sibling: wd:Q230499 .\",\n \t\t\" ?sister sibling: wd:Q156881 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P26 wd:Q3340; wdt:P21 wd:Q6581072. ?item wdt:P3373 wd:Q3345.}\"\n     \t\t ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:1580 kg:9841 .\",\n\t\t\t\"?x kg:9782 kg:1945 .\",\n\t\t\t\"?y kg:4989 ?x .\",\n\t\t\t\"?y kg:4989 kg:4993 .\"\n\t\t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t    \t\t\t,\"?work wdt:P31 wd:Q53894072 .\"\n\t\t    \t\t\t,\"?work wdt:P57 wd:Q688489 .\"\n\t\t    \t\t\t,\"?work wdt:P57 wd:Q21172899 .\"\n\t\t    \t\t\t,\"?work wdt:P1433 wd:Q688489 .\"\n\t\t    \t\t\t,\"?work wdt:P1433 wd:Q21172899 .\"\n\t\t    \t\t\t,\"VALUES ?work { wd:Q205026 }\"\n\t\t    \t\t\t,\"?resource wdt:P31/wdt:P279* wd:Q3339958 .\" ]}\n \t\t \t \t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q4500; wdt:P58 wd:Q4500; wdt:P162 wd:Q4500. ?item wdt:P57 wd:Q5542223; wdt:P58 wd:Q5542223; wdt:P162 wd:Q5542223. ?item wdt:P31 wd:Q1079}\"\n    \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:6328 kg:0075 .\",\n\t\t\t\"?x kg:3866 kg:0075 .\",\n\t\t\t\"?x kg:2221 kg:0075 .\",\n\t\t\t\"?y kg:6328 kg:2805 .\",\n\t\t\t\"?y kg:3866 kg:2805 .\",\n\t\t\t\"?y kg:2221 kg:2805 .\",\n\t\t\t\"?x kg:6416 kg:5986 .\",\n\t\t\t\"?y kg:6416 kg:5986 .\"\n\t\t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource \\nWHERE {\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P106 wd:Q1049278 . # occupation is costume designer\\n?work1 wdt:P57 ?resource . # the resource directed or edited work1\\n?work2 wdt:P57 ?resource . # the resource directed or edited work2\\n?work3 wdt:P57 ?resource . # the resource directed or edited work3\\n?work1 wdt:P364 wd:Q200985 . # work1 is 'Tom at the Farm'\\n?work2 wdt:P364 wd:Q166155 . # work2 is 'Heartbeats'\\n?work3 wdt:P364 wd:Q175555 . # work3 is 'Laurence Anyways'\\n}\\n\"]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{?x0 ?x1 wd:Q1323191} UNION {?x0 wdt:P161 ?x2. ?x2 ?x1 wd:Q1323191}\",\n\t\t \t\t\t\"?x0 wdt:P1040 ?x3\",\n\t\t \t\t\t\"?x3 wdt:P161 ?x4\",\n\t\t \t\t\t\"?x4 ?x5 wd:Q2336453\",\n\t\t \t\t\t\"?x0 ?x1 wd:Q1323191\",\n\t\t \t\t\t\"?x3 wdt:P1040 ?x6\",\n\t\t \t\t\t\"?x6 wdt:P161 ?x7\",\n\t\t \t\t\t\"?x7 ?x8 wd:Q2615443\"\n\t\t \t\t]\n\t\t \t\t}\n\t\t\t\t\t\t\t\t\t      \t\t\t\t\t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x ?y kg:0137 .\",\n\t\t\t\"?x ?z kg:8202 .\",\n\t\t\t\"?x ?w kg:3899 .\",\n\t\t\t\"?x ?v kg:9083\"\n\t\t]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n  wd:Q12345 wdt:P50 ?person . # Replace Q12345 with the actual film item ID for \"]} "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?person WHERE {\"\n     \t\t,\"?film1 wdt:P31 wd:Q11424. \"\n     \t\t,\"?film1 rdfs:label \\\"In the Park\\\"@en.\"\n     \t\t,\"?film1 wdt:P1040 ?person.\"\n     \t\t,\"?film1 wdt:P161 ?person.\"\n     \t\t,\"?film2 wdt:P31 wd:Q11424. \"\n     \t\t,\"?film2 rdfs:label \\\"Shanghaied\\\"@en.\"\n     \t\t,\"?film2 wdt:P1040 ?person.\"\n     \t\t,\"?film2 wdt:P161 ?person.\"\n     \t\t,\"?film3 wdt:P31 wd:Q11424. \"\n     \t\t,\"?film3 rdfs:label \\\"Modern Times\\\"@en.\"\n     \t\t,\"?film3 wdt:P1040 ?person.\"\n     \t\t,\"?film3 wdt:P161 ?person.\"\n     \t\t,\"?film4 wdt:P31 wd:Q11424. \"\n     \t\t,\"?film4 rdfs:label \\\"The Professor\\\"@en.\"\n     \t\t,\"?film4 wdt:P1040 ?person.\"\n     \t\t,\"?film4 wdt:P161 ?person.\"\n     \t\t,\"}\"\n      ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:1634 kg:3219 .\",\n\t\t\t\"?x kg:1015 kg:3219 .\",\n\t\t\t\"?x kg:1634 kg:2793 .\",\n\t\t\t\"?x kg:1015 kg:2793 .\",\n\t\t\t\"?x kg:1634 kg:7258 .\",\n\t\t\t\"?x kg:1015 kg:7258 .\",\n\t\t\t\"?x kg:1634 kg:7312 .\",\n\t\t\t\"?x kg:1015 kg:7312 .\" ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\n\\t{wd:Q2456790 wdt:P345 ?work} UNION {wd:Q189665 wdt:P345 ?work} UNION {wd:Q270959 wdt:P345 ?work} UNION {wd:Q2456791 wdt:P345 ?work}\\n\\t?work wdt:P31 wd:Q5383822.\\n}\\n\"]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q1291210. }\",\n     \t\t\"{ ?item wdt:P57 wd:Q4207234. }\",\n     \t\t\"{ ?item wdt:P57 wd:Q16198328. }\",\n     \t\t\"{ ?item wdt:P57 wd:Q4679987. }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q1291210. }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q4207234. }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q16198328. }\",\n     \t\t\"{ ?item wdt:P1040 wd:Q4679987. }\"\n     \t]\n}\n \t\t\t \t\t\t\t\t\t\t      \t\t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x0 kg:6483 kg:4625. ?x0 kg:8022 ?y0.}\",\n  \t\t\"{?x1 kg:6483 kg:1102. ?x1 kg:8022 ?y1.}\",\n  \t\t\"{?x2 kg:6483 kg:8606. ?x2 kg:8022 ?y2.}\",\n  \t\t\"{?x3 kg:6483 kg:9172. ?x3 kg:8022 ?y3.}\"\n \t]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q276458 wdt:P1698 ?film.\\nwd:Q30955 wdt:P1698 ?film.\\nwd:Q129569 wdt:P1698 ?film.\\nwd:Q154845 wdt:P1698 ?film.\\n}\\n\"]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 ?p0 wd:Q1137372}\",\n     \t\t\"?x0 wdt:P57 wd:Q549956\",\n     \t\t\"?x0 wdt:P58 wd:Q549956\",\n     \t\t\"?x1 ?p1 wd:Q1137372\",\n     \t\t\"?x1 wdt:P57 wd:Q3772\",\n     \t\t\"?x1 wdt:P58 wd:Q3772\",\n     \t\t\"?x2 ?p2 wd:Q1137372\",\n     \t\t\"?x2 wdt:P57 wd:Q2838329\",\n     \t\t\"?x2 wdt:P58 wd:Q2838329\",\n     \t\t\"?x3 ?p3 wd:Q1137372\",\n     \t\t\"?x3 wdt:P57 wd:Q47284\",\n     \t\t\"?x3 wdt:P58 wd:Q47284\"\n     \t]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x kg:5595 kg:0913 . ?x kg:0937 kg:0913 .}\",\n\t\t\t\"{?x kg:5595 kg:8047 . ?x kg:0937 kg:8047 .}\",\n\t\t\t\"{?x kg:5595 kg:2759 . ?x kg:0937 kg:2759 .}\",\n\t\t\t\"{?x kg:5595 kg:2202 . ?x kg:0937 kg:2202 .}\"\n\t\t]\n\t\t}\n\t\t\t\t\t\t\t      \t\t\t\t\t\t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?director ?producer WHERE {\\n\\t{wd:Q496572 wdt:P1126 ?director} UNION {wd:Q38016 wdt:P1126 ?director} UNION {wd:Q496573 wdt:P1126 ?director} UNION {wd:Q27971 wdt:P1126 ?director}\\n\\t{wd:Q496572 wdt:P1128 ?producer} UNION {wd:Q38016 wdt:P1128 ?producer} UNION {wd:Q496573 wdt:P1128 ?producer} UNION {wd:Q27971 wdt:P1128 ?producer}\\n}\\n\"]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q40220 . ?item wdt:P162 wd:Q40220 .}\",\n     \t\t\"?item wdt:P57 wd:Q5127380 . ?item wdt:P162 wd:Q5127380 .\",\n     \t\t\"?item wdt:P57 wd:Q117392 . ?item wdt:P162 wd:Q117392 .\",\n     \t\t\"?item wdt:P57 wd:Q4235 . ?item wdt:P162 wd:Q4235 .\",\n     \t\t\"?item wdt:P31 wd:Q3977597\"\n     \t  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?producer WHERE {\",\n \t\t\"kg:9356 kg:1096 ?director .\",\n \t\t\"kg:9356 kg:6682 ?producer .\",\n \t\t\"kg:2703 kg:1096 ?director .\",\n \t\t\"kg:2703 kg:6682 ?producer .\",\n \t\t\"kg:5307 kg:1096 ?director .\",\n \t\t\"kg:5307 kg:6682 ?producer .\",\n \t\t\"kg:5093 kg:1096 ?director .\",\n \t\t\"kg:5093 kg:6682 ?producer .\",\n \t\t\"?director kg:0709 kg:9028 .\",\n \t\t\"?producer kg:0709 kg:9028 .}\",\n \t\t\"}\"]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\n  ?work wdt:P31 wd:Q5964827 ; # instance of work\\n        wdt:P50 wd:Q2538 ; # written by George Lucas\\n        wdt:P91/list/wdt:P178 wd:Q2538 . # executive produced by George Lucas\\n  ?work wdt:P91/list/wdt:P469 wd:Q2538 . # produced by George Lucas\\n  ?work wdt:P91/list/wdt:P1028 wd:Q2538 . # edited by George Lucas\\n}\"\n]}\n    \t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?work WHERE {\"\n     \t\t,\"wd:Q38222 wdt:P58 ?work .\" ]\n     \t\t}\n     \t\t\t\t\t\t       \t\t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 <http://example.org/was_written_by> ?x1; <http://example.org/executive_produced_by> ?x2; <http://example.org/produced_by> ?x3; <http://example.org/film_edited_by> ?x4.}\",\n      \t\t\"?x1 = kg:0613\",\n      \t\t\"?x2 = kg:0613\",\n      \t\t\"?x3 = kg:0613\",\n      \t\t\"?x4 = kg:0613\"\n      \t]\n      \t}\n      \t\t\t\t\t      \t\t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?writer WHERE {\\n\\t?work1 wdt:P31 wd:Q571 ; wdt:P50 ?writer ; wdt:P1433 wd:Q26985269 . # \" ]\n} "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n  \t\t,\"?resource wdt:P58 wd:Q672061 .\"\n  \t\t,\"?resource wdt:P1040 wd:Q3141131 .\"\n  \t\t,\"?resource wdt:P58 wd:Q972787 .\"\n  \t\t,\"?resource wdt:P108 wd:Q909176 .\"\n  \t\t\t\t\t\t\t,\"}\"\n \t]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\" kg:2653 kg:3353 ?resource .\",\n\t\t\t\" kg:2653 kg:5303 ?resource .\",\n\t\t\t\" kg:7573 kg:3353 ?resource .\",\n\t\t\t\" kg:7573 kg:5303 ?resource .\",\n\t\t\t\" kg:2627 kg:3353 ?resource .\",\n\t\t\t\" kg:2627 kg:5303 ?resource .\",\n\t\t\t\" ?resource kg:2120 kg:9335 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?producer WHERE {\\nwd:Q1384652 wdt:P913 ?producer.\\n?producer (wdt:P3450|wdt:P178) wd:Q1384652.\\nFILTER(?producer = wd:Q248565 || ?producer = wd:Q176567 || ?producer = wd:Q94595 || ?producer = wd:Q105475).\\n}\"]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer ?executiveProducer WHERE {\",\n\t\t\t\"wd:Q819109 wdt:P1431 ?executiveProducer .\",\n\t\t\t\"wd:Q819109 wdt:P162 ?producer .\",\n\t\t\t\"?executiveProducer wdt:P272 wd:Q1969128 .\", \"><!-- Bob Yari -->      \" ,\n\t\t\t\"?executiveProducer wdt:P272 wd:Q381545 .\", \"><!-- Elie Samaha -->      \" ,\n\t\t\t\"?producer wdt:P272 wd:Q81520 .\", \"><!-- Pierce Brosnan -->      \" ,\n\t\t\t\"?producer wdt:P272 wd:Q1295611 .}\", \"><!-- Toby Emmerich -->      \" ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 <http://example.org/producer> <kg:5622> . ?x0 <http://example.org/executive_producer> <kg:5622> .}\",\n\t\t\t\"?x0 <http://example.org/person> <kg:1278> .\",\n\t\t\t\"?x0 <http://example.org/person> <kg:2187> .\",\n\t\t\t\"?x0 <http://example.org/person> <kg:7661> .\",\n\t\t\t\"?x0 <http://example.org/person> <kg:9767> .\"\n\t\t]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?role WHERE {\\nwd:Q75269 wdt:P169 wd:Q4380 ;\\n        wdt:P57 wd:Q4380 ;\\n        wdt:P110 wd:Q4380 ;\\n        wdt:P190 wd:Q4380 .\\n}\\n\"]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?role ?film WHERE {\",\n \t\t  \t\t\"wd:Q8006 wdt:P58 ?film .\", \">// Akira Kurosawa as screenwriter of the film\",\n \t\t  \t\t\"wd:Q8006 wdt:P1040 ?film .\", \">// Akira Kurosawa as editor of the film\",\n \t\t  \t\t\"wd:Q8006 wdt:P162 ?film .\", \">// Akira Kurosawa as producer of the film\",\n \t\t  \t\t\"wd:Q8006 wdt:P1431 ?film .\", \">// Akira Kurosawa as executive producer of the film\",\n \t\t  \t\t\"?film wdt:P31 wd:Q854990 .\", \">// The film is Kagemusha\"\n \t  \t\t,\"}\" ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?screenwriter ?editor ?producer ?executiveProducer WHERE {\",\n \t\t\"  kg:6049 kg:6880 ?screenwriter .\",\n \t\t\"  kg:6049 kg:3149 ?editor .\",\n \t\t\"  kg:6049 kg:0779 ?producer .\",\n \t\t\"  kg:6049 kg:3712 ?executiveProducer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?project\\nWHERE {\\n ?project wdt:P31 wd:Q596482 ;\\n          wdt:P57 wd:Q107963 ;\\n          wdt:P50 wd:Q107964 ;\\n          wdt:P50 wd:Q107965 .\\n}\\n\"]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?project wdt:P57 wd:Q562108 ; wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q1687239 . }\"\n  \t\t\t\t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?project WHERE { kg:0365 kg:0289 ?project . kg:0365 kg:4637 ?project . kg:0365 kg:7265 ?project . kg:4530 kg:0289 ?project . kg:4530 kg:4637 ?project . kg:4530 kg:7265 ?project . kg:3287 kg:0289 ?project . kg:3287 kg:4637 ?project . kg:3287 kg:7265 ?project }\"\n \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\n\\t?work wdt:P31 wd:Q11424 . # instance of creative work\\n\\t?work wdt:P57 wd:Q609894 . # directed by Ole John\\n\\t?work wdt:P57 wd:Q609900 . # directed by Jørgen Leth\\n\\t?work wdt:P57 wd:Q612356 . # directed by Jens Jørgen Thorsen\\n\\t?work wdt:P58 wd:Q609894 . # written by Ole John\\n\\t?work wdt:P58 wd:Q609900 . # written by Jørgen Leth\\n\\t?work wdt:P58 wd:Q612356 . # written by Jens Jørgen Thorsen\\n\\t?work wdt:P479 wd:Q609894 . # edited by Ole John\\n\\t?work wdt:P479 wd:Q609900 . # edited by Jørgen Leth\\n\\t?work wdt:P479 wd:Q612356 . # edited by Jens Jørgen Thorsen\\n}\\n\"]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q562108 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P1040 wd:Q1687239}\"\n    \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?work WHERE { kg:5238 kg:9712 ?work . kg:5238 kg:2466 ?work . kg:5238 kg:9552 ?work . kg:7889 kg:9712 ?work . kg:7889 kg:2466 ?work . kg:7889 kg:9552 ?work . kg:2197 kg:9712 ?work . kg:2197 kg:2466 ?work . kg:2197 kg:9552 ?work }\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n\\t?film wdt:P31 wd:Q11424 . # instance of film\\n\\t?film wdt:P57 wd:WD_CINEMATOGRAPHER . # directed by\\n\\t?film wdt:P910 wd:WD_DIRECTOR . # cinematography by\\n\\twd:WD_FILM_1 wdt:P31 ?film .\\n\\twd:WD_FILM_2 wdt:P31 ?film .\\n\\twd:WD_FILM_3 wdt:P31 ?film .\\n\\twd:WD_FILM_4 wdt:P31 ?film .\\n\\t?person wdt:P57 wd:WD_CINEMATOGRAPHER . # directed\\n\\tFILTER(?person = wd:WD_PERSON)\\n\\tOPTIONAL { ?person wdt:P169 wd:WD_PROducer } # producer of\\n\\tFILTER(!BOUND(wd:WD_PROducer))\\n}\\n\"]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?row ?y}\"\n  \t\t,\"{?y wdt:P57 wd:Q181978.}\"\n  \t\t,\"{?y wdt:P106 wd:Q28340.}\"\n  \t\t,\"{wd:Q600762 wdt:P344 ?y.}\"\n  \t\t,\"{wd:Q283699 wdt:P344 ?y.}\"\n  \t\t,\"{wd:Q629819 wdt:P344 ?y.}\"\n  \t\t,\"{wd:Q1216566 wdt:P344 ?y.}\"\n  \t\t,\"{?y wdt:P344 ?z.}\"\n  \t\t,\"{?z wdt:P57 ?x.}\"\n  \t\t,\"{?x wdt:P106 wd:Q3282637.}\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x ?y kg:3120 .\",\n\t\t\t\"?x ?z kg:7705 .\",\n\t\t\t\"?x ?w kg:7198 .\",\n\t\t\t\"?x ?v kg:0627 .\",\n\t\t\t\"?x ?a kg:7085 .\",\n\t\t\t\"?x ?b kg:0627\"\n\t\t]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?person WHERE {\"\n \t\t  \t\t,\"?film1 wdt:P31 wd:Q1142470 .\"\n \t\t  \t\t,\"?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en' && STR(?title1) = 'Six Men Getting Sick').\"\n \t\t  \t\t,\"?person wdt:P161 ?film1.\"\n \t\t  \t\t,\"?person wdt:P57 ?film1.\"\n \t\t  \t\t,\"?person wdt:P488 ?film1.\"\n \t\t  \t\t,\"?film2 wdt:P31 wd:Q1142470 .\"\n \t\t  \t\t,\"?film2 rdfs:label ?title2 FILTER(LANG(?title2) = 'en' && STR(?title2) = 'Inland Empire').\"\n \t\t  \t\t,\"?person wdt:P161 ?film2.\"\n \t\t  \t\t,\"?person wdt:P57 ?film2.\"\n \t\t  \t\t,\"?person wdt:P488 ?film2.\"\n \t\t  \t\t,\"?film3 wdt:P31 wd:Q1142470 .\"\n \t\t  \t\t,\"?film3 rdfs:label ?title3 FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Darkened Room').\"\n \t\t  \t\t,\"?person wdt:P161 ?film3.\"\n \t\t  \t\t,\"?person wdt:P57 ?film3.\"\n \t\t  \t\t,\"?person wdt:P488 ?film3.\"\n \t\t  \t\t,\"?film4 wdt:P31 wd:Q1142470 .\"\n \t\t  \t\t,\"?film4 rdfs:label ?title4 FILTER(LANG(?title4) = 'en' && STR(?title4) = 'Rabbits').\"\n \t\t  \t\t,\"?person wdt:P161 ?film4.\"\n \t\t  \t\t,\"?person wdt:P57 ?film4.\"\n \t\t  \t\t,\"?person wdt:P488 ?film4.\"\n \t\t  \t\t,\"}\"\n \t\t \t]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?person WHERE {\"\n  \t\t\t,\"?film1 wdt:P57 ?person .\"\n  \t\t\t,\"?film1 wdt:P344 ?person .\"\n  \t\t\t,\"?film1 wdt:P106 wd:Q33999 .\"\n  \t\t\t,\"?film2 wdt:P57 ?person .\"\n  \t\t\t,\"?film2 wdt:P344 ?person .\"\n  \t\t\t,\"?film2 wdt:P106 wd:Q33999 .\"\n  \t\t\t,\"?film3 wdt:P57 ?person .\"\n  \t\t\t,\"?film3 wdt:P344 ?person .\"\n  \t\t\t,\"?film3 wdt:P106 wd:Q33999 .\"\n  \t\t\t,\"?film4 wdt:P57 ?person .\"\n  \t\t\t,\"?film4 wdt:P344 ?person .\"\n  \t\t\t,\"?film4 wdt:P106 wd:Q33999 .\"\n  \t\t\t,\"?film1 wdt:P31 wd:Q1142489 .\"\n  \t\t\t,\"?film1 wdt:P577 ?year1.\"\n  \t\t\t,\"?film2 wdt:P31 wd:Q1142489 .\"\n  \t\t\t,\"?film2 wdt:P577 ?year2.\"\n  \t\t\t,\"?film3 wdt:P31 wd:Q1142489 .\"\n  \t\t\t,\"?film3 wdt:P577 ?year3.\"\n  \t\t\t,\"?film4 wdt:P31 wd:Q1142489 .\"\n  \t\t\t,\"?film4 wdt:P577 ?year4.\"\n  \t\t\t,\"{ ?film1 wdt:P361 wd:Q3016313 } UNION { ?film1 wdt:P361 wd:Q862058 } UNION { ?film1 wdt:P361 wd:Q3485595 } UNION { ?film1 wdt:P361 wd:Q1473406 }\"\n  \t\t,\"}\"\n]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"?film1 kg:5713 ?person .\",\n\t\t\t\"?film1 kg:9234 ?person .\",\n\t\t\t\"?film1 kg:5366 ?person .\",\n\t\t\t\"?film2 kg:5713 ?person .\",\n\t\t\t\"?film2 kg:9234 ?person .\",\n\t\t\t\"?film2 kg:5366 ?person .\",\n\t\t\t\"?film3 kg:5713 ?person .\",\n\t\t\t\"?film3 kg:9234 ?person .\",\n\t\t\t\"?film3 kg:5366 ?person .\",\n\t\t\t\"?film4 kg:5713 ?person .\",\n\t\t\t\"?film4 kg:9234 ?person .\",\n\t\t\t\"?film4 kg:5366 ?person .\",\n\t\t\t\"FILTER(?film1 = kg:9628)\",\n\t\t\t\"FILTER(?film2 = kg:9038)\",\n\t\t\t\"FILTER(?film3 = kg:0113)\",\n\t\t\t\"FILTER(?film4 = kg:1977)\"\n\t\t]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE {\",\n    \"VALUES ( ?director1 ?director2 ?director3 ) { ( wd:Q76954 wd:Q80955 wd:Q76953 ) }\",\n    \"?work wdt:P31 wd:Q11424. # instance of work\",\n    \"?work wdt:P725 ?director1, ?director2, ?director3. # executive producer\"\n    ,\n    \"?work wdt:P57 ?director1, ?director2, ?director3. # director\"\n    ,\n    \"?work wdt:P58 ?writer1, ?writer2, ?writer3. # writer\",\n    \"wd:Q76954 p:P58 [ ps:P58 wd:Q76954 ; pq:P1090 wd:Q11424 ] .\", \"# David Zucker as a writer with the same work\"\n    ,\n    \"wd:Q80955 p:P58 [ ps:P58 wd:Q80955 ; pq:P1090 wd:Q11424 ] .\", \"# Jim Abrahams as a writer with the same work\"\n    ,\n    \"wd:Q76953 p:P58 [ ps:P58 wd:Q76953 ; pq:P1090 wd:Q11424 ] .\" ,\"# Jerry Zucker as a writer with the same work\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n\\t?film wdt:P31 wd:Q11424 . # instance of film\\n\\t?film wdt:P57 wd:Q609894 . # directed by Ole John\\n\\t?film wdt:P58 wd:Q609894 . # edited by Ole John\\n\\t?film wdt:P59 wd:Q609894 . # written by Ole John\\n\\t?film wdt:P57 wd:Q132556 . # directed by Jens Jørgen Thorsen\\n\\t?film wdt:P58 wd:Q132556 . # edited by Jens Jørgen Thorsen\\n\\t?film wdt:P59 wd:Q132556 . # written by Jens Jørgen Thorsen\\n\\t?film wdt:P57 wd:Q48054 . # directed by Jørgen Leth\\n\\t?film wdt:P58 wd:Q48054 . # edited by Jørgen Leth\\n\\t?film wdt:P59 wd:Q48054 . # written by Jørgen Leth\\n}\\n\"]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"{ wd:Q35979475 wdt:P57 ?film . }\",\n \t\t\t\"{ wd:Q35979475 wdt:P1040 ?film . }\",\n \t\t\t\"{ wd:Q35979475 wdt:P58 ?film . }\",\n \t\t\t\"{ wd:Q1687239 wdt:P57 ?film . }\",\n \t\t\t\"{ wd:Q1687239 wdt:P1040 ?film . }\",\n \t\t\t\"{ wd:Q1687239 wdt:P58 ?film . }\",\n \t\t\t\"{ wd:Q562108 wdt:P57 ?film . }\",\n \t\t\t\"{ wd:Q562108 wdt:P1040 ?film . }\",\n \t\t\t\"{ wd:Q562108 wdt:P58 ?film . }\",\n \t\t\t\"?film wdt:P31 wd:Q1142479. \"\n \t\t,\"}\",\n \t\t\"GROUP BY ?film\"\n \t]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n\t\t\t\"{ ?x0 kg:0677 kg:7862 . }\",\n\t\t\t\"{ ?x0 kg:8507 kg:7862 . }\",\n\t\t\t\"{ ?x0 kg:4848 kg:7862 . }\",\n\t\t\t\"{ ?x0 kg:0677 kg:3772 . }\",\n\t\t\t\"{ ?x0 kg:8507 kg:3772 . }\",\n\t\t\t\"{ ?x0 kg:4848 kg:3772 . }\",\n\t\t\t\"{ ?x0 kg:0677 kg:7339 . }\",\n\t\t\t\"{ ?x0 kg:8507 kg:7339 . }\",\n\t\t\t\"{ ?x0 kg:4848 kg:7339 . }\"\n\t\t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q182465 wdt:P50/wdt:P57 ?resource.\\nwd:Q39216 wdt:P50/wdt:P57 ?resource.\\nwd:Q16636 wdt:P50/wdt:P57 ?resource.\\nwd:Q84509 wdt:P50/wdt:P57 ?resource.\\nwd:Q120179 wdt:P50/wdt:P57 ?resource.\\n}\\n\"]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 wdt:P57 wd:Q358714; wdt:P58 wd:Q358714. ?x0 wdt:P57 wd:Q522057; wdt:P58 wd:Q522057. ?x0 wdt:P57 wd:Q298255; wdt:P58 wd:Q298255. ?x0 wdt:P57 wd:Q3772; wdt:P58 wd:Q3772. ?x0 wdt:P57 wd:Q47284; wdt:P58 wd:Q47284. ?x0 wdt:P31 wd:Q679023.}\"\n    \t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:0123 kg:1454 .\",\n\t\t\t\"?x kg:0123 kg:8328 .\",\n\t\t\t\"?x kg:0123 kg:0795 .\",\n\t\t\t\"?x kg:0123 kg:9736 .\",\n\t\t\t\"?x kg:0123 kg:2406 .\",\n\t\t\t\"?x kg:2062 ?y .\",\n\t\t\t\"?x kg:2062 kg:2406 .\",\n\t\t\t\"?x kg:2062 kg:8328 .\",\n\t\t\t\"?x kg:2062 kg:0795 .\",\n\t\t\t\"?x kg:2062 kg:9736 .\",\n\t\t\t\"?x kg:2062 kg:1454 .\",\n\t\t\t\"?x rdf:type kg:2115\"\n\t\t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer WHERE {\",\n \t\t\"  ?film1 wdt:P31 wd:Q11424. \",\n \t\t\"  ?film1 wdt:P57 wd:%PRODUCER%.\",\n \t\t\"  ?film1 rdfs:label ?title.\",\n \t\t\"  FILTER (LANG(?title) = 'en').\",\n \t\t\"  FILTER (?title = \\\"Katzelmacher\\\"@en).\",\n \t\t\"  ?film2 wdt:P31 wd:Q11424. \",\n \t\t\"  ?film2 wdt:P57 wd:%PRODUCER%.\",\n \t\t\"  ?film2 rdfs:label ?title2.\",\n \t\t\"  FILTER (LANG(?title2) = 'en').\",\n \t\t\"  FILTER (?title2 = \\\"Lili Marleen\\\"@en).\",\n \t\t\"  ?film3 wdt:P31 wd:Q11424. \",\n \t\t\"  ?film3 wdt:P57 wd:%PRODUCER%.\",\n \t\t\"  ?film3 rdfs:label ?title3.\",\n \t\t\"  FILTER (LANG(?title3) = 'en').\",\n \t\t\"  FILTER (?title3 = \\\"Whity\\\"@en).\",\n \t\t\"  ?film4 wdt:P31 wd:Q11424. \",\n \t\t\"  ?film4 wdt:P57 wd:%PRODUCER%.\",\n \t\t\"  ?film4 rdfs:label ?title4.\",\n \t\t\"  FILTER (LANG(?title4) = 'en').\",\n \t\t\"  FILTER (?title4 = \\\"The Niklashausen Journey\\\"@en).\",\n \t\t\"  wd:%PRODUCER% wdt:P31 wd:Q5. \",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer WHERE {\",\n\t\t\t\"?film1 wdt:P58 ?producer .\",\n\t\t\t\"?film1 wikibase:wikidataItemUrl wd:Q567519 .\",\n\t\t\t\"?film2 wdt:P58 ?producer .\",\n\t\t\t\"?film2 wikibase:wikidataItemUrl wd:Q686125 .\",\n\t\t\t\"?film3 wdt:P58 ?producer .\",\n\t\t\t\"?film3 wikibase:wikidataItemUrl wd:Q327427 .\",\n\t\t\t\"?film4 wdt:P58 ?producer .\",\n\t\t\t\"?film4 wikibase:wikidataItemUrl wd:Q2789885 .\",\n\t\t\t\"?producer wdt:P106 wd:Q3282637 }\"\n     \t\t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?producer WHERE {\",\n\t\t\t\"    ?film1 rdf:type cinematch:Film ;\",\n\t\t\t\"           cinematch:screenwriter kg:6788 ;\",\n\t\t\t\"           cinematch:film_editor kg:3259 ;\",\n\t\t\t\"           cinematch:hasOccupation kg:9570 .\",\n\t\t\t\"    ?film2 rdf:type cinematch:Film ;\",\n\t\t\t\"           cinematch:screenwriter kg:6788 ;\",\n\t\t\t\"           cinematch:film_editor kg:3259 ;\",\n\t\t\t\"           cinematch:hasOccupation kg:9570 .\",\n\t\t\t\"    ?film3 rdf:type cinematch:Film ;\",\n\t\t\t\"           cinematch:screenwriter kg:6788 ;\",\n\t\t\t\"           cinematch:film_editor kg:3259 ;\",\n\t\t\t\"           cinematch:hasOccupation kg:9570 .\",\n\t\t\t\"    ?film4 rdf:type cinematch:Film ;\",\n\t\t\t\"           cinematch:screenwriter kg:6788 ;\",\n\t\t\t\"           cinematch:film_editor kg:3259 ;\",\n\t\t\t\"           cinematch:hasOccupation kg:9570 .\",\n\t\t\t\"    ?producer rdf:type cinematch:FilmProducer ;\",\n\t\t\t\"               cinematch:screenwriter kg:6788 ;\",\n\t\t\t\"               cinematch:film_editor kg:3259 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?project \",\n    \"{\",\n    \" VALUES ?director_writer { wd:Q4795216 wd:Q3085156 wd:Q2414656 wd:Q216946 wd:Q15456 }\",\n    \"?director_writer wdt:P465 ?project .\", \"># P465 is 'directed' property, but we need to consider writing as well. Adjust accordingly if needed.\"\n   \t,\"?director_writer wdt:P57 ?project .\" ,\"\\n\",\n    \"}\",\n    \"]\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?project WHERE {\"\n     \t\t,\"{ wd:Q15042700 wdt:P57 ?project . wd:Q15042700 wdt:P58 ?project } UNION\"\n     \t\t,\"{ wd:Q7174311 wdt:P57 ?project . wd:Q7174311 wdt:P58 ?project } UNION\"\n     \t\t,\"{ wd:Q5542223 wdt:P57 ?project . wd:Q5542223 wdt:P58 ?project } UNION\"\n     \t\t,\"{ wd:Q7407299 wdt:P57 ?project . wd:Q7407299 wdt:P58 ?project } UNION\"\n     \t\t,\"{ wd:Q4500 wdt:P57 ?project . wd:Q4500 wdt:P58 ?project }}\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n \t\"query\": [\n \t\t\"?project ?role ?person\"\n \t] } "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?director ?writer ?editor WHERE {\",\n \t\t  \t\t\"?production wdt:P1698 ?oleJohn .\", \">// Ole John involvement\",\n \t\t  \t\t\"?production wdt:P1698 ?jensJorgenThorsen .\", \">// Jens Jørgen Thorsen involvement\",\n \t\t  \t\t\"?production wdt:P1698 ?jorgenLeth .\", \">// Jørgen Leth involvement\",\n \t\t  \t\t\"?production wdt:P57 ?director .\", \">// director of the production\"\n \t\t  \t\t,\"?production wdt:P59 ?writer .\", \">// writer of the production\"\n \t\t  \t\t,\"?production wdt:P1028 ?editor .\" ,\"\\t\\t// editor of the production\",\n \t\t  \t\t\"}\"]\n} "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t,\"?production wdt:P57 ?director.\"\n     \t\t,\"?director wd:Q35979475 wd:Q1687239 wd:Q562108.\"\n     \t\t,\"?production wdt:P58 ?screenwriter.\"\n     \t\t,\"?screenwriter wd:Q35979475 wd:Q1687239 wd:Q562108.\"\n     \t\t,\"?production wdt:P1040 ?editor.\"\n     \t\t,\"?editor wd:Q35979475 wd:Q1687239 wd:Q562108.\"\n     \t\t,\"?director ?role ?resource.\"\n     \t\t,\"?screenwriter ?role ?resource.\"\n     \t\t,\"?editor ?role ?resource.\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?director ?screenwriter ?editor WHERE {\",\n\t\t\t\"  ?production kg:directedBy ?director .\",\n\t\t\t\"  ?production kg:wroteBy ?screenwriter .\",\n\t\t\t\"  ?production kg:editedBy ?editor .\",\n\t\t\t\"  ?production kg:featuresActor/kg:actorName kg:3628 .\",\n\t\t\t\"  ?production kg:featuresActor/kg:actorName kg:7861 .\",\n\t\t\t\"  ?production kg:featuresActor/kg:actorName kg:8050 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n \t\t  \t\t\"?film wdt:P57 wd:Q60955. \", \">// film editor occupation\"\n \t\t  \t\t,\"?film wdt:P98 wd:Q5. \", \">// has writer (human)\"\n \t\t  \t\t,\"?film wdt:P162 wd:Q5. }\", \">// has executive producer (human)\"\n \t  \t\t]}\n \t  \t\t\t\t\t\t\t\t\t "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P106 wd:Q7042855 . \"\n\t\t] }\n\t\t\t\t \t\t\t\t \t\t\t\t \t\t\t \t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\t\"query\": [\n\t\t\t\"?film_editor kg:7901 kg:9486 .\",\n\t\t\t\"?film_editor ?role_1 kg:4212 .\",\n\t\t\t\"?film_editor ?role_2 kg:2824 .\",\n\t\t\t\"?film_editor ?role_3 kg:7215 .\",\n\t\t\t\"?film_editor ?role_4 kg:3339 .\"\n\t\t]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q1234567 wdt:P50 wd:Q8765432 ;\\n         wdt:P90 wd:Q12345678 ;\\n         wdt:P100 wd:Q9876543 .\\nwd:Q8765432 rdfs:label ?directorLabel FILTER (LANG(?directorLabel) = 'en') .\\nwd:Q12345678 rdfs:label ?writerLabel FILTER (LANG(?writerLabel) = 'en') .\\nwd:Q9876543 rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'en') .\\nSERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" } }\\n\"]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?editor ?writer WHERE {\",\n \t\t\"VALUES ?person1 { wd:Q35979475 }\",\n \t\t\"VALUES ?person2 { wd:Q1687239 }\",\n \t\t\"VALUES ?person3 { wd:Q562108 }\",\n \t\t\"?person1 wdt:P57 ?director .\",\n \t\t\"?person2 wdt:P1040 ?editor .\",\n \t\t\"?person3 wdt:P58 ?writer .\",\n \t\t\"?director schema:sameAs ?person1 .\",\n \t\t\"?editor schema:sameAs ?person2 .\",\n \t\t\"?writer schema:sameAs ?person3 .\",\n \t\t\"wd:Q20729551 wdt:P57 ?director ;\",\n \t\t\"wdt:P1040 ?editor ;\",\n \t\t\"wdt:P58 ?writer .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?editor ?screenwriter WHERE {\",\n \t\t\"VALUES (?person ?role) {\",\n \t\t\"( kg:2342 kg:1733 ) ( kg:1653 kg:1733 ) ( kg:6976 kg:1733 )\", \"># director roles\",\n \t\t\"( kg:2342 kg:1684 ) ( kg:1653 kg:1684 ) ( kg:6976 kg:1684 )\", \"># editor roles\",\n \t\t\"( kg:2342 kg:8356 ) ( kg:1653 kg:8356 ) ( kg:6976 kg:8356 ) }\", \"># screenwriter roles\",\n \t\t\"?film kg:has_director ?director .\",\n \t\t\"?film kg:has_film_editor ?editor .\",\n \t\t\"?film kg:has_screenwriter ?screenwriter .\",\n \t\t\"?film owl:sameAs foaf:name \\\"Stop for Bud\\\"@en }\"\n \t]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?producer WHERE {\",\n  \t\t\"  ?film1 wdt:P3459 wd:Q27680 ;\", \">// P3459 is 'executive producer of' and Q27680 is \" ,\"Star Wars: Episode I – The Phantom Menace\\\"\",\n  \t\t\"         wdt:P57 wd:Q16026 .\", \">// P57 is 'cinematography by', Q16026 is \" ,\"Anyone Lived in a Pretty How Town\\\"\",\n  \t\t\"  ?film2 wdt:P3459 wd:Q8587 ;\", \">// Q8587 is \" ,\"The Land Before Time\",\n  \t\t\"         wdt:P57 wd:Q16026 .\",\n  \t\t\"  ?producer wdt:P78 wd:Q16026 ;\", \">// P78 is 'author of work' and Q16026 is \" ,\"Anyone Lived in a Pretty How Town\\\"\",\n  \t\t\"             wdt:P57 wd:Q16026 .\",\n  \t\t\"}\"\n  \t]\n} "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?o . FILTER(?p != wd:Q2158047 && ?p != wdt:P169)}\",\n  \t\t\"?x wdt:P1431/wd:Q192403 wikibase:Entity ;\",\n  \t\t\"?x wdt:P1431/wd:Q165713 wikibase:Entity .\",\n  \t\t\"?x wdt:P58 wd:Q613974 wikibase:Entity ;\",\n  \t\t\"?x wdt:P58 wd:Q208910 wikibase:Entity ;\",\n  \t\t\"?x wdt:P58 wd:Q208910 wikibase:Entity .\",\n  \t\t\"?x wdt:P344 wd:Q613974 wikibase:Entity ;\",\n  \t\t\"?x wdt:P344 wd:Q208910 wikibase:Entity ;\",\n  \t\t\"?x wdt:P344 wd:Q208910 wikibase:Entity .\"\n \t]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8695 kg:3675 .\",\n \t\t\"?x kg:8695 kg:4438 .\",\n \t\t\"?x kg:3076 kg:7257 .\",\n \t\t\"?x kg:3076 kg:4002 .\",\n \t\t\"?x kg:3076 kg:2498 .\",\n \t\t\"?x kg:4014 kg:7257 .\",\n \t\t\"?x kg:4014 kg:4002 .\",\n \t\t\"?x kg:4014 kg:2498 .\"\n \t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?person WHERE {\"\n \t\t\t\t,\"?film1 wdt:P31 wd:Q11424. \"\n \t\t\t\t,\"?film1 rdfs:label ?title1filter. \"\n \t\t\t\t,\"FILTER(LANG(?title1filter) = 'en'). \"\n \t\t\t\t,\"FILTER(?title1filter = 'Uzak'). \"\n \t\t\t\t,\"?person wdt:P57 ?film1. \"\n \t\t\t\t,\"?person wdt:P162 wd:Q33805. \" ,\"\\t\\t\\t\"\n \t\t\t\t,\"?person wdt:P59 ?film1. \" ,\"\\t\\t\\t\"\n \t\t\t\t,\"?person wdt:P488 ?film1. \" ,\"\\n\"\n \t\t\t\t,\"?film2 wdt:P31 wd:Q11424. \"\n \t\t\t\t,\"?film2 rdfs:label ?title2filter. \"\n \t\t\t\t,\"FILTER(LANG(?title2filter) = 'en'). \"\n \t\t\t\t,\"FILTER(?title2filter = 'Clouds of May'). \"\n \t\t\t\t,\"?person wdt:P57 ?film2. \"\n \t\t\t\t,\"?person wdt:P162 wd:Q33805. \" ,\"\\t\\t\\t\"\n \t\t\t\t,\"?person wdt:P59 ?film2. \" ,\"\\t\\t\\t\"\n \t\t\t\t,\"?person wdt:P488 ?film2. }\"\n \t\t  \t\t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?person wdt:P57 wd:Q1361018; wdt:P58 wd:Q1361018; wdt:P1040 wd:Q1361018; wdt:P1431 wd:Q1361018. }\",\n\t\t \t\t\t\"{ ?person wdt:P57 wd:Q2086445; wdt:P58 wd:Q2086445; wdt:P1040 wd:Q2086445; wdt:P1431 wd:Q2086445. }\"\n\t\t \t\t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?director ?writer ?editor ?producer WHERE {\",\n \t\t\t\"?film1 a kg:8748 .\",\n \t\t\t\"?film2 a kg:1533 .\",\n \t\t\t\"?person kg:4746 ?film1, ?film2 .\",\n \t\t\t\"?person kg:3862 ?film1, ?film2 .\",\n \t\t\t\"?person kg:2045 ?film1, ?film2 .\",\n \t\t\t\"?person kg:1324 ?film1, ?film2 .\",\n \t\t\t\"?director kg:4746 ?film1, ?film2 .\",\n \t\t\t\"?writer kg:3862 ?film1, ?film2 .\",\n \t\t\t\"?editor kg:2045 ?film1, ?film2 .\",\n \t\t\t\"?producer kg:1324 ?film1, ?film2 .\"\n \t\t,\"}\" ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q178692 wdt:P50 wd:Q3466 ;\\n        wdt:P110 wd:Q3466 ;\\n        wdt:P110 wd:Q3467 ;\\n        wdt:P110 wd:Q3468 .\\nwd:Q3466 wdt:P106 wd:Q25977 ;\\nwd:Q3467 wdt:P106 wd:Q25977 ;\\nwd:Q3468 wdt:P106 wd:Q25977 .\\n?work wdt:P31 wd:Q11424 .\\n}\\n\"]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q178692 wdt:P50 wd:Q34629 ;\\n         wdt:P162 wd:Q34629 , wd:Q17136 , wd:Q17137 ;\\n         wdt:P57 wd:Q34629 , wd:Q17136 , wd:Q17137 .\\nwd:Q178692 wdt:P31 wd:Q1142419 .\\n}\\n\"]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?writer wdt:P31 wd:Q5 .\"\n  \t\t, \"?writer wdt:P169 wd:Q21195 .\"\n  \t\t, \"?twin_peaks_fwwm wdt:P57 ?writer .\"\n  \t\t, \"?twin_peaks_fwwm wdt:P488 wd:Q23025677 .\"\n  \t\t, \"?twin_peaks wdt:P57 ?writer .\"\n  \t\t, \"?twin_peaks wdt:P1170 wd:Q21947 .\"\n  \t\t, \"?my_son_my_son wdt:P57 ?writer .\"\n  \t\t, \"?my_son_my_son wdt:P1170 wd:Q386956 .\"\n  \t\t, \"?surveillance wdt:P57 ?writer .\"\n  \t\t, \"?surveillance wdt:P1170 wd:Q2455667 .\"\n \t\t \t\t \t\t]\n \t\t \t\t \t\t}\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?x wdt:P57 wd:Q2085 ; wdt:P58 wd:Q2085 ; wdt:P1431 wd:Q2085 ; wdt:P1431 wd:Q1140578 ; wdt:P1431 wd:Q1511905 ; wdt:P1431 wd:Q583406 . }\"\n\t\t \t\t]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:8250 kg:8911 .\",\n\t\t\t\"?x kg:3480 kg:8911 .\",\n\t\t\t\"?x kg:9095 kg:8911 .\",\n\t\t\t\"?x kg:9095 kg:6685 .\",\n\t\t\t\"?x kg:9095 kg:8673 .\"\n\t\t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n  ?film wdt:P31 wd:Q11424 .\\n  ?film wdt:P57 ?director.\\n  ?film wdt:P50 ?writer.\\n  FILTER(?director = wd:Q698551 || ?director = wd:Q698552 || ?director = wd:Q698553 || ?director = wd:Q698554 || ?director = wd:Q70011).\\n  FILTER(?writer = wd:Q698551 || ?writer = wd:Q698552 || ?writer = wd:Q698553 || ?writer = wd:Q698554 || ?writer = wd:Q70011).\\n  FILTER(?director != ?writer)\\n}\\n\"]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"{ ?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q116760 . }\",\n    \t\t\"{ ?item wdt:P31 wd:Q11424 . ?item wdt:P58 wd:Q982339 . }\",\n    \t\t\"{ ?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1033656 . }\",\n    \t\t\"{ ?item wdt:P31 wd:Q11424 . ?item wdt:P58 wd:Q7546 . }\",\n    \t\t\"{ ?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1365463 . }\"\n    \t]\n    \t}\n    \t\t\t \t\t\t\t \t\t\t\t \t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x kg:2253 kg:8473}\",\n\t\t\t\"?x kg:8834 kg:8473\",\n\t\t\t\"?x kg:2253 kg:8677\",\n\t\t\t\"?x kg:8834 kg:8677\",\n\t\t\t\"?x kg:2253 kg:0018\",\n\t\t\t\"?x kg:8834 kg:0018\",\n\t\t\t\"?x kg:2253 kg:9987\",\n\t\t\t\"?x kg:8834 kg:9987\",\n\t\t\t\"?x kg:2253 kg:6905\",\n\t\t\t\"?x kg:8834 kg:6905\"\n\t\t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?composer wdt:P31 wd:Q5 .\"\n  \t\t\t\t\t,\"?composer wdt:P127 wd:Q83601 .\"\n  \t\t\t\t\t,\"?spyKids composer ?composer.\"\n  \t\t\t\t\t,\"?sinCity director ?director.\"\n  \t\t\t\t\t,\"?sinCity cinematographer ?cinematographer.\"\n  \t\t\t\t\t,\"?sinCity starring ?star.\"\n  \t\t\t\t\t,\"?dameToKillFor director ?director2.\"\n  \t\t\t\t\t,\"?dameToKillFor cinematographer ?cinematographer2.\"\n  \t\t\t\t\t,\"?dameToKillFor starring ?star2.\"\n  \t\t\t\t\t,\"?sharkboyAndLavagirl director ?director3.\"\n  \t\t\t\t\t,\"?sharkboyAndLavagirl cinematographer ?cinematographer3.\"\n  \t\t\t\t\t,\"?sharkboyAndLavagirl starring ?star3.\"\n  \t\t\t\t\t,\"FILTER(?composer = ?director && ?composer = ?cinematographer && ?composer = ?star)\"\n  \t\t\t\t\t,\"FILTER(?composer = ?director2 && ?composer = ?cinematographer2 && ?composer = ?star2)\"\n  \t\t\t\t\t,\"FILTER(?composer = ?director3 && ?composer = ?cinematographer3)\"\n  \t\t\t\t\t,\"?spyKids wdt:P1476 wd:Q50985 .\"\n  \t\t\t\t\t,\"?sinCity wdt:P1476 wd:Q104725 .\"\n  \t\t\t\t\t,\"?dameToKillFor wdt:P1476 wd:Q3355967 .\"\n  \t\t\t\t\t,\"?sharkboyAndLavagirl wdt:P1476 wd:Q852667 .\"\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\t\t\t\t\t\t      \t\t\t"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q19211 . ?composer wdt:P344 wd:Q19211 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q1653396 . ?composer wdt:P161 wd:Q1653396 . ?composer wdt:P344 wd:Q1653396 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q656357 . ?composer wdt:P161 wd:Q656357 . ? composer wdt:P344 wd:Q656357 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q656357 . ? composer wdt:P344 wd:Q656357 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q19211 . ? composer wdt:P344 wd:Q19211 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q1653396 . ? composer wdt:P344 wd:Q1653396 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q656357 . ? composer wdt:P344 wd:Q656357 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q19211 . ? composer wdt:P344 wd:Q19211 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q1653396 . ? composer wdt:P344 wd:Q1653396 .}\",\n  \t\t\"{?composer wdt:P86 wd:Q550196 . ?composer wdt:P57 wd:Q19211 . ?composer wdt:P161 wd:Q656357 . ? composer wdt:P344 wd:Q656357 .}\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:5687 kg:6804 .\",\n \t\t\"?director kg:9737 kg:1669 .\",\n \t\t\"?director kg:9737 kg:0943 .\",\n \t\t\"?director kg:9737 kg:7667 .\",\n \t\t\"?cinematographer kg:7674 kg:1669 .\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composer ?editor ?star\\nWHERE {\\n  ?work1 wdt:P31 wd:Q590582 ; wdt:P57 wd:?composer ; wdt:P465 wd:?editor ; wdt:P161 wd:?star.\\n  ?work2 wdt:P31 wd:Q590582 ; wdt:P57 wd:?composer ; wdt:P465 wd:?editor ; wdt:P161 wd:?star.\\n  ?work3 wdt:P31 wd:Q590582 ; wdt:P57 wd:?composer ; wdt:P465 wd:?editor ; wdt:P161 wd:?star.\\n  ?work4 wdt:P31 wd:Q590582 ; wdt:P57 wd:?composer ; wdt:P465 wd:?editor ; wdt:P161 wd:?star.\\n  SERVICE <https://query.wikidata.org/sparql> {\\n    ?work1 rdfs:label \\\"A Woman of Paris\\\"@en.\\n    ?work2 rdfs:label \\\"Pay Day\\\"@en.\\n    ?work3 rdfs:label \\\"Modern Times\\\"@en.\\n    ?work4 rdfs:label \\\"City Lights\\\"@en.\\n  }\\n}\\n\"]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?composer wdt:P86 wd:Q470895 . ?composer wdt:P86 wd:Q199039 .}\",\n  \t\t\"?film wdt:P1040 ?composer .\",\n  \t\t\"?film wdt:P161 ?composer .\",\n  \t\t\"{?film wd:Q238211 .}\",\n  \t\t\"{?film wd:Q45602 .}\",\n  \t\t\"{?film wd:Q3986814 .}\"\n \t]\n \t\t\t \t\t}\n \t\t\t \t\t\t\t\t\t\t      \t\t"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x1 kg:type/kg:3584 ?y1}\",\n\t\t\t\"?x1 kg:compose/kg:9350 ?y2\",\n\t\t\t\"?x1 kg:compose/kg:8907 ?y3\",\n\t\t\t\"?x1 kg:edit/kg:6990 ?y4\",\n\t\t\t\"?x1 kg:star/kg:2929 ?y5\",\n\t\t\t\"?x1 kg:edit/kg:7599 ?y6\",\n\t\t\t\"?x1 kg:star/kg:3709 ?y7\"\n\t\t]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?movie WHERE {\\n  ?movie wdt:P31 wd:Q11424 .\\n  ?movie wdt:P57 wd:Q80969 .\\n  ?movie wdt:P57 wd:Q80970 .\\n  ?movie wdt:P57 wd:Q80971 .\\n  ?movie wdt:P463 wd:Q80969 .\\n  ?movie wdt:P463 wd:Q80970 .\\n  ?movie wdt:P463 wd:Q80971 .\\n}\"\n]}\n\t\t"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?project WHERE {\"\n     \t,\"?project wdt:P31 wd:Q1142459 ;\" ,\n     \t\"wdt:P725 wd:Q605882 ;\" ,\n     \t\"wdt:P57 wd:Q2601874 ;\" ,\n     \t\"wdt:P57 wd:Q328729 ;\" ,\n     \t\"wdt:P57 wd:Q2601875 ;\" ,\n     \t\"wdt:P57 wd:Q2601876 .\"\n   \t,\"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\" : [\n    \"SELECT ?project \",\n    \"{\",\n    \"  { wd:Q4023328 wdt:P57 ?project . } UNION { wd:Q4023328 wdt:P58 ?project . } UNION { wd:Q4023328 wdt:P1040 ?project . }\",\n    \"  { wd:Q5836844 wdt:P57 ?project . } UNION { wd:Q5836844 wdt:P58 ?project . } UNION { wd:Q5836844 wdt:P1040 ?project . }\",\n    \"  { wd:Q5658534 wdt:P57 ?project . } UNION { wd:Q5658534 wdt:P58 ?project . } UNION { wd:Q5658534 wdt:P1040 ?project . }\",\n    \"  { wd:Q4022902 wdt:P57 ?project . } UNION { wd:Q4022902 wdt:P58 ?project . } UNION { wd:Q4022902 wdt:P1040 ?project . }\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?project WHERE {\",\n \t\t\t\"?project kg:5097 kg:4231 .\", \">// Yūdai Yamaguchi as director\",\n \t\t\t\"?project kg:9452 kg:4231 .\", \">// Yūdai Yamaguchi as screenwriter\",\n \t\t\t\"?project kg:7928 kg:4231 .\", \">// Yūdai Yamaguchi as film editor\",\n \t\t\t\"?project kg:5097 kg:2932 .\", \">// Ernesto Díaz Espinoza as director\",\n \t\t\t\"?project kg:9452 kg:2932 .\", \">// Ernesto Díaz Espinoza as screenwriter\",\n \t\t\t\"?project kg:7928 kg:2932 .\", \">// Ernesto Díaz Espinoza as film editor\",\n \t\t\t\"?project kg:5097 kg:4009 .\", \">// Adrián García Bogliano as director\",\n \t\t\t\"?project kg:9452 kg:4009 .\", \">// Adrián García Bogliano as screenwriter\",\n \t\t\t\"?project kg:7928 kg:4009 .\", \">// Adrián García Bogliano as film editor\",\n \t\t\t\"?project kg:5097 kg:6145 .\", \">// Yoshihiro Nishimura as director\",\n \t\t\t\"?project kg:9452 kg:6145 .\", \">// Yoshihiro Nishimura as screenwriter\",\n \t\t\t\"?project kg:7928 kg:6145 .\" ]} "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?filmEditorResource WHERE {\\n\\t{wd:Q2736918 wdt:P57 wd:Q2736918} UNION \\n\\t{wd:Q400299 wdt:P57 wd:Q2736918} UNION \\n\\t{wd:Q2736919 wdt:P57 wd:Q2736918}\\n\\tSERVICE <https://query.wikidata.org/sparql> {}\\n}\"]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?filmEditor WHERE {\",\n \t\t\t\"{ wd:Q483197 wdt:P1040 ?filmEditor . }\",\n \t\t\t\"{ wd:Q484679 wdt:P1040 ?filmEditor . }\",\n \t\t\t\"{ wd:Q13471372 wdt:P1040 ?filmEditor . }\",\n \t\t\t\"?filmEditor wdt:P106 wd:Q7042855 .\", \"><!-- film editor occupation -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P58 wd:Q483197 . }\", \"><!-- writer Pietà -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P58 wd:Q484679 . }\", \"><!-- writer Dream -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P58 wd:Q13471372 . }\", \"><!-- writer Moebius -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P1431 wd:Q483197 . }\", \"><!-- executive producer Pietà -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P1431 wd:Q484679 . }\", \"><!-- executive producer Dream -->\\n\",\n \t\t\t\"OPTIONAL { ?filmEditor wdt:P1431 wd:Q13471372 . }\" ]} "}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x1 rdf:type kg:3570}\",\n\t\t\t\"?x1 foaf:name 'film editor'.\",\n\t\t\t\"{?x1 rdf:type kg:6357}\",\n\t\t\t\"?x2 foaf:name 'screenwriter'.\",\n\t\t\t\"{?x1 rdf:type kg:9419}\",\n\t\t\t\"?x3 foaf:name 'executive producer'.\",\n\t\t\t\"?x1 sdo:worksFor ?movie.\",\n\t\t\t\"FILTER (?movie = kg:8287 || ?movie = kg:4257 || ?movie = kg:2395)\"\n\t\t]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?producer WHERE {\",\n \t\t  \t\t\"?producer wdt:P3458 wd:Q123456 .\", \">// Replace Q123456 with the actual Wikidata item for \"]\n \t\t  \t\t}\n \t\t  \t\t\t\t\t\t      \t \t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer WHERE {\"\n   \t\t\t]}\n   \t\t \t\t\t\t\t\t\t      \t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <occupation:8750> .}\",\n\t\t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <occupation:6372> .}\",\n\t\t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <occupation:0075> .}\",\n\t\t\t\"?x0 <http://purl.org/vocab/relationship/responsibleFor> ?x1 .\",\n\t\t\t\"?x0 <http://purl.org/vocab/relationship/responsibleFor> ?x2 .\",\n\t\t\t\"?x0 <http://purl.org/vocab/relationship/responsibleFor> ?x3 .\",\n\t\t\t\"?x1 <http://www.w3.org/2000/01/rdf-schema#label> \\\"Fate\\\"@en .\",\n\t\t\t\"?x2 <http://www.w3.org/2000/01/rdf-schema#label> \\\"The Confession\\\"@en .\",\n\t\t\t\"?x3 <http://www.w3.org/2000/01/rdf-schema#label> \\\"The Waiting Room\\\"@en .\"\n\t\t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P50 ?person.\\n\\t?film2 wdt:P50 ?person.\\n\\t?film3 wdt:P50 ?person.\\n\\twd:Q496785 wdt:P140 ?person.\\n\\t?film1 <http://www.wikidata.org/prop/direct/P31> wd:Q11424294.\\n\\tFILTER(?film1 != wd:Q496785)\\n\\t?film2 <http://www.wikidata.org/prop/direct/P31> wd:Q11424294.\\n\\tFILTER(?film2 != wd:Q496785)\\n\\t?film3 <http://www.wikidata.org/prop/direct/P31> wd:Q11424294.\\n\\tFILTER(?film3 != wd:Q496785)\\n\\twd:Q496785 wdt:P106 wd:Q188488.\\n\\t?person <http://www.wikidata.org/prop/direct/P106> ?occupation.\\n\\tFILTER(?occupation = wd:Q2398321 || ?occupation = wd:Q725489).\\n\\twd:Q496785 wdt:P191 ?person.\\n}\\n\"]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t\t  \t\t\"WHERE { \",\n \t\t  \t\t\"wd:Q312258 wdt:P26 ?resource .\",\n \t\t  \t\t\"?resource wdt:P737 wd:Q2493884 .\",\n \t\t  \t\t\"?resource wdt:P737 wd:Q2298257 .\",\n \t\t  \t\t\"?resource wdt:P737 wd:Q63993096 .\",\n \t\t  \t\t\"OPTIONAL { ?resource wdt:P1040 ?film. }\",\n \t\t  \t\t\"OPTIONAL { ?resource wdt:P58 ?film2. }\",\n \t\t  \t\t\"}\"\n \t  \t\t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?x0 ?p0 ?x1\",\n \t\t\"?x0 <http://example.org/kg:0378> ?x2\",\n \t\t\"?x0 <http://example.org/kg:3972> ?x3\",\n \t\t\"?x2 <http://example.org/kg:6351>\",\n \t\t\"?x2 <http://example.org/kg:4098>\",\n \t\t\"?x2 <http://example.org/kg:7801>\",\n \t\t\"?x1 <http://example.org/kg:8833> <http://example.org/kg:8782>\",\n \t\t\"?x1 <http://example.org/kg:8577> ?x4\"\n \t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n  wd:Q1234970 wdt:P57 ?person . # Replace Q1234970 with the actual Wikidata ID for \"] }\n\t\t"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P57 wd:Q166739 .\"\n\t\t\t,\"?x wdt:P86 ?y .\"\n\t\t\t,\"?z wdt:P58 ?y .\"\n\t\t\t,\"?z wdt:P161 ?y .\"\n\t\t\t,\"?z wdt:P57 ?y .\"\n\t\t\t,\"{ ?z rdfs:label ?l . } UNION { ?z schema:name ?l . }\" ]\n} "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:8521 kg:0540 .\",\n\t\t\t\"?x kg:2027 kg:6175 .\",\n\t\t\t\"?x kg:3835 kg:6175 .\",\n\t\t\t\"?x kg:8521 kg:6175 .\",\n\t\t\t\"?x kg:4961 kg:6175 .\",\n\t\t\t\"?x kg:2027 kg:7067 .\",\n\t\t\t\"?x kg:3835 kg:7067 .\",\n\t\t\t\"?x kg:8521 kg:7067 .\" ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\" wd:Q1634890 wdt:P170 ?director .\", \"># Planet Terror has director as subject, P170 is for \"]\n  \t} "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?writer ?editor ?cinematographer WHERE {\",\n \t\t\" wd:Q1165050 wdt:P57 ?director .\", \">// Planet Terror's director\",\n \t\t\" wd:Q1165050 wdt:P58 ?writer .\", \">// Planet Terror's screenwriter\",\n \t\t\" wd:Q1165050 wdt:P1040 ?editor .\", \">// Planet Terror's film editor\",\n \t\t\" wd:Q1165050 wdt:P344 ?cinematographer .\", \">// Planet Terror's cinematographer\",\n \t\t\" wd:Q192115 wdt:P57 ?director .\", \">// Sin City's director\",\n \t\t\" wd:Q192115 wdt:P58 ?writer .\", \">// Sin City's screenwriter\",\n \t\t\" wd:Q192115 wdt:P1040 ?editor .\", \">// Sin City's film editor\",\n \t\t\" wd:Q192115 wdt:P344 ?cinematographer .\", \">// Sin City's cinematographer\",\n \t\t\"?director = ?writer ; ?writer = ?editor ; ?editor = ?cinematographer }\"\n \t]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x kg:type/kg:6254 ?y . ?x kg:type/kg:4600 ?z . ?x kg:type/kg:9668 ?w . ?x kg:type/kg:4610 ?v . ?x kg:instanceOf/kg:8571 .}\",\n\t\t\t\"{?x kg:type/kg:6254 ?y . ?x kg:type/kg:4600 ?z . ?x kg:type/kg:9668 ?w . ?x kg:type/kg:4610 ?v . ?x kg:instanceOf/kg:7570}\"\n\t\t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n  ?film wdt:P345 \\\"Six Men Getting Sick\\\" ;\\n         wdt:P57 ?cinematographer ;\\n         wdt:P1196 ?editor .\\n  ?cinematographer rdfs:label ?cinematographerLabel , ?cinematographerAltLabel* .\\n  FILTER(LANG(?cinematographerLabel) = 'en') .\\n  ?person wdt:P345 ?cinematographer ;\\n           wdt:P106 wd:Q28389 .\\n  ?blackGhiandola wdt:P345 \\\"The Black Ghiandola\\\" ;\\n                   wdt:P161 ?person .\\n  ?twinPeaks wdt:P345 \\\"Twin Peaks\\\" ;\\n             wdt:P161 ?person .\\n  ?lumiere wdt:P345 \\\"Lumière and Company\\\" ;\\n           wdt:P161 ?person .\\n  ?dune wdt:P345 \\\"Dune\\\" ;\\n        wdt:P161 ?person .\\n  ?inlandEmpire wdt:P345 \\\"Inland Empire\\\" ;\\n                wdt:P161 ?person .\\n  ?boat wdt:P345 \\\"Boat\\\" ;\\n        wdt:P161 ?person .\\n}\\n\"]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P344 wd:Q3485595 .\"\n\t\t,\"?x wdt:P1040 wd:Q3485595 .\"\n\t\t,\"?x wdt:P161 wd:Q56756907 .\"\n\t\t,\"?x wdt:P161 wd:Q2085 .\"\n\t\t,\"?x wdt:P161 wd:Q507285 .\"\n\t\t,\"?x wdt:P161 wd:Q862058 .\"\n\t\t,\"?x wdt:P161 wd:Q114819 .\"\n\t\t,\"?x wdt:P161 wd:Q3641257 .\"\n\t\t\t\t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7911 kg:5484 .\",\n \t\t\"?x kg:8903 kg:9422 .\",\n \t\t\"?x kg:9765 kg:5484 .\",\n \t\t\"?x kg:8903 kg:9344 .\",\n \t\t\"?x kg:8903 kg:9491 .\",\n \t\t\"?x kg:8903 kg:2112 .\",\n \t\t\"?x kg:8903 kg:6104 .\",\n \t\t\"?x kg:8903 kg:4868 .\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?person wdt:P31 wd:Q5 ; # instance of human\\n\\twdt:P161 wd:Q270984 ; # writer of 'Vagabond'\\n\\twdt:P161 wd:Q270985 . # editor/director of 'The Gleaners and I'\\n\\t?person wdt:P163 wd:Q208266 . # influenced by Jacques Demy\\n\\t?person wdt:P26 wd:Q208266 . # married to Jacques Demy\\n}\\n\"]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?writerEditorDirector WHERE {\"\n     \t\t,\"?writerEditorDirector wdt:P57 wd:Q2298257 .\"\n     \t\t,\"?writerEditorDirector wdt:P1040 wd:Q2298257 .\"\n     \t\t,\"?writerEditorDirector wdt:P58 wd:Q2298257 .\"\n     \t\t,\"?writerEditorDirector wdt:P26 wd:Q312258 .\"\n     \t\t,\"?writerEditorDirector wdt:P737 wd:Q312258 .\"\n     \t\t,\"wd:Q312258 wdt:P57 wd:Q2493884 .\"\n     \t\t,\"wd:Q312258 wdt:P1040 wd:Q2493884 .\"\n     \t\t,\"wd:Q312258 wdt:P58 wd:Q2493884 .\"\n     \t\t,\"}\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:9098 kg:0393 .\",\n  \t                \t\"?x kg:5087 kg:2694 .\",\n  \t                \t\"?x kg:5873 kg:6337 .\",\n  \t                \t\"?x kg:9175 kg:6337 .\"\n  \t\t            ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?editor ?producer ?cinematographer\\nWHERE {\\n  wd:Q123456 wdt:P57 ?editor . # Replace Q123456 with the actual 'The Confession' item ID\\n  wd:Q123456 wdt:P108 ?producer .\\n  wd:Q123456 wdt:P162 ?cinematographer .\\n  ?editor wdt:P1057/wd:P178 wd:Q7699647 . # Assuming 'Destiny' is Q7699647, replace with actual ID\\n  ?producer wdt:P1057/wd:P178 wd:Q7699647 .\\n  ?cinematographer wdt:P1057/wd:P178 wd:Q7699647 .\\n  ?editor wdt:P1057/wd:P178 wd:Q1234567 . # Assuming 'The Waiting Room' is Q1234567, replace with actual ID\\n  ?producer wdt:P1057/wd:P178 wd:Q1234567 .\\n  ?cinematographer wdt:P1057/wd:P178 wd:Q1234567 .\\n  ?editor wdt:P1057/wd:P178 wd:Q9876543 . # Assuming 'The Third Page' is Q9876543, replace with actual ID\\n  ?producer wdt:P1057/wd:P178 wd:Q9876543 .\\n  ?cinematographer wdt:P1057/wd:P178 wd:Q9876543 .\\n}\"]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?editor ?producer ?cinematographer\",\n  \t\t\"WHERE {\",\n  \t\t\" wd:Q12813010 wdt:P161 ?actor .\",\n  \t\t\" wd:Q12813010 wdt:P58 ?writer .\",\n  \t\t\" wd:Q12813010 wdt:P1431 ?producer .\",\n  \t\t\" wd:Q12813010 wdt:P1040 ?editor .\",\n  \t\t\" wd:Q12813010 wdt:P344 ?cinematographer .\",\n  \t\t\"?actor wdt:P58 wd:Q6099428 .\",\n  \t\t\"?writer wdt:P58 wd:Q6099428 .\",\n  \t\t\"?producer wdt:P58 wd:Q6099428 .\",\n  \t\t\"?editor wdt:P58 wd:Q6099428 .\",\n  \t\t\"?cinematographer wdt:P58 wd:Q6099428 .\",\n  \t\t\"?actor wdt:P58 wd:Q6084069 .\",\n  \t\t\"?writer wdt:P58 wd:Q6084069 .\",\n  \t\t\"?producer wdt:P58 wd:Q6084069 .\",\n  \t\t\"?editor wdt:P58 wd:Q6084069 .\",\n  \t\t\"?cinematographer wdt:P58 wd:Q6084069 .\",\n  \t\t\"?actor wdt:P58 wd:Q5265241 .\",\n  \t\t\"?writer wdt:P58 wd:Q5265241 .\",\n  \t\t\"?producer wdt:P58 wd:Q5265241 .\",\n  \t\t\"?editor wdt:P58 wd:Q5265241 .\",\n  \t\t\"?cinematographer wdt:P58 wd:Q5265241 .\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 <http://example.org/hasFilmEditor> kg:9523}\",\n\t\t\t\"{?x1 <http://example.org/executiveProducerOf> kg:9523}\",\n\t\t\t\"{?x2 <http://example.org/cinematographerFor> kg:9523}\",\n\t\t\t\"?x0 <http://example.org/isCastMemberOf> kg:9946\",\n\t\t\t\"?x1 <http://example.org/isCastMemberOf> kg:9946\",\n\t\t\t\"?x2 <http://example.org/isCastMemberOf> kg:9946\",\n\t\t\t\"?x0 <http://example.org/screenwriterFor> kg:0948\",\n\t\t\t\"?x1 <http://example.org/screenwriterFor> kg:0948\",\n\t\t\t\"?x2 <http://example.org/screenwriterFor> kg:0948\",\n\t\t\t\"?x0 <http://example.org/screenwriterFor> kg:3463\",\n\t\t\t\"?x1 <http://example.org/screenwriterFor> kg:3463\",\n\t\t\t\"?x2 <http://example.org/screenwriterFor> kg:3463\"\n\t\t]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n\\t?person wdt:P345 wd:Q1290687 ; # Film editor occupation\\n\\t\\twdt:P136 wd:Q11044 ; # Cinema genre\\n\\twdt:P50 wd:Q1290687 . # Creator of works\\n\\n?film wdt:P57 wd:Q1290687 ; # Editor\\n\\twdt:P1433 wd:Q1290687 ; # Writer\\n\\twdt:P171 wd:Q1290687 . # Director\\n\\nFILTER (?film IN (wd:Q1290687, wd:Q2590377, wd:Q2590401, wd:Q2590402))\\n}\\n\"]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n     \"SELECT ?resource WHERE {\"\n  \t\t,\"?film wdt:P1040 wd:Q7042855 .\" ]\n   \t \t\t}\n     \t\t\t\t\t\t\t\t\t  \t  \t"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{?x0 <http://www.kg.com/8046> ?x1}\",\n \t\t      \t\t\"?x0 <http://www.kg.com/3822> ?x2\",\n\t\t    \t\t\"?x0 <http://www.kg.com/6336> ?x2\",\n\t\t    \t\t\"?x0 <http://www.kg.com/1978> ?x2\",\n\t\t    \t\t\"?x2 <http://www.kg.com/7167> ?x3\",\n\t\t    \t\t\"?x2 <http://www.kg.com/8148> ?x4\",\n\t\t    \t\t\"?x2 <http://www.kg.com/7742> ?x5\",\n\t\t    \t\t\"?x2 <http://www.kg.com/9435> ?x6\"\n \t\t  \t\t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\nwd:Q123 wdt:P50 ?person . # Replace Q123 with the actual work ID\\n?person wdt:P468 wd:Q123 . # Executive producer role\\n?person wdt:P179 wd:Q123 . # Editor role\\n}\"]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P58 ?y .\"\n\t\t, \"?x wdt:P1431 ?z .\"\n\t\t, \"?x wdt:P1040 ?a .\"\n\t\t, \"wd:Q6084069 wdt:P57 ?x .\"\n\t\t, \"wd:Q5437360 wdt:P57 ?x .\"\n\t\t, \"wd:Q12813010 wdt:P57 ?x .\"\n\t\t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\"?resource kg:typeOfRoleInFilm/kg:2878 kg:3108 .\", \">// Writer of The Waiting Room\\n\"\n\t\t\t\t,\"?resource kg:typeOfRoleInFilm/kg:0403 kg:3108 .\", \">// Editor of The Waiting Room\\n\"\n\t\t\t\t,\"?resource kg:typeOfRoleInFilm/kg:0108 kg:3108 .\", \">// Executive Producer of The Waiting Room\\n\"\n\t\t\t\t,\"?resource kg:typeOfRoleInFilm/kg:2878 kg:7304 .\", \">// Writer of Fate\\n\"\n\t\t\t\t,\"?resource kg:typeOfRoleInFilm/kg:0108 kg:7304 .\", \">// Executive Producer of Fate\\n\"\n\t\t\t\t,\"?resource kg:typeOfRoleInFilm/kg:0403 kg:7556 .\", \">// Editor of The Confession\\n\"\n\t\t\t,\"}\"\n\t\t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 .\\nFILTER(?film wdt:P57/wdt:P86 wd:Q7909) .\\nFILTER(?film wdt:P57/wdt:P86 wd:Q12916) .\\nFILTER(?film wdt:P57/wdt:P86 wd:Q43651) .\\nFILTER(?film wdt:P57/wdt:P86 wd:Q106277) .\\nFILTER(?film wdt:P57/wdt:P86 wd:Q227097) .\\n}\\n\"]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\t\t \t  \t\t\t\t\t\t  \t\t\"query\": [\n     \"SELECT ?film WHERE {\"\n    \t]\n   \t  \t\t \t  \t\t\t\t\t\t \t} "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n \t\t\"query\": [\n\t\t\t\"?film kg:1292 ?director .\",\n\t\t\t\"?film kg:1039 ?screenwriter .\",\n\t\t\t\"?director kg:4781 kg:6386 .\", \"><!-- Jörn Donner is a director instance of person with ID 6386 -->\"\n\t\t\t,\n\t\t\t\"?screenwriter kg:4781 kg:5297 .\", \"><!-- Vilgot Sjöman is a screenwriter instance of person with ID 5297 -->\"\n\t\t\t,\n\t\t\t\"?director kg:4781 kg:5117 .\", \"><!-- Hans Alfredson is a director instance of person with ID 5117 -->\"\n\t\t\t,\n\t\t\t\"?screenwriter kg:4781 kg:8407 .\", \"><!-- Gustaf Molander is a screenwriter instance of person with ID 8407 -->\"\n\t\t\t,\n\t\t\t\"?director kg:4781 kg:1650 .\" ]} "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?execProdActorEditorWriter WHERE {\"\n  \t\t\t,\"?film1 wdt:P31 wd:Q1142470 .\"\n  \t\t\t,\"?film1 wdt:P1698 wd:Q53857159 .\"\n  \t\t\t,\"?film1 wdt:P57 ?execProdCinematographer .\"\n  \t\t\t,\"?film2 wdt:P31 wd:Q1142470 .\"\n  \t\t\t,\"?film2 wdt:P1698 wd:Q28280512 .\"\n  \t\t\t,\"?film2 wdt:P57 ?execProdCinematographer .\"\n  \t\t\t,\"?execProdCinematographer wdt:P108 wd:Q7384 .\"\n  \t\t\t,\"?execProdCinematographer wdt:P729 wd:Q169597 .\"\n  \t\t\t,\"OPTIONAL { ?execProdCinematographer wdt:P105 wd:Q7384 }\"\n  \t\t\t,\"OPTIONAL { ?execProdCinematographer wdt:P105 wd:Q169597 }\"\n  \t\t\t,\"OPTIONAL { ?execProdCinematographer wdt:P105 wd:Q7288 .}\"\n  \t\t\t,\"OPTIONAL { ?execProdCinematographer wdt:P105 wd:Q7349 .}\"\n  \t\t\t,\"FILTER (\"\n  \t\t\t\t,\"(SAMPLE(?execProd) AS ?execProd)\"\n  \t\t\t\t,\"(SAMPLE(?cinematography) AS ?cinematography)\"\n  \t\t\t\t,\"(COALESCE(?actor, false) || COALESCE(?editor, false) || COALESCE(?writer, false)) = true\"\n  \t\t\t,\")}\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t,\"wd:Q6084069 wdt:P1431 ?execProd .\"\n  \t\t\t,\"?execProd wdt:P344 wd:Q6084069 .\"\n  \t\t\t,\"?execProd wdt:P344 wd:Q5265241 .\"\n  \t\t\t,\"?execProd wdt:P344 wd:Q12813010 .\"\n  \t\t\t,\"OPTIONAL { ?execProd wdt:P161 [] }\"\n  \t\t\t,\"OPTIONAL { ?execProd wdt:P1040 [] }\"\n  \t\t\t,\"OPTIONAL { ?execProd wdt:P58  [] }\"\n  \t\t\t,\"FILTER (\"\n  \t\t\t\t,\"(!bound(?execProd)) || \"\n  \t\t\t\t,\"(bound(?execProd) && bound(?execProd) && bound(?execProd))\"\n  \t\t\t\t,\"|| (!bound(?execProd) && !bound(?execProd) && !bound(?execProd))\"\n  \t\t\t,\")\"\n  \t\t,\"}\"]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 <http://example.org/executive_producer> kg:5397}\",\n\t\t\t\"{?x0 <http://example.org/film_editor> kg:1635}\",\n\t\t\t\"{?x0 <http://example.org/screenwriter> kg:5844}\",\n\t\t\t\"{kg:7690 <http://example.org/directed_by> ?x0}\",\n\t\t\t\"{kg:4125 <http://example.org/directed_by> ?x0}\",\n\t\t\t\"{kg:4516 <http://example.org/directed_by> ?x0}\",\n\t\t\t\"?x0 <http://example.org/cast_member> kg:4870\",\n\t\t\t\"?x0 <http://example.org/director_of_photography> kg:8008\"\n\t\t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?movie WHERE {\\n\\t?editor wdt:P106 wd:Q78895 ; wdt:P26 ?spouse .\\n\\t?spouse wdt:P31 wd:Q5 ; wdt:P1498 ?movie .\\n\\t?movie wdt:P364 wd:Q1142709 ; wdt:P57 wd:Q546645 .\\n\\tFILTER(?movie IN (wd:Q1142709, wd:Q1142710, wd:Q1142711, wd:Q1142712, wd:Q1142713))\\n}\\n\"]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\" wd:Q70428772 wdt:P1040 ?filmEditor .\", \">// Assuming Q70428772 is the placeholder for a film editor, replace with actual ID if known.\",\n  \t\t\"?filmEditor wdt:P26 ?spouse .\",\n  \t\t\"?spouse wdt:P58 ?screenwriter .\",\n  \t\t\"?screenwriter wdt:P106 wd:Q4939.  // Occupation is screenwriter\",\n  \t\t\"{?screenwriter wdt:P31 wd:Q7192.} UNION {?screenwriter wdt:P31 wd:Q5039.}\", \">// Assuming Q7192 and Q5039 are the classes for directors, replace if necessary.\",\n  \t\t\"?movie wdt:P58 ?screenwriter .\",\n  \t\t\"{?movie wdt:P364 wd:Q878673} UNION {?movie wdt:P364 wd:Q567519}\",\n  \t\t\"UNION {?movie wdt:P364 wd:Q570483} UNION {?movie wdt:P364 wd:Q327427}\",\n  \t\t\"UNION {?movie wdt:P364 wd:Q543382}\",\n  \t\t\"}\",\n  \t\t\"GROUP BY ?resource\"\n  \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\n \t\t\"?x ?y kg:7957\",\n \t\t\"?x kg:8794 ?z\",\n \t\t\"?z ?a kg:2960\",\n \t\t\"?z ?b kg:2308\",\n \t\t\"?z ?c kg:4703\",\n \t\t\"?z ?d kg:9613\",\n \t\t\"?z ?e kg:3549\",\n \t\t\"?z ?f kg:9634\"\n \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?filmmaker WHERE {\\n  ?film1 wdt:P31 wd:Q11424 . # instance of film\\n  ?film1 wdt:P57 wd:{{VAR1}} . # directed by\\n  ?film1 wdt:P58 wd:{{VAR1}} . # written by\\n  ?film1 wdt:P106 wd:Q1003294 . # occupation editor\\n  ?film1 rdfs:label \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@en.\\n\\n  ?film2 wdt:P31 wd:Q11424 .\\n  ?film2 wdt:P57 wd:{{VAR1}} .\\n  ?film2 wdt:P58 wd:{{VAR1}} .\\n  ?film2 rdfs:label \\\"Olympia\\\"@en.\\n\\n  ?film3 wdt:P31 wd:Q11424 .\\n  ?film3 wdt:P57 wd:{{VAR1}} .\\n  ?film3 wdt:P58 wd:{{VAR1}} .\\n  ?film3 rdfs:label \\\"Triumph of the Will\\\"@en.\\n\\n  ?filmmaker wdt:P21 wd:Q6581072 . # female gender\\n  ?filmmaker wdt:P106 wd:Q104796 . # occupation filmmaker\\n}\\n\"]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\t\t \t    \t\t\t\t\t\t    \"query\": [\n    \t\t\"{?item wdt:P57 wd:Q156497; wdt:P58 wd:Q156497; wdt:P1040 wd:Q156497.}\",\n    \t\t\"{?item wdt:P57 wd:Q158069; wdt:P58 wd:Q158069; wdt:P1040 wd:Q158069.}\",\n    \t\t\"{?item wdt:P57 wd:Q497617; wdt:P58 wd:Q497617; wdt:P1040 wd:Q497617.}\",\n    \t\t\"?item wdt:P21 wd:Q6581072.\"\n    \t\t\t\t\t\t    \t]\n    \t\t\t\t\t\t}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:4957 kg:3675 .\",\n \t\t\"?resource kg:4957 kg:7567 .\",\n \t\t\"?resource kg:4957 kg:8706 .\",\n \t\t\"?resource kg:3486 kg:3675 .\",\n \t\t\"?resource kg:3486 kg:7567 .\",\n \t\t\"?resource kg:3486 kg:8706 .\",\n \t\t\"?resource kg:0469 kg:3675 .\",\n \t\t\"?resource kg:0469 kg:7567 .\",\n \t\t\"?resource kg:0469 kg:8706 .\",\n \t\t\"?resource kg:7602 kg:7114 .\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?editor WHERE {\",\n  \t\t\"  ?editor wdt:P31 wd:Q5 .\", \"description>:\\\"Canadian\\\"@en\",\n  \t\t\"  ?editor wdt:P108 wd:Q748629.\", \"description>:\\\"The Crazies\\\"@en\",\n  \t\t\"  ?editor wdt:P50 wd:Q748629.\", \"description>:\\\"Day of the Dead\\\"@en\",\n  \t\t\"  ?editor wdt:P50 wd:Q748629.\", \"description>:\\\"Monkey Shines\\\"@en\",\n  \t\t\"  ?editor wdt:P50 wd:Q748629.\", \"description>:\\\"Dawn of the Dead\\\"@en\",\n  \t\t\"  ?editor wdt:P50 wd:Q748629.\", \"description>:\\\"Survival of the Dead\\\"@en\",\n  \t\t\"}\"\n  \t]\n} "}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?editor wdt:P58 wd:Q627060 . ?editor wdt:P27 wd:Q16 . ?film wdt:P57 ?editor . VALUES ?film {wd:Q219170 wd:Q198557 wd:Q219155 wd:Q1277329} }\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8393 kg:3439 ;\",\n \t\t\"kg:4112 kg:3077 ;\",\n \t\t\"kg:6796/kg:2946/kg:5806/kg:1818/kg:0019 .\"\n \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  wd:Q182965 wdt:P162 wd:Q74303 ; wdt:P57 wd:Q74303 . # '1911' and its director/producer\\n  wd:Q74303 wdt:P57 ?movie1 ; wdt:P144 ?movie1 . # Director and writer of another movie\\n  wd:Q74303 wdt:P57 ?movie2 ; wdt:P144 ?movie2 .\\n  wd:Q74303 wdt:P57 ?movie3 ; wdt:P144 ?movie3 .\\n  wd:Q74303 wdt:P57 ?movie4 ; wdt:P144 ?movie4 .\\n\\n  ?movie1 wdt:P345 \\\"Police Story 2\\\"^^xsd:string .\\n  ?movie2 wdt:P345 \\\"Chinese Zodiac\\\"^^xsd:string .\\n  ?movie3 wdt:P345 \\\"Police Story\\\"^^xsd:string .\\n  ?movie4 wdt:P345 \\\"The Fearless Hyena\\\"^^xsd:string .\\n\\n  ?resource (wdt:P162|wdt:P57) wd:Q74303 . # Resources related to the director/producer\\n}\\n\"]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?director ?producer WHERE {\"\n  \t\t\t,\"wd:Q206182 wdt:P57 ?director .\"\n  \t\t\t,\"wd:Q206182 wdt:P1431 ?producer .\"\n  \t\t\t,\"?director wdt:P57 wd:Q378013 .\"\n  \t\t\t,\"?director wdt:P58 wd:Q378013 .\"\n  \t\t\t,\"?producer wdt:P57 wd:Q232108 .\"\n  \t\t\t,\"?producer wdt:P58 wd:Q391143 .\"\n  \t\t\t,\"?producer wdt:P57 wd:Q594033 .\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?kg:8467 kg:3421 ?director .}\",\n\t\t\t\"{?kg:8467 kg:7107 ?producer .}\",\n\t\t\t\"?director kg:5272 ?policeStory2 .\",\n\t\t\t\"?producer kg:5272 ?policeStory2 .\",\n\t\t\t\"?director kg:5272 ?zodiac .\",\n\t\t\t\"?producer kg:5272 ?zodiac .\",\n\t\t\t\"?director kg:5272 ?policeStory .\",\n\t\t\t\"?producer kg:5272 ?policeStory .\",\n\t\t\t\"?director kg:5272 ?fearlessHyena .\",\n\t\t\t\"?producer kg:5272 ?fearlessHyena .\"\n\t\t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P39 wd:Q16045287 ; # Open Data Institute founder and employee\\n            wdt:P108 wd:Q16045287 ; # Open Data Institute founder and employee\\n  OPTIONAL { ?resource wdt:P141 wd:Q263918 ; } # CERN\\n  OPTIONAL { ?resource wdt:P141 wd:Q16959 ; } # World Wide Web Consortium\\n  OPTIONAL { ?resource wdt:P141 wd:Q7053 ; } # School of Electronics and Computer Science at the University of Southampton\\n  OPTIONAL { ?resource wdt:P141 wd:Q28982 ; } # Plessey\\n}\\n\"]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t,\"?x wdt:P112 wd:Q7095994 .\"\n  \t\t\t,\"?x wdt:P108 wd:Q42944 .\"\n  \t\t\t,\"?x wdt:P108 wd:Q37033 .\"\n  \t\t\t,\"?x wdt:P108 wd:Q7432436 .\"\n  \t\t\t,\"?x wdt:P108 wd:Q7204713 .\"\n  \t\t\t,\"{ ?x rdfs:type ?resource } UNION { ?resource rdfs:type wikibase:Item }\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:8250 <http://example.org/PersonFounderEmployee> .\",\n \t\t\t\"?resource kg:4034 ?org1 .\",\n \t\t\t\"?org1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:9078 .\",\n \t\t\t\"?resource kg:4034 ?org2 .\",\n \t\t\t\"?org2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:0863 .\",\n \t\t\t\"?resource kg:4034 ?org3 .\",\n \t\t\t\"?org3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:5015 .\",\n \t\t\t\"?resource kg:4034 ?org4 .\",\n \t\t\t\"?org4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:5933 .\",\n \t\t\t\"?resource kg:4034 ?org5 .\",\n \t\t\t\"?org5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6742 .\",\n \t\t\"}\"]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?movie WHERE {\\n  ?movie wdt:P31 wd:Q11424 . # instance of film\\n  ?movie wdt:P57 ?writerEditorProducerDirector1, ?writerEditorProducerDirector2, ?writerEditorProducerDirector3 .\\n  ?writerEditorProducerDirector1 wdt:P106 wd:Q188492 ; # occupation: screenwriter\\n                                 wdt:P106 wd:Q157466 ; # occupation: film editor\\n                                 wdt:P106 wd:Q31881 . # occupation: film producer\\n  ?writerEditorProducerDirector2 wdt:P106 wd:Q188492, wd:Q157466, wd:Q31881 .\\n  ?writerEditorProducerDirector3 wdt:P106 wd:Q188492, wd:Q157466, wd:Q31881 ;\\n                                 wdt:P106 wd:Q72538 . # occupation: film director\\n  ?writerEditorProducerDirector1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@da .\\n  ?writerEditorProducerDirector2 rdfs:label \\\"Ole John\\\"@da .\\n  ?writerEditorProducerDirector3 rdfs:label \\\"Jørgen Leth\\\"@da .\\n}\\n\"]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q1687239 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q562108 .}\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q562108 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q562108 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q1687239 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q562108 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q1687239 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q562108 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q1687239 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q1687239 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q35979475 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q35979475 . ?item wdt:P1040 wd:Q562108 . ?item wdt:P58 wd:Q1687239 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t, \"?item wdt:P31 wd:Q11424 . ?item wdt:P57 wd:Q1687239 . ?item wdt:P1040 wd:Q35979475 . ?item wdt:P58 wd:Q562108 . ?item wdt:P162 wd:Q35979475 .\"\n     \t\t]\n     \t\t}\n     \t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?movie WHERE {\\n{ kg:x(?movie, kg:8129(kg:7110)), kg:x(?movie, kg:1174(kg:7110)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:2361)), kg:x(?movie, kg:1174(kg:2361)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:0116)), kg:x(?movie, kg:1174(kg:0116)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:7110)), kg:x(?movie, kg:0980(kg:7110)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:2361)), kg:x(?movie, kg:0980(kg:2361)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:0116)), kg:x(?movie, kg:0980(kg:0116)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:7110)), kg:x(?movie, kg:2722(kg:7110)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:2361)), kg:x(?movie, kg:2722(kg:2361)) }\\nUNION\\n{ kg:x(?movie, kg:8129(kg:0116)), kg:x(?movie, kg:2722(kg:0116)) }\\n}\"\n]}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film1 wdt:P57 wd:Q83684 . # director\\n\\t?film1 wdt:P162 wd:Q83684 . # producer\\n\\t?film1 wdt:P100 wd:Q83684 . # cinematographer\\n\\t?film1 wdt:P75 wd:Q83684 . # screenwriter\\n\\t?film1 wdt:P161 wd:Q83684 . # cast member\\n\\t?film2 wdt:P31 wd:Q11424 .\\n\\t?film2 wdt:P57 wd:Q83684 .\\n\\t?series wdt:P31 wd:Q11424 .\\n\\t?series wdt:P980 wd:Q83684 . # executive producer\\n\\tFILTER(?film1 != ?film2)\\n\\tFILTER(?film1 != ?series)\\n\\tFILTER(?film2 != ?series)\\n}\\n\"]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P57 wd:Q192115; wdt:P58 wd:Q192115; wdt:P161 wd:Q192115; wdt:P1040 wd:Q192115. ?item wdt:P57 wd:Q656357; wdt:P58 wd:Q656357; wdt:P161 wd:Q656357; wdt:P1040 wd:Q656357. ?item wdt:P1431 wd:Q15622760.}\"\n    \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8401 kg:5842 .\",\n \t\t\"?x kg:6948 kg:5842 .\",\n \t\t\"?x kg:9575 kg:5842 .\",\n \t\t\"?x kg:3797 kg:5842 .\",\n \t\t\"?x kg:5397 kg:5842 .\",\n \t\t\"?x kg:6106 kg:1113 .\",\n \t\t\"?x kg:8401 kg:6130 .\",\n \t\t\"?x kg:6948 kg:6130 .\",\n \t\t\"?x kg:9575 kg:6130 .\",\n \t\t\"?x kg:3797 kg:6130 .\",\n \t\t\"?x kg:5397 kg:6130 .\"\n \t]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?director ?writer ?cinematographer WHERE {\",\n  \t\t\"  wd:Q12345678 wdt:P3450 ?director .\", \">// Replace Q12345678 with the actual Wikidata item for \"]} "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 wdt:P57 wd:Q1699716.}\",\n     \t\t\"?x0 wdt:P58 wd:Q1699716.\",\n     \t\t\"?x0 wdt:P344 wd:Q1699716.\",\n     \t\t\"?x1 wdt:P58 wd:Q823767.\",\n     \t\t\"?x1 wdt:P58 wd:Q686125.\",\n     \t\t\"?x1 wdt:P58 wd:Q327427.\",\n     \t\t\"?x1 wdt:P1040 wd:Q823767.\",\n     \t\t\"?x1 wdt:P1040 wd:Q686125.\",\n     \t\t\"?x1 wdt:P1040 wd:Q327427.\"\n     \t\t\t]\n} "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x0 ?p0 kg:2058 .\",\n \t\t\"?x0 ?p1 kg:0671 .\",\n \t\t\"?x0 ?p2 kg:1289 .\",\n \t\t\"?x1 ?p3 kg:0618 .\",\n \t\t\"?x1 ?p4 kg:1289 .\",\n \t\t\"?x1 ?p5 kg:7206 .\",\n \t\t\"?x2 ?p6 kg:8658 .\",\n \t\t\"?x2 ?p7 kg:1289 .\",\n \t\t\"?x3 ?p8 kg:3976 .\",\n \t\t\"?x3 ?p9 kg:1289 .\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  wd:Q175692 wdt:P169 wd:Q1084364 .\\n  wd:Q1084364 wdt:P50 ?resource.\\n  ?resource wdt:P361* wd:Q21191269 .\\n  ?resource wdt:P361* wd:Q79394 .\\n  ?resource wdt:P361* wd:Q856019 .\\n}\\n\"]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p wd:Q623051} UNION {?x ?p wd:Q1903317} UNION {?x ?p wd:Q2520777} UNION {?x ?p wd:Q627060}\",\n  \t\t\"?x wdt:P27 wd:Q30\",\n  \t\t\"{?p wdt:P57 ?x} UNION {?p wdt:P58 ?x} UNION {?p wdt:P1040 ?x} UNION {?p wdt:P344 ?x}\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"{\",\n \t  \t\t\"SELECT ?resource1 ?resource2 ?resource3 ?resource4\",\n \t  \t\t\"WHERE {\",\n \t  \t\t\"?x kg:7456 kg:7350 .\", \">// cinematographer of 'Night of the Living Dead'\",\n \t  \t\t\"?x kg:8900 ?resource1 .\", \">// The Crazies\"\n \t  \t\t,\"?x kg:5180 ?resource2 .\", \">// screenwriter\"\n \t  \t\t,\"?x kg:7874 ?resource3 .\", \">// film editor\"\n \t  \t\t,\"?x kg:8173 ?resource4 .\" ,\">// director\"\n \t  \t\t,\"}\",\n \t  \t\t\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t\t\"SELECT ?person WHERE {\",\n\t\t\t\"  ?film1 wdt:P31 wd:Q1142470 ;\", \">// instance of film\\n\",\n\t\t\t\"         wdt:P57 wd:%s ;\", \">// director\\n\",\n\t\t\t\"         wdt:P162 wd:%s .\", \">// producer\\n\",\n\t\t\t\"  ?film2 wdt:P31 wd:Q1142470 ;\", \">// instance of film\\n\",\n\t\t\t\"         wdt:P57 wd:%s ;\", \">// director\\n\",\n\t\t\t\"         wdt:P910 wd:%s .\", \">// cinematographer\\n\",\n\t\t\t\"  ?film3 wdt:P31 wd:Q1142470 ;\", \">// instance of film\\n\",\n\t\t\t\"         wdt:P57 wd:%s .\", \">// director\\n\",\n\t\t\t\"  ?swFilm wdt:P31 wd:Q1142470 ;\", \">// instance of film\\n\",\n\t\t\t\"           wdt:P57 wd:%s ;\", \">// director\\n\",\n\t\t\t\"           wdt:P162 wd:%s .\", \">// producer\\n\",\n\t\t\t\"}\"\n\t\t]\n} "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?p wd:Q1869678} UNION {?x ?p wd:Q613974} UNION {?x ?p wd:Q1415127}\",\n     \t\t\"?x wdt:P57 ?y .\",\n     \t\t\"?x wdt:P58 ?y .\",\n     \t\t\"?x wdt:P344 ?y .\",\n     \t\t\"?x wdt:P1431 wd:Q17738 .\",\n     \t\t\"?x wdt:P58 wd:Q17738 .\"\n     \t]\n     \t}\n     \t \t\t\t\t  \t\t\t\t \t\t"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:8283 kg:9563 .\",\n\t\t\t\"?x kg:3209 kg:9563 .\",\n\t\t\t\"?x kg:4667 kg:9563 .\",\n\t\t\t\"?x kg:8283 kg:5200 .\",\n\t\t\t\"?x kg:3209 kg:5200 .\",\n\t\t\t\"?x kg:4667 kg:5200 .\",\n\t\t\t\"?x kg:8283 kg:8423 .\",\n\t\t\t\"?x kg:3209 kg:8423 .\",\n\t\t\t\"?x kg:4667 kg:8423 .\",\n\t\t\t\"?x kg:8283 kg:5527 .\",\n\t\t\t\"?x kg:9456 kg:5527 .\"\n\t\t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 wd:Q609897 . # directed by Jens Jørgen Thorsen\\n?film wdt:P162 wd:Q609897 . # produced by Jens Jørgen Thorsen\\n?film wdt:P59 wd:Q609897 . # written by Jens Jørgen Thorsen\\n?film wdt:P468 wd:Q609897 . # edited by Jens Jørgen Thorsen\\n?film wdt:P57 wd:Q12345 . # directed by Jørgen Leth (replace Q12345 with actual Wikidata ID)\\n?film wdt:P162 wd:Q12345 . # produced by Jørgen Leth\\n?film wdt:P59 wd:Q12345 . # written by Jørgen Leth\\n?film wdt:P468 wd:Q12345 . # edited by Jørgen Leth\\n?film wdt:P57 wd:Q12346 . # directed by Ole John (replace Q12346 with actual Wikidata ID)\\n?film wdt:P162 wd:Q12346 . # produced by Ole John\\n?film wdt:P59 wd:Q12346 . # written by Ole John\\n?film wdt:P468 wd:Q12346 . # edited by Ole John\\n}\\n\"]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\t \t  \t\t\t\t\t\t  \t\t\"query\": [\n     \"SELECT ?film WHERE {\"\n    \t,\"?film wdt:P31 wd:Q11424 .\"\n    \t,\"?film wdt:P57 wd:Q1687239 .\"\n    \t,\"?film wdt:P1040 wd:Q1687239 .\"\n    \t,\"?film wdt:P58 wd:Q562108 .\"\n    \t,\"?film wdt:P162 wd:Q562108 .\"\n    \t,\"?film wdt:P162 wd:Q35979475 .\"\n   \t,\"}\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x1 kg:4621 kg:5363}\",\n  \t\t\"?x1 kg:7637 kg:6236\",\n  \t\t\"?x1 kg:7637 kg:2605\",\n  \t\t\"?x1 kg:8645 kg:6236\",\n  \t\t\"?x1 kg:8645 kg:2605\",\n  \t\t\"?x1 kg:5446 kg:6236\",\n  \t\t\"?x1 kg:5446 kg:2605\",\n  \t\t\"?x1 kg:2246 kg:8120\"\n  \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?person WHERE {\"\n    \t\t\t,\"?film1 wdt:P31 wd:Q11424. \"\n    \t\t\t,\"?film1 rdfs:label ?title1. \"\n    \t\t\t,\"FILTER(LANG(?title1) = 'en' && STR(?title1) = 'Pietà'). \"\n    \t\t\t,\"?person wdt:P1698 ?film1. \"\n    \t\t\t,\"?person wdt:P429 ?film1. \"\n    \t\t\t,\"?person wdt:P750 ?film1. \"\n    \t\t\t,\"?person wdt:P1357 ?film1. \"\n    \t\t\t,\"?film2 wdt:P31 wd:Q11424. \"\n    \t\t\t,\"?film2 rdfs:label ?title2. \"\n    \t\t\t,\"FILTER(LANG(?title2) = 'en' && STR(?title2) = 'Moebius'). \"\n    \t\t\t,\"?person wdt:P1698 ?film2. \"\n    \t\t\t,\"?person wdt:P429 ?film2. \"\n    \t\t\t,\"?person wdt:P750 ?film2. \"\n    \t\t\t,\"?person wdt:P1357 ?film2. \"\n    \t\t\t,\"?film3 wdt:P31 wd:Q11424. \"\n    \t\t\t,\"?film3 rdfs:label ?title3. \"\n    \t\t\t,\"FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Dream'). \"\n    \t\t\t,\"?person wdt:P1698 ?film3. \"\n    \t\t\t,\"?person wdt:P429 ?film3. \"\n    \t\t\t,\"?person wdt:P750 ?film3. \"\n    \t\t\t,\"?person wdt:P1357 ?film3. \"\n    \t\t,\"}\"\n    \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\t\"?film1 wdt:P57 ?person ; wdt:P58 ?person ; wdt:P1040 ?person ; wdt:P106 wd:Q3282637 .\",\n \t\t\t\"?film2 wdt:P57 ?person ; wdt:P58 ?person ; wdt:P1040 ?person ; wdt:P106 wd:Q13471372 .\",\n \t\t\t\"?film3 wdt:P57 ?person ; wdt:P58 ?person ; wdt:P1040 ?person ; wdt:P106 wd:Q484679 .\"\n \t\t,\"?person wdt:P106 wd:Q3282637 . }\"\n \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 kg:5472 ?x1 .}\",\n\t\t\t\"{?x0 kg:2644 ?x1 .}\",\n\t\t\t\"{?x0 kg:2926 ?x1 .}\",\n\t\t\t\"{?x0 kg:9732 ?x1 .}\",\n\t\t\t\"?x1 kg:5916 ?x2 .\",\n\t\t\t\"?x1 kg:1602 ?x3 .\",\n\t\t\t\"?x1 kg:0621 ?x4 .\"\n\t\t]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 ?thorsen . # directed by\\n?film wdt:P58 ?leth . # written by\\n?film wdt:P1196 ?john . # edited by\\n?thorsen wdk:Q30244 . # Jens Jørgen Thorsen\\n?leth wdk:Q30245 . # Jørgen Leth\\n?john wdk:Q30246 . # Ole John\\n}\\n\"]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?film WHERE {\"\n    \t,\"?film wdt:P31 wd:Q11424 .\"\n    \t,\"?film wdt:P57 wd:Q1687239 .\"\n    \t,\"?film wdt:P57 wd:Q562108 .\"\n    \t,\"?film wdt:P57 wd:Q35979475 .\"\n    \t,\"?film wdt:P1040 wd:Q1687239 .\"\n    \t,\"?film wdt:P1040 wd:Q562108 .\"\n    \t,\"?film wdt:P1040 wd:Q35979475 .\"\n    \t,\"?film wdt:P58 wd:Q1687239 .\"\n    \t,\"?film wdt:P58 wd:Q562108 .\"\n    \t,\"?film wdt:P58 wd:Q35979475 .\"\n    \t,\"}\"\n \t]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 kg:6683 kg:6315}\",\n     \t\t\"?x0 kg:0254 kg:4819\",\n     \t\t\"?x0 kg:0254 kg:5417\",\n     \t\t\"?x0 kg:2023 kg:9845\"\n     \t\t\t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 ?director .\\n?film wdt:P169 ?editor .\\n?film wdt:P58 ?writer .\\n?film wdt:P91 ?producer .\\n?director wdk:Q302417 ?nameDirector . # Jens Jørgen Thorsen\\n?editor wdk:Q302417 ?nameEditor . # Ole John\\n?writer wdk:Q302417 ?nameWriter . # Jørgen Leth\\nFILTER(?director = ?editor && ?editor = ?producer)\\n}\\n\"]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?film wdt:P57 wd:Q1687239; wdt:P1040 wd:Q1687239; wdt:P58 wd:Q562108; wdt:P162 wd:Q562108. ?film wdt:P57 wd:Q562108; wdt:P1040 wd:Q35979475; wdt:P58 wd:Q35979475; wdt:P162 wd:Q35979475.}\"\n    \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x kg:2375 ?y .\",\n  \t\t                \"?x kg:3050 ?z .\",\n  \t\t                \"?x kg:4885 ?w .\",\n  \t\t                \"?x kg:5891 ?v .\",\n  \t\t                \"?y kg:0596 kg:0596 .\",\n  \t\t                \"?y kg:4796 kg:4796 .\",\n  \t\t                \"?y kg:1382 kg:1382 .\"\n  \t\t            ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  wd:Q123456 wdt:P161 wd:Q789012 . # Replace Q123456 with the actual ID of \" , \"\\n  wd:Q789012 wdt:P345 ?resource . # Replace Q789012 with the actual ID of \", \"}\"]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q25479948 . ?director wdt:P1431 wd:Q25479948 . ?director wdt:P57 wd:Q5437360 . ?director wdt:P1040 wd:Q5437360 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q5437360 . ?director wdt:P57 wd:Q12813010 . ?director wdt:P1040 wd:Q12813010 . ?director wdt:P58 wd:Q12813010 . ?director wdt:P1431 wd:Q12813010 . ?director wdt:P57 wd:Q6084069 . ?director wdt:P1040 wd:Q6084069 . ?director wdt:P58 wd:Q6084069 . ?director wdt:P1431 wd:Q6084069 .}\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?director ?fate ?confession ?waitingRoom WHERE {\",\n \t\t\"  kg:7931 kg:4146 ?director .\",\n \t\t\"  ?director kg:1254 kg:0732 .\",\n \t\t\"  ?director kg:1254 kg:4638 .\",\n \t\t\"  ?director kg:1254 kg:3865 .\",\n \t\t\"  ?director kg:4640 kg:0732 .\",\n \t\t\"  ?director kg:4640 kg:4638 .\",\n \t\t\"  ?director kg:4640 kg:3865 .\",\n \t\t\"  ?director kg:1254 kg:7931 .\",\n \t\t\"  ?director kg:4640 kg:7931 .}\",\n \t\t\"}\"]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  wd:Q123456 wdt:P161 wd:Q789012 . # Replace Q123456 and Q789012 with the actual Wikidata IDs for \" ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?director wdt:P57 wd:Q25479948 . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q25479948 . ?director wdt:P1431 wd:Q25479948 .}\",\n  \t\t\"{?director wdt:P57 wd:Q5437360 . ?director wdt:P1040 wd:Q5437360 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q5437360 .}\",\n  \t\t\"{?director wdt:P57 wd:Q6084069 . ?director wdt:P1040 wd:Q6084069 . ?director wdt:P58 wd:Q6084069 . ?director wdt:P1431 wd:Q6084069 .}\",\n  \t\t\"{?director wdt:P57 wd:Q12813010 . ?director wdt:P1040 wd:Q12813010 . ?director wdt:P58 wd:Q12813010 . ?director wdt:P1431 wd:Q12813010 .}\"\n  \t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n \t\t\"query\": [\n\t\t\t\"SELECT ?director ?fate ?waitingRoom ?confession WHERE {\",\n\t\t\t\"  kg:6201 kg:5227 ?director .\",\n\t\t\t\"  ?director kg:2761 kg:6579 .\",\n\t\t\t\"  ?director kg:6499 kg:6581 .\",\n\t\t\t\"  ?director kg:0346 kg:6579 .\",\n\t\t\t\"  ?director kg:5227 kg:6579 .\",\n\t\t\t\"  ?director kg:2761 kg:6699 .\",\n\t\t\t\"  ?director kg:6499 kg:6699 .\",\n\t\t\t\"  ?director kg:0346 kg:6699 .\",\n\t\t\t\"  ?director kg:5227 kg:6699 .\",\n\t\t\t\"  ?director kg:2761 kg:0890 .\",\n\t\t\t\"  ?director kg:6499 kg:0890 .\",\n\t\t\t\"  ?director kg:0346 kg:0890 .\",\n\t\t\t\"  ?director kg:5227 kg:0890 .\",\n\t\t\t\"}\"\n\t\t]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n  ?film wdt:P31 wd:Q11424 .\\n  ?film wdt:P57 wd:Q68980 .\\n  ?film wdt:P57 wd:Q68979 .\\n  ?film wdt:P57 wd:Q68981 .\\n  ?film wdt:P1433 wd:Q68980 .\\n  ?film wdt:P1433 wd:Q68979 .\\n  ?film wdt:P1433 wd:Q68981 .\\n}\\n\"]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?editorCinematographer ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n \t\t  \t\t\"?film wdt:P57 wd:Q70986. \", \">// editor and cinematographer role\",\n \t\t  \t\t\"?film wdt:P57 ?editorCinematographer. \",\n \t\t  \t\t\"{ ?film rdfs:label ?titleFilter . FILTER(LANG(?titleFilter) = 'en') } UNION { ?film schema:name ?titleFilter }\",\n \t\t  \t\t\"FILTER (?titleFilter = \\\"Moebius\\\"@en || ?titleFilter = \\\"One on One\\\"@en || ?titleFilter = \\\"Amen\\\"@en)\",\n \t\t  \t\t\"?pieta wdt:P57 wd:Q70986. \",\n \t\t  \t\t\"?pieta wdt:P914 ?editorCinematographer. \", \">// executive producer role\",\n \t\t  \t\t\"{ ?pieta rdfs:label ?titleFilterPieta . FILTER(LANG(?titleFilterPieta) = 'en') } UNION { ?pieta schema:name ?titleFilterPieta }\",\n \t\t  \t\t\"FILTER (?titleFilterPieta = \\\"Pieta\\\"@en)\",\n \t\t  \t\t\"}\"\n \t\t \t\t ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x ?y ?z}\",\n     \t\t\"?x wdt:P1040 wd:Q13471372.\",\n     \t\t\"?x wdt:P1040 wd:Q17041657.\",\n     \t\t\"?x wdt:P1040 wd:Q462025.\",\n     \t\t\"?x wdt:P1040 wd:Q483197.\",\n     \t\t\"?x wdt:P1431 wd:Q483197.\"\n     \t]\n} "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?editorCinematographer WHERE {\",\n \t\t\"  kg:9181 kg:0039 ?editorCinematographer .\",\n \t\t\"  kg:9181 kg:5835 ?editorCinematographer .\",\n \t\t\"  kg:3285 kg:0039 ?editorCinematographer .\",\n \t\t\"  kg:3285 kg:5835 ?editorCinematographer .\",\n \t\t\"  kg:5838 kg:0039 ?editorCinematographer .\",\n \t\t\"  kg:5838 kg:5835 ?editorCinematographer .\",\n \t\t\"  kg:4511 kg:0039 ?editorCinematographer .\",\n \t\t\"  kg:4511 kg:5835 ?editorCinematographer .\",\n \t\t\"  kg:4511 kg:0372 ?editorCinematographer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?person WHERE {\",\n \t\t  \t\t\"?person wdt:P31 wd:Q5 .\", \"># person is of type human\"\n \t\t  \t\t,\"?person wdt:P108 wd:Q721649 .\", \"># founder of World Wide Web Consortium\"\n \t\t  \t\t,\"?person wdt:P1416 wd:Q721649 .\", \"># employee of World Wide Web Consortium\"\n \t\t  \t\t,\"?person wdt:P108 wd:Q5396 .\", \"># founder of Open Data Institute\"\n \t\t  \t\t,\"?person wdk:P1416 wd:Q5396 .\", \"># employee of Open Data Institute\"\n \t\t  \t\t,\"?person wdt:P1476 wd:Q28066 .\", \"># employed by Plessey\"\n \t\t  \t\t,\"?person wdt:P1476 wd:Q1616539 .\", \"># employed by CERN\"\n \t\t  \t\t,\"?person wdt:P1476 wd:Q1628058 .\", \"># employed by School of Electronics and Computer Science at the University of Southampton\"\n \t  \t\t\t,\"}\"\n \t\t  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\t\t \t  \t\t\t\t\t\t      \"query\": [\n     \"SELECT ?resource WHERE {\"\n    \t]\n   \t \t\t} "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?x kg:0878 <http://example.org/kg:9985> .\",\n \t\t\"?x kg:0878 <http://example.org/kg:2585> .\",\n \t\t\"?x kg:8444 <http://example.org/kg:7604> .\",\n \t\t\"?x kg:8444 <http://example.org/kg:8837> .\",\n \t\t\"?x kg:8444 <http://example.org/kg:5786> .\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film1 wdt:P57 wd:Q83684 . # director is Robert Rodriguez\\n\\t?film1 wdt:P162 wd:Q83684 . # producer is Robert Rodriguez\\n\\t?film1 wdt:P170 wd:Q83684 . # creator is Robert Rodriguez\\n\\t?film1 rdfs:label ?title1 .\\n\\tFILTER (LANG(?title1) = 'en')\\n\\tFILTER (?title1 = \\\"Planet Terror\\\")\\n\\t?person wdt:P57 ?film1 . # person directed film\\n\\t?person wdt:P279 wd:Q83684 . # person is instance of Robert Rodriguez\\n\\t?film2 wdt:P57 ?person . # person directed another film\\n\\t?film2 rdfs:label ?title2 .\\n\\tFILTER (LANG(?title2) = 'en')\\n\\tFILTER (?title2 IN (\\\"Sin City: A Dame to Kill For\\\", \\\"Machete\\\", \\\"Sin City\\\"))\\n}\\n\"]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t  \t    \t\t\"query\": [\n  \t\t \t  \t    \t\t\"{ ?person wdt:P57 wd:Q1165050 ;\",\n  \t\t \t  \t    \t\t\"        wdt:P86 wd:Q1165050 ;\",\n  \t\t \t  \t    \t\t\"        wdt:P58 wd:Q1165050 ;\",\n  \t\t \t  \t    \t\t\"        ?role wd:Q1165050 .\",\n  \t\t \t  \t    \t\t\"  ?person wdt:P1040 wd:Q192115, wd:Q1653396, wd:Q128493 ;\",\n  \t\t \t  \t    \t\t\"          wdt:P57 wd:Q192115, wd:Q1653396, wd:Q128493 .\",\n  \t\t \t  \t    \t\t\"}\"\n  \t\t \t\t \t    \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?writer ?cinematographer ?actor ?composer\",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 <http://example.org/writer> ?writer .\",\n \t\t\t\"?film1 <http://example.org/cinematographer> ?cinematographer .\",\n \t\t\t\"?film1 <http://example.org/lead_actor> ?actor .\",\n \t\t\t\"?film1 <http://example.org/composer> ?composer .\",\n \t\t\t\"?film2 <http://example.org/director> ?writer .\",\n \t\t\t\"?film2 <http://example.org/director> ?cinematographer .\",\n \t\t\t\"?film3 <http://example.org/director> ?writer .\",\n \t\t\t\"?film4 <http://example.org/director> ?writer .\",\n \t\t\t\"FILTER(?film1 = kg:1457 && ?film2 = kg:9880 && ?film3 = kg:3207 && ?film4 = kg:9537)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  wd:Q123456789 rdfs:label ?directorLabel FILTER (LANG(?directorLabel) = 'en').\", \"># Replace Q123456789 with the actual Wikidata ID for Pietà's director, executive producer, and editor if known or use a variable to represent them.\",\n  \t\t\"  wd:Q987654321 rdfs:label ?dreamLabel FILTER (LANG(?dreamLabel) = 'en').\", \"># Replace Q987654321 with the actual Wikidata ID for Dream and Moebius if known or use a variable to represent it.\",\n  \t\t\"  ?resource wdt:P345 wd:Q123456789.\", \"># Assuming P345 is the property that connects resources, replace as necessary.\",\n  \t\t\"  ?resource wdt:P989 wd:Q987654321.\", \"># Assuming P989 is the property that connects resources, replace as necessary.\"\n  \t\t,\"}\",\n  \t\t\"\"\n  \t]\n} "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 ?p0 wd:Q483197.}\",\n     \t\t\"?x0 wdt:P57 ?director.\",\n     \t\t\"?x0 wdt:P1431 ?producer.\",\n     \t\t\"?x0 wdt:P1040 ?editor.\",\n     \t\t\"?x0 wdt:P58 ?writer.\",\n     \t\t\"?x0 wdt:P1040 ?p1.\",\n     \t\t\"?x0 wdt:P57 ?p2.\",\n     \t\t\"?x0 wdt:P1431 ?p3.\",\n     \t\t\"?x0 wdt:P58 ?p4.\",\n     \t\t\"?p1 ?r1 wd:Q484679.\",\n     \t\t\"?p2 ?r2 wd:Q484679.\",\n     \t\t\"?p3 ?r3 wd:Q484679.\",\n     \t\t\"?p4 ?r4 wd:Q13471372.}\",\n     \t\t\"OFFSET 0\",\n     \t\t\"LIMIT 1\"\n     \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x0 kg:is_director_of/kg:5562}\",\n\t\t\t\"{?x1 kg:is_executive_producer_of/kg:5562}\",\n\t\t\t\"{?x2 kg:is_film_editor_of/kg:5562}\",\n\t\t\t\"?x0 kg:is_director_of/kg:2746.\",\n\t\t\t\"?x0 kg:is_executive_producer_of/kg:2746.\",\n\t\t\t\"?x1 kg:is_screenwriter_of/kg:2746.\",\n\t\t\t\"?x2 kg:is_film_editor_of/kg:2746.\"\n\t\t]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?film1 wdt:P31 wd:Q11424. \"\n\t\t,\"?film1 wdt:P57 wd:Q836849. \" ,\"%Founder%\" ,\"%Film%\"\n\t\t,\"?film2 wdt:P31 wd:Q11424. \"\n\t\t,\"?film2 wdt:P57 wd:Q836849. \" ,\"%Founder%\" ,\"%Film%\"\n\t\t,\"?film3 wdt:P31 wd:Q11424. \"\n\t\t,\"?film3 wdt:P57 wd:Q836849. \" ,\"%Founder%\" ,\"%Film%\"\n\t\t]\n}\n\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z}\",\n  \t\t\"?x wdt:P57 wd:Q220394.\",\n  \t\t\"?x wdt:P58 wd:Q220394.\",\n  \t\t\"?a wdt:P112 wd:?x.\",\n  \t\t\"?b wdt:P112 wd:?x.\",\n  \t\t\"?c wdt:P112 wd:?x.\",\n  \t\t\"?a wdt:P106 wd:Q3282637.\",\n  \t\t\"?a wdt:P57 wd:Q542216.\",\n  \t\t\"?b wdt:P57 wd:wd:Q1857205.\",\n  \t\t\"?c wdt:P57 wd:wd:Q3011043.\",\n  \t\t\"?d wdt:P57 wd:wd:Q64434913.\"\n  \t]\n}\n    \t\t\t \t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\n \t\t\"?x0 ?y0 ?z0\",\n \t\t\"?x0 kg:9383/kg:4739 .\",\n \t\t\"?x0 kg:9383/kg:2555 .\",\n \t\t\"?x0 kg:9383/kg:9546 .\",\n \t\t\"?x0 ?y1 kg:2810 .\",\n \t\t\"?x0 ?y2 kg:7158 ?z1 .\",\n \t\t\"?x0 ?y3 kg:3018 ?z2 .\",\n \t\t\"?z1 kg:0465 .\",\n \t\t\"?z1 kg:5308 .\",\n \t\t\"?z1 kg:5981\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n\t\t \"SELECT ?producer ?editor ?composer ?cinematographer ?director WHERE {\"\n\t\t,\"?film wdt:P31 wd:Q11424299; \"\n\t\t,\"wdt:P1698 wd:Q57805369. # 'Brecha'\"\n\t\t,\"OPTIONAL {?film wdt:P1695 ?producer.}\"\n\t\t,\"OPTIONAL {?film wdt:P1699 ?editor.}\"\n\t\t,\"OPTIONAL {?film wdt:P1702 ?composer.}\"\n\t\t,\"OPTIONAL {?film wdt:P1704 ?cinematographer.}\"\n\t\t,\"OPTIONAL {?film wdt:P1705 ?director.}\"\n\t\t,\"?person wdt:P361 wd:Q5; \"\n\t\t, \"wdt:P50 wd:Q57805369. # 'Primary!' and 'In Your Absence'\"\n\t\t,\"OPTIONAL {?work wdt:P50 ?person.}\"\n\t\t,\"FILTER (?work = wd:Q1234567 || ?work = wd:Q7654321) .\"\n\t\t,\"?film wdt:P577 ?date.\"\n\t\t,\"?person wdt:P1695 ?editor; \"\n\t\t, \"wdt:P1702 ?composer; \"\n\t\t, \"wdt:P1704 ?cinematographer; \"\n\t\t, \"wdt:P1705 ?director.}\"\n\t]\n}\n\t\t\t \t\t\t\t \t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t,\"?x wdt:P1431 wd:Q4959991 .\"\n  \t\t\t,\"?x wdt:P57 wd:Q4959991 .\"\n  \t\t\t,\"?x wdt:P86 wd:Q4959991 .\"\n  \t\t\t,\"?x wdt:P344 wd:Q4959991 .\"\n  \t\t\t,\"?x wdt:P1040 wd:Q4959991 .\"\n  \t\t\t,\"?x wdt:P86 wd:Q7243050 .\"\n  \t\t\t,\"?x wdt:P58 wd:Q7243050 .\"\n  \t\t\t,\"?x wdt:P86 wd:Q5375110 .\"\n  \t\t\t,\"?x wdt:P58 wd:Q5375110 .\"\n  \t\t\t,\"?resource wdt:P1431 ?x .\"\n  \t\t\t,\"?resource wdt:P57 ?x .\"\n  \t\t\t,\"?resource wdt:P86 ?x .\"\n  \t\t\t,\"?resource wdt:P344 ?x .\"\n  \t\t\t,\"?resource wdt:P1040 ?x .\"\n  \t\t,\"}\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x kg:isExecutiveProducer kg:1638}\",\n\t\t\t\"?x kg:isDirector kg:1638\",\n\t\t\t\"?x kg:isComposer kg:1638\",\n\t\t\t\"?x kg:isFilmEditor kg:1638\",\n\t\t\t\"?x kg:isCinematographer kg:1638\",\n\t\t\t\"?x kg:edited kg:0804\",\n\t\t\t\"?x kg:wrote kg:0804\",\n\t\t\t\"?x kg:edited kg:2931\"\n\t\t]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P102 wd:Q496876 . # organization: Sally Ride Science\\n  ?resource wdt:P1416 wd:Q496876 . # former employer: Sally Ride Science\\n  ?resource wdt:P1416 wd:Q356960 . # former employer: Center for International Security and Cooperation, Stanford University\\n  ?resource wdt:P1416 wd:Q25196 . # former employer: NASA\\n  ?resource wdt:P1416 wd:Q7889 . # former employer: University of California, San Diego\\n}\\n\"]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"{ ?item wdt:P112 wd:Q55206. }\",\n  \t\t\"{ ?item wdt:P108 wd:Q55206. }\",\n  \t\t\"{ ?item wdt:P108 wd:Q5059715. }\",\n  \t\t\"{ ?item wdt:P108 wd:Q41506. }\",\n  \t\t\"{ ?item wdt:P108 wd:Q23548. }\",\n  \t\t\"{ ?item wdt:P108 wd:Q622664. }\",\n  \t\t\"{ ?item wdt:P27 wd:Q30. }\"\n \t]\n \t}\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?founder kg:6627 kg:6725 .\",\n \t\t\"?founder kg:0485 kg:8517 .\",\n \t\t\"?founder kg:9642 kg:9642 .\",\n \t\t\"?founder kg:9594 kg:9594 .\",\n \t\t\"?founder kg:0862 kg:5939 .\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n\t\t\t\"SELECT ?person WHERE {\"\n\t\t\t\t,\"?film1 wdt:P31 wd:Q1142470 .\"\n\t\t\t\t,\"?film1 rdfs:label ?title1 .\"\n\t\t\t\t,\"FILTER (LANG(?title1) = 'en') .\"\n\t\t\t\t,\"FILTER (?title1 = 'The Adventures of Sharkboy and Lavagirl in 3-D')\"\n\t\t\t\t,\"?person wdt:P161 ?film1 .\"\n\t\t\t\t,\"?person wdt:P57 ?film1 .\"\n\t\t\t\t,\"?person wdt:P498 ?film1 .\"\n\t\t\t\t,\"?person wdt:P2006 ?film1 .\"\n\t\t\t\t,\"?person wdt:P1319 ?film1 .\"\n\t\t\t\t,\"?person wdt:P1275 ?film1 .\"\n\t\t\t\t,\"?film2 wdt:P31 wd:Q1142470 .\"\n\t\t\t\t,\"?film2 rdfs:label ?title2 .\"\n\t\t\t\t,\"FILTER (LANG(?title2) = 'en') .\"\n\t\t\t\t,\"FILTER (?title2 = 'Planet Terror')\"\n\t\t\t\t,\"?person wdt:P161 ?film2 .\"\n\t\t\t\t,\"?person wdt:P57 ?film2 .\"\n\t\t\t\t,\"?person wdt:P498 ?film2 .\"\n\t\t\t\t,\"?person wdt:P2006 ?film2 .\"\n\t\t\t\t,\"?person wdt:P1319 ?film2 .\"\n\t\t\t\t,\"?person wdt:P1275 ?film2 .\"\n\t\t\t\t,\"?film3 wdt:P31 wd:Q1142470 .\"\n\t\t\t\t,\"?film3 rdfs:label ?title3 .\"\n\t\t\t\t,\"FILTER (LANG(?title3) = 'en') .\"\n\t\t\t\t,\"FILTER (?title3 = 'Sin City')\"\n\t\t\t\t,\"?person wdt:P161 ?film3 .\"\n\t\t\t\t,\"?person wdt:P57 ?film3 .\"\n\t\t\t\t,\"?person wdt:P498 ?film3 .\"\n\t\t\t\t,\"?person wdt:P2006 ?film3 .\"\n\t\t\t\t,\"?person wdt:P1319 ?film3 .\"\n\t\t\t\t,\"?person wdt:P1275 ?film3 .\"\n\t\t\t\t,\"?film4 wdt:P31 wd:Q1142470 .\"\n\t\t\t\t,\"?film4 rdfs:label ?title4 .\"\n\t\t\t\t,\"FILTER (LANG(?title4) = 'en') .\"\n\t\t\t\t,\"FILTER (?title4 = 'Once Upon a Time in Mexico')\"\n\t\t\t\t,\"?person wdt:P161 ?film4 .\"\n\t\t\t\t,\"?person wdt:P57 ?film4 .\"\n\t\t\t\t,\"?person wdt:P498 ?film4 .\"\n\t\t\t\t,\"?person wdt:P2006 ?film4 .\"\n\t\t\t\t,\"?person wdt:P1319 ?film4 .\"\n\t\t\t\t,\"?person wdt:P1275 ?film4 .\"\n\t\t\t,\"}\"\n\t\t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P161 wd:Q1165050. ?item wdt:P161 wd:Q192115. ?item wdt:P161 wd:Q656357. ?item wdt:P161 wd:Q93853. ?item wdt:P57 wd:Q1165050. ?item wdt:P57 wd:Q192115. ?item wdt:P57 wd:Q656357. ?item wdt:P57 wd:Q93853. ?item wdt:P86 wd:Q1165050. ?item wdt:P86 wd:Q192115. ?item wdt:P86 wd:Q656357. ?item wdt:P86 wd:Q93853. ?item wdt:P58 wd:Q1165050. ?item wdt:P58 wd:Q192115. ?item wdt:P58 wd:Q656357. ?item wdt:P58 wd:Q93853. ?item wdt:P1040 wd:Q1165050. ?item wdt:P1040 wd:Q192115. ?item wdt:P1040 wd:Q656357. ?item wdt:P1040 wd:Q93853.}\"\n    \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film_1 <http://example.org/has_director> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/has_screenwriter> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/has_composer> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/has_film_editor> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/is_cast_member_of> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/directed_by> ?resource .\",\n \t\t\t\"?film_1 <http://example.org/cinematography_by> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/has_director> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/has_screenwriter> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/has_composer> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/has_film_editor> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/is_cast_member_of> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/directed_by> ?resource .\",\n \t\t\t\"?film_2 <http://example.org/cinematography_by> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/has_director> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/has_screenwriter> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/has_composer> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/has_film_editor> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/is_cast_member_of> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/directed_by> ?resource .\",\n \t\t\t\"?film_3 <http://example.org/cinematography_by> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/has_director> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/has_screenwriter> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/has_composer> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/has_film_editor> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/is_cast_member_of> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/directed_by> ?resource .\",\n \t\t\t\"?film_4 <http://example.org/cinematography_by> ?resource .\",\n \t\t\t\"FILTER(?film_1 = kg:2043) .\",\n \t\t\t\"FILTER(?film_2 = kg:9806) .\",\n \t\t\t\"FILTER(?film_3 = kg:0404) .\",\n \t\t\t\"FILTER(?film_4 = kg:4401) .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t  \t \t\t\"query\": [\"$SELECT\", \"$WHERE\", \"[[Q43026]] [[P178]] ?organization . ?organization [[P31]] wd:Q495\", \"?organization\"]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x wdt:P58 wd:Q29011 .\",\n  \t                \t\"?x wdt:P1431 wd:Q29011 .\",\n  \t                \t\"?x wdt:P108 ?y .\",\n  \t                \t\"{ ?y wdt:P171 wd:Q1136386 } UNION { ?y wdt:P171 wd:Q947907 } UNION { ?y wdt:P171 wd:Q11371930 } UNION { ?y wdt:P171 wd:Q182950 } UNION { ?y wdt:P171 wd:Q1054807 } UNION { ?y wdt:P171 wd:Q11490471 }\"\n  \t\t\t]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"?x ?y kg:3829 .\",\n \t\t\"?x kg:9948 ?z .\",\n \t\t\"{ ?z <http://schema.org/name> 'Shin-Ei Animation' } UNION { ?z <http://schema.org/name> 'Ghibli Museum' } UNION { ?z <http://schema.org/name> 'TMS Entertainment' } UNION { ?z <http://schema.org/name> 'Tokuma Memorial Cultural Foundation for Animation' } UNION { ?z <http://schema.org/name> 'Nibariki' } UNION { ?z <http://schema.org/name> 'Studio Ghibli' }\",\n \t\t\"?x kg:2791 kg:3829 .\",\n \t\t\"?x kg:4582 kg:3829 .\"\n \t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?work1 wdt:P31 wd:Q1142470 ; wdt:P179 ?cinematographerWriter .\"\n  \t,\"?work1 wdt:P31 wd:Q1142470 ; wdt:P50 ?cinematographerWriter .\"\n  \t,\"?work1 wdt:P364 wd:Q846089 .\"\n  \t,\"?work2 wdt:P31 wd:Q1142470 ; wdt:P179 ?cinematographerWriter .\"\n  \t,\"?work2 wdt:P50 ?cinematographerWriter .\"\n  \t,\"?work2 wdt:P364 wd:Q182662 .\"\n  \t,\"?work3 wdt:P31 wd:Q1142470 ; wdt:P179 ?cinematographerWriter .\"\n  \t,\"?work3 wdt:P50 ?cinematographerWriter .\"\n  \t,\"?work3 wdt:P364 wd:Q846090 .\"\n  \t,\"?work4 wdt:P31 wd:Q1142470 ; wdt:P179 ?cinematographerWriter .\"\n  \t,\"?work4 wdt:P50 ?cinematographerWriter .\"\n  \t,\"?work4 wdt:P364 wd:Q846091 .\"\n  \t,\"?film wdt:P31 wd:Q1142470 ; wdt:P57 wd:Q21190 ; wdt:P50 ?cinematographerWriter .\"\n  \t,\"?film wdt:P119 wd:Q846092 .\"\n  \t,\"?cinematographerWriter wdt:P345 wd:Q21190 .\"\n  \t,\"?cinematographerWriter wdt:P478 wd:Q21190 .\"\n  \t,\"?cinematographerWriter wdt:P469 wd:Q21190 .\"\n  ]\n}\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t\t"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?x wdt:P57 wd:Q17738 .\",\n\t\t \"?x wdt:P58 wd:Q17738 .\",\n\t\t \"?x wdt:P57 wd:Q613974 .\",\n\t\t \"?x wdt:P58 wd:Q613974 .\",\n\t\t \"?x wdt:P57 wd:Q1415127 .\",\n\t\t \"?x wdt:P58 wd:Q1415127 .\",\n\t\t \"?x wdt:P57 wd:Q208910 .\",\n\t\t \"?x wdt:P58 wd:Q208910 .\",\n\t\t \"?x wdt:P344 wd:Q17738 .\",\n\t\t \"?x wdt:P57 wd:Q17736 .\",\n\t\t \"?x wdt:P58 wd:Q17736 .\",\n\t\t \"?x wdt:P1431 wd:Q17736 .\"\n\t ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"?x kg:7592 ?y .\",\n \t\t \t\t\t\t\"?x kg:0296 ?z .\",\n \t\t \t\t\t\t\"?x kg:8434 kg:2634 .\",\n \t\t \t\t\t\t\"?x kg:7242 kg:2634 .\",\n \t\t \t\t\t\t\"?x kg:7592 kg:2634 .\",\n \t\t \t\t\t\t\"?x kg:7592 kg:0815 .\",\n \t\t \t\t\t\t\"?x kg:7592 kg:4375 .\",\n \t\t \t\t\t\t\"?x kg:7592 kg:4519 .\",\n \t\t \t\t\t\t\"?x kg:7592 kg:2452 .\"\n \t\t \t \t]\n }"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?person WHERE {\",\n   \t\t \t\t\"?film1 wdt:P31 wd:Q1142470 ;\",\n   \t\t \t\t\"wdt:P57 wd:Q688962 ;\",\n   \t\t \t\t\"wdt:P100 wd:Q688962 ;\",\n   \t\t \t\t\"wdt:P1196 wd:Q688962 .\",\n   \t\t \t\t\"?film2 wdt:P31 wd:Q1142470 ;\",\n   \t\t \t\t\"wdt:P57 wd:Q688962 ;\",\n   \t\t \t\t\"wdt:P100 wd:Q688962 .\",\n   \t\t \t\t\"?tvSeries wdt:P31 wd:Q53984588 ;\",\n   \t\t \t\t\"wdt:P98 wd:Q688962 .\",\n   \t\t \t\t\"} GROUP BY ?person\"\n\t\t \t\t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?x wdt:P57 wd:Q2085 ;\",\n  \t                \t\"?x wdt:P1431 wd:Q2085 ;\",\n  \t                \t\"?x wdt:P1431 wd:Q1140578 ;\",\n  \t                \t\"?x wdt:P1431 wd:Q1511905 ;\",\n  \t                \t\"?x wdt:P344 ?y ;\",\n  \t                \t\"?x wdt:P1040 ?z .\",\n  \t                \t\"wd:Q1473406 wdt:P57 ?y .\",\n  \t                \t\"wd:Q1473406 wdt:P1040 ?z .\",\n  \t                \t\"wd:Q3485595 wdt:P57 ?y .\",\n  \t                \t\"wd:Q3485595 wdt:P1040 ?z .\"\n  \t\t\t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director ?editor ?cinematographer WHERE {\",\n \t\t\t\"?film1 kg:4187 ?director .\",\n \t\t\t\"?film1 kg:3443 ?editor .\",\n \t\t\t\"?film1 kg:4376 ?cinematographer .\",\n \t\t\t\"?film2 kg:4560 ?director .\",\n \t\t\t\"?film3 kg:4560 ?director .\",\n \t\t\t\"?film4 kg:4560 ?director .\",\n \t\t\t\"FILTER(?film1 = kg:9557 || ?film1 = kg:7819)\",\n \t\t\t\"FILTER(?film2 = kg:6263)\",\n \t\t\t\"FILTER(?film3 = kg:6602)\",\n \t\t\t\"FILTER(?film4 = kg:9722)\"\n \t\t,\"}\" ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film rdfs:label \\\"The Kid\\\"@en .\\n?director wdt:P57 ?film . # director of the film\\n?editor wdt:P58 ?film . # editor of the film\\n?director wdt:P60 wd:Q21439 . # married to Lita Grey\\n?director wdt:P60 wd:Q21438 . # married to Mildred Harris\\n?director wdt:P60 wd:Q27596 . # married to Oona O'Neill\\n}\\nUNION {\\n\\n?film rdfs:label \\\"The Floorwalker\\\"@en .\\n?director wdt:P57 ?film .\\n?editor wdt:P58 ?film .\\n?director wdt:P60 wd:Q21439 . # married to Lita Grey\\n?director wdt:P60 wd:Q21438 . # married to Mildred Harris\\n?director wdt:P60 wd:Q27596 . # married to Oona O'Neill\\n}\\nUNION {\\n\\n?film rdfs:label \\\"A Woman\\\"@en .\\n?director wdt:P57 ?film .\\n?editor wdt:P58 ?film .\\n?director wdt:P60 wd:Q21439 . # married to Lita Grey\\n?director wdt:P60 wd:Q21438 . # married to Mildred Harris\\n?director wdt:P60 wd:Q27596 . # married to Oona O'Neill\\n}\\nUNION {\\n\\n?film rdfs:label \\\"Modern Times\\\"@en .\\n?director wdt:P57 ?film .\\n?editor wdt:P58 ?film .\\n?director wdt:P60 wd:Q21439 . # married to Lita Grey\\n?director wdt:P60 wd:Q21438 . # married to Mildred Harris\\n?director wdt:P60 wd:Q27596 . # married to Oona O'Neill\\n}\\n\\nBIND(?film as ?resource)\\nBIND(?director as ?resource)\\nBIND(?editor as ?resource)\\n}\"]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?director wdt:P57 wd:Q374172 . ?director wdt:P26 wd:Q32337 .}\",\n     \t\t\"{?editor wdt:P1040 wd:Q374172 . ?editor wdt:P26 wd:Q32337 .}\",\n     \t\t\"{?director wdt:P57 wd:Q166739 . ?director wdt:P26 wd:Q241019 .}\",\n     \t\t\"{?editor wdt:P1040 wd:Q166739 . ?editor wdt:P26 wd:Q241019 .}\",\n     \t\t\"{?director wdt:P57 wd:Q2449461 . ?director wdt:P26 wd:Q241019 .}\",\n     \t\t\"{?editor wdt:P1040 wd:Q2449461 . ?editor wdt:P26 wd:Q241019 .}\",\n     \t\t\"{?director wdt:P57 wd:Q45602 . ?director wdt:P26 wd:Q137808 .}\",\n     \t\t\"{?editor wdt:P1040 wd:Q45602 . ?editor wdt:P26 wd:Q137808 .}\"\n     \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director ?editor WHERE {\",\n \t\t\t\"?director kg:0674 <http://example.org/The_Kid> .\",\n \t\t\t\"?director kg:0674 <http://example.org/The_Floorwalker> .\",\n \t\t\t\"?director kg:0674 <http://example.org/A_Woman> .\",\n \t\t\t\"?director kg:0674 <http://example.org/Modern_Times> .\",\n \t\t\t\"?editor kg:3374 <http://example.org/The_Kid> .\",\n \t\t\t\"?editor kg:3374 <http://example.org/The_Floorwalker> .\",\n \t\t\t\"?editor kg:3374 <http://example.org/A_Woman> .\",\n \t\t\t\"?editor kg:3374 <http://example.org/Modern_Times> .\",\n \t\t\t\"?director kg:1521 kg:3253 .\",\n \t\t\t\"?director kg:1521 kg:2766 .\",\n \t\t\t\"?director kg:1521 kg:1588 .\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P21 wd:Q6581072 . # gender is male\\n  ?resource wdt:P1449 wd:Q7555 . # occupation film director, also implies writer and editor roles\\n}\\n\"]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?item wdt:P31 wd:Q5 . ?item wdt:P21 wd:Q6581097 . ?item wdt:P57 wd:Q882 . ?item wdt:P1040 wd:Q882 . ?item wdt:P58 wd:Q882}\"\n \t]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x0 kg:2241 kg:2114}\",\n      \t\t\t\"?x0 kg:2715 kg:2139\",\n      \t\t\t\"?x0 kg:6986 ?y0\",\n      \t\t\t\"?x0 kg:7397 ?z0\",\n      \t\t\t\"?x0 kg:9280 ?w0\"\n      \t  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?company WHERE {\"\n \t\t\t\t,\"?film wdt:P31 wd:Q11424. \"\n \t\t\t\t,\"?film rdfs:label ?title. \"\n \t\t\t\t,\"FILTER (lang(?title) = 'en'). \"\n \t\t\t\t,\"FILTER (?title = \\\"Grand Canyon\\\"@en). \"\n \t\t\t\t,\"?company wdt:P469 ?film. \"\n \t\t\t\t,\"wd:Q1058723 wdt:P127 ?company. \" ,\"\\n\"\n \t\t\t\t,\"wd:Q25164 wdt:P127 ?company. \" ,\"\\n\"\n \t\t\t\t,\"wd:Q25165 wdt:P127 ?company. \" ,\"\\n\"\n \t\t\t\t,\"wd:Q25166 wdt:P127 ?company. \" ,\"\\n\"\n \t\t\t\t,\"wd:Q25167 wdt:P127 ?company. \" ,\"\\n\"\n \t\t\t\t,\"wd:Q25168 wdt:P127 ?company. \"\n \t\t\t\t,\"}\"\n \t\t \t\t ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z}\",\n  \t\t\"?x wdt:P127 wd:Q3133593.\",\n  \t\t\"?x wdt:P127 wd:Q1411292.\",\n  \t\t\"?x wdt:P127 wd:Q219635.\",\n  \t\t\"?x wdt:P127 wd:Q7603552.\",\n  \t\t\"?x wdt:P127 wd:Q3511946.\",\n  \t\t\"?x wdt:P127 wd:Q505275.\",\n  \t\t\"?movie wdt:P750 ?x.\",\n  \t\t\"?movie wdt:P272 ?productionCompany.\",\n  \t\t\"?movie schema:sameAs <http://www.wikidata.org/entity/Q2062523>.\"\n  \t]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n \t\"query\": [\n \t\t\"?production_company kg:0554 kg:3172 .\",\n \t\t\"?production_company kg:1549 ?owner .\",\n \t\t\"?owner kg:1549 kg:2351 .\",\n \t\t\"?owner kg:1549 kg:1023 .\",\n \t\t\"?owner kg:1549 kg:4856 .\",\n \t\t\"?owner kg:1549 kg:7596 .\",\n \t\t\"?owner kg:1549 kg:5524 .\",\n \t\t\"?owner kg:1549 kg:5601 .\"\n \t]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\n?movie1 wdt:P31 wd:Q11424 . # instance of film\\n?movie1 wdt:P179 ?director . # directed by\\n?movie1 wdt:P161 ?star . # starring\\n\\n?movie2 wdt:P31 wd:Q11424 .\\n?movie2 wdt:P179 ?director .\\n?movie2 wdt:P161 ?star .\\n\\n?director wdt:P50 wd:Q81097 . # Lars von Trier\\n?star wdt:P50 wd:Q434451 . # Aran Cosentino\\n\\nSERVICE <https://query.wikidata.org/sparql> {}\\n}\\n\"]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?filmEditor wdt:P1409 wd:Q258673 ;\", \">// Influenced Federico Fellini\",\n \t\t  \t\t\"wdt:P1409 wd:Q16178 ;\", \">// Influenced Marcel Marceau\",\n \t\t  \t\t\"wdt:P1409 wd:Q188625 ;\", \">// Influenced Harold Lloyd\",\n \t\t  \t\t\"wdt:P31 wd:Q5 ;\", \">// Instance of human\"\n \t\t  \t\t,\"?filmEditor wdt:P106 wd:Q7889 .\", \">// Occupation is film editor\"\n \t\t  \t\t,\n \t\t  \t\t\"?filmEditor wdt:P26 ?spouse1, ?spouse2, ?spouse3 .\",\n \t\t  \t\t\"?spouse1 rdfs:label \\\"Oona O'Neill\\\"@en;\",\n \t\t  \t\t\"wdt:P31 wd:Q5 .\", \">// Instance of human\"\n \t\t  \t\t,\n \t\t  \t\t\"?spouse2 rdfs:label \\\"Lita Grey\\\"@en;\",\n \t\t  \t\t\"wdt:P31 wd:Q5 .\", \">// Instance of human\"\n \t\t  \t\t,\n \t\t  \t\t\"?spource3 rdfs:label \\\"Mildred Harris\\\"@en;\",\n \t\t  \t\t\"wdt:P31 wd:Q5 .\", \">// Instance of human\"\n \t\t  \t\t,\n \t\t  \t\t\"?filmEditor wdt:P1416 ?unitedArtists.\",\n \t\t  \t\t\"?unitedArtists rdfs:label \\\"United Artists Corporation\\\"@en;\",\n \t\t  \t\t\"wdt:P31 wd:Q47592 .\", \">// Instance of company\"\n \t\t  \t\t,\n \t\t  \t\t\"}\",\n \t\t  \t\t\"GROUP BY ?filmEditor\",\n \t\t  \t\t\"LIMIT 1\"\n \t  \t\t]}\n \t  \t\t \t\t \t\t\t\t \t\t"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?film_editor wdt:P106 wd:Q7889; wdt:P26 wd:Q137808; wdt:P26 wd:Q241019; wdt:P26 wd:Q32337; ?influence wd:Q7042855; ?founder wd:Q219400.}\"\n \t]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n \t\t\"query\": [\n\t\t\t\"?filmEditor kg:9609 kg:6642 .\",\n\t\t\t\"?filmEditor kg:9609 kg:0424 .\",\n\t\t\t\"?filmEditor kg:9609 kg:4418 .\",\n\t\t\t\"?filmEditor kg:4505 kg:9414 .\",\n\t\t\t\"?filmEditor kg:4505 kg:3750 .\",\n\t\t\t\"?filmEditor kg:4505 kg:9016 .\",\n\t\t\t\"?filmEditor kg:2541 kg:7462\"\n\t\t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film1 wdt:P57 wd:Q83996 . # director is Agnes Varda\\n\\t?film1 wdt:P161 wd:Q83996 . # starring is Agnes Varda\\n\\t?film1 wdt:P59 wd:Q83996 . # written by is Agnes Varda\\n\\t?film1 rdfs:label ?title1 .\\n\\tFILTER(LANG(?title1) = 'en')\\n\\tFILTER(CONTAINS(?title1, \\\"Jane B. par Agnès V.\\\"))\\n\\t?film2 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film2 wdt:P57 wd:Q83996 . # director is Agnes Varda\\n\\t?film2 wdt:P161 wd:Q83996 . # starring is Agnes Varda\\n\\t?film2 wdt:P59 wd:Q83996 . # written by is Agnes Varda\\n\\t?film2 rdfs:label ?title2 .\\n\\tFILTER(LANG(?title2) = 'en')\\n\\tFILTER(CONTAINS(?title2, \\\"The Beaches of Agnès\\\"))\\n\\t?film3 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film3 wdt:P57 wd:Q83996 . # director is Agnes Varda\\n\\t?film3 wdt:P161 wd:Q83996 . # starring is Agnes Varda\\n\\t?film3 wdt:P59 wd:Q83996 . # written by is Agnes Varda\\n\\t?film3 rdfs:label ?title3 .\\n\\tFILTER(LANG(?title3) = 'en')\\n\\tFILTER(CONTAINS(?title3, \\\"The World of Jacques Demy\\\"))\\n\\twd:Q83996 wdt:P106 wd:Q25247 . # occupation is film director\\n\\twd:Q83996 wdt:P106 wd:Q725388 . # occupation is screenwriter\\n\\twd:Q83996 wdt:P106 wd:Q104266 . # occupation is actress\\n\\twd:Q83996 wdt:P140 wd:Q116277 . # influenced by Jacques Demy\\n\\twd:Q83996 wdt:P195 wd:Q116277 . # works for Jacques Demy\\n\\twd:Q83996 wdt:P140 wd:Q116277 . # spouse of Jacques Demy\\n\\t?person wdt:P698 wd:Q83996 .\\n}\\n\"]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{ ?x wdt:P57 wd:Q2709504; wdt:P57 wd:Q3161846; wdt:P57 wd:Q3204825. }\",\n  \t\t\"{ ?x wdt:P161 wd:Q2709504; wdt:P161 wd:Q3161846; wdt:P161 wd:Q3204825. }\",\n  \t\t\"{ ?x wdt:P58  wd:Q2709504; wdt:P58  wd:Q3161846; wdt:P58  wd:Q3204825. }\",\n  \t\t\"?x wdt:P26 wd:Q312258.\"\n  \t]\n \t}\n \t\t\t \t\t\t\t\t\t\t\t      \t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8751 kg:2720 .\",\n \t\t\"?x kg:5571 kg:2720 .\",\n \t\t\"?x kg:2163 kg:2720 .\",\n \t\t\"?x kg:4393 kg:7335 .\",\n \t\t\"?x kg:1806 kg:7335 .\",\n \t\t\"?x kg:8751 kg:1428 .\",\n \t\t\"?x kg:5571 kg:1428 .\",\n \t\t\"?x kg:2163 kg:1428 .\",\n \t\t\"?x kg:8751 kg:9534 .\",\n \t\t\"?x kg:5571 kg:9534 .\",\n \t\t\"?x kg:2163 kg:9534 .\"\n \t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?company WHERE {\",\n \t\t  \t\t\"?company wdt:P31 wd:Q40569; \",\n \t\t  \t\t\"wdt:P127 wd:Q28018; \",\n \t\t  \t\t\"wdt:P127 wd:Q28019; \",\n \t\t  \t\t\"wdt:P127 ?cloudfront; \",\n \t\t  \t\t\"?cloudfront wdt:P361 wd:Q45569; \",\n \t\t  \t\t\"?kindle ?company; \",\n \t\t  \t\t\"?kindle wdt:P31 wd:Q45580; \",\n \t\t  \t\t\"?abebooks ?company; \",\n \t\t  \t\t\"?abebooks wdt:P31 wd:Q45581. \",\n \t\t  \t\t\"}\"\n \t\t \t  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?y}\"\n  \t\t,\"{ wd:Q17070012 wdt:P750 ?x }\"\n  \t\t,\"{ ?x wdt:P127 wd:Q849363 }\"\n  \t\t,\"{ ?x wdt:P127 wd:Q219635 }\"\n  \t\t,\"{ ?x wdt:P272 wd:Q1628791 }\"\n  \t\t,\"{ ?x wdt:P272 wd:Q65073147 }\"\n  \t\t,\"{ ?x wdt:P272 wd:Q318128 }\"\n  \t\t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?company WHERE {\",\n \t\t\t\"?company kg:4947 kg:6814 ;\", \"># distributed by Mozart in the Jungle\",\n \t\t\t\"?company kg:8044 kg:6814 ;\", \"># production company of Mozart in the Jungle\",\n \t\t\t\"?company kg:8165/kg:0479 ;\", \"># owned by The Vanguard Group\",\n \t\t\t\"?company kg:8165/kg:0464 ;\", \"># owned by BlackRock\",\n \t\t\t\"?company kg:8165/kg:2485 ;\", \"># purchased Amazon CloudFront\",\n \t\t\t\"?company kg:8165/kg:3637 ;\", \"># purchased .amazon\",\n \t\t\t\"?company kg:8165/kg:1784 ;\", \"># purchased Amazon Kindle\",\n \t\t\t\"?company kg:8165/kg:8332 .\" ,\"%># purchased AbeBooks\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n\\t?person wdt:P31 wd:Q5 ;\\n\\t\\twdt:P106 wd:Q214987 ;\\n\\t\\twdt:P161 wd:Q128063 ;\\n\\t\\twdt:P50 wd:Q128063 .\\n\\n\\t?film1 wdt:P57 ?person ;\\n\\t\\twdt:P4989 wd:Q128063 .\\n\\n\\t?film2 wdt:P57 ?person ;\\n\\t\\twdt:P50 ?person ;\\n\\t\\twdt:P161 ?person .\\n\\n\\t?film3 wdt:P50 ?person ;\\n\\t\\twdt:P161 ?person .\\n\\n\\tFILTER(?film2 != ?film1 && ?film2 != ?film3)\\n}\\n\"]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?person wdt:P57 wd:Q3207690; wdt:P1040 wd:Q3207690; wdt:P58 wd:Q3207690. ?person wdt:P57 wd:Q463946; wdt:P58 wd:Q463946; wdt:P1040 wd:Q463946. ?person wdt:P57 wd:Q289021; wdt:P58 wd:Q289021; wdt:P1040 wd:Q289021.}\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?person kg:3675 kg:8626 .\", \"># Spanish person with citizenship in Spain\",\n \t\t\t\"?person kg:6914 kg:9100 .\", \"># Person is a film editor of Female Vampire\",\n \t\t\t\"?person kg:8501 kg:9100 .\", \"># Person is the director of Female Vampire\",\n \t\t\t\"?person kg:8325 ?film1 .\", \"># The person wrote another film\",\n \t\t\t\"?film1 kg:8501 ?resource .\", \"># That film was also directed by the person, return resource\"\n \t\t\t,\"?film1 rdf:type owl:NamedIndividual .\",\n \t\t\t\"FILTER(?film1 = kg:2955 || ?film1 = kg:0414)\"\n \t\t,\"}\"]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": []} "}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?entity wdt:P26 wd:Q6813152 . ?entity wdt:P106 wd:Q222344 . ?entity wdt:P112 wd:Q746676 . ?entity wdt:P112 wd:Q242446 . ?entity wdt:P112 wd:Q1044630 . ?entity wdt:P112 wd:Q258945 .}\"\n    \t]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?x kg:9449 kg:8556 .\", \"@comment ?x is Mellody Hobson's spouse\",\n \t\t\t\"?x kg:8076 kg:1091 .\", \"@comment ?x has occupation cinematographer\",\n \t\t\t\"?y kg:7813 ?x .\", \"@comment ?y was founded by ?x\",\n \t\t\t\"{ ?y kg:1879 kg:5144 } UNION { ?y kg:1879 kg:3610 } UNION { ?y kg:1879 kg:8877 } UNION { ?y kg:1879 kg:8063 } UNION { ?y kg:1879 kg:1879 }\",\n \t\t\t\"@comment ?y is one of the entities founded by Mellody Hobson's spouse\"\n \t\t,\"}\"]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film1 wdt:P57 ?cinematographer . # cinematographer\\n\\t?film1 wdt:P161 ?star . # starring actor\\n\\tFILTER (?cinematographer = ?star)\\n\\t?film1 rdfs:label ?titleFilm1 .\\n\\tFILTER (lang(?titleFilm1) = 'en')\\n\\t?titleFilm1 bif:contains '\\\"Inception\\\"' .\\n\\t?film2 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film2 wdt:P57 ?cinematographer . # cinematographer\\n\\t?film2 wdt:P161 ?star . # starring actor\\n\\tFILTER (?cinematographer = ?star)\\n\\t?film2 rdfs:label ?titleFilm2 .\\n\\tFILTER (lang(?titleFilm2) = 'en')\\n\\t?titleFilm2 bif:contains '\\\"Game Over\\\"' .\\n\\t?film3 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film3 wdt:P57 ?cinematographer . # cinematographer\\n\\t?film3 wdt:P161 ?star . # starring actor\\n\\tFILTER (?cinematographer = ?star)\\n\\t?film3 rdfs:label ?titleFilm3 .\\n\\tFILTER (lang(?titleFilm3) = 'en')\\n\\t?titleFilm3 bif:contains '\\\"Liberation\\\"' .\\n\\t?madness wdt:P57 ?cinematographer . # cinematographer\\n\\t?madness wdt:P161 ?star . # starring actor\\n\\tFILTER (?cinematographer = ?star)\\n\\t?madness wdt:P50 ?writerDirector . # author (for writer and director)\\n\\t?madness wdt:P98 ?execProducer . # production company (for executive producer)\\n\\t?madness wdt:P1276 ?editor . # editor\\n\\tFILTER (?cinematographer = ?writerDirector && ?cinematographer = ?execProducer && ?cinematographer = ?editor)\\n\\t?person wdt:P345 ?cinematographer .\\n}\\n\"]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"{ ?x wdt:P161 wd:Q85520081 . }\",\n  \t\t\"{ ?x wdt:P161 wd:Q96054985 . }\",\n  \t\t\"{ ?x wdt:P161 wd:Q85532437 . }\",\n  \t\t\"{ ?x wdt:P344 wd:Q85520081 . }\",\n  \t\t\"{ ?x wdt:P57 wd:Q87778273 . }\",\n  \t\t\"{ ?x wdt:P58 wd:Q87778273 . }\",\n  \t\t\"{ ?x wdt:P1431 wd:Q87778273 . }\",\n  \t\t\"{ ?x wdt:P1040 wd:Q87778273 . }\"\n \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n \t\t\"query\": [\n\t\t\t\"?x kg:1505 kg:1786 .\",\n\t\t\t\"?x kg:1348 kg:4083 .\",\n\t\t\t\"?x kg:1348 kg:0590 .\",\n\t\t\t\"?x kg:1594 kg:4752 .\",\n\t\t\t\"?x kg:3026 kg:4752 .\",\n\t\t\t\"?x kg:2395 kg:4752 .\",\n\t\t\t\"?x kg:6680 kg:4752 .\"\n\t\t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n\\t?film1 wdt:P31 wd:Q11424 . # instance of film\\n\\t?film1 wdt:P57 ?person . # writer or cinematographer\\n\\t?film1 rdfs:label \\\"The Emperor\\\"@en .\\n\\t?film2 wdt:P31 wd:Q11424 .\\n\\t?film2 wdt:P57 ?person .\\n\\t?film2 rdfs:label \\\"Anyone Lived in a Pretty How Town\\\"@en .\\n\\t?film3 wdt:P31 wd:Q11424 .\\n\\t?film3 wdt:P57 ?person .\\n\\t?film3 rdfs:label \\\"1:42.08\\\"@en .\\n\\t?film4 wdt:P31 wd:Q11424 .\\n\\t?film4 wdt:P57 ?person .\\n\\t?film4 rdfs:label \\\"Herbie\\\"@en .\\n\\t?person wdt:P1968 ?marriage . # influenced by\\n\\t?marriage wdt:P39 wd:Q24076277 . # member of\\n\\twd:Q24076277 wdt:P527 ?influencedPerson .\\n\\t?influencedPerson rdfs:label \\\"Marcus Orelias\\\"@en .\\n\\t?marriage wdt:P39 wd:Q18619477 . # member of\\n\\twd:Q18619477 wdt:P527 ?influencedPerson2 .\\n\\t?influencedPerson2 rdfs:label \\\"Lorne Lanning\\\"@en .\\n}\\n\"]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x wdt:P737 wd:Q52306598; wdt:P737 wd:Q717378.}\",\n  \t\t\"?x wdt:P344 ?y.\",\n  \t\t\"?y wdt:P31 wd:Q5.\"\n  \t]\n} "}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6371 kg:4611 .\",\n \t\t\"?x kg:6371 kg:3949 .\",\n \t\t\"?x kg:6371 kg:1488 .\",\n \t\t\"?x kg:6371 kg:1736 .\",\n \t\t\"?x kg:4998 kg:5258 .\",\n \t\t\"?x kg:4998 kg:7321 .\",\n \t\t\"?x kg:4097 ?y .\"\n \t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  wd:Q16457982 wdt:P345 ?movieId.\\n  wd:Q16457982 rdfs:label ?titleLabel.\\n  FILTER (LANG(?titleLabel) = 'en').\\n  wd:Q16457982 wdt:P161 ?director.\\n  ?director wdt:P345 ?directorId.\\n  ?director rdfs:label ?directorLabel.\\n  FILTER (LANG(?directorLabel) = 'en').\\n  ?director wdt:P101 wd:Q725389.\\n  ?director wdt:P161 wd:Q426162.\\n  ?director wdt:P161 wd:Q112555.\\n}\\n\"]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?director ?filmEditor ?screenwriter ?execProducer WHERE {\"\n  \t\t\t,\"?trilogy wdt:P179 wd:Q18609037 .\"\n  \t\t\t,\"?movie1 wdt:P57 ?director .\"\n  \t\t\t,\"?movie2 wdt:P57 ?director .\"\n  \t\t\t,\"?movie1 wdt:P58 ?screenwriter .\"\n  \t\t\t,\"?movie2 wdt:P58 ?screenwriter .\"\n  \t\t\t,\"?movie1 wdt:P1040 ?filmEditor .\"\n  \t\t\t,\"?movie2 wdt:P1040 ?filmEditor .\"\n  \t\t\t,\"?movie1 wdt:P1431 ?execProducer .\"\n  \t\t\t,\"?movie2 wdt:P1431 ?execProducer .\"\n  \t\t\t,\"?movie1 wdt:P31 wd:Q1142470 .\"\n  \t\t\t,\"?movie2 wdt:P31 wd:Q1142470 .\"\n  \t\t\t,\"?movie1 wdt:P179 ?trilogy .\"\n  \t\t\t,\"?movie2 wdt:P179 ?trilogy .\"\n  \t\t\t,\"?movie1 owl:sameAs <http://www.imdb.com/title/tt0365894/> .\" ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director WHERE {\",\n \t\t\t\"?film1 kg:7293 ?director .\",\n \t\t\t\"?film1 kg:6774 ?director .\",\n \t\t\t\"?film1 kg:3493 ?director .\",\n \t\t\t\"?film1 kg:9796 ?director .\",\n \t\t\t\"kg:8115 kg:7293 ?director .\",\n \t\t\t\"kg:6756 kg:7293 ?director .\",\n \t\t\t\"kg:9595 kg:7293 ?director\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P361 wd:Q2119428 . # film director of Vagabond\\n  ?resource wdt:P361 wd:Q709854 . # film director of The Gleaners and I\\n  ?resource wdt:P361 wd:Q854459 . # film director of Varda by Agnès\\n  ?resource wdt:P57 wd:Q2119428 . # film editor of Vagabond\\n  ?resource wdt:P57 wd:Q709854 . # film editor of The Gleaners and I\\n  ?resource wdt:P57 wd:Q854459 . # film editor of Varda by Agnès\\n  ?resource wdt:P1326 wd:Q2119428 . # married to Jacques Demy\\n}\\n\"]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?p ?o}\",\n  \t\t\"?x wdt:P106 wd:Q2526255 .\",\n  \t\t\"?x wdt:P58 wd:Q2493884 .\",\n  \t\t\"?x wdt:P58 wd:Q2298257 .\",\n  \t\t\"?x wdt:P58 wd:Q63993096 .\",\n  \t\t\"?x wdt:P1040 ?o .\",\n  \t\t\"?x wdt:P26 wd:Q312258 .\"\n  \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"{\",\n\t \t\t    \t\t\"?x1 ?p1 kg:7684.\",\n\t \t\t    \t\t\"?x2 ?p2 kg:3793.\",\n\t \t\t    \t\t\"?x3 ?p3 kg:4401.\",\n\t \t\t    \t\t\"?x4 ?p4 kg:8360.\",\n\t \t\t    \t\t\"?x5 ?p5 ?x1.\",\n\t \t\t    \t\t\"?x5 kg:6665 kg:6665.\",\n\t \t\t    \t\t\"?x6 ?p6 ?x1.\",\n\t \t\t    \t\t\"?x6 kg:3248 kg:6665.\"\n\t \t\t    \t]} "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE { \",\n   \t\t \t\t\"?acquirer wdt:P576 wd:Q123456 .\", \">// Replace Q123456 with the actual time of acquisition if known or remove this line if not needed. This is an example constraint to filter acquisitions by a specific date/time, which may be necessary for disambiguation in Wikidata queries involving temporal data like acquisitions.\",\n   \t\t \t\t\"?acquirer wdt:P127 ?distributorProducer .\", \">// P127 represents \" , \">// acquirer of\"\n   \t\t \t\t,\"?distributorProducer wdt:P31 wd:Q40897 .\", \">// Q40897 is the Wikidata item for 'film company'\"\n   \t\t \t\t,\"?distributorProducer wikt:P629 ?grandCanyonWork .\", \">// P629 represents \" , \">// distributes\" , \">// or \" , \">// produces\"\n   \t\t \t\t,\"?grandCanyonWork rdfs:label ?workLabel .\",\n   \t\t \t\t\"?acquirer wdt:P452 wd:Q107837 .\", \">// Q107837 is the Wikidata item for State Street Global Advisors, replace with other acquirers as needed and use OR (wdt:P452 ?item1) (wdt:P452 ?item2) etc.\"\n   \t\t \t\t,\"?acquirer wdt:P452 wd:Q60798 .\", \">// Q60798 is the Wikidata item for BlackRock\"\n   \t\t \t\t,\"?acquirer wdt:P452 wd:Q139665 .\", \">// Q139665 is the Wikidata item for T. Rowe Price\"\n   \t\t \t\t,\"?acquirer wdt:P452 wd:Q70865 .\", \">// Q70865 is the Wikidata item for Capital Group Companies\"\n   \t\t \t\t,\"?acquirer wdt:P452 wd:Q139666 .\", \">// Q139666 is the Wikidata item for State Farm Insurance\"\n   \t\t \t\t,\"?acquirer wdt:P452 wd:Q70866 .\", \">// Q70866 is the Wikidata item for The Vanguard Group\"\n   \t\t \t\t,\"FILTER (LANG(?workLabel) = 'en')\",\n   \t\t \t\t\"}\"\n   \t\t \t\t]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?x ?y ?z }\",\n     \t\t\"?x wdt:P127 wd:Q7603552 .\", \">// State Street Global Advisors owns x (company to be acquired by others) \",\n     \t\t\"?x wdt:P127 wd:Q219635 .\", \">// BlackRock owns x\",\n     \t\t\"?x wdt:P127 wd:Q3511946 .\", \">// T. Rowe Price owns x\",\n     \t\t\"?x wdt:P127 wd:Q505275 .\", \">// Capital Group Companies owns x\",\n     \t\t\"?x wdt:P127 wd:Q2007336 .\", \">// State Farm Insurance owns x\",\n     \t\t\"?x wdt:P127 wd:Q849363 .\", \">// The Vanguard Group owns x\",\n     \t\t\"?x wdt:P750 ?distributor .\", \">// x is distributed by the distributor\",\n     \t\t\"?x wdt:P272 ?producer .\" ]} "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8410 kg:4122 ?resource . ?resource kg:0622/kg:9245/kg:8849/kg:7561/kg:3467/kg:1950/kg:8425 }\"\n \t]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?movie WHERE {\",\n   \t\t \t\t\"?movie wdt:P31 wd:Q11421. \", \">// instance of film (Q11421 is the Wikidata ID for films/movies)\",\n   \t\t \t\t\"?movie wdt:P161 wd:Q7580. \", \">// has cast member Errol Flynn (Q7580 is the Wikidata ID for Errol Flynn)\",\n   \t\t \t\t\"?movie wdt:P161 wd:Q23945. \", \">// has cast member Paul Fix (Q23945 is the Wikidata ID for Paul Fix)\",\n   \t\t \t\t\"?movie wdt:P57 wd:Q7580. \", \">// director is Errol Flynn (assuming this part of the question is incorrect, as it's highly unlikely that Errol Flynn directed a movie; however, based on the given instruction, we follow the query structure strictly)\",\n   \t\t \t\t\"?movie wdt:P162 wd:Q7580. \", \">// producer is Errol Flynn (same assumption applies here)\",\n   \t\t \t\t\"?movie wdt:P144 wd:Q7580. \", \">// scriptwriter is Errol Flynn (same assumption applies here)\",\n   \t\t \t\t\"}\"\n\t\t \t\t]\n} "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"{ ?movie wdt:P31 wd:Q11424 . \"\n  \t\t]\n  \t\t}\n  \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"{?x kg:1087 kg:0743}\",\n \t\t  \t\t\"?x kg:1087 kg:8323\",\n \t\t  \t\t\"?x kg:3580 kg:4602\",\n \t\t  \t\t\"?x kg:9112 kg:1608\",\n \t\t  \t\t\"?x kg:9112 kg:6595\",\n \t\t  \t\t\"?x kg:9112 kg:0279\",\n \t\t  \t\t\"?x kg:3082 kg:0279}\",\n \t\t  \t\t\"?x kg:4101 kg:1860\"\n \t\t \t  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P720 wd:Q468531.\"\n \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q69423232 .\",\n \t\t\"?person wikibase:sameAs wd:Q103013.\"\n \t]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \", \">// Human check, though not strictly necessary for composer check but added to ensure Bob Dylan is a person first before checking if he's a composer as part of the broader question context interpretation. This line can be omitted or modified based on specific requirements or knowledge about the target subject (Bob Dylan in this case) beforehand. For strict translation without additional checks, it could start directly with the composer check below. <br> \" , \"?item wdt:P106 wd:Q639669; \", \">// Occupation as a composer<br> \" , \"FILTER(?item = wd:Q4752).\" , \">// Filter to ensure we're only checking Bob Dylan (Q4752 is the Wikidata ID for Bob Dylan)<br> \" ,\"BIND(wd:Q4752 AS ?resource)\" , \">// Bind the resource as requested in the instruction<br> \"]}\n \t"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"?dylan wdt:P106 ?occupation .\",\n    \"?composer wd:Q36834 ?occupation .\",\n    \"{?dylan wd:Q392 wd:Q392.}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n \t\"query\": [\"$BobDylan\" ]\n \t}\n \t                \t\t"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?tarkovsky wdt:P31 wd:Q5; \",\n \t\t\"wdt:P1477 ?film.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P1040 wd:Q853 .\"\n \t]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work1 ?sequelOf ?work2.\",\n    \"?work1 wdt:P1476 ?title1.\",\n    \"?work2 wdt:P1476 ?title2.\",\n    \"FILTER(?title1 = \\\"So Long, and Thanks for All the Fish\\\"@en && ?title2 = \\\"Life, the Universe and Everything\\\"@en)\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P155 wd:Q721 .\",\n \t\t\"?work wdt:P155 wd:Q1042294 .\"\n \t]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\"\n \t\t,\"WHERE {\"\n \t\t,\"?book kg:5330 ?sequel .\"\n \t\t,\"FILTER (?book = kg:7972 && ?sequel = kg:4904)\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?champollion wdt:P22 ?father ;\",\n    \"wdt:P25 ?mother .\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"?parent wdt:P40 wd:Q260 .\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n \t\"query\": [\n \t\t\"?parent kg:9549 kg:5475 .\"\n \t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P50 wd:Q8674 .\"\n \t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q42.\"\n \t]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work kg:author kg:5621.\"\n \t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?austria wdt:P31 wd:Q22; # Confirm that ?austria is an instance of country (Q22) and specifically Austria\\n\",\n    \"?maxMargules wdt:P31 wd:Q5; # Confirm that ?maxMargules is an instance of human (Q5)\\n\",\n    \"wdt:P108 ?organization. # Max Margules was employed by some organization (?organization)\\n\",\n    \"{?austria wdt:P279* ?organization} UNION # The organization is a subclass of Austria or directly Austria\\n\",\n    \"{?organization wdt:P17 ?austria} # The organization is located in Austria\\n\"\n  ]\n}\n    "}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P108 ?employer .\",\n \t\t\"?person wikibase:sense wd:Q79070 .\",\n \t\t\"?employer wikibase:sense wd:Q40 .\"\n \t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n \t\"query\": [\"$a\" ]\n \t}\n \t"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q7615;\", \">// Q7615 is J.R.R. Tolkien's ID in Wikidata, P800 indicates the author of a work (but note that this property does not exist in Wikidata, so we need to use another approach for finding works by an author like P50 which stands for 'author' or 'creator'). The correct property should be used based on the actual structure and properties available in Wikidata at the time of querying. For example, using wdt:P50 instead would look for authors of a work: ?work wdt:P50 wd:Q7615;.\",\n    \"?work rdfs:label 'The Hobbit: An Unexpected Journey'@en.\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q892 .\",\n \t\t\"FILTER(?work = wd:Q80379)\"\n \t]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P1476 \\\"A Good Day to Die Hard\\\";\",\n    \"?movie wdt:P1065 ?producer_role.\",\n    \"?producer_role wd:Q28394 .\",\n    \"?producer_role wdt:P161 ?person.\",\n    \"?person rdfs:label \\\"Bruce Willis\\\"@en.\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P1431 ?producer .\",\n \t\t\"?movie wd:Q72276 .\",\n \t\t\"?producer wd:Q2680 .\"\n \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n \t\"query\": [\"$actor kg:2143\", \"movie kg:5777\", \"$actor kg:0925 $movie\"]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q52913467 ;\", \">// Q52913467 is for \" ] }\n  "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P2515 wd:Q2733930 .\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q36834 .\"\n \t]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:5123 kg:1651 .\",\n \t\t\"?movie kg:title 'White Diamond: A Personal Portrait of Kylie Minogue'@en .\",\n \t\t\"?movie kg:costumeDesigner ?costumeDesigner .\",\n \t\t\"?costumeDesigner kg:5123 kg:9266 .\"\n \t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P276 ?olympia_work.\",\n    \"?olympia_work ps:P276 wd:Q948068.\",\n    \"?cinematographer wdt:P106 wd:Q36045.\",\n    \"?cinematographer wdt:P106 wd:Q154185.\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{ \"query\": [\n    \"?cinematographer wdt:P344 wd:Q158069 ;\",\n    \"wdt:P106 wd:Q69423232 .\"\n] }"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer kg:6330/kg:3806 ?work .  \",\n \t\t\"?cinematographer kg:5717 kg:3042 .\"\n \t]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?erich_honecker wdt:P26 ?spouse.\",\n    \"?spouse wdt:P108 wd:Q497535.\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{ \"query\": [\n    \"?spouse wdt:P26 wd:Q2607 .\",\n    \"?spouse wdt:P108 wd:Q76845 .\"\n] }"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n  \"query\": [\n    \"?spouse kg:7581 kg:8368 .\",\n    \"?spouse kg:9306 kg:7601 .\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?song wdt:P31 wd:Q57402869 ;\",\n    \"wdt:P375 ?composer .\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?item wdt:P162 ?composer.\",\n    \"?composer wdt:P106 wd:Q36834.\",\n    \"?item rdfs:label \\\"1999\\\"@en.\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 ?composer.\",\n    \"?work rdfs:label \\\"Al Compás de tu Mentira\\\"@es.\",\n    \"?composer p:P31/ps:P31/wdt:P279* wd:Q5.\",\n    \"?composer wdt:P136 wd:Q418545.\",\n    \"?screenplay wdt:P921 ?composer.\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q577126; wdt:P106 ?occupation. \",\n \t\t\"FILTER(?occupation = wd:Q69423232)\"\n \t]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:6677 ?work .\",\n \t\t\"?work kg:6046 \\\"Al Compás de tu Mentira\\\" .\",\n \t\t\"?composer kg:0046 ?occupation .\",\n \t\t\"FILTER (?occupation = kg:8622)\"\n \t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q709452.\",\n \t\t\"?film wdt:P86 ?composer;\",\n \t\t\"wdt:P31 wd:Q11424;\",\n \t\t\"wdt:P162 ?cinematographer.\",\n \t\t\"?cinematographer wdt:P31 wd:Q2107489.\"\n \t]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{ \"query\": [\n    \"?composer wdt:P86 wd:Q76582 ;\",\n    \"wdt:P106 wd:Q222344 .\"\n] }"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:5470 ?work .\",\n \t\t\"?composer kg:8613 kg:7873 .\",\n \t\t\"OPTIONAL { ?composer kg:8613 kg:6161 . }\"\n \t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?game wdt:P31 wd:Q7586920.\",\n    \"?game wdt:P147 wd:Q1005588.\",\n    \"?game wdt:P577 ?releaseDate.\",\n    \"wd:Q1005588 wdt:P577 ?centuryReleaseDate.\",\n    \"FILTER(?releaseDate > ?centuryReleaseDate)\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?game wdt:P155 wd:Q4348691; wdt:P750 wd:Q2283.\"\n  \t        \t\t\t]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?resource\\nWHERE {\\n    ?resource kg:7747 kg:2698 ;\\n              kg:6754 kg:8500 .\\n}\"] }"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?twinPeaksSequel wdt:P161 ?jamesParks .\",\n \t \"?twinPeaksSequel wdt:P31 wd:Q11424 .\",\n \t \"?jamesParks rdfs:label \\\"James Parks\\\"@en.\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q2085; wdt:P161 wd:Q967797.\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel kg:8519 kg:9033 .\",\n \t\t\"?sequel kg:9528 kg:2642 .\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P31 wd:Q5; \",\n \t\t\"wdt:P859 wd:Q70642668;\",\n \t\t\"?parent wdt:P40 wd:Q259526.\"\n \t]\n}\n   \t  \t \t \t \t \t \t \t "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q81950264 .\",\n \t\t\"?founder wdt:P40 wd:Q15070044\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?founder kg:5288 kg:0861 .\",\n \t\t\"FILTER NOT EXISTS { kg:5964 kg:0988 ?founder }\"\n \t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?hitlerSiblings wdt:P4: wd:Q2308 ?adolfHitler .\",\n \t \"?hitlerSiblings wdt:P108 ?uniqaInsuranceGroup .\",\n \t \"?uniqaInsuranceGroup rdfs:label \\\"Uniqa Insurance Group\\\"@en .\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?sibling wdt:P3373 wd:Q352 .\",\n \t    \t        \t\t\"?sibling wdt:P108 wd:Q1022419 .\",\n \t    \t        \t\t\"{?sibling wdt:P3373 wd:Q352. }\"\n \t                \t\t]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:2023 kg:9755 .\",\n \t\t\"?sibling kg:6233 kg:3300 .\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?drDreEmployer wdt:P856 ?website . \"\n \t\t,\n \t \"?animalCrossingGame wdt:P495 wd:Q203517 . \" ,\n \t \"?drDreEmployer p:P1435/psn:P1435 ?animalCrossingGame . \"\n \t\t,\n \t \"wd:Q80689 wdt:P108 ?drDreEmployer .\"\n \t\t,\n \t \"{?drDreEmployer wdt:P31/wdt:P279* wd:Q4830453.} UNION {?drDreEmployer wdt:P31/wdt:P279* wd:Q4642028.}\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n \t\"query\": [\n \t\t\"?employer wdt:P108 ?DrDre .\",\n \t\t\"?game wdt:P750 ?employer .\",\n \t\t\"VALUES (?DrDre) {(wd:Q6078)}\",\n \t\t\"VALUES (?game) {(wd:Q42310881)}\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#> .\\nSELECT ?employer\\nWHERE {\\n    kg:2257 kg:7506 ?employer .\\n    kg:5400 kg:6968 ?employer .\\n}\"] }"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?malia_parent wdt:P175 wd:Q24380695.\",\n    \"?employer wdt:P540 ?malia_parent.\",\n    \"?employer wdt:P112 ?ben_labolt.\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q15070044; wdt:P108 ?employer .\",\n \t\t\"?employer wdt:P355 wd:Q103941992\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4636 kg:4784 .\",\n \t\t\"?y kg:7837 kg:8530 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?costumeDesigner wdt:P31 wd:Q20758946; # instance of costume designer\\n\",\n \t \"wdt:P106 wd:Q20758946; # occupation costume designer\\n\",\n \t \"wdt:P26 ?spouse. # married to\\n\",\n \t \"?spouse wdt:P3373 ?sibling. # sibling\\n\",\n \t \"?sibling rdfs:label \\\"Pierre Van Dormael\\\"@en. # name is Pierre Van Dormael\\n\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q730300 .\",\n \t\t\"?spouse wdt:P26 ?sibling .\",\n \t\t\"?spouse wdt:P106 wd:Q1323191 .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:7103 kg:3209 .\",\n \t\t\"?sibling kg:1214 kg:1510 .\",\n \t\t\"?costumeDesigner kg:4927 ?sibling .\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?costumeDesigner wdt:P106 wd:Q2835479 . \\n\",\n \t \"?spouse wdt:P26 ?costumeDesigner . \\n\",\n \t \"FILTER(?spouse = wd:Q1048365)\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  ?spouse wdt:P106 wd:Q1323191 ;\\n           wdt:P26 ?founder.\\n  ?club wdt:P112 ?founder ;\\n        wdt:P1440 wd:Q1102919 .\\n}\"] }"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n \t\"query\": [\"$spouse\"]\n \t}\n \t                \t\t"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?item ?writtenAndDirectedBy ?georgeHarrison .\",\n \t \"?georgeHarrison wdt:P721 wd:Q36508 .\" ,\n \t \"wdt:P721 ?item .\"\n \t]\n}\n    "}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q2643 ;\",\n \t\t\"       wdt:P58 wd:Q2643 .\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P50 wd:Q16934287.\",\n    \"?item wdt:P31/wdt:P279* wd:Q571.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P58 wd:Q24907.\",\n \t\t\"?item wdt:P1040 wd:Q24907.\"\n \t]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5.\",\n \t\t\"?person wdt:P106/wdt:P279* wd:Q483223.\",\n \t\t\"?person rdfs:label \\\"Nadja Weiss\\\"@en.\",\n \t\t\"?person wdt:P25 ?parent.\",\n \t\t\"?parent wdt:P27 wd:Q34.\"\n \t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?weiss wdt:P106 wd:Q1323191.\",\n \t\t\"?weiss rdfs:label \\\"Nadja Weiss\\\"@en.\",\n \t\t\"?parent wdt:P40 ?weiss.\",\n \t\t\"?parent wdt:P27 wd:Q34.\"\n \t]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?entity kg:0132 ?parent .\",\n \t\t\"?entity kg:2768 kg:9889 .\",\n \t\t\"?entity foaf:name \\\"Nadja Weiss\\\"@en .\",\n \t\t\"?parent kg:2071 kg:2270 .\"\n \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?takenori_spouse wdt:P26 ?spouse .\",\n    \"?spouse wdt:P21 wd:Q6581072 ;\", \">// Assuming 'P21' is for sex or gender and 'Q6581072' represents female, adjust if necessary based on the actual context of the question as it's not clear from the question whether Takenori Sentō's spouse should be male or female. If the focus is solely on occupation without regard to gender, this line can be omitted or adjusted accordingly. \",\n    \"?spouse wdt:P27 wd:Q1740653 ;\", \">// Assuming 'P27' is for country of citizenship and 'Q1740653' represents Japan\",\n    \"?spouse wdt:P106 wd:Q189854 .\" , \">// Assuming 'P106' is for occupation and 'Q189854' represents cinematographer\"\n    ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q3514303;\",\n \t\t\"?spouse wdt:P27 wd:Q17;\",\n \t\t\"?spouse wdt:P106 wd:Q222344.\"\n \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{ \"query\": [\"@subject kg:6852 ?spouse . ?spouse kg:8642 kg:3620 . ?spouse kg:7805 true .\"] }"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?work wdt:P31 wd:Q7725608; # instance of creative work\\n\",\n \t \"       wdt:P50 wd:Q496. # author is Madonna\\n\",\n \t \"       wdt:P128 ?producer.\\n\",\n \t \"FILTER(?producer = wd:Q496)\\n\",\n \t \"?work\"\n \t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q1744 ;\",\n \t\t\"       wdt:P162 wd:Q1744 .\"\n \t]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n \t\"query\": [\"$work\"]\n \t}\n \t                \t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?costumeDesigner wdt:P106 wd:Q28354978 . # The costume designer occupation is Q28354978 for Costume designer (occupation) \\n ?sibling wdt:P40|wdt:P22 ?costumeDesigner . # sibling of the costume designer\\n ?sibling wdt:P3451 ?nadiaCassini . # married to Nadia Cassini, where P3451 is for spouse\\n\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 ?costumeDesigner .\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?sibling wdt:P26 wd:Q461354 .\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n \t\"query\": [\"$siblingOfCostumeDesigner\"]\n \t}\n \t                \t\t"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q102984654 ;\",\n    \"wdt:P108 ?company .\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"?company wdt:P108 wd:Q67134 .\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg#>. SELECT ?employer WHERE { kg:5190 kg:3218 ?employer . }\"] }"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q102496854;\",\n             \"?person p:P106/psn:P106 wd:Q3399812.\",\n             \"?company wdt:P1433 ?person.\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P750 ?distributor.\",\n \t\t\"wd:Q1094792 wdt:P108 ?distributor.\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2896 kg:2961 .\",\n \t\t\"?film kg:9508 ?distributor .\",\n \t\t\"kg:0153 kg:1212 ?distributor .\"\n \t]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q504420 .\",\n    \"?work p:P178 ?productionStatement .\",\n    \"?productionStatement ps:P178 ?producerDistributor .\",\n    \"?producerDistributor wdt:P17 wd:Q34 .\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"?productionCompany wdt:P272 wd:Q1651543 ;\",\n    \"wdt:P112 ?founder .\",\n    \"?distributionCompany wdt:P750 wd:Q1651543 .\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n \t\"query\": [\n \t\t\"?productionCompany kg:7764 ?foundBy.\",\n \t\t\"?productionCompany kg:2381 kg:4138.\",\n \t\t\"?foundBy kg:1692 ?productionCompany.\",\n \t\t\"FILTER(?foundBy = kg:6323)\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mark_sylwan wdt:P27 wd:Q34 ;\", \">// Mark Sylwan is from Sweden (country code Q34 for Sweden in Wikidata) \\n\",\n \t\t\"?mark_sylwan wdt:P26 ?spouse .\", \">// ?spouse represents the spouse of Mark Sylwan\\n\",\n \t\t\"?spouse wdt:P106 wd:Q158795 .\" , \">// Check if the spouse has a profession (P106) as costume designer (Q158795 in Wikidata)\\n\",\n \t\t\"VALUES ?mark_sylwan {wd:Q4823459}\" , \">// Assuming Q4823459 is Mark Sylwan's item ID in Wikidata\\n\",\n \t\t\"?spouse\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 wd:Q6200573 ;\",\n \t\t\"wdt:P106 wd:Q1323191 .\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?spouse kg:7345 ?markSylwan .\",\n \t\t\"?markSylwan kg:2873 ;\",\n \t\t\"kg:6742 kg:7953 .\",\n \t\t\"?spouse kg:9940/kg:2334 .\"\n \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?antiochusIV wdt:P31 wd:Q4085672 .\",\n    \"?relative wdt:P40|P41 ?antiochusIV .\",\n    \"?relative p:P34/wikibase:wikiLink \\\"Antiochus\\\"@en .\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n \t\"query\": [\n \t\t\"?siblingOrSpouse wdt:P26 wd:Q2045778 .\",\n \t\t\"{?siblingOrSpouse wdt:P3373 wd:Q3356.}\",\n \t\t\"UNION { ?siblingOrSpouse wdt:P26 wd:Q3356.}\"\n \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n \t\"query\": [\n \t\t\"?x (kg:9111|kg:2140) kg:0966 .\",\n \t\t\"?x kg:9111 kg:4202\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P31 wd:Q50784962; # Instance of opera (The Magic Flute is an opera, but you can also use its QID directly if known for more precision) \\n\",\n \t\t\"wdt:P800 ?distributorProducer. # has distributor/producer\\n\",\n \t\t\"?distributorProducer wdt:P17 wd:Q34 ; # located in Sweden\\n\",\n \t\t\"wdt:P31/wdt:P279* wd:Q4830452 .\" ,\"\\n\"\n \t\t]\n }"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{ \"query\": [\n    \"?distributor wdt:P750 wd:Q1651543 ;\",\n    \"wdt:P112 wd:Q34 .\",\n    \"?producer wdt:P272 wd:Q1651543 ;\",\n    \"wdt:P112 wd:Q34 .\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor kg:2736 ?work .\",\n \t\t\"?work kg:0937 ?producer .\",\n \t\t\"?work schema:name 'The Magic Flute' .\",\n \t\t\"?distributor kg:2428 kg:2665 .\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource\"\n \t]\n }\n \t            \t \t  \t"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q2336212 ;\",\n \t\t\"wdt:P27 wd:Q29999 ;\",\n \t\t\"wdt:P112 wd:Q117892 .\"\n \t]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:9358 kg:8984;\",\n \t\t\"?sibling kg:3182 kg:0127;\",\n \t\t\"?organization kg:6101 ?sibling;\",\n \t\t\"?organization = kg:9039.\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?hoenessSibling wdt:P41 ?fcBayernMunich .\",\n \t\t\"?hoenessSibling wdt:P25 wd:Q936078 .\", \">// Dieter Hoeneß's mother is also the sibling's mother, assuming they are siblings through this relation for simplicity in query construction without direct sibling relationship data available easily in Wikidata as of my last update. A more accurate approach would require knowing the exact sibling or a different property that directly links to being a sibling and working at FC Bayern Munich.\",\n \t\t\"?hoenessSibling wdt:P27 wd:Q183 .\", \">// Ensuring the person is German, as per the question's requirement of \"] }\n     \t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q60414;\",\n \t\t\"?sibling wdt:P108 wd:Q15789;\",\n \t\t\"?sibling wdt:P27 wd:Q183.\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:6028 ?dieterHoeneß .\",\n \t\t\"?dieterHoeneß kg:1887 kg:1887 .\",\n \t\t\"?sibling kg:9584 kg:1462 .\",\n \t\t\"?sibling kg:1789 ?employer .\",\n \t\t\"?employer kg:3247 kg:3247 .\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// Find instances of company (Q4830453 for Company entity in Wikidata) and assign to ?company variable\\n\",\n    \"wdt:P1416 ?movie .\", \">// Link the company with a movie through the 'production company' property (P1416)\\n\",\n    \"?movie wdt:P1476 \\\"Drums of Love\\\"@en ;\", \">// Find movies where the title is \" ,\"\\n\",\n    \"wdt:P85 ?founder .\", \">// Link the movie to its founder through the 'author' property (P85)\\n\",\n    \"?founder rdfs:label \\\"Charlie Chaplin\\\"@en .\" ,\"%20and%20the%20founder's%20name%20is%20Charlie%20Chaplin\\n\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P112 wd:Q882 .\",\n \t\t\"?movie wdt:P750 ?company ;\",\n \t\t\"wdt:P272 ?company .\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company kg:6240 kg:3206 .\",\n \t\t\"?movie kg:4037 ?company .\",\n \t\t\"?movie kg:9985 ?company .\",\n \t\t\"?movie kg:id kg:3603 .\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P50 wd:Q761342 .\",\n \t\t\"?work wdt:P148 wd:Q199046 .\",\n \t\t\"?work wdt:P31/wdt:P279* wd:Q7725655 .\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q4500 .\",\n \t\t\"?work wdt:P162 wd:Q888311 .\"\n \t]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work kg:8692 kg:0278 .\",\n \t\t\"?work kg:1093 kg:4570 .\"\n \t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P734 wd:Q209686;\",\n \t\t\"wdt:P27 wd:Q142.\",\n \t\t\"?person wdt:P3373 ?sibling.\"\n \t]\n}\n   \t \t  \t \t  \t \t  \t "}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\"$AlphonseLouisSibling\"]\n \t}\n \t                \t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n \t\"query\": [\n \t\t\"?sibling kg:8395 kg:5754 .\",\n \t\t\"FILTER EXISTS { kg:5754 kg:7731 kg:3096 } .\",\n \t\t\"FILTER EXISTS { ?company kg:7995 kg:8661 ; kg:7798 kg:5754 }\"\n \t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n           \"?film wdt:P57 ?stanWinston;\",\n           \"?stanWinston rdfs:label \\\"Stan Winston\\\"@en;\",\n           \"?film p:P57 [ps:P57 wd:Q40659; pq:P2860 wd:Q31524].\"\n  ]\n}\n    "}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P162 wd:Q320211 ;\",\n \t\t\"?film wdt:P58 wd:Q2831 .\"\n \t]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:id kg:8034 .\",\n \t\t\"?movie kg:producer ?producer .\",\n \t\t\"?producer kg:id kg:7229 .\",\n \t\t\"?movie kg:screenwriter ?screenwriter .\",\n \t\t\"?screenwriter kg:id kg:0963 .\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?project wdt:P179 ?production.\\n\",\n \t \"?production wdt:P57 ?producer.\\n\",\n \t \"wd:Q304186 wdt:P57 ?producer.\\n\", \">// Q304186 is the Wikidata ID for Steven Spielberg\\n\",\n \t \"?project wdt:P50 ?writer.\\n\",\n \t \"wd:Q42958 wdt:P50 ?writer.\\n\" , \">// Q42958 is the Wikidata ID for Chris Columbus\\n\"\n \t ]\n }"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?project wdt:P1431 wd:Q8877 ;\",\n \t\t\"wdt:P58 wd:Q75079 .\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"?project kg:6915 kg:6102 .\",\n \t\t\"?project kg:9189 kg:3512 .\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q7594806.\",\n \t\t\"?company wdt:P272 ?work.\",\n \t\t\"?work wdt:P1476 ?title.\",\n \t\t\"FILTER(CONTAINS(LCASE(?title), \\\"die zauberflöte\\\"))\",\n \t\t\"?production wdt:P921 ?company.\",\n \t\t\"?distribution wdt:P921 ?company.\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P272 wd:Q1651543 ;\",\n \t\t\"wdt:P750 wd:Q1651543 ;\",\n \t\t\"wdt:P17 wd:Q34 .\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company kg:5954 kg:6963 .\",\n \t\t\"?company kg:4053 kg:6963 .\",\n \t\t\"?company kg:5731 ?founder .\",\n \t\t\"FILTER EXISTS { ?company kg:6379 kg:6379 }\"\n \t]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?henutmire wdt:P22 ?parent1;\",\n             \"wdt:P23 ?parent2.\",\n    \"?henutmire wdt:P26 ?spouse.\",\n    \"?henutmire wdt:P40 ?sibling.\",\n    \"{?parent1 wdt:P31 wd:Q5.} UNION {?parent2 wdt:P31 wd:Q5.}\",\n    \"?spouse wdt:P31 wd:Q5.\",\n    \"?sibling wdt:P31 wd:Q5.\",\n    \"{?parent1 wdt:P40 ?nefertarilllala.} UNION\",\n    \"{?parent2 wdt:P40 ?nefertarilllala.} UNION\",\n    \"{?spouse wdt:P40 ?nefertarilllala.} UNION\",\n    \"{?sibling wdt:P40 ?nefertarilllala.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n \t\"query\": [\n \t\t\"?henutmire wdt:P40 ?parent .\",\n \t\t\"?parent wdt:P26 ?spouseOfParent .\",\n \t\t\"?henutmire wdt:P3373 ?sibling .\",\n \t\t\"?henutmire wdt:P26 ?spouseOfHenutmire .\",\n \t\t\"VALUES ?henutmire { wd:Q443473 }\",\n \t\t\"VALUES ?nefertari { wd:Q210535 }\",\n \t\t\"{?spouseOfParent wd:P26 ?nefertari.} UNION {?sibling wd:P26 ?nefertari.} UNION {?spouseOfHenutmire wd:P26 ?nefertari.}\"\n \t]\n}\n    "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n \t\"query\": [\n \t\t\"?parent kg:7411 kg:3170 .\",\n \t\t\"{?parent kg:1451/kg:0454.} UNION \",\n \t\t\"{kg:3170 kg:1451 ?spouse. ?spouse kg:1451/kg:0454.} UNION \",\n \t\t\"{?sibling kg:0332 kg:3170 . ?sibling kg:1451/kg:0454.}\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?jessica_drake wdt:P26 ?husband .\",\n \t\t\"?husband wdt:P21 wd:Q6581072 ;\",\n \t\t\"wdt:P24 wd:Q162193 ;\",\n \t\t\"wdt:P106 wd:Q158755 .\" ,\n \t\t\"?jessica_drake rdfs:label ?name .\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n \t\"query\": [\n \t\t\"?JessicaDrake wdt:P26 ?husband .\",\n \t\t\"?husband wdt:P27 wd:Q16 .\",\n \t\t\"?husband wdt:P106 wd:Q1323191 .\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:7920 ;\",\n \t\t\"kg:6576 kg:8031 ;\",\n \t\t\"kg:9858 kg:4339 .\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P818 ?series . \",\n \t\t\"?series rdfs:label \\\"Between Love and Hatred\\\"@en .\",\n \t\t\"?production wdt:P31 wd:Q745962 ;\",\n \t\t\"wdt:P1476 ?title ;\",\n \t\t\"wdt:P136 wd:Q80301 ;\",\n \t\t\"wdt:P145 wd:Q107875 .\",\n \t\t\"?production wdt:P159 ?work\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q115945; # The sequel to \" ]\n \t} "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:0304 kg:6712 ; kg:9757 kg:7511 ; kg:3056 kg:7511 . }\"] }"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?verizon wdt:P1267 ?acquiredCompany .\",\n \t\t\"?acquiredCompany wdt:P31 wd:Q4830453 .\", \">// Assuming Q4830453 is the Wikidata ID for \" ] }\n     "}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P355 ?subsidiary .\",\n \t\t\"?subsidiary wdt:P127 wd:Q467752 .\",\n \t\t\"?subsidiary wdt:P749 ?parent .\",\n \t\t\"?parent wdt:P355 ?subsidiary .\",\n \t\t\"FILTER (?company = ?parent)\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n \t\"query\": [\"$?company\"]\n \t}\n \t                \t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mary wdt:P31 wd:Q5;\",\n    \"?charlie wdt:P31 wd:Q5;\",\n    \"?producer Distributor wdt:P31 wd:Q24076896;\",\n    \"?barbaryCoast wdt:P31 wd:Q11424;\",\n    \"?mary wdt:P800 ?producer.\",\n    \"?charlie wdt:P800 ?producer.\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?productionCompany wdt:P112 ?founders .\",\n \t\t\"?film wdt:P272 ?productionCompany .\",\n \t\t\"?film wdt:P750 ?distributor .\",\n \t\t\"?film wdt:P361 wd:Q524849 .\", \">// Assuming P361 is the property for part of, as there's no direct property given for linking a film to \"] }\n"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?sibling wdt:P463 ?pearljam .\",\n \t \"?astridYoung wdt:P25 ?mother .\",\n \t \"?sibling wdt:P25 ?mother .\",\n \t \"FILTER(?astridYoung != ?sibling)\",\n \t \"?astridYoung rdfs:label \\\"Astrid Young\\\"@en.\"\n \t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q4811453 .\",\n \t\t\"?influence wdt:P737 ?sibling .\",\n \t\t\"?influence wdt:P106 wd:Q33999 .\",\n \t\t\"wd:Q142701 wdt:P737 ?influence .\"\n \t]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n \t\"query\": [\n \t\t\"?siblingOfAstridYoung kg:9947 kg:5840 .\",\n \t\t\"?pearlJam kg:0050 ?siblingOfAstridYoung .\",\n \t\t\"FILTER (?pearlJam = kg:6082)\"\n \t]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P50 wd:Q16934287, wd:Q16934288, wd:Q16934289.\",\n    \"?work wdt:P31/wdt:P279* wd:Q571.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n    "}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q1687239; wdt:P58 wd:Q35979475; wdt:P58 wd:Q562108.\",\n \t\t\"?work wdt:P1040 wd:Q1687239; wdt:P1040 wd:Q35979475; wdt:P1040 wd:Q562108.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"?work kg:hasContributor ?person .\",\n    \"?person a/kg:Person ;\",\n    \"   kg:id/kg:2939, kg:5314, kg:8392 ;\",\n    \"   kg:hasRole/kg:4955, kg:8021.\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?spanishCostumeDesigner wdt:P31 wd:Q5; # instance of human\\n\",\n \t\t\"\\twdt:P27 wd:Q29; # country of citizenship Spain\\n\",\n \t\t\"\\twdt:P106 wd:Q158471; # occupation costume designer\\n\",\n \t\t\"\\twdt:P3373 ?miguelAlbaladejo . # sibling Miguel Albaladejo\\n\",\n \t\t\"?miguelAlbaladejo rdfs:label \\\"Miguel Albaladejo\\\"@es. # label in Spanish\\n\",\n \t\t\"FILTER NOT EXISTS { ?spanishCostumeDesigner wdt:P570 [] } # filter out people with a death date (i.e., still alive)\\n\",\n \t\t\"?film wdt:P162 ?spanishCostumeDesigner . # film where the person is costume designer\\n\"\n \t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?costumeDesigner wdt:P2515 ?film.\",\n \t    \t        \t\t\"?costumeDesigner wdt:P3373 wd:Q3083718.\",\n \t    \t        \t\t\"?costumeDesigner wdt:P27 wd:Q29.\",\n \t    \t        \t\t\"?film wdt:P31 wd:Q11424.\"\n \t                \t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3905 kg:1750 .\",\n \t\t\"?x kg:8324 kg:9566 .\",\n \t\t\"?x kg:3275 kg:8085 .\"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?matthew_wife wdt:P26 ?mattias_jarvinen_palme .\",\n \t\t\"?matthew_wife wdt:P21 wd:Q6581072 .\", \">// Female gender, to specify the wife entity but this part might not be directly accurate for the specific case without more context on Mattias Järvinen Palme's spouse in Wikidata. Adjust as necessary based on available data and precision required for \"] }\n \t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?wife wdt:P26 wd:Q96203723 ;\",\n \t\t\"wdt:P21 wd:Q6581072 ;\",\n \t\t\"wdt:P27 wd:Q34 ;\",\n \t\t\"wdt:P106 wd:Q36834 .\"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?wife kg:8981 kg:3493;\",\n \t\t\"?wife kg:3915 true;\",\n \t\t\"?wife kg:7145 kg:0427;\",\n \t\t\"?wife kg:9843 kg:8357.\"\n \t]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n            \"?film rdfs:label \\\"Stop for Bud\\\"@en;\",\n            \"?film wdt:P57 ?producer_director.\",\n            \"{?producer_director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.} UNION\",\n            \"{?producer_director rdfs:label \\\"Ole John\\\"@en.} UNION\",\n            \"{?producer_director rdfs:label \\\"Jørgen Leth\\\"@en.}\"\n  ]\n}\n    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?film wdt:P162 wd:Q1687239 ;\",\n    \"?film wdt:P162 wd:Q35979475 ;\",\n    \"?film wdt:P162 wd:Q562108 ;\",\n    \"?film wdt:P1040 wd:Q1687239 ;\",\n    \"?film wdt:P1040 wd:Q35979475 ;\",\n    \"?film wdt:P1040 wd:Q562108 .\"\n  ]\n}\n    "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:isFilm ?film.\",\n \t\t\"?movie kg:id 'kg:4937'.\",\n \t\t\"?person1 kg:id 'kg:0455'.\",\n \t\t\"?person2 kg:id 'kg:8729'.\",\n \t\t\"?person3 kg:id 'kg:4823'.\",\n \t\t\"{?person1 kg:isProducerOf ?movie.}\",\n \t\t\"UNION {?person1 kg:isFilmEditorOf ?movie.}\",\n \t\t\"{?person2 kg:isProducerOf ?movie.}\",\n \t\t\"UNION {?person2 kg:isFilmEditorOf ?movie.}\",\n \t\t\"{?person3 kg:isProducerOf ?movie.}\",\n \t\t\"UNION {?person3 kg:isFilmEditorOf ?movie.}\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?antiochus wdt:P31 wd:Q5; \",\n \t\t\"wdt:P1409 ?name; \",\n \t\t\"p:P26 ?marriageStatement. \",\n \t\t\"?marriageStatement ps:P26 ?spouse; pq:P452 wd:Q758907.\",\n \t\t\"?spouse wdt:P31 wd:Q5;\",\n \t\t\"wdt:P22|wdt:P23 wd:Q758907.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"?sisterWife wdt:P26 wd:Q296446; \", \">// Antiochus IX Cyzicenus's spouse (?sisterWife) is also a sister and wife of Ptolemy IX Lathyros (wd:Q3340), so we start by finding the spouse of Antiochus IX Cyzicenus. We use ?sisterWife as a variable to represent this person who will be both a sister and a wife in relation to Ptolemy IX Lathyros and Antiochus IX Cyzicenus respectively. The property wdt:P26 is used for spouse relationships in Wikidata, and wd:Q296446 represents Antiochus IX Cyzicenus as the subject of this relationship (i.e., his spouse is being sought). This part of the query sets up the search for a person who was married to Antiochus IX Cyzicenus. We use ?sisterWife because we know from the question that this individual will also be a sister and wife, which means she has two relationships with Ptolemy IX Lathyros: one as his sister (sibling) and another as his wife (spouse). The query is structured to find such an individual who fulfills both roles in relation to Ptolemy IX Lathyros while also being the spouse of Antiochus IX Cyzicenus. This setup allows us to narrow down our search based on these specific relationships, ensuring we identify the correct person as per the question's requirements. The use of wd:Q3340 (Ptolemy IX Lathyros) in conjunction with wdt:P26 and wdt:P3373 will help establish the necessary connections to find ?sisterWife who meets all these criteria. We also need to ensure that this person is female, which can be checked using wdt:P21 wd:Q6581072 (female). This additional condition helps in filtering out any incorrect matches and ensures we are looking for a woman as required by the question's context. The query structure thus aims to find a specific individual who fulfills all these roles and conditions, making it precise and targeted towards answering the given question accurately based on the provided Wikidata entities and properties.\"\n \t\t]\n }"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:8755 ;\",\n \t\t\"kg:4633 kg:3391 ;\",\n \t\t\"kg:8490 kg:0538 .\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P50 wd:Q16934287, wd:Q16934288, wd:Q16934289.\",\n \t\t\"?work wdt:P31/wdt:P279* wd:Q571.\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n     \t\t\t\t\t  \t      "}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q1687239, wd:Q562108 ;\",\n \t\t\"       wdt:P1040 wd:Q35979475 .\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work kg:isFilmEditorOf/kg:isScreenwriterOf ?person .\",\n \t\t\"?person kg:hasName kg:1969, kg:5002, kg:4516 .\"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P50 wd:Q16934287, wd:Q16934288, wd:Q16934289.\",\n    \"?work wdt:P31 wd:Q571512.\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475; wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475. \"\n \t]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work kg:2364 ?resource .\",\n \t\t\"{?resource kg:6557 kg:3159.} UNION {?resource kg:4093 kg:3159.}\",\n \t\t\"{?resource kg:6557 kg:7577.} UNION {?resource kg:4093 kg:7577.}\",\n \t\t\"{?resource kg:6557 kg:5506.} UNION {?resource kg:4093 kg:5506.}\"\n \t]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P1476 ?title ;\",\n    \"wdt:P31 wd:Q528909 ;\",\n    \"wdt:P161 ?person .\",\n    \"{?person wdt:P1476 \\\"Ole John\\\"@en.}\",\n    \"UNION\",\n    \"{?person wdt:P1476 \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?person wdt:P1476 \\\"Jens Jørgen Thorsen\\\"@en.}\"\n  ]\n}\n    "}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q20729551.\",\n \t\t\"?movie wdt:P1040 ?editor.\",\n \t\t\"{?editor wd:Q35979475.} UNION {?editor wd:Q562108.} UNION {?editor wd:Q1687239.}\",\n \t\t\"?movie wdt:P162 ?producer.\",\n \t\t\"{?producer wd:Q35979475.} UNION {?producer wd:Q562108.} UNION {?producer wd:Q1687239.}\"\n \t]\n}\n   "}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:id kg:9129 .\",\n \t\t\"?person1 kg:id kg:7611 ; ?role1 ?movie .\",\n \t\t\"?person2 kg:id kg:0062 ; ?role2 ?movie .\",\n \t\t\"?person3 kg:id kg:1312 ; ?role3 ?movie .\",\n \t\t\"{?role1 kg:id kg:1680.} UNION {?role1 kg:id kg:5139.}\",\n \t\t\"{?role2 kg:id kg:1680.} UNION {?role2 kg:id kg:5139.}\",\n \t\t\"{?role3 kg:id kg:1680.} UNION {?role3 kg:id kg:5139.}\"\n \t]\n}\n   "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P155 wd:Q760948; # Sam Simon as producer/eproducer\\n\",\n    \"wdt:P155 wd:Q230055;   # James L. Brooks as producer/eproducer\\n\",\n    \"wdt:P155 wd:Q41547.     # Matt Groening as producer/eproducer\\n\"\n  ]\n}\n    "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?production wdt:P162 / wd:Q365090;\",\n \t\t\"?production wdt:P162 / wd:Q95125;\",\n \t\t\"?production wdt:P162 / wd:Q43994;\",\n \t\t\"?production wdt:P1431 / wd:Q365090;\",\n \t\t\"?production wdt:P1431 / wd:Q95125;\",\n \t\t\"?production wdt:P1431 / wd:Q43994.\"\n \t]\n }\n    "}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n \t\"query\": [\n \t\t\"?production kg:0948|kg:3178 ?person .\",\n \t\t\"{?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> \\\"kg:2672\\\".} UNION {?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> \\\"kg:7057\\\".} UNION {?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> \\\"kg:1133\\\".}\"\n \t]\n}\n  \t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?sisterWife wdt:P31 wd:Q5; \",\n \t\t\"wdt:P22 wd:Q749608; \",\n \t\t\"wdt:P26 wd:Q749608. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?sister wdt:P26 wd:Q3340 ;\",\n \t    \t        \t\t\"?sister wdt:P3373 wd:Q3340 ;\",\n \t    \t        \t\t\"?sister wdt:P3373 wd:Q3345 ;\",\n \t    \t        \t\t\"?sister wdt:P21 wd:Q6581072 .\"\n \t        \t\t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n \t\"query\": [\n \t\t\"?s kg:1580 kg:9841 .\",\n \t\t\"?s kg:9782 kg:1945 .\",\n \t\t\"{kg:1945 kg:4989 ?s.} union {kg:4993 kg:4989 ?s.}\"\n \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q53947286 ;\",\n    \"wdt:P577 ?publicationDate ;\",\n    \"rdfs:label ?titleLabelFilter .\",\n    \"FILTER (LANG(?titleLabelFilter) = 'en') .\",\n    \"{\",\n      \"?work wdt:P50 wd:Q159354 .\",\n      \"?work wdt:P50 wd:Q7628065 .\",\n    \"} UNION {\",\n      \"?work wdt:P57 wd:Q159354 .\",\n      \"?work wdt:P57 wd:Q7628065 .\",\n    \"} UNION {\",\n      \"?work wdt:P58 wd:Q159354 .\",\n      \"?work wdt:P58 wd:Q7628065 .\",\n    \"}\",\n    \"FILTER (?titleLabelFilter = \\\"Breaking Bad\\\"@en)\"\n  ]\n}\n  \t\t"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P162 wd:Q4500;\",\n \t\t\"?work wdt:P162 wd:Q5542223;\",\n \t\t\"?work wdt:P57 wd:Q4500;\",\n \t\t\"?work wdt:P57 wd:Q5542223;\",\n \t\t\"?work wdt:P58 wd:Q4500;\",\n \t\t\"?work wdt:P58 wd:Q5542223.\",\n \t\t\"FILTER (?work = wd:Q1079)\"\n \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2805 ?y .\",\n \t\t\"?x kg:3866 ?z .\",\n \t\t\"?x kg:0075 ?w .\",\n \t\t\"?y kg:2221/kg:6328/kg:3866 kg:5986 .\"\n \t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?costumeDesigner wdt:P31 wd:Q483220 .\",\n    \"?film1 wdt:P57 ?costumeDesigner ;\",\n    \"wdt:P1476 \\\"Tom at the Farm\\\"@en .\",\n    \"?film2 wdt:P57 ?costumeDesigner ;\",\n    \"wdt:P1476 \\\"Heartbeats\\\"@en .\",\n    \"?film3 wdt:P57 ?costumeDesigner ;\",\n    \"wdt:P1476 \\\"Laurence Anyways\\\"@en\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P161 wd:Q2615443 ;\",\n \t\t\"?costumeDesigner wdt:P161 wd:Q2336453 ;\",\n \t\t\"?costumeDesigner wdt:P161 wd:Q3530946 ;\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 ;\",\n \t\t\"?costumeDesigner wdt:P1040 wd:Q2615443 ;\",\n \t\t\"?costumeDesigner wdt:P1040 wd:Q2336453 ;\",\n \t\t\"?costumeDesigner wdt:P1040 wd:Q3530946 .\"\n \t]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2002 kg:0137 .\",\n \t\t\"?y kg:7277 ?x .\",\n \t\t\"{?y kg:9083 ?z.} UNION {?y kg:3899 ?z.} UNION {?y kg:8202 ?z.}\",\n \t\t\"?w kg:6947 ?y.\"\n \t]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"(wdt:P161|wdt:P156) ?film.\",\n \t\t\"{?film rdfs:label \\\"In the Park\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?film rdfs:label \\\"Shanghaied\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?film rdfs:label \\\"Modern Times\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?film rdfs:label \\\"The Professor\\\"@en.}\"\n \t]\n}\n   \t\t\t \t        \t \t\t"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5.\",\n \t\t\"{?person wdt:P161 wd:Q658822. ?person wdt:P1040 wd:Q658822.} \",\n \t\t\"{?person wdt:P161 wd:Q921678. ?person wdt:P1040 wd:Q921678.} \",\n \t\t\"{?person wdt:P161 wd:Q45602. ?person wdt:P1040 wd:Q45602.} \",\n \t\t\"{?person wdt:P161 wd:Q2718259. ?person wdt:P1040 wd:Q2718259.}\"\n \t]\n}\n    "}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director\",\n    \"wdt:P31\",\n    \"wd:Q5\",\n    \".\",\n    \"?director\",\n    \"wdt:P136\",\n    \"wd:Q207498\",\n    \";\",\n    \"p:P800\",\n    \"|\",\n    \"p:P162\",\n    \"?work.\",\n    \"?work\",\n    \"pq:P155\",\n    \"wd:Q154552\",\n    \";\",\n    \"pq:P921\",\n    \"?director.\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q1291210, wd:Q4207234, wd:Q16198328, wd:Q4679987; wdt:P1040 wd:Q1291210, wd:Q4207234, wd:Q16198328, wd:Q4679987.\"\n \t]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"?work kg:6483 ?director .\",\n    \"{?director kg:sameAs kg:4625.} UNION {?director kg:sameAs kg:8606.} UNION {?director kg:sameAs kg:1102.} UNION {?director kg:sameAs kg:9172.}\",\n    \"?work kg:8022 ?editor .\",\n    \"{?editor kg:sameAs kg:4625.} UNION {?editor kg:sameAs kg:8606.} UNION {?editor kg:sameAs kg:1102.} UNION {?editor kg:sameAs kg:9172.}\"\n  ]\n}\n   "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; \",\n    \"wdt:P57 ?director; \",\n    \"wdt:P921 ?writer.\",\n    \"?director rdfs:label ?directorName;\",\n    \"wdt:P31 wd:Q5.\",\n    \"?writer rdfs:label ?writerName.\",\n    \"FILTER (?film = wd:Q180465)\",\n    \"FILTER (?directorName IN ('Alexandre Rockwell', 'Quentin Tarantino', 'Allison Anders', 'Robert Rodriguez'))\",\n    \"FILTER (?writerName IN ('Alexandre Rockwell', 'Quentin Tarantino', 'Allison Anders', 'Robert Rodriguez'))\"\n  ]\n}\n    "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 wd:Q549956, wd:Q3772, wd:Q2838329, wd:Q47284; wdt:P58 wd:Q549956, wd:Q3772, wd:Q2838329, wd:Q47284; wikibase:sameAs wd:Q1137372.\"\n \t]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:9620 .\",\n \t\t\"{?director kg:5595 ?movie. ?director kg:id 'kg:0913'.} UNION {?screenwriter kg:0937 ?movie. ?screenwriter kg:id 'kg:0913'.}\",\n \t\t\"{?director kg:5595 ?movie. ?director kg:id 'kg:8047'.} UNION {?screenwriter kg:0937 ?movie. ?screenwriter kg:id 'kg:8047'.}\",\n \t\t\"{?director kg:5595 ?movie. ?director kg:id 'kg:2759'.} UNION {?screenwriter kg:0937 ?movie. ?screenwriter kg:id 'kg:2759'.}\",\n \t\t\"{?director kg:5595 ?movie. ?director kg:id 'kg:2202'.} UNION {?screenwriter kg:0937 ?movie. ?screenwriter kg:id 'kg:2202'.}\"\n \t]\n}\n  \t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q11424; # instance of work\\n\",\n    \"       rdfs:label \\\"Super Rhino\\\"@en; # title in English\\n\",\n    \"       wdt:P57 ?director. # director(s) of the work\\n\",\n    \"{?director (wdt:P31/ wd:P279*) wd:Q5} UNION # director is a human\\n\",\n    \"{?producer wdt:P31 wd:Q5; # producer is a human\\n\",\n    \"           wdt:P162 ?work.} # producer of the work\\n\",\n    \"?person (wdt:P453/wdt:P800)* ?director. # link person to director or producer\\n\",\n    \"{?person rdfs:label \\\"Susie Essman\\\"@en} UNION\\n\",\n    \"{?person rdfs:label \\\"Malcolm McDowell\\\"@en} UNION\\n\",\n    \"{?person rdfs:label \\\"Clark Spencer\\\"@en} UNION\\n\",\n    \"{?person rdfs:label \\\"Miley Cyrus\\\"@en.}\\n\",\n    \"FILTER EXISTS {\\n\",\n    \"?work wdt:P31 wd:Q11424.\\n\",\n    \"}\\n\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P31 wd:Q11424; \",\n \t\t\"wdt:P161 wd:Q3977597;\",\n \t\t\"wdt:P57 ?director;\",\n \t\t\"wdt:P162 ?producer.\",\n \t\t\"{?director wd:Q40220.} UNION\",\n \t\t\"{?director wd:Q117392.} UNION\",\n \t\t\"{?director wd:Q5127380.} UNION\",\n \t\t\"{?director wd:Q4235.}\",\n \t\t\"{?producer wd:Q40220.} UNION\",\n \t\t\"{?producer wd:Q117392.} UNION\",\n \t\t\"{?producer wd:Q5127380.} UNION\",\n \t\t\"{?producer wd:Q4235.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\": [\n    \"?x kg:1096 kg:9028 .\",\n    \"?x kg:6682 kg:9028 .\",\n    \"{ kg:9356 kg:1096 ?x . kg:9356 kg:6682 ?x . } UNION \",\n    \"{ kg:5093 kg:1096 ?x . kg:5093 kg:6682 ?x . } UNION \",\n    \"{ kg:5307 kg:1096 ?x . kg:5307 kg:6682 ?x . } UNION \",\n    \"{ kg:2703 kg:1096 ?x . kg:2703 kg:6682 ?x . }\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?work ?writtenBy wd:Q145820.\\n\",\n \t \"?work ?executiveProducedBy wd:Q145820.\\n\",\n \t \"?work ?producedBy wd:Q145820.\\n\",\n \t \"?work ?editedBy wd:Q145820.\"\n \t]\n}\n   \t   \t\t          \t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q38222 ;\",\n \t\t\"?work wdt:P1040 wd:Q38222 ;\",\n \t\t\"?work wdt:P1431 wd:Q38222 ;\",\n \t\t\"?work wdt:P162 wd:Q38222 .\"\n \t]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n \t\"query\": [\n \t\t\"?work kg:9266 kg:0613 .\",\n \t\t\"?work kg:3493 kg:0613 .\",\n \t\t\"?work kg:5643 kg:0613 .\",\n \t\t\"?work kg:8870 kg:0613 .\"\n \t]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P800 wd:Q762945; # Every Man for Himself (film) writer/editor is ?person\\n\",\n \t\t\"?person wdt:P800 wd:Q1309857; # Passion (1992 film) writer/editor is ?person\\n\",\n \t\t\"?person wdt:P800 wd:Q4692277; # Notre Musique writer/editor is ?person\\n\",\n \t\t\"?person wdt:P1411 wd:Q350986. # ?person worked at Cahiers du cinéma\\n\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P58 wd:Q972787, wd:Q672061, wd:Q3141131;\",\n \t\t\"?person wdt:P1040 wd:Q972787, wd:Q672061, wd:Q3141131;\",\n \t\t\"?person wdt:P108 wd:Q909176.\"\n \t]\n}\n    "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:Person .\",\n \t\t\"?x kg:screenwriter kg:2653, kg:2627, kg:7573;\",\n \t\t\"?x kg:film_editor kg:2653, kg:2627, kg:7573;\",\n \t\t\"?x kg:employer kg:9335.\"\n \t]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424; # Instance of movie\\n\",\n    \"wdt:P1476 ?title; # Title\\n\",\n    \"wdt:P50 ?producer; # Producer\\n\",\n    \"wdt:P161 ?exec_producer. # Executive producer\\n\",\n    \"?title wikibase:directClaim wd:P1476 \\\"Laws of Attraction\\\"@en.\\n\",\n    \"{?exec_producer rdfs:label \\\"Bob Yari\\\"@en.} UNION\\n\",\n    \"{?producer rdfs:label \\\"Pierce Brosnan\\\"@en.} UNION\\n\",\n    \"{?exec_producer rdfs:label \\\"Toby Emmerich\\\"@en.} UNION\\n\",\n    \"{?producer rdfs:label \\\"Elie Samaha\\\"@en.}\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424;\",\n \t\t\"?movie rdfs:label \\\"Laws of Attraction\\\"@en;\",\n \t\t\"{?movie wdt:P1431 wd:Q1969128.} UNION\",\n \t\t\"{?movie wdt:P1431 wd:Q81520.} UNION\",\n \t\t\"{?movie wdt:P1431 wd:Q1295611.} UNION\",\n \t\t\"{?movie wdt:P1431 wd:Q381545.}\",\n \t\t\"{?movie wdt:P162 wd:Q1969128.} UNION\",\n \t\t\"{?movie wdt:P162 wd:Q81520.} UNION\",\n \t\t\"{?movie wdt:P162 wd:Q1295611.} UNION\",\n \t\t\"{?movie wdt:P162 wd:Q381545.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\": [\n    \"?movie kg:0533 ?executiveProducer .\",\n    \"?movie kg:5056 ?producer .\",\n    \"{ ?executiveProducer kg:wikidata ?person1 . } UNION { ?person1 kg:wikidata ?executiveProducer . }\",\n    \"{ ?producer kg:wikidata ?person2 . } UNION { ?person2 kg:wikidata ?producer . }\",\n    \"FILTER(?movie = kg:5622)\",\n    \"FILTER(?person1 IN (kg:1278, kg:2187, kg:7661, kg:9767))\",\n    \"FILTER(?person2 IN (kg:1278, kg:2187, kg:7661, kg:9767))\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?kagemusha wdt:P31 wd:Q11424;\",\n    \"?kagemusha wdt:P57 ?akiraRole.\",\n    \"?akiraRole (wdt:P161|wdt:P106|wdt:P178|wdt:P198)* wd:Q9301.\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"?kagemusha wdt:P58 ?akiraKurosawa ;\",\n    \"?kagemusha wdt:P1040 ?akiraKurosawa ;\",\n    \"?kagemusha wdt:P162 ?akiraKurosawa ;\",\n    \"?kagemusha wdt:P1431 ?akiraKurosawa .\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n \t\"query\": [\"$AkiraKurosawa\"]\n \t}\n \t                \t\t"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?project wdt:P57 ?director .\",\n    \"?project wdt:P36 ?editor .\",\n    \"?project wdt:P2 ?writer .\",\n    \"{?director rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"{?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"{?writer rdfs:label \\\"Ole John\\\"@en.}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?project wdt:P57 wd:Q562108 ;\",\n \t\t\"wdt:P58 wd:Q1687239 ;\",\n \t\t\"wdt:P1040 wd:Q35979475 .\"\n \t]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?project kg:0289 kg:0365 .\",\n \t\t\"?project kg:4637 kg:0365 .\",\n \t\t\"?project kg:7265 kg:0365 .\",\n \t\t\"?project kg:0289 kg:3287 .\",\n \t\t\"?project kg:4637 kg:3287 .\",\n \t\t\"?project kg:7265 kg:3287 .\",\n \t\t\"?project kg:0289 kg:4530 .\",\n \t\t\"?project kg:4637 kg:4530 .\",\n \t\t\"?project kg:7265 kg:4530 .\"\n \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 ?oleJohn ;\",\n \t\t\"wdt:P57 ?jorgenLeth ;\",\n \t\t\"wdt:P57 ?jensJorgenThorsen ;\",\n \t\t\"wdt:P31 wd:Q11424 .\",\n \t\t\"?oleJohn rdfs:label \\\"Ole John\\\"@da;\",\n \t\t\"wdt:P31 wd:Q5.\",\n \t\t\"?jorgenLeth rdfs:label \\\"Jørgen Leth\\\"@da;\",\n \t\t\"wdt:P31 wd:Q5.\",\n \t\t\"?jensJorgenThorsen rdfs:label \\\"Jens Jørgen Thorsen\\\"@da;\",\n \t\t\"wdt:P31 wd:Q5.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q35979475, wd:Q562108, wd:Q1687239 ;\",\n \t\t\"?work wdt:P58 wd:Q35979475, wd:Q562108, wd:Q1687239 ;\",\n \t\t\"?work wdt:P1040 wd:Q35979475, wd:Q562108, wd:Q1687239 .\"\n \t]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?work kg:9712 kg:5238; # director is Ole John\",\n \t\t\"?work kg:9712 kg:7889; # director is Jørgen Leth\",\n \t\t\"?work kg:9712 kg:2197; # director is Jens Jørgen Thorsen\",\n \t\t\"?work kg:2466 kg:5238; # screenwriter is Ole John\",\n \t\t\"?work kg:2466 kg:7889; # screenwriter is Jørgen Leth\",\n \t\t\"?work kg:2466 kg:2197; # screenwriter is Jens Jørgen Thorsen\",\n \t\t\"?work kg:9552 kg:5238; # film editor is Ole John\",\n \t\t\"?work kg:9552 kg:7889; # film editor is Jørgen Leth\",\n \t\t\"?work kg:9552 kg:2197. # film editor is Jens Jørgen Thorsen\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?filmLabel .\",\n    \"{?film wdt:P156 ?cinematographer_director.} UNION\",\n    \"{?film wdt:P57 ?cinematographer_director.}\",\n    \"?cinematographer_director wdt:P31 wd:Q209485;\",\n    \"?cinematographer_director wdt:P106/wdt:P279* wd:Q209485;\",\n    \"OPTIONAL {?cinematographer_director wdt:P39 wd:Q140520.}\",\n    \"FILTER(?filmLabel = \\\"The Whip and the Body\\\"@en || ?filmLabel = \\\"Hatchet for the Honeymoon\\\"@en || ?filmLabel = \\\"Danger: Diabolik\\\"@en || ?filmLabel = \\\"Black Sunday\\\"@en)\",\n    \"{?cinematographer_director wdt:P39 wd:Q140520.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographerDirector wdt:P344 wd:Q600762 ;\",\n \t\t\"wdt:P57 wd:Q283699, wd:Q629819, wd:Q1216566 ;\",\n \t\t\"wdt:P106 wd:Q3282637 .\"\n \t]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6263 ?occupation .\",\n \t\t\"{?x kg:3120 kg:7705 .\",\n \t\t\"?x kg:3120 kg:2063 .\",\n \t\t\"?x kg:3120 kg:7198 .\",\n \t\t\"?x kg:3120 kg:7085 .} UNION {\",\n \t\t\"?x kg:2265 kg:7705 .\",\n \t\t\"?x kg:2265 kg:2063 .\",\n \t\t\"?x kg:2265 kg:7198 .\",\n \t\t\"?x kg:2265 kg:7085 .}\",\n \t\t\"FILTER (?occupation = kg:0627)\"\n \t]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?filmLabel .\",\n    \"{?film wdt:P161 ?person.} UNION\",\n    \"{?film wdt:P355 ?person.} UNION\",\n    \"{?film wdt:P57 ?person.}\",\n    \"FILTER(?film = wd:Q290847 || ?film = wd:Q142959 || ?film = wd:Q607457 || ?film = wd:Q302589)\",\n    \"?person wdt:P31 wd:Q5.\"\n  ]\n}\n    "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director;\",\n    \"?film wdt:P106 wd:Q33999;\",\n    \"?film wdt:P344 ?cinematographer.\",\n    \"{?film rdfs:label 'Six Men Getting Sick'@en.}\",\n    \"UNION\",\n    \"{?film rdfs:label 'Inland Empire'@en.}\",\n    \"UNION\",\n    \"{?film rdfs:label 'Darkened Room'@en.}\",\n    \"UNION\",\n    \"{?film rdfs:label 'Rabbits'@en.}\"\n  ]\n}\n   "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person kg:9234 ?film .\",\n \t\t\"?person kg:5713 ?film .\",\n \t\t\"?person kg:5366 ?film .\",\n \t\t\"{?film kg:9628 kg:9628.} UNION {?film kg:0113 kg:0113.} UNION {?film kg:9038 kg:9038.} UNION {?film kg:1977 kg:1977.}\"\n \t]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P50 wd:Q1249867 .\",\n    \"?work wdt:P50 wd:Q300441 .\",\n    \"?work wdt:P50 wd:Q1250005 .\",\n    \"?work wdt:P162 wd:Q1249867 .\",\n    \"?work wdt:P162 wd:Q300441 .\",\n    \"?work wdt:P162 wd:Q1250005 .\",\n    \"?work wdt:P580 wd:Q1249867 .\",\n    \"?work wdt:P580 wd:Q300441 .\",\n    \"?work wdt:P580 wd:Q1250005 .\"\n  ]\n}\n    "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; # instance of film/movie\\n\",\n \t\t\"       wdt:P57 ?director; # director\\n\",\n \t\t\"       wdt:P750 ?editor; # editor\\n\",\n \t\t\"       wdt:P921 ?writer. # writer\\n\",\n \t\t\"?director rdfs:label \\\"Ole John\\\"@da, \\\"Jens Jørgen Thorsen\\\"@da, \\\"Jørgen Leth\\\"@da.\\n\",\n \t\t\"?editor rdfs:label \\\"Ole John\\\"@da, \\\"Jens Jørgen Thorsen\\\"@da, \\\"Jørgen Leth\\\"@da.\\n\",\n \t\t\"?writer rdfs:label \\\"Ole John\\\"@da, \\\"Jens Jørgen Thorsen\\\"@da, \\\"Jørgen Leth\\\"@da.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P57 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n \t\t\"?film wdt:P58 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n \t\t\"?film wdt:P1040 wd:Q35979475, wd:Q1687239, wd:Q562108 .\"\n \t]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film kg:0677 kg:7862 .\",\n \t\t\"?film kg:0677 kg:3772 .\",\n \t\t\"?film kg:0677 kg:7339 .\",\n \t\t\"?film kg:8507 kg:7862 .\",\n \t\t\"?film kg:8507 kg:3772 .\",\n \t\t\"?film kg:8507 kg:7339 .\",\n \t\t\"?film kg:4848 kg:7862 .\",\n \t\t\"?film kg:4848 kg:3772 .\",\n \t\t\"?film kg:4848 kg:7339 .\"\n \t]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q11424; # Instance of work (film in this context, assuming Grindhouse is a film) \\n\",\n    \"wdt:P57 ?director; # Director(s)\\n\",\n    \"{?director wdtn:P1569 \\\"Eli Roth\\\"} UNION\\n\", \"{?director wdtn:P1569 \\\"Edgar Wright\\\"} UNION\\n\", \"{?director wdtn:P1569 \\\"Rob Zombie\\\"} UNION\\n\", \"{?director wdtn:P1569 \\\"Quentin Tarantino\\\"} UNION\\n\", \"{?director wdtn:P1569 \\\"Robert Rodriguez\\\"};\\n\",\n    \"wdt:P921 ?author. # Author(s) or writer(s)\\n\"\n  ]\n}\n    "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"?movie wdt:P57 ?director.\",\n    \"?movie wdt:P58 ?screenwriter.\",\n    \"{?director wd:Q47284.} UNION {?director wd:Q522057.} UNION {?director wd:Q358714.} UNION {?director wd:Q3772.} UNION {?director wd:Q298255.}\",\n    \"{?screenwriter wd:Q47284.} UNION {?screenwriter wd:Q522057.} UNION {?screenwriter wd:Q358714.} UNION {?screenwriter wd:Q3772.} UNION {?screenwriter wd:Q298255.}\",\n    \"?movie wdt:P31 wd:Q679023.\"\n  ]\n}\n   "}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:is screenwriter kg:1454 ;\",\n \t\t\"?movie kg:is screenwriter kg:8328 ;\",\n \t\t\"?movie kg:is screenwriter kg:0795 ;\",\n \t\t\"?movie kg:is screenwriter kg:9736 ;\",\n \t\t\"?movie kg:is screenwriter kg:2406 ;\",\n \t\t\"?movie kg:is director kg:1454 ;\",\n \t\t\"?movie kg:is director kg:8328 ;\",\n \t\t\"?movie kg:is director kg:0795 ;\",\n \t\t\"?movie kg:is director kg:9736 ;\",\n \t\t\"?movie kg:is director kg:2406 .\"\n \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmProducer wdt:P31 wd:Q5.\",\n    \"?filmProducer wdt:P106 wd:Q28794.\",\n    \"{?filmProducer wdt:P50 wd:Q104386 ; wdt:P57 wd:Q104386.}\",\n    \"{?filmProducer wdt:P50 wd:Q210955 ; wdt:P57 wd:Q210955.}\",\n    \"{?filmProducer wdt:P50 wd:Q190246 ; wdt:P57 wd:Q190246.}\",\n    \"{?filmProducer wdt:P50 wd:Q382926 ; wdt:P57 wd:Q382926.}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer wdt:P106 wd:Q3282637 .\",\n \t\t\"?producer wdt:P58 wd:Q567519 ;\",\n \t\t\"wdt:P58 wd:Q686125 ;\",\n \t\t\"wdt:P58 wd:Q327427 ;\",\n \t\t\"wdt:P58 wd:Q2789885 .\"\n \t]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer kg:9570 ?film .\",\n \t\t\"{?film kg:1392 kg:1392.} UNION {?film kg:5270 kg:5270.} UNION {?film kg:5693 kg:5693.} UNION {?film kg:3942 kg:3942.}\",\n \t\t\"?producer kg:1121/kg:6788 ?screenwriterRole .\",\n \t\t\"?producer kg:1121/kg:3259 ?editorRole.\"\n \t]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?project wdt:P57 ?directorWriter .\",\n \t\t\"{?directorWriter wd:Q21064893.} UNION {?directorWriter wd:Q17050768.} UNION {?directorWriter wd:Q16917555.} UNION {?directorWriter wd:Q16917556.} UNION {?directorWriter wd:Q214384.}\",\n \t\t\"?project wdt:P31 wd:Q11424. # Filter for projects (e.g., TV series, films)\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n \t\"query\": [\n \t\t\"?project wdt:P57 wd:Q15042700; wdt:P58 wd:Q15042700;\",\n \t\t\"?project wdt:P57 wd:Q7174311; wdt:P58 wd:Q7174311;\",\n \t\t\"?project wdt:P57 wd:Q5542223; wdt:P58 wd:Q5542223;\",\n \t\t\"?project wdt:P57 wd:Q7407299; wdt:P58 wd:Q7407299;\",\n \t\t\"?project wdt:P57 wd:Q4500; wdt:P58 wd:Q4500.\"\n \t]\n }\n    "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n \t\"query\": [\n \t\t\"?project kg:0286 ?director .\",\n \t\t\"?project kg:5267 ?screenwriter .\",\n \t\t\"{?director owl:sameAs kg:4558.} UNION {?screenwriter owl:sameAs kg:4558.}\",\n \t\t\"{?director owl:sameAs kg:6899.} UNION {?screenwriter owl:sameAs kg:6899.}\",\n \t\t\"{?director owl:sameAs kg:0982.} UNION {?screenwriter owl:sameAs kg:0982.}\",\n \t\t\"{?director owl:sameAs kg:2196.} UNION {?screenwriter owl:sameAs kg:2196.}\",\n \t\t\"{?director owl:sameAs kg:6928.} UNION {?screenwriter owl:sameAs kg:6928.}\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?production wdt:P161 wd:Q2093587; \", \">// Ole John in production as actor/actress (P161) Q2093587 is Ole John's Wikidata ID. This part of the query checks if there is a production that involves Ole John as an actor or actress. However, to fully answer the question, we need to include Jens Jørgen Thorsen and Jørgen Leth in similar fashion and also check for directorship, writing, and editing roles which are not directly addressed here due to complexity of including all conditions in a single line without knowing exact Wikidata IDs or properties for these individuals' specific contributions. For simplicity and direct translation as requested, focusing on the involvement of Ole John is shown here with an indication that further refinement would be necessary to fully address the question's requirements.\"\n \t\t,\n \t\t\"?production wdt:P57 wd:Q2093587; \", \">// This line attempts to check if Ole John was involved in a production as director (P57), but it is not accurate since P57 refers to director and Q2093587 is Ole John's ID, which doesn't make sense for the property. The correct approach would involve identifying the specific roles of each individual and their Wikidata IDs.\"\n \t\t,\n \t\t\"?production wdt:P61 wd:Q2093587; \", \">// This line attempts to check if Ole John was involved in a production as writer (P61), but it is not accurate for the same reason mentioned above. The correct approach would involve identifying the specific roles of each individual and their Wikidata IDs.\"\n \t\t,\n \t\t\"?production wdt:P75 wd:Q2093587 .\" ,\">// This line attempts to check if Ole John was involved in a production as editor (P75), but it is not accurate for the same reason mentioned above. The correct approach would involve identifying the specific roles of each individual and their Wikidata IDs.\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?production wdt:P57 ?director.\",\n \t\t\"?production wdt:P58 ?screenwriter.\",\n \t\t\"?production wdt:P1040 ?editor.\",\n \t\t\"{?production wdt:P57 wd:Q35979475.} UNION {?production wdt:P57 wd:Q1687239.} UNION {?production wdt:P57 wd:Q562108.}\",\n \t\t\"{?production wdt:P58 wd:Q35979475.} UNION {?production wdt:P58 wd:Q1687239.} UNION {?production wdt:P58 wd:Q562108.}\",\n \t\t\"{?production wdt:P1040 wd:Q35979475.} UNION {?production wdt:P1040 wd:Q1687239.} UNION {?production wdt:P1040 wd:Q562108.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?production kg:6229 ?director .\",\n \t\t\"?production kg:4344 ?screenwriter .\",\n \t\t\"?production kg:0618 ?editor .\",\n \t\t\"?production kg:hasCast kg:3628 .\",\n \t\t\"?production kg:hasCast kg:7861 .\",\n \t\t\"?production kg:hasCast kg:8050 .\"\n \t]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n      \"{?film rdfs:label \\\"Star Wars: Episode IV – A New Hope\\\"@en; wdt:P162 ?person.} UNION\",\n      \"{?film rdfs:label \\\"Star Wars: Episode I – The Phantom Menace\\\"@en; wdt:P162 ?person.} UNION\",\n      \"{?film rdfs:label \\\"Star Wars: Episode VI – Return of the Jedi\\\"@en; wdt:P162 ?person.} UNION\",\n      \"{?film rdfs:label \\\"Star Whores\\\"@en; wdt:P162 ?person.}\",\n    \"?person wdt:P31 wd:Q5;\",\n    \"?person wdt:P106/wdt:P279* wd:Q1485858.\",\n    \"?film wdt:P50 ?person.\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P58 wd:Q17738, wd:Q165713, wd:Q181803, wd:Q3968346;\",\n \t\t\"?person wdt:P1431 wd:Q17738, wd:Q165713, wd:Q181803, wd:Q3968346;\",\n \t\t\"?person wdt:P106 wd:Q7042855.\"\n \t]\n}\n    "}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n \t\"query\": [\n \t\t\"?person kg:7901 kg:9486 .\",\n \t\t\"?person kg:8729 ?movie1 .\",\n \t\t\"?person kg:9870 ?movie1 .\",\n \t\t\"{?movie1 kg:7901 kg:4212.} UNION {?movie1 kg:7901 kg:2824.} UNION {?movie1 kg:7901 kg:7215.} UNION {?movie1 kg:7901 kg:3339.}\"\n \t]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q11424;\",\n           \"?work rdfs:label \\\"Stop for Bud\\\"@en;\",\n           \"?work wdt:P50 ?author.\",\n           \"{?author rdfs:label \\\"Ole John\\\"@en.}\",\n           \"UNION\",\n           \"{?author rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n           \"UNION\",\n           \"{?author rdfs:label \\\"Jørgen Leth\\\"@en.}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P57 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n \t\t\"wdt:P1040 wd:Q35979475, wd:Q1687239, wd:Q562108 ;\",\n \t\t\"wdt:P58 wd:Q35979475, wd:Q1687239, wd:Q562108 .\"\n \t]\n}\n    "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:id kg:7483 .\",\n \t\t\"?movie kg:director ?director .\",\n \t\t\"?movie kg:screenwriter ?screenwriter .\",\n \t\t\"?movie kg:filmEditor ?editor .\",\n \t\t\"{?director kg:id kg:2342.} UNION {?director kg:id kg:1653.} UNION {?director kg:id kg:6976.}\",\n \t\t\"{?screenwriter kg:id kg:2342.} UNION {?screenwriter kg:id kg:1653.} UNION {?screenwriter kg:id kg:6976.}\",\n \t\t\"{?editor kg:id kg:2342.} UNION {?editor kg:id kg:1653.} UNION {?editor kg:id kg:6976.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5;\",\n      \"wdt:P162 wd:Q87049, wd:Q11449;\",\n      \"wdt:P50 wd:Q11449;\",\n      \"wdt:P345 wd:tt0120915, wd:tt0112450, wd:tt0112451.\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P1431 wd:Q192403;\",\n \t\t\"?person wdt:P1431 wd:Q165713;\",\n \t\t\"?person wdt:P58 wd:Q613974;\",\n \t\t\"?person wdt:P58 wd:Q208910;\",\n \t\t\"?person wdt:P58 wd:Q1869678;\",\n \t\t\"?person wdt:P344 wd:Q613974;\",\n \t\t\"?person wdt:P344 wd:Q208910;\",\n \t\t\"?person wdt:P344 wd:Q1869678.\"\n \t]\n }\n    "}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8695 kg:3675 .\",\n \t\t\"?x kg:8695 kg:4438 .\",\n \t\t\"?x kg:3076 kg:7257 .\",\n \t\t\"?x kg:3076 kg:4002 .\",\n \t\t\"?x kg:3076 kg:2498 .\",\n \t\t\"?x kg:4014 kg:7257 .\",\n \t\t\"?x kg:4014 kg:4002 .\",\n \t\t\"?x kg:4014 kg:2498\"\n \t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n      \"{?film rdfs:label \\\"Uzak\\\"@en; wdt:P57 ?person.} UNION\",\n      \"{?film rdfs:label \\\"Clouds of May\\\"@en; wdt:P57 ?person.}\",\n      \"?person wdt:P31 wd:Q5.\"\n  ]\n}\n  \t\t"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?director ?item wdt:P57 wd:Q1361018 ;\",\n \t\t\"wdt:P57 wd:Q2086445 ;\",\n \t\t\"wdt:P58 wd:Q1361018 ;\",\n \t\t\"wdt:P58 wd:Q2086445 ;\",\n \t\t\"wdt:P1040 wd:Q1361018 ;\",\n \t\t\"wdt:P1040 wd:Q2086445 ;\",\n \t\t\"wdt:P1431 wd:Q1361018 ;\",\n \t\t\"wdt:P1431 wd:Q2086445 .\"\n \t]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n \t\"query\": [\"$filmDirector\", \"$filmWriter\", \"$filmEditor\", \"$filmProducer\"]\n \t}\n \t                \t\t"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P577 ?releaseDate;\",\n            \"?movie rdfs:label \\\"Airplane!\\\"@en;\",\n            \"{?movie wdt:P57 ?writer. ?writer rdfs:label ?writerLabel.}\",\n            \"{?movie wdt:P58 ?director. ?director rdfs:label ?directorLabel.}\",\n            \"{?movie wdt:P162 ?producer. ?producer rdfs:label ?producerLabel.}\",\n            \"FILTER(?writerLabel = \\\"Jim Abrahams\\\"@en || ?writerLabel = \\\"Jerry Zucker\\\"@en || ?writerLabel = \\\"David Zucker\\\"@en)\",\n            \"FILTER(?directorLabel = \\\"Jim Abrahams\\\"@en || ?directorLabel = \\\"Jerry Zucker\\\"@en || ?directorLabel = \\\"David Zucker\\\"@en)\",\n            \"FILTER(?producerLabel = \\\"Jim Abrahams\\\"@en || ?producerLabel = \\\"Jerry Zucker\\\"@en || ?producerLabel = \\\"David Zucker\\\"@en)\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n            \"?film wdt:P57 ?creator.\",\n            \"?creator (wdt:P31/wdt:P279*) wd:Q5;\",\n            \"?creator wdt:P166 wd:Q803487.\",\n    \"{?creator wdt:P155 ?film.} UNION\",\n    \"{?film wdt:P57 ?creator.} UNION\",\n    \"{?film wdt:P162 ?creator.}\",\n    \"FILTER (?creator = wd:Q191560 || ?creator = wd:Q438817 || ?creator = wd:Q438816)\"\n  ]\n}\n  \t            \t \t  "}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q294762; \",\n \t\t\"wdt:P136 wd:Q294762; \",\n \t\t\"wdt:P162 wd:Q294762; \",\n \t\t\"wdt:P162 wd:Q508055; \",\n \t\t\"wdt:P162 wd:Q531025.\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q1140578 ;\",\n \t\t\"wdt:P57 wd:Q2085 ;\",\n \t\t\"wdt:P58 wd:Q1140578 ;\",\n \t\t\"wdt:P58 wd:Q2085 ;\",\n \t\t\"wdt:P1431 wd:Q1140578 ;\",\n \t\t\"wdt:P1431 wd:Q2085 ;\",\n \t\t\"wdt:P1431 wd:Q1511905 ;\",\n \t\t\"wdt:P1431 wd:Q583406 .\"\n \t]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8250 kg:8673;\",\n \t\t\"?x kg:3480 kg:8673;\",\n \t\t\"?x kg:9095 kg:8673;\",\n \t\t\"?x kg:9095 kg:3424;\",\n \t\t\"?x kg:9095 kg:6685;\",\n \t\t\"?x kg:9095 kg:8911.\"\n \t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P57 ?director1 ;\",\n \t\t\"wdt:P57 ?director2 ;\",\n \t\t\"wdt:P57 ?director3 ;\",\n \t\t\"wdt:P57 ?director4 ;\",\n \t\t\"wdt:P57 ?director5 ;\",\n \t\t\"wdt:P85 ?writer1 ;\",\n \t\t\"wdt:P85 ?writer2 ;\",\n \t\t\"wdt:P85 ?writer3 ;\",\n \t\t\"wdt:P85 ?writer4 ;\",\n \t\t\"wdt:P85 ?writer5 .\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P57 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546.\",\n \t\t\"?film wdt:P58 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546.\"\n \t]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film kg:0018 kg:8677 .\",\n \t\t\"?film kg:2253 kg:8473;\",\n \t\t\"kg:2253 kg:6967;\",\n \t\t\"kg:2253 kg:6905;\",\n \t\t\"kg:2253 kg:9987;\",\n \t\t\"kg:2253 kg:3385.\",\n \t\t\"?film kg:8834 kg:8473;\",\n \t\t\"kg:8834 kg:6967;\",\n \t\t\"kg:8834 kg:6905;\",\n \t\t\"kg:8834 kg:9987;\",\n \t\t\"kg:8834 kg:3385.\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?composer (wdt:P86|wdt:P175) ?spyKidsMovie .\",\n    \"?spyKidsMovie wdt:P31 wd:Q11424 ;\",\n    \" rdfs:label \\\"Spy Kids 3-D: Game Over\\\"@en .\",\n    \"\",\n    \"?person (wdt:P86|wdt:P175) ?sinCityMovies .\",\n    \"?sinCityMovies wdt:P31 wd:Q11424 ;\",\n    \" rdfs:label ?movieLabel .\",\n    \"FILTER (?movieLabel IN(\\\"Sin City\\\"@en, \\\"Sin City: A Dame to Kill For\\\"@en)) .\",\n    \"\",\n    \"?person (wdt:P86|wdt:P175) ?sharkboyMovie .\",\n    \"?sharkboyMovie wdt:P31 wd:Q11424 ;\",\n    \" rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\",\n    \"\",\n    \"{?person wdt:P161 ?spyKidsMovie.} UNION\",\n    \"{?person wdt:P57 ?sinCityMovies.} UNION\",\n    \"{?person wdt:P344 ?sinCityMovies.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q550196 .\",\n \t\t\"{?composer wdt:P161 wd:Q192115. ?composer wdt:P57 wd:Q192115. ?composer wdt:P344 wd:Q192115.}\",\n \t\t\"UNION\",\n \t\t\"{?composer wdt:P161 wd:Q1653396. ?composer wdt:P57 wd:Q1653396. ?composer wdt:P344 wd:Q1653396.}\",\n \t\t\"UNION\",\n \t\t\"{?composer wdt:P161 wd:Q656357. ?composer wdt:P57 wd:Q656357. ?composer wdt:P344 wd:Q656357.}\"\n \t]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:5687 kg:6804 .\",\n \t\t\"?composer kg:4329 kg:1669 .\",\n \t\t\"?composer kg:9737 kg:1669 .\",\n \t\t\"?composer kg:7674 kg:1669 .\",\n \t\t\"?composer kg:4329 kg:0943 .\",\n \t\t\"?composer kg:9737 kg:0943 .\",\n \t\t\"?composer kg:7674 kg:0943 .\",\n \t\t\"?composer kg:4329 kg:7667 .\",\n \t\t\"?composer kg:9737 kg:7667 .\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?composer wdt:P86 wd:Q7504 ;\", \">// A Woman of Paris (Q7504) composer is ?composer, P86 means music composition by this person or entity. But since the question involves multiple aspects and direct SPARQL query for such specific information might not be straightforward due to how data is structured in Wikidata, a more generalized approach focusing on finding an individual who matches all criteria would be needed. However, based strictly on the given instruction and aiming to return resources only, this part focuses on identifying the composer of \" ,\n    \"?composer wdt:P86 wd:Q105297 ;\", \">// Pay Day (Q105297) composer is ?composer\",\n    \"?person wdt:P31 wd:Q5 ;\", \">// ?person is an instance of human (Q5)\",\n    \"?person p:P162/psn:P162/wdt:P31 wd:Q5 .\", \">// ?person served as editor and star, but this part needs to be more specific. However, for the sake of returning resources only and based on the instruction, we focus on identifying a person who is an instance of human.\",\n    \"FILTER EXISTS { ?movie wdt:P57 ?composer ;\", \">// There exists a movie where ?composer composed music\",\n    \"wdt:P162 ?person . }\", \">// And ?person served as editor and star for that movie\",\n    \"{ ?movie wd:Q24039 ; } UNION { ?movie wd:Q7588 ; } UNION { ?movie wd:Q114855 }\" , \">// \" ,\n    \"?movie\" ,\n    \"}\"\n  ]\n}\n  "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86/wdt:P86 wd:Q470895 ;\",\n \t\t\"wdt:P86/wdt:P86 wd:Q199039 ;\",\n \t\t\"wdt:P1040 wd:Q238211 ;\",\n \t\t\"wdt:P1040 wd:Q45602 ;\",\n \t\t\"wdt:P1040 wd:Q3986814 ;\",\n \t\t\"wdt:P161 wd:Q238211 .\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:3584 kg:8907, kg:9350;\",\n \t\t\"?composer kg:1558, kg:7599 kg:6990, kg:2929, kg:3709.\"\n \t]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424; # Instance of movie\\n\",\n    \"       wdt:P57 ?directors; # Directed by\\n\",\n    \"       wdt:P98 ?writers;   # Written by\\n\",\n    \"       wdt:P1061 ?producers. # Executive producer\\n\",\n    \"?directors wd:P1563* wd:Q2450575, wd:Q2450577, wd:Q2450580; # Jim Abrahams, Jerry Zucker, David Zucker\\n\",\n    \"            wdt:P31 wd:Q5. # Human\\n\",\n    \"?writers wd:P1563* wd:Q2450575, wd:Q2450577, wd:Q2450580; # Jim Abrahams, Jerry Zucker, David Zucker\\n\",\n    \"           wdt:P31 wd:Q5. # Human\\n\",\n    \"?producers wd:P1563* wd:Q2450575, wd:Q2450577, wd:Q2450580; # Jim Abrahams, Jerry Zucker, David Zucker\\n\",\n    \"            wdt:P31 wd:Q5. # Human\\n\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?project wdt:P57 ?yudaiYamaguchi ; # director\\n\",\n \t \"wdt:P58 ?ernestoDiazEspinoza ; # writer\\n\",\n \t \"wdt:P59 ?adrianGarciaBogliano ; # editor\\n\",\n \t \"wdt:P57 ?yoshihiroNishimura . # director\\n\",\n \t \"?yudaiYamaguchi rdfs:label \\\"Yūdai Yamaguchi\\\"@en .\\n\",\n \t \"?ernestoDiazEspinoza rdfs:label \\\"Ernesto Díaz Espinoza\\\"@en .\\n\",\n \t \"?adrianGarciaBogliano rdfs:label \\\"Adrián García Bogliano\\\"@en .\\n\",\n \t \"?yoshihiroNishimura rdfs:label \\\"Yoshihiro Nishimura\\\"@en .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n \t\t\"?project wdt:P57 wd:Q4023328 ;\",\n \t\t\"wdt:P57 wd:Q5836844 ;\",\n \t\t\"wdt:P57 wd:Q5658534 ;\",\n \t\t\"wdt:P57 wd:Q4022902 ;\",\n \t\t\"wdt:P58 wd:Q4023328 ;\",\n \t\t\"wdt:P58 wd:Q5836844 ;\",\n \t\t\"wdt:P58 wd:Q5658534 ;\",\n \t\t\"wdt:P58 wd:Q4022902 ;\",\n \t\t\"wdt:P1040 wd:Q4023328 ;\",\n \t\t\"wdt:P1040 wd:Q5836844 ;\",\n \t\t\"wdt:P1040 wd:Q5658534 ;\",\n \t\t\"wdt:P1040 wd:Q4022902 .\"\n \t]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n \t\"query\": [\n \t\t\"?project kg:5097 ?director .\",\n \t\t\"?project kg:9452 ?screenwriter .\",\n \t\t\"?project kg:7928 ?editor .\",\n \t\t\"{?director kg:sameAs kg:4231. ?screenwriter kg:sameAs kg:2932. ?editor kg:sameAs kg:4009.} UNION \",\n \t\t\"{?director kg:sameAs kg:4231. ?screenwriter kg:sameAs kg:4009. ?editor kg:sameAs kg:2932.} UNION \",\n \t\t\"{?director kg:sameAs kg:2932. ?screenwriter kg:sameAs kg:4231. ?editor kg:sameAs kg:4009.} UNION \",\n \t\t\"{?director kg:sameAs kg:2932. ?screenwriter kg:sameAs kg:4009. ?editor kg:sameAs kg:4231.} UNION \",\n \t\t\"{?director kg:sameAs kg:4009. ?screenwriter kg:sameAs kg:4231. ?editor kg:sameAs kg:2932.} UNION \",\n \t\t\"{?director kg:sameAs kg:4009. ?screenwriter kg:sameAs kg:2932. ?editor kg:sameAs kg:4231.} UNION \",\n \t\t\"?project kg:5097/kg:sameAs kg:6145 .\",\n \t\t\"?project kg:9452/kg:sameAs kg:6145 .\",\n \t\t\"?project kg:7928/kg:sameAs kg:6145 .\"\n \t]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmEditor wdt:P31 wd:Q5.\",\n    \"?filmEditor wdt:P101 wd:Q249786.\",\n    \"{?filmEditor p:P36 wdt:Q570024; ps:P36 ?movie.} UNION\",\n    \"{?filmEditor p:P58 wdt:Q570024; ps:P58 ?movie.} UNION\",\n    \"{?filmEditor p:P162 wdt:Q570024; ps:P162 ?movie.}\",\n    \"?movie rdfs:label ?movieLabel.\",\n    \"FILTER(?movieLabel IN ('Pietà', 'Dream', 'Moebius'))\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P1040 wd:Q483197 ;\",\n \t\t\"wdt:P1040 wd:Q484679 ;\",\n \t\t\"wdt:P1040 wd:Q13471372 ;\",\n \t\t\"wdt:P58 wd:Q483197 ;\",\n \t\t\"wdt:P58 wd:Q484679 ;\",\n \t\t\"wdt:P58 wd:Q13471372 ;\",\n \t\t\"wdt:P1431 wd:Q483197 ;\",\n \t\t\"wdt:P1431 wd:Q484679 ;\",\n \t\t\"wdt:P1431 wd:Q13471372 .\"\n \t]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n \t\"query\": [\"$filmEditor\"]\n \t}\n \t                \t\t"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?producer wdt:P31 wd:Q207589 .\",\n \t\t\"?movie1 wdt:P57 ?producer ;\",\n \t\t\"wdt:P1476 ?title1 ;\",\n \t\t\"{ wd:Q11397978 } .\",\n \t\t\"?movie2 wdt:P57 ?producer ;\",\n \t\t\"wdt:P1476 ?title2 ;\",\n \t\t\"{ wd:Q20800988 } .\",\n \t\t\"?movie3 wdt:P57 ?producer ;\",\n \t\t\"wdt:P1476 ?title3 ;\",\n \t\t\"{ wd:Q16195568 } .\",\n \t\t\"?producer wdt:P31/wdt:P279* wd:Q207589 .\"\n \t]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer wdt:P106 wd:Q3282637 .\",\n \t\t\"?movie1 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n \t\t\"?movie2 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n \t\t\"?movie3 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n \t\t\"VALUES (?movie1 ?movie2 ?movie3) {(wd:Q5437360 wd:Q12813010 wd:Q6084069)} \"\n \t]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?producer kg:1754 kg:0001, kg:9766, kg:1742;\",\n \t\t\"?producer kg:8750/kg:1754 ?role1.\",\n \t\t\"?producer kg:6372/kg:1754 ?role2.\",\n \t\t\"?producer kg:0075/kg:1754 ?role3.\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P800 wd:Q15243; \", \">// P800 is for writer/editor, Q15243 is Jacques Demy's ID in Wikidata, but we need to adjust this part as it doesn't directly answer the question. We are looking for someone Jacques Demy married and was influenced by who also wrote or edited those works. So a more accurate approach would be needed focusing on relationships and works connection. However, based strictly on the instruction and aiming for resources only, here's an adjusted version focusing on finding the person related to these works and Jacques Demy: \"\n \t\t,\"wdt:P86 wd:Q203495; \", \">// Q203495 is \" ,\"Vagabond\" ,\", but this property (P86) doesn't exist. The correct approach would involve finding the right properties for works and relationships, which isn't straightforward without more specific Wikidata IDs or properties for these exact relations.\"\n \t\t,\"wdt:P86 wd:Q523947; \", \">// Q523947 is \" ,\"Varda by Agnès\" ,\", again, this property (P86) doesn't exist. The correct approach would involve finding the right properties for works and relationships.\"\n \t\t,\"wdt:P86 wd:Q105897; \", \">// Q105897 is \" ,\"The Gleaners and I\" ,\", again, this property (P86) doesn't exist. The correct approach would involve finding the right properties for works and relationships.\"\n \t\t,\"wdt:P26 wd:Q15243.\" , \">// P26 is spouse, Q15243 is Jacques Demy's ID in Wikidata\"\n \t\t,\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\" ,\n \t\t\"?writer.\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?writerEditor wdt:P58 wd:Q2298257 ;\",\n \t\t\"wdt:P58 wd:Q2493884 ;\",\n \t\t\"wdt:P1040 wd:Q2298257 ;\",\n \t\t\"wdt:P1040 wd:Q2493884 ;\",\n \t\t\"wdt:P1040 wd:Q63993096 ;\",\n \t\t\"wdt:P58 wd:Q63993096 ;\",\n \t\t\"wdt:P26 wd:Q312258 ;\",\n \t\t\"wdt:P737 wd:Q312258 .\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:0378, kg:3972;\",\n \t\t\"(kg:8833/kg:8782);\",\n \t\t\"(kg:8577/kg:8782);\",\n \t\t\"(kg:6351|kg:7801|kg:4098).\"\n \t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?floorwalker; \",\n \t\t\"wdt:P57 ?shoulderArms; \",\n \t\t\"wdt:P57 ?greatDictator; \",\n \t\t\"wdt:P276 ?composer. \"\n \t]\n}\n  \t            \t \t  "}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 ?director .\",\n \t\t\"?item wdt:P86 ?composer .\",\n \t\t\"?item wdt:P58 ?screenwriter .\",\n \t\t\"?item wdt:P161 ?star .\",\n \t\t\"{ wd:Q166739 wdt:P57 ?director }\",\n \t\t\"{ wd:Q1140317 wdt:P57 ?director ; wdt:P86 ?composer ; wdt:P58 ?screenwriter ; wdt:P161 ?star }\",\n \t\t\"{ wd:Q109116 wdt:P57 ?director ; wdt:P86 ?composer ; wdt:P58 ?screenwriter ; wdt:P161 ?star }\"\n \t]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8521 kg:0540 .\",\n \t\t\"?x kg:8521 kg:6175 .\",\n \t\t\"?x kg:2027 kg:6175 .\",\n \t\t\"?x kg:3835 kg:6175 .\",\n \t\t\"?x kg:4961 kg:6175 .\",\n \t\t\"?x kg:8521 kg:7067 .\",\n \t\t\"?x kg:2027 kg:7067 .\",\n \t\t\"?x kg:3835 kg:7067 .\",\n \t\t\"?x kg:4961 kg:7067 .\"\n \t]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film1 ?film1Role ?cinematographer.\",\n    \"?film2 ?film2Role ?cinematographer.\",\n    \"FILTER(?film1 = wd:Q52308 && ?film2 = wd:Q69174)\",\n    \"FILTER(?film1Role = wd:Q11424 && ?film2Role = wd:Q11424)\",\n    \"{?cinematographer wdt:P31 wd:Q5.}\",\n    \"{?cinematographer p:P85 ?writerStatement.}\",\n    \"{?cinematographer p:P162 ?editorStatement.}\",\n    \"{?cinematographer p:P344 ?directorStatement.}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P344 wd:Q1165050 ;\",\n    \"wdt:P344 wd:Q192115 ;\",\n    \"wdt:P57 wd:Q1165050 ;\",\n    \"wdt:P57 wd:Q192115 ;\",\n    \"wdt:P58 wd:Q1165050 ;\",\n    \"wdt:P58 wd:Q192115 ;\",\n    \"wdt:P1040 wd:Q1165050 ;\",\n    \"wdt:P1040 wd:Q192115 ;\",\n    \"wdt:P161 wd:Q1165050 .\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\": [\n    \"?cinematographer kg:4610 kg:8571 .\",\n    \"?cinematographer kg:6254 kg:8571 .\",\n    \"?cinematographer kg:4600 kg:8571 .\",\n    \"?cinematographer kg:9668 kg:8571 .\",\n    \"?cinematographer kg:7569 kg:8571 .\",\n    \"?cinematographer kg:4610 kg:7570 .\",\n    \"?cinematographer kg:6254 kg:7570 .\",\n    \"?cinematographer kg:4600 kg:7570 .\",\n    \"?cinematographer kg:9668 kg:7570 .\",\n    \"?cinematographer kg:7569 kg:7570\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P101 wd:Q207499; \",\n \t\t\"wdt:P161 ?film1; \",\n \t\t\"wdt:P161 ?film2; \",\n \t\t\"wdt:P161 ?film3; \",\n \t\t\"wdt:P161 ?film4; \",\n \t\t\"wdt:P161 ?film5; \",\n \t\t\"wdt:P161 ?film6; \",\n \t\t\"?film1 wdt:P364 wd:Q2907818;\",\n \t\t\"?film2 wdt:P364 wd:Q11388;\",\n \t\t\"?film3 wdt:P364 wd:Q56012;\",\n \t\t\"?film4 wdt:P364 wd:Q10159;\",\n \t\t\"?film5 wdt:P364 wd:Q77879;\",\n \t\t\"?film6 wdt:P364 wd:Q10158;\",\n \t\t\"FILTER EXISTS { ?person wdt:P344 wd:Q2907818. }\"\n \t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographerEditor wdt:P344 wd:Q3485595 .\",\n \t\t\"?cinematographerEditor wdt:P1040 wd:Q3485595 .\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q507285.} UNION\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q862058.} UNION\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q114819.} UNION\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q2085.} UNION\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q3641257.} UNION\",\n \t\t\"{?cinematographerEditor wdt:P161 wd:Q56756907.}\"\n \t]\n}\n   "}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8903 kg:5484 .\",\n \t\t\"?x kg:7911 kg:5484 .\",\n \t\t\"{?x kg:8903 kg:9422.} UNION {?x kg:8903 kg:6104.} UNION {?x kg:8903 kg:9344.} UNION {?x kg:8903 kg:2112.} UNION {?x kg:8903 kg:9491.} UNION {?x kg:8903 kg:4868.}\"\n \t]\n}\n   "}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?works; \",\n \t\t\"wdt:P27 wd:Q142; \",\n \t\t\"wdt:P106 wd:Q1028183; \",\n \t\t\"wdt:P106 wd:Q159574; \",\n \t\t\"wdt:P106 wd:Q16509; \",\n \t\t\"wdt:P220 ?worksLabel; \",\n \t\t\"wdt:P101 wd:Q83811; \",\n \t\t\"wdt:P26 wd:Q7457. \"\n \t]\n }\n   \t\t\t\t\t  \t      \t \t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P58 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P1040 wd:Q2493884 ;\",\n \t\t\"?resource wdt:P57 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P58 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P1040 wd:Q2298257 ;\",\n \t\t\"?resource wdt:P737 wd:Q312258 ;\",\n \t\t\"?resource wdt:P26 wd:Q312258 .\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n \t\"query\": [\"$writer\", \"$editor\", \"$director\"] }\n \t"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?confessionEditor wdt:P31 wd:Q5;\",\n      \"wdt:P361 ?theConfession.\",\n    \"?confessionExecProducer wdt:P31 wd:Q5;\",\n      \"wdt:P361 ?theConfession.\",\n    \"?confessionCinematographer wdt:P31 wd:Q5;\",\n      \"wdt:P361 ?theConfession.\",\n    \"{?confessionEditor wdt:P161/wdt:P31 wd:Q1142484.} union\",\n    \"{?confessionExecProducer wdt:P161/wdt:P31 wd:Q1142484.} union\",\n    \"{?confessionCinematographer wdt:P161/wdt:P31 wd:Q1142484.}\",\n    \"?destiny wdt:P57 ?confessionEditor;\",\n      \"wdt:P50 ?confessionEditor.\",\n    \"?waitingRoom wdt:P57 ?confessionExecProducer;\",\n      \"wdt:P50 ?confessionExecProducer.\",\n    \"?thirdPage wdt:P57 ?confessionCinematographer;\",\n      \"wdt:P50 ?confessionCinematographer.\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  { ?resource wdt:P1040 wd:Q12813010. }\\n  UNION\\n  { ?resource wdt:P1431 wd:Q12813010. }\\n  UNION\\n  { ?resource wdt:P344 wd:Q12813010. }\\n  ?resource wdt:P58/wdt:P642 wd:Q5265241.\\n  ?resource wdt:P58/wdt:P642 wd:Q6084069.\\n  ?resource wdt:P58/wdt:P642 wd:Q6099428.\\n  ?resource wdt:P161/wdt:P31 wd:Q5.\\n}\"] }"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?editor ?screenwriter ?cinematographer\",\n \t\t\"WHERE {\",\n \t\t\"  ?person kg:4163 kg:9523 ;\", \">// film editor of The Confession (kg:9523 is The Confession, kg:4163 is film editor) \",\n \t\t\"  kg:6971 kg:9523 ;\", \">// executive producer of The Confession\",\n \t\t\"  kg:8006 kg:9523 .\", \">// cinematographer of The Confession (kg:8006 is director of photography) \",\n \t\t\"  ?person kg:2874 kg:9946 ;\", \">// cast member in Destiny\",\n \t\t\"  kg:2123 kg:9946 ;\", \">// screenwriter for Destiny (kg:2123 is screenwriter)\",\n \t\t\"  kg:2874 kg:0948 ;\", \">// cast member in The Waiting Room\",\n \t\t\"  kg:2123 kg:0948 ;\", \">// screenwriter for The Waiting Room\",\n \t\t\"  kg:2874 kg:3463 ;\", \">// cast member in The Third Page\",\n \t\t\"  kg:2123 kg:3463 .\" , \">// screenwriter for The Third Page\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film (wdt:P57|wdt:P98|wdt:P50) ?person.\",\n    \"{?film rdfs:label \\\"Pay Day\\\"@en.}\",\n    \"{?film rdfs:label \\\"Modern Times\\\"@en.}\",\n    \"{?film rdfs:label \\\"The Floorwalker\\\"@en.}\",\n    \"{?film rdfs:label \\\"Work\\\"@en.}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?film (wdt:P57|wdt:P58|wdt:P1040) ?person .\",\n \t\t\"{?film wdt:P31 wd:Q11424.}\",\n \t\t\"VALUES ?film { wd:Q199039 wd:Q45602 wd:Q166739 wd:Q2445896 } .\",\n \t\t\"?person wdt:P106 wd:Q7042855 .\"\n \t]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor kg:8046 kg:3822, kg:6336, kg:1978;\",\n \t\t\"(kg:1978|kg:6336|kg:8046) ?films.\",\n \t\t\"FILTER (?films IN (kg:7167, kg:8783, kg:7742, kg:9435))\"\n \t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?writer wdt:P800 wd:Q7674235; # The Waiting Room (work) - writer/inirector/producer/editor ?writer wdt:P800 wd:Q19002678; # Fate (2012 film) - writer/inirector/producer/editor ?writer wdt:P800 wd:Q2435096. # The Confession (film) - writer/inirector/producer/editor \"\n \t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P58 wd:Q6084069 ;\",\n \t\t\"?person wdt:P58 wd:Q5437360 ;\",\n \t\t\"?person wdt:P58 wd:Q12813010 ;\",\n \t\t\"?person wdt:P1431 wd:Q6084069 ;\",\n \t\t\"?person wdt:P1431 wd:Q5437360 ;\",\n \t\t\"?person wdt:P1431 wd:Q12813010 ;\",\n \t\t\"?person wdt:P1040 wd:Q6084069 ;\",\n \t\t\"?person wdt:P1040 wd:Q5437360 ;\",\n \t\t\"?person wdt:P1040 wd:Q12813010 .\"\n \t]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2878 kg:3108 ;\",\n \t\t\"kg:2878 kg:7304 ;\",\n \t\t\"kg:2878 kg:7556 ;\",\n \t\t\"kg:0108 kg:3108 ;\",\n \t\t\"kg:0108 kg:7304 ;\",\n \t\t\"kg:0108 kg:7556 ;\",\n \t\t\"kg:0403 kg:3108 .\"\n \t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; \",\n \t\t\"(wdt:P57|wdt:P50) wd:Q89656;\",\n \t\t\"(wdt:P57|wdt:P50) wd:Q105891;\",\n \t\t\"(wdt:P57|wdt:P50) wd:Q234501;\",\n \t\t\"(wdt:P57|wdt:P50) wd:Q66041;\",\n \t\t\"(wdt:P57|wdt:P50) wd:Q9806.\",\n \t\t\"?film\"\n \t]\n}\n    "}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"{?film wdt:P57 wd:Q982339. ?film wdt:P57 wd:Q116760. ?film wdt:P57 wd:Q1033656. ?film wdt:P57 wd:Q1365463. ?film wdt:P57 wd:Q7546.}\",\n \t\t\"{?film wdt:P58 wd:Q982339. ?film wdt:P58 wd:Q116760. ?film wdt:P58 wd:Q1033656. ?film wdt:P58 wd:Q1365463. ?film wdt:P58 wd:Q7546.}\"\n \t]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?film1 wdt:P57 ?person;\",\n    \"wdt:P1476 ?title1.\",\n    \"FILTER(?title1 = \\\"The Waiting Room\\\"@en || ?title1 = \\\"Destiny The Confession\\\"@en).\",\n    \"?film2 wdt:P57 ?person;\",\n    \"wdt:P1476 ?title2.\",\n    \"FILTER(?title2 = \\\"The Waiting Room\\\"@en || ?title2 = \\\"Destiny The Confession\\\"@en).\",\n    \"{?person wdt:P31/wdt:P279* wd:Q5.} UNION\",\n    \"{?film1 wdt:P364 ?person.} UNION\",\n    \"{?film1 wdt:P361 ?person.} UNION\",\n    \"{?film1 wdt:P58 ?person.}\"\n  ]\n}\n   "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?execProdCinematographer wdt:P1431 wd:Q6084069 ;\",\n \t\t\"?execProdCinematographer wdt:P1431 wd:Q5265241 ;\",\n \t\t\"?execProdCinematographer wdt:P1431 wd:Q12813010 ;\",\n \t\t\"?execProdCinematographer wdt:P161 ?workAsActor ;\",\n \t\t\"?execProdCinematographer wdt:P1040 ?workAsEditor ;\",\n \t\t\"?execProdCinematographer wdt:P58 ?workAsWriter ;\",\n \t\t\"?execProdCinematographer wdt:P344 wd:Q6084069 ;\",\n \t\t\"?execProdCinematographer wdt:P344 wd:Q5265241 .\"\n \t]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person kg:5397 kg:7690 .\",\n \t\t\"?person kg:5397 kg:4125 .\",\n \t\t\"?person kg:8008 kg:7690 .\",\n \t\t\"?person kg:8008 kg:4125 .\",\n \t\t\"?person kg:1635 kg:7690 .\",\n \t\t\"?person kg:1635 kg:4125 .\",\n \t\t\"?person kg:5844 kg:7690 .\",\n \t\t\"?person kg:5844 kg:4125 .\"\n \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor spous ?spouse.\",\n \t\t\"?movie wdt:P57 ?spouse;\",\n \t\t\"\\twdt:P1476 ?title.\"\n \t]\n \t}\n \t                \t\t"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\n \t\t\"?spouse wdt:P26 ?filmEditor.\",\n \t\t\"?filmEditor wdt:P1040 ?movie.\",\n \t\t\"{?spouse wdt:P58 ?movie.} UNION {?spouse wdt:P106 wd:Q7042855.}\",\n \t\t\"VALUES ?movie {wd:Q878673 wd:Q567519 wd:Q543382 wd:Q327427 wd:Q570483}\"\n \t]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n \t\"query\": [\n \t\t\"?spouse kg:8794 ?filmEditor .\",\n \t\t\"?filmEditor kg:6405 kg:7957 .\",\n \t\t\"?movie1 kg:2960 ?spouse ; kg:4703 kg:2308 .\",\n \t\t\"?movie2 kg:2960 ?spouse ; kg:4703 kg:4703 .\",\n \t\t\"?movie3 kg:2960 ?spouse ; kg:4703 kg:9613 .\",\n \t\t\"?movie4 kg:2960 ?spouse ; kg:4703 kg:3549 .\",\n \t\t\"?movie5 kg:2960 ?spouse ; kg:4703 kg:9634 .\"\n \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmDirector wdt:P31 wd:Q5;\",\n    \"wdt:P27 wd:Q183;\",\n    \"wdt:P345 ?imdbLink;\",\n    \"wdt:P800 wd:Q691948;\",\n    \"wdt:P800 wd:Q105899;\",\n    \"wdt:P800 wd:Q207140.\",\n    \"?filmDirector wdt:P21 wd:Q6581072;\"\n  ]\n}\n    "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector wdt:P57 wd:Q497617 ;\",\n \t\t\"?filmDirector wdt:P58 wd:Q497617 ;\",\n \t\t\"?filmDirector wdt:P1040 wd:Q497617 ;\",\n \t\t\"?filmDirector wdt:P57 wd:Q156497 ;\",\n \t\t\"?filmDirector wdt:P58 wd:Q156497 ;\",\n \t\t\"?filmDirector wdt:P1040 wd:Q156497 ;\",\n \t\t\"?filmDirector wdt:P57 wd:Q158069 ;\",\n \t\t\"?filmDirector wdt:P58 wd:Q158069 ;\",\n \t\t\"?filmDirector wdt:P1040 wd:Q158069 ;\",\n \t\t\"?filmDirector wdt:P21 wd:Q6581072 .\"\n \t]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:3486, kg:0469, kg:4957;\",\n \t\t\"(kg:7602/kg:7114|kg:7114) ?y;\",\n \t\t\"(kg:3675|kg:7567|kg:8706) ?z.\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P31 wd:Q5; # instance of human\\n\",\n \t \"wdt:P27 wd:Q162398; # country of citizenship: Canada\\n\",\n \t \"wdt:P921 wd:Q40824; # editor of: The Crazies\\n\",\n \t \"wdt:P51/wdt:P31 wd:Q7432. # written work (film)\\n\",\n \t \"{?resource wdt:P51 ?work. ?work wdt:P1476 ?title.}\\n\",\n \t \"FILTER(?title IN ('Day of the Dead', 'Monkey Shines', 'Dawn of the Dead', 'Survival of the Dead'))\\n\"\n \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?editor wdt:P1040 wd:Q627060;\",\n \t    \t        \t\t\"?editor wdt:P58 wd:Q219170,wd:Q198557,wd:Q219155,wd:Q1277329;\",\n \t    \t        \t\t\"?editor wdt:P57 wd:Q219170,wd:Q198557,wd:Q219155,wd:Q1277329;\",\n \t    \t        \t\t\"?editor wdt:P27 wd:Q16.\"\n \t                \t]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n \t                \t\t\"query\": [\n \t    \t        \t\t\"?x a kg:FilmEditor ;\",\n \t    \t        \t\t\"kg:countryOfCitizenship/kg:hasCountry kg:3439;\",\n \t    \t        \t\t\"kg:edited/kg:title/kg:hasTitle 'The Crazies'@en;\",\n \t    \t        \t\t\"kg:directed/kg:title/kg:hasTitle 'Day of the Dead'@en;\",\n \t    \t        \t\t\"kg:screenwriterOf/kg:title/kg:hasTitle 'Monkey Shines'@en;\",\n \t    \t        \t\t\"kg:directed/kg:title/kg:hasTitle 'Dawn of the Dead'@en;\",\n \t    \t        \t\t\"kg:directed/kg:title/kg:hasTitle kg:0019.\"\n \t    \t        \t]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie1911 wdt:P31 wd:Q11424;\",\n      \"wdt:P57 ?director.\",\n    \"?policeStory2 wdt:P31 wd:Q11424;\",\n      \"wdt:P57 ?director;\",\n      \"wdt:P58 ?writer.\",\n    \"?chineseZodiac wdt:P31 wd:Q11424;\",\n      \"wdt:P57 ?director;\",\n      \"wdt:P58 ?writer.\",\n    \"?policeStory wdt:P31 wd:Q11424;\",\n      \"wdt:P57 ?director;\",\n      \"wdt:P58 ?writer.\",\n    \"?fearlessHyena wdt:P31 wd:Q11424;\",\n      \"wdt:P57 ?director;\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n \t\"query\": [\n \t\t\"?director (wdt:P57|wdt:P1431) wd:Q206182 .\",\n \t\t\"?director wdt:P57 ?movies .\",\n \t\t\"{?movies wd:Q378013.} union {?movies wd:Q391143.} union {?movies wd:Q594033.} union {?movies wd:Q232108.}\",\n \t\t\"optional{?director wdt:P58 ?movies.}\"\n \t]\n}\n    "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n  \"query\": [\n    \"?directorAndProducer kg:3421 kg:8467 .\",\n    \"?directorAndProducer kg:7107 kg:8467 .\",\n    \"?directorAndProducer kg:3421 kg:2393 .\",\n    \"?directorAndProducer kg:5272 kg:2393 .\",\n    \"?directorAndProducer kg:3421 kg:2798 .\",\n    \"?directorAndProducer kg:5272 kg:2798 .\",\n    \"?directorAndProducer kg:3421 kg:0536 .\",\n    \"?directorAndProducer kg:5272 kg:0536 .\",\n    \"?directorAndProducer kg:3421 kg:1055 .\",\n    \"?directorAndProducer kg:5272 kg:1055 .\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?odi; \",\n \t\t\"(wdt:P108/wdt:P279*|wdt:P106) wd:Q11697; \",\n \t\t\"wdt:P108 wd:Q34657, wd:Q19458, wd:Q530925, wd:Q108359.\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P112 wd:Q7095994; wdt:P108 wd:Q42944, wd:Q37033, wd:Q7432436, wd:Q7204713.\"\n \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P57 ?author1.\",\n    \"?movie wdt:P36 ?editor1.\",\n    \"?movie wdt:P162 ?producer1.\",\n    \"?movie wdt:P57 ?director1.\",\n    \"{?author1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?author1 rdfs:label \\\"Ole John\\\"@en.}\",\n    \"UNION\",\n    \"{?author1 rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"{?editor1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?editor1 rdfs:label \\\"Ole John\\\"@en.}\",\n    \"UNION\",\n    \"{?editor1 rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"{?producer1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?producer1 rdfs:label \\\"Ole John\\\"@en.}\",\n    \"UNION\",\n    \"{?producer1 rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"{?director1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?director1 rdfs:label \\\"Ole John\\\"@en.}\",\n    \"UNION\",\n    \"{?director1 rdfs:label \\\"Jørgen Leth\\\"@en.}\"\n  ]\n}\n   "}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424;\",\n \t\t\"?movie wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?movie wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?movie wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?movie wdt:P162 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie kg:2226 kg:1439 .\",\n \t\t\"?movie kg:8129/kg:2226 ?director .\",\n \t\t\"{?director kg:2226 kg:7110.} UNION {?director kg:2226 kg:0116.} UNION {?director kg:2226 kg:2361.}\",\n \t\t\"?movie kg:0980/kg:2226 ?producer .\",\n \t\t\"{?producer kg:2226 kg:7110.} UNION {?producer kg:2226 kg:0116.} UNION {?producer kg:2226 kg:2361.}\",\n \t\t\"?movie kg:1174/kg:2226 ?editor .\",\n \t\t\"{?editor kg:2226 kg:7110.} UNION {?editor kg:2226 kg:0116.} UNION {?editor kg:2226 kg:2361.}\",\n \t\t\"?movie kg:2722/kg:2226 ?screenwriter .\",\n \t\t\"{?screenwriter kg:2226 kg:7110.} UNION {?screenwriter kg:2226 kg:0116.} UNION {?screenwriter kg:2226 kg:2361.}\"\n \t]\n }"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?person wdt:P31 wd:Q5; # instance of human\\n\",\n \t \"wdt:P800 ?work; # writer\\n\",\n \t \"wdt:P2140 ?work; # cinematographer\\n\",\n \t \"wdt:P161 ?work; # actor\\n\",\n \t \"wdt:P361 ?work; # editor\\n\",\n \t \"wdt:P57 ?work; # director\\n\",\n \t \"?work rdfs:label \\\"Sin City\\\"@en, \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\\n\",\n \t \"?series wdt:P393 wd:Q208641; # executive producer\\n\",\n \t \"?person wdt:P57 ?series.\\n\",\n \t \"?series rdfs:label \\\"From Dusk till Dawn: The Series\\\"@en.\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q192115;\",\n \t\t\"?person wdt:P57 wd:Q656357;\",\n \t\t\"?person wdt:P58 wd:Q192115;\",\n \t\t\"?person wdt:P58 wd:Q656357;\",\n \t\t\"?person wdt:P161 wd:Q192115;\",\n \t\t\"?person wdt:P161 wd:Q656357;\",\n \t\t\"?person wdt:P1040 wd:Q192115;\",\n \t\t\"?person wdt:P1040 wd:Q656357;\",\n \t\t\"?person wdt:P344 wd:Q192115;\",\n \t\t\"?person wdt:P344 wd:Q656357;\",\n \t\t\"?person wdt:P1431 wd:Q15622760.\"\n \t]\n }"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8401 kg:5842; # screenwriter of Sin City\",\n \t\t\"?x kg:5397 kg:5842; # director of photography of Sin City\",\n \t\t\"?x kg:9575 kg:5842; # cast member of Sin City\",\n \t\t\"?x kg:3797 kg:5842; # film editor of Sin City\",\n \t\t\"?x kg:6948 kg:5842; # director of Sin City\",\n \t\t\"?x kg:8401 kg:6130; # screenwriter of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\"?x kg:5397 kg:6130; # director of photography of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\"?x kg:9575 kg:6130; # cast member of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\"?x kg:3797 kg:6130; # film editor of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\"?x kg:6948 kg:6130; # director of The Adventures of Sharkboy and Lavagirl in 3-D\",\n \t\t\"?x kg:6106 kg:1113\" ]}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film1 wdt:P31 wd:Q11424; # \" ,\"?film1 is an instance of film\"\n \t\t, \"wdt:P1476 ?title1 ;\" ,\"the title of ?film1 is 'This Night'\"\n \t\t, \"?person1 wdt:P57 wd:Q110983 ;\" ,\"?person1 directed ?film1\"\n \t\t, \"?person1 wdt:P272 wd:Q14656 ;\" ,\"?person1 was the cinematographer of ?film1\"\n \t\t, \"?person1 wdt:P58 wd:Q110983 .\" ,\"?person1 wrote ?film1\"\n \t\t, \"?film2 wdt:P31 wd:Q11424 ;\" ,\"?film2 is an instance of film\"\n \t\t, \"wdt:P1476 ?title2 ;\" ,\"the title of ?film2 is 'Rio das Mortes'\"\n \t\t, \"?person1 wdt:P58 wd:Q309855 ;\" ,\"?person1 wrote ?film2\"\n \t\t, \"?person1 wdt:P361 wd:Q309855 .\" ,\"?person1 edited ?film2\"\n \t\t, \"?film3 wdt:P31 wd:Q11424 ;\" ,\"?film3 is an instance of film\"\n \t\t, \"wdt:P1476 ?title3 ;\" ,\"the title of ?film3 is 'Lili Marleen'\"\n \t\t, \"?person1 wdt:P58 wd:Q309856 ;\" ,\"?person1 wrote ?film3\"\n \t\t, \"?person1 wdt:P361 wd:Q309856 .\" ,\"?person1 edited ?film3\"\n \t\t, \"?film4 wdt:P31 wd:Q11424 ;\" ,\"?film4 is an instance of film\"\n \t\t, \"wdt:P1476 ?title4 ;\" ,\"the title of ?film4 is 'Whity'\"\n \t\t, \"?person1 wdt:P58 wd:Q309857 .\" ,\"?person1 wrote ?film4\"\n \t\t, \"?person1 wdt:P361 wd:Q309857\" ,\"?person1 edited ?film4\"\n \t]\n }\n    "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q1699716 ;\",\n \t\t\"wdt:P58 wd:Q1699716 ;\",\n \t\t\"wdt:P344 wd:Q1699716 ;\",\n \t\t\"wdt:P58 wd:Q823767 ;\",\n \t\t\"wdt:P58 wd:Q686125 ;\",\n \t\t\"wdt:P58 wd:Q327427 ;\",\n \t\t\"wdt:P1040 wd:Q823767 ;\",\n \t\t\"wdt:P1040 wd:Q686125 ;\",\n \t\t\"wdt:P1040 wd:Q327427 .\"\n \t]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person kg:0671 kg:2058 .\",\n \t\t\"?person kg:9084 kg:2058 .\",\n \t\t\"?person kg:1289 kg:2058 .\",\n \t\t\"?person kg:1289 kg:0618 .\",\n \t\t\"?person kg:7206 kg:0618 .\",\n \t\t\"?person kg:1289 kg:8658 .\",\n \t\t\"?person kg:7206 kg:8658 .\",\n \t\t\"?person kg:1289 kg:3976 .\",\n \t\t\"?person kg:7206 kg:3976\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P347 ?statement.\",\n    \"?statement ps:P347 wd:Q2908688.\",\n    \"{?cinematographer wdt:P112 ?film.} UNION\",\n    \"{?cinematographer wdt:P161 ?film.} UNION\",\n    \"{?cinematographer wdt:P57 ?film.}\",\n    \"?film rdfs:label ?filmLabel filter (lang(?filmLabel) = \\\"en\\\").\"\n  ]\n}\n    "}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P344 wd:Q623051 .\",\n \t\t\"?cinematographer wdt:P57 wd:Q1903317, wd:Q2520777, wd:Q627060 .\",\n \t\t\"?cinematographer wdt:P58 wd:Q1903317, wd:Q2520777, wd:Q627060 .\",\n \t\t\"?cinematographer wdt:P1040 wd:Q1903317, wd:Q2520777, wd:Q627060 .\",\n \t\t\"?cinematographer wdt:P27 wd:Q30\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer kg:7456 kg:7350 .\",\n \t\t\"?cinematographer kg:8173/kg:3266, kg:5535, kg:8900 .\",\n \t\t\"?cinematographer kg:5180/kg:3266, kg:5535, kg:8900 .\",\n \t\t\"?cinematographer kg:7874/kg:3266, kg:5535, kg:8900 .\"\n \t]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P800 wd:Q157342; # Look at Life (cinematographer and director) \\n\",\n \t\t\"wdt:P800 wd:Q695027; # Anyone Lived in a Pretty How Town (writer, cinematographer, and director)\\n\",\n \t\t\"wdt:P800 wd:Q1437559. # Filmmaker (writer, cinematographer, and director)\\n\",\n \t\t\"?person wdt:P27 wd:Q30; # Nationality is American\\n\",\n \t\t\"?person wdt:P59 wd:Q62848. # Executive producer of Star Wars: Episode IV – A New Hope\\n\"\n \t]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q613974, wd:Q1415127, wd:Q1869678;\",\n \t\t\"?person wdt:P58 wd:Q613974, wd:Q1415127, wd:Q1869678;\",\n \t\t\"?person wdt:P344 wd:Q613974, wd:Q1415127, wd:Q1869678;\",\n \t\t\"?person wdt:P58 wd:Q17738;\",\n \t\t\"?person wdt:P1431 wd:Q17738.\"\n \t]\n}\n    "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8283 kg:5200 .\",\n \t\t\"?x kg:8283 kg:8423 .\",\n \t\t\"?x kg:8283 kg:9563 .\",\n \t\t\"?x kg:3209 kg:5200 .\",\n \t\t\"?x kg:3209 kg:8423 .\",\n \t\t\"?x kg:3209 kg:9563 .\",\n \t\t\"?x kg:4667 kg:5200 .\",\n \t\t\"?x kg:4667 kg:8423 .\",\n \t\t\"?x kg:4667 kg:9563 .\",\n \t\t\"?x kg:9456 kg:5527 .\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Jens Jørgen Thorsen\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Jørgen Leth\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Ole John\\\".}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475.\",\n \t\t\"?film wdt:P162 wd:Q1687239, wd:Q562108, wd:Q35979475.\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475.\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film kg:4621 kg:5363 .\",\n \t\t\"?film kg:7637/kg:8120 kg:6236 .\",\n \t\t\"?film kg:7637/kg:2605 kg:2605 .\",\n \t\t\"?film kg:7637/kg:8120 kg:8120 .\",\n \t\t\"?film kg:5446/kg:8120 kg:6236 .\",\n \t\t\"?film kg:5446/kg:2605 kg:2605 .\",\n \t\t\"?film kg:5446/kg:8120 kg:8120 .\",\n \t\t\"?film kg:2246/kg:8120 kg:6236 .\",\n \t\t\"?film kg:2246/kg:2605 kg:2605 .\",\n \t\t\"?film kg:2246/kg:8120 kg:8120 .\",\n \t\t\"?film kg:8645/kg:8120 kg:6236 .\",\n \t\t\"?film kg:8645/kg:2605 kg:2605 .\",\n \t\t\"?film kg:8645/kg:8120 kg:8120 .\"\n \t]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n           \"?film wdt:P577 ?release_date;\",\n           \"?film (wdt:P57|wdt:P161|wdt:P189|wdt:P1069) ?person.\",\n           \"{?film rdfs:label 'Pietà'@en.}\",\n           \"UNION\",\n           \"{?film rdfs:label 'Moebius'@en.}\",\n           \"UNION\",\n           \"{?film rdfs:label 'Dream'@en.}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"?person wdt:P57 wd:Q13471372 ;\",\n    \"?person wdt:P57 wd:Q484679 ;\",\n    \"?person wdt:P57 wd:Q483197 ;\",\n    \"?person wdt:P58 wd:Q13471372 ;\",\n    \"?person wdt:P58 wd:Q484679 ;\",\n    \"?person wdt:P58 wd:Q483197 ;\",\n    \"?person wdt:P1040 wd:Q13471372 ;\",\n    \"?person wdt:P1040 wd:Q484679 ;\",\n    \"?person wdt:P1040 wd:Q483197 ;\",\n    \"?person wdt:P1431 wd:Q13471372 ;\",\n    \"?person wdt:P1431 wd:Q484679 ;\",\n    \"?person wdt:P1431 wd:Q483197 .\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\": [\n    \"?person kg:5472 ?film .\",\n    \"?person kg:2644 ?film .\",\n    \"?person kg:2926 ?film .\",\n    \"?person kg:9732 ?film .\",\n    \"{?film kg:5575 kg:1602.} UNION {?film kg:5575 kg:0621.} UNION {?film kg:5575 kg:5916.}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P50 ?author.\",\n    \"{?film wdt:P50 wd:Q7698255.}\",\n    \"{?film wdt:P50 wd:Q102508.}\",\n    \"{?film wdt:P50 wd:Q439061.}\",\n    \"?author (wdt:P166|wdt:P1411) ?role.\",\n    \"FILTER(?role = wd:Q11748 OR ?role = wd:Q200145 OR ?role = wd:Q103981)\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n }\n    "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n \t\"query\": [\n \t\t\"?film a kg:6315;\",\n \t\t\"(kg:0254|kg:2023|kg:6378) kg:9845;\",\n \t\t\"(kg:0254|kg:2023|kg:6378) kg:4819;\",\n \t\t\"(kg:0254|kg:2023|kg:6378) kg:5417.\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Jens Jørgen Thorsen\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Jørgen Leth\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Ole John\\\".}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475;\",\n \t\t\"?film wdt:P162 wd:Q1687239, wd:Q562108, wd:Q35979475.\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n \t\"query\": [\n \t\t\"?film kg:2858 kg:2375 .\",\n \t\t\"?film kg:4593 kg:0596 .\",\n \t\t\"?film kg:4593 kg:4796 .\",\n \t\t\"?film kg:4593 kg:1382 .\",\n \t\t\"?film kg:3050 kg:0596 .\",\n \t\t\"?film kg:3050 kg:4796 .\",\n \t\t\"?film kg:3050 kg:1382 .\",\n \t\t\"?film kg:4885 kg:0596 .\",\n \t\t\"?film kg:4885 kg:4796 .\",\n \t\t\"?film kg:4885 kg:1382 .\",\n \t\t\"?film kg:5891 kg:0596 .\",\n \t\t\"?film kg:5891 kg:4796 .\",\n \t\t\"?film kg:5891 kg:1382 .\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5;\",\n      \"wdt:P800 ?ember.\",\n    \"?fate wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\",\n    \"?confession wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\",\n    \"?waitingRoom wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q12813010 ;\",\n \t\t\"wdt:P57 wd:Q5437360 ;\",\n \t\t\"wdt:P57 wd:Q6084069 ;\",\n \t\t\"wdt:P1040 wd:Q12813010 ;\",\n \t\t\"wdt:P1040 wd:Q5437360 ;\",\n \t\t\"wdt:P1040 wd:Q6084069 ;\",\n \t\t\"wdt:P58 wd:Q12813010 ;\",\n \t\t\"wdt:P58 wd:Q5437360 ;\",\n \t\t\"wdt:P58 wd:Q6084069 ;\",\n \t\t\"wdt:P1431 wd:Q12813010 ;\",\n \t\t\"wdt:P1431 wd:Q5437360 ;\",\n \t\t\"wdt:P1431 wd:Q6084069 .\"\n \t]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\": [\n    \"?director kg:7931/kg:4146 ?person.\",\n    \"?person kg:0732/kg:4146|kg:0732/kg:1254|kg:0732/kg:2420|kg:0732/kg:4640 ?x.\",\n    \"?person kg:4638/kg:4146|kg:4638/kg:1254|kg:4638/kg:2420|kg:4638/kg:4640 ?y.\",\n    \"?person kg:3865/kg:4146|kg:3865/kg:1254|kg:3865/kg:2420|kg:3865/kg:4640 ?z.\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5;\",\n      \"wdt:P800 ?ember.\",\n    \"?fate wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\",\n    \"?waitingRoom wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\",\n    \"?confession wdt:P57 ?emberDirector;\",\n      \"wdt:P31 wd:Q11424.\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q25479948 .\",\n \t\t\"?director wdt:P57 wd:Q5437360 ;\",\n \t\t\"wdt:P1040 wd:Q5437360 ;\",\n \t\t\"wdt:P58 wd:Q5437360 ;\",\n \t\t\"wdt:P1431 wd:Q5437360 .\",\n \t\t\"?director wdt:P57 wd:Q6084069 ;\",\n \t\t\"wdt:P1040 wd:Q6084069 ;\",\n \t\t\"wdt:P58 wd:Q6084069 ;\",\n \t\t\"wdt:P1431 wd:Q6084069 .\",\n \t\t\"?director wdt:P57 wd:Q12813010 ;\",\n \t\t\"wdt:P1040 wd:Q12813010 ;\",\n \t\t\"wdt:P58 wd:Q12813010 ;\",\n \t\t\"wdt:P1431 wd:Q12813010 .\"\n \t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"?director kg:2761 ?screenwriter .\",\n \t\t\"?director kg:5227 kg:6201 .\",\n \t\t\"?director kg:6499 ?waitingRoom .\",\n \t\t\"?director kg:6581 ?filmEditor .\",\n \t\t\"?director kg:0346 ?execProducer .\",\n \t\t\"?director kg:6579 ?fate .\",\n \t\t\"?director kg:0890 ?confession\"\n \t]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; # Instance of film\\n\",\n    \"wdt:P50 wd:Q78966, wd:Q468325, wd:Q78967; # Author (David Zucker, Jim Abrahams, Jerry Zucker)\\n\",\n    \"wdt:P57 wd:Q78966, wd:Q468325, wd:Q78967; # Director (David Zucker, Jim Abrahams, Jerry Zucker)\\n\",\n    \"wdt:P161 wd:Q78966, wd:Q468325, wd:Q78967.\" ] }\n    "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"(wdt:P162|wdt:P106 ?role1) ;\",\n \t\t\"(wdt:P162|wdt:P106 ?role2) ;\",\n \t\t\"wdt:P8595/wdt:P31 wd:Q7432; \",\n \t\t\"wdt:P8595 ?movie. \"\n \t]\n }\n   \t            \t \t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P1040 wd:Q13471372 ;\",\n \t\t\"?person wdt:P1040 wd:Q17041657 ;\",\n \t\t\"?person wdt:P1040 wd:Q462025 ;\",\n \t\t\"?person wdt:P1040 wd:Q483197 ;\",\n \t\t\"?person wdt:P344 wd:Q13471372 ;\",\n \t\t\"?person wdt:P344 wd:Q17041657 ;\",\n \t\t\"?person wdt:P344 wd:Q462025 ;\",\n \t\t\"?person wdt:P344 wd:Q483197 ;\",\n \t\t\"?person wdt:P1431 wd:Q483197 .\"\n \t]\n }\n    "}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:0039 kg:9181, kg:3285, kg:5838, kg:4511 .\",\n \t\t\"?x kg:5835 kg:9181, kg:3285, kg:5838, kg:4511 .\",\n \t\t\"?x kg:0372 kg:4511 .\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P39 wd:Q45870261; # Position held World Wide Web Consortium\\n\",\n \t\t\"wdt:P39 wd:Q5376075; # Position held Open Data Institute\\n\",\n \t\t\"p:P1001/psv:P1001/wikibase:wikiPageWikiLink wd:Q284593; # Former employer Plessey\\n\",\n \t\t\"p:P1001/psv:P1001/wikibase:wikiPageWikiLink wd:Q9965; # Former employer CERN\\n\",\n \t\t\"p:P1001/psv:P1001/wikibase:wikiPageWikiLink wd:Q2378465.\" ] }\n \t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P112 wd:Q37033; # World Wide Web Consortium founded by ?person\",\n \t\t\"wdt:P108 wd:Q37033; # World Wide Web Consortium is employer of ?person\",\n \t\t\"wdt:P108 wd:Q7095994; # Open Data Institute is employer of ?person\",\n \t\t\"wdt:P108 wd:Q7204713; # Plessey is employer of ?person\",\n \t\t\"wdt:P108 wd:Q42944; # CERN is employer of ?person\",\n \t\t\"wdt:P108 wd:Q7432436. # School of Electronics and Computer Science, University of Southampton is employer of ?person\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?planetTerror; \",\n \t\t\"wdt:P161 ?planetTerrorActor; \",\n \t\t\"wdt:P175 ?planetTerrorWriter; \",\n \t\t\"wdt:P834 ?planetTerrorCinematographer; \",\n \t\t\"wdt:P828 ?planetTerrorComposer; \",\n \t\t\"?sinCity wdt:P57 ?person; \",\n \t\t\"?dameToKillFor wdt:P57 ?person; \",\n \t\t\"?machete wdt:P57 ?person. \"\n \t]\n}\n    "}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q1165050;\",\n \t\t\"        wdt:P86 wd:Q1165050;\",\n \t\t\"        wdt:P58 wd:Q1165050;\",\n \t\t\"        wdt:P344 wd:Q1165050;\",\n \t\t\"        wdt:P161 wd:Q1165050;\",\n \t\t\"        wdt:P1040 wd:Q192115;\",\n \t\t\"        wdt:P57 wd:Q192115;\",\n \t\t\"        wdt:P1040 wd:Q1653396;\",\n \t\t\"        wdt:P57 wd:Q1653396;\",\n \t\t\"        wdt:P1040 wd:Q128493;\",\n \t\t\"        wdt:P57 wd:Q128493.\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:6683 kg:1457 .\",\n \t\t\"?x kg:6750 kg:1457 .\",\n \t\t\"?x kg:9880 kg:1457 .\",\n \t\t\"?x kg:1594 kg:1457 .\",\n \t\t\"?x kg:5977 kg:8257 .\",\n \t\t\"?x kg:7326 kg:8257 .\",\n \t\t\"?x kg:5977 kg:3207 .\",\n \t\t\"?x kg:7326 kg:3207 .\",\n \t\t\"?x kg:5977 kg:9537 .\",\n \t\t\"?x kg:7326 kg:9537 .\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q5>. \",\n    \"?director <http://www.wikidata.org/prop/direct/P80> <http://www.wikidata.org/entity/Q2746911>. \", \">// Assuming Pietà is Q2746911, please verify and replace with the correct ID if necessary. This line checks for the director of Pietà (assuming it's a film or similar work). The property P80 represents \" ] }\n    "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n \t\"query\": [\n \t\t\"?director ?screenwriter ?editor ?executiveProducer\",\n \t\t\"WHERE {\",\n \t\t\" wd:Q483197 wdt:P57 ?director ;\",\n \t\t\"      wdt:P1040 ?editor ;\",\n \t\t\"      wdt:P1431 ?executiveProducer .\",\n \t\t\" wd:Q484679 wdt:P57 ?director ;\",\n \t\t\"      wdt:P58 ?screenwriter ;\",\n \t\t\"      wdt:P1040 ?editor ;\",\n \t\t\"      wdt:P1431 ?executiveProducer .\",\n \t\t\" wd:Q13471372 wdt:P57 ?director ;\",\n \t\t\"       wdt:P58 ?screenwriter ;\",\n \t\t\"       wdt:P1040 ?editor ;\",\n \t\t\"       wdt:P1431 ?executiveProducer .\"\n \t\t,\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n \t\"query\": [\"$director\", \"$executiveProducer\", \"$editor\"]\n \t}\n \t            \t \t  \t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P856 wd:Q420246; \",\n \t\t\"wdt:P1357 wd:Q159150; \",\n \t\t\"wdt:P112 ?production_company. \",\n \t\t\"?production_company wdt:P131 + wd:Q159150. \",\n \t\t\"?work wdt:P577 ?date; \",\n \t\t\"wdt:P50 ?person; \",\n \t\t\"wdt:P31 wd:Q11424. \",\n \t\t\"{?work wdt:P1476 \\\"The Brahma Diamond\\\"} UNION \",\n \t\t\"{?work wdt:P1476 \\\"His Lost Love\\\"} UNION \",\n \t\t\"{?work wdt:P1476 \\\"The Birth of a Nation\\\"}. \"\n \t]\n}\n  \t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\n \t\t\"?founder wdt:P112 wd:Q3011043, wd:Q219400, wd:Q64434913;\",\n \t\t\"?founder wdt:P106 wd:Q3282637;\",\n \t\t\"?movie1 wdt:P57 ?founder; wdt:P58 ?founder;\",\n \t\t\"?movie2 wdt:P57 ?founder; wdt:P58 ?founder;\",\n \t\t\"?movie3 wdt:P57 ?founder; wdt:P58 ?founder.\",\n \t\t\"FILTER(?movie1 = wd:Q542216 || ?movie1 = wd:Q1857205 || ?movie1 = wd:Q220394)\",\n \t\t\"FILTER(?movie2 = wd:Q542216 || ?movie2 = wd:Q1857205 || ?movie2 = wd:Q220394)\",\n \t\t\"FILTER(?movie3 = wd:Q542216 || ?movie3 = wd:Q1857205 || ?movie3 = wd:Q220394)\"\n \t]\n }\n   \t            \t \t\t"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer kg:8812 kg:2810 .\",\n \t\t\"?filmProducer kg:9383/kg:4739 ?D_W_Griffith_Productions .\",\n \t\t\"?filmProducer kg:9383/kg:2555 ?United_Artists_Corporation .\",\n \t\t\"?filmProducer kg:9383/kg:9546 ?David_W_Griffith_Corp .\",\n \t\t\"?filmProducer kg:7158/kg:5308 ?The_Brahma_Diamond .\",\n \t\t\"?filmProducer kg:7158/kg:0465 ?His_Lost_Love .\",\n \t\t\"?filmProducer kg:7158/kg:5981 ?The_Birth_of_a_Nation .\",\n \t\t\"?filmProducer kg:3018/kg:5308 ?The_Brahma_Diamond .\",\n \t\t\"?filmProducer kg:3018/kg:0465 ?His_Lost_Love .\",\n \t\t\"?filmProducer kg:3018/kg:5981 ?The_Birth_of_a_Nation .\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P162 ?work1; \",\n \t\t\"wdt:P361 wd:Q709847; \",\n \t\t\"wdt:P136 wd:Q709847; \",\n \t\t\"wdt:P50 ?work2; \",\n \t\t\"wdt:P50 ?work3. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q4959991; # Director of 'Brecha'?\",\n \t\t\"?person wdt:P86 wd:Q4959991; # Composer of 'Brecha'?\",\n \t\t\"?person wdt:P344 wd:Q4959991; # Cinematographer of 'Brecha'?\",\n \t\t\"?person wdt:P1040 wd:Q7243050, wd:Q5375110; # Editor of 'Primary!' and 'In Your Absence'?\",\n \t\t\"?person wdt:P58 wd:Q7243050, wd:Q5375110; # Screenwriter of 'Primary!' and 'In Your Absence'?\",\n \t\t\"?person wdt:P1431 wd:Q4959991. # Executive producer of 'Brecha'?\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1879 kg:1638 .\",\n \t\t\"?x kg:6733 kg:0804 .\",\n \t\t\"?x kg:0770 kg:0804 .\",\n \t\t\"?x kg:6733 kg:2931 .\"\n \t]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P27 wd:Q30; \",\n \t\t\"wdt:P856 ?sallyRideScience; \",\n \t\t\"wikibase:sitelinks ?sitelinks; \",\n \t\t\"wdt:P1416 wd:Q5293255; \",\n \t\t\"wdt:P108 wd:Q5376259; \",\n \t\t\"wdt:P108 wd:Q2325592; \",\n \t\t\"wdt:P108 wd:Q44352. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P108 wd:Q55206; \",\n \t\t\"?person wdt:P108 wd:Q5059715; \",\n \t\t\"?person wdt:P108 wd:Q41506; \",\n \t\t\"?person wdt:P108 wd:Q23548; \",\n \t\t\"?person wdt:P108 wd:Q622664; \",\n \t\t\"wd:Q55206 wdt:P112 ?person; \",\n \t\t\"?person wdt:P27 wd:Q30. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?person kg:6725/kg:6627 ?sallyRideScience .\",\n \t\t\"?person kg:8517/kg:2472 ?centerForSecurity .\",\n \t\t\"?person kg:9642/kg:2472 ?nasa .\",\n \t\t\"?person kg:9594/kg:2472 ?ucSanDiego .\",\n \t\t\"?sallyRideScience kg:0862 kg:5939 .\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?film1 wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate1;\",\n    \"rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en;\",\n    \"p:P161/ps:P161 ?person;\",\n    \"p:P980/ps:P980 ?person;\",\n    \"p:P57/ps:P57 ?person;\",\n    \"p:P2140/ps:P2140 ?person;\",\n    \"p:P345/ps:P345 ?person.\",\n    \"?film2 wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate2;\",\n    \"rdfs:label \\\"Planet Terror\\\"@en;\",\n    \"p:P161/ps:P161 ?person;\",\n    \"p:P980/ps:P980 ?person;\",\n    \"p:P57/ps:P57 ?person;\",\n    \"p:P2140/ps:P2140 ?person;\",\n    \"p:P345/ps:P345 ?person.\",\n    \"?film3 wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate3;\",\n    \"rdfs:label \\\"Sin City\\\"@en;\",\n    \"p:P161/ps:P161 ?person;\",\n    \"p:P980/ps:P980 ?person;\",\n    \"p:P57/ps:P57 ?person;\",\n    \"p:P2140/ps:P2140 ?person;\",\n    \"p:P345/ps:P345 ?person.\",\n    \"?film4 wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate4;\",\n    \"rdfs:label \\\"Once Upon a Time in Mexico\\\"@en;\",\n    \"p:P161/ps:P161 ?person;\",\n    \"p:P980/ps:P980 ?person;\",\n    \"p:P57/ps:P57 ?person;\",\n    \"p:P2140/ps:P2140 ?person;\",\n    \"p:P345/ps:P345 ?person.\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853; \",\n \t\t\"wdt:P86 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853; \",\n \t\t\"wdt:P58 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853; \",\n \t\t\"wdt:P1040 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853; \",\n \t\t\"wdt:P161 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853; \",\n \t\t\"wdt:P344 wd:Q1165050, wd:Q192115, wd:Q656357, wd:Q93853.\"\n \t]\n }\n    "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person kg:6886 ?movie1 .\",\n \t\t\"?person kg:3341 ?movie1 .\",\n \t\t\"?person kg:9344 ?movie1 .\",\n \t\t\"?person kg:8596 ?movie1 .\",\n \t\t\"?person kg:8181 ?movie1 .\",\n \t\t\"{?person kg:4129 kg:2043.} UNION \",\n \t\t\"{?person kg:4129 kg:0404.} UNION \",\n \t\t\"{?person kg:4129 kg:9806.} UNION \",\n \t\t\"{?person kg:4129 kg:4401.}\",\n \t\t\"?movie1 kg:id/kg:2043|kg:0404|kg:9806|kg:4401 .\"\n \t]\n}\n   "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P800 wd:Q246795.\",\n    \"{?person wdt:P54 wd:Q5373555.} UNION\",\n    \"{?person wdt:P1427 wd:Q1083855.} UNION\",\n    \"{?person wdt:P1427 wd:Q691975.} UNION\",\n    \"{?person wdt:P1427 wd:Q1083855.} UNION\",\n    \"{?person wdt:P1427 wd:Q1083855.} UNION\",\n    \"{?person wdt:P1427 wd:Q691975.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"?execProducerWriter wdt:P58 wd:Q29011 ;\",\n \t\t\"?execProducerWriter wdt:P1431 wd:Q29011 ;\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q1136386 } UNION\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q11490471 } UNION\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q947907 } UNION\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q11371930 } UNION\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q182950 } UNION\",\n \t\t\"{ ?execProducerWriter wdt:P108 wd:Q1054807 }\"\n \t]\n }\n    "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"?execProdWriter kg:2791 kg:3829 ;\",\n \t\t\"?execProdWriter kg:4582 kg:3829 .\",\n \t\t\"{ ?execProdWriter kg:9948 kg:7740 } UNION \",\n \t\t\"{ ?execProdWriter kg:9948 kg:6651 } UNION \",\n \t\t\"{ ?execProdWriter kg:9948 kg:2192 } UNION \",\n \t\t\"{ ?execProdWriter kg:9948 kg:1188 } UNION \",\n \t\t\"{ ?execProdWriter kg:9948 kg:6160 } UNION \",\n \t\t\"{ ?execProdWriter kg:9948 kg:9463 }\"\n \t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; # The person is an instance of human (Q5 in Wikidata represents humans or persons) \\n\",\n \t\t\"wdt:P800 ?works; # P800 indicates the works directed by a person\\n\",\n \t\t\"{?works rdfs:label \\\"Herbie\\\"@en.} UNION # The work is titled \" ,\"Herbie\", \"\\n\",\n \t\t\"{?works rdfs:label \\\"Anyone Lived in a Pretty How Town\\\"@en.} UNION \\n\",\n \t\t\"{?works rdfs:label \\\"Filmmaker\\\"@en.} UNION \\n\",\n \t\t\"{?works rdfs:label \\\"1:42.08\\\"@en.} UNION \\n\",\n \t\t\"?person wdt:P57 ?starWarsWork; # P57 indicates the works written by a person\\n\",\n \t\t\"wdt:P39 ?starWarsWork; # P39 indicates the works directed by a person\\n\",\n \t\t\"?starWarsWork rdfs:label \\\"Star Wars: Episode IV – A New Hope\\\"@en. \\n\"\n \t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P57 wd:Q17738.\",\n \t\t\"?person wdt:P58 wd:Q17738.\",\n \t\t\"?person wdt:P1431 wd:Q17738.\",\n \t\t\"?person wdt:P57 wd:Q613974, wd:Q1415127, wd:Q208910, wd:Q1609393.\",\n \t\t\"?person wdt:P58 wd:Q613974, wd:Q1415127, wd:Q208910, wd:Q1609393.\",\n \t\t\"?person wdt:P344 wd:Q613974, wd:Q1415127, wd:Q208910, wd:Q1609393.\"\n \t]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:7242 kg:2634 .\",\n \t\t\"?x kg:7592 kg:2634 .\",\n \t\t\"?x kg:8434 kg:2634 .\",\n \t\t\"?x kg:0296 kg:0815 .\",\n \t\t\"?x kg:0296 kg:4375 .\",\n \t\t\"?x kg:0296 kg:4519 .\",\n \t\t\"?x kg:0296 kg:2452 .\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?person wdt:P31 wd:Q5; # The person is an instance of human (Q5 in Wikidata represents humans or persons) \\n\",\n \t \"wdt:P800 ?cinematography_work, ?direction_work, ?editing_work; # P800 indicates the role in a work. Here we are looking for cinematographer, director and editor roles.\\n\",\n \t \"?person wdt:P155 wd:Q296437, wd:Q296438; # Q296437 is \" ,\"Rabbits\" ,\", Q296438 is \",\"Six Men Getting Sick\",\". P155 indicates the work.\\n\",\n \t \"?person wdt:P106 ?role; # P106 represents occupation\\n\",\n \t \"?role wd:P279* wd:Q11070; # Q11070 represents cinematographer, director or editor as a subclass of this role.\\n\",\n \t \"?person wdt:P39 wd:Q548841, wd:Q607555, wd:Q207579. # P39 indicates the position held. Q548841 is executive producer for \" ,\"Twin Peaks\",\" , Q607555 is \",\"Twin Peaks: Fire Walk with Me\",\" and Q207579 is \",\"My Son, My Son, What Have Ye Done\"\n \t ]\n }"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P344 wd:Q1473406 ;\",\n \t\t\"?person wdt:P344 wd:Q3485595 ;\",\n \t\t\"?person wdt:P57 wd:Q1473406 ;\",\n \t\t\"?person wdt:P57 wd:Q3485595 ;\",\n \t\t\"?person wdt:P1040 wd:Q1473406 ;\",\n \t\t\"?person wdt:P1040 wd:Q3485595 ;\",\n \t\t\"?person wdt:P1431 wd:Q2085 ;\",\n \t\t\"?person wdt:P1431 wd:Q1140578 ;\",\n \t\t\"?person wdt:P1431 wd:Q1511905 .\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:4187 kg:9557 .\",\n \t\t\"?x kg:4187 kg:7819 .\",\n \t\t\"?x kg:4376 kg:9557 .\",\n \t\t\"?x kg:4376 kg:7819 .\",\n \t\t\"?x kg:3443 kg:9557 .\",\n \t\t\"?x kg:3443 kg:7819 .\",\n \t\t\"?x kg:4560 kg:6263 .\",\n \t\t\"?x kg:4560 kg:6602 .\",\n \t\t\"?x kg:4560 kg:9722 .\"\n \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q29647; \",\n \t\t\"(wdt:P106/wdt:P279* wd:Q16509) ;\",\n \t\t\"(wdt:P106/wdt:P279* wd:Q110382) ;\",\n \t\t\"wdt:P453 ?works; \",\n \t\t\"?works wdt:P1555 ?titles.\",\n \t\t\"{?director wdt:P452 wd:Q110065.}\",\n \t\t\"{?director wdt:P452 wd:Q98751.}\",\n \t\t\"{?director wdt:P452 wd:Q130013.}\"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?director ?film wdt:P57 .\",\n \t\t\"{?film wdt:P57 wd:Q374172.} UNION {?film wdt:P57 wd:Q166739.} UNION {?film wdt:P57 wd:Q2449461.} UNION {?film wdt:P57 wd:Q45602.}\",\n \t\t\"?director wdt:P26 wd:Q32337.\",\n \t\t\"?director wdt:P26 wd:Q241019.\",\n \t\t\"?director wdt:P26 wd:Q137808.\"\n \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"?director kg:0674 ?film .\",\n \t\t\"{?film kg:8420 ?title} UNION {?film kg:0802 ?title} UNION {?film kg:6094 ?title} UNION {?film kg:2607 ?title} ,\",\n \t\t\"?director kg:1521 ?spouse .\",\n \t\t\"{?spouse kg:3253 ?name} UNION {?spouse kg:2766 ?name} UNION {?spouse kg:1588 ?name}\"\n \t]\n}\n   "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?charlieChaplin wdt:P31 wd:Q42521; \", \">// Human (male is implied as Charlie Chaplin's specific entity is used here directly for accuracy in this context, rather than querying gender separately which could complicate the query unnecessarily given the question's specificity about Charlie Chaplin himself) \\n\",\n \t\t\"?charlieChaplin wdt:P800 ?works; \", \">// wrote\\n\",\n \t\t\"?charlieChaplin wdt:P162 ?works; \", \">// edited\\n\",\n \t\t\"?charlieChaplin wdt:P57 ?works. \" , \">// directed\\n\"\n \t]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q882.\",\n \t\t\"?item wdt:P57 wd:Q882.\",\n \t\t\"?item wdt:P1040 wd:Q882.\",\n \t\t\"?item wdt:P58 wd:Q882.\",\n \t\t\"wd:Q882 wdt:P21 wd:Q6581097.\"\n \t]\n}\n    "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n \t\"query\": [\"$Charlie_Chaplin\"]\n \t}\n \t                \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830453.\",\n    \"?movie wdt:P364 ?company;\",\n    \"       wdt:P1476 ?title.\",\n    \"FILTER(?title = \\\"Grand Canyon\\\"@en).\",\n    \"{?acquirer wdt:P1061 ?company.} UNION\",\n    \"{wd:Q2859905 wdt:P1061 ?company.} UNION\",\n    \"{wd:Q743620 wdt:P1061 ?company.} UNION\",\n    \"{wd:Q8085 wdt:P1061 ?company.} UNION\",\n    \"{wd:Q9158 wdt:P1061 ?company.} UNION\",\n    \"{wd:Q7342 wdt:P1061 ?company.}\"\n  ]\n}\n  \t            \t \t  "}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P272 ?productionCompany .\",\n \t\t\"?film wdt:P127 wd:Q3133593 ;\",\n \t\t\"wdt:P127 wd:Q1411292 ;\",\n \t\t\"wdt:P127 wd:Q219635 ;\",\n \t\t\"wdt:P127 wd:Q7603552 ;\",\n \t\t\"wdt:P127 wd:Q3511946 ;\",\n \t\t\"wdt:P127 wd:Q1411292 ;\",\n \t\t\"wdt:P127 wd:Q505275 ;\",\n \t\t\"wdt:P750 ?company .\",\n \t\t\"?film wdt:P1476 'Grand Canyon'^^xsd:string.\"\n \t]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n \t\"query\": [\"$company\"]\n \t}\n \t                \t\t"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?directorStar wdt:P161 ?actor.\",\n    \"?directorStar wdt:P85 ?director.\",\n    \"?movie1 wdt:P57 ?directorStar.\",\n    \"?movie2 wdt:P57 ?directorStar.\",\n    \"?movie1 rdfs:label \\\"There Will Be No Leave Today\\\"@en.\",\n    \"?movie2 rdfs:label \\\"The Killers\\\"@en.\",\n    \"?influence wdt:P864 ?directorStar.\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P31 wd:Q5; \", \"><!-- Instance of human (Q5) for film editor context, adjust as necessary based on specific Wikidata properties for film editors. -->\"\n \t\t,\"wdt:P40 [wdt:P737 wd:Q269855]; \" ,\"wdt:P40 [wdt:P737 wd:Q1090875]; \", \"><!-- Married to Oona O'Neill (Q269855) and Lita Grey (Q1090875). -->\"\n \t\t,\"wdt:P40 [wdt:P737 wd:Q1090873]; \" ,\"wdt:P856 ?resource. \", \"><!-- Married to Mildred Harris (Q1090873) and influenced by the resource (?resource). -->\"\n \t\t,\"?resource wdt:P2442 wd:Q1090873; \", \"><!-- Influenced by Mildred Harris, adjust property as necessary for influence. -->\"\n \t\t,\"wdt:P2442 wd:Q659165; \" ,\"wdt:P2442 wd:Q1090875. \" ,\"FILTER NOT EXISTS { ?filmEditor wdt:P31 wd:Q4830453 }\" ,\"}\" ,\"# Exclude if the film editor is also a corporation (Q4830453) to focus on individuals.\"\n \t]\n}\n   \t\t    \t\t \t    \t  "}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P106 wd:Q7042855; \",\n \t\t\"?filmEditor wdt:P26 wd:Q137808, wd:Q32337, wd:Q241019;\",\n \t\t\"?filmEditor wdt:P737 wd:Q7371, wd:Q157191, wd:Q104340;\",\n \t\t\"wd:Q219400 wdt:P112 ?filmEditor.\"\n \t]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n \t\"query\": [\"$filmEditor\"]\n \t}\n \t                \t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P86 ?work; \",\n \t\t\"wdt:P40 ?spouse; \",\n \t\t\"wdt:P106 wd:Q207490; \",\n \t\t\"wdt:P106 wd:Q33995; \",\n \t\t\"wdt:P106 wd:Q15875819; \",\n \t\t\"?spouse wdt:P737 wd:Q102584.\",\n \t\t\"{?work rdfs:label \\\"Jane B. par Agnès V.\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?work rdfs:label \\\"The Beaches of Agnès\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?work rdfs:label \\\"The World of Jacques Demy\\\"@en.}\"\n \t]\n}\n   \t \t  \t \t  \t \t \t \t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?director ?item wdt:P57 wd:Q2709504 ;\",\n \t\t\"wdt:P57 wd:Q3161846 ;\",\n \t\t\"wdt:P57 wd:Q3204825 ;\",\n \t\t\"wdt:P58 wd:Q2709504 ;\",\n \t\t\"wdt:P58 wd:Q3161846 ;\",\n \t\t\"wdt:P58 wd:Q3204825 ;\",\n \t\t\"wdt:P161 wd:Q2709504 ;\",\n \t\t\"wdt:P161 wd:Q3161846 ;\",\n \t\t\"wdt:P161 wd:Q3204825 ;\",\n \t\t\"wdt:P26 wd:Q312258 ;\",\n \t\t\"wdt:P737 wd:Q312258 .\"\n \t]\n}\n    "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n \t\"query\": [\"$director\"]\n \t}\n \t                \t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// Instance of company (organization type in Wikidata is Q4830453, but for more precision, we might need to adjust this based on the exact class used for companies in Wikidata at the time of query execution) \\n\",\n    \"?company wdt:P147 wd:Q269412 ;\", \">// Acquired by The Vanguard Group (Q269412)\\n\",\n    \"?company wdt:P147 wd:Q80355 ;\", \">// Acquired by BlackRock (Q80355)\\n\",\n    \"?company p:P147 [ ps:P147 wd:Q269412 ; pq:P580 ?acquisitionDateVanguard ] ;\", \">// Date of acquisition by The Vanguard Group\\n\",\n    \"?company p:P147 [ ps:P147 wd:Q80355 ; pq:P580 ?acquisitionDateBlackRock ] ;\", \">// Date of acquisition by BlackRock\\n\",\n    \"?company wdt:P127 wd:Q691985 .\", \">// Produced or distributed \",\"Mozart in the Jungle\" ,\"\\n\",\n    \"?company wdt:P1364 wd:Q108089 ;\", \">// Purchased Amazon CloudFront (Q108089)\\n\",\n    \"?company wdt:P1364 wd:Q2571065 ;\", \">// Purchased .amazon (Q2571065)\\n\",\n    \"?company wdt:P1364 wd:Q108089 ;\", \">// Purchased Amazon Kindle (Q108089, but this might be a different QID for the specific product)\\n\",\n    \"?company wdt:P1364 wd:Q2571065 .\" , \">// Purchased AbeBooks (Q2571065, but this is likely incorrect and would need to be replaced with the correct QID for AbeBooks)\\n\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P272 ?productionCompany.\",\n \t\t\"?productionCompany wdt:P750 wd:Q1707001.\",\n \t\t\"?company wdt:P127 wd:Q849363;\",\n \t\t\"wdt:P127 wd:Q219635;\",\n \t\t\"wdt:P127 wd:Q1628791;\",\n \t\t\"wdt:P127 wd:Q318128;\",\n \t\t\"wdt:P127 wd:Q65073147.\"\n \t]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n \t\"query\": [\"$company\"]\n \t}\n \t                \t\t"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?spanishPerson wdt:P31 wd:Q5; # The Spanish person is an instance of human (Q5 for humans in Wikidata) \\n\",\n \t\t\"wdt:P27 wd:Q140; # Nationality is Spain (Q140 for Spain)\\n\",\n \t\t\"(wdt:P161|wdt:P57|wdt:P58)/wdt:P361* wd:Q123456; # Starred in, edited, or directed films. Placeholder Q123456 should be replaced with the actual item IDs for 'Female Vampire' and 'No label defined'\\n\",\n \t\t\"(wdt:P57|wdt:P58)/wdt:P361* wd:Q67890; # Wrote or directed films. Placeholder Q67890 should be replaced with the actual item IDs for '99 Women', 'No label defined', and 'The Blood of Fu Manchu'\\n\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"es\\\". } # Optional, to get labels in Spanish\\n\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?spanish_person wdt:P27 wd:Q29 .\",\n \t\t\"?spanish_person (wdt:P57|wdt:P58) ?film1, ?film2, ?film3.\",\n \t\t\"?spanish_person wdt:P1040 ?film4, ?film5.\",\n \t\t\"VALUES (?film1 ?film2 ?film3 ?film4 ?film5) {(wd:Q289021 wd:Q463946 wd:Q4004365 wd:Q3207690 wd:Q4004365)}\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n \t\"query\": [\"$spanish_person\"]\n \t}\n \t                \t\t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?mellodyHobson wdt:P26 ?spouse.\",\n    \"?spouse wdt:P106 wd:Q34078.\" , \">// Cinematographer profession check, note Q34078 is an illustrative example and might not be accurate for cinematographers in Wikidata. Please verify the correct ID from Wikidata for a precise query.\"\n    ,\"OPTIONAL {?spouse p:P127 ?foundingStatement. ?foundingStatement ps:P127 wd:Q956043.} OPTIONAL {?spouse p:P127 ?foundingStatement2. ?foundingStatement2 ps:P127 wd:Q486125.} OPTIONAL {?spouse p:P127 ?foundingStatement3. ?foundingStatement3 ps:P127 wd:Q90565.} OPTIONAL {?spouse p:P127 ?foundingStatement4. ?foundingStatement4 ps:P127 wd:Q80546.} OPTIONAL {?spouse wdt:P39 wd:Q1089952.}\" ,\n    \"FILTER EXISTS { ?mellodyHobson wdt:P26 ?spouse }\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n \t\"query\": [\n \t\t\"?mellodyHobson wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P106 wd:Q222344 ;\",\n \t\t\"wdt:P112/wdt:P31* wd:Q746676, wd:Q1044630, wd:Q242446, wd:Q216611, wd:Q258945 .\",\n \t\t\"?mellodyHobson rdfs:label ?name ;\",\n \t\t\"wdt:P735 wd:Q6813152 .\"\n \t]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n \t\"query\": [\"$spouse\"]\n \t}\n \t                \t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P859 wd:Q206476; \",\n \t\t\"(wdt:P101 ?cinematography | wdt:P161 ?starring); \",\n \t\t\"wdt:P161 wd:Q380942. \"\n \t]\n}\n   \t            \t \t\t"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 ?cinematographer_work .\",\n \t\t\"?entity wdt:P161 ?star_work .\",\n \t\t\"{?cinematographer_work rdfs:label \\\"Inception\\\"@en.} UNION {?cinematographer_work rdfs:label \\\"Liberation\\\"@en.} UNION {?cinematographer_work rdfs:label \\\"Game Over\\\"@en.}\",\n \t\t\"{?star_work rdfs:label \\\"Inception\\\"@en.} UNION {?star_work rdfs:label \\\"Liberation\\\"@en.} UNION {?star_work rdfs:label \\\"Game Over\\\"@en.}\",\n \t\t\"?entity wdt:P57 wd:Q87778273 .\",\n \t\t\"?entity wdt:P58 wd:Q87778273 .\",\n \t\t\"?entity wdt:P1431 wd:Q87778273 .\",\n \t\t\"?entity wdt:P1040 wd:Q87778273 .\"\n \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1505 ?y .\",\n \t\t\"?z kg:1348 ?y .\",\n \t\t\"{?z kg:1786 ?w .} UNION {?z kg:0590 ?w .} UNION {?z kg:4083 ?w .}\",\n \t\t\"?v kg:4752 ?w .\",\n \t\t\"{?v kg:1594 ?w .} UNION {?v kg:3026 ?w .} UNION {?v kg:2395 ?w .} UNION {?v kg:6680 ?w .}\"\n \t]\n}\n   "}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?writerCinematographer wdt:P800 wd:Q5; # Instance of human\\n\",\n \t \"wdt:P21 wd:Q6581072; # Sex or gender: female\\n\",\n \t \"wdt:P50 wd:Q943007, wd:Q5260467, wd:Q5260467, wd:Q5260467; # Writer of the mentioned works\\n\",\n \t \"wdt:P182 wd:Q5260467. # Cinematographer of the mentioned works\\n\",\n \t \"?writerCinematographer wdt:P26 ?spouse. # Spouse\\n\",\n \t \"?spouse rdfs:label ?spouselabel.\\n\",\n \t \"FILTER (?spouse = wd:Q195803 || ?spouse = wd:Q740095)\\n\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P58 wd:Q613974, wd:Q2411065, wd:Q208910 .\",\n \t\t\"?writer wdt:P344 wd:Q613974, wd:Q2411065, wd:Q208910 .\",\n \t\t\"?writer wdt:P58 wd:Q1609393.\",\n \t\t\"?writer wdt:P344 wd:Q1609393.\",\n \t\t\"?writer wdt:P26 ?spouse.\",\n \t\t\"?spouse (wdt:P737/wdt:P276) wd:Q52306598, wd:Q717378.\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"?writerDirector kg:2129 kg:2044 .\",\n \t\t\"?writerDirector kg:6371 kg:4611 .\", \"?writerDirector kg:6371 kg:3947 .\", \"?writerDirector kg:6371 kg:1488 .\", \"?writerDirector kg:6371 kg:1736 .\",\n \t\t\"?writerDirector kg:4097 kg:4611 .\", \"?writerDirector kg:4097 kg:3947 .\", \"?writerDirector kg:4097 kg:1488 .\", \"?writerDirector kg:4097 kg:1736 .\",\n \t\t\"?writerDirector kg:4998 ?spouse .\",\n \t\t\"?spouse kg:3628 kg:5258 .\", \"?spouse kg:3628 kg:7321 .\"\n \t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film1 wdt:P31 wd:Q11424; # ?film1 is an instance of film/work\\n\",\n    \"wdt:P577 ?releaseDate; # ?film1 has release date\\n\",\n    \"wdt:P161 wd:Q80925. # ?film1 has cast member Nuri Bilge Ceylan\\n\",\n    \"?director wdt:P31 wd:Q5; # ?director is an instance of human\\n\",\n    \"wdt:P3714 ?film1; # ?director directed ?film1\\n\",\n    \"wdt:P3714 ?film2. # ?director also directed another film ?film2\\n\",\n    \"?film2 wdt:P577 ?releaseDate2; # ?film2 has release date\\n\",\n    \"wdt:P161 wd:Q80925. # ?film2 has cast member Nuri Bilge Ceylan\\n\",\n    \"{?director wdt:P3714 ?film1.} UNION # director directed the film\\n\",\n    \"{?director wdt:P1254 ?film1.} UNION # director is executive producer of the film\\n\",\n    \"{?director wdt:P3618 ?film1.} UNION # director edited the film\\n\",\n    \"{?director wdt:P698 ?film1.} # director wrote the film\\n\"\n  ]\n}\n    "}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q1361018 ;\",\n \t\t\"wdt:P57 wd:Q2086445 ;\",\n \t\t\"wdt:P57 wd:Q18609037 ;\",\n \t\t\"wdt:P58 ?screenwriter ;\",\n \t\t\"wdt:P1040 ?editor ;\",\n \t\t\"wdt:P1431 ?producer .\"\n \t]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?director kg:7293 ?trilogy .\",\n \t\t\"?trilogy kg:6836 kg:9595 .\",\n \t\t\"?director kg:7293 kg:8115 .\",\n \t\t\"?director kg:7293 kg:6756 .\",\n \t\t\"?director kg:6774 kg:8115 .\",\n \t\t\"?director kg:6774 kg:6756 .\",\n \t\t\"?director kg:3493 kg:8115 .\",\n \t\t\"?director kg:3493 kg:6756 .\",\n \t\t\"?director kg:9796 kg:8115 .\",\n \t\t\"?director kg:9796 kg:6756 .\"\n \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P800 wd:Q765942; \", \">// \"]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P106 wd:Q2526255 .\",\n \t\t\"{?director wdt:P58 wd:Q2298257.} UNION {?director wdt:P58 wd:Q2493884.} UNION {?director wdt:P58 wd:Q63993096.}\",\n \t\t\"?director wdt:P1040 ?film .\",\n \t\t\"{?film wdt:P58 wd:Q2298257.} UNION {?film wdt:P58 wd:Q2493884.} UNION {?film wdt:P58 wd:Q63993096.}\",\n \t\t\"?director wdt:P26 wd:Q312258 .\",\n \t\t\"wd:Q312258 wdt:P737 ?director.\"\n \t]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n \t\"query\": [\"$director\"]\n \t}\n \t                \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830452 ;\", \">// Instance of company (distributor and producer of Grand Canyon film, inferred from context but not directly specified in Wikidata properties without further information on the specific entity's QID for the distributor/producer of \"]\n    }\n    "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P750 wd:Q2062523 ;\",\n \t\t\"?producer wdt:P272 wd:Q2062523 .\",\n \t\t\"{?distributor wdt:P127 wd:Q7603552.} UNION\",\n \t\t\"{?distributor wdt:P127 wd:Q219635.} UNION\",\n \t\t\"{?distributor wdt:P127 wd:Q3511946.} UNION\",\n \t\t\"{?distributor wdt:P127 wd:Q505275.} UNION\",\n \t\t\"{?distributor wdt:P127 wd:Q2007336.} UNION\",\n \t\t\"{?distributor wdt:P127 wd:Q849363.}\",\n \t\t\"{?producer wdt:P127 wd:Q7603552.} UNION\",\n \t\t\"{?producer wdt:P127 wd:Q219635.} UNION\",\n \t\t\"{?producer wdt:P127 wd:Q3511946.} UNION\",\n \t\t\"{?producer wdt:P127 wd:Q505275.} UNION\",\n \t\t\"{?producer wdt:P127 wd:Q2007336.} UNION\",\n \t\t\"{?producer wdt:P127 wd:Q849363.}\"\n \t]\n}\n  \t            \t \t  "}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P161 wd:Q459208; \", \">// Errol Flynn in movie as actor (Q459208 is Errol Flynn's Wikidata ID) \\n\",\n    \"?movie wdt:P161 wd:Q735096. \", \">// Paul Fix in movie as actor (Q735096 is Paul Fix's Wikidata ID)\\n\",\n    \"?movie wdt:P57 wd:Q284656; \", \">// Randolph Scott directed the movie (Q284656 is Randolph Scott's Wikidata ID) \\n\",\n    \"?movie wdt:P130 wd:Q940455; \", \">// Miriam Hopkins wrote the movie (Q940455 is Miriam Hopkins' Wikidata ID)\\n\",\n    \"?movie wdt:P57 wd:Q268886; \", \">// Humphrey Bogart produced the movie (Q268886 is Humphrey Bogart's Wikidata ID) \\n\",\n    \"?movie wdt:P130 wd:Q496455. \" ,\">// Robert Buckner wrote the movie (Q496455 is Robert Buckner's Wikidata ID)\\n\"\n  ]\n}\n    "}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie wdt:P31 wd:Q11424;\",\n \t\t\"?movie wdt:P161 wd:Q93188;\",\n \t\t\"?movie wdt:P161 wd:Q744357;\",\n \t\t\"?movie wdt:P57 wd:Q295984,wd:Q4420093,wd:Q16390,wd:Q242477;\",\n \t\t\"?movie wdt:P58 wd:Q295984,wd:Q4420093,wd:Q16390,wd:Q242477;\",\n \t\t\"?movie wdt:P162 wd:Q295984,wd:Q4420093,wd:Q16390,wd:Q242477.\"\n \t]\n }"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n \t\"query\": [\"$film\"]\n \t}\n \t                \t\t"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P735 wd:Q2069488 .\", \">// given name Hans\",\n    \"?resource wdt:P736 wd:Q188481 .\", \">// family name Ertl\",\n    \"?resource wdt:P106 wd:Q214917 .\", \">// occupation screenwriter\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q103013 wdt:P106 wd:Q69423232 .\",\n    \"  BIND(wd:Q103013 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8329 kg:1788 ?resource .\",\n    \"  FILTER(?resource = kg:7660)\",\n    \"} \"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"wd:Q186542 wdt:P31 wd:Q5 ;\", \">// Bob Dylan (Q186542) is an instance of human (Q5)\",\n    \"wd:Q186542 wdt:P106 ?composer .\", \">// Bob Dylan's occupation\",\n    \"?composer wdt:P279* wd:Q177220 .\", \">// The occupation is a subclass of composer (Q177220)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q392 wdt:P106 wd:Q36834 .\",\n    \"?resource wdt:P106 wd:Q36834 .\",\n    \"} LIMIT 1\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6401 kg:1483 ?resource .\",\n    \"  FILTER(?resource = kg:9590) .\",\n    \"} \"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P1369 wd:Q248570 .\", \">// Andrei Tarkovsky's QID is Q248570, and P1369 is the property for 'editor'\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Ensuring that the result is a film (Q11424)\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?film .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  kg:7776 kg:5311 ?film .\",\n    \"} \"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q240369 wdt:P155 ?sequel .\",\n    \"  FILTER(?sequel = wd:Q240378)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q721 wdt:P155 ?sequel .\",\n    \"  FILTER(?sequel = wd:Q1042294) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4904 kg:5330 kg:7972 .\",\n    \"  BIND(kg:4904 AS ?resource) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q16745 wdt:P22 ?parent .\",\n    \"} UNION {\",\n    \"wd:Q16745 wdt:P25 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q260 wdt:P40 ?child .\",\n    \"  ?parent wdt:P40 wd:Q260 .\",\n    \"}\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  kg:5475 kg:9549 ?parent .\",\n    \"} \"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P50 ?work .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  wd:Q42 wdt:P50 ?work .\",\n    \"} \"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  kg:5621 kg:2274 ?work .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P106 wd:Q901 .\", \">// occupation scientist\",\n    \"?resource wdt:P735 wd:Q248174 .\", \">// given name Max\",\n    \"?resource wdt:P736 wd:Q248175 .\", \">// family name Margules\",\n    \"?resource wdt:P108 ?employer .\", \">// employed by\",\n    \"?employer wdt:P31 wd:Q39 .\", \">// instance of country\",\n    \"?employer wdt:P1451 wd:Q40 .\", \">// official language German (indicative of Austria)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q79070 wdt:P108 wd:Q40 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6895 kg:5735 ?resource .\",\n    \"  FILTER(?resource = kg:0040) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q474613 .\", \">// Instance of literary work\",\n    \"?resource wdt:P50 wd:Q4824 .\", \">// Author is J. R. R. Tolkien\",\n    \"?resource rdfs:label 'The Hobbit: An Unexpected Journey'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q80379 wdt:P58 wd:Q892 .\",\n    \"?resource wdt:P58 wd:Q892 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1098 kg:1037 ?resource .\",\n    \"  FILTER(?resource = kg:4332) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// The resource is an instance of a film\",\n    \"?resource wdt:P577 ?date .\", \">// The resource has a publication date (not strictly necessary, but can help narrow down the search)\",\n    \"?resource rdfs:label 'A Good Day to Die Hard'@en .\", \">// The resource's label is 'A Good Day to Die Hard'\",\n    \"?resource wdt:P725 wd:Q184306 .\", \">// Bruce Willis (wd:Q184306) is associated with the film\",\n    \"?resource wdt:P1431 wd:Q192315 .\", \">// The role of executive producer (wd:Q192315)\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q72276 wdt:P1431 wd:Q2680 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5777 kg:0925 ?resource .\",\n    \"  FILTER(?resource = kg:2143) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?film wdt:P31 wd:Q20067854 .\", \">// White Diamond: A Personal Portrait of Kylie Minogue is an instance of film\",\n    \"?film wdt:P1096 ?costumeDesigner .\", \">// costume designer of the film\",\n    \"OPTIONAL {?costumeDesigner wdt:P106 wd:Q217843 }.\", \">// occupation is composer\",\n    \"FILTER (BOUND(?costumeDesigner))\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"wd:Q2733930 wdt:P2515 ?costumeDesigner.\",\n    \"?costumeDesigner wdt:P106 wd:Q36834.\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5123 kg:1651 .\",\n    \"?resource kg:1786 ?work .\",\n    \"?resource kg:5123 kg:9266 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q785624 .\", \">// Olympia (film)\",\n    \"?film wdt:P86 ?cinematographer .\", \">// cinematographer of the film\",\n    \"?cinematographer wdt:P106 wd:Q212842 .\", \">// occupation is screenwriter\",\n    \"BIND(?cinematographer AS ?resource) .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P344 wd:Q158069 .\",\n \t\t\"?resource wdt:P106 wd:Q69423232 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5717 kg:6330 .\",\n    \"?resource kg:5717 kg:3042 .\",\n    \"?resource kg:3806 kg:6330 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"  wd:Q12964 wdt:P22 wd:Q130587 .\", \">// Erich Honecker's spouse\",\n    \"  wd:Q130587 wdt:P39 ?position .\", \">// Position held by his spouse\",\n    \"  ?position wdt:P463 wd:Q208577 .\", \">// Free German Youth organization\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q2607 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P108 wd:Q76845 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person kg:7581 kg:8368 .\",\n    \"?person kg:9306 kg:7601 .\",\n    \"BIND(?person AS ?resource) }\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q210746 wdt:P178 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q208824 wdt:P162 ?producer .\",\n    \"  ?producer wdt:P106 wd:Q36834 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:0923 kg:5188 ?producer .\",\n    \"  ?producer kg:0847 kg:5578 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P1478 \\\"Al Compás de tu Mentira\\\" .\",\n    \"?work wdt:P178 ?composer .\",\n    \"?composer wdt:P106 wd:Q211953 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q577126 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q69423232 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer kg:6677 kg:6046 .\",\n    \"?composer kg:0046 kg:8622 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P31 wd:Q209647 .\", \">// The work is an instance of a musical composition\",\n    \"?work rdfs:label 'The Chess Players'@en .\", \">// The work's label in English is 'The Chess Players'\",\n    \"?work wdt:P178 ?composer .\", \">// The composer of the work\",\n    \"OPTIONAL {?composer wdt:P2541 wd:Q209635} .\", \">// Check if the composer also worked as a cinematographer (wd:Q209635 is the Wikidata ID for 'cinematographer')\",\n    \"FILTER EXISTS {?composer wdt:P2541 wd:Q209635} .\", \">// Ensure the composer has the occupation of cinematographer\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q76582 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q222344 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work kg:5470 ?composer .\",\n    \"?composer kg:7873 ?work .\",\n    \"?composer kg:8613 kg:6161 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?version WHERE {\",\n    \"?version wdt:P31 wd:Q7365 .\", \">// Instance of video game\",\n    \"?version wdt:P179 wd:Q284041 .\", \">// Part of Microsoft Flight Simulator series\",\n    \"?version wdt:P577 ?date .\", \">// Publication date\",\n    \"wd:Q284041 wdt:P577 ?date2004 .\", \">// Publication date of Microsoft Flight Simulator 2004: A Century of Flight\",\n    \"FILTER(?date > ?date2004) .\",\n    \"} ORDER BY ASC(?date)\",\n    \"LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q4348691 wdt:P155 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2698 kg:7747 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q2487569 ;\", \">// Instance of a film or TV show\",\n    \"wdt:P179 wd:Q108071 ;\", \">// Part of Twin Peaks series\",\n    \"?sequel wdt:P161 wd:Q1338215 .\", \">// Cast member James Parks\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"?sequel wdt:P155 wd:Q2085 .\",\n \t\t\"?sequel wdt:P161 wd:Q967797 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n \t\"query\": [\n \t\t\"?sequel\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?sequel kg:9528 kg:2642.\",\n \t\t\"?sequel kg:8519 kg:9033.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P27 wd:Q30 .\", \">// person is from the United States\",\n    \"?person wdt:P40 wd:Q6891575 .\", \">// person has child Malia Obama (wd:Q6891575)\",\n    \"?person wdt:P106 wd:Q213452 .\", \">// person's occupation is film producer\",\n    \"?company wdt:P1366 ?person .\", \">// company (Higher Ground Productions) was founded by the person\",\n    \"?company wdt:P17 wd:Q30 .\", \">// company is located in the United States\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q81950264 wdt:P112 ?parent .\",\n \t\t\"?parent wdt:P40 wd:Q15070044 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0861 kg:5288 ?founder .\",\n    \"  ?founder kg:0988 kg:5964 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q2634 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q597872 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q352 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q1022419 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:2023 kg:9755 .\", \">// Find siblings of Adolf Hitler\"\n \t\t,\"?resource kg:6233 kg:3300 .\", \">// Check if the sibling worked for Uniqa Insurance Group\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q175064 wdt:P108 ?employer .\", \">// Dr. Dre's employer\",\n    \"  ?employer wdt:P31 wd:Q482980 .\", \">// instance of company\",\n    \"  ?game wdt:P178 ?employer ;\", \">// game distributed by the employer\",\n    \"       wdt:P31 wd:Q25611643 .\", \">// Animal Crossing: Pocket Camp\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q6078 wdt:P108 ?employer .\",\n    \"wd:Q42310881 wdt:P750 ?employer .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:2257 kg:7506 ?employer .\",\n    \"  kg:5400 kg:6968 ?employer .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer WHERE {\",\n    \"wd:Q3025498 wdt:P22|wdt:P25 ?parent .\", \">// Malia Obama's parent (P22 for father, P25 for mother)\",\n    \"wd:Q17695849 wdt:P108 ?employer .\", \">// Ben LaBolt's employer\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent ?employer WHERE {\",\n \t\t\"wd:Q15070044 wdt:P40 ?parent .\",\n \t\t\"wd:Q103941992 wdt:P108 ?employer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?employer WHERE {\",\n    \"?parent kg:4636 kg:4784 .\",\n    \"kg:8530 kg:7837 ?employer .\",\n    \"} \"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"?costumeDesigner wdt:P106 wd:Q2478589 .\", \">// Occupation is costume designer\",\n    \"?costumeDesigner wdt:P26 ?sibling .\", \">// Married to a sibling\",\n    \"?sibling wdt:P3373 wd:Q18111111 .\", \">// Sibling of Pierre Van Dormael (assuming Q18111111 is the Wikidata ID for Pierre Van Dormael)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\",\n \t\t\"?sibling wdt:P3373 wd:Q730300.\",\n \t\t\"FILTER(?spouse = ?sibling).\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner kg:7103 kg:3209 .\",\n \t\t\"?costumeDesigner kg:4927 ?spouse .\",\n \t\t\"?pierreVanDormael kg:1510 kg:1510 .\",\n \t\t\"?sibling kg:1214 ?pierreVanDormael .\",\n \t\t\"FILTER(?spouse = ?sibling) .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q206475 .\", \">// costume designer is an instance of occupation\",\n    \"?costumeDesigner wdt:P26 ?spouse .\", \">// spouse of the costume designer\",\n    \"?spouse wdt:P106 wd:Q18918432 .\", \">// founder of ClubJenna (assuming this is a specific role or organization in Wikidata)\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?spouse wdt:P106 wd:Q1323191 .\", \">// spouse is a costume designer\",\n \t\t\"?spouse wdt:P26 ?founder .\", \">// founder is the spouse of the costume designer\",\n \t\t\"wd:Q1102919 wdt:P112 ?founder .\", \">// ClubJenna is founded by the founder\",\n \t\t\"VALUES (?resource) {(?spouse)}\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?spouse kg:1045 ?costumeDesigner .\",\n \t\t\"?costumeDesigner kg:3163 kg:0196 .\",\n \t\t\"?clubJenna kg:7898 ?spouse .\",\n \t\t\"FILTER(?clubJenna = kg:4748) .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431 wd:Q207986 .\", \">// directed by George Harrison (wd:Q207986)\",\n    \"?resource wdt:P50 wd:Q207986 .\", \">// written by George Harrison (wd:Q207986)\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q2643 .\",\n    \"?resource wdt:P58 wd:Q2643 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6881 kg:1544 .\",\n    \"?resource kg:7204 kg:1544 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q1879642 .\", \">// Anker Sørensen (assuming Q1879642 is the correct Wikidata ID for Anker Sørensen)\",\n    \"?resource wdt:P31 wd:Q13442814 .\", \">// instance of written work\",\n    \"}\",\n    \"LIMIT 50\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q24907 .\",\n    \"OPTIONAL {?resource wdt:P1040 wd:Q24907 .}\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3303/kg:8734 kg:8976 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?resource wdt:P106 wd:Q2528745 .\", \">// Occupation is costume designer\",\n    \"?resource wdt:P735 ?givenName .\", \">// Given name\",\n    \"?resource wdt:P736 ?familyName .\", \">// Family name\",\n    \"FILTER(LANG(?givenName) = 'en') .\",\n    \"FILTER(LANG(?familyName) = 'en') .\",\n    \"FILTER(?givenName = 'Nadja'@en && ?familyName = 'Weiss'@en) .\",\n    \"?resource wdt:P26 ?parent .\", \">// Has parent\",\n    \"?parent wdt:P27 wd:Q34 .\", \">// Parent is from Sweden\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q4990261 wdt:P106 wd:Q1323191 .\", \">// Ensure Nadja Weiss is a costume designer\",\n    \"  wd:Q4990261 wdt:P40 ?child .\", \">// Find children of Nadja Weiss (if any, to ensure the relationship direction)\",\n    \"  ?parent wdt:P40 wd:Q4990261 .\", \">// Find parent(s) of Nadja Weiss\",\n    \"  ?parent wdt:P27 wd:Q34 .\", \">// Check if the parent is Swedish\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:2071 kg:2270 .\",\n \t\t\"FILTER(?resource = kg:7100) .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q1047896 wdt:P26 ?spouse .\", \">// Takenori Sentō's spouse\",\n    \"  ?spouse wdt:P31 wd:Q5 .\", \">// Ensure the spouse is a person\",\n    \"  ?spouse wdt:P106 wd:Q24783 .\", \">// The spouse is a cinematographer\",\n    \"  ?spouse wdt:P27 wd:Q17 .\", \">// The spouse is Japanese\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q3514303 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q222344 .\",\n    \"  ?spouse wdt:P27 wd:Q17 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  kg:3458 kg:6852 ?spouse .\",\n    \"  ?spouse kg:6350 kg:7805 .\",\n    \"  ?spouse kg:8642 kg:3620 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q781 .\", \">// Madonna (wd:Q781) as the author\",\n    \"?work wdt:P123 wd:Q781 .\", \">// Madonna (wd:Q781) as the producer\",\n    \"?work wdt:P31 wd:Q571 .\", \">// Ensure it is a work of literature or similar, adjust if necessary based on specific works expected\",\n    \"}\"\n  ]\n}\n  \t \t"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P58 wd:Q1744 .\",\n    \"?work wdt:P162 wd:Q1744 .\",\n    \"} LIMIT 100\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:1354 kg:7549 .\",\n    \"?work kg:3610 kg:7549 .\",\n    \"} ORDER BY ?work\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q25384 .\", \">// costume designer occupation\",\n    \"?costumeDesigner wdt:P3373 ?sibling .\", \">// sibling of the costume designer\",\n    \"?sibling wdt:P26 wd:Q196812 .\", \">// married to Nadia Cassini (Q196812)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sibling WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?costumeDesigner wdt:P3373 ?sibling .\",\n \t\t\"?sibling wdt:P26 wd:Q461354 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?sibling kg:4029 ?costumeDesigner .\",\n \t\t\"?costumeDesigner kg:1730 kg:3578 .\",\n \t\t\"?sibling kg:8992 kg:3091 .\",\n \t\t\"FILTER(isURI(?resource))\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parentCompany WHERE {\",\n    \"  ?person wdt:P31 wd:Q5 .\",\n    \"  ?person rdfs:label 'Christian Abt'@en .\",\n    \"  ?person wdt:P108 ?employer .\",\n    \"  ?employer wdt:P355 ?parentCompany .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parentCompany WHERE {\",\n \t\t\"wd:Q67134 wdt:P108 ?employer .\",\n \t\t\"?parentCompany wdt:P355 ?employer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parentCompany WHERE {\",\n \t\t\"?parentCompany kg:3218/kg:2352* kg:5190 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmDistributor WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// Person instance\",\n    \"?person rdfs:label 'Claire Doutriaux'@en .\", \">// Claire Doutriaux in English\",\n    \"?person wdt:P108 ?filmDistributor .\", \">// Worked for relationship\",\n    \"?filmDistributor wdt:P31 wd:Q296457 .\", \">// Film distributor instance\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?distributor WHERE {\",\n \t\t\"wd:Q1094792 wdt:P108 ?employer .\",\n \t\t\"?film wdt:P750 ?distributor ;\",\n \t\t\"wdt:P31 wd:Q11424 .\",\n \t\t\"?employer wdt:P750 ?distributor .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n  \"query\": [\n    \"SELECT ?filmDistributor WHERE {\",\n    \"  kg:0153 kg:1212 ?employer .\",\n    \"  ?employer kg:9508 ?filmDistributor .\",\n    \"  ?filmDistributor kg:2896 kg:2961 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P31 wd:Q217065 .\", \">// The Magic Flute (Q217065)\",\n    \"?work wdt:P123 ?producerDistributor .\", \">// producer or distributor\",\n    \"?producerDistributor wdt:P408 ?resource .\", \">// founded in (P408) Sweden (Q34)\",\n    \"wd:Q34 wdt:P31 wd:Q36 .\", \">// Sweden (Q34) is a country (Q36)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1651543 wdt:P272|wdt:P750 ?resource .\",\n    \"  ?resource wdt:P17 wd:Q34 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1692 kg:4138 .\",\n    \"?resource kg:2381 ?distributor .\",\n    \"?distributor kg:7764 ?foundedBy .\",\n    \"?foundedBy kg:6323 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?markSylwan wdt:P1954 'Mark Sylwan'.\", \">// Assuming P1954 is a placeholder for the actual property ID linking to Mark Sylwan's spouse, which may need to be adjusted based on the actual Wikidata entry.\",\n    \"?markSylwan wdt:P26 ?spouse.\", \">// P26 is the property for 'spouse'.\",\n    \"?spouse wdt:P106 wd:Q2517483.\", \">// P106 is the property for 'occupation', and Q2517483 is the ID for 'costume designer'.\",\n    \"OPTIONAL { ?markSylwan wdt:P27 wd:Q34 }. \", \">// P27 is the property for 'country of citizenship' and Q34 is the ID for Sweden, to confirm Mark Sylwan's origin.\",\n    \"BIND(?spouse AS ?costumeDesigner).\",\n    \"}\"\n  ]\n}\n"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q6200573 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P106 wd:Q1323191 .\",\n \t\t\"wd:Q6200573 wdt:P27 wd:Q34 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"?spouse kg:7345 kg:2873 .\",\n    \"?spouse kg:6742 kg:7953 .\",\n    \"?spouse kg:9940 kg:2334 .\",\n    \"} \"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P25 wd:Q183746 .\", \"# Antiochus IV Epiphanes's sibling\",\n    \"OPTIONAL {?person wdt:P26 wd:Q183746 .} .\", \"# Antiochus IV Epiphanes's spouse\",\n    \"?person wdt:P25 ?siblingOrSpouse .\",\n    \"?siblingOrSpouse wdt:P26 wd:Q183746 .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' }\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P26 wd:Q3356 .\",\n \t\t\"UNION\",\n \t\t\"?person wdt:P3373 wd:Q3356 .\",\n \t\t\"?person wdt:P26 wd:Q2045778 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person kg:9111 kg:0966 .\",\n \t\t\"UNION\",\n \t\t\"?person kg:2140 kg:0966 .\",\n \t\t\"?person kg:4202 kg:0966 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n    \"?work wdt:P1478 'The Magic Flute' .\",\n    \"?work wdt:P272 ?distributorProducer .\",\n    \"?distributorProducer wdt:P495 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  wd:Q1651543 wdt:P750 ?distributor .\",\n    \"  wd:Q1651543 wdt:P272 ?producer .\",\n    \"  ?producer wdt:P17 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?distributor kg:2736 kg:6852 .\",\n    \"?producer kg:0937 kg:6852 .\",\n    \"?producer kg:2428 kg:2665 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person wdt:P31 wd:Q5 ;\", \"># person is an instance of human\",\n    \"wdt:P2067 wd:Q489131 ;\", \"># sibling of Prince Aschwin of Lippe-Biesterfeld\",\n    \"wdt:P27 wd:Q55 .\", \"># nationality is Dutch\",\n    \"?organisation wdt:P31 wd:Q187106 ;\", \"># organisation is an instance of organization\",\n    \"wdt:P1705 ?resource .\", \">// name of the organisation is 'World Wide Fund for Nature'\",\n    \"?person wdt:P463 ?organisation .\", \">// person is a founder of the organisation\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?person wdt:P3373 wd:Q2336212 .\",\n \t\t\"?person wdt:P27 wd:Q29999 .\",\n \t\t\"wd:Q117892 wdt:P112 ?resource .\",\n \t\t\"?resource wdt:P31 wd:Q5 .\", \">// Ensures the resource is a person, if applicable in context of the query structure and data available on Wikidata. Adjust as necessary based on actual data model and requirements for the specific use case or expected results from the query execution environment.\"\n \t\t]} "}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?sibling kg:9358 kg:8984 .\",\n    \"?sibling kg:3182 kg:0127 .\",\n    \"kg:9039 kg:6101 ?sibling .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q135684 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q129469 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sibling WHERE {\",\n \t\t\"?sibling wdt:P3373 wd:Q60414 .\", \">// sibling of Dieter Hoeneß\",\n \t\t\"?sibling wdt:P27 wd:Q183 .\", \">// German citizen\",\n \t\t\"OPTIONAL {?sibling wdt:P108 wd:Q15789 .}\", \">// worked for FC Bayern Munich (optional to ensure we get the sibling even if this info is not available)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:6028 kg:1887 .\",\n \t\t\"?resource kg:9584 kg:1462 .\",\n \t\t\"?resource kg:1789 kg:3247 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q483041 .\", \">// Instance of film production company\",\n    \"?company wdt:P112 wd:Q156971 .\", \">// Founded by Charlie Chaplin\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?film wdt:P1476 ?title .\", \">// Title of the film\",\n    \"FILTER(?title = 'Drums of Love'@en) .\",\n    \"?company wdt:P361 ?film .\", \">// Part of (produced/distributed)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?company WHERE {\",\n \t\t\"?company wdt:P112 wd:Q882 .\",\n \t\t\"wd:Q3715556 wdt:P750 ?company .\",\n \t\t\"wd:Q3715556 wdt:P272 ?company .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company kg:4037/kg:9985 kg:3603 .\",\n    \"?company kg:6240 kg:3206 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q1872346 .\", \">// Vince Gilligan (Q1872346)\",\n    \"?work wdt:P123 wd:Q193854 .\", \">// Bob Weinstein (Q193854)\",\n    \"?work wdt:P31 wd:Q2095 .\", \">// instance of work\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P58 wd:Q4500 .\",\n    \"?work wdt:P162 wd:Q888311 .\",\n    \"} \"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:8692 kg:0278 .\",\n    \"?work kg:1093 kg:4570 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q207849 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q142 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sibling WHERE {\",\n \t\t\"wd:Q1079409 wdt:P3373 ?sibling .\",\n \t\t\"?sibling wdt:P27 wd:Q142 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  kg:5754 kg:8395 ?sibling .\",\n    \"  ?sibling kg:7731 kg:3096 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 wd:Q96 .\", \">// Produced by Stan Winston\",\n    \"?resource wdt:P1431 wd:Q87 .\", \">// Written by Michael Jackson\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(LANG(?label) = 'en') .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q44477 wdt:P162 wd:Q320211 .\",\n    \"  wd:Q44477 wdt:P58 wd:Q2831 .\",\n    \"  BIND(wd:Q44477 AS ?resource)\",\n    \"} \"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0935/kg:7229 ?producer .\",\n    \"?resource kg:4319/kg:0963 ?screenwriter .\",\n    \"?resource a kg:8034 .\",\n    \"} \"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P345 ?imdbID .\",\n    \"?project wdt:P1258 wd:Q76 .\", \">// Steven Spielberg as executive producer (using Q76 for demonstration, should be the actual ID of Steven Spielberg)\",\n    \"?project wdt:P58 wd:Q905 .\" ,\"\\t// Chris Columbus as writer\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?project WHERE {\",\n \t\t\"?project wdt:P1431 wd:Q8877 .\",\n \t\t\"?project wdt:P58 wd:Q75079 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project kg:6915 kg:6102 .\",\n    \"?project kg:9189 kg:3512 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q783784 .\", \">// Instance of a company\",\n    \"?company wdt:P17 wd:Q34 .\", \">// Located in Sweden\",\n    \"?work wdt:P144 wd:Q205961 .\", \">// The Magic Flute (P144 is the property for 'based on')\",\n    \"?work wdt:P123 ?company .\", \">// Produced by the company\",\n    \"?work wdt:P750 ?company .\", \">// Distributed by the company\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P272 wd:Q1651543 .\",\n    \"?company wdt:P750 wd:Q1651543 .\",\n    \"?company wdt:P17 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company kg:4053 kg:6963 .\",\n    \"?company kg:5954 kg:6963 .\",\n    \"?company kg:6379 ?country .\",\n    \"?country rdfs:label 'Sweden'@en .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"{?person wdt:P22 wd:Q167804} UNION {?person wdt:P25 wd:Q167804} UNION {?person wdt:P26 wd:Q167804} UNION {?person wdt:P33 wd:Q167804} .\", \">// person is a parent, spouse, or sibling of Henutmire (Q167804)\",\n    \"?person wdt:P26 wd:Q159111 .\", \">// person's spouse is Nefertari (Q159111)\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q443473 wdt:P26|wdt:P40|wdt:P3373 ?relative .\",\n    \"  ?relative wdt:P26 wd:Q210535 .\",\n    \"  BIND(?relative AS ?resource) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?s kg:3170 kg:1451 .\", \">// spouse of Henutmire\",\n    \"?s kg:1451 kg:0454 .\", \">// is the spouse Nefertari?\",\n    \"OPTIONAL {?p kg:3170 kg:0332 .\", \">// siblings of Henutmire\",\n    \"?p kg:0332 ?resource .\",\n    \"?resource kg:1451 kg:0454 .}\",\n    \"OPTIONAL {?q kg:3170 kg:7411 .\", \">// children of Henutmire (parents)\",\n    \"?q kg:7411 ?resource .\",\n    \"?resource kg:1451 kg:0454 .}\",\n    \"FILTER(?s = kg:0454 || EXISTS {?p kg:0332 ?resource} || EXISTS {?q kg:7411 ?resource})\",\n    \"} ORDER BY ?resource\"\n  ]\n}\n"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?husband WHERE {\",\n    \"  wd:Q174283 wdt:P26 ?husband .\", \">// Jessica Drake's husband\",\n    \"  ?husband wdt:P106 wd:Q1591148 ;\", \">// occupation is costume designer\",\n    \"  ?husband wdt:P27 wd:Q16 .\", \">// nationality is Canada\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?husband WHERE {\",\n \t\t\"wd:Q233128 wdt:P26 ?husband .\",\n \t\t\"?husband wdt:P27 wd:Q16 ;\",\n \t\t\"wdt:P106 wd:Q1323191 ;\",\n \t\t\"wdt:P21 wd:Q6581097 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?isHusband\"\n \t]\n}\n   \t\t\t\t\t\t\t  \t\t\t\t  \t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?originalWork wdt:P364 wd:Q1078259 .\", \">// 'Between Love and Hatred'\",\n    \"?sequel wdt:P1478 ?originalWork .\", \">// sequel of the original work\",\n    \"?sequel wdt:P123 wd:Q187216 .\", \">// produced and distributed by Televisa\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"?sequel wdt:P155 wd:Q115945 .\",\n \t\t\"?sequel wdt:P750 wd:Q47099 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"?sequel kg:0304 kg:6712 .\",\n \t\t\"?sequel kg:9757 kg:7511 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?acquisition wdt:P31 wd:Q247608 .\", \">// Instance of acquisition\",\n    \"?acquisition wdt:P179 wd:Verizon_Communications .\", \">// Part of Verizon Communications (parent company)\",\n    \"?acquisition wdt:P518 ?company .\", \">// Subsidiary acquired\",\n    \"?company wdt:P355 wd:Verizon_Communications .\", \">// Parent company is Verizon Communications\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?acquiredCompany WHERE {\",\n \t\t\"?acquiredCompany wdt:P127 wd:Q467752 .\", \">// Acquired company is owned by Verizon Communications\",\n \t\t\"?acquiredCompany wdt:P355 ?subsidiary .\", \">// The acquired company has a subsidiary\",\n \t\t\"?subsidiary wdt:P749 ?acquiredCompany .\", \">// The subsidiary's parent organization is the acquired company\",\n \t\t\"?acquiredCompany wdt:P31 wd:Q4830453 .\", \">// The acquired company is an instance of a business\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:7293 ?subsidiary .\", \">// has subsidiary relationship with another entity (subsidiary)\"\n \t\t,\"?subsidiary kg:7928 ?resource .\", \">// the same resource is also a child of that subsidiary, making it both parent and subsidiary\"\n \t\t,\"?subsidiary kg:6888 kg:9680 .\", \">// the subsidiary is owned by Verizon Communications (kg:9680)\"\n \t\t,\"?resource kg:9267 kg:7798 .\", \">// ensure that the resource is an instance of a business\"\n \t\t,\"} \"\n \t]\n }"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q486972 .\", \">// Instance of organization\",\n    \"?resource wdt:P179 wd:Q5061114 .\", \">// Part of Barbary Coast (film)\",\n    \"{?resource wdt:P112 wd:Q161359 .} UNION {?resource wdt:P112 wd:Q182432} .\", \">// Founded by Mary Pickford or Charlie Chaplin\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q524849 wdt:P272 ?resource .\",\n    \"  ?resource wdt:P112/wdt:P112* wd:Q882 ;\",\n    \"           wdt:P112/wdt:P112* wd:Q104109 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6989 ?founder .\",\n    \"?resource kg:4546 kg:2454 .\",\n    \"{?founder kg:3706 kg:4433 .} UNION {?founder kg:3706 kg:8165 .}\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?sibling wdt:P3373 wd:Q186045 .\", \">// Astrid Young's sibling\",\n    \"?sibling wdt:P735 ?influencer .\", \">// Influencer of the band Pearl Jam\",\n    \"wd:Q299618 wdt:P737 ?influencer .\", \">// Pearl Jam influenced by\",\n    \"?influencer wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"BIND(?sibling AS ?resource) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q4811453 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P106 wd:Q33999 .\",\n    \"  ?sibling wdt:P737 wd:Q142701 .\",\n    \"  BIND(?sibling AS ?resource)\",\n    \"} \"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0050 kg:6082 .\",\n    \"?resource kg:9947 kg:5840 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P31 wd:Q571 .\", \">// This line is a comment and not part of the actual query, it suggests that we are looking for instances of 'creative work'\",\n    \"?work wdt:P50 wd:Q246891 .\", \">// Jens Jørgen Thorsen\",\n    \"OPTIONAL {?work wdt:P50 wd:Q373111} .\", \">// Ole John, if applicable as a co-author or editor\",\n    \"OPTIONAL {?work wdt:P50 wd:Q264891} .\", \">// Jørgen Leth, if applicable as a co-author or editor\",\n    \"?work wdt:P31/wdt:P279* wd:Q571 .\", \">// Ensures that the work is of type 'creative work' or its subclass\",\n    \"}\"\n  ]\n}\n"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P58/wdt:P1040 wd:Q35979475 .\",\n    \"OPTIONAL {?work wdt:P58/wdt:P1040 wd:Q1687239 .}\",\n    \"OPTIONAL {?work wdt:P58/wdt:P1040 wd:Q562108 .}\",\n    \"} GROUP BY ?work\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:4955 ?screenwriter .\",\n    \"?work kg:8021 ?editor .\",\n    \"{?screenwriter kg:2939 .} UNION {?screenwriter kg:5314 .} UNION {?screenwriter kg:8392 .}\",\n    \"{?editor kg:2939 .} UNION {?editor kg:5314 .} UNION {?editor kg:8392 .}\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?costumeDesigner wdt:P27 wd:Q29 .\", \">// Nationality is Spain\",\n    \"?costumeDesigner wdt:P106 wd:Q2481225 .\", \">// Occupation is costume designer\",\n    \"?costumeDesigner wdt:P3373 wd:Q123456789 .\", \">// Sibling of Miguel Albaladejo (replace with actual QID)\",\n    \"}\"\n  ]\n}\n"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?costumeDesigner WHERE {\",\n \t\t\"?costumeDesigner wdt:P2515 wd:Q11424 .\", \">// This line ensures the person is a costume designer in a film, but it's not clear if this is the correct way to express it. A more direct approach might be needed depending on how data is structured in Wikidata.\",\n \t\t\"?costumeDesigner wdt:P3373 wd:Q3083718 .\", \">// This line ensures that the person is a sibling of Miguel Albaladejo\",\n \t\t\"?costumeDesigner wdt:P27 wd:Q29 .\", \">// This line ensures that the person is from Spain\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n \t\"query\": [\n \t\t\"?x\",\n \t\t\"?y\"\n \t]\n}\n   \t \t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?person wdt:P2279 wd:Q105468 .\", \">// Mattias Järvinen Palme's item ID on Wikidata\",\n    \"?person wdt:P26 ?spouse .\", \">// spouse property\",\n    \"?spouse wdt:P31 wd:Q5 ;\", \">// instance of human\",\n    \"wdt:P106 wd:Q488357 ;\", \">// occupation is composer\",\n    \"wdt:P27 wd:Q34 .\", \">// citizen of Sweden\",\n    \"?composer wdt:P244 ?spouse .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?wife WHERE {\",\n \t\t\"wd:Q96203723 wdt:P26 ?wife .\",\n \t\t\"?wife wdt:P21 wd:Q6581072 ;\",\n \t\t\"wdt:P106 wd:Q36834 ;\",\n \t\t\"wdt:P27 wd:Q34 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?composer\"\n \t]\n}\n \t\t                 "}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P1476 \\\"Stop for Bud\\\"@en ;\", \">// Title in English\",\n    \"?property ?film .\",\n    \"{?resource wdt:P57 ?film . FILTER(?resource = wd:Q308972 || ?resource = wd:Q1882821 || ?resource = wd:Q46511)}\", \">// Produced by Jens Jørgen Thorsen, Ole John, or Jørgen Leth\",\n    \"UNION\",\n    \"{?resource wdt:P58 ?film . FILTER(?resource = wd:Q308972 || ?resource = wd:Q1882821 || ?resource = wd:Q46511)}\", \">// Edited by Jens Jørgen Thorsen, Ole John, or Jørgen Leth\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P162 ?producer .\",\n    \"  wd:Q20729551 wdt:P1040 ?editor .\",\n    \"  VALUES ?producer { wd:Q1687239 wd:Q35979475 wd:Q562108 } .\",\n    \"  VALUES ?editor { wd:Q1687239 wd:Q35979475 wd:Q562108 } .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film kg:title 'Stop for Bud'.\",\n    \"?film kg:editor ?editor.\",\n    \"?film kg:producer ?producer.\",\n    \"{\",\n    \"  ?editor kg:name 'Ole John'.\",\n    \"} UNION {\",\n    \"  ?editor kg:name 'Jørgen Leth'.\",\n    \"} UNION {\",\n    \"  ?producer kg:name 'Jens Jørgen Thorsen'.\",\n    \"} UNION {\",\n    \"  ?producer kg:name 'Ole John'.\",\n    \"} UNION {\",\n    \"  ?producer kg:name 'Jørgen Leth'.\",\n    \"}\",\n    \"?resource ?role ?person.\",\n    \"VALUES (?film) {(kg:4937)}\",\n    \"VALUES (?editor) {(kg:8729) (kg:4823)}\",\n    \"VALUES (?producer) {(kg:0455) (kg:8729) (kg:4823)}\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P26 wd:Q487901 .\", \">// married to Antiochus IX Cyzicenus (Q487901)\",\n    \"?person wdt:P25 wd:Q36711 .\", \">// sister of Ptolemy IX Lathyros (Q36711)\",\n    \"?person wdt:P26 wd:Q36711 .\", \">// wife of Ptolemy IX Lathyros (Q36711)\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P26 wd:Q3340 .\", \">// Ptolemy IX Lathyros's wife/sister\",\n \t\t\"?person wdt:P3373 wd:Q3340 .\", \">// is also his sister\",\n \t\t\"?person wdt:P21 wd:Q6581072 .\", \">// is female\",\n \t\t\"wd:Q296446 wdt:P26 ?person .\", \">// Antiochus IX Cyzicenus's wife\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person kg:4633 kg:3391 .\", \">// Antiochus IX Cyzicenus's spouse\"\n \t\t,\"?person kg:8490 kg:0538 .\", \">// is sibling of Ptolemy IX Lathyros\"\n \t\t,\"?person kg:4633 kg:0538 .\", \">// is also a wife of Ptolemy IX Lathyros\"\n \t\t,\"?person kg:0357 kg:8755 .\", \">// is female\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q1724869 .\", \">// Jens Jørgen Thorsen\",\n    \"?work wdt:P50 wd:Q303384 .\", \">// Jørgen Leth\",\n    \"?work wdt:P50 wd:Q1885172 .\", \"// Ole John\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P58 wd:Q1687239 ;\",\n    \"     wdt:P58 wd:Q562108 ;\",\n    \"     wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:1424 ?screenwriter .\",\n    \"?work kg:4444 ?editor .\",\n    \"FILTER(?screenwriter = kg:1969 || ?screenwriter = kg:5002 || ?screenwriter = kg:4516) .\",\n    \"FILTER(?editor = kg:1969 || ?editor = kg:5002 || ?editor = kg:4516) .\",\n    \"} GROUP BY ?work\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q571 .\", \">// Instance of a literary work\",\n    \"?resource wdt:P50 wd:Q246891 ;\", \">// Author Jens Jørgen Thorsen\",\n    \"       wdt:P50 wd:Q188513 ;\", \">// Author Jørgen Leth\",\n    \"       wdt:P50 wd:Q723511 .\", \">// Author Ole John\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(CONTAINS(?label, 'Stop for Bud')) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P58/wdt:P1040 ?resource .\",\n    \"  VALUES ?resource { wd:Q35979475 wd:Q1687239 wd:Q562108 }\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6557 ?screenwriter .\",\n    \"?resource kg:4093 ?editor .\",\n    \"FILTER(?screenwriter = kg:3159 && ?screenwriter = kg:7577 && ?screenwriter = kg:5506) .\",\n    \"FILTER(?editor = kg:3159 || ?editor = kg:7577 || ?editor = kg:5506) .\",\n    \"?resource kg:2364 'Stop for Bud' .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// instance of film\",\n    \"wdt:P577 ?date ;\", \">// publication date (if available, to ensure it's the right film)\",\n    \"wdt:P162 wd:Q189017 ;\", \">// producer Ole John\",\n    \"wdt:P162 wd:Q3452771 ;\", \">// producer Jørgen Leth\",\n    \"wdt:P162 wd:Q1885451 .\", \">// producer Jens Jørgen Thorsen\",\n    \"?resource wdt:P2096 ?editors .\", \">// editors (if available)\",\n    \"{?editors wdt:P31 wd:Q172465 ;\", \">// instance of editor\",\n    \"wdt:P108 wd:Q189017 }.\", \">// employed by Ole John\",\n    \"OPTIONAL {?resource rdfs:label ?label . FILTER(LANG(?label) = 'en')}\",\n    \"FILTER(CONTAINS(?label, 'Stop for Bud')) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P162 ?producer .\",\n    \"  wd:Q20729551 wdt:P1040 ?editor .\",\n    \"  VALUES ?producer { wd:Q35979475 wd:Q1687239 wd:Q562108 } .\",\n    \"  VALUES ?editor { wd:Q35979475 wd:Q1687239 wd:Q562108 } .\",\n    \"  BIND(?producer AS ?resource) .\",\n    \"  BIND(?editor AS ?resource) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film kg:title 'Stop for Bud'^^xsd:string .\",\n    \"?film kg:editor kg:5139 .\",\n    \"?film kg:producer kg:1680 .\",\n    \"?film kg:productionCompany kg:8762 .\",\n    \"FILTER(?film = kg:9129) .\",\n    \"{?resource kg:name 'Ole John'^^xsd:string . ?resource kg:role ?film} UNION\",\n    \"{?resource kg:name 'Jørgen Leth'^^xsd:string . ?resource kg:role ?film} UNION\",\n    \"{?resource kg:name 'Jens Jørgen Thorsen'^^xsd:string . ?resource kg:role ?film}\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q24855670 ;\", \">// Instance of a TV series or similar work\",\n    \"?resource wdt:P178 wd:Q193831 ;\", \">// Produced by Sam Simon\",\n    \"?resource wdt:P178 wd:Q188542 ;\", \">// Produced by James L. Brooks\",\n    \"?resource wdt:P178 wd:Q60271 .\", \">// Produced by Matt Groening\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?producer { wd:Q365090 wd:Q95125 wd:Q43994 } .\",\n    \"  ?resource wdt:P162 ?producer .\",\n    \"  ?resource wdt:P1431 ?producer .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0948/kg:3178 kg:2672 .\",\n    \"?resource kg:0948/kg:3178 kg:7057 .\",\n    \"?resource kg:0948/kg:3178 kg:1133 .\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sisterWife WHERE {\",\n    \"?sisterWife wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?sisterWife wdt:P25 wd:Q40867 .\", \">// mother is Cleopatra III (Ptolemy IX's mother)\",\n    \"?sisterWife wdt:P22 wd:Q192381 .\", \">// father is Ptolemy VIII (Ptolemy IX's father)\",\n    \"?sisterWife wdt:P26 wd:Q40875 .\", \">// spouse of Ptolemy IX Lathyros\",\n    \"?sisterWife wdt:P33 wd:Q40875 .\", \">// sibling of Ptolemy IX Lathyros\",\n    \"?sisterWife wdt:P33 wd:Q192368 .\", \">// sibling of Ptolemy X Alexander I\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sisterWife WHERE {\",\n \t\t\"?sisterWife wdt:P26 wd:Q3340 .\", \">// spouse of Ptolemy IX Lathyros\",\n \t\t\"?sisterWife wdt:P3373 wd:Q3345 .\", \">// sibling to Ptolemy X Alexander I\",\n \t\t\"?sisterWife wdt:P21 wd:Q6581072 .\", \">// is female\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n \t\"query\": [\n \t\t\"?s\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?s kg:9782 kg:1945 .\",\n \t\t\"?s kg:4989 kg:1945 .\",\n \t\t\"?s kg:4989 kg:4993 .\",\n \t\t\"?s kg:1580 kg:9841 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q504278 .\", \">// Instance of television series\",\n    \"?resource wdt:P57 ?producer .\",\n    \"?resource wdt:P577 ?director .\",\n    \"?resource wdt:P58 ?writer .\",\n    \"FILTER(?producer = wd:Q1639204 || ?producer = wd:Q1885424) .\", \">// Vince Gilligan or George Mastras as producers\",\n    \"FILTER(?director = wd:Q1639204 || ?director = wd:Q1885424) .\", \">// Vince Gilligan or George Mastras as directors\",\n    \"FILTER(?writer = wd:Q1639204 || ?writer = wd:Q1885424) .\", \">// Vince Gilligan or George Mastras as writers\",\n    \"?resource wdt:P364 wd:Q7366 .\", \">// Language is English (for 'Breaking Bad')\",\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q4500 wdt:P162 wd:Q1079 .\",\n    \"  wd:Q4500 wdt:P57 wd:Q1079 .\",\n    \"  wd:Q4500 wdt:P58 wd:Q1079 .\",\n    \"  wd:Q5542223 wdt:P162 wd:Q1079 .\",\n    \"  wd:Q5542223 wdt:P57 wd:Q1079 .\",\n    \"  wd:Q5542223 wdt:P58 wd:Q1079 .\",\n    \"  BIND(wd:Q4500 AS ?resource) .\",\n    \"  BIND(wd:Q5542223 AS ?resource) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2221 kg:5986 .\",\n    \"?resource kg:6328 kg:5986 .\",\n    \"?resource kg:3866 kg:5986 .\",\n    \"{?resource kg:0075 kg:5986} UNION {?resource kg:2805 kg:5986}.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?resource wdt:P106 wd:Q2526258 .\", \">// Occupation is costume designer\",\n    \"{?resource wdt:P161 wd:Q7493115} UNION {?resource wdt:P161 wd:Q18515915} UNION {?resource wdt:P161 wd:Q20176155} .\", \">// Starred in 'Tom at the Farm', 'Heartbeats', or 'Laurence Anyways'\",\n    \"{?resource wdt:P453 wd:Q7493115} UNION {?resource wdt:P453 wd:Q18515915} UNION {?resource wdt:P453 wd:Q20176155} .\", \">// Edited 'Tom at the Farm', 'Heartbeats', or 'Laurence Anyways'\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P161 ?castMember .\",\n    \"?castMember wdt:P106 wd:Q1323191 .\",\n    \"?resource wdt:P1040 ?editor .\",\n    \"{?resource wdt:P31 wd:Q3530946} UNION {?resource wdt:P31 wd:Q2336453} UNION {?resource wdt:P31 wd:Q2615443}.\",\n    \"} GROUP BY ?resource\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2002 kg:0137 .\",\n    \"?resource kg:7277 ?film .\",\n    \"?resource kg:6947 ?film .\",\n    \"{?film kg:id kg:8202} UNION {?film kg:id kg:3899} UNION {?film kg:id kg:9083}\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P106 wd:Q2098457 .\", \">// person's occupation is film director (assuming they could be the editor)\",\n    \"?person wdt:P106 wd:Q33999 .\", \">// person's occupation is actor\",\n    \"{?film1 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; rdfs:label 'In the Park'@en.}\",\n    \"UNION\",\n    \"{?film2 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; rdfs:label 'Shanghaied'@en.}\",\n    \"UNION\",\n    \"{?film3 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; rdfs:label 'Modern Times'@en.}\",\n    \"UNION\",\n    \"{?film4 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; rdfs:label 'The Professor'@en.}\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 ;\",\n    \"wdt:P1040 wd:Q658822 ;\",\n    \"wdt:P1040 wd:Q921678 ;\",\n    \"wdt:P1040 wd:Q45602 ;\",\n    \"wdt:P1040 wd:Q2718259 ;\",\n    \"wdt:P161 wd:Q658822 ;\",\n    \"wdt:P161 wd:Q921678 ;\",\n    \"wdt:P161 wd:Q45602 ;\",\n    \"wdt:P161 wd:Q2718259 .\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:7833 kg:3190 .\",\n    \"?person kg:1634/kg:7833 ?film .\",\n    \"?person kg:1015/kg:7833 ?film .\",\n    \"{?film kg:7833 kg:3219} UNION {?film kg:7833 kg:2793} UNION {?film kg:7833 kg:7258} UNION {?film kg:7833 kg:7312}\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q1879546 wd:Q2033779 wd:Q1879547 wd:Q1879548 } .\",\n    \"  ?work wdt:P31/wdt:P279* wd:Q1143604 ;\", \">// Instance of or subclass of creative work\",\n    \"       wdt:P57 ?director .\", \">// Directed by\",\n    \"  OPTIONAL { ?work wdt:P1859 ?editor . }\", \">// Edited by (if available)\",\n    \"} GROUP BY ?work\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"  VALUES ?director { wd:Q1291210 wd:Q4207234 wd:Q16198328 wd:Q4679987 } .\",\n    \"  ?work wdt:P57 ?director .\",\n    \"  ?work wdt:P1040 ?director .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:6483 ?director .\",\n    \"?work kg:8022 ?editor .\",\n    \"{?director kg:1102 kg:1102} UNION {?director kg:9172 kg:9172} UNION {?director kg:8606 kg:8606} UNION {?director kg:4625 kg:4625}.\",\n    \"{?editor kg:1102 kg:1102} UNION {?editor kg:9172 kg:9172} UNION {?editor kg:8606 kg:8606} UNION {?editor kg:4625 kg:4625}.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// The film is an instance of a film\",\n    \"?film wdt:P1476 \\\"Four Rooms\\\"@en .\", \">// The title of the film is 'Four Rooms'\",\n    \"?film wdt:P57 ?director .\", \">// The director of the film\",\n    \"?film wdt:P58 ?writer .\", \">// The writer of the film\",\n    \"VALUES ?director { wd:Q1932460 wd:Q186673 wd:Q1932459 wd:Q1932458 }\", \">// Alexandre Rockwell, Quentin Tarantino, Allison Anders, Robert Rodriguez\",\n    \"?director wdt:P106 wd:Q2526255 .\", \">// The director is an occupation of film director\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"  wd:Q1137372 wdt:P57 ?director .\",\n    \"  FILTER(?director IN (wd:Q549956, wd:Q3772, wd:Q2838329, wd:Q47284))\",\n    \"} UNION {\",\n    \"  wd:Q1137372 wdt:P58 ?screenwriter .\",\n    \"  FILTER(?screenwriter IN (wd:Q549956, wd:Q3772, wd:Q2838329, wd:Q47284))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"?director kg:5595/kg:0937 kg:9620 .\",\n    \"VALUES ?director { kg:0913 kg:8047 kg:2759 kg:2202 }\",\n    \"} ORDER BY ?director\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q1875946 wd:Q203397 wd:Q18075777 wd:Q15361 }\", \">// Susie Essman, Malcolm McDowell, Clark Spencer, Miley Cyrus\",\n    \"  wd:Q6178457 wdt:P57 ?person .\", \">// Super Rhino (assuming Q6178457 is the Wikidata ID for Super Rhino)\",\n    \"  wd:Q6178457 wdt:P57 ?resource .\",\n    \"} GROUP BY ?resource\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q40220 wd:Q117392 wd:Q5127380 wd:Q4235 }\",\n    \"  wd:Q3977597 wdt:P57|wdt:P162 ?person .\",\n    \"  BIND(?person AS ?resource)\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1096 ?director .\",\n    \"?resource kg:6682 ?producer .\",\n    \"?resource kg:9028 kg:Super_Rhino .\",\n    \"{?director kg:9356 kg:Susie_Essman .}\",\n    \"UNION\",\n    \"{?director kg:5093 kg:Malcolm_McDowell .}\",\n    \"UNION\",\n    \"{?producer kg:5307 kg:Clark_Spencer .}\",\n    \"UNION\",\n    \"{?producer kg:2703 kg:Miley_Cyrus .}\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?director) = 2 && COUNT(DISTINCT ?producer) = 2)\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q2638.\",\n    \"?work wdt:P1431 wd:Q2638.\",\n    \"?work wdt:P162 wd:Q2638.\",\n    \"?work wdt:P2860 wd:Q2638.\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?work WHERE {\",\n \t\t\"?work wdt:P58 wd:Q38222 .\",\n \t\t\"?work wdt:P1040 wd:Q38222 .\",\n \t\t\"?work wdt:P1431 wd:Q38222 .\",\n \t\t\"?work wdt:P162 wd:Q38222 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:9266 kg:0613 .\", \">// work was written by George Lucas\"\n    ,\"?work kg:3493 kg:0613 .\", \">// work was edited by George Lucas\"\n    ,\"?work kg:5643 kg:0613 .\", \">// work was executive produced by George Lucas\"\n    ,\"?work kg:8870 kg:0613 .\", \">// work was produced by George Lucas\"\n    ,\"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P361 wd:Q2057849 ;\", \">// Every Man for Himself (Q2057849)\",\n    \"wdt:P361 wd:Q163701 ;\", \">// Passion (Q163701)\",\n    \"wdt:P361 wd:Q187951 .\", \">// Notre Musique (Q187951)\",\n    \"?person wdt:P3734 wd:Q200111 .\", \">// Worked at Cahiers du cinéma (Q200111)\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q972787 .\",\n    \"?resource wdt:P58 wd:Q672061 .\",\n    \"?resource wdt:P58 wd:Q3141131 .\",\n    \"?resource wdt:P1040 wd:Q972787 .\",\n    \"?resource wdt:P1040 wd:Q672061 .\",\n    \"?resource wdt:P1040 wd:Q3141131 .\",\n    \"?resource wdt:P108 wd:Q909176 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3353 kg:2653 .\",\n    \"?resource kg:5303 kg:2653 .\",\n    \"?resource kg:3353 kg:7573 .\",\n    \"?resource kg:5303 kg:7573 .\",\n    \"?resource kg:3353 kg:2627 .\",\n    \"?resource kg:5303 kg:2627 .\",\n    \"?resource kg:2120 kg:9335 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P1478 \\\"Laws of Attraction\\\"@en .\", \">// Film title in English\",\n    \"{?resource wdt:P725 wd:Q609115 ;\", \">// Bob Yari as executive producer\",\n    \"wdt:P725 wd:Q38347 ;\", \">// Pierce Brosnan as producer or executive producer\",\n    \"wdt:P725 wd:Q187541 ;\", \">// Toby Emmerich as producer or executive producer\",\n    \"wdt:P725 wd:Q609116 .}\", \">// Elie Samaha as producer or executive producer\",\n    \"?resource wdt:P344 ?producer .\", \">// Produced by\",\n    \"?resource wdt:P162 ?executiveProducer .\", \">// Executive produced by\",\n    \"FILTER(?producer = wd:Q38347 || ?producer = wd:Q187541 || ?producer = wd:Q609116) .\",\n    \"FILTER(?executiveProducer = wd:Q609115) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q819109 wdt:P1431 ?execProducer .\",\n    \"  FILTER(?execProducer IN (wd:Q1969128, wd:Q81520, wd:Q381545, wd:Q1295611))\",\n    \"  wd:Q819109 wdt:P162 ?producer .\",\n    \"  FILTER(?producer IN (wd:Q1969128, wd:Q81520, wd:Q381545, wd:Q1295611))\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0533/kg:9767 ?elieSamaha .\",\n    \"?resource kg:0533/kg:2187 ?bobYari .\",\n    \"?resource kg:5056/kg:1278 ?pierceBrosnan .\",\n    \"?resource kg:5056/kg:7661 ?tobyEmmerich .\",\n    \"?resource kg:0551 ?productionCompany .\",\n    \"?resource kg:5622 ?lawsOfAttraction .\",\n    \"} \"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 wd:Q9608 .\", \">// Directed by Akira Kurosawa\",\n    \"OPTIONAL {?resource wdt:P1431 wd:Q9608 .} .\", \">// Written by Akira Kurosawa\",\n    \"OPTIONAL {?resource wdt:P1589 wd:Q9608 .} .\", \">// Edited by Akira Kurosawa\",\n    \"OPTIONAL {?resource wdt:P1436 wd:Q9608 .} .\", \">// Produced by Akira Kurosawa\",\n    \"OPTIONAL {?resource wdt:P750 wd:Q9608 .} .\", \">// Executive produced by Akira Kurosawa\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(CONTAINS(?label, 'Kagemusha')) .\",\n    \"} ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q854990 wdt:P58 wd:Q8006 .\",\n    \"wd:Q854990 wdt:P1040 wd:Q8006 .\",\n    \"wd:Q854990 wdt:P1431 wd:Q8006 .\",\n    \"wd:Q854990 wdt:P162 wd:Q8006 .\",\n    \"} ORDER BY ?resource\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6880 kg:6049 .\",\n    \"?resource kg:3149 kg:6049 .\",\n    \"?resource kg:0779 kg:6049 .\",\n    \"?resource kg:3712 kg:6049 .\",\n    \"?resource kg:1415 ?film .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P31 wd:Q2485679 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\",\n    \"wdt:P58 ?screenwriter ;\",\n    \"wdt:P1040 ?editor .\",\n    \"?director rdfs:label 'Jørgen Leth'@en .\",\n    \"?screenwriter rdfs:label 'Jørgen Leth'@en .\",\n    \"?editor rdfs:label 'Jørgen Leth'@en .\",\n    \"OPTIONAL {?project wdt:P57 ?coDirector ;\",\n    \"wdt:P58 ?coScreenwriter ;\",\n    \"wdt:P1040 ?coEditor .}\",\n    \"?coDirector rdfs:label 'Jens Jørgen Thorsen'@en .\",\n    \"?coScreenwriter rdfs:label 'Jens Jørgen Thorsen'@en .\",\n    \"?coEditor rdfs:label 'Jens Jørgen Thorsen'@en .\",\n    \"OPTIONAL {?project wdt:P57 ?thirdDirector ;\",\n    \"wdt:P58 ?thirdScreenwriter ;\",\n    \"wdt:P1040 ?thirdEditor .}\",\n    \"?thirdDirector rdfs:label 'Ole John'@en .\",\n    \"?thirdScreenwriter rdfs:label 'Ole John'@en .\",\n    \"?thirdEditor rdfs:label 'Ole John'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P57 wd:Q562108 .\",\n    \"?project wdt:P57 wd:Q1687239 .\",\n    \"?project wdt:P57 wd:Q35979475 .\",\n    \"?project wdt:P58 wd:Q562108 .\",\n    \"?project wdt:P58 wd:Q1687239 .\",\n    \"?project wdt:P58 wd:Q35979475 .\",\n    \"?project wdt:P1040 wd:Q562108 .\",\n    \"?project wdt:P1040 wd:Q1687239 .\",\n    \"?project wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project kg:0289/kg:4637/kg:7265 ?creator .\",\n    \"?creator kg:4530|kg:3287|kg:0365 .\",\n    \"} GROUP BY ?project HAVING (COUNT(DISTINCT ?creator) = 3)\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P31 wd:Q2095.\",\n    \"?work wdt:P57 wd:Q488651; wdt:P58 wd:Q488651; wdt:P2541 wd:Q488651;\",\n    \"?work wdt:P57 wd:Q309113; wdt:P58 wd:Q309113; wdt:P2541 wd:Q309113;\",\n    \"?work wdt:P57 wd:Q161658; wdt:P58 wd:Q161658; wdt:P2541 wd:Q161658.\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P57 wd:Q35979475 .\",\n    \"?work wdt:P57 wd:Q562108 .\",\n    \"?work wdt:P57 wd:Q1687239 .\",\n    \"?work wdt:P58 wd:Q35979475 .\",\n    \"?work wdt:P58 wd:Q562108 .\",\n    \"?work wdt:P58 wd:Q1687239 .\",\n    \"?work wdt:P1040 wd:Q35979475 .\",\n    \"?work wdt:P1040 wd:Q562108 .\",\n    \"?work wdt:P1040 wd:Q1687239 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work kg:9712 kg:5238 .\",\n    \"?work kg:9712 kg:2197 .\",\n    \"?work kg:9712 kg:7889 .\",\n    \"?work kg:2466 kg:5238 .\",\n    \"?work kg:2466 kg:2197 .\",\n    \"?work kg:2466 kg:7889 .\",\n    \"?work kg:9552 kg:5238 .\",\n    \"?work kg:9552 kg:2197 .\",\n    \"?work kg:9552 kg:7889 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P189 ?cinematographer .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P189 ?cinematographer .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P189 ?cinematographer .\",\n    \"?film4 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P189 ?cinematographer .\",\n    \"?film1 rdfs:label 'The Whip and the Body'@en .\",\n    \"?film2 rdfs:label 'Hatchet for the Honeymoon'@en .\",\n    \"?film3 rdfs:label 'Danger: Diabolik'@en .\",\n    \"?film4 rdfs:label 'Black Sunday'@en .\",\n    \"?person wdt:P106 wd:Q2505258 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q600762 .\",\n    \"?person wdt:P57 wd:Q283699 .\",\n    \"?person wdt:P57 wd:Q629819 .\",\n    \"?person wdt:P57 wd:Q1216566 .\",\n    \"?person wdt:P106 wd:Q3282637 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:2265 ?film1 .\",\n    \"?film1 kg:7705 true .\",\n    \"?film1 kg:2063 true .\",\n    \"?film1 kg:7198 true .\",\n    \"?film1 kg:7085 true .\",\n    \"?person kg:3120 ?role .\",\n    \"?person kg:0627 ?prodRole .\",\n    \"FILTER(?role = true && ?prodRole = true) }\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P57 ?person .\",\n    \"?film1 wdt:P161 ?person ; wdt:P344 ?person .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P57 ?person .\",\n    \"?film2 wdt:P161 ?person ; wdt:P344 ?person .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P57 ?person .\",\n    \"?film3 wdt:P161 ?person ; wdt:P344 ?person .\",\n    \"?film4 wdt:P31 wd:Q11424 ; wdt:P57 ?person .\",\n    \"?film4 wdt:P161 ?person ; wdt:P344 ?person .\",\n    \"VALUES (?film1 ?film2 ?film3 ?film4) { (wd:Q289077 wd:Q15639257 wd:Q2491499 wd:Q2006175) }\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?person WHERE {\",\n    \"?film wdt:P57 ?person .\",\n    \"?film wdt:P344 ?person .\",\n    \"?person wdt:P106 wd:Q33999 .\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424 .\", \">// Ensure it's a film\",\n    \"VALUES ?film { wd:Q3485595 wd:Q862058 wd:Q3016313 wd:Q1473406 }\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:5713 ?film .\",\n    \"?person kg:5366 ?film .\",\n    \"?person kg:9234 ?film .\",\n    \"{?film kg:0113 []} UNION {?film kg:9038 []} UNION {?film kg:9628 []} UNION {?film kg:1977 []}.\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q187963 ;\", \">// written by David Zucker\",\n    \"?work wdt:P50 wd:Q245171 ;\", \">// written by Jim Abrahams\",\n    \"?work wdt:P50 wd:Q245172 .\", \">// written by Jerry Zucker\",\n    \"?work wdt:P344 wd:Q187963 ;\", \">// executive produced by David Zucker\",\n    \"?work wdt:P344 wd:Q245171 ;\", \">// executive produced by Jim Abrahams\",\n    \"?work wdt:P344 wd:Q245172 .\", \">// executive produced by Jerry Zucker\",\n    \"?work wdt:P57 wd:Q187963 ;\", \">// directed by David Zucker\",\n    \"?work wdt:P57 wd:Q245171 ;\", \">// directed by Jim Abrahams\",\n    \"?work wdt:P57 wd:Q245172 .\", \">// directed by Jerry Zucker\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?film wdt:P57 ?director .\", \">// Directed by\",\n    \"?film wdt:P1040 ?editor .\", \">// Edited by\",\n    \"?film wdt:P58 ?screenwriter .\", \">// Written by\",\n    \"{?director rdfs:label 'Ole John'@en} UNION {?director rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?director rdfs:label 'Jørgen Leth'@en}.\",\n    \"{?editor rdfs:label 'Ole John'@en} UNION {?editor rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?editor rdfs:label 'Jørgen Leth'@en}.\",\n    \"{?screenwriter rdfs:label 'Ole John'@en} UNION {?screenwriter rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?screenwriter rdfs:label 'Jørgen Leth'@en}.\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P57 wd:Q35979475 ;\",\n    \"   wdt:P57 wd:Q1687239 ;\",\n    \"   wdt:P57 wd:Q562108 ;\",\n    \"   wdt:P58 wd:Q35979475 ;\",\n    \"   wdt:P58 wd:Q1687239 ;\",\n    \"   wdt:P58 wd:Q562108 ;\",\n    \"   wdt:P1040 wd:Q35979475 ;\",\n    \"   wdt:P1040 wd:Q1687239 ;\",\n    \"   wdt:P1040 wd:Q562108 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:0677/kg:7862|kg:3772|kg:7339 .\",\n    \"?film kg:8507/kg:7862|kg:3772|kg:7339 .\",\n    \"?film kg:4848/kg:7862|kg:3772|kg:7339 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P164 ?writer .\", \">// Written by\",\n    \"{?director rdfs:label 'Eli Roth'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Edgar Wright'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Rob Zombie'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Quentin Tarantino'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Robert Rodriguez'@en.}\",\n    \"{?writer rdfs:label 'Eli Roth'@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'Edgar Wright'@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'Rob Zombie'@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'Quentin Tarantino'@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'Robert Rodriguez'@en.}\",\n    \"?resource rdfs:label ?label.\",\n    \"FILTER(CONTAINS(?label, 'Grindhouse') && LANG(?label) = 'en').\",\n    \"} GROUP BY ?resource HAVING(COUNT(DISTINCT ?director) > 1 AND COUNT(DISTINCT ?writer) > 1)\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q679023 wdt:P57|wdt:P58 ?resource .\",\n    \"  wd:Q522057 wdt:P57|wdt:P58 ?resource .\",\n    \"  wd:Q358714 wdt:P57|wdt:P58 ?resource .\",\n    \"  wd:Q298255 wdt:P57|wdt:P58 ?resource .\",\n    \"  wd:Q3772 wdt:P57|wdt:P58 ?resource .\",\n    \"  FILTER(?resource = wd:Q679023 && ?resource = wd:Q522057 && ?resource = wd:Q358714 && ?resource = wd:Q298255 && ?resource = wd:Q3772)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2115 ?grindhouse .\",\n    \"?resource kg:0123 ?robertRodriguez .\",\n    \"?resource kg:0123 ?eliRoth .\",\n    \"?resource kg:0123 ?edgarWright .\",\n    \"?resource kg:0123 ?robZombie .\",\n    \"?resource kg:0123 ?quentinTarantino .\",\n    \"?resource kg:2062 ?robertRodriguez .\",\n    \"?resource kg:2062 ?eliRoth .\",\n    \"?resource kg:2062 ?edgarWright .\",\n    \"?resource kg:2062 ?robZombie .\",\n    \"?resource kg:2062 ?quentinTarantino .\",\n    \"FILTER (?grindhouse = kg:2115) .\",\n    \"FILTER (?robertRodriguez = kg:2406) .\",\n    \"FILTER (?eliRoth = kg:1454) .\",\n    \"FILTER (?edgarWright = kg:8328) .\",\n    \"FILTER (?robZombie = kg:0795) .\",\n    \"FILTER (?quentinTarantino = kg:9736) .\",\n    \"} ORDER BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"?film wd:P31/wd:P279* wd:Q11424 .\",\n    \"?film wdt:P58|wdt:P57|wdt:P162 ?filmProducer .\",\n    \"VALUES ?film { wd:Q107497 wd:Q163757 wd:Q163758 wd:Q163759 }\",\n    \"} GROUP BY ?filmProducer HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?producer WHERE {\",\n    \"?film wdt:P58 ?producer .\",\n    \"?film wdt:P1040 ?producer .\",\n    \"?producer wdt:P106 wd:Q3282637 .\",\n    \"{?film wdt:P31 wd:Q567519} UNION {?film wdt:P31 wd:Q686125} UNION {?film wdt:P31 wd:Q327427} UNION {?film wdt:P31 wd:Q2789885}.\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1121 kg:9570 .\",\n    \"?resource kg:6788 kg:1392 .\",\n    \"?resource kg:6788 kg:5270 .\",\n    \"?resource kg:6788 kg:5693 .\",\n    \"?resource kg:6788 kg:3942 .\",\n    \"?resource kg:3259 kg:1392 .\",\n    \"?resource kg:3259 kg:5270 .\",\n    \"?resource kg:3259 kg:5693 .\",\n    \"?resource kg:3259 kg:3942 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P31 wd:Q2485679 ;\", \">// Instance of a television series or film\",\n    \"wdt:P57 ?director ;\",\n    \"wdt:P50 ?writer .\",\n    \"?director rdfs:label ?directorLabel .\",\n    \"?writer rdfs:label ?writerLabel .\",\n    \"FILTER(?directorLabel IN ('Thomas Schnauz', 'Peter Gould', 'George Mastras', 'Sam Catlin', 'Vince Gilligan')) .\",\n    \"FILTER(?writerLabel IN ('Thomas Schnauz', 'Peter Gould', 'George Mastras', 'Sam Catlin', 'Vince Gilligan')) .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' }\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P57/wdt:P58 wd:Q15042700 .\",\n    \"?project wdt:P57/wdt:P58 wd:Q7174311 .\",\n    \"?project wdt:P57/wdt:P58 wd:Q5542223 .\",\n    \"?project wdt:P57/wdt:P58 wd:Q7407299 .\",\n    \"?project wdt:P57/wdt:P58 wd:Q4500 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project kg:0286 ?director .\",\n    \"?project kg:5267 ?screenwriter .\",\n    \"FILTER(?director IN (kg:4558, kg:6899, kg:0982, kg:2196, kg:6928)) .\",\n    \"FILTER(?screenwriter IN (kg:4558, kg:6899, kg:0982, kg:2196, kg:6928)) .\",\n    \"} GROUP BY ?project\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q209628 .\", \">// Instance of a film or TV production\",\n    \"?resource wdt:P57 ?director .\",\n    \"?resource wdt:P58 ?writer .\",\n    \"?resource wdt:P1040 ?editor .\",\n    \"VALUES (?director ?writer ?editor) { (wd:Q263974 wd:Q263974 wd:Q263974) }\", \">// Ole John, Jens Jørgen Thorsen, and Jørgen Leth as director, writer, and editor\",\n    \"?resource wdt:P161/wd:P580 ?castMember .\", \">// Cast member in the production\",\n    \"VALUES ?castMember { wd:Q263974 wd:Q263975 wd:Q263976 }\" ,\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 ?director .\",\n    \"?resource wdt:P58 ?screenwriter .\",\n    \"?resource wdt:P1040 ?editor .\",\n    \"{?resource wdt:P161 wd:Q35979475} UNION {?resource wdt:P161 wd:Q1687239} UNION {?resource wdt:P161 wd:Q562108}.\",\n    \"FILTER(?director = ?screenwriter && ?director = ?editor).\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t "}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6229 ?director .\",\n    \"?resource kg:4344 ?screenwriter .\",\n    \"?resource kg:0618 ?filmEditor .\",\n    \"?resource ?p1 kg:3628 .\",\n    \"?resource ?p2 kg:7861 .\",\n    \"?resource ?p3 kg:8050 .\",\n    \"FILTER (?director = ?screenwriter && ?screenwriter = ?filmEditor)\",\n    \"} ORDER BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q2505487 .\", \">// film editor\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"{?resource wdp:P1431 wd:Q9589 } UNION {?resource wdp:P1431 wd:Q206117 } UNION {?resource wdp:P1431 wd:Q189186 } UNION {?resource wdp:P1431 wd:Q189187 }. \", \">// executive producer for the specified Star Wars films\",\n    \"{?resource wdp:P58 wd:Q9589 } UNION {?resource wdp:P58 wd:Q206117 } UNION {?resource wdp:P58 wd:Q189186 } UNION {?resource wdp:P58 wd:Q189187 }. \", \">// writer for the specified Star Wars films\",\n    \"FILTER NOT EXISTS { ?resource wdp:P58 wd:Q24307151 . }\", \">// exclude 'Star Whores'\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 ?film .\",\n    \"?resource wdt:P1431 ?film .\",\n    \"?film wdt:P31 wd:Q7042855 .\",\n    \"{?film wdt:P629 wd:Q17738} UNION {?film wdt:P629 wd:Q165713} UNION {?film wdt:P629 wd:Q181803} UNION {?film wdt:P629 wd:Q3968346}.\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}\n \t\t\t\t\t\t\t"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7901 kg:9486 .\",\n    \"?resource kg:7901 kg:8729 .\",\n    \"?resource kg:7901 kg:9870 .\",\n    \"{?resource kg:9870 kg:4212 .}\",\n    \"UNION\",\n    \"{?resource kg:9870 kg:2824 .}\",\n    \"UNION\",\n    \"{?resource kg:9870 kg:7215 .}\",\n    \"UNION\",\n    \"{?resource kg:9870 kg:3339 .}\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\",\n    \"?resource wdt:P86 ?writer .\",\n    \"?resource wdt:P2554 ?editor .\",\n    \"FILTER(?director = wd:Q309081 && ?writer = wd:Q309081 && ?editor = wd:Q309081) .\", \">// Ole John (Q309081)\",\n    \"FILTER(?resource rdfs:label 'Stop for Bud'@en) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P57 ?director .\",\n    \"  wd:Q20729551 wdt:P1040 ?editor .\",\n    \"  wd:Q20729551 wdt:P58 ?screenwriter .\",\n    \"  VALUES (?director ?editor ?screenwriter) { (wd:Q35979475 wd:Q1687239 wd:Q562108) }\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1733 kg:7483 .\",\n    \"?resource kg:1684 kg:7483 .\",\n    \"?resource kg:8356 kg:7483 .\",\n    \"{?resource kg:2342 ?role .} UNION {?resource kg:1653 ?role .} UNION {?resource kg:6976 ?role .}\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1431 wd:Q209657 .\", \">// Executive produced 'Star Wars: Episode I – The Phantom Menace'\",\n    \"?person wdt:P1431 wd:Q181134 .\", \">// Executive produced 'The Land Before Time'\",\n    \"?person wdt:P1433 ?work .\",\n    \"?work wdt:P50 ?person .\", \">// Writer of the work\",\n    \"?work wdt:P3762 ?person .\", \">// Cinematographer of the work\",\n    \"{?work rdfs:label 'Anyone Lived in a Pretty How Town'@en} UNION\",\n    \"{?work rdfs:label '1:42.08'@en} UNION\",\n    \"{?work rdfs:label 'Look at Life'@en}\",\n    \"}\"\n  ]\n}\n"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P1431 wd:Q165713 .\",\n \t\t\"?person wdt:P1431 wd:Q192403 .\",\n \t\t\"?person wdt:P58 wd:Q613974 .\",\n \t\t\"?person wdt:P344 wd:Q613974 .\",\n \t\t\"?person wdt:P58 wd:Q208910 .\",\n \t\t\"?person wdt:P344 wd:Q208910 .\",\n \t\t\"?person wdt:P58 wd:Q1869678 .\",\n \t\t\"?person wdt:P344 wd:Q1869678 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8695 kg:3675 .\",\n    \"?resource kg:8695 kg:4438 .\",\n    \"?resource kg:3076 kg:7257 .\",\n    \"?resource kg:4014 kg:7257 .\",\n    \"?resource kg:3076 kg:4002 .\",\n    \"?resource kg:4014 kg:4002 .\",\n    \"?resource kg:3076 kg:2498 .\",\n    \"?resource kg:4014 kg:2498 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P1478 'Uzak' ;\", \">// Title of the film Uzak\",\n    \"wdt:P57 ?person .\", \">// Director of Uzak\",\n    \"?film2 wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P1478 'Clouds of May' ;\", \">// Title of the film Clouds of May\",\n    \"wdt:P57 ?person .\", \">// Director of Clouds of May\",\n    \"?film1 wdt:P58 ?person .\", \">// Writer of Uzak\",\n    \"?film2 wdt:P58 ?person .\", \">// Writer of Clouds of May\",\n    \"?film1 wdt:P5076 ?person .\", \">// Editor of Uzak\",\n    \"?film2 wdt:P5076 ?person .\", \">// Editor of Clouds of May\",\n    \"?film1 wdt:P1431 ?person .\", \">// Executive producer of Uzak\",\n    \"?film2 wdt:P1431 ?person .\", \">// Executive producer of Clouds of May\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q1361018 .\",\n    \"?person wdt:P58 wd:Q1361018 .\",\n    \"?person wdt:P1040 wd:Q1361018 .\",\n    \"?person wdt:P1431 wd:Q1361018 .\",\n    \"?person wdt:P57 wd:Q2086445 .\",\n    \"?person wdt:P58 wd:Q2086445 .\",\n    \"?person wdt:P1040 wd:Q2086445 .\",\n    \"?person wdt:P1431 wd:Q2086445 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4746/kg:8620 ?film .\",\n    \"?resource kg:3862/kg:8620 ?film .\",\n    \"?resource kg:2045/kg:8620 ?film .\",\n    \"?resource kg:1324/kg:8620 ?film .\",\n    \"{?film kg:8748 'Clouds of May'@en} UNION {?film kg:1533 'Uzak'@en}.\",\n    \"} GROUP BY ?resource\"\n  ]\n}\n"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// instance of film\",\n    \"?resource wdt:P57 ?director .\",\n    \"?resource wdt:P58 ?writer .\",\n    \"?resource wdt:P725 ?executiveProducer .\",\n    \"{?director rdfs:label 'Jim Abrahams'@en .}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'Jerry Zucker'@en .}\",\n    \"UNION\",\n    \"{?writer rdfs:label 'David Zucker'@en .}\",\n    \"UNION\",\n    \"{?executiveProducer rdfs:label 'Jim Abrahams'@en .}\",\n    \"UNION\",\n    \"{?executiveProducer rdfs:label 'Jerry Zucker'@en .}\",\n    \"UNION\",\n    \"{?executiveProducer rdfs:label 'David Zucker'@en .}\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(?label = 'Airplane!'@en)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// directed by\",\n    \"?resource wdt:P1431 ?writer .\", \">// written by\",\n    \"?resource wdt:P162 ?producer .\", \">// produced by\",\n    \"{\",\n    \"  wd:Q189044 wdt:P57 ?director .\", \">// Jim Abrahams directed\",\n    \"  wd:Q189044 wdt:P1431 ?writer .\", \">// Jim Abrahams wrote\",\n    \"  wd:Q189044 wdt:P162 ?producer .\", \">// Jim Abrahams produced\",\n    \"} UNION {\",\n    \"  wd:Q757777 wdt:P57 ?director .\", \">// David Zucker directed\",\n    \"  wd:Q757777 wdt:P1431 ?writer .\", \">// David Zucker wrote\",\n    \"  wd:Q757777 wdt:P162 ?producer .\", \">// David Zucker produced\",\n    \"} UNION {\",\n    \"  wd:Q757780 wdt:P57 ?director .\", \">// Jerry Zucker directed\",\n    \"  wd:Q757780 wdt:P1431 ?writer .\", \">// Jerry Zucker wrote\",\n    \"  wd:Q757780 wdt:P162 ?producer .\", \">// Jerry Zucker produced\",\n    \"} FILTER(?resource = wd:Q193155) .\", \">// Airplane! (film)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P86 wd:Q204971 ;\", \">// Writer of 'Twin Peaks'\"\n    ,\"?person wdt:P106 wd:Q2526255 ;\", \">// Director of 'Twin Peaks: Fire Walk with Me'\",\n    \"?person wdt:P1431 wd:Q204971 ;\", \">// Executive producer of 'Twin Peaks'\",\n    \"?person wdt:P1431 wd:Q7681571 ;\", \">// Executive producer of 'My Son, My Son, What Have Ye Done?'\",\n    \"?person wdt:P1431 wd:Q2901541 .\", \">// Executive producer of 'Surveillance'\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q1140578 .\",\n    \"?person wdt:P58 wd:Q1140578 .\",\n    \"?person wdt:P1431 wd:Q1140578 .\",\n    \"?person wdt:P1431 wd:Q2085 .\",\n    \"?person wdt:P1431 wd:Q1511905 .\",\n    \"?person wdt:P1431 wd:Q583406 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:8250/kg:3480/kg:9095 kg:8673 .\",\n    \"?person kg:9095 kg:3424 .\",\n    \"?person kg:9095 kg:6685 .\",\n    \"?person kg:9095 kg:8911 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// instance of film\",\n    \"wdt:P57 ?director ;\", \">// directed by\",\n    \"wdt:P58 ?writer .\", \">// written by\",\n    \"{?director rdfs:label 'Vilgot Sjöman'@en} UNION\",\n    \"{?director rdfs:label 'Hans Alfredson'@en} UNION\",\n    \"{?director rdfs:label 'Jörn Donner'@en} UNION\",\n    \"{?director rdfs:label 'Gustaf Molander'@en} UNION\",\n    \"{?director rdfs:label 'Ingmar Bergman'@en} .\",\n    \"?film wdt:P58 ?writer .\",\n    \"FILTER(?writer = wd:Q160492 || ?writer = wd:Q37275 || ?writer = wd:Q188641 || ?writer = wd:Q193887 || ?writer = wd:Q193888) .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// film instance of film\",\n    \"wdt:P57 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546 ;\", \">// directors\",\n    \"wdt:P58 wd:Q116760, wd:Q1033656, wd:Q982339, wd:Q1365463, wd:Q7546 .\", \">// screenwriters\",\n    \"} GROUP BY ?film\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:0018 kg:8677 .\",\n    \"?film kg:2253 kg:8473 .\",\n    \"?film kg:2253 kg:6967 .\",\n    \"?film kg:2253 kg:6905 .\",\n    \"?film kg:2253 kg:9987 .\",\n    \"?film kg:2253 kg:3385 .\",\n    \"?film kg:8834 kg:8473 .\",\n    \"?film kg:8834 kg:6967 .\",\n    \"?film kg:8834 kg:6905 .\",\n    \"?film kg:8834 kg:9987 .\",\n    \"?film kg:8834 kg:3385 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P86 wd:Q157423 .\", \">// Composer of Spy Kids 3-D: Game Over\",\n    \"?composer wdt:P106 wd:Q2526255 ;\", \">// Occupation as a film director\",\n    \"wdt:P106 wd:Q33999 ;\", \">// Occupation as an actor\",\n    \"wdt:P106 wd:Q247858 .\", \">// Occupation as a cinematographer\",\n    \"?composer wdt:P57 wd:Q208123 ;\", \">// Director of Sin City\",\n    \"wdt:P57 wd:Q2985312 ;\", \">// Director of Sin City: A Dame to Kill For\",\n    \"wdt:P57 wd:Q46725 .\", \">// Director of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"?composer wdt:P1064 wd:Q208123 ;\", \">// Cinematographer of Sin City\",\n    \"wdt:P1064 wd:Q2985312 ;\", \">// Cinematographer of Sin City: A Dame to Kill For\",\n    \"wdt:P1064 wd:Q46725 .\", \">// Cinematographer of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"?composer wdt:P161 wd:Q208123 ;\", \">// Actor in Sin City\",\n    \"wdt:P161 wd:Q2985312 ;\", \">// Actor in Sin City: A Dame to Kill For\",\n    \"wdt:P161 wd:Q46725 .\", \">// Actor in The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P86 wd:Q550196 .\",\n    \"?composer wdt:P161 wd:Q192115 .\",\n    \"?composer wdt:P57 wd:Q192115 .\",\n    \"?composer wdt:P344 wd:Q192115 .\",\n    \"?composer wdt:P161 wd:Q1653396 .\",\n    \"?composer wdt:P57 wd:Q1653396 .\",\n    \"?composer wdt:P344 wd:Q1653396 .\",\n    \"?composer wdt:P161 wd:Q656357 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?composer kg:5687 kg:6804 .\",\n    \"?director kg:9737 kg:1669 .\",\n    \"?director kg:9737 kg:0943 .\",\n    \"?director kg:9737 kg:7667 .\",\n    \"?dop kg:7674 kg:1669 .\",\n    \"?dop kg:7674 kg:0943 .\",\n    \"?dop kg:7674 kg:7667 .\",\n    \"?composer ?resource .\",\n    \"?director ?resource .\",\n    \"?dop ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P1431 wd:Q2657890 ;\", \">// A Woman of Paris\",\n    \"?composer wdt:P1431 wd:Q255271 ;\", \">// Pay Day\",\n    \"?composer wdt:P1047 ?film .\", \">// editor of film\",\n    \"?film wdt:P161 ?composer .\", \">// star of film\",\n    \"{?film wdt:P31 wd:Q211952 } UNION {?film wdt:P31 wd:Q2485670 } UNION {?film wdt:P31 wd:Q21281155 }\", \">// Modern Times, City Lights, The Essanay-Chaplin Revue of 1916\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\"?composer wdt:P86 wd:Q470895 .\",\n \t\t\"?composer wdt:P86 wd:Q199039 .\",\n \t\t\"?composer wdt:P1040 wd:Q45602 .\",\n \t\t\"?composer wdt:P1040 wd:Q238211 .\",\n \t\t\"?composer wdt:P1040 wd:Q3986814 .\",\n \t\t\"?composer wdt:P161 wd:Q45602 .\",\n \t\t\"?composer wdt:P161 wd:Q238211 .\",\n \t\t\"?composer wdt:P161 wd:Q3986814 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?composer kg:3584 kg:9350 .\",\n    \"?composer kg:3584 kg:8907 .\",\n    \"?composer kg:1558 kg:2929 .\",\n    \"?composer kg:1558 kg:6990 .\",\n    \"?composer kg:1558 kg:3709 .\",\n    \"?composer kg:7599 kg:2929 .\",\n    \"?composer kg:7599 kg:6990 .\",\n    \"?composer kg:7599 kg:3709 .\",\n    \"BIND(?composer AS ?resource) }\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P1431 ?producer .\",\n    \"?movie wdt:P58 ?writer .\",\n    \"?movie wdt:P57 ?director .\",\n    \"{?producer rdfs:label 'Jim Abrahams'@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label 'Jerry Zucker'@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label 'David Zucker'@en.}\",\n    \"?writer rdfs:label ?writerLabel .\",\n    \"?director rdfs:label ?directorLabel .\",\n    \"FILTER(?writerLabel = 'Jim Abrahams' || ?writerLabel = 'Jerry Zucker' || ?writerLabel = 'David Zucker').\",\n    \"FILTER(?directorLabel = 'Jim Abrahams' || ?directorLabel = 'Jerry Zucker' || ?directorLabel = 'David Zucker').\",\n    \"} LIMIT 10\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project wdt:P31 wd:Q209647 .\", \">// Instance of a film or TV show\",\n    \"?project wdt:P57 ?director .\",\n    \"?project wdt:P58 ?writer .\",\n    \"?project wdt:P1040 ?editor .\",\n    \"VALUES (?director ?writer ?editor) {\",\n    \"(wd:Q2693844 wd:Q2693844 wd:Q2693844)\", \">// Yūdai Yamaguchi\",\n    \"(wd:Q17500619 wd:Q17500619 wd:Q17500619)\", \">// Ernesto Díaz Espinoza\",\n    \"(wd:Q2438707 wd:Q2438707 wd:Q2438707)\", \">// Adrián García Bogliano\",\n    \"(wd:Q5546191 wd:Q5546191 wd:Q5546191) .}\", \">// Yoshihiro Nishimura\",\n    \"?project wdt:P31 ?type .\"\n    ,\n    \"FILTER(?type = wd:Q209647 || ?type = wd:Q1143604) .\", \">// Filter for films or TV shows only\",\n    \"} GROUP BY ?project HAVING (COUNT(DISTINCT ?director) = 4 && COUNT(DISTINCT ?writer) = 4 && COUNT(DISTINCT ?editor) = 4)\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q4022902 ;\",\n    \"           wdt:P57 wd:Q5836844 ;\",\n    \"           wdt:P57 wd:Q4023328 ;\",\n    \"           wdt:P57 wd:Q5658534 ;\",\n    \"           wdt:P58 wd:Q4022902 ;\",\n    \"           wdt:P58 wd:Q5836844 ;\",\n    \"           wdt:P58 wd:Q4023328 ;\",\n    \"           wdt:P58 wd:Q5658534 ;\",\n    \"           wdt:P1040 wd:Q4022902 ;\",\n    \"           wdt:P1040 wd:Q5836844 ;\",\n    \"           wdt:P1040 wd:Q4023328 ;\",\n    \"           wdt:P1040 wd:Q5658534 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"SELECT ?project WHERE {\",\n    \"?project kg:5097 ?director .\",\n    \"?project kg:9452 ?screenwriter .\",\n    \"?project kg:7928 ?editor .\",\n    \"{?director kg:6145 .} UNION {?director kg:2932 .} UNION {?director kg:4231 .} UNION {?director kg:4009 .}\",\n    \"{?screenwriter kg:6145 .} UNION {?screenwriter kg:2932 .} UNION {?screenwriter kg:4231 .} UNION {?screenwriter kg:4009 .}\",\n    \"{?editor kg:6145 .} UNION {?editor kg:2932 .} UNION {?editor kg:4231 .} UNION {?editor kg:4009 .}\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmEditor WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q25054 .\", \">// Occupation is film editor\",\n    \"?film wdt:P57 ?filmEditor .\", \">// Directed by the same person (assuming director and film editor can be the same)\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Instance of a film\",\n    \"{?film wdt:P1478 'Pietà'@en} UNION {?film wdt:P1478 'Dream'@en} UNION {?film wdt:P1478 'Moebius'@en} .\", \">// Films with specific titles\",\n    \"?film wdt:P58 ?filmEditor .\", \">// Film editor of the film\",\n    \"OPTIONAL {?film wdt:P1436 ?filmEditor .} .\", \">// Writer of the film (if applicable)\",\n    \"OPTIONAL {?film wdt:P725 ?filmEditor .} .\", \">// Executive producer of the film (if applicable)\",\n    \"FILTER(?filmEditor = wd:Q12345) .\" ,\"\\n}\", \">// Replace Q12345 with the actual Wikidata ID of the person if known\"\n  ]\n}\n"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q7042855 ;\",\n    \"wdt:P58 wd:Q7042855 ;\",\n    \"wdt:P1431 wd:Q7042855 .\",\n    \"{ ?resource wdt:P31 wd:Q13471372 } UNION { ?resource wdt:P31 wd:Q484679 } UNION { ?resource wdt:P31 wd:Q483197 }.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1433/kg:6055 ?filmEditor .\",\n    \"?resource kg:1433/kg:6357 ?writer .\",\n    \"?resource kg:1433/kg:9419 ?execProducer .\",\n    \"FILTER(?filmEditor = kg:3570 && ?writer = kg:6357 && ?execProducer = kg:9419) .\",\n    \"{?resource kg:8287 kg:2395} UNION {?resource kg:8287 kg:4257} UNION {?resource kg:8287 kg:8287} .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P57 ?producer ; wdt:P10658 ?producer ; wdt:P58 ?producer .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P57 ?producer ; wdt:P10658 ?producer ; wdt:P58 ?producer .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P57 ?producer ; wdt:P10658 ?producer ; wdt:P58 ?producer .\",\n    \"?film1 rdfs:label 'Fate'@en .\",\n    \"?film2 rdfs:label 'The Confession'@en .\",\n    \"?film3 rdfs:label 'The Waiting Room'@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?producer WHERE {\",\n    \"?producer wdt:P106 wd:Q3282637 .\",\n    \"?film1 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n    \"?film2 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n    \"?film3 wdt:P58 ?producer ; wdt:P1431 ?producer ; wdt:P1040 ?producer .\",\n    \"VALUES (?film1 ?film2 ?film3) { (wd:Q5437360 wd:Q12813010 wd:Q6084069) }\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1754 kg:0440 .\",\n    \"?resource kg:8750 ?movie1 .\",\n    \"?resource kg:6372 ?movie1 .\",\n    \"?resource kg:0075 ?movie1 .\",\n    \"?resource kg:8750 ?movie2 .\",\n    \"?resource kg:6372 ?movie2 .\",\n    \"?resource kg:0075 ?movie2 .\",\n    \"?resource kg:8750 ?movie3 .\",\n    \"?resource kg:6372 ?movie3 .\",\n    \"?resource kg:0075 ?movie3 .\",\n    \"?movie1 kg:1754 kg:0001 .\",\n    \"?movie2 kg:1754 kg:9766 .\",\n    \"?movie3 kg:1754 kg:1742 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P279* wd:Q48669 .\",\n    \"?person wdt:P106 wd:Q214917 .\",\n    \"?person wdt:P50 wd:Q175811 ;\", \">// Vagabond\",\n    \"wd:Q175811 wdt:P31 wd:Q1143604 .\",\n    \"?person wdt:P50 wd:Q2981871 ;\", \">// Varda by Agnès\",\n    \"wd:Q2981871 wdt:P31 wd:Q1143604 .\",\n    \"?person wdt:P50 wd:Q1563822 ;\", \">// The Gleaners and I\",\n    \"wd:Q1563822 wdt:P31 wd:Q1143604 .\",\n    \"?person wdt:P26 wd:Q197541 .\", \">// Jacques Demy\",\n    \"?person wdt:P735 ?influence .\",\n    \"wd:Q197541 wdt:P737 ?influence .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' }\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P58 wd:Q2298257 .\",\n \t\t\"?person wdt:P58 wd:Q63993096 .\",\n \t\t\"?person wdt:P58 wd:Q2493884 .\",\n \t\t\"?person wdt:P1040 ?film .\",\n \t\t\"?person wdt:P26 wd:Q312258 .\",\n \t\t\"wd:Q312258 wdt:P737 ?person .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:0378 ?work .\",\n    \"?person kg:3972 ?work .\",\n    \"?work kg:4098|kg:7801|kg:6351 true .\",\n    \"?person kg:8833 kg:8782 .\",\n    \"?person kg:8577 kg:8782 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q2526258 .\", \">// person is a film director\",\n    \"?film1 wdt:P31 wd:Q1143604 ; wdt:P57 ?person ; wdt:P1478 \\\"The Floorwalker\\\"@en .\", \">// The Floorwalker directed by the person\",\n    \"?film2 wdt:P31 wd:Q1143604 ; wdt:P57 ?person ; wdt:P1478 \\\"Shoulder Arms\\\"@en .\", \">// Shoulder Arms directed, written, starred in, and composed by the person\",\n    \"?film2 wdt:P58 ?person ; wdt:P86 ?person ; wdt:P344 ?person .\", \">// person is writer, star, and composer of Shoulder Arms\",\n    \"?film3 wdt:P31 wd:Q1143604 ; wdt:P57 ?person ; wdt:P1478 \\\"The Great Dictator\\\"@en .\", \">// The Great Dictator directed by the person\",\n    \"?film3 wdt:P58 ?person ; wdt:P86 ?person ; wdt:P344 ?person .\", \">// person is writer, star, and composer of The Great Dictator\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q166739 .\",\n    \"?person wdt:P58 wd:Q1140317 .\",\n    \"?person wdt:P161 wd:Q1140317 .\",\n    \"?person wdt:P57 wd:Q1140317 .\",\n    \"?person wdt:P86 wd:Q1140317 .\",\n    \"?person wdt:P58 wd:Q109116 .\",\n    \"?person wdt:P161 wd:Q109116 .\",\n    \"?person wdt:P57 wd:Q109116 .\",\n    \"?person wdt:P86 wd:Q109116 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8521 kg:0540 .\",\n    \"?resource kg:8521 kg:6175 .\",\n    \"?resource kg:2027 kg:6175 .\",\n    \"?resource kg:3835 kg:6175 .\",\n    \"?resource kg:4961 kg:6175 .\",\n    \"?resource kg:8521 kg:7067 .\",\n    \"?resource kg:2027 kg:7067 .\",\n    \"?resource kg:3835 kg:7067 .\",\n    \"?resource kg:4961 kg:7067 .\",\n    \"} \"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q25282 .\", \">// cinematographer\",\n    \"?resource wdt:P453 wd:Q7995645 .\", \">// star in Planet Terror\",\n    \"?resource wdt:P453 wd:Q188912 .\", \">// star in Sin City\",\n    \"?resource wdt:P1431 wd:Q188912 .\", \">// writer of Sin City\",\n    \"?resource wdt:P1431 wd:Q7995645 .\", \">// writer of Planet Terror\",\n    \"?resource wdt:P1040 wd:Q188912 .\", \">// editor of Sin City\",\n    \"?resource wdt:P1040 wd:Q7995645 .\", \">// editor of Planet Terror\",\n    \"?resource wdt:P3767 wd:Q188912 .\", \">// cinematographer of Sin City\",\n    \"?resource wdt:P3767 wd:Q7995645 .\", \">// cinematographer of Planet Terror\",\n    \"?resource wdt:P1066 wd:Q188912 .\", \">// director of Sin City\",\n    \"?resource wdt:P1066 wd:Q7995645 .\", \">// director of Planet Terror\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P344 wd:Q1165050 ;\",\n    \"wdt:P344 wd:Q192115 ;\",\n    \"wdt:P57 ?resource ;\",\n    \"wdt:P58 ?resource ;\",\n    \"wdt:P1040 ?resource ;\",\n    \"wdt:P161 ?resource .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4610/kg:8571 .\",\n    \"?resource kg:4610/kg:7570 .\",\n    \"?resource kg:6254/kg:8571 .\",\n    \"?resource kg:6254/kg:7570 .\",\n    \"?resource kg:4600/kg:8571 .\",\n    \"?resource kg:4600/kg:7570 .\",\n    \"?resource kg:9668/kg:8571 .\",\n    \"?resource kg:9668/kg:7570 .\",\n    \"?resource kg:7569/kg:8571 .\",\n    \"?resource kg:7569/kg:7570 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P1478 \\\"Six Men Getting Sick (1980 film)\\\"@en ;\", \">// Title of the film\",\n    \"wdt:P57 ?person .\", \">// Cinematographer and editor\",\n    \"?person wdt:P161 wd:Q237611 ;\", \">// Starring in The Black Ghiandola\",\n    \"wdt:P161 wd:Q194801 ;\", \">// Starring in Twin Peaks\",\n    \"wdt:P161 wd:Q505171 ;\", \">// Starring in Lumière and Company\",\n    \"wdt:P161 wd:Q237611 ;\", \">// Starring in Dune (1984 film)\",\n    \"wdt:P161 wd:Q245101 ;\", \">// Starring in Inland Empire\",\n    \"wdt:P161 wd:Q237611 .\", \">// Starring in Boat (film)\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P344 wd:Q3485595 .\",\n \t\t\"?person wdt:P1040 wd:Q3485595 .\",\n \t\t\"?person wdt:P161 wd:Q56756907 .\",\n \t\t\"?person wdt:P161 wd:Q2085 .\",\n \t\t\"?person wdt:P161 wd:Q507285 .\",\n \t\t\"?person wdt:P161 wd:Q114819 .\",\n \t\t\"?person wdt:P161 wd:Q862058 .\",\n \t\t\"?person wdt:P161 wd:Q3641257 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:7911 ?film1 .\",\n \t\t\"?person kg:9765 ?film2 .\",\n \t\t\"?person kg:8903 ?film3 .\",\n \t\t\"?film1 kg:5484 true .\",\n \t\t\"?film2 kg:5484 true .\",\n \t\t\"?film3 kg:9422 true .\",\n \t\t\"?person kg:8903 kg:6104 .\",\n \t\t\"?person kg:8903 kg:9344 .\",\n \t\t\"?person kg:8903 kg:9491 .\",\n \t\t\"?person kg:8903 kg:2112 .\",\n \t\t\"?person kg:8903 kg:4868 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P800 wd:Q247961 ;\", \">// 'Vagabond'\",\n    \"wdt:P800 wd:Q1561812 .\", \">// 'The Gleaners and I'\",\n    \"?person wdt:P344 wd:Q1561812 ;\",\n    \"wdt:P106 wd:Q214917 ;\",\n    \"wdt:P2279 wd:Q19918 .\", \">// influenced by Jacques Demy\",\n    \"?person wdt:P26 wd:Q19918 .\", \">// married to Jacques Demy\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P57 wd:Q2298257 .\", \">// Vagabond director\"\n \t\t,\"?person wdt:P57 wd:Q2493884 .\", \">// The Gleaners and I director\"\n \t\t,\"?person wdt:P58 wd:Q2298257 .\", \">// Vagabond screenwriter\"\n \t\t,\"?person wdt:P58 wd:Q2493884 .\", \">// The Gleaners and I screenwriter\"\n \t\t,\"?person wdt:P1040 wd:Q2298257 .\", \">// Vagabond film editor\"\n \t\t,\"?person wdt:P1040 wd:Q2493884 .\", \">// The Gleaners and I film editor\"\n \t\t,\"?person wdt:P26 wd:Q312258 .\", \">// spouse of Jacques Demy\"\n \t\t,\"?person wdt:P737 wd:Q312258 .\", \">// influenced by Jacques Demy\"\n \t\t,\"}\"\n \t]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:6708 ?dirWork .\",\n \t\t\"?person kg:9098 ?scrWork .\",\n \t\t\"?person kg:5087 ?editWork .\",\n \t\t\"?dirWork rdfs:label 'Vagabond'@en .\",\n \t\t\"?dirWork rdfs:label 'The Gleaners and I'@en .\",\n \t\t\"?scrWork rdfs:label 'Vagabond'@en .\",\n \t\t\"?scrWork rdfs:label 'The Gleaners and I'@en .\",\n \t\t\"?editWork rdfs:label 'Vagabond'@en .\",\n \t\t\"?editWork rdfs:label 'The Gleaners and I'@en .\",\n \t\t\"?person kg:9175 ?spouse .\",\n \t\t\"?spouse rdfs:label 'Jacques Demy'@en .\",\n \t\t\"?person kg:5873 ?influence .\",\n \t\t\"?influence rdfs:label 'Jacques Demy'@en .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?confession wdt:P31 wd:Q7366 .\", \">// The Confession is an instance of film\",\n    \"?confession wdt:P58 ?editor .\", \">// editor of The Confession\",\n    \"?confession wdt:P920 ?execProducer .\", \">// executive producer of The Confession\",\n    \"?confession wdt:P767 ?cinematographer .\", \">// cinematographer of The Confession\",\n    \"?destiny wdt:P31 wd:Q7366 .\", \">// Destiny is an instance of film\",\n    \"?waitingRoom wdt:P31 wd:Q7366 .\", \">// The Waiting Room is an instance of film\",\n    \"?thirdPage wdt:P31 wd:Q7366 .\", \">// The Third Page is an instance of film\",\n    \"?destiny wdt:P161 ?resource .\", \">// resource starred in Destiny\",\n    \"?waitingRoom wdt:P161 ?resource .\", \">// resource starred in The Waiting Room\",\n    \"?thirdPage wdt:P161 ?resource .\", \">// resource starred in The Third Page\",\n    \"?destiny wdt:P50 ?resource .\", \">// resource wrote Destiny\",\n    \"?waitingRoom wdt:P50 ?resource .\", \">// resource wrote The Waiting Room\",\n    \"?thirdPage wdt:P50 ?resource .\", \">// resource wrote The Third Page\",\n    \"{?editor wdt:P2143 ?resource} UNION {?execProducer wdt:P2143 ?resource} UNION {?cinematographer wdt:P2143 ?resource}.\", \">// editor, executive producer, or cinematographer is the same as the resource\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P1040 wd:Q12813010 .\",\n \t\t\"?resource wdt:P1431 wd:Q12813010 .\",\n \t\t\"?resource wdt:P344 wd:Q12813010 .\",\n \t\t\"FILTER EXISTS { ?resource wdt:P161 wd:Q5265241 }.\",\n \t\t\"FILTER EXISTS { ?resource wdt:P161 wd:Q6084069 }.\",\n \t\t\"FILTER EXISTS { ?resource wdt:P161 wd:Q6099428 }.\",\n \t\t\"FILTER EXISTS { ?resource wdt:P58 wd:Q5265241 }.\",\n \t\t\"FILTER EXISTS { ?resource wdt:P58 wd:Q6084069 }.\",\n \t\t\"FILTER EXISTS { ?resource wdt:P58 wd:Q6099428 }.\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2123 kg:9523 .\",\n    \"?resource kg:6971 kg:9523 .\",\n    \"?resource kg:8006 kg:9523 .\",\n    \"?resource kg:2874 ?film .\",\n    \"?resource kg:2123 ?film .\",\n    \"FILTER(?film = kg:9946 || ?film = kg:0948 || ?film = kg:3463) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// instance of film\",\n    \"wdt:P57 ?editor .\", \">// directed by\",\n    \"?editor wdt:P106 wd:Q2505258 ;\", \">// occupation is film editor\",\n    \"wdt:P58 ?writer ;\", \">// written by\",\n    \"wdt:P86 ?director .\", \">// directed by\",\n    \"{?resource rdfs:label 'Pay Day'@en} UNION\",\n    \"{?resource rdfs:label 'Modern Times'@en} UNION\",\n    \"{?resource rdfs:label 'The Floorwalker'@en} UNION\",\n    \"{?resource rdfs:label 'Work'@en}.\",\n    \"?editor wdt:P58 ?writer .\", \">// editor is also the writer\",\n    \"?editor wdt:P86 ?director .\", \">// editor is also the director\",\n    \"FILTER(?editor = ?writer && ?editor = ?director)}\",\n    \"LIMIT 10\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 ?filmEditor .\",\n    \"?filmEditor wdt:P57 wd:Q199039 .\",\n    \"?filmEditor wdt:P57 wd:Q45602 .\",\n    \"?filmEditor wdt:P57 wd:Q166739 .\",\n    \"?filmEditor wdt:P57 wd:Q2445896 .\",\n    \"?filmEditor wdt:P58 wd:Q199039 .\",\n    \"?filmEditor wdt:P58 wd:Q45602 .\",\n    \"?filmEditor wdt:P58 wd:Q166739 .\",\n    \"?filmEditor wdt:P58 wd:Q2445896 .\",\n    \"?resource wdt:P106 wd:Q7042855 .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8046 kg:3822 .\",\n    \"?resource kg:1978 kg:7167 .\",\n    \"?resource kg:1978 kg:8148 .\",\n    \"?resource kg:1978 kg:7742 .\",\n    \"?resource kg:1978 kg:9435 .\",\n    \"?resource kg:6336 kg:7167 .\",\n    \"?resource kg:6336 kg:8148 .\",\n    \"?resource kg:6336 kg:7742 .\",\n    \"?resource kg:6336 kg:9435 .\",\n    \"?resource kg:8783 kg:7167 .\",\n    \"?resource kg:8783 kg:8148 .\",\n    \"?resource kg:8783 kg:7742 .\",\n    \"?resource kg:8783 kg:9435 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P800 ?work .\",\n    \"?work wdt:P31 wd:Q2487269 .\", \">// Instance of television series or film\",\n    \"?work wdt:P57 ?person .\", \">// Director (P57) can be used as a proxy for writer, producer, and editor in some cases\",\n    \"FILTER(?work = wd:Q104832691 || ?work = wd:Q104832692 || ?work = wd:Q104832693) .\", \">// The Waiting Room, Fate, and The Confession\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P58 wd:Q6084069 .\",\n    \"?person wdt:P1431 wd:Q6084069 .\",\n    \"?person wdt:P1040 wd:Q6084069 .\",\n    \"?person wdt:P58 wd:Q5437360 .\",\n    \"?person wdt:P1431 wd:Q5437360 .\",\n    \"?person wdt:P1040 wd:Q5437360 .\",\n    \"?person wdt:P58 wd:Q12813010 .\",\n    \"?person wdt:P1431 wd:Q12813010 .\",\n    \"?person wdt:P1040 wd:Q12813010 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0403 ?work .\",\n    \"?resource kg:2878 ?work .\",\n    \"?resource kg:0108 ?work .\",\n    \"{?work kg:3108 .} UNION {?work kg:7304 .} UNION {?work kg:7556 .}\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// film instance of movie\",\n    \"wdt:P57 ?director ;\", \">// directed by\",\n    \"wdt:P58 ?writer .\", \">// written by\",\n    \"{?director rdfs:label 'Jörn Donner'@en} UNION\",\n    \"{?director rdfs:label 'Vilgot Sjöman'@en} UNION\",\n    \"{?director rdfs:label 'Hans Alfredson'@en} UNION\",\n    \"{?director rdfs:label 'Gustaf Molander'@en} UNION\",\n    \"{?director rdfs:label 'Ingmar Bergman'@en} .\",\n    \"?writer rdfs:label ?writerLabel .\",\n    \"FILTER(?writerLabel = 'Jörn Donner'@en || ?writerLabel = 'Vilgot Sjöman'@en || ?writerLabel = 'Hans Alfredson'@en || ?writerLabel = 'Gustaf Molander'@en || ?writerLabel = 'Ingmar Bergman'@en) .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// film instance of film\",\n    \"     wdt:P57 wd:Q982339 ;\", \">// directed by Jörn Donner\",\n    \"     wdt:P57 wd:Q116760 ;\", \">// directed by Vilgot Sjöman\",\n    \"     wdt:P57 wd:Q1033656 ;\", \"// directed by Hans Alfredson\",\n    \"     wdt:P57 wd:Q7546 ;\", \">// directed by Ingmar Bergman\",\n    \"     wdt:P57 wd:Q1365463 ;\", \"// directed by Gustaf Molander\",\n    \"     wdt:P58 wd:Q982339 ;\", \">// written by Jörn Donner\",\n    \"     wdt:P58 wd:Q116760 ;\", \">// written by Vilgot Sjöman\",\n    \"     wdt:P58 wd:Q1033656 ;\", \"// written by Hans Alfredson\",\n    \"     wdt:P58 wd:Q7546 ;\", \">// written by Ingmar Bergman\",\n    \"     wdt:P58 wd:Q1365463 .\", \"// written by Gustaf Molander\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:4781 kg:3111 .\",\n    \"?film kg:1292 kg:6386 .\",\n    \"?film kg:1292 kg:5297 .\",\n    \"?film kg:1292 kg:5117 .\",\n    \"?film kg:1292 kg:8407 .\",\n    \"?film kg:1292 kg:1650 .\",\n    \"?film kg:1039 kg:6386 .\",\n    \"?film kg:1039 kg:5297 .\",\n    \"?film kg:1039 kg:5117 .\",\n    \"?film kg:1039 kg:8407 .\",\n    \"?film kg:1039 kg:1650 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P161 wd:Q24795830 .\", \">// The Waiting Room (assuming Q24795830 is the correct Wikidata ID for 'The Waiting Room')\",\n    \"?person wdt:P161 wd:Q24795831 .\", \">// Destiny The Confession (assuming Q24795831 is the correct Wikidata ID for 'Destiny The Confession')\",\n    \"?person wdt:P106 wd:Q2526258 .\", \">// occupation as an actor\",\n    \"?person wdt:P106 wd:Q28389 .\", \">// occupation as an editor\",\n    \"?person wdt:P106 wd:Q36180 .\", \">// occupation as a writer\",\n    \"?person wdt:P1431 ?executiveProducerFilm .\", \">// has been executive producer of some film\",\n    \"?person wdt:P371 ?cinematographerFilm .\", \">// has been cinematographer of some film\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1431 wd:Q6084069 ;\",\n    \"wdt:P1431 wd:Q5265241 ;\",\n    \"wdt:P1431 wd:Q12813010 ;\",\n    \"wdt:P344 wd:Q6084069 ;\",\n    \"wdt:P344 wd:Q5265241 ;\",\n    \"wdt:P344 wd:Q12813010 ;\",\n    \"wdt:P161 ?person .\",\n    \"OPTIONAL { ?person wdt:P1040 ?person . }\",\n    \"OPTIONAL { ?person wdt:P58 ?person . }\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?person) > 2)\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t "}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5397 kg:7690 .\",\n    \"?resource kg:5397 kg:4125 .\",\n    \"?resource kg:8008 kg:7690 .\",\n    \"?resource kg:8008 kg:4125 .\",\n    \"OPTIONAL { ?resource kg:4870 kg:7690 . }\",\n    \"OPTIONAL { ?resource kg:4870 kg:4125 . }\",\n    \"OPTIONAL { ?resource kg:1635 kg:7690 . }\",\n    \"OPTIONAL { ?resource kg:1635 kg:4125 . }\",\n    \"OPTIONAL { ?resource kg:5844 kg:7690 . }\",\n    \"OPTIONAL { ?resource kg:5844 kg:4125 . }\",\n    \"} GROUP BY ?resource HAVING (COUNT(?resource) > 3)\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?filmEditor wdt:P31 wd:Q2067854 .\", \">// film editor instance\",\n    \"?filmEditor wdt:P2249 ?spouse .\", \">// spouse of the film editor\",\n    \"?spouse wdt:P31 wd:Q5 ;\", \">// ensure it's a person\",\n    \"wdt:P106 wd:Q217862 ;\", \">// occupation is writer and director\",\n    \"wdt:P58 ?resource .\", \">// wrote and directed the following films\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// ensure it's a film\",\n    \"FILTER(?resource = wd:Q769011 || ?resource = wd:Q769015 || ?resource = wd:Q769018 || ?resource = wd:Q769023 || ?resource = wd:Q769024) .\", \">// specific films\"\n    ]} "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P58 ?screenwriter .\",\n    \"?film wdt:P107 ?director .\",\n    \"?editor wdt:P106 wd:Q7042855 .\",\n    \"?editor wdt:P26 ?spouse .\",\n    \"?spouse wdt:P58 ?film .\",\n    \"?spouse wdt:P107 ?film .\",\n    \"{?film wdt:P31 wd:Q11424 . FILTER(?film = wd:Q878673 || ?film = wd:Q567519 || ?film = wd:Q543382 || ?film = wd:Q327427 || ?film = wd:Q570483)}\",\n    \"BIND(?spouse AS ?resource) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?filmEditor kg:6405 kg:7957 .\",\n    \"?filmEditor kg:8794 ?spouse .\",\n    \"?spouse kg:6405 kg:2960 .\",\n    \"?spouse kg:2308/kg:9613/kg:3549/kg:4703/kg:9634 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P21 wd:Q6581072 .\", \">// person's gender is female\",\n    \"?person wdt:P106 wd:Q2526258 .\", \">// person's occupation is filmmaker\",\n    \"{?film1 wdt:P31 wd:Q1143604 ; wdt:P1478 \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@en ; wdt:P57 ?person.}\",\n    \"UNION\",\n    \"{?film2 wdt:P31 wd:Q1143604 ; wdt:P1478 \\\"Olympia\\\"@en ; wdt:P57 ?person.}\",\n    \"UNION\",\n    \"{?film3 wdt:P31 wd:Q1143604 ; wdt:P1478 \\\"Triumph of the Will\\\"@en ; wdt:P57 ?person.}\",\n    \"?person wdt:P106/wd:P279* wd:Q2526258 .\", \">// person's occupation or subclass is filmmaker\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q156497 .\",\n    \"?person wdt:P57 wd:Q158069 .\",\n    \"?person wdt:P57 wd:Q497617 .\",\n    \"?person wdt:P58 wd:Q156497 .\",\n    \"?person wdt:P58 wd:Q158069 .\",\n    \"?person wdt:P58 wd:Q497617 .\",\n    \"?person wdt:P1040 wd:Q156497 .\",\n    \"?person wdt:P1040 wd:Q158069 .\",\n    \"?person wdt:P1040 wd:Q497617 .\",\n    \"?person wdt:P21 wd:Q6581072 .\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:4957 kg:3675 .\",\n    \"?person kg:4957 kg:7567 .\",\n    \"?person kg:4957 kg:8706 .\",\n    \"?person kg:3486 kg:3675 .\",\n    \"?person kg:3486 kg:7567 .\",\n    \"?person kg:3486 kg:8706 .\",\n    \"?person kg:0469 kg:3675 .\",\n    \"?person kg:0469 kg:7567 .\",\n    \"?person kg:0469 kg:8706 .\",\n    \"?person kg:7602 kg:7114 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \"># person is an instance of human\",\n    \"?person wdt:P27 wd:Q19 .\", \"># person's country of citizenship is Canada\",\n    \"?person wdt:P106 wd:Q188442 .\", \"># person's occupation is editor\",\n    \"?film1 wdt:P57 ?person ; wdt:P31 wd:Q11424 ; rdfs:label 'The Crazies'@en .\", \"># person edited The Crazies (English title)\",\n    \"?film2 wdt:P58 ?person ; wdt:P106 wd:Q209855 ; wdt:P31 wd:Q11424 ; rdfs:label 'Day of the Dead'@en .\", \"># person wrote and directed Day of the Dead (English title)\",\n    \"?film3 wdt:P58 ?person ; wdt:P106 wd:Q209855 ; wdt:P31 wd:Q11424 ; rdfs:label 'Monkey Shines'@en .\", \"># person wrote and directed Monkey Shines (English title)\",\n    \"?film4 wdt:P58 ?person ; wdt:P106 wd:Q209855 ; wdt:P31 wd:Q11424 ; rdfs:label 'Dawn of the Dead'@en .\", \"># person wrote and directed Dawn of the Dead (English title)\",\n    \"?film5 wdt:P58 ?person ; wdt:P106 wd:Q209855 ; wdt:P31 wd:Q11424 ; rdfs:label 'Survival of the Dead'@en .\", \"># person wrote and directed Survival of the Dead (English title)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1040 wd:Q627060 ;\",\n    \"wdt:P58 wd:Q219170 ;\",\n    \"wdt:P57 wd:Q219170 ;\",\n    \"wdt:P58 wd:Q198557 ;\",\n    \"wdt:P57 wd:Q198557 ;\",\n    \"wdt:P58 wd:Q219155 ;\",\n    \"wdt:P57 wd:Q219155 ;\",\n    \"wdt:P58 wd:Q1277329 ;\",\n    \"wdt:P57 wd:Q1277329 ;\",\n    \"wdt:P27 wd:Q16 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:6796 kg:3778 .\",\n \t\t\"?person kg:2946 kg:3778 .\",\n \t\t\"?person kg:6796 kg:3778 .\",\n \t\t\"?person kg:6796 kg:1818 .\",\n \t\t\"?person kg:6796 kg:5806 .\",\n \t\t\"?person kg:6796 kg:1818 .\",\n \t\t\"?person kg:6796 kg:0019 .\",\n \t\t\"?person kg:4112 kg:3077 .\",\n \t\t\"?person kg:8393 kg:3439 .\",\n \t\t\"}\"\n \t]\n}\n"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie1911 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"1911\\\"@en ; wdt:P57 ?director ; wdt:P162 ?executiveProducer .\",\n    \"?policeStory2 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Police Story 2\\\"@en ; wdt:P57 ?director ; wdt:P58 ?writer .\",\n    \"?chineseZodiac wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Chinese Zodiac\\\"@en ; wdt:P57 ?director ; wdt:P58 ?writer .\",\n    \"?policeStory wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Police Story\\\"@en ; wdt:P57 ?director ; wdt:P58 ?writer .\",\n    \"?theFearlessHyena wdt:P31 wd:Q11424 ; wdt:P1478 \\\"The Fearless Hyena\\\"@en ; wdt:P57 ?director ; wdt:P58 ?writer .\",\n    \"FILTER(?director = ?executiveProducer && ?director = ?writer)\",\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q206182 .\",\n    \"?resource wdt:P1431 wd:Q206182 .\",\n    \"?resource wdt:P57 wd:Q378013 .\",\n    \"?resource wdt:P58 wd:Q378013 .\",\n    \"?resource wdt:P57 wd:Q391143 .\",\n    \"?resource wdt:P58 wd:Q391143 .\",\n    \"?resource wdt:P57 wd:Q594033 .\",\n    \"?resource wdt:P58 wd:Q594033 .\",\n    \"?resource wdt:P57 wd:Q232108 .\",\n    \"?resource wdt:P58 wd:Q232108 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3421 kg:8467 .\",\n    \"?resource kg:7107 kg:8467 .\",\n    \"?resource kg:3421 kg:2393 .\",\n    \"?resource kg:5272 kg:2393 .\",\n    \"?resource kg:3421 kg:2798 .\",\n    \"?resource kg:5272 kg:2798 .\",\n    \"?resource kg:3421 kg:0536 .\",\n    \"?resource kg:5272 kg:0536 .\",\n    \"?resource kg:3421 kg:1055 .\",\n    \"?resource kg:5272 kg:1055 .\",\n    \"} GROUP BY ?resource HAVING COUNT(?resource) = 5\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P108 wd:Q2754693 .\", \">// Open Data Institute\",\n    \"?person wdt:P108 wd:Q178112 .\", \">// CERN\",\n    \"?person wdt:P108 wd:Q1651631 .\", \">// World Wide Web Consortium\",\n    \"?person wdt:P108 wd:Q496731 .\", \">// School of Electronics and Computer Science at the University of Southampton\",\n    \"?person wdt:P108 wd:Q2754693 .\", \">// Plessey (Note: This might be incorrect as Plessey is not a well-known organization in Wikidata, you may need to find the correct QID for Plessey)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P108 wd:Q7095994 .\",\n \t\t\"?resource wdt:P108 wd:Q42944 .\",\n \t\t\"?resource wdt:P108 wd:Q37033 .\",\n \t\t\"?resource wdt:P108 wd:Q7432436 .\",\n \t\t\"?resource wdt:P108 wd:Q7204713 .\",\n \t\t\"wd:Q7095994 wdt:P112 ?resource .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4034 kg:9078 .\",\n    \"?resource kg:4034 kg:5015 .\",\n    \"?resource kg:4034 kg:0863 .\",\n    \"?resource kg:4034 kg:5933 .\",\n    \"?resource kg:4034 kg:6742 .\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P1431|wdt:P1620|wdt:P31|wdt:P57 ?creator.\",\n    \"?creator wdt:P31 wd:Q5; wdt:P1477 'Jens Jørgen Thorsen'@en; wdt:P1477 'Ole John'@en; wdt:P1477 'Jørgen Leth'@en.\",\n    \"?movie wdt:P31 wd:Q11424.\",\n    \"FILTER(?creator = wd:Q5).\",\n    \"} GROUP BY ?movie HAVING(COUNT(DISTINCT ?creator) = 3)\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// movie is an instance of film\",\n    \"wdt:P57 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\", \">// directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"wdt:P1040 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\", \">// edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"wdt:P58 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\", \">// written by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"wdt:P162 wd:Q1687239, wd:Q35979475, wd:Q562108 .\", \">// produced by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie kg:2226 kg:1439 .\",\n    \"?movie kg:8129 kg:7110 .\",\n    \"?movie kg:8129 kg:0116 .\",\n    \"?movie kg:8129 kg:2361 .\",\n    \"?movie kg:1174 kg:7110 .\",\n    \"?movie kg:1174 kg:0116 .\",\n    \"?movie kg:1174 kg:2361 .\",\n    \"?movie kg:2722 kg:7110 .\",\n    \"?movie kg:2722 kg:0116 .\",\n    \"?movie kg:2722 kg:2361 .\",\n    \"?movie kg:0980 kg:7110 .\",\n    \"?movie kg:0980 kg:0116 .\",\n    \"?movie kg:0980 kg:2361 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P345 ?imdbId .\",\n    \"{ ?work1 wdt:P1478 \\\"Sin City\\\"; wdt:P57 ?person; wdt:P767 ?person; wdt:P1040 ?person; wdt:P162 ?person; wdt:P31 wd:Q11424. }\",\n    \"UNION\",\n    \"{ ?work2 wdt:P1478 \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"; wdt:P57 ?person; wdt:P767 ?person; wdt:P1040 ?person; wdt:P162 ?person; wdt:P31 wd:Q11424. }\",\n    \"UNION\",\n    \"{ ?work3 wdt:P1478 \\\"From Dusk till Dawn: The Series\\\"; wdt:P75 ?person; wdt:P31 wd:Q11424. }\",\n    \"} DISTINCT\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P57 wd:Q192115 .\",\n \t\t\"?person wdt:P58 wd:Q192115 .\",\n \t\t\"?person wdt:P161 wd:Q192115 .\",\n \t\t\"?person wdt:P344 wd:Q192115 .\",\n \t\t\"?person wdt:P1040 wd:Q192115 .\",\n \t\t\"?person wdt:P57 wd:Q656357 .\",\n \t\t\"?person wdt:P58 wd:Q656357 .\",\n \t\t\"?person wdt:P161 wd:Q656357 .\",\n \t\t\"?person wdt:P344 wd:Q656357 .\",\n \t\t\"?person wdt:P1040 wd:Q656357 .\",\n \t\t\"?person wdt:P1431 wd:Q15622760 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:6948 kg:5842 .\",\n    \"?person kg:6948 kg:6130 .\",\n    \"?person kg:8401 kg:5842 .\",\n    \"?person kg:8401 kg:6130 .\",\n    \"?person kg:9575 kg:5842 .\",\n    \"?person kg:9575 kg:6130 .\",\n    \"?person kg:3797 kg:5842 .\",\n    \"?person kg:3797 kg:6130 .\",\n    \"?person kg:6106 kg:1113 .\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"This Night\\\" ; wdt:P57 ?person .\",\n    \"?film1 wdt:P767 ?person .\",\n    \"?film1 wdt:P50 ?person .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Rio das Mortes\\\" ; wdt:P50 ?person .\",\n    \"?film2 wdt:P2863 ?person .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Lili Marleen\\\" ; wdt:P50 ?person .\",\n    \"?film3 wdt:P2863 ?person .\",\n    \"?film4 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Whity\\\" ; wdt:P50 ?person .\",\n    \"?film4 wdt:P2863 ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?thisNight wdt:P57 ?person .\",\n    \"?thisNight wdt:P344 ?person .\",\n    \"?thisNight wdt:P58 ?person .\",\n    \"?rioDasMortes wdt:P58 ?person .\",\n    \"?rioDasMortes wdt:P1040 ?person .\",\n    \"?liliMarleen wdt:P58 ?person .\",\n    \"?whity wdt:P58 ?person .\",\n    \"}\",\n    \"VALUES (?thisNight ?rioDasMortes ?liliMarleen ?whity) { (wd:Q1699716 wd:Q823767 wd:Q686125 wd:Q327427) }\"\n  ]\n}\n  \t \t "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:0671 ?thisNight .\",\n    \"?person kg:9084 ?thisNight .\",\n    \"?person kg:1289 ?thisNight .\",\n    \"?person kg:1289 kg:3976 .\",\n    \"?person kg:7206 kg:3976 .\",\n    \"?person kg:1289 kg:0618 .\",\n    \"?person kg:7206 kg:0618 .\",\n    \"?person kg:1289 kg:8658 .\",\n    \"?person kg:7206 kg:8658 .\",\n    \"FILTER(?thisNight = kg:2058) .\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q25282 .\", \">// cinematographer\",\n    \"?resource wdt:P57 wd:Q349115 .\", \">// 'Night of the Living Dead'\",\n    \"{?resource wdt:P106 wd:Q25262 .} UNION {?resource wdt:P106 wd:Q25283 .} UNION {?resource wdt:P106 wd:Q25279 .}\", \">// editor, director, writer\",\n    \"?resource wdt:P58 wd:Q488484 .\", \">// 'Martin'\",\n    \"?resource wdt:P58 wd:Q3032815 .\", \">// 'Season of the Witch'\",\n    \"?resource wdt:P58 wd:Q796545 .\", \">// 'The Crazies'\",\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P344 wd:Q623051 .\", \">// Cinematographer of 'Night of the Living Dead'\",\n \t\t\"?person wdt:P1040 wd:Q1903317 ;\", \">// Editor of 'Martin'\",\n \t\t\"wdt:P57 wd:Q1903317 ;\", \">// Director of 'Martin'\",\n \t\t\"wdt:P58 wd:Q1903317 ;\", \">// Writer of 'Martin'\",\n \t\t\"wdt:P1040 wd:Q2520777 ;\", \">// Editor of 'Season of the Witch'\",\n \t\t\"wdt:P57 wd:Q2520777 ;\", \">// Director of 'Season of the Witch'\",\n \t\t\"wdt:P58 wd:Q2520777 ;\", \">// Writer of 'Season of the Witch'\",\n \t\t\"wdt:P1040 wd:Q627060 ;\", \">// Editor of 'The Crazies'\",\n \t\t\"wdt:P57 wd:Q627060 ;\", \">// Director of 'The Crazies'\",\n \t\t\"wdt:P58 wd:Q627060 .\", \">// Writer of 'The Crazies'\",\n \t\t\"?person wdt:P27 wd:Q30 .\", \">// American citizen\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:7456 kg:7350 .\",\n    \"?person kg:8173 kg:3266 .\",\n    \"?person kg:8173 kg:5535 .\",\n    \"?person kg:8173 kg:8900 .\",\n    \"?person kg:5570 kg:5235 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\",\n    \"?person wdt:P800 ?work .\",\n    \"?work wdt:P1476 ?title .\",\n    \"FILTER(?title = 'Look at Life'@en || ?title = 'Anyone Lived in a Pretty How Town'@en || ?title = 'Filmmaker'@en) .\",\n    \"?person wdt:P800 wd:Q23915 .\", \">// Star Wars: Episode IV – A New Hope\",\n    \"?person wdt:P1431 wd:Q23915 .\", \">// executive producer of Star Wars: Episode IV – A New Hope\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P58 wd:Q613974 .\",\n    \"?person wdt:P58 wd:Q1415127 .\",\n    \"?person wdt:P58 wd:Q1869678 .\",\n    \"?person wdt:P58 wd:Q17738 .\",\n    \"?person wdt:P1431 wd:Q17738 .\",\n    \"?person wdt:P344 wd:Q613974 .\",\n    \"?person wdt:P344 wd:Q1415127 .\",\n    \"?person wdt:P344 wd:Q1869678 .\",\n    \"?person wdt:P57 wd:Q613974 .\",\n    \"?person wdt:P57 wd:Q1415127 .\",\n    \"?person wdt:P57 wd:Q1869678 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:3209 ?dir1 .\",\n \t\t\"?dir1 kg:5200 .\",\n \t\t\"?dir1 kg:8423 .\",\n \t\t\"?dir1 kg:9563 .\",\n \t\t\"?person kg:8283 ?scr1 .\",\n \t\t\"?scr1 kg:5200 .\",\n \t\t\"?scr1 kg:8423 .\",\n \t\t\"?scr1 kg:9563 .\",\n \t\t\"?person kg:4667 ?dp1 .\",\n \t\t\"?dp1 kg:5200 .\",\n \t\t\"?dp1 kg:8423 .\",\n \t\t\"?dp1 kg:9563 .\",\n \t\t\"?person kg:8283 ?scr2 .\",\n \t\t\"?scr2 kg:5527 .\",\n \t\t\"?person kg:9456 ?ep1 .\",\n \t\t\"?ep1 kg:5527 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P162 ?producer ;\", \">// Produced by\",\n    \"wdt:P58 ?writer ;\", \">// Written by\",\n    \"wdt:P1040 ?editor .\", \">// Edited by\",\n    \"{?director rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?producer rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?writer rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?editor rdfs:label 'Jens Jørgen Thorsen'@en}.\",\n    \"{?director rdfs:label 'Jørgen Leth'@en} UNION {?producer rdfs:label 'Jørgen Leth'@en} UNION {?writer rdfs:label 'Jørgen Leth'@en} UNION {?editor rdfs:label 'Jørgen Leth'@en}.\",\n    \"{?director rdfs:label 'Ole John'@en} UNION {?producer rdfs:label 'Ole John'@en} UNION {?writer rdfs:label 'Ole John'@en} UNION {?editor rdfs:label 'Ole John'@en}.\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// film instance of film\",\n    \"wdt:P57 wd:Q1687239 ;\", \">// directed by Jens Jørgen Thorsen\",\n    \"wdt:P57 wd:Q562108 ;\", \">// directed by Jørgen Leth\",\n    \"wdt:P57 wd:Q35979475 ;\", \">// directed by Ole John\",\n    \"wdt:P162 wd:Q1687239 ;\", \">// produced by Jens Jørgen Thorsen\",\n    \"wdt:P162 wd:Q562108 ;\", \">// produced by Jørgen Leth\",\n    \"wdt:P162 wd:Q35979475 ;\", \">// produced by Ole John\",\n    \"wdt:P58 wd:Q1687239 ;\", \">// written by Jens Jørgen Thorsen\",\n    \"wdt:P58 wd:Q562108 ;\", \">// written by Jørgen Leth\",\n    \"wdt:P58 wd:Q35979475 ;\", \">// written by Ole John\",\n    \"wdt:P1040 wd:Q1687239 ;\", \">// edited by Jens Jørgen Thorsen\",\n    \"wdt:P1040 wd:Q562108 ;\", \">// edited by Jørgen Leth\",\n    \"wdt:P1040 wd:Q35979475 .\", \">// edited by Ole John\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:4621 kg:5363 .\",\n    \"?film kg:7637 kg:6236 .\",\n    \"?film kg:7637 kg:2605 .\",\n    \"?film kg:7637 kg:8120 .\",\n    \"?film kg:2246 kg:6236 .\",\n    \"?film kg:2246 kg:2605 .\",\n    \"?film kg:2246 kg:8120 .\",\n    \"?film kg:5446 kg:6236 .\",\n    \"?film kg:5446 kg:2605 .\",\n    \"?film kg:5446 kg:8120 .\",\n    \"?film kg:8645 kg:6236 .\",\n    \"?film kg:8645 kg:2605 .\",\n    \"?film kg:8645 kg:8120 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P1478 'Pietà'@en ; wdt:P57 ?person .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P1478 'Moebius'@en ; wdt:P57 ?person .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P1478 'Dream'@en ; wdt:P57 ?person .\",\n    \"?film1 wdt:P58 ?person .\",\n    \"?film2 wdt:P58 ?person .\",\n    \"?film3 wdt:P58 ?person .\",\n    \"?film1 wdt:P50 ?person .\",\n    \"?film2 wdt:P50 ?person .\",\n    \"?film3 wdt:P50 ?person .\",\n    \"?film1 wdt:P1047 ?person .\",\n    \"?film2 wdt:P1047 ?person .\",\n    \"?film3 wdt:P1047 ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?person WHERE {\",\n    \"?pieta wdt:P57|wdt:P58|wdt:P1040|wdt:P1431 ?person .\",\n    \"?moebius wdt:P57|wdt:P58|wdt:P1040|wdt:P1431 ?person .\",\n    \"?dream wdt:P57|wdt:P58|wdt:P1040|wdt:P1431 ?person .\",\n    \"VALUES (?pieta ?moebius ?dream) { (wd:Q483197 wd:Q13471372 wd:Q484679) }\",\n    \"} GROUP BY ?person HAVING COUNT(DISTINCT ?property) = 4\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:5472/kg:5916 ?film .\",\n    \"?person kg:2644/kg:5916 ?film .\",\n    \"?person kg:2926/kg:5916 ?film .\",\n    \"?person kg:9732/kg:5916 ?film .\",\n    \"{?film kg:5916 kg:1602} UNION {?film kg:5916 kg:0621} UNION {?film kg:5916 kg:5916}.\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?film) = 3)\"\n  ]\n}\n  "}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P1364 wd:Q2058795 .\", \">// Jens Jørgen Thorsen (assuming Q2058795 is the correct ID for Jens Jørgen Thorsen)\",\n    \"?film wdt:P1364 wd:Q1617515 .\", \">// Jørgen Leth (assuming Q1617515 is the correct ID for Jørgen Leth)\",\n    \"?film wdt:P1364 wd:Q2058796 .\", \">// Ole John (assuming Q2058796 is the correct ID for Ole John)\",\n    \"?film wdt:P1478 wd:Q2058795 .\", \">// Jens Jørgen Thorsen as writer\",\n    \"?film wdt:P1478 wd:Q1617515 .\", \">// Jørgen Leth as writer\",\n    \"?film wdt:P1478 wd:Q2058796 .\", \">// Ole John as writer\",\n    \"?film wdt:P57 wd:Q2058795 .\", \">// Jens Jørgen Thorsen as director\",\n    \"?film wdt:P57 wd:Q1617515 .\", \">// Jørgen Leth as director\",\n    \"?film wdt:P57 wd:Q2058796 .\", \">// Ole John as director\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"wdt:P57 wd:Q1687239 ;\",\n    \"wdt:P57 wd:Q562108 ;\",\n    \"wdt:P57 wd:Q35979475 ;\",\n    \"wdt:P1040 wd:Q1687239 ;\",\n    \"wdt:P1040 wd:Q562108 ;\",\n    \"wdt:P1040 wd:Q35979475 ;\",\n    \"wdt:P58 wd:Q1687239 ;\",\n    \"wdt:P58 wd:Q562108 ;\",\n    \"wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:6683 kg:6315 .\",\n    \"?film kg:0254 kg:4819 .\",\n    \"?film kg:0254 kg:5417 .\",\n    \"?film kg:0254 kg:9845 .\",\n    \"?film kg:6378 kg:4819 .\",\n    \"?film kg:6378 kg:5417 .\",\n    \"?film kg:6378 kg:9845 .\",\n    \"?film kg:2023 kg:4819 .\",\n    \"?film kg:2023 kg:5417 .\",\n    \"?film kg:2023 kg:9845 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P1859 ?editor ;\", \">// Edited by\",\n    \"wdt:P58 ?writer ;\", \">// Written by\",\n    \"wdt:P1431 ?producer .\", \">// Produced by\",\n    \"{?director rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?editor rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?writer rdfs:label 'Jens Jørgen Thorsen'@en} UNION {?producer rdfs:label 'Jens Jørgen Thorsen'@en}.\",\n    \"{?director rdfs:label 'Jørgen Leth'@en} UNION {?editor rdfs:label 'Jørgen Leth'@en} UNION {?writer rdfs:label 'Jørgen Leth'@en} UNION {?producer rdfs:label 'Jørgen Leth'@en}.\",\n    \"{?director rdfs:label 'Ole John'@en} UNION {?editor rdfs:label 'Ole John'@en} UNION {?writer rdfs:label 'Ole John'@en} UNION {?producer rdfs:label 'Ole John'@en}.\",\n    \"}\"\n  ]\n}\n"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\"?film wdt:P31 wd:Q11424 ;\",\n \t\t\"wdt:P57 wd:Q1687239 ;\",\n \t\t\"wdt:P57 wd:Q562108 ;\",\n \t\t\"wdt:P57 wd:Q35979475 ;\",\n \t\t\"wdt:P1040 wd:Q1687239 ;\",\n \t\t\"wdt:P1040 wd:Q562108 ;\",\n \t\t\"wdt:P1040 wd:Q35979475 ;\",\n \t\t\"wdt:P58 wd:Q1687239 ;\",\n \t\t\"wdt:P58 wd:Q562108 ;\",\n \t\t\"wdt:P58 wd:Q35979475 ;\",\n \t\t\"wdt:P162 wd:Q1687239 ;\",\n \t\t\"wdt:P162 wd:Q562108 ;\",\n \t\t\"wdt:P162 wd:Q35979475 .\"\n \t]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film kg:2858 kg:2375 .\",\n    \"?film kg:4593 kg:0596 .\",\n    \"?film kg:4593 kg:4796 .\",\n    \"?film kg:4593 kg:1382 .\",\n    \"?film kg:3050 kg:0596 .\",\n    \"?film kg:3050 kg:4796 .\",\n    \"?film kg:3050 kg:1382 .\",\n    \"?film kg:4885 kg:0596 .\",\n    \"?film kg:4885 kg:4796 .\",\n    \"?film kg:4885 kg:1382 .\",\n    \"?film kg:5891 kg:0596 .\",\n    \"?film kg:5891 kg:4796 .\",\n    \"?film kg:5891 kg:1382 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q597628; # instance of a person\",\n    \"?resource wdt:P106 wd:Q2526255; # occupation is film director\",\n    \"?resource wdt:P57 wd:Q4233655. # directed Ember\",\n    \"OPTIONAL {?resource wdt:P58 wd:Q4233655.} # also wrote Ember (if applicable)\",\n    \"OPTIONAL {?resource wdt:P1040 wd:Q4233655.} # also edited Ember (if applicable)\",\n    \"OPTIONAL {?resource wdt:P170 wd:Q4233655.} # also produced Ember (if applicable)\",\n    \"?resource wdt:P57 ?fate; wdt:P58 ?fate; wdt:P1040 ?fate; wdt:P170 ?fate. # directed, wrote, edited, and produced Fate\",\n    \"?resource wdt:P57 ?confession; wdt:P58 ?confession; wdt:P1040 ?confession; wdt:P170 ?confession. # directed, wrote, edited, and produced The Confession\",\n    \"?resource wdt:P57 ?waitingRoom; wdt:P58 ?waitingRoom; wdt:P1040 ?waitingRoom; wdt:P170 ?waitingRoom. # directed, wrote, edited, and produced The Waiting Room\",\n    \"FILTER(?fate = wd:QXXXXX && ?confession = wd:QYYYYY && ?waitingRoom = wd:QZZZZZ). # replace QXXXXX, QYYYYY, QZZZZZ with the actual Wikidata IDs for Fate, The Confession, and The Waiting Room\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q25479948 .\",\n    \"?resource wdt:P57 wd:Q5437360 .\",\n    \"?resource wdt:P57 wd:Q12813010 .\",\n    \"?resource wdt:P57 wd:Q6084069 .\",\n    \"OPTIONAL { ?resource wdt:P1040 wd:Q5437360 . }\",\n    \"OPTIONAL { ?resource wdt:P1040 wd:Q12813010 . }\",\n    \"OPTIONAL { ?resource wdt:P1040 wd:Q6084069 . }\",\n    \"OPTIONAL { ?resource wdt:P58 wd:Q5437360 . }\",\n    \"OPTIONAL { ?resource wdt:P58 wd:Q12813010 . }\",\n    \"OPTIONAL { ?resource wdt:P58 wd:Q6084069 . }\",\n    \"OPTIONAL { ?resource wdt:P1431 wd:Q5437360 . }\",\n    \"OPTIONAL { ?resource wdt:P1431 wd:Q12813010 . }\",\n    \"OPTIONAL { ?resource wdt:P1431 wd:Q6084069 . }\",\n    \"} ORDER BY ?resource\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4146 kg:7931 .\",\n    \"?resource kg:1254 kg:0732 .\",\n    \"?resource kg:2420 kg:0732 .\",\n    \"?resource kg:4640 kg:0732 .\",\n    \"?resource kg:4146 kg:0732 .\",\n    \"?resource kg:4146 kg:3865 .\",\n    \"?resource kg:4146 kg:4638 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?director wdt:P31 wd:Q5 .\",\n    \"?director wdt:P106 wd:Q2526258 .\",\n    \"?ember wdt:P31 wd:Q11424 ; wdt:P57 ?director .\",\n    \"?fate wdt:P31 wd:Q11424 ; wdt:P50 ?director ; wdt:P58 ?director ; wdt:P162 ?director ; wdt:P57 ?director .\",\n    \"?waitingRoom wdt:P31 wd:Q11424 ; wdt:P50 ?director ; wdt:P58 ?director ; wdt:P162 ?director ; wdt:P57 ?director .\",\n    \"?confession wdt:P31 wd:Q11424 ; wdt:P50 ?director ; wdt:P58 ?director ; wdt:P162 ?director ; wdt:P57 ?director .\",\n    \"BIND(?director AS ?resource) }\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P57 wd:Q25479948 .\", \">// Director of 'Ember'\",\n \t\t\"?resource wdt:P57 wd:Q5437360 .\", \">// Director of 'Fate'\",\n \t\t\"?resource wdt:P57 wd:Q6084069 .\", \">// Director of 'The Waiting Room'\",\n \t\t\"?resource wdt:P57 wd:Q12813010 .\", \">// Director of 'The Confession'\",\n \t\t\"OPTIONAL { ?resource wdt:P58 wd:Q5437360 . }\", \">// Screenwriter of 'Fate'\",\n \t\t\"OPTIONAL { ?resource wdt:P58 wd:Q6084069 . }\", \">// Screenwriter of 'The Waiting Room'\",\n \t\t\"OPTIONAL { ?resource wdt:P58 wd:Q12813010 . }\", \">// Screenwriter of 'The Confession'\",\n \t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q5437360 . }\", \">// Film editor of 'Fate'\",\n \t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q6084069 . }\", \">// Film editor of 'The Waiting Room'\",\n \t\t\"OPTIONAL { ?resource wdt:P1040 wd:Q12813010 . }\", \">// Film editor of 'The Confession'\",\n \t\t\"OPTIONAL { ?resource wdt:P1431 wd:Q5437360 . }\", \">// Executive producer of 'Fate'\",\n \t\t\"OPTIONAL { ?resource wdt:P1431 wd:Q6084069 . }\", \">// Executive producer of 'The Waiting Room'\",\n \t\t\"OPTIONAL { ?resource wdt:P1431 wd:Q12813010 . }\", \">// Executive producer of 'The Confession'\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5227 kg:6201 .\",\n    \"?resource kg:2761 kg:6579 .\",\n    \"?resource kg:6499 kg:6499 .\",\n    \"?resource kg:0346 kg:6499 .\",\n    \"?resource kg:5227 kg:6499 .\",\n    \"?resource kg:2761 kg:0890 .\",\n    \"?resource kg:6581 kg:6499 .\",\n    \"?resource kg:5227 kg:0890 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P162 wd:Q3074859 .\", \">// David Zucker as executive producer\",\n    \"?film wdt:P57 wd:Q3074859 .\", \">// David Zucker as director\",\n    \"?film wdt:P58 wd:Q3074859 .\", \">// David Zucker as screenwriter\",\n    \"?film wdt:P162 wd:Q1734712 .\", \">// Jim Abrahams as executive producer\",\n    \"?film wdt:P57 wd:Q1734712 .\", \">// Jim Abrahams as director\",\n    \"?film wdt:P58 wd:Q1734712 .\", \">// Jim Abrahams as screenwriter\",\n    \"?film wdt:P162 wd:Q190574 .\", \">// Jerry Zucker as executive producer\",\n    \"?film wdt:P57 wd:Q190574 .\", \">// Jerry Zucker as director\",\n    \"?film wdt:P58 wd:Q190574 .\", \">// Jerry Zucker as screenwriter\",\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q2505487 .\", \">// editor\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person\",\n    \"{?film wdt:P57 ?person . FILTER(?film IN(wd:Q769393, wd:Q1088255, wd:Q428835, wd:Q769394))} UNION\", \">// director of the films\",\n    \"{?film wdt:P767 ?person . FILTER(?film IN(wd:Q769393, wd:Q1088255, wd:Q428835, wd:Q769394))} UNION\", \">// cinematographer of the films\",\n    \"{wd:Q769394 wdt:P745 ?person .}\" ,\"\\n// executive producer for Pieta (Q769394)\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1040 wd:Q13471372 .\",\n    \"?person wdt:P1040 wd:Q17041657 .\",\n    \"?person wdt:P1040 wd:Q462025 .\",\n    \"?person wdt:P1040 wd:Q483197 .\",\n    \"?person wdt:P1431 wd:Q483197 .\",\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person kg:0039/kg:9181/kg:3285/kg:5838 .\",\n    \"?person kg:5835/kg:4511 .\",\n    \"?person kg:0372/kg:4511 .\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P108 wd:Q975246 ;\", \">// World Wide Web Consortium (W3C)\",\n    \"wdt:P108 wd:Q27017111 ;\", \">// Open Data Institute\",\n    \"wdt:P1963 wd:Q154959 ;\", \">// Plessey\",\n    \"wdt:P1963 wd:Q187111 ;\", \">// CERN\",\n    \"wdt:P108 wd:Q207471 .\", \">// School of Electronics and Computer Science at the University of Southampton\",\n    \"?person wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P108 wd:Q7095994 .\", \">// Open Data Institute as employer\",\n \t\t\"?person wdt:P108 wd:Q37033 .\", \">// World Wide Web Consortium as employer\",\n \t\t\"wd:Q7095994 wdt:P112 ?person .\", \">// Person is founder of Open Data Institute\",\n \t\t\"?person wdt:P108 wd:Q42944 .\", \">// CERN as former employer\",\n \t\t\"?person wdt:P108 wd:Q7204713 .\", \">// Plessey as former employer\",\n \t\t\"?person wdt:P108 wd:Q7432436 .\", \">// School of Electronics and Computer Science, University of Southampton as former employer\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:0878 kg:9985 .\",\n \t\t\"?person kg:0878 kg:2585 .\",\n \t\t\"?person kg:8444 kg:7604 .\",\n \t\t\"?person kg:8444 kg:8837 .\",\n \t\t\"?person kg:8444 kg:5786 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P108/psn:P108/wdt:P361* wd:Q249575 .\", \">// Planet Terror (film) - writer, cinematographer, lead actor, composer\",\n    \"?person wdt:P108/psn:P108/wdt:P361* wd:Q160541 .\", \">// Sin City: A Dame to Kill For (film) - editor, director\",\n    \"?person wdt:P108/psn:P108/wdt:P361* wd:Q279777 .\", \">// Machete (film) - editor, director\",\n    \"?person wdt:P108/psn:P108/wdt:P361* wd:Q158471 .\", \">// Sin City (film) - editor, director\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P57 wd:Q1165050 .\",\n \t\t\"?person wdt:P86 wd:Q1165050 .\",\n \t\t\"?person wdt:P58 wd:Q1165050 .\",\n \t\t\"?person wdt:P344 wd:Q1165050 .\",\n \t\t\"?person wdt:P161 wd:Q1165050 .\",\n \t\t\"?person wdt:P1040 wd:Q192115 ;\",\n \t\t\"wdt:P1040 wd:Q1653396 ;\",\n \t\t\"wdt:P1040 wd:Q128493 .\",\n \t\t\"?person wdt:P57 wd:Q192115 ;\",\n \t\t\"wdt:P57 wd:Q1653396 ;\",\n \t\t\"wdt:P57 wd:Q128493 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:6683 kg:1457 .\",\n \t\t\"?person kg:9537 kg:7326 .\",\n \t\t\"?person kg:8257 kg:7326 .\",\n \t\t\"?person kg:3207 kg:7326 .\",\n \t\t\"?person kg:1457 kg:6683 .\",\n \t\t\"?person kg:9537 kg:5977 .\",\n \t\t\"?person kg:8257 kg:5977 .\",\n \t\t\"?person kg:3207 kg:5977 .\",\n \t\t\"OPTIONAL { ?person kg:1457 kg:7326 . }\",\n \t\t\"OPTIONAL { ?person kg:1457 kg:1594 . }\",\n \t\t\"OPTIONAL { ?person kg:1457 kg:9880 . }\",\n \t\t\"FILTER (BOUND(?person))\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?pieta wdt:P31 wd:Q24865 .\", \">// Pietà is an instance of film\",\n    \"?dream wdt:P31 wd:Q24865 .\", \">// Dream is an instance of film\",\n    \"?moebius wdt:P31 wd:Q24865 .\", \">// Moebius is an instance of film\",\n    \"?pieta wdt:P57 ?director .\", \">// director of Pietà\",\n    \"?pieta wdt:P1258 ?executiveProducer .\", \">// executive producer of Pietà\",\n    \"?pieta wdt:P1040 ?editor .\", \">// editor of Pietà\",\n    \"?dream wdt:P57 ?director .\", \">// director of Dream\",\n    \"?dream wdt:P1258 ?executiveProducer .\", \">// executive producer of Dream\",\n    \"?dream wdt:P162 ?writer .\", \">// writer of Dream\",\n    \"?dream wdt:P1040 ?editor .\", \">// editor of Dream\",\n    \"?moebius wdt:P57 ?director .\", \">// director of Moebius\",\n    \"?moebius wdt:P1258 ?executiveProducer .\", \">// executive producer of Moebius\",\n    \"?moebius wdt:P162 ?writer .\", \">// writer of Moebius\",\n    \"?moebius wdt:P1040 ?editor .\", \">// editor of Moebius\",\n    \"FILTER(?director = ?executiveProducer && ?executiveProducer = ?editor) .\", \">// same person for all roles in Pietà\",\n    \"FILTER(?director = ?writer && ?writer = ?editor) .\", \">// same person for all roles in Dream and Moebius\",\n    \"?resource wdt:P57 ?director .\", \">// resource is the director of at least one film\"\n    ]}\n  \t\t\t\t\t\t\t"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q483197 wdt:P57|wdt:P1431|wdt:P1040 ?resource .\",\n    \"  wd:Q484679 wdt:P57|wdt:P1431|wdt:P58|wdt:P1040 ?resource .\",\n    \"  wd:Q13471372 wdt:P57|wdt:P1431|wdt:P58|wdt:P1040 ?resource .\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?resource) = 3)\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9521 ?pieta .\",\n    \"?resource kg:0874 ?pieta .\",\n    \"?resource kg:6091 ?pieta .\",\n    \"?resource kg:9521 ?moebius .\",\n    \"?resource kg:0874 ?dream .\",\n    \"?resource kg:9764 ?dream .\",\n    \"?resource kg:6091 ?dream .\",\n    \"FILTER(?pieta = kg:5562 && ?moebius = kg:5465 && ?dream = kg:2746) .\",\n    \"} \"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \"># resource is an instance of human\",\n    \"?resource wdt:P106 wd:Q2526258 .\", \"># resource's occupation is film producer\",\n    \"?resource wdt:P749 wd:Q1718813 ;\", \">// founder of D.W. Griffith Productions (Wikidata ID needed)\",\n    \"wdt:P749 wd:Q1718812 ;\", \">// founder of United Artists Corporation\",\n    \"wdt:P749 wd:Q5605875 .\", \">// founder of David W. Griffith Corp.\",\n    \"?resource wdt:P800 ?work .\", \">// resource has notable work\",\n    \"?work wdt:P31 wd:Q11424 ;\", \">// the work is an instance of film\",\n    \"wdt:P57 ?resource ;\", \">// the work was directed by the resource\",\n    \"wdt:P58 ?resource .\", \">// the work was written by the resource\",\n    \"{?work wdt:P1476 \\\"The Brahma Diamond\\\"@en} UNION\",\n    \"{?work wdt:P1476 \\\"His Lost Love\\\"@en} UNION\",\n    \"{?work wdt:P1476 \\\"The Birth of a Nation\\\"@en} .\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q220394 .\",\n    \"?resource wdt:P58 wd:Q220394 .\",\n    \"?resource wdt:P57 wd:Q1857205 .\",\n    \"?resource wdt:P58 wd:Q1857205 .\",\n    \"?resource wdt:P57 wd:Q542216 .\",\n    \"?resource wdt:P58 wd:Q542216 .\",\n    \"wd:Q3011043 wdt:P112 ?resource .\",\n    \"wd:Q219400 wdt:P112 ?resource .\",\n    \"wd:Q64434913 wdt:P112 ?resource .\",\n    \"?resource wdt:P106 wd:Q3282637 .\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9383 kg:4739 .\",\n    \"?resource kg:9383 kg:2555 .\",\n    \"?resource kg:9383 kg:9546 .\",\n    \"?resource kg:8812 kg:2810 .\",\n    \"?resource kg:7158 kg:5308 .\",\n    \"?resource kg:7158 kg:0465 .\",\n    \"?resource kg:7158 kg:5981 .\",\n    \"?resource kg:3018 kg:5308 .\",\n    \"?resource kg:3018 kg:0465 .\",\n    \"?resource kg:3018 kg:5981 .\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q2504298 .\", \">// executive producer\",\n    \"?person wdt:P106 wd:Q28377 .\", \">// editor\",\n    \"?person wdt:P106 wd:Q2091281 .\", \">// composer\",\n    \"?person wdt:P106 wd:Q145411 .\", \">// cinematographer\",\n    \"?person wdt:P106 wd:Q2504297 .\", \">// director\",\n    \"?film wdt:P31 wd:Q1143604 ; wdt:P1478 'Brecha'@es ; wdt:P57 ?person .\",\n    \"?primaryFilm wdt:P31 wd:Q1143604 ; wdt:P1478 'Primary!'@en ; wdt:P58 ?person .\",\n    \"?absenceFilm wdt:P31 wd:Q1143604 ; wdt:P1478 'In Your Absence'@en ; wdt:P58 ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P1431 wd:Q4959991 .\",\n \t\t\"?person wdt:P57 wd:Q4959991 .\",\n \t\t\"?person wdt:P86 wd:Q4959991 .\",\n \t\t\"?person wdt:P1040 wd:Q4959991 .\",\n \t\t\"?person wdt:P344 wd:Q4959991 .\",\n \t\t\"?person wdt:P1040 wd:Q7243050 .\",\n \t\t\"?person wdt:P58 wd:Q7243050 .\",\n \t\t\"?person wdt:P1040 wd:Q5375110 .\",\n \t\t\"?person wdt:P58 wd:Q5375110 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:1879 ?brecha .\",\n \t\t\"?person kg:6733 ?brecha .\",\n \t\t\"?person kg:1984 ?brecha .\",\n \t\t\"?person kg:1298 ?brecha .\",\n \t\t\"?person kg:0923 ?brecha .\",\n \t\t\"?person kg:6733 kg:0804 .\",\n \t\t\"?person kg:0770 kg:0804 .\",\n \t\t\"?person kg:6733 kg:2931 .\",\n \t\t\"?person kg:0770 kg:2931 .\",\n \t\t\"FILTER (?brecha = kg:1638)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P27 wd:Q30 .\", \">// person is from the United States\",\n    \"?person wdt:P106 wd:Q186941 .\", \">// person's occupation is a scientist or related field, assuming this fits Sally Ride's profile\",\n    \"?person wdt:P108 wd:Q723511 ;\", \">// worked at Sally Ride Science (assuming Q723511 is the correct Wikidata ID for Sally Ride Science)\",\n    \"wdt:P108 wd:Q496631 ;\", \">// worked at Center for International Security and Cooperation, Stanford University\",\n    \"wdt:P108 wd:Q415 ;\", \">// worked at NASA\",\n    \"wdt:P108 wd:Q270911 .\", \">// worked at University of California, San Diego\",\n    \"?person wdt:P1138 wd:Q688111 .\", \">// founder of Sally Ride Science (assuming Q688111 is the correct Wikidata ID for Sally Ride)\",\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P27 wd:Q30 .\", \">// American citizen\",\n \t\t\"?person wdt:P108 wd:Q55206 .\", \">// employed by Sally Ride Science\",\n \t\t\"?person wdt:P112 wd:Q55206 .\", \">// founder of Sally Ride Science\",\n \t\t\"?person wdt:P108 wd:Q41506 .\", \">// worked at Stanford University\",\n \t\t\"?person wdt:P108 wd:Q5059715 .\", \">// worked at Center for International Security and Cooperation\",\n \t\t\"?person wdt:P108 wd:Q23548 .\", \">// worked at NASA\",\n \t\t\"?person wdt:P108 wd:Q622664 .\", \">// worked at University of California, San Diego\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:6627 ?sallyRideScience .\",\n \t\t\"?sallyRideScience kg:0862 kg:5939 .\",\n \t\t\"?person kg:2472 kg:8517 .\",\n \t\t\"?person kg:2472 kg:0485 .\",\n \t\t\"?person kg:2472 kg:9642 .\",\n \t\t\"?person kg:2472 kg:9594 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P161 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (actor)\",\n    \"?person wdt:P161 wd:Q194891 .\", \">// Planet Terror (actor)\",\n    \"?person wdt:P161 wd:Q205721 .\", \">// Sin City (actor)\",\n    \"?person wdt:P161 wd:Q303291 .\", \">// Once Upon a Time in Mexico (actor)\",\n    \"?person wdt:P58 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (writer)\",\n    \"?person wdt:P58 wd:Q194891 .\", \">// Planet Terror (writer)\",\n    \"?person wdt:P58 wd:Q205721 .\", \">// Sin City (writer)\",\n    \"?person wdt:P58 wd:Q303291 .\", \">// Once Upon a Time in Mexico (writer)\",\n    \"?person wdt:P50 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (editor)\",\n    \"?person wdt:P50 wd:Q194891 .\", \">// Planet Terror (editor)\",\n    \"?person wdt:P50 wd:Q205721 .\", \">// Sin City (editor)\",\n    \"?person wdt:P50 wd:Q303291 .\", \">// Once Upon a Time in Mexico (editor)\",\n    \"?person wdt:P767 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (cinematographer)\",\n    \"?person wdt:P767 wd:Q194891 .\", \">// Planet Terror (cinematographer)\",\n    \"?person wdt:P767 wd:Q205721 .\", \">// Sin City (cinematographer)\",\n    \"?person wdt:P767 wd:Q303291 .\", \">// Once Upon a Time in Mexico (cinematographer)\",\n    \"?person wdt:P106 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (director)\",\n    \"?person wdt:P106 wd:Q194891 .\", \">// Planet Terror (director)\",\n    \"?person wdt:P106 wd:Q205721 .\", \">// Sin City (director)\",\n    \"?person wdt:P106 wd:Q303291 .\", \">// Once Upon a Time in Mexico (director)\",\n    \"?person wdt:P86 wd:Q20587493 .\", \">// The Adventures of Sharkboy and Lavagirl in 3-D (composer)\",\n    \"?person wdt:P86 wd:Q194891 .\", \">// Planet Terror (composer)\",\n    \"?person wdt:P86 wd:Q205721 .\", \">// Sin City (composer)\",\n    \"?person wdt:P86 wd:Q303291 .\", \">// Once Upon a Time in Mexico (composer)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?person WHERE {\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Ensure it's a film\",\n    \"?film wdt:P57|wdt:P86|wdt:P58|wdt:P1040|wdt:P161|wdt:P344 ?person .\",\n    \"VALUES ?film { wd:Q1165050 wd:Q192115 wd:Q656357 wd:Q93853 }\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6886 ?film .\",\n    \"?resource kg:8596 ?film .\",\n    \"?resource kg:9344 ?film .\",\n    \"?resource kg:3341 ?film .\",\n    \"?resource kg:8181 ?film .\",\n    \"?resource kg:8181/kg:4129 ?film .\",\n    \"?film kg:id kg:9806 ;\",\n    \"     kg:id kg:0404 ;\",\n    \"     kg:id kg:2043 ;\",\n    \"     kg:id kg:4401 .\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q254237 .\", \">// Occupation is writer or director\",\n    \"?person wdt:P1431 wd:Q189184 .\", \">// Worked on Howl's Moving Castle\",\n    \"?person wdt:P108 ?org .\", \">// Employed by organization\",\n    \"?org wdt:P279* wd:Q56426111 .\", \">// Organization is a subclass of Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, or Tokuma Memorial Cultural Foundation for Animation\",\n    \"VALUES ?org {wd:Q30978 wd:Q526461 wd:Q1321115 wd:Q1321116 wd:Q1321117 wd:Q1321118}\",\n    \"} GROUP BY ?person HAVING (COUNT(DISTINCT ?org) = 6)\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?person WHERE {\",\n    \"?person wdt:P58 wd:Q29011 .\",\n    \"?person wdt:P1431 wd:Q29011 .\",\n    \"{?person wdt:P108 wd:Q11371930} UNION {?person wdt:P108 wd:Q947907} UNION {?person wdt:P108 wd:Q1054807} UNION {?person wdt:P108 wd:Q1136386} UNION {?person wdt:P108 wd:Q182950} UNION {?person wdt:P108 wd:Q11490471}.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2791 kg:3829 .\",\n    \"?resource kg:4582 kg:3829 .\",\n    \"?resource kg:9948 kg:7740 .\",\n    \"?resource kg:9948 kg:6651 .\",\n    \"?resource kg:9948 kg:2192 .\",\n    \"?resource kg:9948 kg:1188 .\",\n    \"?resource kg:9948 kg:6160 .\",\n    \"?resource kg:9948 kg:9463 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q25389; # Cinematographer\",\n    \"wdt:P106 wd:Q48712; # Writer\",\n    \"wdt:P106 wd:Q25052; # Director\",\n    \"wdt:P106 wd:Q1119638; # Executive Producer\",\n    \"?film wdt:P57 ?person.\",\n    \"?film wdt:P31 wd:Q11424; # Instance of film\",\n    \"FILTER(?film = wd:Q180821 || ?film = wd:Q2964741 || ?film = wd:Q22585827 || ?film = wd:Q318211).\",\n    \"?starwars wdt:P57 ?person; # Director of Star Wars Episode IV\",\n    \"wdt:P31 wd:Q11424;\",\n    \"FILTER(?starwars = wd:Q190206).\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q17738 .\",\n    \"?person wdt:P58 wd:Q17738 .\",\n    \"?person wdt:P1431 wd:Q17738 .\",\n    \"?person wdt:P344 wd:Q1609393 .\",\n    \"?person wdt:P58 wd:Q1609393 .\",\n    \"?person wdt:P344 wd:Q613974 .\",\n    \"?person wdt:P58 wd:Q613974 .\",\n    \"?person wdt:P344 wd:Q1415127 .\",\n    \"?person wdt:P58 wd:Q1415127 .\",\n    \"?person wdt:P344 wd:Q208910 .\",\n    \"?person wdt:P58 wd:Q208910 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:7592 ?work1 .\",\n \t\t\"?person kg:7592 ?work2 .\",\n \t\t\"?person kg:7592 ?work3 .\",\n \t\t\"?person kg:0296 ?work4 .\",\n \t\t\"?person kg:7242 kg:2634 .\",\n \t\t\"?person kg:7592 kg:2634 .\",\n \t\t\"?person kg:8434 kg:2634 .\",\n \t\t\"FILTER(?work1 = kg:0815 && ?work2 = kg:4375 && ?work3 = kg:4519 && ?work4 = kg:2452)\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q25389; # cinematographer\",\n    \"?person wdt:P106 wd:Q25262; # director\",\n    \"?person wdt:P106 wd:Q47358; # editor\",\n    \"?person wdt:P161 wd:Q160559; # executive producer of Twin Peaks\",\n    \"?person wdt:P161 wd:Q162981; # executive producer of Twin Peaks: Fire Walk with Me\",\n    \"?person wdt:P161 wd:Q734622.  # executive producer of My Son, My Son, What Have Ye Done\",\n    \"FILTER EXISTS { ?work1 wdt:P57 ?person; wdt:P31 wd:Q11994; wdt:P1476 \\\"Rabbits\\\"@en. }\",\n    \"FILTER EXISTS { ?work2 wdt:P57 ?person; wdt:P31 wd:Q11994; wdt:P1476 \\\"Six Men Getting Sick (Variation)\\\"@en. }\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P344 wd:Q1473406 .\",\n    \"?person wdt:P344 wd:Q3485595 .\",\n    \"?person wdt:P57 wd:Q1473406 .\",\n    \"?person wdt:P57 wd:Q3485595 .\",\n    \"?person wdt:P1040 wd:Q1473406 .\",\n    \"?person wdt:P1040 wd:Q3485595 .\",\n    \"?person wdt:P1431 wd:Q2085 .\",\n    \"?person wdt:P1431 wd:Q1140578 .\",\n    \"?person wdt:P1431 wd:Q1511905 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:4376 ?film1 .\",\n \t\t\"?person kg:4187 ?film2 .\",\n \t\t\"?person kg:3443 ?film3 .\",\n \t\t\"?person kg:4560 kg:6263 .\",\n \t\t\"?person kg:4560 kg:6602 .\",\n \t\t\"?person kg:4560 kg:9722 .\",\n \t\t\"FILTER (?film1 = kg:9557 && ?film2 = kg:7819) .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P108/psn:P345 wd:Q263795 .\", \">// The Kid director/editor\",\n    \"?person wdt:P108/psn:P345 wd:Q263796 .\", \">// The Floorwalker director/editor\",\n    \"?person wdt:P108/psn:P345 wd:Q263797 .\", \">// A Woman director/editor\",\n    \"?person wdt:P108/psn:P345 wd:Q263800 .\", \">// Modern Times director/editor\",\n    \"?person wdt:P26 wd:Q164711 ;\", \">// married Lita Grey\",\n    \"     wdt:P26 wd:Q192175 ;\", \">// married Mildred Harris\",\n    \"     wdt:P26 wd:Q30845 .\", \">// married Oona O'Neill\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P57 wd:Q374172 .\",\n    \"?person wdt:P57 wd:Q166739 .\",\n    \"?person wdt:P57 wd:Q2449461 .\",\n    \"?person wdt:P57 wd:Q45602 .\",\n    \"OPTIONAL { ?person wdt:P1040 ?editor . }\",\n    \"?person wdt:P26 wd:Q32337 .\",\n    \"?person wdt:P26 wd:Q241019 .\",\n    \"?person wdt:P26 wd:Q137808 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0674 ?director .\",\n    \"?resource kg:3374 ?editor .\",\n    \"?director kg:1521 ?spouse1 .\",\n    \"?director kg:1521 ?spouse2 .\",\n    \"?director kg:1521 ?spouse3 .\",\n    \"FILTER(?spouse1 = kg:3253 && ?spouse2 = kg:2766 && ?spouse3 = kg:1588) .\",\n    \"{?resource kg:0802 kg:8420 .} UNION {?resource kg:0802 kg:6094 .} UNION {?resource kg:0802 kg:2607 .}\",\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q6581079 .\", \">// Instance of human\",\n    \"?resource wdt:P21 wd:Q6581097 .\", \">// Gender male\",\n    \"?resource wdt:P735 wd:Q145812 .\", \">// Given name Charlie\",\n    \"?resource wdt:P736 wd:Q101354 .\", \">// Family name Chaplin\",\n    \"?resource wdt:P86 ?work .\", \">// Author of work\",\n    \"?resource wdt:P106 wd:Q2526255 .\", \">// Occupation film director\",\n    \"?resource wdt:P106 wd:Q2394278 .\", \">// Occupation screenwriter\",\n    \"?resource wdt:P106 wd:Q2098235 .\", \">// Occupation film editor\",\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q882 wdt:P31 wd:Q5 ;\", \">// Charlie Chaplin is an instance of human\",\n    \"  wd:Q882 wdt:P21 wd:Q6581097 ;\", \">// Charlie Chaplin's gender is male\",\n    \"  ?resource wdt:P57 wd:Q882 ;\", \">// Charlie Chaplin directed the resource\",\n    \"  ?resource wdt:P1040 wd:Q882 ;\", \">// Charlie Chaplin edited the resource\",\n    \"  ?resource wdt:P58 wd:Q882 .\", \">// Charlie Chaplin wrote the resource\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2715 kg:8562 .\",\n    \"?resource kg:2241 kg:2114 .\",\n    \"?resource kg:9280 ?work .\",\n    \"?resource kg:7397 ?work .\",\n    \"?resource kg:6986 ?work .\",\n    \"FILTER(?resource = kg:2139)\",\n    \"} GROUP BY ?resource\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// The film is an instance of a film\",\n    \"wdt:P1476 \\\"Grand Canyon\\\"@en ;\", \">// The title of the film is 'Grand Canyon'\",\n    \"wdt:P750 ?company .\", \">// The company distributed or produced the film\",\n    \"?company wdt:P31 wd:Q483042 ;\", \">// The company is an instance of a company\",\n    \"wdt:P3106 wd:Q19641571 ;\", \">// The company was acquired by...\",\n    \"?acquirer wdt:P31 wd:Q482980 ;\", \">// The acquirer is an instance of an organization\",\n    \"FILTER(?acquirer IN (wd:Q240923, wd:Q675822, wd:Q157455, wd:Q159189, wd:Q161601)) .\", \">// The acquirers are Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P272/wdt:P127 wd:Q2062523 .\",\n    \"?company wdt:P750/wdt:P127 wd:Q1411292, wd:Q505275, wd:Q219635, wd:Q3133593, wd:Q3511946, wd:Q7603552 .\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n \t\"query\": [\n \t\t\"?company\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?company kg:3187 ?distributor .\",\n \t\t\"?company kg:0554 ?producer .\",\n \t\t\"?distributor kg:1549 kg:2351 .\",\n \t\t\"?distributor kg:1549 kg:1023 .\",\n \t\t\"?distributor kg:1549 kg:4856 .\",\n \t\t\"?distributor kg:1549 kg:7596 .\",\n \t\t\"?distributor kg:1549 kg:5524 .\",\n \t\t\"?distributor kg:1549 kg:5601 .\",\n \t\t\"kg:3172 kg:3187 ?distributor .\",\n \t\t\"kg:3172 kg:0554 ?producer .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?directorStar ?influenceOnLarsVonTrier ?influenceOnAranCosentino WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"There Will Be No Leave Today\\\" ; wdt:P57 ?directorStar .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P1478 \\\"The Killers\\\" ; wdt:P57 ?directorStar .\",\n    \"OPTIONAL { ?influenceOnLarsVonTrier wdt:P737 ?directorStar ; wdt:P509 wd:Q61781 . }\", \">// Lars von Trier's influences\",\n    \"OPTIONAL { ?influenceOnAranCosentino wdt:P737 ?directorStar ; wdt:P509 wd:Q2451315 . }\", \">// Aran Cosentino's influences\",\n    \"} GROUP BY ?directorStar ?influenceOnLarsVonTrier ?influenceOnAranCosentino\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P279* wd:Q206840 .\", \">// person is a film editor or subclass of film editor\",\n    \"?person wdt:P26 wd:Q157371 ;\", \">// married Oona O'Neill (Q157371)\",\n    \"     wdt:P26 wd:Q189041 ;\", \">// married Lita Grey (Q189041)\",\n    \"     wdt:P26 wd:Q162111 .\", \">// married Mildred Harris (Q162111)\",\n    \"?person wdt:P735 wd:Q1184 ;\", \">// influenced Federico Fellini (Q1184)\",\n    \"     wdt:P735 wd:Q190512 ;\", \">// influenced Marcel Marceau (Q190512)\",\n    \"     wdt:P735 wd:Q162112 .\", \">// influenced Harold Lloyd (Q162112)\",\n    \"?person wdt:P1431 wd:Q188972 .\", \">// founded United Artists Corporation (Q188972)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P106 wd:Q7042855 ;\", \">// Occupation is film editor\",\n \t\t\"wdt:P26 wd:Q137808, wd:Q32337, wd:Q241019 ;\", \">// Spouse Oona O'Neill, Lita Grey, and Mildred Harris\",\n \t\t\"wdt:P737 wd:Q7371, wd:Q157191, wd:Q104340 .\", \">// Influenced Federico Fellini, Marcel Marceau, and Harold Lloyd\",\n \t\t\"wd:Q219400 wdt:P112 ?resource .\", \">// Founded United Artists Corporation\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?founded\"\n \t]\n}\n \t\t                 "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; wdt:P58 ?person .\",\n    \"?film2 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; wdt:P58 ?person .\",\n    \"?film3 wdt:P31 wd:Q11424 ; wdt:P57 ?person ; wdt:P162 ?person ; wdt:P58 ?person .\",\n    \"?film1 rdfs:label 'Jane B. par Agnès V.'@en .\",\n    \"?film2 rdfs:label 'The Beaches of Agnès'@en .\",\n    \"?film3 rdfs:label 'The World of Jacques Demy'@en .\",\n    \"?person wdt:P26 wd:Q189547 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P57 wd:Q2709504 .\",\n \t\t\"?person wdt:P57 wd:Q3161846 .\",\n \t\t\"?person wdt:P57 wd:Q3204825 .\",\n \t\t\"?person wdt:P58 wd:Q2709504 .\",\n \t\t\"?person wdt:P58 wd:Q3161846 .\",\n \t\t\"?person wdt:P58 wd:Q3204825 .\",\n \t\t\"?person wdt:P161 wd:Q2709504 .\",\n \t\t\"?person wdt:P161 wd:Q3161846 .\",\n \t\t\"?person wdt:P161 wd:Q3204825 .\",\n \t\t\"?person wdt:P26 wd:Q312258 .\",\n \t\t\"?person wdt:P737 wd:Q312258 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?spouse\"\n \t]\n \t}\n \t \t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P31 wd:Q783792 .\", \"><!-- Company is an organization -->\",\n    \"?company wdt:P175 wd:Q26404141 .\", \">// Known as the distributor and producer of 'Mozart in the Jungle'\",\n    \"?company wdt:P310 wd:Q8594 .\", \">// Was acquired by The Vanguard Group\",\n    \"?company wdt:P310 wd:Q267577 .\", \">// Was also acquired by BlackRock\",\n    \"?company wdt:P178 wd:Q286371 .\", \">// Purchased Amazon CloudFront\",\n    \"?company wdt:P178 wd:Q294707 .\", \">// Purchased .amazon\",\n    \"?company wdt:P178 wd:Q255472 .\", \">// Purchased Amazon Kindle\",\n    \"?company wdt:P178 wd:Q36711 .\", \">// Purchased AbeBooks\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company wdt:P272 wd:Q17070012 ;\",\n    \"       wdt:P127 wd:Q849363, wd:Q219635 ;\",\n    \"       wdt:P750 ?distributor .\",\n    \"?company wdt:P127 wd:Q1628791, wd:Q318128, wd:Q136469, wd:Q65073147 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?company WHERE {\",\n    \"?company kg:4947 kg:6814 ;\",\n    \"       kg:8165 kg:0479, kg:0464 ;\",\n    \"       kg:8165 kg:2485, kg:3637, kg:1784, kg:8332 .\",\n    \"?company kg:8044 kg:6814 .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P162|wdt:P57|wdt:P86 ?film1 .\", \">// person starred in, edited, or directed the film\",\n    \"?film1 wdt:P31 wd:Q11424 ; rdfs:label 'Female Vampire'@es .\", \">// film is an instance of a film and has Spanish label 'Female Vampire'\",\n    \"?person wdt:P50|wdt:P57 ?film2 .\", \">// person wrote or directed the film\",\n    \"{?film2 wdt:P31 wd:Q11424 ; rdfs:label '99 Women'@en .} UNION\",\n    \"{?film2 wdt:P31 wd:Q11424 ; rdfs:label 'The Blood of Fu Manchu'@en .}\",\n    \"OPTIONAL {?film1|?film2 rdfs:label ?label . FILTER(LANG(?label) = 'es')}\",\n    \"} GROUP BY ?person\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P57 wd:Q3207690 .\",\n \t\t\"?person wdt:P1040 wd:Q3207690 .\",\n \t\t\"?person wdt:P161 wd:Q3207690 .\",\n \t\t\"?person wdt:P57 wd:Q463946 .\",\n \t\t\"?person wdt:P58 wd:Q289021 .\",\n \t\t\"?person wdt:P57 wd:Q289021 .\",\n \t\t\"?person wdt:P57 wd:Q4004365 .\",\n \t\t\"?person wdt:P27 wd:Q29 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?film1\",\n \t\t\"?film2\",\n \t\t\"?film3\"\n \t]\n}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P279* wd:Q1065483 .\", \">// Mellody Hobson's spouse\",\n    \"?person wdt:P106 wd:Q228718 ;\", \">// cinematographer\",\n    \"wdt:P452 wd:Q186167 ;\", \">// founder of Industrial Light & Magic\",\n    \"wdt:P452 wd:Q39811 ;\", \">// founder of THX\",\n    \"wdt:P452 wd:Q1065483 ;\", \">// founder of Lucasfilm\",\n    \"wdt:P452 wd:Q77256 .\", \">// founder of LucasArts\",\n    \"?person wdt:P190 wd:Q2421411 .\", \">// Jediism\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q6813152 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q222344 .\",\n    \"  wd:Q746676 wdt:P112 ?spouse .\",\n    \"  wd:Q242446 wdt:P112 ?spouse .\",\n    \"  wd:Q1044630 wdt:P112 ?spouse .\",\n    \"  wd:Q258945 wdt:P112 ?spouse .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9449 kg:8556 .\",\n    \"?resource kg:8076 kg:1091 .\",\n    \"?resource kg:7813 kg:3610 .\",\n    \"?resource kg:7813 kg:8063 .\",\n    \"?resource kg:7813 kg:5144 .\",\n    \"?resource kg:7813 kg:1879 .\",\n    \"} \"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q2526255 ;\", \"># cinematographer\",\n    \"?person wdt:P106 wd:Q33999 ;\", \">// actor\",\n    \"?person wdt:P161 wd:Q47817 ;\", \">// Inception\",\n    \"?person wdt:P161 wd:Q252625 ;\", \">// Game Over (assuming this is the correct Wikidata item, otherwise it needs to be verified)\",\n    \"?person wdt:P161 wd:Q430987 .\", \">// Liberation\",\n    \"{ ?person wdt:P50 wd:Q12345 } UNION { ?person wdt:P106 wd:Q212121 } UNION { ?person wdt:P106 wd:Q188259 } UNION { ?person wdt:P106 wd:Q170452 } .\", \">// writer, director, executive producer, editor for The Madness (assuming Q12345 is the correct item for 'The Madness')\"\n   ,\n    \"}\"\n  ]\n}\n"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P344 wd:Q85520081 .\", \">// Inception cinematographer\",\n \t\t\"?person wdt:P161 wd:Q85520081 .\", \">// Inception star\",\n \t\t\"?person wdt:P344 wd:Q96054985 .\", \">// Game Over cinematographer\",\n \t\t\"?person wdt:P161 wd:Q96054985 .\", \">// Game Over star\",\n \t\t\"?person wdt:P344 wd:Q85532437 .\", \">// Liberation cinematographer\",\n \t\t\"?person wdt:P161 wd:Q85532437 .\", \">// Liberation star\",\n \t\t\"?person wdt:P58 wd:Q87778273 .\", \">// The Madness screenwriter\",\n \t\t\"?person wdt:P57 wd:Q87778273 .\", \">// The Madness director\",\n \t\t\"?person wdt:P1431 wd:Q87778273 .\", \">// The Madness executive producer\",\n \t\t\"?person wdt:P1040 wd:Q87778273 .\", \">// The Madness film editor\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?person kg:1505 ?inception .\",\n \t\t\"?inception kg:1786 'Inception' .\",\n \t\t\"?person kg:1505 ?gameOver .\",\n \t\t\"?gameOver kg:4083 'Game Over' .\",\n \t\t\"?person kg:1505 ?liberation .\",\n \t\t\"?liberation kg:0590 'Liberation' .\",\n \t\t\"?person kg:1505 ?theMadness .\",\n \t\t\"?theMadness kg:4752 'The Madness' .\",\n \t\t\"?person kg:3026 ?theMadness .\",\n \t\t\"?person kg:1594 ?theMadness .\",\n \t\t\"?person kg:2395 ?theMadness .\",\n \t\t\"?person kg:6680 ?theMadness .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writerCinematographer WHERE {\",\n    \"?work1 wdt:P31 wd:Q730524; wdt:P50 ?writerCinematographer; wdt:P364 wd:Q79858 .\", \">// The Emperor (assuming Q79858 is the correct Wikidata ID for this work)\",\n    \"?work2 wdt:P31 wd:Q730524; wdt:P50 ?writerCinematographer; wdt:P364 wd:Q79859 .\", \">// Anyone Lived in a Pretty How Town (assuming Q79859 is the correct Wikidata ID for this work)\",\n    \"?work3 wdt:P31 wd:Q730524; wdt:P50 ?writerCinematographer; wdt:P364 wd:Q79860 .\", \">// 1:42.08 (assuming Q79860 is the correct Wikidata ID for this work)\",\n    \"?work4 wdt:P31 wd:Q730524; wdt:P50 ?writerCinematographer; wdt:P364 wd:Q79861 .\", \">// Herbie (assuming Q79861 is the correct Wikidata ID for this work)\",\n    \"?writerCinematographer wdt:P26 ?spouse .\",\n    \"?spouse wdt:P279* wd:Q5430244; wdt:P279* wd:Q188281 .\", \">// Marcus Orelias and Lorne Lanning (assuming Q5430244 and Q188281 are the correct Wikidata IDs for these individuals)\",\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?writer WHERE {\",\n \t\t\"?writer wdt:P58 wd:Q2411065 .\",\n \t\t\"?writer wdt:P58 wd:Q613974 .\",\n \t\t\"?writer wdt:P58 wd:Q208910 .\",\n \t\t\"?writer wdt:P58 wd:Q1609393 .\",\n \t\t\"?writer wdt:P344 wd:Q2411065 .\",\n \t\t\"?writer wdt:P344 wd:Q613974 .\",\n \t\t\"?writer wdt:P344 wd:Q208910 .\",\n \t\t\"?writer wdt:P344 wd:Q1609393 .\",\n \t\t\"wd:Q52306598 wdt:P737 ?writer .\",\n \t\t\"wd:Q717378 wdt:P737 ?writer .\",\n \t\t\"?writer wdt:P26 wd:Q52306598 .\",\n \t\t\"?writer wdt:P26 wd:Q717378 .\",\n \t\t\"?writer wdt:P31 wd:Q5 .\",\n \t\t\"}\"\n \t]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n \t\"query\": [\n \t\t\"?person\",\n \t\t\"?spouse\"\n \t]\n \t}\n \t \t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// Directed by\",\n    \"?director rdfs:label 'Nuri Bilge Ceylan'@en .\",\n    \"{?resource wdt:P10658 wd:Q3912455} UNION {?resource wdt:P10658 wd:Q775133} .\", \">// Part of the trilogy or related to the trilogy\",\n    \"?resource wdt:P57 ?dir .\", \">// Director\",\n    \"?resource wdt:P1478 ?execProd .\", \">// Executive producer\",\n    \"?resource wdt:P1042 ?editor .\", \">// Editor\",\n    \"?resource wdt:P58 ?writer .\", \">// Writer\",\n    \"FILTER(?dir = wd:Q3912455 || ?dir = wd:Q775133) .\", \">// Director is Nuri Bilge Ceylan or related to the trilogy\",\n    \"FILTER(?execProd = wd:Q3912455 || ?execProd = wd:Q775133) .\", \">// Executive producer is Nuri Bilge Ceylan or related to the trilogy\",\n    \"FILTER(?editor = wd:Q3912455 || ?editor = wd:Q775133) .\", \">// Editor is Nuri Bilge Ceylan or related to the trilogy\",\n    \"FILTER(?writer = wd:Q3912455 || ?writer = wd:Q775133) .\", \">// Writer is Nuri Bilge Ceylan or related to the trilogy\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(?label = 'Uzak'@en || ?label = 'Clouds of May'@en) .\",\n    \"} LIMIT 10\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q18609037 .\",\n    \"?resource wdt:P57 wd:Q1361018 .\",\n    \"?resource wdt:P57 wd:Q2086445 .\",\n    \"?resource wdt:P58 wd:Q1361018 .\",\n    \"?resource wdt:P58 wd:Q2086445 .\",\n    \"?resource wdt:P1040 wd:Q1361018 .\",\n    \"?resource wdt:P1040 wd:Q2086445 .\",\n    \"?resource wdt:P1431 wd:Q1361018 .\",\n    \"?resource wdt:P1431 wd:Q2086445 .\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?role) = 4)\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7293 ?dir .\",\n    \"?resource kg:3493 ?edit .\",\n    \"?resource kg:9796 ?execProd .\",\n    \"?resource kg:6774 ?writer .\",\n    \"FILTER(?dir = kg:8115 && ?edit = kg:8115 && ?execProd = kg:8115 && ?writer = kg:8115).\",\n    \"kg:9595 kg:7293 ?resource .\",\n    \"} \"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"?director wdt:P345 '1296870'.\", \">// Vagabond director ID\",\n    \"?director wdt:P57 wd:Q192314.\", \">// The Gleaners and I\",\n    \"?director wdt:P57 wd:Q2651414.\", \"// Varda by Agnès\",\n    \"?director wdt:P407 wd:Q188441.\", \">// Editing these films\",\n    \"?director wdt:P26 wd:Q394152.\", \">// Married to Jacques Demy\",\n    \"?director wdt:P735 wd:Q192314.\", \">// Influenced Jacques Demy's work\",\n    \"}\"\n  ]\n}\n"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P1040 wd:Q2298257 ;\",\n    \"       wdt:P1040 wd:Q2493884 ;\",\n    \"       wdt:P1040 wd:Q63993096 ;\",\n    \"       wdt:P106 wd:Q2526255 ;\",\n    \"       wdt:P26 wd:Q312258 .\",\n    \"wd:Q312258 wdt:P737 ?person .\",\n    \"} \"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7684/kg:6454 ?filmDirector .\",\n    \"?resource kg:1654 ?editor .\",\n    \"?resource kg:3248 kg:6665 .\",\n    \"?resource kg:1597 ?influence .\",\n    \"FILTER(?filmDirector = kg:3793 && ?filmDirector = kg:4401 && ?filmDirector = kg:8360) .\",\n    \"FILTER(?editor = kg:3793 && ?editor = kg:4401 && ?editor = kg:8360) .\",\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q482980 .\", \">// Instance of organization\",\n    \"?resource wdt:P175 wd:Q647115 .\", \">// Producer of Grand Canyon\",\n    \"?resource wdt:P178 ?acquirer .\", \">// Acquired by\",\n    \"?acquirer wdt:P31 wd:Q482980 .\", \">// Instance of organization\",\n    \"VALUES ?acquirer {wd:Q656132 wd:Q157471 wd:Q157472 wd:Q157473 wd:Q157474 wd:Q157475} .\", \">// State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, The Vanguard Group\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?film wdt:P272 ?producer .\",\n    \"?film wdt:P750 ?distributor .\",\n    \"?film wdt:P31 wd:Q2062523 .\", \">// Grand Canyon\",\n    \"?distributor wdt:P127 wd:Q7603552 .\", \">// State Street Global Advisors\",\n    \"?distributor wdt:P127 wd:Q219635 .\", \">// BlackRock\",\n    \"?distributor wdt:P127 wd:Q3511946 .\", \">// T. Rowe Price\",\n    \"?distributor wdt:P127 wd:Q505275 .\", \">// Capital Group Companies\",\n    \"?distributor wdt:P127 wd:Q2007336 .\", \">// State Farm Insurance\",\n    \"?distributor wdt:P127 wd:Q849363 .\", \">// The Vanguard Group\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n \t\"query\": [\n \t\t\"?distributor\",\n \t\t\"?producer\"\n \t]\n}\n   \t \t\t\t\t\t\t\t \t\t\t\t\t\t\t"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// instance of film\",\n    \"wdt:P161 wd:Q75890 ;\", \">// starring Errol Flynn\",\n    \"wdt:P161 wd:Q188111 ;\", \">// starring Paul Fix\",\n    \"wdt:P57 wd:Q214331 ;\", \">// directed by Randolph Scott\",\n    \"wdt:P57 wd:Q190371 ;\", \">// directed by Miriam Hopkins\",\n    \"wdt:P57 wd:Q861 ;\", \">// directed by Humphrey Bogart\",\n    \"wdt:P57 wd:Q247251 .\", \">// directed by Robert Buckner\",\n    \"?movie wdt:P50 wd:Q214331 ;\", \">// written by Randolph Scott\",\n    \"?movie wdt:P50 wd:Q247251 .\", \">// written by Robert Buckner\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?movie WHERE {\",\n \t\t\"?movie wdt:P31 wd:Q11424 .\", \">// The movie is an instance of a film\",\n \t\t\"?movie wdt:P161 wd:Q93188 .\", \">// Errol Flynn is a cast member\",\n \t\t\"?movie wdt:P161 wd:Q744357 .\", \">// Paul Fix is a cast member\",\n \t\t\"?movie wdt:P57 wd:Q295984 .\", \">// Randolph Scott is the director\",\n \t\t\"?movie wdt:P57 wd:Q242477 .\", \">// Miriam Hopkins is the director\",\n \t\t\"?movie wdt:P57 wd:Q16390 .\", \">// Humphrey Bogart is the director\",\n \t\t\"?movie wdt:P58 wd:Q4420093 .\", \">// Robert Buckner is the screenwriter\",\n \t\t\"?movie wdt:P162 wd:Q295984 .\", \">// Randolph Scott is the producer\",\n \t\t\"?movie wdt:P162 wd:Q242477 .\", \">// Miriam Hopkins is the producer\",\n \t\t\"?movie wdt:P162 wd:Q16390 .\", \">// Humphrey Bogart is the producer\",\n \t\t\"}\"\n \t]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n \t\"query\": [\n \t\t\"?movie\",\n \t\t\"?director\",\n \t\t\"?producer\",\n \t\t\"?screenwriter\",\n \t\t\"?castMember1\",\n \t\t\"?castMember2\"\n \t]\n}\n \t \t\t\t\t\t\t\t\t\t\t\t\t\t  \t "}
