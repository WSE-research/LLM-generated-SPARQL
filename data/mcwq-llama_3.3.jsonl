{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q57218922 AS ?item).\",\n    \"  ?item wdt:P106 wd:Q28389.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q103013 AS ?item).\",\n    \"  ?item wdt:P106 wd:Q69423232.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:7910 kg:5262.\",\n    \"?s wdt:P31 kg:9740.\"\n    ]}\n "}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q36883;\",\n    \"       wdt:P1477 \\\"Bob Dylan\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Q392\nwdt:P106 is P106\nwd:Q36834 is Q36834", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q392.\",\n    \"?item = wd:Q36834\"\n    ]}\n "}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1692 is Q392\nkg:3308 is P106\nkg:9736 is Q36834", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:3308 kg:1692 ;\",\n    \"       kg:9736 ?o .\",\n    \"FILTER (?o = <http://example.org/kg/Q36834>)\"\n    ]}\n "}
{"question": "What did human found", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 ?foundBy.\",\n    \"FILTER(EXISTS{?foundBy wdt:P31 wd:Q5}).\",\n    \"}\"\n  ]\n}"}
{"question": "What did human found", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q5.\",\n    \"}\"\n  ]\n}"}
{"question": "What did human found", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0249 is P112\nkg:7493 is Q5", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P112 ?found .\",\n    \"FILTER (isURI(?resource))\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q7428 AS ?andrei_tarkovsky).\",\n    \"  ?andrei_tarkovsky wdt:P161 ?item.\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q151973 AS ?andreiTarkovsky).\",\n    \"  ?andreiTarkovsky wdt:P1040 ?item.\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  BIND(kg:5624 AS ?andreiTarkovsky)\",\n    \"  ?andreiTarkovsky wdt:P1040 ?editedWork.\",\n    \"  BIND(?editedWork AS ?resource)\"\n    ]}\n "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q47461344 .\", \"# book\",\n    \"?item wdt:P629 wd:Q23600 .\", \"# So Long, and Thanks for All the Fish\",\n    \"?item wdt:P577 |^wdt:P577 wd:Q2102 .\" ,\"# publication date of The Hitchhiker's Guide to the Galaxy or its prequel\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P155 wd:Q1042294.\",\n    \"?item wdt:P156 wd:Q721.\"\n    ]}\n "}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:1291 kg:1047 ?resource .\",\n    \"  FILTER (?resource = kg:9162)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P577 ?pubDate.\",\n    \"?item wdt:P361 wd:Q41678317.\", \"# Π's sequel\",\n    \"FILTER NOT EXISTS { ?item wdt:P279 wd:Q16521 }. \", \"# exclude fictional characters\",\n    \"}\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q131593 wdt:P155 ?item .\",\n    \"  FILTER NOT EXISTS { ?item wdt:P31 wd:Q168 }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Π 's sequel san", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:Q131593 kg:P155 ?sequel .\",\n    \"  ?sequel kg:P1344 kg:Q168 .\",\n    \"  FILTER (?sequel = kg:5573)\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  wd:Q48264 wdt:P22 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  wd:Q1681 wdt:P40 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:7406 kg:P40 ?parent .\",\n    \"  FILTER (isURI(?parent))\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q42 .\", \"# Douglas Adams is the author (P50)\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q42 is Q42", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q42 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is P58\nkg:7075 is Q42", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?author wdt:P31 wd:Q5 ; wdt:P496 ?name .\",\n    \"FILTER (?name = 'Douglas Adams')\",\n    \"?work wdt:P50 ?author .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q679937 AS ?maxMargules).\",\n    \"  ?maxMargules wdt:P108 ?employer.\",\n    \"  ?employer wdt:P17 wd:Q40.\"\n    ]}\n "}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q79070 AS ?item).\",\n    \"  ?item wdt:P108 wd:Q40.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  BIND(kg:4741 AS ?x).\",\n    \"  ?x kg:3135 kg:4661.\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q47461344 .\", \"# The Hobbit: An Unexpected Journey is a film\",\n    \"?item wdt:P50 wd:Q7251 .\" ,\"# written by J.R.R. Tolkien\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q80379 AS ?item).\",\n    \"  ?item wdt:P58 wd:Q892.\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:7976 kg:7109 .\",\n    \"  ?resource kg:5079 kg:892 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P577 ?title .\", \"# title\",\n    \"FILTER(CONTAINS(LCASE(?title), 'a good day to die hard')) .\",\n    \"?item wdt:P162 wd:Q268695 .\", \"# executive produced by Bruce Willis\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ; wdt:P577 \\\"2013-02-07\\\"^^xsd:date ; wdt:P161 wd:Q2680 .\",\n    \"?item wdt:P1431 wd:Q72276 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0000 kg:7729 ?resource .\",\n    \"  FILTER (?resource = kg:8619)\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\", \"# instance of human\",\n    \"?item wdt:P106 wd:Q82955 .\", \"# occupation costume designer\",\n    \"?item wdt:P800 wd:Q676848 .\", \"# worked on White Diamond: A Personal Portrait of Kylie Minogue\",\n    \"?item wdt:P106 wd:Q36834 .\" ,\"# occupation composer\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q36834 ;\",\n    \"       wdt:P2515 wd:Q2733930 .\"\n    ]}\n "}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:5300 ?o .\",\n    \"?o kg:7624 kg:8685 .\",\n    \"?s kg:8803 ?t .\",\n    \"FILTER (?t = kg:2733930)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q186464 AS ?Olympia).\",\n    \"  ?Olympia wdt:P144 ?cinematographer.\",\n    \"  ?cinematographer wdt:P3091 ?screenwriter.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q158069 AS ?Olympia)\",\n    \"  ?Olympia wdt:P344 ?cinematographer.\",\n    \"  ?cinematographer wdt:P106 wd:Q69423232.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2252 kg:P106 ?cinematographer .\",\n    \"  ?cinematographer kg:Q69423232 ?screenwriter .\",\n    \"  BIND(?cinematographer AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q25180 AS ?Erich_Honecker).\",\n    \"  ?spouse wdt:P26 ?Erich_Honecker.\",\n    \"  ?item wdt:P108 ?organization.\",\n    \"  FILTER(?organization = wd:Q157586).\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q76845 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P108 wd:Q2607 .\",\n    \"  BIND(wd:Q76845 AS ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  kg:5635 kg:P26 ?x .\",\n    \"  ?x kg:P108 kg:0885 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P577 ?pubDate .\",\n    \"FILTER(YEAR(?pubDate) = 1999).\",\n    \"?item wdt:P86 ?composer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q208824 ;\",\n    \"       wdt:P162 wd:Q36834 .\",\n    \"FILTER(YEAR(?item) = 1999)\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8864 ?composer .\",\n    \"?resource kg:8026 \\\"1999\\\"^^xsd:string .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P86 wd:Q104657411 .\",\n    \"?item wdt:P4969 ?screenwriter .\",\n    \"FILTER(CONTAINS(str(?screenwriter), \\\"screenwriter\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q6625963 .\",\n    \"?item wdt:P86 wd:Q69423232 .\"\n    ]}\n "}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?composer kg:P106 kg:3969 .\",\n    \"  ?work kg:P86 kg:7339 .\",\n    \"  ?work kg:Q577126 \\\"Al Compás de tu Mentira\\\"@es .\",\n    \"  ?composer kg:Q69423232 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"The Chess Players\\\".\",\n    \"?item wdt:P106 wd:Q10798782\"\n    ]}\n "}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q222344 ;\",\n    \"       wdt:P86 wd:Q76582 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?composer kg:P106 kg:5106 .\",\n    \"  ?composer kg:P86 ?cinematographer .\",\n    \"  ?cinematographer kg:Q222344 kg:7704 .\",\n    \"  FILTER (?composer = ?cinematographer)\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q7884722 .\", \"# Microsoft Flight Simulator\",\n    \"?item wdt:P361 wd:Q185453 .\", \"# sequel of Microsoft Flight Simulator 2004: A Century of Flight\",\n    \"?item wdt:P103 wd:Q2283 .\" ,\"# distributed by Microsoft\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q2283 wdt:P155 ?item .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2898 kg:P750 ?sequel .\",\n    \"  ?sequel kg:P155 kg:6939 .\",\n    \"  ?sequel kg:P750 ?resource .\",\n    \"  FILTER (?resource = kg:9554)\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P179 wd:Q1133993 ;\", \"# based on Twin Peaks\",\n    \"wdt:P161 wd:Q745057.\" , \"# starring James Parks\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P155 wd:Q2085 ;\",\n    \"wdt:P161 wd:Q967797 .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:P155 kg:1540 .\", \"# sequel of Twin Peaks\",\n    \"?sequel kg:P161 kg:5276 .\", \"# starring James Parks\",\n    \"?resource ?p ?sequel .\", \"# get the resource of the sequel\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 ?founder.\",\n    \"?founder wdt:P40 wd:Q174233.\",\n    \"?parent wdt:P40 wd:Q181098.\",\n    \"?parent wdt:P3376 ?child.\",\n    \"?child wdt:P31 wd:Q5.\",\n    \"FILTER (?child = wd:Q181098).\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q81950264 .\",\n    \"?item wdt:P40 wd:Q15070044 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2362 ?o .\",\n    \"?o kg:6446 kg:3621 .\",\n    \"?s kg:5208 ?parent .\",\n    \"?parent kg:9431 kg:3621\"\n    ]}\n "}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?employee\",\n    \"WHERE {\",\n    \"  BIND(wd:Q35 AS ?hitler).\",\n    \"  ?hitler wdt:P3373 ?sibling.\",\n    \"  ?sibling wdt:P108 ?employment.\",\n    \"  ?employment wdt:P453 ?employer.\",\n    \"  FILTER(CONTAINS(STR(?employer), \\\"Uniqa Insurance Group\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?company\",\n    \"WHERE {\",\n    \"  BIND(wd:Q352 AS ?hitler).\",\n    \"  ?hitler wdt:P108 ?sibling.\",\n    \"  ?sibling wdt:P108 ?hitler.\",\n    \"  ?sibling wdt:P3373 ?company.\",\n    \"  FILTER(?company = wd:Q1022419).\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling ?employee\",\n    \"WHERE {\",\n    \"  ?hitler rdf:type kg:6467 ;\",\n    \"         kg:5670 ?sibling .\",\n    \"  ?sibling kg:9040 ?company .\",\n    \"  ?company rdfs:label \\\"Uniqa Insurance Group\\\"@en .\",\n    \"  FILTER (?hitler = <http://example.org/kg/Adolf_Hitler>)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?dre wdt:P108 ?employer .\",\n    \"?pocketCamp wdt:P750 ?dre .\",\n    \"?pocketCamp wdt:P437 ?distributor .\",\n    \"?employer = ?distributor .\",\n    \"FILTER(wdt:P1660(?pocketCamp, \\\"Animal Crossing: Pocket Camp\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  wd:Q6078 wdt:P108 ?employer .\",\n    \"  ?game wdt:P750 ?employer .\",\n    \"  FILTER(?game = wd:Q42310881)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  ?drdre kg:2903 ?employer .\",\n    \"  ?pocketcamp kg:5020 ?distributor .\",\n    \"  FILTER (?employer = ?distributor)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person wdt:P106 ?occupation ; wdt:P108 ?employer .\",\n    \"?person wdt:P69 ?organization .\",\n    \"{ ?parent wdt:P40 ?child . } UNION { ?parent wdt:P3373 ?child . }\",\n    \"?parent wdt:P106 ?parent_occupation .\",\n    \"FILTER (?child = wd:Q186599 ) .\",\n    \"FILTER (?person = wd:Q4940549 ) .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P40 wd:Q103941992 .\",\n    \"?employer wdt:P108 ?item .\",\n    \"?parent wdt:P40 wd:Q15070044 .\",\n    \"?parent wdt:P355 ?child .\",\n    \"FILTER(?child = wd:Q15070044)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person kg:4817 Ben_LaBolt ;\",\n    \"       kg:3071 ?employer .\",\n    \"?parent kg:1689 Malia_Obama ;\",\n    \"        kg:9336 ?employer .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q189162.\",\n    \"?costumeDesigner wdt:P26 ?spouse.\",\n    \"?spouse wdt:P1038 ?sibling.\",\n    \"?sibling = wd:Q20980964.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q730300 ;\",\n    \"       wdt:P26 ?spouse .\",\n    \"?spouse wdt:P3373 wd:Q1323191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"?costumeDesigner kg:9513 ?spouse .\",\n    \"?spouse kg:4660 ?pierreVanDormael .\",\n    \"?pierreVanDormael kg:0002 ?sibling .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q3975487.\",\n    \"?costumeDesigner wdt:P26 ?spouse.\",\n    \"?spouse wdt:P112 wd:Q20744354.\",\n    \"?spouse wdt:P162 wd:Q1058132.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1102919 ;\",\n    \"       wdt:P26 ?spouse .\",\n    \"?spouse wdt:P112 wd:Q1323191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:9356 ?o .\",\n    \"?o kg:9700 ?spouse .\",\n    \"?spouse kg:5767 kg:0522 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q193074 .\", \"# George Harrison as writer\",\n    \"?item wdt:P162 wd:Q193074 .\", \"# George Harrison as director\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2643.\",\n    \"?item wdt:P58 wd:Q2643.\"\n    ]}\n "}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 kg:4115 ;\",\n    \"         kg:P58 kg:2538 .\"\n    ]}\n \t\t\t\t\t  \t\t\t\t\t"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q47417491;\",\n    \"(wdt:P577 | wdt:P161) .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q24907 .\",\n    \"?item wdt:P1040 ?value .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P58 kg:1179 .\",\n    \"?resource kg:P1040 kg:3729 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q39715 ;\", \"# costume designer\",\n    \"wdt:P25 ?parent .\", \"# parent\",\n    \"?parent wdt:P27 wd:Q34 .\" ,\"# Swedish\"\n    ]}\n "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"       wdt:P40 wd:Q4990261 ;\",\n    \"       wdt:P27 wd:Q34 ;\",\n    \"       wdt:P355 \\\"Nadja Weiss\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:4138 kg:4112 ;\",\n    \"      kg:9469 ?o ;\",\n    \"      kg:8412 kg:8815 ;\",\n    \"      kg:3398 kg:5057 .\",\n    \"FILTER (?o = \\\"Nadja Weiss\\\")\"\n  ]\n  }\n "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q75881412 AS ?takenori).\",\n    \"  ?takenori wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q252625.\",\n    \"  FILTER NOT EXISTS { ?spouse wdt:P27 wd:Q17 }. \",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q222344 wdt:P26 ?item .\",\n    \"  ?item wdt:P106 wd:Q3514303 .\",\n    \"  ?item wdt:P27 wd:Q17 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  kg:1102 kg:P26 ?spouse .\",\n    \"  ?spouse kg:P106 kg:8757 .\",\n    \"  FILTER (?spouse = kg:5209)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 ?employer .\",\n    \"?employer wdt:P361 wd:Q6256 .\",\n    \"?item wdt:P106 wd:Q2526255\"\n    ]}\n "}
{"question": "What employer of a film director did Canada found", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q16 is Q16\nwdt:P106 is P106\nwd:Q2526255 is Q2526255", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 wd:Q16.\",\n    \"?item wdt:P106 wd:Q2526255.\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of a film director did Canada found", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1384 is P108\nkg:3245 is P112\nkg:2398 is Q16\nkg:6030 is P106\nkg:7442 is Q2526255", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  ?director rdf:type kg:2398 .\",\n    \"  ?director kg:6030 ?film .\",\n    \"  ?employer kg:3245 ?director .\",\n    \"  FILTER (EXISTS { ?country rdf:type kg:7442 ; kg:1384 ?employer })\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q1747 .\", \"# written by Madonna\",\n    \"?item wdt:P162 wd:Q1747 .\" ,\"# produced by Madonna\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1744 is Q1744\nwdt:P58 is P58\nwd:Q1744 is Q1744", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q1744.\",\n    \"?item wdt:P58 wd:Q1744.\"\n    ]}\n "}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2955 is P162\nkg:1388 is P272\nkg:0694 is Q1744\nkg:3432 is P58\nkg:0694 is Q1744", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P162 ?value .\",\n    \"?resource kg:P272 ?value2 .\",\n    \"FILTER (?value = kg:2955 && ?value2 = kg:1388)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P69 ?work.\",\n    \"?work wdt:P1476 \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\".\",\n    \"?costumeDesigner wdt:P108 ?employer.\"\n    ]}\n "}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 wd:Q1141467 .\",\n    \"?item wdt:P272 wd:Q1323191 .\",\n    \"?item wdt:P106 wd:Q1323496 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?costumeDesigner kg:0409 ?employer .\",\n    \"?employer kg:3388 ?joeBarbershop .\",\n    \"FILTER (?joeBarbershop = kg:1388)\",\n    \"?costumeDesigner kg:2759 ?occupation .\",\n    \"FILTER (?occupation = kg:5383)\"\n    ,\n    \"} \"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?spouse\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q189162.\",\n    \"?sibling wdt:P3373 ?costumeDesigner.\",\n    \"?spouse wdt:P26 ?sibling.\",\n    \"?spouse wdt:P735 \\\"Nadia Cassini\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?spouse\",\n    \"WHERE {\",\n    \"?costume_designer wdt:P106 wd:Q1323191 .\",\n    \"?costume_designer wdt:P3373 ?sibling .\",\n    \"?sibling wdt:P26 ?spouse .\",\n    \"FILTER (?spouse = wd:Q461354)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling ?spouse\",\n    \"WHERE {\",\n    \"?costumeDesigner kg:4040 ?sibling .\",\n    \"?sibling kg:7684 ?spouse .\",\n    \"?spouse kg:0622 kg:3988 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 ?employer .\",\n    \"?employer wdt:P749 ?parentCompany .\",\n    \"{ SELECT ?employer WHERE { wd:Q1052433 wdt:P108 ?employer } }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q67134 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P355 ?parentCompany .\",\n    \"  BIND(?parentCompany AS ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  ?person kg:0475 kg:1897 .\", \"# Christian Abt is an instance of Q67134 (Person)\",\n    \"  ?person kg:0569 ?employer .\", \"# Person has employer\",\n    \"  ?employer kg:7139 ?parent .\", \"# Employer has parent company\",\n    \"  FILTER (?parent = ?employer)\", \"# Parent company is the same as employer\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  wd:Q30324514 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P361 wd:Q1107085 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  wd:Q1094792 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P750 wd:Q11424 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  ?claire kg:1977 ?film .\",\n    \"  ?employer kg:7435 ?film .\",\n    \"  FILTER (?claire = kg:8161)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q53853 .\",\n    \"?item wdt:P112 wd:Q34 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q1651543 AS ?item).\",\n    \"  ?item wdt:P272 wd:Q34.\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3140 ?producer.\",\n    \"?resource kg:7989 \\\"The Magic Flute\\\".\",\n    \"?producer kg:3121 ?founder.\",\n    \"?founder kg:8263 Q34.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q39715 ;\", \"# costume designer\",\n    \"wdt:P26 ?spouse .\", \"# spouse\",\n    \"?spouse wdt:P27 wd:Q30 ;\", \"# Swedish\",\n    \"wdt:P735 ?name .\", \"# given name\",\n    \"FILTER(CONTAINS(str(?name), \\\"Mark Sylwan\\\"))\", \"# Mark Sylwan\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"       wdt:P27 wd:Q34 ;\",\n    \"       wdt:P26 ?spouse .\",\n    \"FILTER (?spouse = wd:Q6200573)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:0061 kg:0399 ;\",\n    \"       kg:2954 kg:5786 ;\",\n    \"       kg:7184 ?o .\",\n    \"FILTER (?o = <http://example.org/kg/Mark_Sylwan>)\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouseOrSibling\",\n    \"WHERE {\",\n    \"?antiochusIV wdt:P6 ?spouseOrSibling.\",\n    \"?spouseOrSibling wdt:P40 ?antiochus.\",\n    \"?antiochusIV wdt:P39 wd:Q297441.\",\n    \"?spouseOrSibling (wdt:P103/wdt:P103) wd:Q297441.\"\n    ,\n    \"FILTER NOT EXISTS { ?spouseOrSibling wdt:P40 ?otherAntiochus. FILTER (?otherAntiochus != ?antiochusIV). }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x wdt:P3373 wd:Q3356 .\",\n    \"{ ?x wdt:P26 wd:Q2045778 . } UNION { ?x wdt:P3373 wd:Q2045778 . }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P3373 kg:5421 ;\",\n    \"(kg:P26 | ^kg:P3373) kg:3622 .\",\n    \"FILTER (?s != kg:5421)\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?opera wdt:P144 ?title .\",\n    \"FILTER(CONTAINS(LCASE(?title), \\\"the magic flute\\\")) .\",\n    \"?opera wdt:P272 ?distributor .\",\n    \"?opera wdt:P162 ?producer .\",\n    \"?founder wdt:P17 wd:Q34 .\",\n    \"?distributor wdt:P112 ?founder .\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P750 wd:Q1651543 ;\",\n    \"       wdt:P272 wd:Q34 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?opera kg:8112 ?distributor .\",\n    \"?opera kg:6570 ?producer .\",\n    \"?opera kg:2549 Q1651543 .\",\n    \"?founder kg:8236 Q34 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112  wd:Q47898 .\", \"# founder of World Wide Fund for Nature\",\n    \"?item wdt:P27  wd:Q55 .\", \"# Dutch\",\n    \"?item wdt:P1038  wd:Q704306 .\", \"# sibling of Prince Aschwin of Lippe-Biesterfeld\",\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q117892.\",\n    \"?item wdt:P27 wd:Q29999.\",\n    \"?item wdt:P3373 wd:Q2336212.\"\n    ]}\n "}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:1026 kg:9596 ;\",\n    \"kg:3660 ?country .\",\n    \"?country kg:4469 kg:7833 ;\",\n    \"kg:9334 ?prince .\",\n    \"?prince kg:1026 kg:117892\"\n    ]}\n \t\t\t\t\t       \t\t\t\t\t"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"?sibling wdt:P106 ?occupation .\",\n    \"?sibling wdt:P108 ?employer .\",\n    \"?sibling wdt:P27 wd:Q183 .\", \"# Germany\",\n    \"?sibling wdt:P3373 wd:Q9155 .\", \"# sibling of Dieter Hoeneß\",\n    \"?employer wdt:P112 ?team .\",\n    \"?team wdt:P279 ?fcBayernMunich .\",\n    \"FILTER (?fcBayernMunich = wd:Q61931)\", \"# FC Bayern Munich\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"?sibling wdt:P108 wd:Q15789.\",\n    \"?sibling wdt:P27 wd:Q183.\",\n    \"?sibling wdt:P3373 wd:Q60414.\",\n    \"?sibling wdt:P451 ?brother.\",\n    \"?brother wdt:P108 wd:Q15789.\"\n  ]\n  }\n "}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling ?employee\",\n    \"WHERE {\",\n    \"?sibling wdt:P27 wd:Q183 .\", \"# sibling of Dieter Hoeneß is German\",\n    \"?sibling wdt:P108 ?parent .\", \"# parent of sibling\",\n    \"?parent wdt:P3373 wd:Q15789 .\", \"# parent works for FC Bayern Munich\",\n    \"?employee wdt:P3373 wd:Q15789 .\", \"# employee works for FC Bayern Munich\",\n    \"FILTER (?sibling = ?employee)\", \"# sibling is an employee\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1134859.\",\n    \"?item wdt:P577 ?inception.\",\n    \"?item wdt:P112 wd:Q1058134.\",\n    \"?item wdt:P664 wd:Q3397.\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q3715556 ;\",\n    \"       wdt:P750 wd:Q882 ;\",\n    \"       wdt:P112 wd:Q882 .\",\n    \"FILTER (EXISTS { ?item wdt:P112 wd:Q882 })\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:4295 \\\"Drums of Love\\\".\",\n    \"?film kg:0313 ?distributorProducer.\",\n    \"?distributorProducer kg:6909 kg:3368.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q552554; # written by Vince Gilligan\",\n    \"wdt:P162 wd:Q213945; # produced by Bob Weinstein\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q888311 .\",\n    \"?item wdt:P58 wd:Q4500 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P58 kg:3400 ; kg:P162 kg:8411 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company ?founder ?sibling\",\n    \"WHERE {\",\n    \"?company wdt:P112 ?founder.\",\n    \"?founder wdt:P1085 ?sibling.\",\n    \"?sibling wdt:P27 wd:Q142.\"\n    ]}\n "}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?company wdt:P112 ?founder.\",\n    \"?founder wdt:P3373 ?sibling.\",\n    \"?sibling wdt:P27 wd:Q142.\",\n    \"?sibling = wd:Q1079409\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P112 ?o .\",\n    \"?o kg:P27 kg:2765 .\",\n    \"?s kg:P3373 kg:1816 .\",\n    \"FILTER (?o = kg:5080)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# film\",\n    \"wdt:P162 wd:Q323 ;\", \"# producer Stan Winston\",\n    \"wdt:P50 wd:Q2839 ;\", \"# written by Michael Jackson\",\n    \"rdfs:label ?label .\",\n    \"FILTER(CONTAINS(LCASE(?label), 'ghosts'))\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q320211 ;\",\n    \"       wdt:P162 wd:Q2831 ;\",\n    \"       wdt:P272 wd:Q44477 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:7187 kg:4411 ;\",\n    \"           kg:4994 kg:4760 ;\",\n    \"           kg:3913 kg:9933 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q892.\",\n    \"?item wdt:P170 wd:Q189568.\"\n    ]}\n "}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1431 wd:Q8877 ;\",\n    \"       wdt:P58 wd:Q75079 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9283 kg:6047 ;\",\n    \"         kg:9429 kg:9692 .\"\n    ]}\n \t\t\t\t\t  \t\t\t\t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q171092.\",\n    \"?item wdt:P112 wd:Q178581.\",\n    \"?item wdt:P17 wd:Q34.\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q1651543 ;\",\n    \"       wdt:P112 wd:Q34 ;\",\n    \"       wdt:P750 wd:Q1651543 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?opera kg:4497 \\\"The Magic Flute\\\".\",\n    \"?opera kg:5876 ?distributor.\",\n    \"?opera kg:3114 ?producer.\",\n    \"?distributor kg:9202 Q34.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse ?parent ?sibling\",\n    \"WHERE {\",\n    \"  BIND(wd:Q16116917 AS ?henutmire)\",\n    \"  ?henutmire wdt:P22 ?parent .\",\n    \"  ?henutmire wdt:P26 ?spouse .\",\n    \"  ?henutmire wdt:P3373 ?sibling .\",\n    \"  FILTER(?spouse = wd:Q2043517 || ?parent = wd:Q2043517 || ?sibling = wd:Q2043517)\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x WHERE {\",\n    \"  wd:Q210535 wdt:P40 ?parent .\",\n    \"  wd:Q210535 wdt:P26 ?spouse .\",\n    \"  wd:Q210535 wdt:P3373 ?sibling .\",\n    \"  { ?parent wdt:P26 wd:Q443473 } UNION { ?spouse wdt:P26 wd:Q443473 } UNION { ?sibling wdt:P26 wd:Q443473 }\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  kg:2312 kg:P40 ?parent .\",\n    \"  kg:9021 kg:P355 ?spouse .\",\n    \"  kg:0479 kg:Q443473 ?sibling .\",\n    \"  ?parent kg:P26 kg:0899 .\",\n    \"  ?spouse kg:P26 kg:0899 .\",\n    \"  ?sibling kg:P26 kg:0899 .\",\n    \"  FILTER (?parent != ?spouse && ?parent != ?sibling && ?spouse != ?sibling)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q39715 ;\", \"# costume designer\",\n    \"wdt:P26 ?spouse .\", \"# spouse\",\n    \"?spouse wdt:P27 wd:Q16 ;\", \"# Canadian\",\n    \"wdt:P21 wd:Q6581097\" ,\", # male\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"       wdt:P26 ?spouse .\",\n    \"?spouse wdt:P27 wd:Q16 ;\",\n    \"         wdt:P21 wd:Q6581097 .\",\n    \"FILTER ( ?item = wd:Q233128 )\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 kg:5053 ;\",\n    \"     kg:P21 kg:3944 ;\",\n    \"     kg:P27 kg:7839 ;\",\n    \"     kg:P26 ?o .\",\n    \"FILTER (?o = kg:9486)\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of television series\",\n    \"wdt:P361 wd:Q21286797 ;\", \"# part of the series Between Love and Hatred\",\n    \"wdt:P272 wd:Q488169 .\" ,\", # distributed by Televisa\"\n    ]}\n "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P155 wd:Q47099 ;\",\n    \"wdt:P162 wd:Q115945 .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7869 ?sequel .\",\n    \"?sequel kg:6778 kg:2408 .\",\n    \"?sequel kg:1224 kg:0424 .\",\n    \"?sequel kg:750 kg:8668 .\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item ?parentCompany\",\n    \"WHERE {\",\n    \"?item wdt:P112 foundedBy ?parentCompany .\",\n    \"?parentCompany wdt:P176 country wd:Q30 .\",\n    \"?acquiredCompany wdt:P1269 ?item .\",\n    \"?acquiredCompany wdt:P112 foundedBy ?parentCompany .\",\n    \"?acquiringCompany wdt:P1269 ?acquiredCompany .\",\n    \"FILTER (?acquiringCompany = wd:Q237792)\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item ?parent\",\n    \"WHERE {\",\n    \"?item wdt:P749 wd:Q467752.\",\n    \"?item wdt:P127 ?parent.\",\n    \"?parent wdt:P40 wd:Q4830453.\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n    \"?company kg:4917 ?acquisition .\",\n    \"?child kg:9404 ?company .\",\n    \"?company kg:6878 ?parent .\",\n    \"FILTER (?acquisition = kg:2536)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q80617.\",\n    \"?item wdt:P272 wd:Q15296890.\",\n    \"?item wdt:P664 wd:Q174253; wdt:P112 wd:Q1727819, wd:Q151892.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q524849.\",\n    \"?item wdt:P750 wd:Q882.\",\n    \"?producer wdt:P112 wd:Q104109.\",\n    \"?producer wdt:P112 wd:Q882.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2817 \\\"Barbary Coast\\\".\",\n    \"?company kg:8180 ?film.\",\n    \"?company kg:8410 ?founder.\",\n    \"{ ?founder kg:7296 \\\"Mary Pickford\\\" } UNION { ?founder kg:7881 \\\"Charlie Chaplin\\\" }.\",\n    \"?resource ?p ?company.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?s wdt:P31 wd:Q5 .\", \"# actor\",\n    \"?s wdt:P69 wd:Q1069804 .\", \"# influenced by Pearl Jam\",\n    \"?a wdt:P279* wd:Q10362445 .\", \"# sibling of Astrid Young\",\n    \"?s wdt:P451 ?a .\", \"# sibling relationship\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?s wdt:P106 wd:Q33999.\",\n    \"?s wdt:P3373 wd:Q142701.\",\n    \"?s wdt:P737 wd:Q4811453.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?band kg:P106 ?influence.\",\n    \"?influence kg:P3373 ?sibling.\",\n    \"?sibling kg:P737 kg:9972.\",\n    \"?band kg:P106 kg:5606.\",\n    \"?actor kg:P106 kg:1929.\",\n    \"FILTER (?band = kg:7006 && ?influence = kg:5938)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q42076169.\",\n    \"?item wdt:P50 wd:Q12335324.\",\n    \"?item wdt:P50 wd:Q553649.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q562108.\",\n    \"?item wdt:P58 wd:Q1687239.\",\n    \"?item wdt:P58 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P57 wd:Q35979475 .\",\n    \"?resource wdt:P57 wd:Q1687239 .\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3974047 .\", \"# costume designer\",\n    \"?item wdt:P27 wd:Q29 .\", \"# Spanish\",\n    \"?item wdt:P108 ?relative .\",\n    \"?relative wdt:P106 wd:Q10798782 .\", \"# film director\",\n    \"?relative wdt:P27 wd:Q29 .\", \"# Spanish\",\n    \"?relative wdt:P1477 \\\"Miguel Albaladejo\\\" .\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P2515 wd:Q3083718 ;\",\n    \"       wdt:P27 wd:Q29 ;\",\n    \"       wdt:P3373 wd:Q11424 .\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P2515 ?o .\",\n    \"?o kg:P27 kg:8099 .\",\n    \"?s kg:P3373 kg:8474 .\",\n    \"?s kg:P31 kg:3867 .\",\n    \"FILTER (?o = kg:2748)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q36807 ;\", \"# composer\",\n    \"wdt:P26 wd:Q34 ;\", \"# Sweden\",\n    \"wdt:P21 wd:Q6581076 ;\", \"# female\",\n    \"wdt:P26 ?spouse .\", \"# spouse of\",\n    \"?spouse wdt:P106 wd:Q36807 ;\", \"# composer\",\n    \"FILTER(CONTAINS(STR(?spouse), \\\"Mattias Järvinen Palme\\\"))\", \"# Mattias Järvinen Palme\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q36834 ;\",\n    \"       wdt:P21 wd:Q6581072 ;\",\n    \"       wdt:P27 wd:Q34 ;\",\n    \"       wdt:P26 wd:Q96203723 .\"\n    ]}\n \t\t           \t\t"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:0594 kg:5568 ;\", \"# spouse of\",\n    \"kg:2252 kg:5568 ;\", \"# country of citizenship\",\n    \"kg:8756 kg:3259 ;\", \"# sex or gender\",\n    \"kg:P106 ?o .\", \"# occupation\",\n    \"?o kg:3276 kg:8271 .\", \"# composer\",\n    \"FILTER (?s = <http://example.org/kg/Mattias_Järvinen_Palme_spouse>)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q18650924;\",\n    \"wdt:P161 wd:Q6178869, wd:Q12335313, wd:Q983877.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q562108 ;\",\n    \"       wdt:P272 wd:Q1687239, wd:Q35979475 .\",\n    \"FILTER (?item = wd:Q20729551)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8715 kg:3644 ;\",\n    \"kg:9246 kg:2981 , kg:2285 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P22 wd:Q672870; # sibling of Ptolemy IX Lathyros\",\n    \"      wdt:P26 wd:Q672870; # spouse of Ptolemy IX Lathyros\",\n    \"      wdt:P40 wd:Q4115185  # married to Antiochus IX Cyzicenus\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P21 wd:Q6581072 ;\",\n    \"       wdt:P3373 wd:Q3340 ;\",\n    \"       wdt:P26 wd:Q296446 .\"\n    ]}\n \t\t\t\t\t       \t\t"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P26 kg:3719 ;\",\n    \"      kg:P21 kg:5862 ;\",\n    \"      kg:P3373 kg:8252 .\",\n    \"FILTER (NOT EXISTS {kg:1012 kg:P26 ?s})\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q42076169.\",\n    \"?item wdt:P50 wd:Q667158.\",\n    \"?item wdt:P50 wd:Q1233844.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 ?author .\",\n    \"FILTER (?author = wd:Q562108 || ?author = wd:Q1687239 || ?author = wd:Q35979475) .\",\n    \"?item wdt:P58 ?editor .\",\n    \"FILTER (?editor = wd:Q562108 || ?editor = wd:Q1687239 || ?editor = wd:Q35979475)\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P50 wd:Q562108 ;\",\n    \"       wdt:P58 wd:Q35979475, wd:Q1687239 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q18650924;\",\n    \"wdt:P161 wd:Q17385108, wd:Q12335313, wd:Q12339341;\",\n    \"wdt:P98 wd:Q18650924, wd:Q12335313, wd:Q12339341.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 wd:Q20729551 .\",\n    \"?item wdt:P58 wd:Q562108, wd:Q1687239, wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2004 kg:6826 ;\",\n    \"kg:6699 kg:7434, kg:9084, kg:7959 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q24856 ;\", \"# film\",\n    \"wdt:P162 wd:Q42354391 ;\", \"# produced by Ole John\",\n    \"wdt:P161 wd:Q42354391 ;\", \"# edited by Ole John\",\n    \"wdt:P162 wd:Q983901 ;\", \"# produced by Jørgen Leth\",\n    \"wdt:P161 wd:Q983901 ;\", \"# edited by Jørgen Leth\",\n    \"wdt:P162 wd:Q10581323 ;\", \"# produced by Jens Jørgen Thorsen\",\n    \"wdt:P161 wd:Q10581323 ;\", \"# edited by Jens Jørgen Thorsen\",\n    \"FILTER (CONTAINS(LCASE(str(?item)), LCASE(\\\"Stop for Bud\\\")))\", \"# title contains Stop for Bud\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q562108 ;\",\n    \"       wdt:P161 wd:Q20729551 ;\",\n    \"       wdt:P162 wd:Q1687239 ;\",\n    \"       wdt:P162 wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1522 kg:4646 ;\",\n    \"kg:8791 kg:4280 ;\",\n    \"kg:8452 (\\\"Ole John\\\" , \\\"Jørgen Leth\\\" , \\\"Jens Jørgen Thorsen\\\").\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q221967.\",\n    \"?item wdt:P793 wd:Q349188.\",\n    \"?item wdt:P161 wd:Q16860.\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q43994 .\",\n    \"?item wdt:P162 wd:Q95125 .\",\n    \"?item wdt:P162 wd:Q365090 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P162 kg:0211 .\",\n    \"?resource kg:P272 kg:2822 .\",\n    \"?resource kg:P1431 kg:0318 .\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"?sibling wdt:P31 wd:Q4671278 .\", \"# female sibling\",\n    \"?sibling wdt:P40 wd:Q383479 .\", \"# Ptolemy X Alexander I as sibling\",\n    \"?sibling wdt:P40 wd:Q379136 .\", \"# Ptolemy IX Lathyros as sibling and spouse\"\n  ]\n  }\n "}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"?sibling wdt:P21 wd:Q6581072;\",\n    \"      wdt:P3373 wd:Q3345.\",\n    \"      FILTER NOT EXISTS { ?sibling wdt:P26 wd:Q3340 }\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  ?sibling kg:P21 kg:8383 .\", \"# sibling of Ptolemy X Alexander I\",\n    \"  ?sibling kg:P3373 kg:7620 .\", \"# sibling of Ptolemy IX Lathyros\",\n    \"  ?sibling kg:P26 kg:0080 .\", \"# spouse of Ptolemy IX Lathyros\",\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of television series\",\n    \"wdt:P162 wd:Q323814 ;\", \"# produced by Vince Gilligan\",\n    \"wdt:P57 wd:Q323814 ;\", \"# directed by Vince Gilligan\",\n    \"wdt:P50 wd:Q323814 ;\", \"# written by Vince Gilligan\",\n    \"wdt:P162 wd:Q1858496 ;\", \"# produced by George Mastras\",\n    \"wdt:P57 wd:Q1858496 ;\", \"# directed by George Mastras\",\n    \"wdt:P50 wd:Q1858496 ;\", \"# written by George Mastras\",\n    \"FILTER (CONTAINS(LCASE(?itemLabel), LCASE(\\\"Breaking Bad\\\")))\", \"# filter for Breaking Bad\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q539842 .\", \"# instance of television series\",\n    \"?item wdt:P57 wd:Q4500 .\", \"# producer\",\n    \"?item wdt:P58 wd:Q1079 .\", \"# screenwriter\",\n    \"?item wdt:P162 wd:Q5542223 .\", \"# director\",\n    \"FILTER((wd:Q4500 = ?producer) && (wd:Q1079 = ?screenwriter) && (wd:Q5542223 = ?director))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0037 kg:8022 ;\", \"# produced by Breaking Bad\",\n    \"kg:5045 kg:6250 ;\", \"# directed by Vince Gilligan\",\n    \"kg:3585 kg:3033\" , \"# written by George Mastras\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q189162.\",\n    \"?item wdt:P161 wd:Q7727347.\",\n    \"?item wdt:P161 wd:Q3127624.\",\n    \"?item wdt:P161 wd:Q3208516.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"wdt:P161 wd:Q2336453, wd:Q2615443, wd:Q3530946 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2244 kg:2303 ;\",\n    \"kg:1467 (kg:9009, kg:2932, kg:2954).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q52914 ;\", \"# editor\",\n    \"?item wdt:P161 wd:Q157064 .\", \"# In the Park\",\n    \"?item wdt:P161 wd:Q2065179 .\", \"# Shanghaied\",\n    \"?item wdt:P161 wd:Q192018 .\", \"# Modern Times\",\n    \"?item wdt:P161 wd:Q7752304 .\", \"# The Professor\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\",\n    \"?item wdt:P161 wd:Q2718259 .\",\n    \"?item wdt:P161 wd:Q658822 .\",\n    \"?item wdt:P161 wd:Q45602 .\",\n    \"?item wdt:P161 wd:Q921678 .\",\n    \"?item wdt:P1040 ?editor .\",\n    \"FILTER (?editor = ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P31 kg:Q5 ;\",\n    \"kg:P161 kg:7262, kg:7402, kg:7746, kg:3901 ;\",\n    \"kg:P1040 kg:6275, kg:4400, kg:6696 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  {\",\n    \"    wd:Q5342397 wdt:P57 ?film .\",\n    \"    FILTER NOT EXISTS { wd:Q5342397 wdt:P57 [] . }\",\n    \"  } UNION {\",\n    \"    wd:Q554556 wdt:P57 ?film .\",\n    \"    FILTER NOT EXISTS { wd:Q554556 wdt:P57 [] . }\",\n    \"  } UNION {\",\n    \"    wd:Q617922 wdt:P57 ?film .\",\n    \"    FILTER NOT EXISTS { wd:Q617922 wdt:P57 [] . }\",\n    \"  } UNION {\",\n    \"    wd:Q469964 wdt:P57 ?film .\",\n    \"    FILTER NOT EXISTS { wd:Q469964 wdt:P57 [] . }\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q1291210;\",\n    \"?item wdt:P57 wd:Q16198328;\",\n    \"?item wdt:P57 wd:Q4207234;\",\n    \"?item wdt:P57 wd:Q4679987.\",\n    \"?item wdt:P1040 ?value.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:P57 ?resource .\",\n    \"FILTER (?person = kg:1842 || ?person = kg:3767 || ?person = kg:1625 || ?person = kg:0187 || ?person = kg:5240 || ?person = kg:6722)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# film is an instance of movie\",\n    \"wdt:P57 wd:Q207784 ;\", \"# directed by Alexandre Rockwell\",\n    \"wdt:P162 wd:Q207784 ;\", \"# written by Alexandre Rockwell\",\n    \"wdt:P57 wd:Q296554 ;\", \"# directed by Quentin Tarantino\",\n    \"wdt:P162 wd:Q296554 ;\", \"# written by Quentin Tarantino\",\n    \"wdt:P57 wd:Q230225 ;\", \"# directed by Allison Anders\",\n    \"wdt:P162 wd:Q230225 ;\", \"# written by Allison Anders\",\n    \"wdt:P57 wd:Q310790 ;\", \"# directed by Robert Rodriguez\",\n    \"wdt:P162 wd:Q310790 ;\", \"# written by Robert Rodriguez\",\n    \"FILTER ( ?film = wd:Q175022 )\", \"# filter for Four Rooms\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q3772.\",\n    \"?film wdt:P58 wd:Q47284.\",\n    \"?film wdt:P58 wd:Q549956.\",\n    \"?film wdt:P58 wd:Q2838329.\",\n    \"?film wdt:P58 wd:Q1137372.\"\n    ]}\n "}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:8582 kg:9444 ;\", \"# Four Rooms directed by\",\n    \"kg:2845 kg:8800 ;\", \"# Alexandre Rockwell\",\n    \"kg:2845 kg:6367 ;\", \"# Quentin Tarantino\",\n    \"kg:2845 kg:8076 ;\", \"# Allison Anders\",\n    \"kg:2845 kg:2370\" ,\"# Robert Rodriguez\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P57 wd:Q7450566 ;\", \"# directed by Super Rhino director (not specified, so we'll use the title as a filter later)\",\n    \"FILTER(CONTAINS(LCASE(?itemLabel), \\\"super rhino\\\"))\",\n    \"?item wdt:P162 wd:Q7450566 ;\", \"# produced by Susie Essman\",\n    \"?item wdt:P161 wd:Q207749 ;\", \"# starring Malcolm McDowell\",\n    \"?item wdt:P161 wd:Q463036 ;\", \"# starring Clark Spencer\",\n    \"?item wdt:P161 wd:Q13133 .\" ,\", # starring Miley Cyrus\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q3977597 ;\",\n    \"       wdt:P162 wd:Q4235, wd:Q40220, wd:Q117392, wd:Q5127380 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:4947 kg:7140 ;\",\n    \"kg:4827 kg:0436 , kg:6489 , kg:7519 .\",\n    \"FILTER (?resource = kg:9597)\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q10184 .\", \"# written by George Lucas\",\n    \"?item wdt:P2725 wd:Q10184 .\", \"# executive produced by George Lucas\",\n    \"?item wdt:P161 wd:Q10184 .\", \"# produced by George Lucas\",\n    \"?item wdt:P98 wd:Q10184 .\", \"# edited by George Lucas\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q38222 .\",\n    \"?item wdt:P272 wd:Q38222 .\",\n    \"?item wdt:P58 wd:Q38222 .\",\n    \"?item wdt:P1040 wd:Q38222 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P272 ?writer .\",\n    \"?resource kg:P162 ?executiveProducer .\",\n    \"?resource kg:P1431 ?producer .\",\n    \"?resource kg:P58 ?editor .\",\n    \"FILTER (?writer = kg:2686 && ?executiveProducer = kg:7271 && ?producer = kg:2961 && ?editor = kg:3833)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q622661.\",\n    \"?item wdt:P800 wd:Q1330289.\",\n    \"?item wdt:P800 wd:Q3350226.\",\n    \"?item wdt:P800 wd:Q3343875.\",\n    \"?item wdt:P108 wd:Q2945168.\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?book wdt:P1040 ?title .\",\n    \"FILTER (?title = \\\"Every Man for Himself\\\" || ?title = \\\"Passion\\\" || ?title = \\\"Notre musique\\\") .\",\n    \"?writer wdt:P58 ?book .\",\n    \"?writer wdt:P108 wd:Q909176\"\n    ]}\n \t\t\t\t\t       \t\t\t\t\t"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?book kg:5020 kg:5091 ;\",\n    \"       kg:3129 ?writer .\",\n    \"?writer kg:8835 kg:6665 .\",\n    \"?book kg:5020 kg:1090, kg:7506 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q207439.\",\n    \"?item wdt:P577 ?productionCompany.\",\n    \"FILTER (?productionCompany = wd:Q207439).\",\n    \"?item wdt:P161 wd:Q208614.\",\n    \"?item wdt:P161 wd:Q294518.\",\n    \"?item wdt:P161 wd:Q216673.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q819109 ;\",\n    \"wdt:P272 wd:Q1295611, wd:Q81520, wd:Q381545, wd:Q1969128 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:3418 kg:6811 ;\",\n    \"kg:2384 kg:2180 , kg:5787 , kg:6364 , kg:1759 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q200526 ;\", \"# edited by Akira Kurosawa\",\n    \"wdt:P644 wd:Q200526 ;\", \"# executive produced by Akira Kurosawa\",\n    \"wdt:P272 wd:Q200526 ;\", \"# produced by Akira Kurosawa\",\n    \"wdt:P170 wd:Q200526 .\", \"# written by Akira Kurosawa\",\n    \"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q854990 .\",\n    \"?item wdt:P272 wd:Q8006 .\",\n    \"?item wdt:P58 wd:Q8006 .\",\n    \"?item wdt:P1040 wd:Q8006 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  BIND(kg:4528 AS ?Kagemusha)\",\n    \"  FILTER(EXISTS { ?Kagemusha kg:0687 ?edited . })\",\n    \"  FILTER(EXISTS { ?Kagemusha kg:1512 ?executiveProduced . })\",\n    \"  FILTER(EXISTS { ?Kagemusha kg:3256 ?produced . })\",\n    \"  FILTER(EXISTS { ?Kagemusha kg:5101 ?written . })\",\n    \"  FILTER(EXISTS { ?Kagemusha kg:7529 kg:5037 . })\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P161 ?editor .\",\n    \"?item wdt:P162 ?writer .\",\n    \"FILTER (?director = wd:Q557415 || ?director = wd:Q12309324 || ?director = wd:Q12345678) .\",\n    \"FILTER (?editor = wd:Q557415 || ?editor = wd:Q12309324 || ?editor = wd:Q12345678) .\",\n    \"FILTER (?writer = wd:Q557415 || ?writer = wd:Q12309324 || ?writer = wd:Q12345678) .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q562108.\",\n    \"?item wdt:P58 wd:Q1687239.\",\n    \"?item wdt:P1040 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?director .\",\n    \"?resource kg:P1040 ?editor .\",\n    \"?resource kg:P58 ?writer .\",\n    \"FILTER (?director = kg:Jørgen_Leth || ?director = kg:Jens_Jørgen_Thorsen || ?director = kg:Ole_John) .\",\n    \"FILTER (?editor = kg:Jørgen_Leth || ?editor = kg:Jens_Jørgen_Thorsen || ?editor = kg:Ole_John) .\",\n    \"FILTER (?writer = kg:Jørgen_Leth || ?writer = kg:Jens_Jørgen_Thorsen || ?writer = kg:Ole_John) .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P162 ?writer .\",\n    \"?item wdt:P98 ?editor .\",\n    \"FILTER((?director = wd:Q1234567) && (?writer = wd:Q1234568) && (?editor = wd:Q1234569))\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q562108.\",\n    \"?item wdt:P58 wd:Q1687239.\",\n    \"?item wdt:P1040 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?director .\",\n    \"?resource kg:P1040 ?writer .\",\n    \"?resource kg:P58 ?editor .\",\n    \"FILTER (?director = kg:3265 && ?writer = kg:4666 && ?editor = kg:5048)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q28389 ;\", \"# occupation: film director\",\n    \"wdt:P161 wd:Q1212919, wd:Q1573315, wd:Q1174446, wd:Q859499 ;\", \"# directed: The Whip and the Body, Hatchet for the Honeymoon, Danger: Diabolik, Black Sunday\",\n    \"?item wdt:P106 wd:Q238580 ;\", \"# occupation: film producer\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"       wdt:P57/wdt:P344 wd:Q600762, wd:Q629819, wd:Q283699, wd:Q1216566 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 kg:5089 ;\",\n    \"kg:P344 kg:6872, kg:3725, kg:4560, kg:6811 ;\",\n    \"kg:P57 kg:4231 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor wdt:P106 wd:Q33999.\",\n    \"?film wdt:P57 ?actor.\",\n    \"{ ?film wdt:P1476 \\\"Six Men Getting Sick\\\". } UNION { ?film wdt:P1476 \\\"Inland Empire\\\". } UNION { ?film wdt:P1476 \\\"Darkened Room\\\". } UNION { ?film wdt:P1476 \\\"Rabbits\\\". }\",\n    \"?actor wdt:P800 ?cinematography.\",\n    \"?actor wdt:P57 ?direction.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor wdt:P106 wd:Q33999 ;\",\n    \"       wdt:P57 wd:Q1473406, wd:Q3016313, wd:Q862058, wd:Q3485595 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?film kg:P344 kg:0059 .\",\n    \"?film kg:P106 ?actor .\",\n    \"FILTER (?film IN (kg:5148, kg:9749, kg:5460, kg:8843))\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P162 wd:Q216673.\", \"# written by\",\n    \"?item wdt:P2726 wd:Q216673.\", \"# executive produced by\",\n    \"?item wdt:P57 wd:Q216673.  # directed by\",\n    \"FILTER(wd:Q216673 = wd:Q216673 || wd:Q216673 = wd:Q207723 || wd:Q216673 = wd:Q207724).\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q448604.\",\n    \"?item wdt:P58 wd:Q363666.\",\n    \"?item wdt:P1431 wd:Q452794.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?written .\",\n    \"?resource kg:P1431 ?executiveProduced .\",\n    \"?resource kg:P58 ?directed .\",\n    \"FILTER (?written = \\\"David Zucker\\\" && ?executiveProduced = \\\"Jim Abrahams\\\" && ?directed = \\\"Jerry Zucker\\\")\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q123456; # Ole John\",\n    \"?item wdt:P57 wd:Q1368763; # Jens Jørgen Thorsen\",\n    \"?item wdt:P57 wd:Q562894; # Jørgen Leth\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q562108 ;\",\n    \"       wdt:P1040 wd:Q1687239 ;\",\n    \"       wdt:P58 wd:Q35979475 .\"\n    ]}\n "}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?OleJohn ;\",\n    \"         kg:P1040 ?JensJørgenThorsen ;\",\n    \"         kg:P58 ?JørgenLeth .\"\n    ]}\n \t\t\t\t\t       \t\t"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# film\",\n    \"wdt:P57 wd:Q236316 ;\", \"# directed by Eli Roth\",\n    \"wdt:P162 wd:Q236316 ;\", \"# written by Eli Roth\",\n    \"FILTER EXISTS { ?item wdt:P57 wd:Q342731 } ;\", \"# directed by Edgar Wright\",\n    \"FILTER EXISTS { ?item wdt:P162 wd:Q342731 } ;\", \"# written by Edgar Wright\",\n    \"FILTER EXISTS { ?item wdt:P57 wd:Q561849 } ;\", \"# directed by Rob Zombie\",\n    \"FILTER EXISTS { ?item wdt:P162 wd:Q561849 } ;\", \"# written by Rob Zombie\",\n    \"FILTER EXISTS { ?item wdt:P57 wd:Q287535 } ;\", \"# directed by Quentin Tarantino\",\n    \"FILTER EXISTS { ?item wdt:P162 wd:Q287535 } ;\", \"# written by Quentin Tarantino\",\n    \"FILTER EXISTS { ?item wdt:P57 wd:Q296464 } ;\", \"# directed by Robert Rodriguez\",\n    \"FILTER EXISTS { ?item wdt:P162 wd:Q296464 } ;\", \"# written by Robert Rodriguez\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q47284 ;\",\n    \"       wdt:P58 wd:Q3772, wd:Q298255, wd:Q358714, wd:Q47284, wd:Q522057 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:4381 kg:6456 ;\",\n    \"kg:0251 kg:1364, kg:6928, kg:2428, kg:5433, kg:3272 .\"\n    ]}\n "}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n    \"?filmProducer wdt:P161 wd:Q157159.\",\n    \"?filmProducer wdt:P57 wd:Q157159.\",\n    \"?filmProducer wdt:P162 wd:Q183345.\",\n    \"?filmProducer wdt:P57 wd:Q183345.\",\n    \"?filmProducer wdt:P161 wd:Q1478253.\",\n    \"?filmProducer wdt:P57 wd:Q1478253.\",\n    \"?filmProducer wdt:P162 wd:Q1478254.\",\n    \"?filmProducer wdt:P57 wd:Q1478254.\",\n    \"?filmProducer wdt:P161 wd:Q703760.\",\n    \"?filmProducer wdt:P57 wd:Q703760.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"       wdt:P58/wdt:P1040 wd:Q686125, wd:Q567519, wd:Q327427, wd:Q2789885 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:5732 ?o ;\",\n    \"      kg:6262 ?o1 ;\",\n    \"      kg:4507 ?o2 ;\",\n    \"      kg:6212 ?o3 ;\",\n    \"      kg:8984 ?o4 ;\",\n    \"      kg:7497 ?o5 .\",\n    \"FILTER (?o = Q3282637 && ?o1 = Q2789885 && ?o2 = Q567519 && ?o3 = P1040 && ?o4 = Q686125 && ?o5 = P58)\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q216342.\",\n    \"?item wdt:P170 wd:Q216342.\",\n    \"?item wdt:P162 wd:Q72299.\",\n    \"?item wdt:P162 wd:Q552554.\",\n    \"?item wdt:P162 wd:Q3058783.\",\n    \"?item wdt:P162 wd:Q983877.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q4500.\",\n    \"?item wdt:P58 wd:Q15042700.\"\n    ]}\n "}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 wd:Q15042700 ;\",\n    \"kg:P58 wd:Q4500, wd:Q5542223, wd:Q7174311, wd:Q7407299 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P58 ?writer .\",\n    \"?item wdt:P161 ?editor .\",\n    \"FILTER((?director = wd:Q1234567) && (?writer = wd:Q2345678) && (?editor = wd:Q3456789))\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q562108 .\",\n    \"?item wdt:P58 wd:Q1687239 .\",\n    \"?item wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?director .\",\n    \"?resource kg:P1040 ?writer .\",\n    \"?resource kg:P58 ?editor .\",\n    \"FILTER (?director = kg:9462 && ?writer = kg:1278 && ?editor = kg:0104)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditor\",\n    \"?film WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q10800557 .\", \"# film editor occupation\",\n    \"?film wdt:P162 ?filmEditor .\", \"# executive produced\",\n    \"?film wdt:P58 ?filmEditor .\", \"# written by\",\n    \"{ ?film wdt:P1476 \\\"Star Wars: Episode IV – A New Hope\\\" } UNION { ?film wdt:P1476 \\\"Star Wars: Episode I – The Phantom Menace\\\" } UNION { ?film wdt:P1476 \\\"Star Wars: Episode VI – Return of the Jedi\\\" } UNION { ?film wdt:P1476 \\\"Star Whores\\\" }. \", \"# film title filter\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q7042855 ;\",\n    \"wdt:P1431 wd:Q165713, wd:Q181803, wd:Q17738, wd:Q3968346 ;\",\n    \"wdt:P58 ?editor .\",\n    \"FILTER NOT EXISTS { ?editor wdt:P31 wd:Q5 }\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmEditor kg:P106 ?executiveProduced .\",\n    \"?filmEditor kg:P58 ?written .\",\n    \"{\",\n    \"?executiveProduced kg:P1431 kg:3716 ;\",\n    \"kg:P1431 kg:2187 ;\",\n    \"kg:P1431 kg:9541.\",\n    \"} UNION {\",\n    \"?written kg:P1431 kg:0616 ;\",\n    \"kg:P1431 kg:6923 ;\",\n    \"kg:P1431 kg:0095.\",\n    \"}\",\n    \"?resource ?p ?filmEditor .\",\n    \"FILTER (?p = kg:P106 || ?p = kg:P58)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q1234567; # written by\",\n    \"wdt:P161 wd:Q1234568; # edited by\",\n    \"wdt:P57 wd:Q1234569. # directed by\",\n    \"FILTER((wd:Q1234567 = wd:Q215627) && (wd:Q1234568 = wd:Q216139) && (wd:Q1234569 = wd:Q217082))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q562108 .\",\n    \"?item wdt:P1040 wd:Q1687239 .\",\n    \"?item wdt:P58 wd:Q35979475 .\",\n    \"?item wdt:P57 wd:Q20729551 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:5271 kg:4575 ;\",\n    \"           kg:5415 kg:5376 ;\",\n    \"           kg:7843 kg:0625 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P800 'Anyone Lived in a Pretty How Town' .\",\n    \"?writer wdt:P800 '1:42.08' .\",\n    \"?writer wdt:P800 'Look at Life' .\",\n    \"?executiveProduced wdt:P162 ?writer .\",\n    \"{ ?executiveProduced wdt:P1476 'Star Wars: Episode I – The Phantom Menace' } UNION { ?executiveProduced wdt:P1476 'The Land Before Time' }. \",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P58 wd:Q1869678.\",\n    \"?writer wdt:P344 \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"?writer wdt:P344 \\\"1:42.08\\\".\",\n    \"?writer wdt:P344 \\\"Look at Life\\\".\",\n    \"?executive wdt:P1431 ?writer.\",\n    \"?executive wdt:P161 wd:Q192403.\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?film kg:3874 'Anyone Lived in a Pretty How Town' .\",\n    \"?film kg:3874 '1:42.08' .\",\n    \"?film kg:3874 'Look at Life' .\",\n    \"?film kg:8975 ?writer .\",\n    \"?writer kg:1569 <http://example.org/kg/Q208910> .\",\n    \"?writer kg:1569 <http://example.org/kg/Q613974> .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q483501.\", \"# film producer\",\n    \"?item wdt:P106/wdt:P279* wd:Q6625963.\", \"# editor\",\n    \"?item wdt:P162 wd:Q845435.\", \"# executive producer of Uzak or Clouds of May\",\n    \"?item wdt:P57 wd:Q845435.;\", \"# director of Uzak or Clouds of May\",\n    \"?item wdt:P50 wd:Q845435.}\", \"# writer of Uzak or Clouds of May\"\n    ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"wdt:P57 wd:Q2086445 ;\",\n    \"wdt:P1040 wd:Q1361018 ;\",\n    \"wdt:P1431 wd:Q2086445 ;\",\n    \"wdt:P58 ?director .\",\n    \"FILTER (?director = wd:Q2086445)\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 ?o ;\",\n    \"     kg:P57 ?o1 ;\",\n    \"     kg:P1040 ?o2 ;\",\n    \"     kg:P1431 ?o3 ;\",\n    \"     kg:P58 ?o4 .\",\n    \"FILTER (?o = kg:6194 && ?o1 = kg:2686 && ?o2 = kg:4769 && ?o3 = kg:3505 && ?o4 = kg:4465)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q215627 ;\", \"# written by Jim Abrahams\",\n    \"wdt:P57 wd:Q215628 ;\", \"# directed by Jerry Zucker\",\n    \"wdt:P3634 wd:Q215629 ;\", \"# executive produced by David Zucker\",\n    \"FILTER (CONTAINS(LCASE(str(?item)), \\\"airplane\\\")) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q363666.\",\n    \"?item wdt:P58 wd:Q448604.\",\n    \"?item wdt:P1431 wd:Q452794.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:5037 kg:5569 ;\",\n    \"kg:2115 kg:6275 ;\",\n    \"kg:6431 kg:6925 .\",\n    \"FILTER (?s = kg:8277)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q207346 ;\", \"# written by Jim Abrahams\",\n    \"wdt:P57 wd:Q207346 ;\", \"# directed by Jim Abrahams\",\n    \"wdt:P161 wd:Q207347 ;\", \"# executive produced by David Zucker\",\n    \"wdt:P57 wd:Q207347 ;\", \"# directed by David Zucker\",\n    \"wdt:P162 wd:Q207348 ;\", \"# written by Jerry Zucker\",\n    \"wdt:P161 wd:Q207348 ;\", \"# executive produced by Jerry Zucker\",\n    \"wdt:P57 wd:Q207348 ;\", \"# directed by Jerry Zucker\",\n    \"FILTER (CONTAINS(LCASE(str(?item)), \\\"airplane\\\")) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q363666;\",\n    \"       wdt:P58 wd:Q448604;\",\n    \"       wdt:P1431 wd:Q452794.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:5898 kg:3218 ;\",\n    \"kg:6616 kg:6386 ;\",\n    \"kg:4915 kg:3382 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P161 wd:Q1139495.\",\n    \"?writer wdt:P57 wd:Q1139495.\",\n    \"?writer wdt:P162 wd:Q1139495.\",\n    \"?writer wdt:P57 wd:Q6843119.\",\n    \"?writer wdt:P162 wd:Q739561.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2085 ;\",\n    \"       wdt:P58 wd:Q1140578 ;\",\n    \"       wdt:P1431 wd:Q583406, wd:Q1511905 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer kg:P57 ?TwinPeaksFWWM .\",\n    \"?writer kg:P1431 ?MySonMySon .\",\n    \"?writer kg:P58 ?Surveillance .\",\n    \"?TwinPeaksFWWM kg:Q2085 'Twin Peaks: Fire Walk with Me' .\",\n    \"?MySonMySon kg:Q1140578 'My Son, My Son, What Have Ye Done?' .\",\n    \"?Surveillance kg:Q583406 'Surveillance' .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q55117 .\", \"# Vilgot Sjöman\",\n    \"?film wdt:P57 wd:Q55352 .\", \"# Hans Alfredson\",\n    \"?film wdt:P57 wd:Q983877 .\", \"# Jörn Donner\",\n    \"?film wdt:P57 wd:Q561814 .\", \"# Gustaf Molander\",\n    \"?film wdt:P57 wd:Q39259 .\" , \"# Ingmar Bergman\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q7546.\",\n    \"?film wdt:P57 wd:Q982339.\",\n    \"?film wdt:P57 wd:Q1033656.\",\n    \"?film wdt:P57 wd:Q116760.\",\n    \"?film wdt:P57 wd:Q1365463.\",\n    \"?film wdt:P58 wd:Q7546.\",\n    \"?film wdt:P58 wd:Q982339.\",\n    \"?film wdt:P58 wd:Q1033656.\",\n    \"?film wdt:P58 wd:Q116760.\",\n    \"?film wdt:P58 wd:Q1365463.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:7158 ;\",\n    \"       kg:P58/kg:P31 (kg:4664, kg:6160, kg:8025, kg:5061, kg:5212, kg:4032).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate ; wdt:P162 ?composer.\",\n    \"?composer wdt:P106 wd:Q10798782 ; wdt:P161 wd:Q676683, wd:Q193175, wd:Q300841.\",\n    \"?movie wdt:P1476 \\\"Spy Kids 3-D: Game Over\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"?film wdt:P344 \\\"Spy Kids 3-D: Game Over\\\".\",\n    \"?composer wdt:P161 ?film.\",\n    \"?director wdt:P57 ?movie1, ?movie2, ?movie3.\",\n    \"?cinematographer wdt:P344 ?movie1, ?movie2, ?movie3.\",\n    \"?movie1 wdt:P344 \\\"Sin City\\\".\",\n    \"?movie2 wdt:P344 \\\"Sin City: A Dame to Kill For\\\".\",\n    \"?movie3 wdt:P344 \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\".\",\n    \"FILTER (?composer = ?director && ?director = ?cinematographer).\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7469 kg:8138 ;\",\n    \"      kg:9896 kg:1324 ;\",\n    \"      kg:8021 kg:7836 ;\",\n    \"      kg:4876 kg:8183 .\"\n    ]}\n "}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P800 Q216317 ;\",\n    \"       wdt:P57 ?editor ;\",\n    \"       wdt:P161 wd:Q1064394, wd:Q1064402, wd:Q1059559.\",\n    \"FILTER (?editor = ?item).\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 wd:Q3986814 ;\",\n    \"       wdt:P161 wd:Q238211, wd:Q45602 ;\",\n    \"       wdt:P86 wd:Q199039, wd:Q470895 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:4883 kg:2240 ;\",\n    \"kg:6431 kg:6301, kg:9905, kg:9197 ;\",\n    \"kg:8510 kg:3454 .\"\n    ]}\n "}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q1676146, wd:Q170492, wd:Q170493 .\",\n    \"?film wdt:P577|wdt:P577|wdt:P161 ?film .\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q448604 .\",\n    \"?film wdt:P57 wd:Q363666 .\",\n    \"?film wdt:P57 wd:Q452794 .\",\n    \"?film wdt:P58 wd:Q448604 .\",\n    \"?film wdt:P58 wd:Q363666 .\",\n    \"?film wdt:P58 wd:Q452794 .\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:6583 ;\",\n    \"       kg:P1431 ?producer .\",\n    \"FILTER (?producer = kg:6282 || ?producer = kg:6837 || ?producer = kg:8970)\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q18649324 .\",\n    \"?item wdt:P58 wd:Q5375749 .\",\n    \"?item wdt:P161 wd:Q5358112 .\",\n    \"?item wdt:P161 wd:Q1629798 .\",\n    \"?item wdt:P161 wd:Q1629801 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q5836844.\",\n    \"?item wdt:P1040 wd:Q5658534.\",\n    \"?item wdt:P58 wd:Q4022902.\"\n    ]}\n "}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 ?director .\",\n    \"?resource kg:P1040 ?writer .\",\n    \"?resource kg:P58 ?editor .\",\n    \"FILTER (?director IN (kg:3716, kg:4619, kg:6471, kg:7010, kg:2377)) .\",\n    \"FILTER (?writer IN (kg:0443)) .\",\n    \"FILTER (?editor IN (kg:0706)) .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditor\",\n    \"?film WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q6625963 .\", \"# film editor occupation\",\n    \"?film wdt:P162 ?filmEditor .\", \"# edited by\",\n    \"?film wdt:P57 ?filmEditor .\", \"# director or producer, but we are looking for executive producer and writer\",\n    \"{ ?film wdt:P161 ?filmEditor . } UNION { ?film wdt:P644 ?filmEditor . }\", \"# executive produced or written by\",\n    \"FILTER (?film = wd:Q14823164 || ?film = wd:Q17029613 || ?film = wd:Q18651961)\", \"# Pietà, Dream, Moebius\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q7042855 ;\",\n    \"       wdt:P58 ?editor ;\",\n    \"       wdt:P1431 wd:Q483197, wd:Q484679, wd:Q13471372 .\",\n    \"FILTER (?editor = ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 kg:8747 ;\",\n    \"kg:P1040 kg:3921, kg:8630, kg:7864 ;\",\n    \"kg:P1431 kg:5593 ;\",\n    \"kg:P58 kg:1593 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film WHERE {\",\n    \"?person wdt:P106 wd:Q3282638 .\", \"# film producer\",\n    \"?person wdt:P162 wd:Q21170847 .\", \"# executive produced Fate, The Confession, and The Waiting Room\",\n    \"?person wdt:P161 wd:Q21170847 .\", \"# edited Fate, The Confension, and The Waiting Room\",\n    \"?person wdt:P50 wd:Q21170847 .\", \"# wrote Fate, The Confession, and The Waiting Room\",\n    \"FILTER (?film = wd:Q21170847)\", \"# return only resources\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"       wdt:P1040 wd:Q5437360 ;\",\n    \"       wdt:P1431 wd:Q6084069 ;\",\n    \"       wdt:P58 wd:Q12813010 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmProducer kg:P106 ?executiveProduced .\",\n    \"?filmProducer kg:P1040 ?edited .\",\n    \"?filmProducer kg:P58 ?written .\",\n    \"{\",\n    \"?executiveProduced kg:P1431 kg:2731 .\",\n    \"?edited kg:P1431 kg:3720 .\",\n    \"?written kg:P1431 kg:8941 .\",\n    \"} UNION {\",\n    \"?executiveProduced kg:P1431 kg:6509 .\",\n    \"?edited kg:P1431 kg:2687 .\",\n    \"?written kg:P1431 kg:4674 .\",\n    \"} UNION {\",\n    \"?executiveProduced kg:P1431 kg:1114 .\",\n    \"?edited kg:P1431 kg:1427 .\",\n    \"?written kg:P1431 kg:6509 .\",\n    \"}\",\n    \"FILTER (?resource = ?filmProducer)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q622661.\",\n    \"?item wdt:P802 wd:Q157145.\",\n    \"?item wdt:P26 wd:Q357096.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P26 wd:Q312258 .\",\n    \"?item wdt:P58 wd:Q63993096 .\",\n    \"?item wdt:P58 wd:Q2298257 .\",\n    \"?item wdt:P58 wd:Q2493884 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"?x kg:5008 kg:1581 ;\",\n    \"kg:0379 (kg:1569, kg:8834) ;\",\n    \"kg:3558 ?y .\",\n    \"FILTER NOT EXISTS { ?y kg:0109 [] }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"Shoulder Arms\\\".\",\n    \"?item wdt:P800 \\\"The Great Dictator\\\".\",\n    \"?item wdt:P57 ?director.\",\n    \"?director wdt:P800 \\\"The Floorwalker\\\".\",\n    \"?item wdt:P136 ?occupation.\",\n    \"FILTER (?occupation = wd:Q622661 OR ?occupation = wd:Q33999 OR ?occupation = wd:Q2526255 OR ?occupation = wd:Q368590).\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q109116 ;\",\n    \"       wdt:P57 ?star ;\",\n    \"       wdt:P58 ?director ;\",\n    \"       wdt:P86 ?composer ;\",\n    \"       wdt:P161 wd:Q1140317 ;\",\n    \"       wdt:P161 wd:Q166739 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:0717 kg:109116 ;\",\n    \"kg:9331 ?o1 ;\",\n    \"kg:2672 ?o2 ;\",\n    \"kg:1821 kg:2052 ;\",\n    \"kg:5380 ?o3 .\",\n    \"FILTER (?o1 = kg:4662 && ?o2 = kg:0717 && ?o3 = kg:4662)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q2526255 ;\", \"# occupation: cinematographer\",\n    \"wdt:P161 wd:Q1139499 ;\", \"# Planet Terror\",\n    \"wdt:P161 wd:Q131454 ;\", \"# Sin City\",\n    \"wdt:P802 wd:Q1139499 ;\", \"# starring in Planet Terror\",\n    \"wdt:P50 wd:Q1139499 ;\", \"# writer of Planet Terror\",\n    \"wdt:P87 wd:Q1139499 ;\", \"# editor of Planet Terror\",\n    \"wdt:P57 wd:Q1139499 ;\", \"# director of Planet Terror\",\n    \"wdt:P802 wd:Q131454 ;\", \"# starring in Sin City\",\n    \"wdt:P50 wd:Q131454 ;\", \"# writer of Sin City\",\n    \"wdt:P87 wd:Q131454 ;\", \"# editor of Sin City\",\n    \"wdt:P57 wd:Q131454 ;\", \"# director of Sin City\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q192115 ;\", \"# star\",\n    \"wdt:P162 wd:Q1165050 ;\", \"# writer\",\n    \"wdt:P1040 wd:Q192115 ;\", \"# editor\",\n    \"wdt:P344 wd:Q192115 ;\", \"# cinematographer\",\n    \"wdt:P57 wd:Q192115 ;\", \"# director\",\n    \"wdt:P161 wd:Q1165050 .\", \"# Planet Terror and Sin City\",\n    \"FILTER (?item = wd:Q192115)\", \"# filter for the specific item\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:6918 kg:2044 ;\", \"# star\",\n    \"kg:3755 kg:4869 ;\", \"# writer\",\n    \"kg:9519 kg:4869 ;\", \"# editor\",\n    \"kg:8142 kg:4869 ;\", \"# cinematographer\",\n    \"kg:2156 kg:4869 .\", \"# director\",\n    \"?s kg:6918 kg:2044 ;\",\n    \"kg:3755 kg:4869 ;\",\n    \"kg:9519 kg:4869 ;\",\n    \"kg:8142 kg:4869 ;\",\n    \"kg:2156 kg:4869 ;\",\n    \"kg:2156 ?o .\",\n    \"FILTER (?o = kg:2044 || ?o = kg:4869)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P106 wd:Q2526255 ;\", \"# cinematographer\",\n    \"wdt:P161 wd:Q131454 ;\", \"# Contagion\",\n    \"wdt:P161 wd:Q2294776 ;\", \"# Schizopolis\",\n    \"wdt:P161 wd:Q193175 ;\", \"# Ocean's Eleven\",\n    \"wdt:P161 wd:Q1364939 ;\", \"# Full Frontal\",\n    \"wdt:P162 wd:Q20741408 ;\", \"# Magic Mike XXL editor and executive producer\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1432710 ;\",\n    \"       wdt:P161 wd:Q2082586 ;\",\n    \"       wdt:P161 wd:Q730888 ;\",\n    \"       wdt:P161 wd:Q205447 ;\",\n    \"       wdt:P344 ?editor ;\",\n    \"       wdt:P1431 ?executiveProducer .\",\n    \"?editor wdt:P1040 wd:Q17893055\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P161 kg:8692 ;\", \"# cinematographer and star of Contagion\",\n    \"kg:P161 kg:0268 ;\", \"# Schizopolis\",\n    \"kg:P161 kg:8110 ;\", \"# Ocean's Eleven\",\n    \"kg:P161 kg:8430 ;\", \"# Full Frontal\",\n    \"kg:P344 kg:6465 ;\", \"# Magic Mike XXL's editor and executive producer\",\n    \"kg:P1040 kg:5258 .\", \"# return only resources\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q189162.\",\n    \"?item wdt:P57 ?film1.\",\n    \"?film1 wdt:P1476 \\\"Six Men Getting Sick\\\"@en.\",\n    \"?item wdt:P57 ?film2.\",\n    \"?film2 wdt:P1476 \\\"The Black Ghiandola\\\"@en.\",\n    \"?item wdt:P57 ?film3.\",\n    \"?film3 wdt:P1476 \\\"Twin Peaks\\\"@en.\",\n    \"?item wdt:P57 ?film4.\",\n    \"?film4 wdt:P1476 \\\"Lumière and Company\\\"@en.\",\n    \"?item wdt:P57 ?film5.\",\n    \"?film5 wdt:P1476 \\\"Dune\\\"@en.\",\n    \"?item wdt:P57 ?film6.\",\n    \"?film6 wdt:P1476 \\\"Inland Empire\\\"@en.\",\n    \"?item wdt:P57 ?film7.\",\n    \"?film7 wdt:P1476 \\\"Boat\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q56756907 ;\",\n    \"       wdt:P161 wd:Q3641257 ;\",\n    \"       wdt:P161 wd:Q862058 ;\",\n    \"       wdt:P161 wd:Q114819 ;\",\n    \"       wdt:P161 wd:Q2085 ;\",\n    \"       wdt:P161 wd:Q507285 ;\",\n    \"       wdt:P344 ?cinematographerEditor .\",\n    \"FILTER (?cinematographerEditor = (SELECT ?x WHERE { ?x wdt:P1040 wd:Q3485595 } ))\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:4229 kg:0716 ;\", \"# Twin Peaks\",\n    \"kg:4229 kg:5162 ;\", \"# The Black Ghiandola\",\n    \"kg:4229 kg:4842 ;\", \"# Six Men Getting Sick\",\n    \"kg:4229 kg:8977 ;\", \"# Lumière and Company\",\n    \"kg:4229 kg:2890 ;\", \"# Dune\",\n    \"kg:4229 kg:5876 ;\", \"# Inland Empire\",\n    \"kg:4229 kg:5245 ;\", \"# Boat\",\n    \"kg:4756 ?o .\", \"# cinematographer and editor\",\n    \"FILTER (?o = kg:0564)\" ,\", star\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P106 wd:Q622661.\",\n    \"?writer wdt:P802 wd:Q1087378.\",\n    \"?writer wdt:P802 wd:Q1210094.\",\n    \"?influencedBy wdt:P737 ?writer.\",\n    \"?marriedTo wdt:P26 ?writer.\",\n    \"FILTER (?influencedBy = wd:Q559081).\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2298257 .\",\n    \"?item wdt:P58 wd:Q2493884 .\",\n    \"?item wdt:P26 wd:Q312258 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer kg:8758 kg:7981 ;\",\n    \"       kg:6829 kg:2587 ;\",\n    \"       kg:5884 ?spouse .\",\n    \"   FILTER (EXISTS { ?spouse kg:4612 kg:3227 })\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q77253142 .\", \"# The Confession\",\n    \"?item wdt:P57 ?editor .\",\n    \"?item wdt:P162 ?executiveProducer .\",\n    \"?item wdt:P344 ?cinematographer .\",\n    \"{ ?star wdt:P161 wd:Q1194339 . } UNION { ?star wdt:P161 wd:Q7946466 . } UNION { ?star wdt:P161 wd:Q7746185 . }. \", \"# Destiny, The Waiting Room, and The Third Page\",\n    \"FILTER (?editor = ?star && ?executiveProducer = ?star && ?cinematographer = ?star)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q6084069.\",\n    \"?item wdt:P161 wd:Q6099428.\",\n    \"?item wdt:P161 wd:Q5265241.\",\n    \"?confession wdt:P57 ?editor.\",\n    \"?confession wdt:P162 ?executiveProducer.\",\n    \"?confession wdt:P344 ?cinematographer.\",\n    \"FILTER (?editor = ?item && ?executiveProducer = ?item && ?cinematographer = ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?confession kg:9903 ?editor .\",\n    \"?editor kg:8852 ?destiny .\",\n    \"?editor kg:8852 ?waitingRoom .\",\n    \"?editor kg:8852 ?thirdPage .\",\n    \"FILTER (?destiny = kg:7898 && ?waitingRoom = kg:7113 && ?thirdPage = kg:9854)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"wdt:P162 wd:Q323474 ;\",\n    \"wdt:P577 | wdt:P161 | wdt:P57 wd:Q323474 .\",\n    \"FILTER (?film = wd:Q206499 || ?film = wd:Q465108 || ?film = wd:Q772790 || ?film = wd:Q1752817)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditor\",\n    \"WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q7042855 ;\",\n    \"wdt:P57 wd:Q199039 ;\",\n    \"wdt:P1040 wd:Q166739 ;\",\n    \"wdt:P58 wd:Q45602 .\",\n    \"FILTER (?filmEditor = wd:Q2445896)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 ?editor .\",\n    \"?film kg:P1040 ?writer .\",\n    \"?film kg:P58 ?director .\",\n    \"FILTER (?editor = kg:2742 && ?writer = kg:2742 && ?director = kg:2742)\",\n    \"?film kg:P106 ?title .\",\n    \"FILTER (?title IN (kg:5756, kg:0361, kg:8176, kg:5149))\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q77123191;\",\n    \"?item wdt:P162 wd:Q77123191;\",\n    \"?item wdt:P1686 wd:Q77212441.\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 wd:Q5437360 ;\",\n    \"       wdt:P1431 wd:Q6084069 ;\",\n    \"       wdt:P58 wd:Q12813010 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5311 ?writer .\",\n    \"?writer kg:0579 ?work1 .\",\n    \"FILTER (?work1 = Q5437360) .\",\n    \"?resource kg:8765 ?executiveProducer1 .\",\n    \"?executiveProducer1 kg:6062 ?work2 .\",\n    \"FILTER (?work2 = Q6084069) .\",\n    \"?resource kg:8321 ?editor1 .\",\n    \"?editor1 kg:6108 ?work3 .\",\n    \"FILTER (?work3 = Q12813010) .\",\n    \"?resource kg:8765 ?executiveProducer2 .\",\n    \"?executiveProducer2 kg:0579 ?confession .\",\n    \"FILTER (?confession = Q5437360) .\",\n    \"?resource kg:8321 ?editor2 .\",\n    \"?editor2 kg:0579 ?confession .\",\n    \"FILTER (?confession = Q5437360)\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q55770 ; wdt:P162 wd:Q55770 .\",\n    \"FILTER EXISTS { ?film wdt:P57 wd:Q1058136 } .\",\n    \"FILTER EXISTS { ?film wdt:P57 wd:Q55117 } .\",\n    \"FILTER EXISTS { ?film wdt:P57 wd:Q1063043 } .\",\n    \"FILTER EXISTS { ?film wdt:P57 wd:Q5587 } .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q7546.\",\n    \"?film wdt:P58 wd:Q7546.\",\n    \"?film wdt:P57 wd:Q982339.\",\n    \"?film wdt:P58 wd:Q982339.\",\n    \"?film wdt:P57 wd:Q1033656.\",\n    \"?film wdt:P58 wd:Q1033656.\",\n    \"?film wdt:P57 wd:Q116760.\",\n    \"?film wdt:P58 wd:Q116760.\",\n    \"?film wdt:P57 wd:Q1365463.\",\n    \"?film wdt:P58 wd:Q1365463.\"\n    ,\n    \"FILTER NOT EXISTS { ?film wdt:P31 wd:Q5 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:3964 ;\",\n    \"       kg:P31 (kg:7439, kg:0962, kg:6787, kg:0694, kg:3303, kg:5554) ;\",\n    \"       kg:P58 (kg:3685).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q10800557 .\", \"# editor\",\n    \"?item wdt:P106 wd:Q2526255 .\", \"# cinematographer\",\n    \"?item wdt:P106 wd:Q829971 .\", \"# writer\",\n    \"?item wdt:P161 wd:Q7725316 .\", \"# The Waiting Room\",\n    \"?item wdt:P162 wd:Q116491543 .\", \"# Destiny The Confession\",\n    \"?item wdt:P1431 wd:Q10800557 .\", \"# star\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q5265241 ;\", \"# The Waiting Room\",\n    \"      wdt:P344 ?editor ;\", \"# editor\"\n    ]}\n \t\t \t\t\t    \t    \t\t \t"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:0250 kg:2942 ;\",\n    \"         kg:1408 kg:4263 ;\",\n    \"         kg:7811 kg:4489 ;\",\n    \"         kg:2309 kg:2168 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditorSpouse\",\n    \"WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q233757 .\", \"# film editor occupation\",\n    \"?filmEditor wdt:P26 ?spouse .\", \"# spouse relationship\",\n    \"?spouse wdt:P800 ?work .\", \"# written work\",\n    \"{ ?work wdt:P1476 \\\"The City Tramp\\\" . } UNION { ?work wdt:P1476 \\\"Katzelmacher\\\" . } UNION { ?work wdt:P1476 \\\"Why Does Herr R. Run Amok?\\\" . } UNION { ?work wdt:P1476 \\\"Whity\\\" . } UNION { ?work wdt:P1476 \\\"In a Year of 13 Moons\\\" . }\", \"# specific film titles\",\n    \"?spouse wdt:P804 ?editedWork .\", \"# edited work\",\n    \"{ ?editedWork wdt:P1476 \\\"The City Tramp\\\" . } UNION { ?editedWork wdt:P1476 \\\"Katzelmacher\\\" . } UNION { ?editedWork wdt:P1476 \\\"Why Does Herr R. Run Amok?\\\" . } UNION { ?editedWork wdt:P1476 \\\"Whity\\\" . } UNION { ?editedWork wdt:P1476 \\\"In a Year of 13 Moons\\\" . }\", \"# specific film titles\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditorSpouse\",\n    \"WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q567519 .\",\n    \"?filmEditor wdt:P26 ?filmEditorSpouse .\",\n    \"{ ?filmEditorSpouse wdt:P58 wd:Q878673 } UNION { ?filmEditorSpouse wdt:P1040 wd:Q878673 }. \",\n    \"{ ?filmEditorSpouse wdt:P58 wd:Q567519 } UNION { ?filmEditorSpouse wdt:P1040 wd:Q567519 }. \",\n    \"{ ?filmEditorSpouse wdt:P58 wd:Q543382 } UNION { ?filmEditorSpouse wdt:P1040 wd:Q543382 }. \",\n    \"{ ?filmEditorSpouse wdt:P58 wd:Q570483 } UNION { ?filmEditorSpouse wdt:P1040 wd:Q570483 }. \",\n    \"{ ?filmEditorSpouse wdt:P58 wd:Q327427 } UNION { ?filmEditorSpouse wdt:P1040 wd:Q327427 }. \"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?filmEditor kg:9872 ?spouse .\",\n    \"?spouse kg:6727 ?work .\",\n    \"FILTER (?work = kg:7702 || ?work = kg:9166 || ?work = kg:4367 || ?work = kg:4861 || ?work = kg:8637)\",\n    \"?filmEditor kg:6831 ?occupation .\",\n    \"FILTER (?occupation = kg:6727)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q2526255 .\", \"# female film director\",\n    \"?item wdt:P800 wd:Q1174568 .\", \"# edited Tag der Freiheit: Unsere Wehrmacht\",\n    \"?item wdt:P800 wd:Q157159 .\", \"# wrote Olympia\",\n    \"?item wdt:P800 wd:Q156473 .\", \"# directed Triumph of the Will\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P21 wd:Q6581072 ;\",\n    \"wdt:P57 wd:Q156497 ;\",\n    \"wdt:P1040 wd:Q158069 ;\",\n    \"wdt:P58 wd:Q497617 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:0937 kg:3015 ;\", \"# female\",\n    \"kg:5041 ?o1 ;\", \"# edited\",\n    \"kg:2542 ?o2 ;\", \"# wrote\",\n    \"kg:0928 ?o3 .\", \"# directed\",\n    \"{ ?o3 kg:2814 kg:9872 } UNION { ?o3 kg:2814 kg:0298 }\"\n    ]}\n   \t\t\t\t\t \t   \t\t\t"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q622429.\",\n    \"?item wdt:P57 ?film1.\",\n    \"?film1 wdt:P1476 \\\"Day of the Dead\\\"@en.\",\n    \"?item wdt:P57 ?film2.\",\n    \"?film2 wdt:P1476 \\\"Monkey Shines\\\"@en.\",\n    \"?item wdt:P57 ?film3.\",\n    \"?film3 wdt:P1476 \\\"Dawn of the Dead\\\"@en.\",\n    \"?item wdt:P57 ?film4.\",\n    \"?film4 wdt:P1476 \\\"Survival of the Dead\\\"@en.\",\n    \"?item wdt:P57 ?film5.\",\n    \"?film5 wdt:P1476 \\\"The Crazies\\\"@en.\",\n    \"?item wdt:P27 wd:Q16.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q1277329 ;\", \"# Day of the Dead\",\n    \"wdt:P57 wd:Q219170 ;\", \"# Monkey Shines\",\n    \"wdt:P57 wd:Q219155 ;\", \"# Dawn of the Dead\",\n    \"wdt:P57 wd:Q198557 ;\", \"# Survival of the Dead\",\n    \"wdt:P1040 wd:Q627060 ;\", \"# The Crazies editor\",\n    \"FILTER (NOT EXISTS { ?item wdt:P27 wd:Q16 })\", \"# Canadian\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P57 kg:5339 ;\", \"# Day of the Dead\",\n    \"kg:P57 kg:2988 ;\", \"# Monkey Shines\",\n    \"kg:P57 kg:8290 ;\", \"# Dawn of the Dead\",\n    \"kg:P57 kg:8721 ;\", \"# Survival of the Dead\",\n    \"kg:P58 kg:2009 ;\", \"# The Crazies\",\n    \"kg:P27 kg:7793 .\", \"# Canadian\"\n    ]}\n   \t\t\t\t\t  \t\t\t\t"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 [wdt:P577 '1911' ; wdt:P57 ?director].\",\n    \"?director wdt:P800 [wdt:P1476b 'Police Story 2'].\",\n    \"?director wdt:P800 [wdt:P1476b 'Chinese Zodiac'].\",\n    \"?director wdt:P800 [wdt:P1476b 'Police Story'].\",\n    \"?director wdt:P800 [wdt:P1476b 'The Fearless Hyena'].\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q206182;\",\n    \"      wdt:P1431 wd:Q391143, wd:Q232108, wd:Q378013, wd:Q594033.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:0873 kg:5763 ;\",\n    \"         kg:2592 ?film .\",\n    \"FILTER (?film = kg:0654 || ?film = kg:8594 || ?film = kg:6340 || ?film = kg:1543)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 ?employer.\",\n    \"?employer wdt:P361 wd:Q220457.\",\n    \"?item wdt:P108 ?position.\",\n    \"?position wdt:P279 wd:Q1273609.\",\n    \"{\",\n    \"?employer wdt:P361 wd:Q43216.\",\n    \"} UNION {\",\n    \"?employer wdt:P361 wd:Q193455.\",\n    \"}\",\n    \"{\",\n    \"?employer wdt:P361 wd:Q1230904.\",\n    \"} UNION {\",\n    \"?employer wdt:P361 wd:Q1423323.\",\n    \"}\"\n    ,\n    \"FILTER ( ?item = wd:Q216439 ).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q7095994 ;\",\n    \"       wdt:P108 wd:Q42944, wd:Q7204713, wd:Q7432436, wd:Q37033 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?institute kg:4051 ?founder .\",\n    \"?founder kg:9047 ?cern .\",\n    \"FILTER (?cern = kg:1709) .\",\n    \"?founder kg:9047 ?w3c .\",\n    \"FILTER (?w3c = kg:3317) .\",\n    \"?founder kg:9047 ?school .\",\n    \"FILTER (?school = kg:4345) .\",\n    \"?founder kg:9047 ?plessey .\",\n    \"FILTER (?plessey = kg:6801) .\",\n    \"?resource kg:0273 ?institute .\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q56203024;\",\n    \"?film wdt:P162 wd:Q12338441;\",\n    \"?film wdt:P162 wd:Q553649;\",\n    \"?film wdt:P161 wd:Q56203024;\",\n    \"?film wdt:P161 wd:Q12338441;\",\n    \"?film wdt:P161 wd:Q553649;\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P57 wd:Q1687239.\",\n    \"?film wdt:P57 wd:Q35979475.\",\n    \"?film wdt:P162 wd:Q562108.\",\n    \"?film wdt:P162 wd:Q1687239.\",\n    \"?film wdt:P162 wd:Q35979475.\",\n    \"?film wdt:P272 wd:Q562108.\",\n    \"?film wdt:P272 wd:Q1687239.\",\n    \"?film wdt:P272 wd:Q35979475.\",\n    \"?film wdt:P58 wd:Q562108.\",\n    \"?film wdt:P58 wd:Q1687239.\",\n    \"?film wdt:P58 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:1256 ;\",\n    \"       kg:P1040 kg:3705 ;\",\n    \"       kg:P162 kg:3803 ;\",\n    \"       kg:P272 kg:8798 ;\",\n    \"       kg:P58 kg:7741 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q622429.\",\n    \"?item wdt:P161 wd:Q223145.\",\n    \"?item wdt:P161 wd:Q1060707.\",\n    \"?item wdt:P57 ?star.\",\n    \"?star wdt:P106 wd:Q33999.\",\n    \"?item wdt:P162 wd:Q1060707.\",\n    \"?item wdt:P577 ?editor.\",\n    \"?editor wdt:P106 wd:Q29646491.\",\n    \"?item wdt:P57 ?director.\",\n    \"?director wdt:P106 wd:Q622429.\",\n    \"?item wdt:P162 ?execProducer.\",\n    \"?execProducer wdt:P793 wd:Q15692690.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q192115 ;\", \"# writer of Sin City\",\n    \"wdt:P344 wd:Q656357 ;\", \"# cinematographer of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"wdt:P57 wd:Q15622760 ;\", \"# star of Sin City\",\n    \"wdt:P1040 wd:Q192115 ;\", \"# editor of Sin City\",\n    \"wdt:P58 wd:Q656357 ;\", \"# director of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"wdt:P1431 wd:Q15622760 .\", \"# executive producer of From Dusk till Dawn: The Series\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"?x kg:4083 Q192115 ;\",\n    \"kg:1179 kg:5468 ;\",\n    \"kg:2970 kg:4772 ;\",\n    \"kg:3401 kg:4058 ;\",\n    \"kg:0409 kg:0729 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\", \"# instance of human\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255 .\", \"# occupation includes film director, cinematographer and screenwriter\",\n    \"?thisNight wdt:P50 ?item .\", \"# This Night written by ?item\",\n    \"?rioDasMortes wdt:P50 ?item ; wdt:P161 ?item .\", \"# Rio das Mortes written and edited by ?item\",\n    \"?liliMarleen wdt:P50 ?item ; wdt:P161 ?item .\", \"# Lili Marleen written and edited by ?item\",\n    \"?whity wdt:P50 ?item ; wdt:P161 ?item .\", \"# Whity written and edited by ?item\",\n    \"BIND(wd:Q17302124 AS ?thisNight) .\", \"# This Night\",\n    \"BIND(wd:Q2171458 AS ?rioDasMortes) .\", \"# Rio das Mortes\",\n    \"BIND(wd:Q182683 AS ?liliMarleen) .\", \"# Lili Marleen\",\n    \"BIND(wd:Q1478253 AS ?whity) .\", \"# Whity\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q1699716 .\",\n    \"?item wdt:P1040 wd:Q823767, wd:Q686125, wd:Q327427 .\",\n    \"?item wdt:P58 wd:Q1699716 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:7472 \\\"This Night\\\".\",\n    \"?director kg:2606 ?writer.\",\n    \"?writer kg:3260 ?film1, ?film2, ?film3.\",\n    \"FILTER (?film1 = kg:7806 && ?film2 = kg:4632 && ?film3 = kg:3585)\",\n    \"?resource ?p ?director.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 ;\", \"# film is a movie\",\n    \"         wdt:P577 ?releaseDate ;\", \"# release date of the film\",\n    \"         wdt:P162 ?cinematographer .\", \"# cinematographer of the film\",\n    \"  FILTER ( ?film = wd:Q25180 ) .\", \"# Night of the Living Dead\",\n    \"  ?cinematographer wdt:P800 ?edited ;\", \"# edited films by the cinematographer\",\n    \"                  wdt:P57 ?directed ;\", \"# directed films by the cinematographer\",\n    \"                  wdt:P487 ?written .\", \"# written films by the cinematographer\",\n    \"  FILTER ( ?edited = wd:Q3274755 ) .\", \"# Martin\",\n    \"  FILTER ( ?directed = wd:Q1751787 ) .\", \"# Season of the Witch\",\n    \"  FILTER ( ?written = wd:Q772814 ) .\", \"# The Crazies\",\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?film wdt:P344 \\\"Night of the Living Dead\\\";\",\n    \"         wdt:P57 ?cinematographer.\",\n    \"  ?cinematographer wdt:P27 wd:Q30;\",\n    \"                  wdt:P58/wdt:P1040 ?resource.\",\n    \"  FILTER(?resource IN (wd:Q1903317, wd:Q627060, wd:Q2520777))\",\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:6660 kg:8669 ;\",\n    \"       kg:4862 ?person ;\",\n    \"       kg:7206 ?person .\",\n    \"?person kg:0089 kg:0518, kg:6413, kg:6771 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P106 wd:Q188442.\",\n    \"?writer wdt:P800 ?work1.\",\n    \"FILTER(?work1 = wd:Q6554939).\",\n    \"?writer wdt:P800 ?work2.\",\n    \"FILTER(?work2 = wd:Q47459442).\",\n    \"?writer wdt:P800 ?work3.\",\n    \"FILTER(?work3 = wd:Q1139447).\",\n    \"?writer wdt:P162 ?starwars.\",\n    \"FILTER(?starwars = wd:Q12037).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?writer\",\n \t\t\"WHERE {\",\n \t\t\"?writer wdt:P57 wd:Q1869678;\",\n \t\t\"wdt:P58 wd:Q613974;\",\n \t\t\"wdt:P344 \\\"Look at Life\\\";\",\n \t\t\"wdt:P344 \\\"Anyone Lived in a Pretty How Town\\\";\",\n \t\t\"wdt:P1431 wd:Q17738.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P57 ?o1 ;\",\n    \"     kg:P344 ?o2 ;\",\n    \"     kg:P1431 ?o3 ;\",\n    \"     kg:P58 ?o4 .\",\n    \"?o1 kg:P161 Q1869678 ;\",\n    \"?o2 kg:P161 Q613974 ;\",\n    \"?o3 kg:P161 Q1415127 ;\",\n    \"?o4 kg:P161 Q17738\"\n    ,\n    \"FILTER (?s = ?o1 && ?s = ?o2 && ?s = ?o3 && ?s = ?o4)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q4204518 .\", \"# directed by Jens Jørgen Thorsen\",\n    \"?film wdt:P162 wd:Q4204518 .\", \"# produced by Jens Jørgen Thorsen\",\n    \"?film wdt:P58 wd:Q4204518 .\", \"# written by Jens Jørgen Thorsen\",\n    \"?film wdt:P161 wd:Q4204518 .\", \"# edited by Jens Jørgen Thorsen\",\n    \"?film wdt:P57 wd:Q983688 .\", \"# directed by Jørgen Leth\",\n    \"?film wdt:P162 wd:Q983688 .\", \"# produced by Jørgen Leth\",\n    \"?film wdt:P58 wd:Q983688 .\", \"# written by Jørgen Leth\",\n    \"?film wdt:P161 wd:Q983688 .\", \"# edited by Jørgen Leth\",\n    \"?film wdt:P57 wd:Q12335324 .\", \"# directed by Ole John\",\n    \"?film wdt:P162 wd:Q12335324 .\", \"# produced by Ole John\",\n    \"?film wdt:P58 wd:Q12335324 .\", \"# written by Ole John\",\n    \"?film wdt:P161 wd:Q12335324 .\" ,\"# edited by Ole John\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P162 wd:Q1687239.\",\n    \"?film wdt:P58 wd:Q35979475.\",\n    \"?film wdt:P1040 wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:8345 ;\",\n    \"       kg:P162 kg:6701 ;\",\n    \"       kg:P58 kg:3520 ;\",\n    \"       kg:P1040 kg:2031 .\",\n    \"FILTER (?film = kg:4655 || ?film = kg:8770 || ?film = kg:1912)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q4835018.\",\n    \"?item wdt:P800 wd:Q207456.\",\n    \"?item wdt:P162 wd:Q207456.\",\n    \"?item wdt:P57 wd:Q207456.\",\n    \"?item wdt:P161 wd:Q207456.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"       wdt:P58 wd:Q551861 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1186 kg:0579 ;\",\n    \"kg:2196 kg:4747 ;\",\n    \"kg:1950 kg:8053 , kg:8736 , kg:9677 , kg:6289 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q3282638.\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"(wdt:P162|wdt:P57|wdt:P161) ?person;\",\n    \"(wdt:P577|wdt:P2437) ?publicationDate.\",\n    \"FILTER(?film = wd:Q14823164 || ?film = wd:Q15257490 || ?film = wd:Q17031050).\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\"query\": [\"SELECT ?film WHERE {\", \"?person wdt:P106 wd:Q3282637 ;\", \"wdt:P57 ?film .\", \"{ ?film wdt:P1431 wd:Q483197 } UNION { ?film wdt:P1431 wd:Q484679 } UNION { ?film wdt:P1431 wd:Q13471372 }\", \"}\"] }"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?person a kg:8097 ;\",\n    \"       kg:4465 ?film ;\",\n    \"       kg:8907 ?film ;\",\n    \"       kg:5247 ?film ;\",\n    \"       kg:8262 ?film .\",\n    \"?film a kg:6118, kg:7873, kg:1013 .\"\n    ,\n    \"FILTER (?film = kg:3663 || ?film = kg:7873 || ?film = kg:1013)\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q4204518.\",\n    \"?film wdt:P577 wd:Q16845837.\",\n    \"?film wdt:P57 wd:Q4204518, wd:Q16845837, wd:Q1233539.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P58 wd:Q1687239.\",\n    \"?film wdt:P1040 wd:Q35979475.\"\n    ,\n    \"?film wdt:P31 wd:Q11424\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:2411 ;\",\n    \"       kg:P58 kg:2351 ;\",\n    \"       kg:P161 kg:6698 .\"\n    ]}\n \t\t\t\t\t       \t\t"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q1234567 .\", \"# directed by Jens Jørgen Thorsen\",\n    \"?film wdt:P161 wd:Q1234568 .\", \"# edited by Jørgen Leth\",\n    \"?film wdt:P162 wd:Q1234569 .\", \"# written by Ole John\",\n    \"?film wdt:P272 wd:Q1234570 .\", \"# produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q562108.\",\n    \"?film wdt:P162 wd:Q1687239.\",\n    \"?film wdt:P58 wd:Q35979475.\",\n    \"?film wdt:P1040 wd:Q562108, wd:Q1687239, wd:Q35979475.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:7326 ;\",\n    \"       kg:P162 kg:2176 ;\",\n    \"       kg:P58 kg:7644 ;\",\n    \"       kg:P272 kg:0839 .\",\n    \"FILTER (?film = kg:5962 || ?film = kg:9312 || ?film = kg:5164)\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q105953144 .\", \"# director of Ember\",\n    \"{ ?item wdt:P162 wd:Q21286747 . } UNION { ?item wdt:P793 wd:Q21286747 . } UNION { ?item wdt:P50 wd:Q21286747 . } UNION { ?item wdt:P161 wd:Q21286747 . }. \", \"# edited, executive produced, wrote or directed Fate, The Confession and The Waiting Room\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q5437360 AS ?ember).\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  FILTER(?director = ?ember).\",\n    \"  VALUES ?predicate { wdt:P1040 wdt:P1431 wdt:P58 }.\",\n    \"  ?item ?predicate wd:Q25479948, wd:Q12813010, wd:Q6084069.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:4623 kg:2825 .\",\n    \"?resource kg:9367 ?director ;\",\n    \"kg:5181 kg:0200, kg:1740 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q105953144 .\", \"# director of Ember\",\n    \"{ ?item wdt:P162 wd:Q21286747 . } UNION { ?item wdt:P162 wd:Q24547424 . } UNION { ?item wdt:P162 wd:Q41671745 . }. \", \"# edited, wrote, executive produced Fate, The Waiting Room, and The Confession\",\n    \"?item wdt:P161 wd:Q21286747 .\", \"# directed Fate\",\n    \"?item wdt:P161 wd:Q24547424 .\", \"# directed The Waiting Room\",\n    \"?item wdt:P161 wd:Q41671745 .\", \"# directed The Confession\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q5437360 AS ?ember).\",\n    \"  ?item wdt:P57 ?director.\",\n    \"  FILTER(?director = ?ember).\",\n    \"  VALUES ?predicate { wdt:P58 wdt:P1040 wdt:P1431 }.\",\n    \"  ?item ?predicate wd:Q25479948, wd:Q12813010, wd:Q6084069.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:P57 ?film .\",\n    \"?film rdf:type kg:Q5437360 .\",\n    \"?director kg:P1040 ?writtenFilm .\",\n    \"?writtenFilm rdf:type kg:Q6084069 .\",\n    \"?director kg:P1431 ?execProducedFilm .\",\n    \"?execProducedFilm rdf:type kg:Q12813010 .\",\n    \"?director kg:P58 ?directedFilm .\",\n    \"?directedFilm rdf:type kg:Q25479948 .\",\n    \"FILTER (?film = kg:Q5437360 || ?writtenFilm = kg:Q6084069 || ?execProducedFilm = kg:Q12813010 || ?directedFilm = kg:Q25479948)\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q1175688.\",\n    \"?film wdt:P57 wd:Q1175688.\",\n    \"?film wdt:P170 wd:Q1175688, wd:Q381671, wd:Q380443.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424.\",\n    \"?film wdt:P1431 ?producer.\",\n    \"?producer wdt:P57 wd:Q448604.\",\n    \"?film wdt:P57 ?director.\",\n    \"?director wdt:P57 wd:Q363666.\",\n    \"?film wdt:P58 ?writer.\",\n    \"?writer wdt:P57 wd:Q452794.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P1431 ?producer .\",\n    \"?film kg:P57 ?director .\",\n    \"?film kg:P58 ?writer .\",\n    \"FILTER (?producer = kg:1538 && ?director = kg:7435 && ?writer = kg:5906)\",\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?editor .\",\n    \"?item wdt:P87 ?cinematographer .\",\n    \"{ ?editor wdt:P161 wd:Q17034604 } UNION { ?cinematographer wdt:P161 wd:Q17034604 }. \",\n    \"{ ?editor wdt:P161 wd:Q1527683 } UNION { ?cinematographer wdt:P161 wd:Q1527683 }. \",\n    \"{ ?editor wdt:P161 wd:Q482996 } UNION { ?cinematographer wdt:P161 wd:Q482996 }. \",\n    \"?item wdt:P57 ?editor2 .\",\n    \"?item wdt:P162 ?director .\",\n    \"FILTER (?editor = ?editor2 && ?editor = ?director).\",\n    \"?item wdt:P577 ?releaseDate .\",\n    \"FILTER NOT EXISTS { ?item wdt:P577 ?releaseDate2 . FILTER (?releaseDate2 < ?releaseDate) }\",\n    \"?item wdt:P161 wd:Q685742 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?editor .\",\n    \"?item wdt:P1040 ?cinematographer .\",\n    \"{\",\n    \"  SELECT ?editor ?cinematographer\",\n    \"  WHERE {\",\n    \"    wd:Q13471372 wdt:P344 ?title1 .\",\n    \"    wd:Q462025 wdt:P344 ?title2 .\",\n    \"    wd:Q17041657 wdt:P344 ?title3 .\",\n    \"    FILTER(?title1 = ?title2 && ?title2 = ?title3) .\",\n    \"    wd:Q483197 wdt:P1431 ?editor .\",\n    \"    wd:Q483197 wdt:P1040 ?cinematographer .\",\n    \"  }\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?editor_cinematographer\",\n    \"WHERE {\",\n    \"?film kg:0884 kg:7108 ;\",\n    \"       kg:8081 ?editor_cinematographer ;\",\n    \"       kg:7942 kg:7646, kg:6849, kg:7780 .\",\n    \"?editor_cinematographer kg:0403 kg:7942 ;\",\n    \"                         kg:0884 kg:7108 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?cinematographer ;\",\n    \"       wdt:P162 wd:Q106481 ;\",\n    \"       wdt:P161 wd:Q106481 ;\",\n    \"       wdt:P57 wd:Q106481 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\"query\": [\"SELECT ?cinematographer WHERE {\", \"?cinematographer wdt:P106 wd:Q599423 ;\", \"wdt:P161 wd:Q44426 ;\", \"wdt:P57 wd:Q44426 ;\", \"wdt:P1040 wd:Q44426 .}\", \"LIMIT 100\"] }"}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n    \"?film kg:1331 kg:7025 .\", \"# film directed by Rainer Werner Fassbinder\",\n    \"?film kg:2181 ?cinematographer .\", \"# film edited by cinematographer\",\n    \"?film kg:3547 kg:7025 .\", \"# film starring Rainer Werner Fassbinder\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor wdt:P166 wd:Q707456; # influenced Wolfgang Ambros\",\n    \"wdt:P166 wd:Q1058139; # influenced Jan-Mari Carlotti\",\n    \"wdt:P26 wd:Q1058140; # married Carolyn Dennis\",\n    \"wdt:P26 wd:Q193442; # married Sara Dylan\",\n    \"?school wdt:P112 wd:Q707456; # founder of Alexandria Monroe High School\",\n    \"?school wdt:P61 ?actor. # actor is the founder\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?actor\",\n    \"WHERE {\",\n    \"?actor wdt:P106 wd:Q33999.\",\n    \"{\",\n    \"SELECT ?actor \",\n    \"WHERE {\",\n    \"?actor wdt:P737 wd:Q5045345. \",\n    \"?influenced1 wdt:P737 ?actor. \",\n    \"?influenced2 wdt:P737 ?actor. \",\n    \"FILTER (?influenced1 = wd:Q12949115 && ?influenced2 = wd:Q4720983).\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"SELECT ?actor \",\n    \"WHERE {\",\n    \"?married1 wdt:P26 ?actor. \",\n    \"?married2 wdt:P26 ?actor. \",\n    \"FILTER (?married1 = wd:Q457433 && ?married2 = wd:Q45404).\",\n    \"}\",\n    \"}.\",\n    \"{\",\n    \"SELECT ?schoolFounder \",\n    \"WHERE {\",\n    \"?schoolFounder wdt:P112 wd:Q5045345.\",\n    \"FILTER (?schoolFounder = ?actor).\",\n    \"}\",\n    \"}\"\n  ]\n  }\n "}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 ?o1 .\",\n    \"?o1 kg:P737 ?o2 .\",\n    \"?o2 kg:P26 ?o3 .\",\n    \"?o3 kg:P112 ?o4 .\",\n    \"?o4 kg:P106 ?o5 .\",\n    \"FILTER (?o5 = kg:9387 && ?o2 = kg:9987 && ?o4 = kg:0185)\",\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 ?employer.\",\n    \"?employer wdt:P161 wd:Q216506.\",\n    \"?item wdt:P108 wd:Q169432.\",\n    \"?item wdt:P108 wd:Q691283.\",\n    \"?item wdt:P108 wd:Q7564915.\",\n    \"?item wdt:P112 wdt:Q223210.\",\n    \"?item wdt:P112 wdt:Q1172214.\",\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 wd:Q7432436 ;\", \"# founder of World Wide Web Consortium\",\n    \"wdt:P108 wd:Q7204713 ;\", \"# founder of Open Data Institute\",\n    \"wdt:P112 wd:Q42944 ;\", \"# employed by Plessey\",\n    \"wdt:P112 wd:Q37033 ;\", \"# employed by CERN\",\n    \"wdt:P112 wd:Q7095994\" ,\", # employed by School of Electronics and Computer Science, University of Southampton\",\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2143 kg:Q37033 ;\",\n    \"kg:8237 ?o1 ;\",\n    \"kg:0588 kg:Q7095994 ;\",\n    \"kg:3145 ?o2 ;\",\n    \"kg:6182 kg:Q7432436 ;\",\n    \"kg:3947 kg:Q42944 .\",\n    \"?o1 kg:P112 kg:CERN .\",\n    \"?o2 kg:P108 kg:School_of_Electronics_and_Computer_Science_University_of_Southampton\"\n    ,\n    \"?s kg:8237 ?o3 .\",\n    \"?o3 kg:P112 kg:Plessey .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer ?cinematographer ?star ?composer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate ; wdt:P136 ?genre.\",\n    \"?film wdt:P162 ?writer ; wdt:P344 ?cinematographer ; wdt:P161 ?star ; wdt:P86 ?composer.\",\n    \"?film rdfs:label \\\"Planet Terror\\\"@en.\",\n    \"?otherFilm1 wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate1 ; wdt:P162 ?writer ; wdt:P57 ?director.\",\n    \"?otherFilm1 rdfs:label \\\"Sin City: A Dame to Kill For\\\"@en.\",\n    \"?otherFilm2 wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate2 ; wdt:P162 ?writer ; wdt:P57 ?director.\",\n    \"?otherFilm2 rdfs:label \\\"Machete\\\"@en.\",\n    \"?otherFilm3 wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate3 ; wdt:P162 ?writer ; wdt:P57 ?director.\",\n    \"?otherFilm3 rdfs:label \\\"Sin City\\\"@en.\",\n    \"FILTER (?writer = ?director).\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1653396 ;\", \"# writer of Planet Terror\",\n    \"wdt:P344 wd:Q1165050 ;\", \"# cinematographer of Planet Terror\",\n    \"wdt:P57 wd:Q128493 ;\", \"# star of Planet Terror\",\n    \"wdt:P86 wd:Q192115 ;\", \"# composer of Planet Terror\",\n    \"wdt:P57 ?edited ;\", \"# edited and directed by\",\n    \"?edited wdt:P161 wd:Q1653396 ;\", \"# Sin City: A Dame to Kill For\",\n    \"?edited wdt:P161 wd:Q1165050 ;\", \"# Machete\",\n    \"?edited wdt:P161 wd:Q128493 ;\", \"# Sin City\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?film kg:7171 kg:6198 .\", \"# Planet Terror\",\n    \"?person kg:2694 ?film ;\", \"# writer of Planet Terror\",\n    \"kg:9636 ?film ;\", \"# cinematographer of Planet Terror\",\n    \"kg:9363 ?film ;\", \"# star of Planet Terror\",\n    \"kg:8807 ?film .\", \"# composer of Planet Terror\",\n    \"?person kg:7027 kg:4202 ;\", \"# edited and directed Sin City: A Dame to Kill For\",\n    \"kg:7027 kg:1096 ;\", \"# edited and directed Machete\",\n    \"kg:7027 kg:8061\" , \"# edited and directed Sin City\"\n    ,\n    \"}\"]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  ?editorAndProducer wdt:P162 wd:Q7164394;\",\n    \"         wdt:P161 wd:Q5290717.\",\n    \"  ?item wdt:P57 ?editorAndProducer;\",\n    \"        wdt:P162 ?editorAndProducer;\",\n    \"        wdt:P170 ?editorAndProducer;\",\n    \"        wdt:P161 ?editorAndProducer.\"\n    ]}\n "}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?editor wdt:P57 wd:Q13471372.\",\n    \"?editor wdt:P1431 wd:Q483197.\",\n    \"?editor wdt:P1040 wd:Q484679.\",\n    \"?editor wdt:P58 wd:Q13471372.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?editorAndProducer kg:P57 ?Pietà .\",\n    \"  ?editorAndProducer kg:P1040 ?Dream .\",\n    \"  ?editorAndProducer kg:P1431 ?Moebius .\",\n    \"  FILTER (?Pietà = kg:6634 && ?Dream = kg:4739 && ?Moebius = kg:8105)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282638 ;\", \"# film producer\",\n    \"wdt:P112 wd:Q216718 ;\", \"# founded D.W. Griffith Productions\",\n    \"wdt:P112 wd:Q221411 ;\", \"# founded United Artists Corporation\",\n    \"wdt:P112 wd:Q52209303 ;\", \"# founded David W. Griffith Corp.\",\n    \"wdt:P57 wd:Q216718 ;\", \"# directed The Brahma Diamond\",\n    \"wdt:P57 wd:Q5654506 ;\", \"# directed His Lost Love\",\n    \"wdt:P57 wd:Q190579 ;\", \"# directed The Birth of a Nation\",\n    \"wdt:P162 wd:Q216718 ;\", \"# wrote The Brahma Diamond\",\n    \"wdt:P162 wd:Q5654506 ;\", \"# wrote His Lost Love\",\n    \"wdt:P162 wd:Q190579\" ,\", # wrote The Birth of a Nation\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"wdt:P112 (wd:Q219400, wd:Q64434913) ;\",\n    \"wdt:P57 (wd:Q220394, wd:Q542216) ;\",\n    \"wdt:P58 (wd:Q1857205).\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 ?o ;\",\n    \"      kg:P57 ?t1 ;\",\n    \"      kg:P58 ?t2 ;\",\n    \"      kg:P112 ?c1, ?c2, ?c3 .\",\n    \"FILTER (?t1 = kg:2822 && ?t2 = kg:1313 && ?c1 = kg:7295 && ?c2 = kg:5136 && ?c3 = kg:9090)\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q15733170.\",\n    \"?item wdt:P57 ?executiveProducer.\",\n    \"?item wdt:P98 ?editor.\",\n    \"?item wdt:P87 ?composer.\",\n    \"?item wdt:P344 ?cinematographer.\",\n    \"?item wdt:P57 ?director.\",\n    \"?executiveProducer wdt:P800 ?primary.\",\n    \"FILTER(CONTAINS(str(?primary), \\\"Primary!\\\")).\",\n    \"?editor wdt:P800 ?inYourAbsence.\",\n    \"FILTER(CONTAINS(str(?inYourAbsence), \\\"In Your Absence\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q4959991.\",\n    \"?item wdt:P1040 wd:Q5375110.\",\n    \"?item wdt:P58 wd:Q7243050.\",\n    \"?item wdt:P86 wd:Q4959991.\",\n    \"?item wdt:P1431 wd:Q4959991.\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:5615 kg:6227 ;\",\n    \"      kg:1536 ?y ;\",\n    \"      kg:0731 kg:5846 ;\",\n    \"      kg:0220 kg:1224 ;\",\n    \"      kg:4311 kg:7818 .\",\n    \"?y kg:1040 \\\"Primary!\\\"@en, \\\"In Your Absence\\\"@en .\",\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5;\",\n    \"?item wdt:P106/wdt:P279* wd:Q901;\",\n    \"?item wdt:P108* wd:Q2165068;\",\n    \"?item wdt:P108* wd:Q180163;\",\n    \"?item wdt:P108* wd:Q13371;\",\n    \"?item wdt:P108* wd:Q189836;\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P27 wd:Q30;\",\n    \"       wdt:P108 wd:Q55206;\",\n    \"       wdt:P108 wd:Q23548;\",\n    \"       wdt:P108 wd:Q41506;\",\n    \"       wdt:P108 wd:Q622664.\",\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:9923 kg:6416 ;\",\n    \"kg:8994 kg:1473, kg:3401, kg:8712, kg:2435 ;\",\n    \"kg:7668 kg:5431 .\"\n    ]}\n "}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q10800557 .\", \"# star\",\n    \"?item wdt:P800 wd:Q18510 .\", \"# writer of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"?item wdt:P800 wd:Q1141358 .\", \"# editor of Planet Terror\",\n    \"?item wdt:P57 wd:Q131233 .\", \"# cinematographer of Once Upon a Time in Mexico\",\n    \"?item wdt:P57 wd:Q131233 .\", \"# director of Sin City\",\n    \"?item wdt:P487 wd:Q1141358 .\", \"# editor of Planet Terror\",\n    \"?item wdt:P86 wd:Q18510 .\", \"# composer of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1165050 ;\",\n    \"       wdt:P161 wd:Q192115 ;\",\n    \"       wdt:P161 wd:Q656357 ;\",\n    \"       wdt:P57 ?star ;\",\n    \"       wdt:P1040 ?writer ;\",\n    \"       wdt:P58 ?editor ;\",\n    \"       wdt:P344 ?composer.\",\n    \"?star wdt:P86 wd:Q93853 ;\",\n    \"?writer wdt:P86 wd:Q93853 ;\",\n    \"?editor wdt:P86 wd:Q93853 ;\",\n    \"?composer wdt:P86 wd:Q93853\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P161 kg:4292 ;\", \"# star of The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"kg:P344 kg:3024 ;\", \"# cinematographer of Sin City\",\n    \"kg:P57 kg:2814 ;\", \"# director of Planet Terror\",\n    \"kg:P1040 kg:1991 ;\", \"# composer of Once Upon a Time in Mexico\",\n    \"kg:P86 kg:8530 .\", \"# editor of The Adventures of Sharkboy and Lavagirl in 3-D, Planet Terror, and Sin City\",\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P161 wd:Q112069743.\",\n    \"?item wdt:P57 ?executiveProducer.\",\n    \"?executiveProducer wdt:P108 ?employer1.\",\n    \"?employer1 wdt:P361 wd:Q1048733.\",\n    \"?executiveProducer wdt:P108 ?employer2.\",\n    \"?employer2 wdt:P361 wd:Q1141875.\",\n    \"?executiveProducer wdt:P108 ?employer3.\",\n    \"?employer3 wdt:P361 wd:Q1138606.\",\n    \"?item wdt:P162 ?writer.\",\n    \"?writer wdt:P108 ?employer4.\",\n    \"?employer4 wdt:P361 wd:Q1141880.\",\n    \"?writer wdt:P108 ?employer5.\",\n    \"?employer5 wdt:P361 wd:Q1138607.\",\n    \"?writer wdt:P108 ?employer6.\",\n    \"?employer6 wdt:P361 wd:Q1048732.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q29011 ;\",\n    \"wdt:P108 wd:Q1054807, wd:Q11490471, wd:Q11371930 ;\",\n    \"wdt:P1431 wd:Q182950, wd:Q1136386, wd:Q947907 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7101 ?executiveProducer .\",\n    \"?executiveProducer kg:8123 kg:9147 .\",\n    \"?resource kg:5579 ?writer .\",\n    \"?writer kg:108 ?company .\",\n    \"{ ?company kg:3791 kg:1054807 . } UNION { ?company kg:2383 kg:11490471 . } UNION { ?company kg:6855 kg:11371930 . } UNION { ?company kg:9772 kg:182950 . } UNION { ?company kg:4927 kg:1136386 . } UNION { ?company kg:0935 kg:947907 . }\",\n    \"FILTER (?resource = <http://example.org/kg/Howl's_Moving_Castle>)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255.\",\n    \"?item wdt:P800 wd:Q157168.\",\n    \"?item wdt:P800 wd:Q47418922.\",\n    \"?item wdt:P800 wd:Q1141324.\",\n    \"?item wdt:P800 wd:Q216506.\",\n    \"?item wdt:P161 wd:Q124081.\",\n    \"?item wdt:P57 ?director.\",\n    \"?item wdt:P58 ?writer.\",\n    \"?item wdt:P162 ?producer.\",\n    \"FILTER (?director = ?item && ?writer = ?item && ?producer = ?item).\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q1415127.\",\n \t\t\"?item wdt:P58 wd:Q208910.\",\n \t\t\"?item wdt:P1431 wd:Q613974.\",\n \t\t\"?item wdt:P344 \\\"Herbie\\\"@en.\",\n \t\t\"?item wdt:P344 \\\"Anyone Lived in a Pretty How Town\\\"@en.\",\n \t\t\"?item wdt:P344 \\\"Filmmaker\\\"@en.\",\n \t\t\"?item wdt:P344 \\\"1:42.08\\\"@en.\",\n \t\t\"?item wdt:P57 wd:Q1609393.\",\n \t\t\"?item wdt:P58 wd:Q17738.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P344 \\\"Herbie\\\"@en.\",\n    \"?s kg:P344 \\\"Anyone Lived in a Pretty How Town\\\"@en.\",\n    \"?s kg:P344 \\\"Filmmaker\\\"@en.\",\n    \"?s kg:P344 \\\"1:42.08\\\"@en.\",\n    \"?s kg:P57 ?o.\",\n    \"?o kg:P1431 <http://example.org/kg/Q1415127>.\",\n    \"?s kg:P58 ?p.\",\n    \"?p kg:P344 \\\"Star Wars: Episode IV – A New Hope\\\"@en.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255;\",\n    \"wdt:P57/wdt:P161 wd:Q1139496;\",\n    \"wdt:P57/wdt:P161 wd:Q1356938;\",\n    \"wdt:P57/wdt:P161 wd:Q6859429;\",\n    \"wdt:P162 wd:Q1139496;\",\n    \"wdt:P162 wd:Q1356938;\",\n    \"wdt:P162 wd:Q6859429.\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q3485595 ;\",\n    \"       wdt:P344 \\\"Rabbits\\\" ;\",\n    \"       wdt:P344 \\\"Six Men Getting Sick\\\" ;\",\n    \"       wdt:P1040 wd:Q1473406 ;\",\n    \"       wdt:P1431 wd:Q1140578, wd:Q1511905, wd:Q2085 .\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7526 Q1473406 ;\",\n    \"     kg:8220 Q3485595 ;\",\n    \"     kg:8526 Q1140578, Q1511905, Q2085 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q189162.\",\n    \"?person wdt:P802 [wdt:P161 wd:Q113062].\",\n    \"?person wdt:P802 [wdt:P161 wd:Q1149499].\",\n    \"?person wdt:P802 [wdt:P161 wd:Q1210454].\",\n    \"?person wdt:P802 [wdt:P161 wd:Q154849].\",\n    \"?person wdt:P26 wd:Q295170.\",\n    \"?person wdt:P26 wd:Q431541.\",\n    \"?person wdt:P26 wd:Q335684.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2449461 ;\",\n    \"       wdt:P57 wd:Q45602 ;\",\n    \"       wdt:P57 wd:Q166739 ;\",\n    \"       wdt:P57 wd:Q374172 ;\",\n    \"       wdt:P26 wd:Q32337 ;\",\n    \"       wdt:P26 wd:Q137808 ;\",\n    \"       wdt:P26 wd:Q241019 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"?x kg:2813 kg:1085 ;\",\n    \"kg:1503 (kg:7001, kg:2856, kg:8455) ;\",\n    \"kg:3979 (kg:5719, kg:4195, kg:6480).\"\n  ]\n  }\n "}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\", \"# Charlie Chaplin is a human\",\n    \"?item wdt:P21 wd:Q6581097 .\", \"# Male gender\",\n    \"?item wdt:P50 ?writtenBy .\", \"# written by\",\n    \"?item wdt:P161 ?editedBy .\", \"# edited by\",\n    \"?item wdt:P57 ?directedBy .\", \"# directed by\",\n    \"FILTER (?writtenBy = wd:Q1517 && ?editedBy = wd:Q1517 && ?directedBy = wd:Q1517)\", \"# Filter for Charlie Chaplin as writer, editor and director\",\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\"query\": [\"SELECT ?item WHERE {\", \"?item wdt:P31 wd:Q5;\", \"?item wdt:P21 wd:Q6581097;\", \"?item wdt:P57 wd:Q882;\", \"?item wdt:P1040 wd:Q882;\", \"?item wdt:P58 wd:Q882;}\", \"LIMIT 100\"] }"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:9816 kg:1774 ;\",\n    \"kg:8011 ?o1 ;\",\n    \"kg:3311 ?o2 ;\",\n    \"kg:2155 ?o3 .\",\n    \"?o1 kg:0701 kg:882 .\",\n    \"?o2 kg:0701 kg:882 .\",\n    \"?o3 kg:0701 kg:882 .\",\n    \"?s kg:8680 kg:6581097\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1034128.\",\n    \"?item wdt:P828 wd:Q207345.\",\n    \"?acquirer1 wdt:P31 wd:Q4837446 ; wdt:P1082 wd:Q207345.\",\n    \"?acquirer2 wdt:P31 wd:Q484202 ; wdt:P1082 wd:Q207345.\",\n    \"?acquirer3 wdt:P31 wd:Q2164394 ; wdt:P1082 wd:Q207345.\",\n    \"?acquirer4 wdt:P31 wd:Q1570457 ; wdt:P1082 wd:Q207345.\",\n    \"?item wdt:P749 ?acquirer1, ?acquirer2, ?acquirer3, ?acquirer4\",\n    \"FILTER (?acquirer1 = wd:Q207345 && ?acquirer2 = wd:Q484202 && ?acquirer3 = wd:Q2164394 && ?acquirer4 = wd:Q1570457).\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q2062523 ;\",\n    \"       wdt:P750 wd:Q3511946, wd:Q7603552, wd:Q1411292, wd:Q3133593, wd:Q219635, wd:Q505275 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?film kg:2576 ?distributor .\",\n    \"?film kg:3466 ?producer .\",\n    \"?distributor kg:7572 ?acquiredBy1 .\",\n    \"?acquiredBy1 kg:5133 \\\"Laurene Powell Jobs\\\"@en .\",\n    \"?distributor kg:7572 ?acquiredBy2 .\",\n    \"?acquiredBy2 kg:5133 \\\"Fidelity Investments\\\"@en .\",\n    \"?distributor kg:7572 ?acquiredBy3 .\",\n    \"?acquiredBy3 kg:5133 \\\"BlackRock\\\"@en .\",\n    \"?distributor kg:7572 ?acquiredBy4 .\",\n    \"?acquiredBy4 kg:5133 \\\"State Street Global Advisors\\\"@en .\",\n    \"?distributor kg:7572 ?acquiredBy5 .\",\n    \"?acquiredBy5 kg:5133 \\\"T. Rowe Price\\\"@en .\",\n    \"?distributor kg:7572 ?acquiredBy6 .\",\n    \"?acquiredBy6 kg:5133 \\\"Capital Group Companies\\\"@en .\",\n    \"?film kg:8244 \\\"Grand Canyon\\\"@en\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q188442.\",\n    \"?item wdt:P57 ?film1.\",\n    \"?film1 wdt:P1476 \\\"City Lights\\\".\",\n    \"?item wdt:P57 ?film2.\",\n    \"?film2 wdt:P1476 \\\"Modern Times\\\".\",\n    \"?item wdt:P161 ?film3.\",\n    \"?film3 wdt:P1476 \\\"The Floorwalker\\\".\",\n    \"?item wdt:P161 ?film4.\",\n    \"?film4 wdt:P1476 \\\"His Musical Career\\\".\",\n    \"?item wdt:P161 ?film5.\",\n    \"?film5 wdt:P1476 \\\"The Kid\\\".\",\n    \"?item wdt:P161 ?film6.\",\n    \"?film6 wdt:P1476 \\\"The Gold Rush\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q45602 ;\",\n    \"       wdt:P1040 wd:Q166739, wd:Q214723, wd:Q2345349, wd:Q238211, wd:Q374172 ;\",\n    \"       wdt:P86 wd:Q45602, wd:Q238211 .\",\n    \"}\"\n  ]\n}"}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2333 kg:5517 ;\",\n    \"kg:9546 kg:1841 , kg:0094 , kg:9627 ;\",\n    \"kg:2003 kg:3515 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director ?influencedLars ?influencedAran\",\n    \"WHERE {\",\n    \"?film1 wdt:P31 wd:Q11424; wdt:P57 ?director; rdfs:label \\\"There Will Be No Leave Today\\\"@en.\",\n    \"?film2 wdt:P31 wd:Q11424; wdt:P57 ?director; rdfs:label \\\"The Killers\\\"@en.\",\n    \"?director wdt:P161 ?starring.\",\n    \"?influencedLars wdt:P737 ?director; wdt:P1477 \\\"Lars von Trier\\\"@en.\",\n    \"?influencedAran wdt:P737 ?director; wdt:P1477 \\\"Aran Cosentino\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director ?influenced1 ?influenced2\",\n    \"WHERE {\",\n    \"?film1 wdt:P161 wd:Q1970252.\",\n    \"?film1 wdt:P57 ?director.\",\n    \"?film2 wdt:P161 wd:Q3017093.\",\n    \"?film2 wdt:P57 ?director.\",\n    \"?director wdt:P737 ?influenced1.\",\n    \"FILTER(?influenced1 = wd:Q88965291).\",\n    \"?director wdt:P737 ?influenced2.\",\n    \"FILTER(?influenced2 = wd:Q133730).\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?director ?influencedLars ?influencedAran\",\n    \"WHERE {\",\n    \"?film kg:9852 ?director .\",\n    \"?film kg:7838 ?director .\",\n    \"{ ?director kg:4919 ?influencedLars . FILTER (?influencedLars = kg:9388) } UNION { ?director kg:4919 ?influencedAran . FILTER (?influencedAran = kg:1056) }\",\n    \"FILTER (?film = kg:7353 || ?film = kg:3435)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q6625963 ;\", \"# film editor\",\n    \"wdt:P26 wd:Q336573 ;\", \"# married Oona O'Neill\",\n    \"wdt:P26 wd:Q452886 ;\", \"# married Lita Grey\",\n    \"wdt:P26 wd:Q524254 ;\", \"# married Mildred Harris\",\n    \"wdt:P737 wd:Q151892 ;\", \"# influenced Federico Fellini\",\n    \"wdt:P737 wd:Q192046 ;\", \"# influenced Marcel Marceau\",\n    \"wdt:P737 wd:Q297556 ;\", \"# influenced Harold Lloyd\",\n    \"wdt:P112 wd:Q221103 ;\", \"# founded United Artists Corporation\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q7042855 ;\",\n    \"wdt:P26 wd:Q241019, wd:Q32337, wd:Q137808 ;\",\n    \"wdt:P737 wd:Q104340, wd:Q157191, wd:Q219400 ;\",\n    \"wdt:P112 wd:Q7371 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 kg:0887 ;\",\n    \"kg:P26 kg:3790, kg:2780, kg:5797 ;\",\n    \"kg:P737 kg:0599 ;\",\n    \"kg:P112 kg:4096 ;\",\n    \"kg:P26 kg:9515 .\",\n    \"?s ^kg:P106 kg:0897 ;\",\n    \"^kg:P26 kg:5107, kg:2787, kg:6495 .\",\n    \"?influenced kg:P106 kg:0887 ;\",\n    \"kg:P737 kg:8926, kg:157191, kg:219400 .\",\n    \"?s ^kg:P112 ?f ;\",\n    \"?f kg:P26 kg:7042855 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q174842 ; # director of Jane B. par Agnès V.\",\n    \"wdt:P57 wd:Q1210095 ; # director of The Beaches of Agnès\",\n    \"wdt:P57 wd:Q1210101 . # director of The World of Jacques Demy\",\n    \"?item wdt:P161 wd:Q174842 ; # star of Jane B. par Agnès V.\",\n    \"wdt:P161 wd:Q1210095 ; # star of The Beaches of Agnès\",\n    \"wdt:P161 wd:Q1210101 . # star of The World of Jacques Demy\",\n    \"?item wdt:P50 wd:Q174842 ; # writer of Jane B. par Agnès V.\",\n    \"wdt:P50 wd:Q1210095 ; # writer of The Beaches of Agnès\",\n    \"wdt:P50 wd:Q1210101 . # writer of The World of Jacques Demy\",\n    \"?item wdt:P26 wd:Q5517 ; # married to someone\",\n    \"?influencedBy wdt:P737 wd:Q5517 ; # influenced by Jacques Demy\",\n    \"?influences wdt:P737 ?item . # and was influenced by Jacques Demy\",\n    \"}\"\n  ]\n}"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\"query\": [\"SELECT ?item \", \"?item \", \"wdt:P161 \", \"wd:Q2709504 \", \"; \", \"wdt:P57 \", \"wd:Q3204825 \", \"; \", \"wdt:P58 \", \"wd:Q3161846 \", \". \", \"{\", \"?item \", \"wdt:P26 \", \"wd:Q312258 \", \"; \", \"wdt:P737 \", \"?influenced \", \"; \", \"wdt:P161 \", \"wd:Q2709504 \", \"; \", \"wdt:P57 \", \"wd:Q3204825 \", \"; \", \"wdt:P58 \", \"wd:Q3161846 \", \". \", \"}\"] }"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?director\",\n    \"WHERE {\",\n    \"?film kg:8954 ?director .\",\n    \"FILTER (?film = kg:7352 || ?film = kg:9335 || ?film = kg:0549) .\",\n    \"?director kg:1025 ?spouse .\",\n    \"?influencee kg:3768 ?director .\",\n    \"?director kg:5044 ?influencer .\",\n    \"FILTER (?influencer = kg:0156) .\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q1120978 ;\", \"# instance of television series\",\n    \"wdt:P162 ?distributor .\", \"# distributor\",\n    \"?distributor wdt:P749 wd:Q157556 .\", \"# acquired by Vanguard Group\",\n    \"?distributor wdt:P749 wd:Q216439 .\", \"# acquired by BlackRock\",\n    \"?item wdt:P162 ?producer .\", \"# producer\",\n    \"?producer wdt:P171 ?acquired1 .\", \"# acquired Amazon CloudFront\",\n    \"FILTER (?acquired1 = wd:Q671820) .\",\n    \"?producer wdt:P171 ?acquired2 .\", \"# acquired amazon\",\n    \"FILTER (?acquired2 = wd:Q3884) .\",\n    \"?producer wdt:P171 ?acquired3 .\", \"# acquired Amazon Kindle\",\n    \"FILTER (?acquired3 = wd:Q1859) .\",\n    \"?producer wdt:P171 ?acquired4 .\", \"# acquired AbeBooks\",\n    \"FILTER (?acquired4 = wd:Q319795) .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{ \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q17070012 ;\",\n    \"wdt:P750 wd:Q849363, wd:Q219635, wd:Q65073147, wd:Q318128, wd:Q136469, wd:Q1628791 .\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributor kg:7869 ?producer .\",\n    \"?producer kg:9429 ?acquiredBy .\",\n    \"{ ?acquiredBy kg:6391 Q17070012 } UNION { ?acquiredBy kg:6391 Q849363 } UNION { ?acquiredBy kg:6391 Q219635 } UNION { ?acquiredBy kg:6391 Q65073147 } UNION { ?acquiredBy kg:6391 Q318128 } UNION { ?acquiredBy kg:6391 Q136469 } UNION { ?acquiredBy kg:6391 Q1628791 }.\",\n    \"?resource kg:1153 ?distributor .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P106 wd:Q10798782 ; # occupation: film editor\",\n    \"wdt:P800 wd:Q543313 . # notable work: Female Vampire\",\n    \"?item wdt:P800 wd:Q1570638 . # notable work: 99 Women\",\n    \"?item wdt:P800 wd:Q771243 . # notable work: The Blood of Fu Manchu\",\n    \"FILTER NOT EXISTS { ?item wdt:P27 [] }\", \"# no country of citizenship\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q4004365 ;\",\n    \"       wdt:P161 wd:Q3207690, wd:Q3633009, wd:Q289021, wd:Q463946 ;\",\n    \"       wdt:P27 wd:Q29 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:8940 kg:9178 ;\",\n    \"      kg:0078 kg:9187 ;\",\n    \"      kg:3229 kg:6030 ;\",\n    \"      kg:3045 kg:0939 , kg:0652 .\"\n    ,\n    \"FILTER (NOT EXISTS { ?s kg:1754 kg:0418 })\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q2536047 ;\", \"# occupation: cinematographer\",\n    \"wdt:P112 wd:Q4117138 ;\", \"# founded: Industrial Light & Magic\",\n    \"wdt:P112 wd:Q216632 ;\", \"# founded: THX\",\n    \"FILTER NOT EXISTS { ?item wdt:P112 wd:Q170126 . }\", \"# not founded: Jediism\",\n    \"?spouse wdt:P106 wd:Q2536047 ;\", \"# occupation: cinematographer\",\n    \"wdt:P26 ?item ;\", \"# spouse\",\n    \"wdt:P106 wd:Q509979 .\", \"# occupation: businessperson\",\n    \"?spouse wdt:P112 wd:Q170126 ;\", \"# founded: Jediism\",\n    \"?spouse wdt:P112 wd:Q181393 ;\", \"# founded: Lucasfilm\",\n    \"?spouse wdt:P112 wd:Q1053137 .\", \"# founded: LucasArts\",\n    \"FILTER (EXISTS { ?item wdt:P26 ?spouse } || EXISTS { ?spouse wdt:P26 ?item })\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q222344 ;\",\n    \"       wdt:P112 wd:Q216611, wd:Q242446, wd:Q258945, wd:Q746676, wd:Q1044630 ;\",\n    \"       wdt:P26 wd:Q6813152 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P106 kg:2039 ;\",\n    \"      kg:P112 kg:2511 ;\",\n    \"      kg:P26 kg:5134 .\"\n    ]}\n "}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282638 ;\", \"# occupation: cinematographer\",\n    \"wdt:P161 wd:Q184343, wd:Q552121, wd:Q6543210 ;\", \"# starring in Inception, Game Over, Liberation\",\n    \"wdt:P50 ?star .\", \"# star of the films\",\n    \"?item wdt:P57 ?director ;\", \"# director of The Madness\",\n    \"wdt:P162 ?writer ;\", \"# writer of The Madness\",\n    \"wdt:P643 ?producer ;\", \"# executive producer of The Madness\",\n    \"wdt:P98 ?editor .\", \"# editor of The Madness\",\n    \"?item wdt:P1476 \\\"The Madness\\\" .\", \"# title of the film: The Madness\",\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?cinematographer .\",\n    \"?item wdt:P161 wd:Q85520081, wd:Q96054985, wd:Q85532437 .\",\n    \"?item wdt:P344 ?star .\",\n    \"?item wdt:P1040 ?writer .\",\n    \"?item wdt:P1431 ?director .\",\n    \"?item wdt:P58 ?executiveProducer .\",\n    \"FILTER (?cinematographer = ?star && ?star = ?writer && ?writer = ?director && ?director = ?executiveProducer)\",\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:P57 ?o ;\",\n    \"     kg:P161 wd:Q85520081, wd:Q96054985, wd:Q87778273 ;\",\n    \"     kg:P58 ?p ;\",\n    \"     kg:P1040 ?q ;\",\n    \"     kg:P1431 ?r ;\",\n    \"     kg:P344 ?t .\"\n    ,\n    \"FILTER (?p = ?s && ?q = ?s && ?r = ?s && ?t = ?s)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P800 \\\"The Emperor\\\".\",\n    \"?writer wdt:P800 \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"?writer wdt:P800 \\\"1:42.08\\\".\",\n    \"?writer wdt:P800 \\\"Herbie\\\".\",\n    \"?writer wdt:P26 ?spouse.\",\n    \"?influencedBy ?writer ; wdt:P737 ?influencee. \",\n    \"FILTER (?influencee = wd:Q67416369 || ?influencee = wd:Q67385124).\",\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P58 wd:Q1609393.\",\n    \"?writer wdt:P58 wd:Q2411065.\",\n    \"?writer wdt:P58 wd:Q208910.\",\n    \"?writer wdt:P58 wd:Q613974.\",\n    \"?writer wdt:P26 ?spouse.\",\n    \"?spouse wdt:P737 wd:Q52306598.\",\n    \"?influencee wdt:P737 ?writer.\",\n    \"?influencee wdt:P31 wd:Q5.\",\n    \"{ ?influencee wdt:P737 wd:Q717378. } UNION { ?influencee wdt:P737 wd:Q52306598. }\",\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer kg:8427 \\\"The Emperor\\\".\",\n    \"?writer kg:8427 \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"?writer kg:8427 \\\"1:42.08\\\".\",\n    \"?writer kg:8427 \\\"Herbie\\\".\",\n    \"?writer kg:0611 ?person.\",\n    \"?person kg:7316 ?spouse.\",\n    \"?writer kg:7578 ?influencee1.\",\n    \"FILTER (?influencee1 = kg:3218).\",\n    \"?writer kg:7578 ?influencee2.\",\n    \"FILTER (?influencee2 = kg:6555).\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?cinematographer;\",\n    \"      wdt:P161 wd:Q323453;\",\n    \"      wdt:P162 wd:Q604731.\",\n    \"?trilogy wdt:P50 ?director.\",\n    \"?cinematographer wdt:P800 ?executiveProducer.\",\n    \"?cinematographer wdt:P98 ?editor.\",\n    \"?cinematographer wdt:P87 ?writer.\",\n    \"FILTER (?director = ?cinematographer && ?executiveProducer = ?cinematographer && ?editor = ?cinematographer && ?writer = ?cinematographer)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q222344 ;\",\n    \"       wdt:P57 wd:Q2086445 ;\",\n    \"       wdt:P1040 wd:Q1361018 ;\",\n    \"       wdt:P1431 wd:Q18609037 ;\",\n    \"       wdt:P58 wd:Q2086445 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:P57 ?director .\",\n    \"?film kg:P1040 ?cinematographer .\",\n    \"?film kg:P1431 ?editor .\",\n    \"?film kg:P58 ?writer .\",\n    \"?trilogy kg:P106 ?director .\",\n    \"FILTER (?director = ?writer && ?director = ?editor && ?director = ?cinematographer)\",\n    \"VALUES ?film {kg:0722 kg:7860 kg:4939}\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ; wdt:P57 ?director .\",\n    \"{ ?film wdt:P1476 \\\"Vagabond\\\" } UNION { ?film wdt:P1476 \\\"The Gleaners and I\\\" } UNION { ?film wdt:P1476 \\\"Varda by Agnès\\\" }. \",\n    \"?director wdt:P26 ?spouse .\",\n    \"?spouse wdt:P106 wd:Q10798782 ; wdt:P672 wd:Q4473 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q2526255 ;\",\n    \"       wdt:P58/wdt:P737 ?film .\",\n    \"FILTER (?film = wd:Q2298257 || ?film = wd:Q2493884 || ?film = wd:Q63993096) .\",\n    \"?item wdt:P26 wd:Q312258 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?director ?influence\",\n    \"WHERE {\",\n    \"?film1 kg:P58 ?director .\",\n    \"?film1 kg:P1040 'Vagabond' .\",\n    \"?film2 kg:P58 ?director .\",\n    \"?film2 kg:P1040 'The Gleaners and I' .\",\n    \"?film3 kg:P58 ?director .\",\n    \"?film3 kg:P1040 'Varda by Agnès' .\",\n    \"?director kg:P26 ?spouse .\",\n    \"?influence kg:P106 ?director .\",\n    \"?influence kg:P1040 'Jacques Demy' .\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q849457.\",\n    \"?item wdt:P183 ?distributor.\",\n    \"?item wdt:P162 ?producer.\",\n    \"{ ?distributor wdt:P1886 wd:Q2166323. } UNION { ?producer wdt:P1886 wd:Q2166323. }\",\n    \"{ ?distributor wdt:P1886 wd:Q868317. } UNION { ?producer wdt:P1886 wd:Q868317. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1141584. } UNION { ?producer wdt:P1886 wd:Q1141584. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1054233. } UNION { ?producer wdt:P1886 wd:Q1054233. }\",\n    \"{ ?distributor wdt:P1886 wd:Q842164. } UNION { ?producer wdt:P1886 wd:Q842164. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1141587. } UNION { ?producer wdt:P1886 wd:Q1141587. }\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 wd:Q2062523 ;\",\n    \"       wdt:P127 wd:Q3511946, wd:Q7603552, wd:Q2007336, wd:Q219635, wd:Q505275, wd:Q849363 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?film kg:0968 Q2062523 ;\",\n    \"       kg:9566 ?distributor ;\",\n    \"       kg:2147 ?producer .\",\n    \"?distributor kg:3944 ?acquiredBy1 .\",\n    \"?acquiredBy1 kg:3199 Q7603552 .\",\n    \"?distributor kg:3944 ?acquiredBy2 .\",\n    \"?acquiredBy2 kg:4291 Q2007336 .\",\n    \"?distributor kg:3944 ?acquiredBy3 .\",\n    \"?acquiredBy3 kg:1622 Q219635 .\",\n    \"?distributor kg:3944 ?acquiredBy4 .\",\n    \"?acquiredBy4 kg:6334 Q505275 .\",\n    \"?producer kg:3944 ?acquiredBy5 .\",\n    \"?acquiredBy5 kg:4156 Q849363 .\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?director ;\",\n    \"       wdt:P162 ?producer ;\",\n    \"       wdt:P58 ?writer ;\",\n    \"       wdt:P161 ?starring .\",\n    \"FILTER (?director = wd:Q107454) .\", \"# Randolph Scott\",\n    \"FILTER (?producer = wd:Q107454) .\", \"# Randolph Scott\",\n    \"FILTER (?writer = wd:Q107454) .\", \"# Randolph Scott\",\n    \"FILTER (?writer = wd:Q231300) .\", \"# Miriam Hopkins\",\n    \"FILTER (?writer = wd:Q151892) .\", \"# Humphrey Bogart\",\n    \"FILTER (?writer = wd:Q7346476) .\", \"# Robert Buckner\",\n    \"FILTER (?starring = wd:Q189680) .\", \"# Errol Flynn\",\n    \"FILTER (?starring = wd:Q718108) .\" ,\"# Paul Fix\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q93188, wd:Q744357 ;\",\n    \"       wdt:P58 wd:Q16390, wd:Q295984, wd:Q4420093, wd:Q242477 ;\",\n    \"       wdt:P162 wd:Q16390, wd:Q295984, wd:Q4420093, wd:Q242477 ;\",\n    \"       wdt:P272 wd:Q16390, wd:Q295984, wd:Q4420093, wd:Q242477 ;\",\n    \"       wdt:P161 wd:Q93188, wd:Q744357 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P57 kg:4532 ;\",\n    \"       kg:P272 kg:5032 ;\",\n    \"       kg:P58 kg:0334 ;\",\n    \"       kg:P161 kg:1933 ;\",\n    \"       kg:P162 kg:7895 .\",\n    \"FILTER (?film = ?film)\",\n    \"}\"\n  ]\n}"}
