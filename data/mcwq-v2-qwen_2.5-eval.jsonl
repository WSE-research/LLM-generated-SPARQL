{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q164593 wdt:P735 ?screenwriter .\",\n    \"  FILTER(?screenwriter = wd:Q164593).\",\n    \"  BIND(EXISTS({wd:Q164593 wdt:P735 ?screenwriter}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q164593 wdt:P735 ?screenwriter . FILTER(?screenwriter = wd:Q164593). BIND(EXISTS({wd:Q164593 wdt:P735 ?screenwriter}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q103013 wdt:P106 ?occupation.\",\n      \"?occupation wd:Q69423232 true. \",\n      \"BIND(EXISTS(?occupation) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q103013 wdt:P106 ?occupation. ?occupation wd:Q69423232 true. BIND(EXISTS(?occupation) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5377 is Q103013\nkg:3581 is P106\nkg:4815 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:5377 kg:4815 kg:3581.\",\n      \"?result bool:\",\n      \"FILTER(?result = true)\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:5377 kg:4815 kg:3581. ?result bool: FILTER(?result = true) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q4965 wdt:P735 ?composer .\",\n      \"?composer wdt:P106 wd:Q8720 .\" ,\n    \"}\",\n    \"BIND(EXISTS{?composer wdt:P106 wd:Q8720} AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q4965 wdt:P735 ?composer . ?composer wdt:P106 wd:Q8720 . } BIND(EXISTS{?composer wdt:P106 wd:Q8720} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q392 is Q392", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q36834 wdt:P106/wdt:P106 ?composerClass.\",\n      \"?composerClass wd:Q392 wd:Q392.\",\n      \"BIND(EXISTS(?composerClass) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q36834 wdt:P106/wdt:P106 ?composerClass. ?composerClass wd:Q392 wd:Q392. BIND(EXISTS(?composerClass) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2843 is P106\nkg:7831 is Q36834\nkg:4707 is Q392", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:7831 kg:4707 kg:2843.\",\n      \"?result bool:equals true.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:7831 kg:4707 kg:2843. ?result bool:equals true. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P123 ?discovery .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P123 ?discovery . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q5.\",\n    \"?item rdfs:label ?label FILTER (lang(?label) = \\\"en\\\").\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?item wdt:P112 wd:Q5. ?item rdfs:label ?label FILTER (lang(?label) = \"en\"). } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2539 is P112\nkg:1553 is Q5", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:P112 ?resource .\",\n    \"?subject a kg:Q5 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?subject kg:P112 ?resource . ?subject a kg:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?person.\",\n    \"?person rdfs:label \\\"Andrei Tarkovsky\\\"@en.\",\n    \"?film wdt:P2093 ?edit.\",\n    \"?edit a ?resource.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?person. ?person rdfs:label \"Andrei Tarkovsky\"@en. ?film wdt:P2093 ?edit. ?edit a ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q853 is Q853\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q853 wdt:P1040 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9804 is Q853\nkg:9299 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph#>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:9804 \\\"Andrei Tarkovsky\\\" .\",\n    \"?subject kg:9299 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "PREFIX kg: <http://example.org/knowledgeGraph SELECT ?resource WHERE { ?subject kg:9804 \"Andrei Tarkovsky\" . ?subject kg:9299 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?bool WHERE {\",\n    \"wd:Q102693 wdt:P577 ?date .\",\n    \"wd:Q48651 wdt:P577 ?date2 .\",\n    \"FILTER(?date < ?date2) \",\n    \"?book1 wdt:P69 wd:Q48651 .\",\n    \"?book2 wdt:P69 wd:Q102693 .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"BIND(EXISTS{?book2} AS ?bool)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?bool WHERE { wd:Q102693 wdt:P577 ?date . wd:Q48651 wdt:P577 ?date2 . FILTER(?date < ?date2) ?book1 wdt:P69 wd:Q48651 . ?book2 wdt:P69 wd:Q102693 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } BIND(EXISTS{?book2} AS ?bool) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q721 is Q721\nwd:Q1042294 is Q1042294", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q1042294 wdt:P155 ?book .\",\n    \"?book wdt:P155* wd:Q721 .\",\n    \"BIND(EXISTS {?book wdt:P155* wd:Q721} AS ?result)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { Q1042294 wdt:P155 ?book . ?book wdt:P155* wd:Q721 . BIND(EXISTS {?book wdt:P155* wd:Q721} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8724 is P155\nkg:4176 is Q721\nkg:2908 is Q1042294", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:2908 kg:P155*/kg:8724 kg:Q721 ;\",\n    \"kg:P155*/kg:4176 kg:Q1042294 .\",\n    \"BIND(EXISTS{kg:2908 kg:P155*/kg:8724 kg:Q721 ; kg:P155*/kg:4176 kg:Q1042294 } AS ?result)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:2908 kg:P155*/kg:8724 kg:Q721 ; kg:P155*/kg:4176 kg:Q1042294 . BIND(EXISTS{kg:2908 kg:P155*/kg:8724 kg:Q721 ; kg:P155*/kg:4176 kg:Q1042294 } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE { \"\n    , \"?work wikibase:directClaim pq:ts; \"\n    , \"wikibase:specialPageUrl 'Π%27s+sequel'. \"\n    , \"?work wikibase:statementProperty pq:ts. \"\n    , \"?claim wikibase.property wd:P31. \"\n    , \"?item ?claim ?value. \"\n    , \"BIND(EXISTS{?value} AS ?result). \"\n    , \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?work wikibase:directClaim pq:ts; wikibase:specialPageUrl 'Π%27s+sequel'. ?work wikibase:statementProperty pq:ts. ?claim wikibase.property wd:P31. ?item ?claim ?value. BIND(EXISTS{?value} AS ?result). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q168 is Q168\nwdt:P155 is P155\nwd:Q131593 is Q131593", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q168 wdt:P155 ?sequel .\",\n    \"?sequel wdt:P131593 ?result .\",\n    \"FILTER(?result = \\\"san\\\")\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q168 wdt:P155 ?sequel . ?sequel wdt:P131593 ?result . FILTER(?result = \"san\") LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9605 is Q168\nkg:4172 is P155\nkg:6194 is Q131593", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:9605 kg:isQ168 ?entity.\",\n      \"kg:entity kg:P155 ?sequel.\",\n      \"kg:4172 kg:isQ131593 ?sequel.\",\n      \"?result bool(?sequel = true)\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:9605 kg:isQ168 ?entity. kg:entity kg:P155 ?sequel. kg:4172 kg:isQ131593 ?sequel. ?result bool(?sequel = true) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"?person wdt:P22 ?parent ;\",\n    \"wdt:P735 \\\"Jean-François Champollion\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { ?person wdt:P22 ?parent ; wdt:P735 \"Jean-François Champollion\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q260 wdt:P40 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q260 wdt:P40 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5554 is P40\nkg:0706 is P355\nkg:6549 is Q260", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?child kg:P40 ?parent .\",\n    \"?parent a kg:Q260 ;\",\n    \"   kg:P355 ?child .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?child kg:P40 ?parent . ?parent a kg:Q260 ; kg:P355 ?child . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q186329 ;\",\n    \"   rdfs:label ?title .\",\n    \"FILTER LANG(?title) = \\\"en\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q186329 ; rdfs:label ?title . FILTER LANG(?title) = \"en\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q42 is Q42\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?item WHERE {\",\n    \"?item wdt:P58 wd:Q42.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?item WHERE { ?item wdt:P58 wd:Q42. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3912 is Q42\nkg:7317 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7317 \\\"Douglas Adams\\\".\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7317 \"Douglas Adams\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n    \"?person wdtn:Q18629 wdt:P735 ?employer .\",\n    \"FILTER(?person = wd:Q18629 && ?employer = wd:Q142).\",\n    \"?result bool:if(?employer != '', 'true', 'false')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person wdtn:Q18629 wdt:P735 ?employer . FILTER(?person = wd:Q18629 && ?employer = wd:Q142). ?result bool:if(?employer != '', 'true', 'false') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q40 is Q40\nwd:Q79070 is Q79070", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q79070 wdt:P108 ?employment.\",\n      \"?employment wdt:P27 wd:Q40.\",\n      \"BIND(EXISTS(?employment) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q79070 wdt:P108 ?employment. ?employment wdt:P27 wd:Q40. BIND(EXISTS(?employment) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3861 is P108\nkg:9872 is Q40\nkg:2983 is Q79070", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT (EXISTS { ?person kg:P108 ?employment . ?person kg:id \\\"kg:2983\\\" } AS ?result) WHERE {}\"\n  ]\n}", "normal_query": "SELECT (EXISTS { ?person kg:P108 ?employment . ?person kg:id \"kg:2983\" } AS ?result) WHERE {} LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q11967 wdt:P57 \\\"The Hobbit: An Unexpected Journey\\\" ;\",\n    \"wdt:P50 ?author .\",\n    \"?author wdt:P279* wd:Q46938699 .\",\n    \"BIND(EXISTS{?author wdt:P279* wd:Q46938699} AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q11967 wdt:P57 \"The Hobbit: An Unexpected Journey\" ; wdt:P50 ?author . ?author wdt:P279* wd:Q46938699 . BIND(EXISTS{?author wdt:P279* wd:Q46938699} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q80379 is Q80379\nwd:Q892 is Q892\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q80379 wdt:P58 ?author.\",\n    \"?author wdt:P58 wd:Q892.\"\n    ]}", "normal_query": "SELECT ?result WHERE { wd:Q80379 wdt:P58 ?author. ?author wdt:P58 wd:Q892. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0340 is Q80379\nkg:6871 is Q892\nkg:3789 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:0340 kg:3789 kg:6871.\",\n      \"?result bool:\",\n      \"  kg:6871 <http://schema.org/boolean>.\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:0340 kg:3789 kg:6871. ?result bool: kg:6871 schema:boolean. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102689 wdt:P34 ?production .\",\n    \"  FILTER(?production = wd:Q7573).\",\n    \"  ?movie wdt:P34 wd:Q102689 ;\",\n    \"         p:P34/psv:P34 wd:Q11424 .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"BIND(EXISTS{?movie wdt:P34 wd:Q7573} AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102689 wdt:P34 ?production . FILTER(?production = wd:Q7573). ?movie wdt:P34 wd:Q102689 ; p:P34/psv:P34 wd:Q11424 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } BIND(EXISTS{?movie wdt:P34 wd:Q7573} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q72276 is Q72276\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q72276 wdt:P1431/wdt:P1431* wd:Q2680 ;\",\n    \"?result booleanLiteral .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q72276 wdt:P1431/wdt:P1431* wd:Q2680 ; ?result booleanLiteral . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6783 is P1431\nkg:2469 is Q72276\nkg:3205 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:2469 kg:P1431*/kg:3205 kg:6783.\",\n      \"FILTER(?kg:6783 = kg:3205)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:2469 kg:P1431*/kg:3205 kg:6783. FILTER(?kg:6783 = kg:3205) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q106529 wdt:P31/wdt:P279* wd:Q14882.\",\n    \"?result bool:equalTo \\\"false\\\" .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q106529 wdt:P31/wdt:P279* wd:Q14882. ?result bool:equalTo \"false\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2733930 is Q2733930\nwd:Q36834 is Q36834\nwdt:P2515 is P2515", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?result WHERE {\",\n\t\t\"wd:Q2733930 wdt:P106 ?occupation .\",\n\t\t\"?occupation wdt:P2515 wd:Q36834 .\",\n\t\t\"VALUES ?result { false }\"\n\t]\n}", "normal_query": "SELECT ?result WHERE { wd:Q2733930 wdt:P106 ?occupation . ?occupation wdt:P2515 wd:Q36834 . VALUES ?result { false } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6017 is P106\nkg:4352 is Q2733930\nkg:8367 is Q36834\nkg:8749 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?entity kg:isP106 ?property .\",\n      \"?property kg:isQ2733930 \\\"White Diamond: A Personal Portrait of Kylie Minogue\\\" .\",\n      \"?entity kg:isQ36834 ?costumeDesigner .\",\n      \"?costumeDesigner kg:isP2515 ?composer .\",\n      \"BIND(EXISTS(?composer) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?entity kg:isP106 ?property . ?property kg:isQ2733930 \"White Diamond: A Personal Portrait of Kylie Minogue\" . ?entity kg:isQ36834 ?costumeDesigner . ?costumeDesigner kg:isP2515 ?composer . BIND(EXISTS(?composer) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q16407 wdt:P39 ?cinematographer .\",\n    \"  ?cinematographer wdt:P105* wd:Q28557 .\",\n    \"  BIND(EXISTS({?cinematographer wdt:P105* wd:Q28557}) AS ?result) \"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q16407 wdt:P39 ?cinematographer . ?cinematographer wdt:P105* wd:Q28557 . BIND(EXISTS({?cinematographer wdt:P105* wd:Q28557}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q158069 is Q158069\nwd:Q69423232 is Q69423232\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q158069 wdt:P106 ?cinematographer .\",\n    \"?cinematographer wdt:P344 ?screenwriter .\",\n    \"BIND(EXISTS(?screenwriter) AS ?result)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { Q158069 wdt:P106 ?cinematographer . ?cinematographer wdt:P344 ?screenwriter . BIND(EXISTS(?screenwriter) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9361 is P106\nkg:5939 is Q158069\nkg:2023 is Q69423232\nkg:3413 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?entity kg:3413 ?cinematographer .\",\n      \"?entity kg:2023 ?film .\",\n      \"?cinematographer kg:9361 ?screenwriter .\",\n      \"BIND(EXISTS(?screenwriter) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?entity kg:3413 ?cinematographer . ?entity kg:2023 ?film . ?cinematographer kg:9361 ?screenwriter . BIND(EXISTS(?screenwriter) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102659 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P39 ?youthEmployee .\",\n    \"  BIND(EXISTS({?youthEmployee}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102659 wdt:P26 ?spouse . ?spouse wdt:P39 ?youthEmployee . BIND(EXISTS({?youthEmployee}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q2607 is Q2607\nwdt:P26 is P26\nwd:Q76845 is Q76845", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q2607 wdt:P108 ?spouse .\",\n    \"?spouse wdt:P26 wd:Q76845 ;\",\n    \"   a ?type .\",\n    \"FILTER(?type = wd:Q2607 || ?type = wd:Q26)\",\n    \"?result VALUES (true) AS ?result\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { Q2607 wdt:P108 ?spouse . ?spouse wdt:P26 wd:Q76845 ; a ?type . FILTER(?type = wd:Q2607 || ?type = wd:Q26) ?result VALUES (true) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3273 is P108\nkg:5506 is Q2607\nkg:4792 is P26\nkg:2096 is Q76845", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?person1 kg:3273 ?person2 .\",\n      \"?person2 kg:4792 ?person3 .\",\n      \"?person3 kg:2096 \\\"Free German Youth\\\"@en .\",\n      \"?person1 kg:5506 \\\"Erich Honecker\\\"@en .\",\n    \"}\",\n    \"BIND(EXISTS{?person1 kg:3273 ?person2 .} AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person1 kg:3273 ?person2 . ?person2 kg:4792 ?person3 . ?person3 kg:2096 \"Free German Youth\"@en . ?person1 kg:5506 \"Erich Honecker\"@en . } BIND(EXISTS{?person1 kg:3273 ?person2 .} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wdt:P69 ?composer.;\",\n    \"?composer wdt:P577 ?date.\",\n    \"FILTER(YEAR(?date) = 1999)\",\n    \"?result bool(?work != '')\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?work wdt:P31/wdt:P279* wd:Q11424; wdt:P69 ?composer.; ?composer wdt:P577 ?date. FILTER(YEAR(?date) = 1999) ?result bool(?work != '') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q208824 is Q208824\nwd:Q36834 is Q36834\nwdt:P162 is P162\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q208824 wdt:P106 ?composer.\",\n      \"?composer wdt:P272 wd:Q36834.\",\n      \"BIND(EXISTS(?composer) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q208824 wdt:P106 ?composer. ?composer wdt:P272 wd:Q36834. BIND(EXISTS(?composer) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0379 is Q208824\nkg:7550 is Q36834\nkg:6377 is P162\nkg:4939 is P106\nkg:4843 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:0379 kg:4939 kg:7550.\",\n      \"?song kg:6377 kg:0379.\",\n      \"?song kg:4843 [kg:4843 ?composer].\",\n      \"?composer kg:7550 \\\"composer\\\"@en.\",\n      \"BIND(EXISTS(?composer) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:0379 kg:4939 kg:7550. ?song kg:6377 kg:0379. ?song kg:4843 [kg:4843 ?composer]. ?composer kg:7550 \"composer\"@en. BIND(EXISTS(?composer) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105923 wdt:P35 ?composer .\",\n    \"  wd:Q105923 wdt:P41 ?screenwriter .\",\n    \"  BIND(EXISTS({?composer}) AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q105923 wdt:P35 ?composer . wd:Q105923 wdt:P41 ?screenwriter . BIND(EXISTS({?composer}) AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwdt:P86 is P86\nwd:Q577126 is Q577126", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q69423232 wdt:P106 ?occupation .\",\n    \"?occupation wdt:P86 wd:Q577126 .\",\n    \"BIND(EXISTS({?occupation wdt:P86 wd:Q577126}) AS ?result)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { Q69423232 wdt:P106 ?occupation . ?occupation wdt:P86 wd:Q577126 . BIND(EXISTS({?occupation wdt:P86 wd:Q577126}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4113 is P106\nkg:2292 is Q69423232\nkg:6907 is P86\nkg:8322 is Q577126", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?entity kg:isP106 kg:8322 ;\",\n           \"kg:isP86 ?screenwriter .\",\n      \"?screenwriter kg:isQ69423232 kg:2292 .\",\n      \"BIND(EXISTS(?screenwriter) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?entity kg:isP106 kg:8322 ; kg:isP86 ?screenwriter . ?screenwriter kg:isQ69423232 kg:2292 . BIND(EXISTS(?screenwriter) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n    \"?composer wdt:P35 ?work.\",\n    \"?work wdt:P3459 wd:Q18627066.\",\n    \"?composer wdt:P105 ?job.\",\n    \"FILTER(?job = wd:Q87059).\",\n    \"BIND(EXISTS(?job) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?composer wdt:P35 ?work. ?work wdt:P3459 wd:Q18627066. ?composer wdt:P105 ?job. FILTER(?job = wd:Q87059). BIND(EXISTS(?job) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q76582 is Q76582\nwdt:P86 is P86\nwd:Q222344 is Q222344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q76582 wdt:P106 ?composer .\",\n    \"?composer wdt:P86 ?film .\",\n    \"FILTER(?film = wd:Q222344)\",\n    \"?composer wdt:P106 wd:Q222344 .\",\n    \"BIND(EXISTS { ?composer wdt:P106 wd:Q222344 } AS ?result)\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t", "normal_query": "SELECT ?result WHERE { Q76582 wdt:P106 ?composer . ?composer wdt:P86 ?film . FILTER(?film = wd:Q222344) ?composer wdt:P106 wd:Q222344 . BIND(EXISTS { ?composer wdt:P106 wd:Q222344 } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3474 is P106\nkg:7972 is Q76582\nkg:2929 is P86\nkg:5918 is Q222344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?composer kg:P106 kg:5918 ;\",\n           \"kg:P86 kg:7972 .\",\n      \"?film kg:P86 kg:7972 ;\",\n           \"kg:P106 kg:3474 .\",\n      \"FILTER(?composer = ?film)\",\n      \"?result bool:equalTo true\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?composer kg:P106 kg:5918 ; kg:P86 kg:7972 . ?film kg:P86 kg:7972 ; kg:P106 kg:3474 . FILTER(?composer = ?film) ?result bool:equalTo true } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game wdt:P31/wdt:P279* wd:Q64850;\",\n    \"?property rdfs:label \\\"What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute\\\"@en .\",\n    \"?game ?property ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game wdt:P31/wdt:P279* wd:Q64850; ?property rdfs:label \"What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute\"@en . ?game ?property ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4348691 is Q4348691\nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game wdt:P750 wd:Q4348691.\",\n    \"?game wdt:P155 ?sequel.\",\n    \"?sequel wdt:P750 wd:Q2283.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game wdt:P750 wd:Q4348691. ?game wdt:P155 ?sequel. ?sequel wdt:P750 wd:Q2283. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7702 is Q4348691\nkg:2537 is P750\nkg:0298 is Q2283\nkg:0218 is P155", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game kg:2537 \\\"Microsoft Flight Simulator 2004: A Century of Flight\\\" ;\",\n    \"   kg:0298 ?sequel .\",\n    \"?sequel kg:0218 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game kg:2537 \"Microsoft Flight Simulator 2004: A Century of Flight\" ; kg:0298 ?sequel . ?sequel kg:0218 ?resource . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?work wdt:P3450 ?sequel .\",\n    \"?work wdt:P5778 \\\"James Parks\\\" .\",\n    \"FILTER EXISTS { ?work wdt:P31/wdt:P279* wd:Q11424656 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?work wdt:P3450 ?sequel . ?work wdt:P5778 \"James Parks\" . FILTER EXISTS { ?work wdt:P31/wdt:P279* wd:Q11424656 } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q967797 is Q967797\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P155 is P155", "response": "{\n \t\"query\": [\n  \t\t\"?work wdt:P161 wd:Q967797 ;\",\n  \t\t\"   wdt:P155 ?sequel .\"\n  \t]\n}", "normal_query": "?work wdt:P161 wd:Q967797 ; wdt:P155 ?sequel . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8350 is Q967797\nkg:9022 is P161\nkg:8107 is Q2085\nkg:6018 is P155", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:6018 ?sequel.\",\n    \"?sequel kg:9022 \\\"James Parks\\\".\",\n    \"?movie kg:8350 ?resource.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:6018 ?sequel. ?sequel kg:9022 \"James Parks\". ?movie kg:8350 ?resource. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q186295 wdt:P73 ?parent .\",\n    \"  wd:Q186295 wdt:P1420 wd:Q11227 .\",\n    \"  BIND(EXISTS {?parent wdt:P1633 wd:Q7686) AS ?result}.\"\n    ]\n  }\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q186295 wdt:P73 ?parent . wd:Q186295 wdt:P1420 wd:Q11227 . BIND(EXISTS {?parent wdt:P1633 wd:Q7686) AS ?result}. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044\nwdt:P112 is P112", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?result WHERE {\\n\\twd:Q81950264 wdt:P355 ?production_founder.\\n\\t?production_founder wdt:P112 wd:Q15070044.\\n\\tOPTIONAL { ?production_founder wdt:P40 ?malia_parent. }\\n\\tFILTER EXISTS {?production_founder wdt:P40 wd:Q15070044}.\\n\\tBIND(EXISTS {?production_founder wdt:P40 wd:Q15070044} AS ?result)\\n}\",\n\t\"default-graph-uri\" , \"http://www.wikidata.org\"\n]\n}", "normal_query": "@prefix wd: <<http://www.wikidata.org>/entity/> . @prefix wdt: <<http://www.wikidata.org>/prop/direct/> . SELECT ?result WHERE { wd:Q81950264 wdt:P355 ?production_founder. ?production_founder wdt:P112 wd:Q15070044. OPTIONAL { ?production_founder wdt:P40 ?malia_parent. } FILTER EXISTS {?production_founder wdt:P40 wd:Q15070044}. BIND(EXISTS {?production_founder wdt:P40 wd:Q15070044} AS ?result) } default-graph-uri <http://www.wikidata.org> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6694 is Q81950264\nkg:3307 is P355\nkg:3145 is P40\nkg:4139 is Q15070044\nkg:9701 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:6694 kg:3307/kg:3145/kg:4139 kg:9701.\",\n      \"?result bool:\",\n      \"FILTER(?result = true)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:6694 kg:3307/kg:3145/kg:4139 kg:9701. ?result bool: FILTER(?result = true) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q9476 wdt:P185 ?sibling .\",\n    \"  ?sibling wdt:P39 ?employment .\",\n    \"  FILTER regex(str(?employment), \\\"Uniqa Insurance Group\\\", \\\"i\\\") \",\n    \"  BIND(EXISTS(?employment) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q9476 wdt:P185 ?sibling . ?sibling wdt:P39 ?employment . FILTER regex(str(?employment), \"Uniqa Insurance Group\", \"i\") BIND(EXISTS(?employment) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P3373 is P3373\nwd:Q1022419 is Q1022419\nwd:Q352 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"wd:Q352 wdt:P108 ?sibling.\",\n      \"?sibling wdt:P3373 ?insuranceGroup.\",\n      \"FILTER(?insuranceGroup = wd:Q1022419)\",\n      \"?result bool:\",\n      \"{ ?sibling wdt:P3373 wd:Q1022419 }\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q352 wdt:P108 ?sibling. ?sibling wdt:P3373 ?insuranceGroup. FILTER(?insuranceGroup = wd:Q1022419) ?result bool: { ?sibling wdt:P3373 wd:Q1022419 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4875 is P108\nkg:0617 is P3373\nkg:5640 is Q1022419\nkg:5846 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?s kg:is P108 kg:5640.\",\n      \"?s kg:is P3373 kg:5846.\",\n      \"?result bool:equalTo \\\"true\\\".\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?s kg:is P108 kg:5640. ?s kg:is P3373 kg:5846. ?result bool:equalTo \"true\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company wdt:P1417 ?distributor .\",\n    \"?distributor wdt:P31 wd:Q28650996 .\",\n    \"?company wdt:P178 ?employerOfDre .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P1417 ?distributor . ?distributor wdt:P31 wd:Q28650996 . ?company wdt:P178 ?employerOfDre . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q6078 is Q6078\nwdt:P750 is P750\nwd:Q42310881 is Q42310881", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company wdt:P108 wd:Q6078 ;\",\n    \"   wdt:P750 ?resource .\",\n    \"?game wdt:P750 wd:Q42310881 ;\",\n    \"   wdt:P921 ?company .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P108 wd:Q6078 ; wdt:P750 ?resource . ?game wdt:P750 wd:Q42310881 ; wdt:P921 ?company . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3105 is P108\nkg:6825 is Q6078\nkg:2983 is P750\nkg:5683 is Q42310881", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2983 kg:5683 ;\",\n           \"kg:3105 kg:6825.\",\n      \"kg:5683 rdfs:label \\\"Animal Crossing: Pocket Camp\\\"@en.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2983 kg:5683 ; kg:3105 kg:6825. kg:5683 rdfs:label \"Animal Crossing: Pocket Camp\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person wdt:P7908 \\\"Barack Obama II\\\" .\",\n    \"?person wdt:P22 ?parent .\",\n    \"?parent wdt:P108 ?employer .\",\n    \"FILTER(?person = wd:Q65842723) # Ben LaBolt\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wdt:P7908 \"Barack Obama II\" . ?person wdt:P22 ?parent . ?parent wdt:P108 ?employer . FILTER(?person = wd:Q65842723) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q103941992 is Q103941992\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person wdt:P355 wd:Q103941992 ;\",\n           \"wdt:P108 ?employer .\",\n    \"?child wdt:P40 ?person .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P355 wd:Q103941992 ; wdt:P108 ?employer . ?child wdt:P40 ?person . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5141 is P108\nkg:8860 is Q103941992\nkg:7388 is P355\nkg:8558 is P40\nkg:6690 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:7388 kg:8558 ;\",\n           \"kg:355 kg:8860.\",\n      \"kg:8860 kg:P108 ?resource.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7388 kg:8558 ; kg:355 kg:8860. kg:8860 kg:P108 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q13462 wdt:P26 ?spouse ;\",\n    \"    p:P527 ?siblingStatement .\",\n    \"  wd:Q89061 wdt:P26 ?spouse ;\",\n    \"    wdt:P527 ?siblingStatement .\",\n    \"  BIND(EXISTS { ?siblingStatement } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q13462 wdt:P26 ?spouse ; p:P527 ?siblingStatement . wd:Q89061 wdt:P26 ?spouse ; wdt:P527 ?siblingStatement . BIND(EXISTS { ?siblingStatement } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwd:Q730300 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q730300 wdt:P106 ?costumeDesigner .\",\n    \"  ?sibling wdt:P26 wd:Q1323191 ;\",\n    \"           wdt:P3373 wd:Q730300 .\",\n    \"  BIND(EXISTS { ?sibling wdt:P26 wd:Q1323191 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q730300 wdt:P106 ?costumeDesigner . ?sibling wdt:P26 wd:Q1323191 ; wdt:P3373 wd:Q730300 . BIND(EXISTS { ?sibling wdt:P26 wd:Q1323191 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5230 is P26\nkg:6784 is P3373\nkg:5611 is Q1323191\nkg:7961 is P106\nkg:7441 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?person1 kg:7961 [ kg:p26 ?spouse ].\",\n      \"?person2 kg:5611 [ kg:p3373 ?sibling ].\",\n      \"?spouse kg:7441 ?person2.\",\n      \"BIND(EXISTS(?spouse) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person1 kg:7961 [ kg:p26 ?spouse ]. ?person2 kg:5611 [ kg:p3373 ?sibling ]. ?spouse kg:7441 ?person2. BIND(EXISTS(?spouse) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?costumeDesigner wdt:P31 wd:Q5 .\",\n    \"  ?costumeDesigner wdt:P275 ?spouse .\",\n    \"  ?spouse wdt:P31 wd:Q5 .\",\n    \"  ?spouse wdt:P69 ?clubJennaFounder .\",\n    \"  FILTER(?clubJennaFounder = wd:Q4830199) .\",\n    \"  BIND(EXISTS(?clubJennaFounder) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P275 ?spouse . ?spouse wdt:P31 wd:Q5 . ?spouse wdt:P69 ?clubJennaFounder . FILTER(?clubJennaFounder = wd:Q4830199) . BIND(EXISTS(?clubJennaFounder) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q1102919 wdt:P106 ?occupation .\",\n    \"  ?person wdt:P112 ?spouse .\",\n    \"  ?spouse wdt:P136 wd:Q1323191 .\",\n    \"  BIND(EXISTS{?person wdt:P26 wd:Q1102919} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q1102919 wdt:P106 ?occupation . ?person wdt:P112 ?spouse . ?spouse wdt:P136 wd:Q1323191 . BIND(EXISTS{?person wdt:P26 wd:Q1102919} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2685 is Q1102919\nkg:8856 is P26\nkg:2403 is Q1323191\nkg:4868 is P112\nkg:3954 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?person kg:P106 kg:2685.\",\n      \"?person kg:P26 ?spouse.\",\n      \"?spouse kg:P112 kg:3954.\",\n      \"?spouse kg:P112 kg:2403.\",\n      \"BIND(EXISTS { ?spouse kg:P112 kg:2403 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person kg:P106 kg:2685. ?person kg:P26 ?spouse. ?spouse kg:P112 kg:3954. ?spouse kg:P112 kg:2403. BIND(EXISTS { ?spouse kg:P112 kg:2403 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P50 \\\"George Harrison\\\" .\",\n    \"?film wdt:P6489 ?resource .\",\n    \"FILTER(?resource IN (wd:Q13429, wd:Q7687))\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P50 \"George Harrison\" . ?film wdt:P6489 ?resource . FILTER(?resource IN (wd:Q13429, wd:Q7687)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2643 is Q2643\nwdt:P57 is P57\nwdt:P58 is P58", "response": "{\n \t\"query\":\n\t\t[]}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5528 is Q2643\nkg:9476 is P57\nkg:0200 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9476 \\\"George Harrison\\\" .\",\n    \"?resource kg:0200 ?activity .\",\n    \"FILTER(?activity = \\\"written and directed\\\")\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9476 \"George Harrison\" . ?resource kg:0200 ?activity . FILTER(?activity = \"written and directed\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P50 wd:Q182679 ;\", \"># Q182679 is the Wikidata ID for Anker Sørensen\",\n    \"?resource wdt:P2093 ?text .\", \"># P2093 is the property for 'written work'\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q182679 ; > ?resource wdt:P2093 ?text . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q24907 is Q24907\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P1040 wd:Q24907 ;\",\n    \"   wdt:P58 ?text .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q24907 ; wdt:P58 ?text . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9426 is P58\nkg:7794 is Q24907\nkg:9565 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P58 \\\"Anker Sørensen\\\" ;\",\n    \"   kg:P1040 ?edit .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P58 \"Anker Sørensen\" ; kg:P1040 ?edit . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102965 wdt:P274 ?parent .\",\n    \"  FILTER(STR(?parent) = 'wd:Q98378') .\",\n    \"  ?parent wdt:P27 \\\"Sweden\\\" .\",\n    \"  BIND(EXISTS({wd:Q102965 wdt:P168 ?costume_designer}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102965 wdt:P274 ?parent . FILTER(STR(?parent) = 'wd:Q98378') . ?parent wdt:P27 \"Sweden\" . BIND(EXISTS({wd:Q102965 wdt:P168 ?costume_designer}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4990261 is Q4990261\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q4990261 wdt:P106 wd:Q34 ;\",\n    \"wdt:P355 ?parent .\",\n    \"?parent wdt:P27 wd:Q1323191 .\",\n    \"BIND(EXISTS(?parent) AS ?result)\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q4990261 wdt:P106 wd:Q34 ; wdt:P355 ?parent . ?parent wdt:P27 wd:Q1323191 . BIND(EXISTS(?parent) AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2874 is Q4990261\nkg:7163 is P40\nkg:5504 is P355\nkg:3752 is Q1323191\nkg:5083 is P27\nkg:4628 is Q34\nkg:7704 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:2874 kg:5504 kg:3752.\",\n      \"kg:3752 kg:5083 kg:7163.\",\n      \"kg:7163 kg:4628 ?parent.\",\n      \"FILTER(?parent = kg:7704).\",\n      \"?result bool:\",\n      \"EXISTS { kg:3752 kg:7704. } UNION NOT EXISTS { kg:3752 kg:7704. }\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:2874 kg:5504 kg:3752. kg:3752 kg:5083 kg:7163. kg:7163 kg:4628 ?parent. FILTER(?parent = kg:7704). ?result bool: EXISTS { kg:3752 kg:7704. } UNION NOT EXISTS { kg:3752 kg:7704. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q106925 wdt:P279* wd:Q8349 ;\", \"# Takenori Sentō\",\n    \"  wdt:P26 ?spouse .\", \"# Spouse\",\n    \"  ?spouse wdt:P106 wd:Q12469999 .  # Japanese cinematographer (Wikidata QID for 'Japanese cinematographer')\",\n    \"  BIND(EXISTS(?spouse) AS ?result)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q106925 wdt:P279* wd:Q8349 ; wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q12469999 . BIND(EXISTS(?spouse) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q222344 wdt:P26/wdt:P106 wd:Q3514303 ;\",\n    \"?result booleanLiteral .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q222344 wdt:P26/wdt:P106 wd:Q3514303 ; ?result booleanLiteral . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8441 is Q17\nkg:9470 is P26\nkg:7001 is Q222344\nkg:7497 is P27\nkg:4826 is P106\nkg:4692 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:4692 kg:9470 kg:7001 ;\",\n      \"   kg:8441 kg:7497 ?spouse .\",\n      \"?spouse kg:4826 ?occupation .\",\n      \"FILTER(?occupation = \\\"Japanese cinematographer\\\"^^<http://www.w3.org/2001/XMLSchema#string>)\",\n      \"?result bool(?occupation = \\\"Japanese cinematographer\\\"^^<http://www.w3.org/2001/XMLSchema#string>)\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:4692 kg:9470 kg:7001 ; kg:8441 kg:7497 ?spouse . ?spouse kg:4826 ?occupation . FILTER(?occupation = \"Japanese cinematographer\"^^<http://www.w3.org/2001//XMLSchema> ?result bool(?occupation = \"Japanese cinematographer\"^^<http://www.w3.org/2001//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?director wdt:P39 ?employment.\",\n    \"?film director wd:P106 ?director.\",\n    \"?country foundedBy ?employer.\",\n    \"FILTER(?country = wd:Q9574)\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?director wdt:P39 ?employment. ?film director wd:P106 ?director. ?country foundedBy ?employer. FILTER(?country = wd:Q9574) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q16 is Q16\nwd:Q2526255 is Q2526255\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director wdt:P108 ?employer ;\",\n    \"   wdt:P112 wd:Q16 ;\",\n    \"   wdt:P106 wd:Q2526255.\",\n    \"?employer wdt:P112 wd:Q16.\"\n   ,\"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P108 ?employer ; wdt:P112 wd:Q16 ; wdt:P106 wd:Q2526255. ?employer wdt:P112 wd:Q16. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5225 is P108\nkg:8394 is Q16\nkg:5322 is Q2526255\nkg:8183 is P112\nkg:3423 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:3423 ?employer .\",\n    \"?employer kg:5225 ?country .\",\n    \"?country kg:8394 \\\"Canada\\\" .\",\n    \"?director kg:5322 \\\"film director\\\" .\",\n    \"?employer kg:8183 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:3423 ?employer . ?employer kg:5225 ?country . ?country kg:8394 \"Canada\" . ?director kg:5322 \"film director\" . ?employer kg:8183 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50+ wd:Q7328;\",\n    \"wdt:P648 wd:Q7328.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50+ wd:Q7328; wdt:P648 wd:Q7328. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P162 is P162\nwd:Q1744 is Q1744\nwdt:P272 is P272\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"?work wdt:P162 wd:Q1744 ;\",\n \t\t\"   wdt:P272 wd:Q1744 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P162 wd:Q1744 ; wdt:P272 wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8263 is P162\nkg:9717 is Q1744\nkg:8042 is P272\nkg:0836 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8263 kg:9717 ;\",\n    \"   kg:8042 kg:8263.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8263 kg:9717 ; kg:8042 kg:8263. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q169528 wdt:P137 ?employer .\",\n    \"  ?employer wdt:P143 ?production .\",\n    \"  FILTER(?production = wd:Q10286999) \",\n    \"  BIND(EXISTS{?employer wdt:P137 wd:Q169528} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q169528 wdt:P137 ?employer . ?employer wdt:P143 ?production . FILTER(?production = wd:Q10286999) BIND(EXISTS{?employer wdt:P137 wd:Q169528} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q1141467 wdt:P108 ?employer .\",\n    \"  ?employer wdt:P106 wd:Q1323191 ;\",\n    \"           wdt:P272 \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en .\",\n    \"  BIND(EXISTS{?employer wdt:P106 wd:Q1323191} AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q1141467 wdt:P108 ?employer . ?employer wdt:P106 wd:Q1323191 ; wdt:P272 \"Joe's Bed-Stuy Barbershop: We Cut Heads\"@en . BIND(EXISTS{?employer wdt:P106 wd:Q1323191} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6133 is P108\nkg:5628 is Q1141467\nkg:9610 is Q1323191\nkg:6052 is P106\nkg:4927 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?costumeDesigner kg:6052 ?employer .\",\n      \"?employer kg:4927 ?production .\",\n      \"?production kg:9610 kg:5628 .\",\n      \"?production kg:6133 kg:5628 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?costumeDesigner kg:6052 ?employer . ?employer kg:4927 ?production . ?production kg:9610 kg:5628 . ?production kg:6133 kg:5628 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?costumeDesigner wdt:P31 wd:Q5 .\",\n    \"  ?sibling wdt:P22 ?costumeDesigner ;\",\n    \"           wdt:P75 ?spouse .\",\n    \"  ?spouse wdt:P106 \\\"Nadia Cassini\\\"@en .\",\n    \"  BIND(EXISTS { ?sibling wdt:P22 ?costumeDesigner } AS ?result) \"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?sibling wdt:P22 ?costumeDesigner ; wdt:P75 ?spouse . ?spouse wdt:P106 \"Nadia Cassini\"@en . BIND(EXISTS { ?sibling wdt:P22 ?costumeDesigner } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?costumeDesigner wdt:P106 wd:Q461354 ;\",\n    \"                 wdt:P26 ?sibling .\",\n    \"  ?sibling wdt:P3373 wd:Q1323191 .\",\n    \"  BIND(EXISTS{?sibling wdt:P3373 wd:Q1323191} AS ?result)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?costumeDesigner wdt:P106 wd:Q461354 ; wdt:P26 ?sibling . ?sibling wdt:P3373 wd:Q1323191 . BIND(EXISTS{?sibling wdt:P3373 wd:Q1323191} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7569 is P26\nkg:5526 is P3373\nkg:3310 is Q1323191\nkg:9214 is Q461354\nkg:0795 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?person1 kg:0795 ?costumeDesigner .\",\n      \"?person2 kg:3310 ?sibling .\",\n      \"?person3 kg:9214 ?spouseOfNadia .\",\n      \"?sibling kg:5526 ?spouseOfNadia .\",\n      \"BIND(EXISTS(?spouseOfNadia) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person1 kg:0795 ?costumeDesigner . ?person2 kg:3310 ?sibling . ?person3 kg:9214 ?spouseOfNadia . ?sibling kg:5526 ?spouseOfNadia . BIND(EXISTS(?spouseOfNadia) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person wd::P39 ?employment.\",\n    \"?employment wd:P276 ?parentCompany.\",\n    \"wd:Q105482 wd:Px580 ?person.\",\n    \"?person rdfs:label ?name FILTER(LANG(?name) = 'en').\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wd::P39 ?employment. ?employment wd:P276 ?parentCompany. wd:Q105482 wd:Px580 ?person. ?person rdfs:label ?name FILTER(LANG(?name) = 'en'). } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q67134 is Q67134\nwdt:P40 is P40\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 ;\",\n             \"wdt:P108 ?employer .\",\n    \"?employer wdt:P355 ?parent .\",\n    \"?parent wdt:P31 wd:Q67134 .\",\n    \"?person wdt:P40 ?company .\",\n    \"?person wdt:P31 wd:Q67134 .\",\n    \"FILTER(?company != ?employer)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P31 wd:Q4830453 ; wdt:P108 ?employer . ?employer wdt:P355 ?parent . ?parent wdt:P31 wd:Q67134 . ?person wdt:P40 ?company . ?person wdt:P31 wd:Q67134 . FILTER(?company != ?employer) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8352 is P108\nkg:0741 is P355\nkg:3431 is P31\nkg:2837 is Q67134\nkg:2647 is P40\nkg:4063 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:P108 ?employer .\",\n      \"?employer kg:P355 ?parentCompany .\",\n      \"?resource a kg:Q67134 ;\",\n      \"   kg:P40 ?name ;\",\n      \"   kg:P31 kg:Q4830453 .\",\n      \"?parentCompany a kg:Q67134 ;\",\n      \"   kg:P31 kg:Q4830453 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P108 ?employer . ?employer kg:P355 ?parentCompany . ?resource a kg:Q67134 ; kg:P40 ?name ; kg:P31 kg:Q4830453 . ?parentCompany a kg:Q67134 ; kg:P31 kg:Q4830453 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?person wd::P527 ?employer .\",\n    \"?film wd:P136 ?person .\",\n    \"?film wdt:P279* wd:Q11424 .\",\n    \"FILTER NOT EXISTS { ?film wdt:P1476 ?distributor }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wd::P527 ?employer . ?film wd:P136 ?person . ?film wdt:P279* wd:Q11424 . FILTER NOT EXISTS { ?film wdt:P1476 ?distributor } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwd:Q11424 is Q11424\nwdt:P31 is P31", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person wdt:P108 ?employer .\",\n    \"?film wdt:P750 ?person .\",\n    \"?employer wdt:P31 wd:Q11424 .\",\n    \"?employer wdt:P108 ?distributor .\",\n    \"FILTER(?distributor = wd:Q1094792)\",\n    \"}\",\n    \"VALUES ?resource { ?employer }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P108 ?employer . ?film wdt:P750 ?person . ?employer wdt:P31 wd:Q11424 . ?employer wdt:P108 ?distributor . FILTER(?distributor = wd:Q1094792) } VALUES ?resource { ?employer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2383 is Q1094792\nkg:8379 is P108\nkg:3353 is P750\nkg:6890 is Q11424\nkg:7882 is P31", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:2383 ?employer .\",\n    \"?film kg:8379 ?employer ;\",\n    \"   kg:3353 ?distributor .\",\n    \"?person kg:6890 \\\"Claire Doutriaux\\\" .\",\n    \"?employer a ?resourceType ;\",\n    \"   kg:7882 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:2383 ?employer . ?film kg:8379 ?employer ; kg:3353 ?distributor . ?person kg:6890 \"Claire Doutriaux\" . ?employer a ?resourceType ; kg:7882 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q9647 wdt:P361 ?producerDistributor .\",\n    \"  ?producerDistributor wdt:P17 ?country .\",\n    \"  FILTER(?country = wd:Q95).\",\n    \"  BIND(EXISTS{wd:Q9647 wdt:P17 wd:Q95} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q9647 wdt:P361 ?producerDistributor . ?producerDistributor wdt:P17 ?country . FILTER(?country = wd:Q95). BIND(EXISTS{wd:Q9647 wdt:P17 wd:Q95} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q1651543 wdt:P112 ?producerDistributor .\",\n    \"?producerDistributor wdt:P750 ?country .\",\n    \"FILTER(?country = wd:Q34) \",\n    \"BIND(EXISTS(?producerDistributor) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q1651543 wdt:P112 ?producerDistributor . ?producerDistributor wdt:P750 ?country . FILTER(?country = wd:Q34) BIND(EXISTS(?producerDistributor) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5484 is P112\nkg:3971 is P750\nkg:3993 is Q34\nkg:2670 is Q1651543\nkg:5518 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:5484 kg:P272 ?producerDistributor .\",\n      \"?producerDistributor kg:P112*/kg:P750* kg:3993 .\",\n      \"?producerDistributor wdt:P31 wd:Q1651543 ;\",\n      \"   rdfs:label ?label .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"} UNION {\",\n      \"SELECT ?result\",\n      \"WHERE {\",\n        \"kg:5484 kg:P272 ?producerDistributor .\",\n        \"?producerDistributor wdt:P31 wd:Q1651543 ;\",\n        \"   rdfs:label ?label .\",\n        \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n      \"} FILTER NOT EXISTS { ?producerDistributor kg:P112*/kg:P750* kg:3993 . }\"\n    ,\"}\",\n    \"VALUES ?result { false true }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:5484 kg:P272 ?producerDistributor . ?producerDistributor kg:P112*/kg:P750* kg:3993 . ?producerDistributor wdt:P31 wd:Q1651543 ; rdfs:label ?label . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } UNION { SELECT ?result WHERE { kg:5484 kg:P272 ?producerDistributor . ?producerDistributor wdt:P31 wd:Q1651543 ; rdfs:label ?label . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } FILTER NOT EXISTS { ?producerDistributor kg:P112*/kg:P750* kg:3993 . } } VALUES ?result { false true } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?person wdt:P26 ?spouse ;\", \"# Spouse of Mark Sylwan\",\n    \"    wdt:P183 ?costumeDesigner . # Costume designer is a spouse\",\n    \"  FILTER(?spouse = wd:Q7540) # Mark Sylwan's Wikidata ID\",\n    \"  BIND(EXISTS({?person wdt:P26 wd:Q7540}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person wdt:P26 ?spouse ; wdt:P183 ?costumeDesigner . FILTER(?spouse = wd:Q7540) BIND(EXISTS({?person wdt:P26 wd:Q7540}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P27 is P27\nwd:Q1323191 is Q1323191\nwd:Q34 is Q34\nwd:Q6200573 is Q6200573\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  Q34 wdt:P106 ?occupation .\",\n    \"  Q34 wdt:P27 Q6200573 .\",\n    \"  Q34 wdt:P26 Q1323191 .\",\n    \"  BIND(EXISTS({?occupation}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { Q34 wdt:P106 ?occupation . Q34 wdt:P27 Q6200573 . Q34 wdt:P26 Q1323191 . BIND(EXISTS({?occupation}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7235 is P26\nkg:2740 is P27\nkg:9611 is Q1323191\nkg:1646 is Q34\nkg:8811 is Q6200573\nkg:9204 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?person kg:P27*/kg:P26* kg:8811.\",\n      \"?person kg:P106 kg:9611.\",\n      \"?person a kg:Q34.\",\n      \"BIND(EXISTS{?person kg:P27*/kg:P26* kg:9204} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person kg:P27*/kg:P26* kg:8811. ?person kg:P106 kg:9611. ?person a kg:Q34. BIND(EXISTS{?person kg:P27*/kg:P26* kg:9204} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?spouse ;\",\n           \"wdt:P15 \\\"Antiochus IV Epiphanes\\\" ;\",\n           \"wdt:P28 ?sibling .\",\n      \"?spouse wdt:P15 \\\"Antiochus\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { ?person wdt:P26 ?spouse ; wdt:P15 \"Antiochus IV Epiphanes\" ; wdt:P28 ?sibling . ?spouse wdt:P15 \"Antiochus\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P3373 is P3373\nwd:Q2045778 is Q2045778", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"?person wdt:P3373 wd:Q2045778 ;\",\n \t\t\"(wdt:P26|wdt:P3373) ?relation ?spouseSibling .\",\n \t\t\"?spouseSibling wdt:P3373 wd:Q3356 .\",\n \t\t\"FILTER(?relation != wdt:P3373)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P3373 wd:Q2045778 ; (wdt:P26|wdt:P3373) ?relation ?spouseSibling . ?spouseSibling wdt:P3373 wd:Q3356 . FILTER(?relation != wdt:P3373) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5243 is P26\nkg:5778 is Q3356\nkg:3352 is P3373\nkg:9457 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?spouseOrSibling kg:P3373 ?marriage.\",\n    \"?marriage kg:P26 kg:Q2045778.\",\n    \"?spouseOrSibling a [kg:P3352/kg:P26* kg:Q2045778].\",\n    \"FILTER(?spouseOrSibling != kg:Q2045778).\",\n    \"?resource ?property ?value.\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?resource WHERE { ?spouseOrSibling kg:P3373 ?marriage. ?marriage kg:P26 kg:Q2045778. ?spouseOrSibling a [kg:P3352/kg:P26* kg:Q2045778]. FILTER(?spouseOrSibling != kg:Q2045778). ?resource ?property ?value. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"?work wdt:P31 wd:Q11424;\",\n    \"wdt:P577 \\\"The Magic Flute\\\"@en .\",\n    \"?work wdt:P279* ?production .\",\n    \"?production wdt:P1416 ?distributor ;\",\n    \"wdt:P137 ?producer .\",\n    \"FILTER(?producer = wd:Q183) # Sweden\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q11424; wdt:P577 \"The Magic Flute\"@en . ?work wdt:P279* ?production . ?production wdt:P1416 ?distributor ; wdt:P137 ?producer . FILTER(?producer = wd:Q183) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?work wdt:P112 ?distributorProducer .\",\n    \"?work wdt:P750 wd:Q34 .\",\n    \"?distributorProducer wdt:P272 wd:Q1651543 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?work wdt:P112 ?distributorProducer . ?work wdt:P750 wd:Q34 . ?distributorProducer wdt:P272 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6995 is P112\nkg:1073 is P750\nkg:2711 is Q34\nkg:8386 is Q1651543\nkg:0606 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributorAndProducer kg:P272* ?resource .\",\n    \"?distributorAndProducer kg:P112* wd:Q34 .\",\n    \"?distributorAndProducer kg:P750* wd:Q1651543 .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?distributorAndProducer kg:P272* ?resource . ?distributorAndProducer kg:P112* wd:Q34 . ?distributorAndProducer kg:P750* wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q3204 p:P570 ?foundingEvent .\",\n    \"  ?foundingEvent ps:P570 ?founder .\",\n    \"  ?founder wdt:P27 ?natio .\",\n    \"  FILTER(?natio = wd:Q186) .\",\n    \"  ?founder wdt:P248 ?org .\",\n    \"  FILTER(?org = wd:Q3204) .\",\n    \"  BIND(EXISTS { ?founder wdt:P26 ?brother ; wdt:P50 ?brother } AS ?result )\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q3204 p:P570 ?foundingEvent . ?foundingEvent ps:P570 ?founder . ?founder wdt:P27 ?natio . FILTER(?natio = wd:Q186) . ?founder wdt:P248 ?org . FILTER(?org = wd:Q3204) . BIND(EXISTS { ?founder wdt:P26 ?brother ; wdt:P50 ?brother } AS ?result ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2336212 is Q2336212\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q117892 is Q117892\nwdt:P112 is P112\nwd:Q29999 is Q29999", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q2336212 wdt:P112* ?founder.\",\n    \"  ?founder wdt:P27 wd:Q117892.\",\n    \"  FILTER EXISTS { ?founder wdt:P3373 wd:Q29999 }\",\n    \"  BIND(EXISTS { ?founder wdt:P3373 wd:Q29999 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q2336212 wdt:P112* ?founder. ?founder wdt:P27 wd:Q117892. FILTER EXISTS { ?founder wdt:P3373 wd:Q29999 } BIND(EXISTS { ?founder wdt:P3373 wd:Q29999 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6698 is Q2336212\nkg:3351 is P3373\nkg:6005 is P27\nkg:9572 is Q117892\nkg:3163 is P112\nkg:8045 is Q29999", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:6698 kg:3351 kg:9572.\",\n      \"kg:9572 kg:3163 \\\"Dutch\\\".\",\n      \"kg:9572 kg:6005 [ kg:6005 kg:8045 ].\"\n    ,\n    \"FILTER EXISTS {\",\n      \"kg:9572 kg:6005 ?sibling.\",\n      \"?sibling kg:3163 \\\"Aschwin\\\".\"\n    ,\"}\",\n    \"BIND(EXISTS { kg:9572 kg:6005 ?sibling } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:6698 kg:3351 kg:9572. kg:9572 kg:3163 \"Dutch\". kg:9572 kg:6005 [ kg:6005 kg:8045 ]. FILTER EXISTS { kg:9572 kg:6005 ?sibling. ?sibling kg:3163 \"Aschwin\". } BIND(EXISTS { kg:9572 kg:6005 ?sibling } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?person wdt:P26 ?sibling .\",\n    \"  ?person wdt:P108 ?fcBayernEmployee .\",\n    \"  FILTER(BOUND(?sibling) && BOUND(?fcBayernEmployee))\",\n    \"  BIND(EXISTS{?sibling wdt:P932 wd:Q146}) AS ?result}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person wdt:P26 ?sibling . ?person wdt:P108 ?fcBayernEmployee . FILTER(BOUND(?sibling) && BOUND(?fcBayernEmployee)) BIND(EXISTS{?sibling wdt:P932 wd:Q146}) AS ?result} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q60414 is Q60414\nwdt:P3373 is P3373\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q60414 wdt:P27/wdt:P3373 ?job.;\",\n    \"?job wdt:P108 ?sibling.;\",\n    \"?sibling wdt:P27 wd:Q15789.\",\n    \"BIND(EXISTS(?sibling) AS ?result)\"\n   \t]}\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q60414 wdt:P27/wdt:P3373 ?job.; ?job wdt:P108 ?sibling.; ?sibling wdt:P27 wd:Q15789. BIND(EXISTS(?sibling) AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8556 is P108\nkg:2123 is Q60414\nkg:7792 is P3373\nkg:5478 is Q15789\nkg:6546 is P27\nkg:9615 is Q183", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:2123 kg:p3373 kg:8556.\",\n      \"?person1 kg:p27 kg:9615.\",\n      \"?person1 kg:p108*/kg:p3373 kg:8556.\",\n      \"?person2 kg:p27 kg:9615.\",\n      \"?person2 kg:p108*/kg:p3373 kg:8556.\",\n      \"FILTER(?person1 != ?person2)\",\n      \"BIND(EXISTS{?person1 kg:p6 kg:6546} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:2123 kg:p3373 kg:8556. ?person1 kg:p27 kg:9615. ?person1 kg:p108*/kg:p3373 kg:8556. ?person2 kg:p27 kg:9615. ?person2 kg:p108*/kg:p3373 kg:8556. FILTER(?person1 != ?person2) BIND(EXISTS{?person1 kg:p6 kg:6546} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer ?charlieChaplinFounded\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P361 ?charlieChaplinFounded ;\", \"# Founding organization by Charlie Chaplin\",\n      \"?distributorProducer wdt:P345 ?drumsOfLove.\" ,\"\\n\\t# Relation to Drums of Love (film)\",\n    \"}\",\n    \"FILTER(?charlieChaplinFounded = wd:Q17682)\" ,\"\\n#\", \"Charlie Chaplin's QID\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer ?charlieChaplinFounded WHERE { ?distributorProducer wdt:P361 ?charlieChaplinFounded ; ?distributorProducer wdt:P345 ?drumsOfLove. } FILTER(?charlieChaplinFounded = wd:Q17682) Charlie Chaplin's QID LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwd:Q882 is Q882\nwdt:P750 is P750\nwdt:P112 is P112\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P750 wd:Q882 ;\",\n    \"   wdt:P112 wd:Q3715556 ;\",\n    \"   wdt:P272 wd:Q3715556 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P750 wd:Q882 ; wdt:P112 wd:Q3715556 ; wdt:P272 wd:Q3715556 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8209 is Q3715556\nkg:4426 is Q882\nkg:9672 is P750\nkg:0016 is P112\nkg:3116 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributorAndProducer kg:0016 \\\"Drums of Love\\\" ;\",\n    \"   kg:9672 ?founder .\",\n    \"?founder kg:3116 \\\"Charlie Chaplin\\\" .\",\n    \"?distributorAndProducer a ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?distributorAndProducer kg:0016 \"Drums of Love\" ; kg:9672 ?founder . ?founder kg:3116 \"Charlie Chaplin\" . ?distributorAndProducer a ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?work wdt:P50 ?author .\",\n    \"?work wdt:P800 ?producer .\",\n    \"?author rdfs:label \\\"Vince Gilligan\\\"@en .\",\n    \"?producer rdfs:label \\\"Bob Weinstein\\\"@en .\",\n    \"?resource a ?work .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P50 ?author . ?work wdt:P800 ?producer . ?author rdfs:label \"Vince Gilligan\"@en . ?producer rdfs:label \"Bob Weinstein\"@en . ?resource a ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P162 is P162\nwd:Q888311 is Q888311\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P58 wd:Q4500 ;\",\n    \"   wdt:P272 ?resource .\",\n    \"?work wdt:P162 wd:Q888311\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t\t\t \t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P58 wd:Q4500 ; wdt:P272 ?resource . ?work wdt:P162 wd:Q888311 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0791 is P58\nkg:2994 is Q4500\nkg:8432 is P162\nkg:7545 is Q888311\nkg:3490 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:predicateP58 kg:7545 ;\",\n      \"   kg:predicateP162 kg:2994 .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:predicateP58 kg:7545 ; kg:predicateP162 kg:2994 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q18629 wdt:P27 ?country ;\",\n    \"    wdt:P5304 ?founder .\",\n    \"  wd:Q18629 wdt:P27 wd:Q142 ;\",\n    \"    wdt:P5304 ?sibling .\",\n    \"  VALUES ?founder { wd:Q18629 }\",\n    \"  BIND(EXISTS{ ?sibling wdt:P17 wd:Q142 } AS ?result) \"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q18629 wdt:P27 ?country ; wdt:P5304 ?founder . wd:Q18629 wdt:P27 wd:Q142 ; wdt:P5304 ?sibling . VALUES ?founder { wd:Q18629 } BIND(EXISTS{ ?sibling wdt:P17 wd:Q142 } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1079409 is Q1079409\nwd:Q142 is Q142\nwdt:P31 is P31\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q4830453 is Q4830453\nwdt:P112 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q1079409 wdt:P31/wdt:P27 wd:Q4830453 ;\",\n    \"wdt:P3373 wd:Q142.\",\n    \"?result BOOLEAN.\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q1079409 wdt:P31/wdt:P27 wd:Q4830453 ; wdt:P3373 wd:Q142. ?result BOOLEAN. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6647 is Q1079409\nkg:0267 is Q142\nkg:3839 is P31\nkg:4332 is P3373\nkg:7131 is P27\nkg:8417 is Q4830453\nkg:9900 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:6647 kg:4332 kg:8417.\",\n    \"kg:8417 kg:3839 [ kg:7131 kg:0267; kg:9900 false ].\",\n    \"BIND(true AS ?result)\",\n    \"} UNION {\",\n    \"SELECT ?result WHERE {\",\n    \"kg:6647 kg:4332 kg:8417.\",\n    \"kg:8417 kg:3839 [ kg:7131 kg:0267; kg:9900 true ].\",\n    \"BIND(false AS ?result)\",\n    \"}\"\n    ]}\n ", "normal_query": "SELECT ?result WHERE { kg:6647 kg:4332 kg:8417. kg:8417 kg:3839 [ kg:7131 kg:0267; kg:9900 false ]. BIND(true AS ?result) } UNION { SELECT ?result WHERE { kg:6647 kg:4332 kg:8417. kg:8417 kg:3839 [ kg:7131 kg:0267; kg:9900 true ]. BIND(false AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q13476 wdt:P361 ?production .\",\n    \"  ?production wdt:P105* wd:Q28991 ;\",\n    \"               wdt:P50 ?writer .\",\n    \"  FILTER(?writer = wd:Q13476)\",\n    \"  BIND(EXISTS{wd:Q13476 wdt:P70 ?ghosts} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q13476 wdt:P361 ?production . ?production wdt:P105* wd:Q28991 ; wdt:P50 ?writer . FILTER(?writer = wd:Q13476) BIND(EXISTS{wd:Q13476 wdt:P70 ?ghosts} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q320211 is Q320211\nwdt:P162 is P162\nwd:Q2831 is Q2831\nwd:Q44477 is Q44477\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q320211 wdt:P58 ?production .\",\n    \"?production wdt:P162 ?producer .\",\n    \"?production wdt:P272 ?writer .\",\n    \"FILTER(?producer = wd:Q44477 && ?writer = wd:Q2831)\",\n    \"BIND(EXISTS({?production wdt:P162 wd:Q44477 && ?production wdt:P272 wd:Q2831}) AS ?result)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q320211 wdt:P58 ?production . ?production wdt:P162 ?producer . ?production wdt:P272 ?writer . FILTER(?producer = wd:Q44477 && ?writer = wd:Q2831) BIND(EXISTS({?production wdt:P162 wd:Q44477 && ?production wdt:P272 wd:Q2831}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8529 is P58\nkg:7815 is Q320211\nkg:9226 is P162\nkg:0017 is Q2831\nkg:6821 is Q44477\nkg:1786 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:7815 kg:9226 kg:0017 ;\", \"# Stan Winston produced Michael Jackson's Ghosts\",\n      \"kg:0017 kg:1786 kg:6821 .\" ,\"\\n# Michael Jackson wrote Michael Jackson's Ghosts\",\n    \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\"\n    ,\n      \"?production kg:P162 kg:6821 .\" ,\"\\n# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\"\n    ,\n      \"FILTER(?production = kg:6821 && ?script = kg:0017)\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production .\", \"# Stan Winston produced something\",\n      \"?production kg:P162 kg:6821 .\" ,\"\\n# Something is 'Michael Jackson's Ghosts'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:0017 kg:P320211 ?script .\", \"# Michael Jackson wrote something\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson's Ghosts'\",\n      \"?script kg:P162 kg:0017 .\" ,\"\\n# Something is 'Michael Jackson'\",\n      \"\\n?result bool:\"\n    ,\n      \"} UNION {\",\n      \"kg:7815 kg:P58 ?production ;\", \"# Stan Winston produced something\",\n      \"kg:0017 kg:P320211 ?script .\" ,\"\\n# Michael Jackson wrote something\",\n      \"?production kg:P162 kg:6821 .\", \"# Something is 'Michael Jackson", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P345 ? Spielberg .\",\n    \"?resource wdt:P50 ? Columbus .\",\n    \"FILTER(?Spielberg = wd:Q127689 AND ?Columbus = wd:Q106696)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P345 ? Spielberg . ?resource wdt:P50 ? Columbus . FILTER(?Spielberg = wd:Q127689 AND ?Columbus = wd:Q106696) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q8877 is Q8877\nwdt:P1431 is P1431\nwd:Q75079 is Q75079\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n  \t\t\"?work wdt:P1431 wd:Q75079 ;\",\n  \t\t\"   wdt:P58 wd:Q8877.\"\n  \t]\n}", "normal_query": "?work wdt:P1431 wd:Q75079 ; wdt:P58 wd:Q8877. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1015 is Q8877\nkg:2440 is P1431\nkg:3954 is Q75079\nkg:1631 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1631 kg:3954 ;\",\n    \"   kg:2440 kg:1015.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1631 kg:3954 ; kg:2440 kg:1015. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?work wdt:P361 ?producer .\",\n    \"?work wdt:P577 \\\"The Magic Flute\\\"@en .\",\n    \"?producer wdt:P1428 ?founder .\",\n    \"?founder wdt:P17 wd:Q90 .\",\n    \"FILTER(?distributorProducer = ?producer)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?work wdt:P361 ?producer . ?work wdt:P577 \"The Magic Flute\"@en . ?producer wdt:P1428 ?founder . ?founder wdt:P17 wd:Q90 . FILTER(?distributorProducer = ?producer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?item wdt:P112 wd:Q34 ;\",\n    \"   wdt:P272 ?distributorProducer .\",\n    \"?distributorProducer wdt:P750 \\\"Sweden\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?item wdt:P112 wd:Q34 ; wdt:P272 ?distributorProducer . ?distributorProducer wdt:P750 \"Sweden\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5489 is P112\nkg:5509 is P750\nkg:6133 is Q34\nkg:1703 is Q1651543\nkg:6530 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?distributorAndProducer kg:P272 ?founder.\",\n    \"?distributorAndProducer a kg:Q34.\",\n    \"?founder kg:P112* / kg:P750* kg:Q1651543.\",\n    \"?resource ?p ?distributorAndProducer.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?distributorAndProducer kg:P272 ?founder. ?distributorAndProducer a kg:Q34. ?founder kg:P112* / kg:P750* kg:Q1651543. ?resource ?p ?distributorAndProducer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  WITH { SELECT ?parent ?spouse ?sibling WHERE { SERVICE <http://wikiba.se/ontology#ask> { bd:serviceParam wikibase:format \\\"JSON\\\" . wd:Q123456 wdt:P22 ?child ; wdt:P570 ?parent ; wdt:P800 ?spouse ; wdt:P104 ?sibling . } } } AS ?personData\",\n    \"  SERVICE <http://wikiba.se/ontology#ask> { bd:serviceParam wikibase:format \\\"JSON\\\" . ?personData ?parent ?child . ?child wdt:P25 wd:Q6789 ; # Nefertarilllala's marriage status and identity\",\n    \"                                    ?child wdt:P22 ?parent ;\",\n    \"                                    ?child wdt:P570 ?spouse ;\",\n    \"                                    ?child wdt:P104 ?sibling . } ?result bool(?parent = wd:Q6789 && ?spouse = wd:Q6789 && ?sibling = wd:Q6789) }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { WITH { SELECT ?parent ?spouse ?sibling WHERE { SERVICE <http://wikiba.se//ontology> SERVICE <http://wikiba.se//ontology> ?child wdt:P22 ?parent ; ?child wdt:P570 ?spouse ; ?child wdt:P104 ?sibling . } ?result bool(?parent = wd:Q6789 && ?spouse = wd:Q6789 && ?sibling = wd:Q6789) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P3373 is P3373\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q210535 wdt:P26 ?parent ;\",\n    \"             wdt:P40 ?spouse ;\",\n    \"             wdt:P355 ?sibling .\",\n    \"  wd:Q443473 wdt:P3373 ?parent ;\",\n    \"              wdt:P3373 ?spouse ;\",\n    \"              wdt:P3373 ?sibling .\",\n    \"  BIND(EXISTS { wd:Q210535 wdt:P3373 wd:Q443473 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q210535 wdt:P26 ?parent ; wdt:P40 ?spouse ; wdt:P355 ?sibling . wd:Q443473 wdt:P3373 ?parent ; wdt:P3373 ?spouse ; wdt:P3373 ?sibling . BIND(EXISTS { wd:Q210535 wdt:P3373 wd:Q443473 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0923 is P26\nkg:4012 is P40\nkg:8757 is P355\nkg:6273 is P3373\nkg:4555 is Q210535\nkg:9518 is Q443473", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:4555 kg:P355*/kg:P3373* kg:9518.\",\n      \"VALUES ?result { <http://www.w3.org/2001/XMLSchema#boolean> }\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:4555 kg:P355*/kg:P3373* kg:9518. VALUES ?result { <http://www.w3.org/2001//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q123456 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P27 wd:Q979989 ;\",\n    \"         wdt:P3200 \\\"Jessica Drake\\\"@en ;\",\n    \"         wdt:P735 ?gender .\",\n    \"  FILTER(?gender = wd:Q6521140) # male\",\n    \"  BIND(EXISTS({wd:Q123456 wdt:P168 ?costume_designer}) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q123456 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q979989 ; wdt:P3200 \"Jessica Drake\"@en ; wdt:P735 ?gender . FILTER(?gender = wd:Q6521140) BIND(EXISTS({wd:Q123456 wdt:P168 ?costume_designer}) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q6581097 is Q6581097\nwd:Q233128 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q1323191 wdt:P106 wd:Q233128 ;\",\n    \"wdt:P26 [ wdt:P27 wd:Q6581097 ; wdt:P21 wd:Q16 ].\",\n    \"BIND(true AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q1323191 wdt:P106 wd:Q233128 ; wdt:P26 [ wdt:P27 wd:Q6581097 ; wdt:P21 wd:Q16 ]. BIND(true AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6083 is Q16\nkg:5047 is P26\nkg:9612 is Q1323191\nkg:9401 is P21\nkg:2669 is P27\nkg:7176 is P106\nkg:1713 is Q6581097\nkg:2219 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:9401 kg:6083 kg:9612.\",\n      \"kg:9401 kg:7176 [ kg:2669 kg:2219; kg:5047 Q6581097 ].\",\n      \"?result bool:\",\n      \"  (kg:9401 kg:1713 'costume designer'@en) &&\",\n      \"  (kg:2669 kg:2219 'male'@en) &&\",\n      \"  (kg:5047 Q6581097)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:9401 kg:6083 kg:9612. kg:9401 kg:7176 [ kg:2669 kg:2219; kg:5047 Q6581097 ]. ?result bool: (kg:9401 kg:1713 'costume designer'@en) && (kg:2669 kg:2219 'male'@en) && (kg:5047 Q6581097) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie wdt:P345 ?sequel .\",\n    \"?sequel wdt:P1617 ?productionCompany .\",\n    \"?productionCompany rdfs:label \\\"Televisa\\\"@en .\",\n    \"?movie rdfs:label ?title .\",\n    \"FILTER LANG(?title) = 'en'\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P345 ?sequel . ?sequel wdt:P1617 ?productionCompany . ?productionCompany rdfs:label \"Televisa\"@en . ?movie rdfs:label ?title . FILTER LANG(?title) = 'en' } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099\nwdt:P155 is P155", "response": "{\n \t\"query\": [\n  \t\t\"?work wdt:P750 ?sequel .\",\n  \t\t\"?work wdt:P162 wd:Q115945 .\",\n  \t\t\"?sequel wdt:P272 ?producer .\",\n  \t\t\"?producer wdt:P155 wd:Q47099\"\n  \t]\n}", "normal_query": "?work wdt:P750 ?sequel . ?work wdt:P162 wd:Q115945 . ?sequel wdt:P272 ?producer . ?producer wdt:P155 wd:Q47099 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0925 is P750\nkg:1844 is Q115945\nkg:5970 is P162\nkg:0055 is P272\nkg:3884 is Q47099\nkg:9227 is P155", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:9227 ?sequel.\",\n    \"?sequel kg:5970 ?productionCompany.\",\n    \"?productionCompany kg:3884 \\\"Televisa\\\".\",\n    \"?movie kg:1844 ?sequel.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:9227 ?sequel. ?sequel kg:5970 ?productionCompany. ?productionCompany kg:3884 \"Televisa\". ?movie kg:1844 ?sequel. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n      \"?child wdt:P279* ?parent ;\",\n      \"wdt:P168+ ?parent .\",\n      \"?parent wdt:P31 wd:Q5784380 .\",\n      \"?child wdt:P31 wd:Q5784380 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?child wdt:P279* ?parent ; wdt:P168+ ?parent . ?parent wdt:P31 wd:Q5784380 . ?child wdt:P31 wd:Q5784380 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q467752 is Q467752\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwdt:P127 is P127\nwdt:P749 is P749", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P31 wd:Q4830453 ;\",\n \t\t\"    wdt:P40/wdt:P749 ?parent .\",\n \t\t\"?company wdt:P31 wd:Q4830453 ;\",\n \t\t\"    wdt:P127 ?child .\"\n \t]\n}", "normal_query": "?company wdt:P31 wd:Q4830453 ; wdt:P40/wdt:P749 ?parent . ?company wdt:P31 wd:Q4830453 ; wdt:P127 ?child . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2565 is P40\nkg:0532 is P355\nkg:4626 is Q467752\nkg:5815 is P31\nkg:3431 is Q4830453\nkg:9280 is P127\nkg:0489 is P749", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n      \"?child kg:P749*/kg:P127/kg:P355 ?parent .\",\n      \"?parent a kg:Q467752 ;\",\n           \"kg:P40 ?child .\",\n      \"?child a kg:Q4830453 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?child kg:P749*/kg:P127/kg:P355 ?parent . ?parent a kg:Q467752 ; kg:P40 ?child . ?child a kg:Q4830453 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q198367 wdt:P57 ?producer .\",\n    \"  wd:Q198367 wdt:P400 ?distributor .\",\n    \"  BIND(EXISTS{wd:Q20033 wdt:P57 ?producer . wd:Q20033 wdt:P400 ?distributor} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q198367 wdt:P57 ?producer . wd:Q198367 wdt:P400 ?distributor . BIND(EXISTS{wd:Q20033 wdt:P57 ?producer . wd:Q20033 wdt:P400 ?distributor} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q524849 is Q524849\nwd:Q882 is Q882\nwdt:P750 is P750\nwd:Q104109 is Q104109\nwdt:P112 is P112\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q524849 wdt:P750 ?producerDistributor. \",\n    \"?producerDistributor wdt:P112* wd:Q882. \",\n    \"?producerDistributor wdt:P272* wd:Q104109. \",\n    \"BIND(EXISTS{?producerDistributor wdt:P112* wd:Q882. } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q524849 wdt:P750 ?producerDistributor. ?producerDistributor wdt:P112* wd:Q882. ?producerDistributor wdt:P272* wd:Q104109. BIND(EXISTS{?producerDistributor wdt:P112* wd:Q882. } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0762 is Q524849\nkg:9606 is Q882\nkg:9314 is P750\nkg:1063 is Q104109\nkg:2310 is P112\nkg:7316 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:0762 kg:2310 kg:9606.\",\n      \"kg:9606 kg:7316 [ kg:9314 [ kg:1063 kg:104109 ; kg:1063 kg:882 ] ].\",\n      \"?result bool:equalsLiteral \\\"true\\\".\"\n    ]\n  }\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:0762 kg:2310 kg:9606. kg:9606 kg:7316 [ kg:9314 [ kg:1063 kg:104109 ; kg:1063 kg:882 ] ]. ?result bool:equalsLiteral \"true\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q167598 wdt:P127* ?actor .\",\n    \"  ?actor wdt:P26 ?sibling .\",\n    \"  ?sibling wdt:P1545 wd:Q30526 .\",\n    \"  BIND(EXISTS { ?actor wdt:P127* wd:Q167598 } AS ?result) \"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q167598 wdt:P127* ?actor . ?actor wdt:P26 ?sibling . ?sibling wdt:P1545 wd:Q30526 . BIND(EXISTS { ?actor wdt:P127* wd:Q167598 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P737 is P737\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P3373 is P3373\nwdt:P106 is P106\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q33999 wdt:P106 ?actor .\",\n    \"?actor wdt:P737 wd:Q142701 .\",\n    \"wd:Q142701 wdt:P3373 wd:Q4811453 .\",\n    \"?sibling wdt:P106 wd:Q4811453 .\",\n    \"FILTER EXISTS { ?actor wdt:P22 ?sibling }\",\n    \"BIND(TRUE AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"SELECT ?result WHERE {\",\n    \"BIND(FALSE AS ?result)\",\n    \"}\"\n    ]\n  }\n ", "normal_query": "SELECT ?result WHERE { wd:Q33999 wdt:P106 ?actor . ?actor wdt:P737 wd:Q142701 . wd:Q142701 wdt:P3373 wd:Q4811453 . ?sibling wdt:P106 wd:Q4811453 . FILTER EXISTS { ?actor wdt:P22 ?sibling } BIND(TRUE AS ?result) } UNION { SELECT ?result WHERE { BIND(FALSE AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5553 is P737\nkg:1882 is Q33999\nkg:0703 is Q142701\nkg:8622 is P3373\nkg:9946 is P106\nkg:4070 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?actor kg:P99 ?influencedBy.\",\n      \"?influencedBy kg:P106 kg:1882.\",\n      \"?influencedBy kg:P737 kg:4070.\",\n      \"?sibling kg:P3373 kg:0703.\",\n      \"FILTER(?actor = ?sibling)\",\n      \"?result [] []\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?actor kg:P99 ?influencedBy. ?influencedBy kg:P106 kg:1882. ?influencedBy kg:P737 kg:4070. ?sibling kg:P3373 kg:0703. FILTER(?actor = ?sibling) ?result [] [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q182679 ;\", \"# Jens Jørgen Thorsen\",\n    \"(wdt:P50 wd:Q346654 ; wdt:P50 wd:Q167166) .\", \"# Ole John and Jørgen Leth\",\n    \"?resource wdt:P2987 ?text.\" ,\"\\n# Written and edited by the mentioned individuals\"\n   \t,\n    \"FILTER(?text IN ('written', 'edited'))\"\n   \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q182679 ; (wdt:P50 wd:Q346654 ; wdt:P50 wd:Q167166) . ?resource wdt:P2987 ?text. FILTER(?text IN ('written', 'edited')) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"   wdt:P1040 [ wdt:P1040 wd:Q1687239, wd:Q562108 ].\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q35979475 ; wdt:P1040 [ wdt:P1040 wd:Q1687239, wd:Q562108 ]. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2818 is P58\nkg:0501 is P1040\nkg:9608 is Q35979475\nkg:4803 is Q1687239\nkg:2068 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:is P58 kg:2818 ;\",\n           \"kg:is P1040 kg:0501.\",\n      \"FILTER(contains(str(?resource), \\\"Jens Jørgen Thorsen\\\")) ,\",\n      \"FILTER(contains(str(?resource), \\\"Ole John\\\")) ,\",\n      \"FILTER(contains(str(?resource), \\\"Jørgen Leth\\\")) .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:is P58 kg:2818 ; kg:is P1040 kg:0501. FILTER(contains(str(?resource), \"Jens Jørgen Thorsen\")) , FILTER(contains(str(?resource), \"Ole John\")) , FILTER(contains(str(?resource), \"Jørgen Leth\")) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film wdt:P106 ?costumeDesigner .\",\n    \"?person wdt:P2658 ?costumeDesigner .\",\n    \"?person p:P2658 ?statement .\",\n    \"?statement ps:P2658 ?costumeDesigner ; pq:P439 \\\"Miguel Albaladejo\\\"@es .\",\n    \"FILTER NOT EXISTS { ?person p:P21 ?statement2 }\",\n    \"?resource wdt:P170 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P106 ?costumeDesigner . ?person wdt:P2658 ?costumeDesigner . ?person p:P2658 ?statement . ?statement ps:P2658 ?costumeDesigner ; pq:P439 \"Miguel Albaladejo\"@es . FILTER NOT EXISTS { ?person p:P21 ?statement2 } ?resource wdt:P170 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q29 is Q29\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwdt:P3373 is P3373\nwdt:P27 is P27\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3373 wd:Q11424 ;\",\n                  \"wdt:P27 wd:Q3083718 .\",\n      \"?film wdt:P31 wd:Q29 ;\",\n             \"wdt:P2515 ?resource .\",\n      \"FILTER EXISTS { ?film wdt:P3373 wd:Q11424 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P3373 wd:Q11424 ; wdt:P27 wd:Q3083718 . ?film wdt:P31 wd:Q29 ; wdt:P2515 ?resource . FILTER EXISTS { ?film wdt:P3373 wd:Q11424 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9073 is Q29\nkg:2529 is Q11424\nkg:5412 is Q3083718\nkg:5351 is P31\nkg:8548 is P3373\nkg:3509 is P27\nkg:9364 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9364 kg:2529 ;\",\n           \"kg:8548 kg:5412 ;\",\n           \"kg:5351 [ kg:3509 \\\"Miguel Albaladejo\\\" ] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9364 kg:2529 ; kg:8548 kg:5412 ; kg:5351 [ kg:3509 \"Miguel Albaladejo\" ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  <http://www.wikidata.org/entity/Q102685> <http://purl.org/vocab/relationship/spouseOf> <http://www.wikidata.org/entity/Q749399> .\",\n    \"  <http://www.wikidata.org/entity/Q749399> <http://www.wikidata.org/prop/direct/P26> <http://www.wikidata.org/entity/Q183>.\",\n    \"  ?composer <http://purl.org/vocab/relationship/spouseOf> <http://www.wikidata.org/entity/Q749399> .\",\n    \"  FILTER(?composer = <http://www.wikidata.org/entity/Q20564>)\",\n    \"  BIND(EXISTS(?composer) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102685 <http://purl.org/vocab/relationship//spouseOf> wd:Q749399 . wd:Q749399 wdt:P26 wd:Q183. ?composer <http://purl.org/vocab/relationship//spouseOf> wd:Q749399 . FILTER(?composer = wd:Q20564) BIND(EXISTS(?composer) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q36834 is Q36834\nwdt:P27 is P27\nwdt:P21 is P21\nwd:Q34 is Q34\nwd:Q96203723 is Q96203723\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q96203723 wdt:P106 ?composer.;\",\n    \"wdt:P26 wd:Q34;\",\n    \"wdt:P27 wd:Q6581072;\",\n    \"wdt:P21 wd:Q36834.\",\n    \"?result BOOLEAN\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q96203723 wdt:P106 ?composer.; wdt:P26 wd:Q34; wdt:P27 wd:Q6581072; wdt:P21 wd:Q36834. ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9964 is Q6581072\nkg:3473 is P26\nkg:3697 is Q36834\nkg:7284 is P27\nkg:4428 is P21\nkg:1169 is Q34\nkg:3170 is Q96203723\nkg:0770 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:3170 kg:0770 kg:4428 ;\",\n    \"kg:3473 kg:3697 ;\",\n    \"kg:3697 kg:7284 kg:1169 ;\",\n    \"kg:3473 kg:3697 ;\",\n    \"kg:3473 kg:3473 kg:3170 .\",\n    \"?result BOOLEAN\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:3170 kg:0770 kg:4428 ; kg:3473 kg:3697 ; kg:3697 kg:7284 kg:1169 ; kg:3473 kg:3697 ; kg:3473 kg:3473 kg:3170 . ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105928 wdt:P643 ?producer .\",\n    \"  wd:Q105928 wdt:P703 ?editor .\",\n    \"  FILTER(?producer IN (wd:Q105928, wd:Q105928, wd:Q105928))\",\n    \"  FILTER(?editor IN (wd:Q105928, wd:Q105928, wd:Q105928))\",\n    \"  BIND(EXISTS { ?producer wdt:P643 wd:Q105928 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q105928 wdt:P643 ?producer . wd:Q105928 wdt:P703 ?editor . FILTER(?producer IN (wd:Q105928, wd:Q105928, wd:Q105928)) FILTER(?editor IN (wd:Q105928, wd:Q105928, wd:Q105928)) BIND(EXISTS { ?producer wdt:P643 wd:Q105928 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q20729551 wdt:P162 ?producer .\",\n    \"?producer wdt:P272 wd:Q35979475 ;\",\n    \"                        wdt:P272 wd:Q1687239 ;\",\n    \"                        wdt:P272 wd:Q562108 .\",\n    \"BIND(EXISTS { ?producer wdt:P272 wd:Q35979475 } AS ?result)}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q20729551 wdt:P162 ?producer . ?producer wdt:P272 wd:Q35979475 ; wdt:P272 wd:Q1687239 ; wdt:P272 wd:Q562108 . BIND(EXISTS { ?producer wdt:P272 wd:Q35979475 } AS ?result)} LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0395 is Q20729551\nkg:1198 is P1040\nkg:3845 is Q35979475\nkg:9180 is P162\nkg:4813 is Q1687239\nkg:2491 is Q562108\nkg:9666 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:0395 kg:9180 kg:4813.\",\n      \"kg:4813 kg:9666 [ kg:2491 'Jens Jørgen Thorsen' ; kg:3845 'Ole John' ; kg:1198 'Jørgen Leth' ].\",\n      \"?result bool:\",\n      \"  (kg:0395 kg:9180* kg:4813) &&\",\n      \"  EXISTS { kg:4813 kg:9666 [ kg:2491 'Jens Jørgen Thorsen' ; kg:3845 'Ole John' ; kg:1198 'Jørgen Leth' ] }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:0395 kg:9180 kg:4813. kg:4813 kg:9666 [ kg:2491 'Jens Jørgen Thorsen' ; kg:3845 'Ole John' ; kg:1198 'Jørgen Leth' ]. ?result bool: (kg:0395 kg:9180* kg:4813) && EXISTS { kg:4813 kg:9666 [ kg:2491 'Jens Jørgen Thorsen' ; kg:3845 'Ole John' ; kg:1198 'Jørgen Leth' ] } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q184079.\" , \"# spouse of Ptolemy IX Lathyros\",\n    \"?person wdt:P22 wd:Q13566.\" , \"# female sibling of Ptolemy IX Lathyros\",\n    \"?person wdt:P73 wd:Q108469\" ,\"# Antiochus IX Cyzicenus\"\n   \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P26 wd:Q184079. ?person wdt:P22 wd:Q13566. ?person wdt:P73 wd:Q108469 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwdt:P3373 is P3373\nwdt:P21 is P21", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?person wdt:P3373 wd:Q3340 ;\",\n\t\t\"   wdt:P26/wdt:P21 wd:Q296446 ;\",\n\t\t\"   wdt:P26 ?sibling .\",\n\t\t\"?sibling wdt:P21 wd:Q6581072 .\",\n\t\t\"?person wdt:P3373 ?spouse .\",\n\t\t\"?spouse wdt:P26/wdt:P21 wd:Q296446 .\",\n\t\t\"FILTER NOT EXISTS { ?person wdt:P26 ?otherSibling . ?otherSibling wdt:P21 wd:Q6581072 }\",\n\t\t\"?spouse wdt:P3373 ?resource .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P3373 wd:Q3340 ; wdt:P26/wdt:P21 wd:Q296446 ; wdt:P26 ?sibling . ?sibling wdt:P21 wd:Q6581072 . ?person wdt:P3373 ?spouse . ?spouse wdt:P26/wdt:P21 wd:Q296446 . FILTER NOT EXISTS { ?person wdt:P26 ?otherSibling . ?otherSibling wdt:P21 wd:Q6581072 } ?spouse wdt:P3373 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6357 is Q6581072\nkg:1650 is P26\nkg:0099 is Q3340\nkg:2000 is Q296446\nkg:0617 is P3373\nkg:0020 is P21", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:0099 kg:2000 ;\", \"# Q3340 is spouse of Ptolemy IX Lathyros\",\n      \"   kg:0617 kg:1650 kg:0020 .  # Q296446 is female sibling of Ptolemy IX Lathyros\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0099 kg:2000 ; kg:0617 kg:1650 kg:0020 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50|wdt:P286 ?author .\",\n    \"  ?resource wdt:P291 ?editor .\",\n    \"  FILTER(BOUND(?author) && BOUND(?editor))\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50|wdt:P286 ?author . ?resource wdt:P291 ?editor . FILTER(BOUND(?author) && BOUND(?editor)) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q35979475 ;\",\n\t\t\"?resource wdt:P1040 wd:Q1687239 .\",\n\t\t\"?resource wdt:P1040 wd:Q562108\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q35979475 ; ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q562108 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1653 is P58\nkg:6938 is P1040\nkg:7308 is Q35979475\nkg:2833 is Q1687239\nkg:6999 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:p58 kg:1653 ;\",\n    \"   kg:p1040 kg:6938 .\",\n    \"?work kg:q35979475 ?resource .\",\n    \"FILTER (?work = kg:2833 || ?work = kg:6999)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:p58 kg:1653 ; kg:p1040 kg:6938 . ?work kg:q35979475 ?resource . FILTER (?work = kg:2833 || ?work = kg:6999) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105928 wdt:P57 \\\"Stop for Bud\\\" ;\",\n    \"   wdt:P939 [ wdtn:P106* [ wikibase:statementProperty wdt:P939 ; psn/wdtn:P106 ?person ] ].\",\n    \"  VALUES ?person { wd:Q245875 wd:Q1166258 wd:Q105928 }.\",\n    \"  BIND(EXISTS{?person wdt:P31 wd:Q5} AS ?result).\"\n  ]\n}\n", "normal_query": "SELECT ?result WHERE { wd:Q105928 wdt:P57 \"Stop for Bud\" ; wdt:P939 [ wdtn:P106* [ wikibase:statementProperty wdt:P939 ; psn/wdtn:P106 ?person ] ]. VALUES ?person { wd:Q245875 wd:Q1166258 wd:Q105928 }. BIND(EXISTS{?person wdt:P31 wd:Q5} AS ?result). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT ?result WHERE {\\n\\t{ wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q35979475 ] }\\n\\tUNION\\n\\t{ wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q1687239 ] }\\n\\tUNION\\n\\t{ wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q562108 ] }\\n\\t?result bool:equalTo \\\"true\\\" .\\n}\",\n\t\"default-graph-uri\" , \"http://www.wikidata.org\"\n]\n}", "normal_query": "@prefix wd: <<http://www.wikidata.org>/entity/> . SELECT ?result WHERE { { wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q35979475 ] } UNION { wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q1687239 ] } UNION { wd:Q20729551 wdt:P1040 [ wdtt:P58* wd:Q562108 ] } ?result bool:equalTo \"true\" . } default-graph-uri <http://www.wikidata.org> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7697 is Q20729551\nkg:7756 is P1040\nkg:3640 is P58\nkg:4263 is Q35979475\nkg:2993 is Q1687239\nkg:6938 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:7697 kg:3640 kg:4263.\",\n      \"kg:4263 kg:58 kg:2993.\",\n      \"FILTER(?result = true)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:7697 kg:3640 kg:4263. kg:4263 kg:58 kg:2993. FILTER(?result = true) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105928 wdt:P361/wdt:P279* ?producer .\",\n    \"  wd:Q105928 wdt:P434 ?editor .\",\n    \"  FILTER(?producer IN (wd:Q105928, wd:Q110000, wd:Q110001))\",\n    \"  FILTER(?editor IN (wd:Q105928, wd:Q110000, wd:Q110001))\",\n    \"  BIND(EXISTS{?producer wdt:P361/wdt:P279* wd:Q105928} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q105928 wdt:P361/wdt:P279* ?producer . wd:Q105928 wdt:P434 ?editor . FILTER(?producer IN (wd:Q105928, wd:Q110000, wd:Q110001)) FILTER(?editor IN (wd:Q105928, wd:Q110000, wd:Q110001)) BIND(EXISTS{?producer wdt:P361/wdt:P279* wd:Q105928} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q20729551 wdt:P162 ?production .\",\n    \"?production wdt:P272 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q20729551 wdt:P162 ?production . ?production wdt:P272 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8184 is Q20729551\nkg:7201 is P1040\nkg:8215 is Q35979475\nkg:3252 is P162\nkg:1778 is Q1687239\nkg:2847 is Q562108\nkg:4864 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:8184 kg:4864 kg:3252.\",\n      \"kg:3252 kg:1778 \\\"Ole John\\\".\",\n      \"kg:3252 kg:1778 \\\"Jørgen Leth\\\".\",\n      \"kg:3252 kg:1778 \\\"Jens Jørgen Thorsen\\\".\",\n      \"?item kg:7201 kg:2847.\",\n      \"?item kg:8215 kg:3252.\",\n      \"?item kg:8215 kg:7201 ?person.\",\n      \"FILTER(?person IN (kg:1778, kg:2847, kg:3252))\",\n      \"BIND(EXISTS { ?item kg:8215 kg:3252 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:8184 kg:4864 kg:3252. kg:3252 kg:1778 \"Ole John\". kg:3252 kg:1778 \"Jørgen Leth\". kg:3252 kg:1778 \"Jens Jørgen Thorsen\". ?item kg:7201 kg:2847. ?item kg:8215 kg:3252. ?item kg:8215 kg:7201 ?person. FILTER(?person IN (kg:1778, kg:2847, kg:3252)) BIND(EXISTS { ?item kg:8215 kg:3252 } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?tvShow wdt:P57 ?resource .\",\n    \"?tvShow wdt:P105 [wdt:P279* wd:Q168439] .\",\n    \"?tvShow wdt:P161 wd:Q11969 .\",\n    \"?tvShow wdt:P161 wd:Q18001 .\",\n    \"?tvShow wdt:P161 wd:Q25768 .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?tvShow wdt:P57 ?resource . ?tvShow wdt:P105 [wdt:P279* wd:Q168439] . ?tvShow wdt:P161 wd:Q11969 . ?tvShow wdt:P161 wd:Q18001 . ?tvShow wdt:P161 wd:Q25768 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q365090 is Q365090\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q43994 is Q43994\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1431 wd:Q365090 ;\",\n\t\t\"(wdt:P162|wdt:P272) [ wikibase:claim wdt:P1431 ; wikibase:statementTarget wd:Q95125 ] .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q365090 ; (wdt:P162|wdt:P272) [ wikibase:claim wdt:P1431 ; wikibase:statementTarget wd:Q95125 ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4109 is Q365090\nkg:1068 is Q95125\nkg:3658 is P1431\nkg:0807 is P162\nkg:7576 is Q43994\nkg:4304 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:4304 [ kg:0807 \\\"Sam Simon\\\", kg:1068 \\\"James L. Brooks\\\", kg:7576 \\\"Matt Groening\\\" ];\",\n    \"   kg:3658 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?show kg:4304 [ kg:0807 \"Sam Simon\", kg:1068 \"James L. Brooks\", kg:7576 \"Matt Groening\" ]; kg:3658 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P26 wd:Q184079 ;\", \"# spouse of Ptolemy IX Lathyros\",\n    \"?resource wdt:P15 wd:Q136119 .  # sister of Ptolemy X Alexander I\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q184079 ; ?resource wdt:P15 wd:Q136119 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwdt:P3373 is P3373\nwdt:P21 is P21\nwd:Q3345 is Q3345", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P26 wd:Q3340 ;\",\n    \"   wdt:P3373 wd:Q3345 ;\",\n    \"   wdt:P21 ?gender .\",\n    \"FILTER(?gender = wd:Q6581072)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q3340 ; wdt:P3373 wd:Q3345 ; wdt:P21 ?gender . FILTER(?gender = wd:Q6581072) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2080 is Q6581072\nkg:0041 is P26\nkg:1593 is Q3340\nkg:5056 is P3373\nkg:9247 is P21\nkg:0896 is Q3345", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9247 kg:3340 ;\", \"# Ptolemy X Alexander I's female sibling\",\n    \"?resource kg:0896 kg:2080 .\", \"# Ptolemy IX Lathyros's sibling and spouse\",\n    \".\"\n   \t]}\n", "normal_query": "SELECT ?resource WHERE { ?resource kg:9247 kg:3340 ; ?resource kg:0896 kg:2080 . . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q10258 wdt:P39 ?producer .\",\n    \"  FILTER(?producer = wd:Q7441).\",\n    \"  wd:Q10258 wdt:P63 ?director .\",\n    \"  FILTER(?director = wd:Q7441).\",\n    \"  wd:Q10258 wdt:P57 ?writer .\",\n    \"  FILTER(?writer = wd:Q7441).\",\n    \"  BIND(EXISTS {wd:Q10258 wdt:P39 wd:Q7441} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q10258 wdt:P39 ?producer . FILTER(?producer = wd:Q7441). wd:Q10258 wdt:P63 ?director . FILTER(?director = wd:Q7441). wd:Q10258 wdt:P57 ?writer . FILTER(?writer = wd:Q7441). BIND(EXISTS {wd:Q10258 wdt:P39 wd:Q7441} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P162 is P162\nwd:Q1079 is Q1079\nwdt:P272 is P272", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?result WHERE {\\n\\t{ wd:Q5542223 wdt:P162* wd:Q4500 }\\n\\tUNION\\n\\t{ wd:Q5542223 wdt:P272* wd:Q1079 }\\n\\t?result bool:if (BOUND(?director) && BOUND(?writer), true(), false())\\n}\",\n\t\"booleanResultBindingName\" ,\"%s\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?result WHERE { { wd:Q5542223 wdt:P162* wd:Q4500 } UNION { wd:Q5542223 wdt:P272* wd:Q1079 } ?result bool:if (BOUND(?director) && BOUND(?writer), true(), false()) } booleanResultBindingName %s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5996 is Q5542223\nkg:8147 is P57\nkg:0995 is P58\nkg:7668 is Q4500\nkg:6360 is P162\nkg:5617 is Q1079\nkg:6767 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:5996 kg:8147 kg:0995.\",\n      \"kg:5996 kg:6360 kg:7668.\",\n      \"kg:5996 kg:6767 kg:6360.\"\n    ,\n    \"OPTIONAL {\",\n      \"kg:5996 kg:6360 kg:5617.\"\n    ,\n    \"}\",\n    \"BIND(EXISTS{SELECT ?result WHERE {} } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:5996 kg:8147 kg:0995. kg:5996 kg:6360 kg:7668. kg:5996 kg:6767 kg:6360. OPTIONAL { kg:5996 kg:6360 kg:5617. } BIND(EXISTS{SELECT ?result WHERE {} } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film1 wdt:P3459 ?costumeDesigner .\",\n    \"  ?film2 wdt:P3459 ?costumeDesigner .\",\n    \"  ?film3 wdt:P3459 ?costumeDesigner .\",\n    \"  FILTER(BOUND(?costumeDesigner))\",\n    \"  BIND(EXISTS{?film1 wdt:P748 ?star} AS ?star)\",\n    \"  BIND(EXISTS{?film2 wdt:P748 ?editor} AS ?editor)\",\n    \"  BIND(EXISTS{?film3 wdt:P748 ?star} AS ?star2)\",\n    \"  BIND(EXISTS{?film3 wdt:P748 ?editor} AS ?editor2)\",\n    \"  BIND(?star && ?editor && ?star2 && ?editor2 AS ?result)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film1 wdt:P3459 ?costumeDesigner . ?film2 wdt:P3459 ?costumeDesigner . ?film3 wdt:P3459 ?costumeDesigner . FILTER(BOUND(?costumeDesigner)) BIND(EXISTS{?film1 wdt:P748 ?star} AS ?star) BIND(EXISTS{?film2 wdt:P748 ?editor} AS ?editor) BIND(EXISTS{?film3 wdt:P748 ?star} AS ?star2) BIND(EXISTS{?film3 wdt:P748 ?editor} AS ?editor2) BIND(?star && ?editor && ?star2 && ?editor2 AS ?result) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q2336453 is Q2336453\nwd:Q3530946 is Q3530946\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwdt:P161 is P161", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?costumeDesigner) AS ?result) WHERE {\",\n    \"?film wdt:P161* wd:Q2336453, wd:Q3530946, wd:Q1323191 ;\",\n    \"   wdt:P106 ?costumeDesigner .\",\n    \"}\",\n    \"FILTER(?result > 0)\"\n  ]\n}", "normal_query": "SELECT (COUNT(?costumeDesigner) AS ?result) WHERE { ?film wdt:P161* wd:Q2336453, wd:Q3530946, wd:Q1323191 ; wdt:P106 ?costumeDesigner . } FILTER(?result > 0) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3875 is Q2615443\nkg:0075 is P1040\nkg:3190 is Q2336453\nkg:3259 is Q3530946\nkg:8462 is Q1323191\nkg:9815 is P106\nkg:8116 is P161", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?film kg:9815 ?costumeDesigner .\",\n      \"?film kg:8462 [ kg:3259 ?star ; kg:3190 ?editor ] .\",\n      \"?film kg:8116 \\\"Tom at the Farm , Heartbeats , and Laurence Anyways\\\" .\",\n      \"BIND(EXISTS { ?costumeDesigner kg:3875 ?star } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film kg:9815 ?costumeDesigner . ?film kg:8462 [ kg:3259 ?star ; kg:3190 ?editor ] . ?film kg:8116 \"Tom at the Farm , Heartbeats , and Laurence Anyways\" . BIND(EXISTS { ?costumeDesigner kg:3875 ?star } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P31/wdt:P279* wd:Q5 .\" ,\n    \"?person wdt:P108 ?role .\",\n    \"?movie wd:P31/wdt:P279* wd:Q11424 .\" ,\n    \"?role wdt:P161 ?movie .\" ,\n    \"VALUES ?movie { wd:Q1051744 wd:Q1051809 wd:Q1051831 wd:Q1051863 }\" ,\n    \"FILTER(?role = wd:Q24909)\" ,\n    \"?person wdt:P161 ?movie .\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31/wdt:P279* wd:Q5 . ?person wdt:P108 ?role . ?movie wd:P31/wdt:P279* wd:Q11424 . ?role wdt:P161 ?movie . VALUES ?movie { wd:Q1051744 wd:Q1051809 wd:Q1051831 wd:Q1051863 } FILTER(?role = wd:Q24909) ?person wdt:P161 ?movie . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q658822 is Q658822\nwd:Q2718259 is Q2718259\nwd:Q921678 is Q921678\nwd:Q5 is Q5\nwdt:P1040 is P1040\nwdt:P31 is P31\nwdt:P161 is P161\nwd:Q45602 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P31 wd:Q5 ;\",\n    \"   wdt:P1040 [wdt:P161 wd:Q658822, wd:Q2718259, wd:Q921678, wd:Q45602] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; wdt:P1040 [wdt:P161 wd:Q658822, wd:Q2718259, wd:Q921678, wd:Q45602] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8855 is Q658822\nkg:0252 is Q2718259\nkg:3802 is Q921678\nkg:5868 is Q5\nkg:5590 is P1040\nkg:5400 is P31\nkg:6546 is P161\nkg:2053 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5868 kg:2053 ;\", \"# is editor and star of\",\n    \"   kg:6546 \\\"In the Park\\\" ;\",\n    \"   kg:6546 \\\"Shanghaied\\\" ;\",\n    \"   kg:6546 \\\"Modern Times\\\" ;\",\n    \"   kg:6546 \\\"The Professor\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5868 kg:2053 ; kg:6546 \"In the Park\" ; kg:6546 \"Shanghaied\" ; kg:6546 \"Modern Times\" ; kg:6546 \"The Professor\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?edit ?direct WHERE {\",\n    \"  VALUES ?person { wd:Q1234567890 }\", \"@en\",\n    \"  ?person wdt:P31/wdt:P279* wd:Q5 .\" , \"@en\",\n    \"  ?person wdt:P106 ?role .\",\n    \"  FILTER(?role IN (wdt:P1477, wdt:P686)) .\",\n    \"  OPTIONAL { ?person wdt:P1477 ?edit . }\" , \"@en\",\n    \"  OPTIONAL { ?person wdt:P686 ?direct . }\" , \"@en\",\n    \"}\",\n    \"ORDER BY ?person\"\n  ]\n}", "normal_query": "SELECT ?person ?edit ?direct WHERE { VALUES ?person { wd:Q1234567890 } @en ?person wdt:P31/wdt:P279* wd:Q5 . @en ?person wdt:P106 ?role . FILTER(?role IN (wdt:P1477, wdt:P686)) . OPTIONAL { ?person wdt:P1477 ?edit . } @en OPTIONAL { ?person wdt:P686 ?direct . } @en } ORDER BY ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987\nwd:Q4207234 is Q4207234\nwd:Q1291210 is Q1291210", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person ?edit ?direct WHERE { ?person wdt:P57 ?edit . ?person wdt:P1040 ?direct . FILTER(?person IN (wd:Q16198328, wd:Q4679987, wd:Q4207234, wd:Q1291210)) }\"\n \t]\n}", "normal_query": "SELECT ?person ?edit ?direct WHERE { ?person wdt:P57 ?edit . ?person wdt:P1040 ?direct . FILTER(?person IN (wd:Q16198328, wd:Q4679987, wd:Q4207234, wd:Q1291210)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1391 is P57\nkg:8789 is Q16198328\nkg:2396 is P1040\nkg:2280 is Q4679987\nkg:1300 is Q4207234\nkg:7562 is Q1291210", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?entity kg:P57 ?resource .\",\n      \"?entity kg:P1040 ?resource .\",\n      \"VALUES ?entity { kg:8789 kg:2396 kg:1300 kg:7562 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?entity kg:P57 ?resource . ?entity kg:P1040 ?resource . VALUES ?entity { kg:8789 kg:2396 kg:1300 kg:7562 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wdt:P3457 \\\"Four Rooms\\\" ;\",\n    \"        wdt:P50 ?director .\",\n    \"  ?film wdt:P69 ?writer .\",\n    \"  FILTER(?director IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)) \",\n    \"  FILTER(?writer IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)) \",\n    \"  BIND(EXISTS{?film wdt:P3457 \\\"Four Rooms\\\" && ?director IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289) && ?writer IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film wdt:P3457 \"Four Rooms\" ; wdt:P50 ?director . ?film wdt:P69 ?writer . FILTER(?director IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)) FILTER(?writer IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)) BIND(EXISTS{?film wdt:P3457 \"Four Rooms\" && ?director IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289) && ?writer IN (wd:Q18261, wd:Q65584, wd:Q36676, wd:Q11289)} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1137372 is Q1137372\nwd:Q47284 is Q47284\nwdt:P58 is P58\nwd:Q2838329 is Q2838329\nwd:Q3772 is Q3772\nwd:Q549956 is Q549956", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q2838329 wdt:P57/wdt:P58* wd:Q1137372. wd:Q2838329 wdt:P57/wdt:P58* wd:Q47284. wd:Q2838329 wdt:P57/wdt:P58* wd:Q3772. wd:Q2838329 wdt:P57/wdt:P58* wd:Q549956. BIND (1 AS ?result) } UNION { !?result }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q2838329 wdt:P57/wdt:P58* wd:Q1137372. wd:Q2838329 wdt:P57/wdt:P58* wd:Q47284. wd:Q2838329 wdt:P57/wdt:P58* wd:Q3772. wd:Q2838329 wdt:P57/wdt:P58* wd:Q549956. BIND (1 AS ?result) } UNION { !?result } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2620 is P57\nkg:9530 is Q1137372\nkg:7046 is Q47284\nkg:7981 is P58\nkg:2301 is Q2838329\nkg:4240 is Q3772\nkg:0145 is Q549956", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:2620 kg:7046 kg:9530 ;\",\n      \"kg:7981 [ kg:p57*/kg:4240*/kg:2301* ] .\",\n      \"BIND(EXISTS{ kg:2620 kg:7981/kg:p57*/kg:4240*/kg:2301* } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:2620 kg:7046 kg:9530 ; kg:7981 [ kg:p57*/kg:4240*/kg:2301* ] . BIND(EXISTS{ kg:2620 kg:7981/kg:p57*/kg:4240*/kg:2301* } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  OPTIONAL {\",\n    \"    <http://www.wikidata.org/entity/Q1026849> wdt:P57 P31 wd:Q11926; p:P31/ps:P31 wd:Q11926 .\",\n    \"    ?productionPerson wdt:P106/wdt:P279* wd:Q11926 ;\",\n    \"                     wdt:P57 [ ps:wdt:P106 wd:Q1026849; pq:P580 ?startDate ] .\",\n    \"  }\",\n    \"  BIND(EXISTS{?productionPerson} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { OPTIONAL { wd:Q1026849 wdt:P57 P31 wd:Q11926; p:P31/ps:P31 wd:Q11926 . ?productionPerson wdt:P106/wdt:P279* wd:Q11926 ; wdt:P57 [ ps:wdt:P106 wd:Q1026849; pq:P580 ?startDate ] . } BIND(EXISTS{?productionPerson} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwd:Q40220 is Q40220\nwd:Q5127380 is Q5127380\nwd:Q117392 is Q117392\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q4235 wdt:P162 ?director .\",\n    \"?director wdt:P272 wd:Q40220 ;\",\n    \"   wdt:P272 wd:Q5127380 ;\",\n    \"   wdt:P272 wd:Q117392 ;\",\n    \"   wdt:P272 wd:Q3977597 .\",\n    \"BIND(EXISTS { ?director wdt:P162 wd:Q4235 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q4235 wdt:P162 ?director . ?director wdt:P272 wd:Q40220 ; wdt:P272 wd:Q5127380 ; wdt:P272 wd:Q117392 ; wdt:P272 wd:Q3977597 . BIND(EXISTS { ?director wdt:P162 wd:Q4235 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7455 is P57\nkg:3267 is Q4235\nkg:2507 is Q3977597\nkg:5050 is P162\nkg:2562 is Q40220\nkg:3272 is Q5127380\nkg:6690 is Q117392\nkg:6645 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:7455 kg:6690 kg:3267 ;\",\n      \"         kg:6645 kg:2507 ;\",\n      \"         kg:5050 kg:3272 .\",\n      \"?movie kg:2562 ?movieName ;\",\n      \"       kg:3267 ?director1 ;\",\n      \"       kg:2507 ?director2 ;\",\n      \"       kg:3272 ?producer1 ;\",\n      \"       kg:3272 ?producer2 .\",\n      \"FILTER (?director1 = kg:3267 && ?director2 = kg:2507 && ?producer1 = kg:3272 && ?producer2 = kg:6645)\",\n      \"?movieName = \\\"Super Rhino\\\"^^xsd:string.\",\n      \"BIND(TRUE AS ?result).\",\n    \"} UNION {\",\n      \"SELECT FALSE AS ?result.\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:7455 kg:6690 kg:3267 ; kg:6645 kg:2507 ; kg:5050 kg:3272 . ?movie kg:2562 ?movieName ; kg:3267 ?director1 ; kg:2507 ?director2 ; kg:3272 ?producer1 ; kg:3272 ?producer2 . FILTER (?director1 = kg:3267 && ?director2 = kg:2507 && ?producer1 = kg:3272 && ?producer2 = kg:6645) ?movieName = \"Super Rhino\"^^xsd:string. BIND(TRUE AS ?result). } UNION { SELECT FALSE AS ?result. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q168560.\" ,\n    \"  OPTIONAL { ?resource wdt:P577 ?date. }\" , \"@en\" ,\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\n    \"  FILTER EXISTS {\",\n    \"    ?resource wdt:P69 ?georgeLucas .\" ,\n    \"    ?resource wdt:P73 ?georgeLucas .\" ,\n    \"    ?resource wdt:P800 ?georgeLucas .\" ,\n    \"    ?resource wdt:P812 ?georgeLucas .\",\n    \"  }\"\n    ,\"}\",\n    \"ORDER BY DESC(?date)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q168560. OPTIONAL { ?resource wdt:P577 ?date. } @en SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } FILTER EXISTS { ?resource wdt:P69 ?georgeLucas . ?resource wdt:P73 ?georgeLucas . ?resource wdt:P800 ?georgeLucas . ?resource wdt:P812 ?georgeLucas . } } ORDER BY DESC(?date) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q38222 is Q38222\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P58 wd:Q38222 ;\",\n\t\t\"?resource wdt:P1040 wd:Q38222 ;\",\n\t\t\"?resource wdt:P1431 wd:Q38222 ;\",\n\t\t\"?resource wdt:P162 wd:Q38222 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q38222 ; ?resource wdt:P1040 wd:Q38222 ; ?resource wdt:P1431 wd:Q38222 ; ?resource wdt:P162 wd:Q38222 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9000 is P58\nkg:7674 is P1040\nkg:1559 is P1431\nkg:1687 is P162\nkg:6160 is Q38222\nkg:0144 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource p:P162/kg:1687 \\\"George Lucas\\\" .\",\n    \"?resource p:P58/kg:9000 ?statement .\",\n    \"+?statement ps:P58/kg:9000 ?work .\",\n    \"+?statement pq:P1431/kg:1559 ?role .\",\n    \"FILTER(?role IN (kg:7674, kg:0144))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource p:P162/kg:1687 \"George Lucas\" . ?resource p:P58/kg:9000 ?statement . +?statement ps:P58/kg:9000 ?work . +?statement pq:P1431/kg:1559 ?role . FILTER(?role IN (kg:7674, kg:0144)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q114248065 ;\", \"# Every Man for Himself, Passion, and Notre musique\",\n    \"wdt:P57 ?person .\", \"# writer and editor\",\n    \"?work wdt:P108 wd:Q1344149 .\" ,\"\\n# employed by Cahiers du cinéma\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?work wdt:P31/wdt:P279* wd:Q114248065 ; wdt:P57 ?person . ?work wdt:P108 wd:Q1344149 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwd:Q672061 is Q672061\nwd:Q909176 is Q909176", "response": "{\n \t\"query\": [\n  \t\t\"?work wdt:P108 ?author.\",\n  \t\t\"?work wdt:P58 ?editor.\",\n  \t\t\"?work wdt:P1040 \\\"Every Man for Himself\\\"@en.\",\n  \t\t\"?work wdt:P1040 \\\"Passion\\\"@en.\",\n  \t\t\"?work wdt:P1040 \\\"Notre musique\\\"@en.\",\n  \t\t\"?author wdt:P58 ?cinephile.\",\n  \t\t\"?cinephile wdt:P31 wd:Q972787.\"\n  \t]\n}", "normal_query": "?work wdt:P108 ?author. ?work wdt:P58 ?editor. ?work wdt:P1040 \"Every Man for Himself\"@en. ?work wdt:P1040 \"Passion\"@en. ?work wdt:P1040 \"Notre musique\"@en. ?author wdt:P58 ?cinephile. ?cinephile wdt:P31 wd:Q972787. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4774 is P108\nkg:1412 is Q972787\nkg:0484 is P58\nkg:7559 is P1040\nkg:7675 is Q3141131\nkg:9627 is Q672061\nkg:2560 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:0484 kg:7559 ;\", \"# P108\",\n      \"   kg:7675 kg:2560 .\", \"# Q3141131 (Cahiers du cinéma)\",\n      \"?work kg:7559 ?resource .\", \"# P1040\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0484 kg:7559 ; kg:7675 kg:2560 . ?work kg:7559 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102695 wdt:P361 ?execProducer .\",\n    \"  wd:Q102695 wdt:P648 ?prodProducer .\",\n    \"  FILTER(?execProducer IN (wd:Q71122, wd:Q11356, wd:Q103469, wd:Q103469) && ?prodProducer IN (wd:Q71122, wd:Q11356, wd:Q103469, wd:Q103469))\",\n    \"  BIND(true AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102695 wdt:P361 [] .\",\n    \"  wd:Q102695 wdt:P648 [] .\",\n    \"  BIND(false AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102695 wdt:P361 ?execProducer . wd:Q102695 wdt:P648 ?prodProducer . FILTER(?execProducer IN (wd:Q71122, wd:Q11356, wd:Q103469, wd:Q103469) && ?prodProducer IN (wd:Q71122, wd:Q11356, wd:Q103469, wd:Q103469)) BIND(true AS ?result) } UNION SELECT ?result WHERE { wd:Q102695 wdt:P361 [] . wd:Q102695 wdt:P648 [] . BIND(false AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q81520 is Q81520\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwdt:P162 is P162\nwd:Q1295611 is Q1295611\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q381545 wdt:P1431 ?production .\",\n    \"?production wdt:P272 wd:Q81520, wd:Q1969128, wd:Q819109, wd:Q1295611 .\",\n    \"}\",\n    \"VALUES ?result { <http://www.w3.org/2001/XMLSchema#boolean> true }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q381545 wdt:P1431 ?production . ?production wdt:P272 wd:Q81520, wd:Q1969128, wd:Q819109, wd:Q1295611 . } VALUES ?result { <http://www.w3.org/2001//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3202 is Q81520\nkg:1758 is Q1969128\nkg:1430 is Q819109\nkg:7006 is P1431\nkg:9761 is Q381545\nkg:6061 is P162\nkg:8344 is Q1295611\nkg:0047 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:3202 kg:7006 kg:9761.\",\n      \"kg:3202 kg:6061 [ kg:8344 'Bob Yari' ; kg:0047 'Pierce Brosnan' ; kg:8344 'Toby Emmerich' ; kg:0047 'Elie Samaha' ].\",\n      \"?result bool:equals true.\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:3202 kg:7006 kg:9761. kg:3202 kg:6061 [ kg:8344 'Bob Yari' ; kg:0047 'Pierce Brosnan' ; kg:8344 'Toby Emmerich' ; kg:0047 'Elie Samaha' ]. ?result bool:equals true. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q43068 wdt:P1001 ?kagemusha .\",\n    \"  ?kagemusha wdt:P6729 ?person .\",\n    \"  FILTER(?person = wd:Q7566).\",\n    \"  ?kagemusha wdt:P6483 ?person. \",\n    \"  FILTER(?person = wd:Q7566).\",\n    \"  ?kagemusha wdt:P106 ?role .\",\n    \"  FILTER(?role IN (wd:Q24924, wd:Q11424, wd:Q11368, wd:Q1031257)).\",\n    \"  BIND(EXISTS { ?kagemusha wdt:P6729 wd:Q7566 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q43068 wdt:P1001 ?kagemusha . ?kagemusha wdt:P6729 ?person . FILTER(?person = wd:Q7566). ?kagemusha wdt:P6483 ?person. FILTER(?person = wd:Q7566). ?kagemusha wdt:P106 ?role . FILTER(?role IN (wd:Q24924, wd:Q11424, wd:Q11368, wd:Q1031257)). BIND(EXISTS { ?kagemusha wdt:P6729 wd:Q7566 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q854990 is Q854990\nwdt:P272 is P272", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q854990 wdt:P162* wd:Q8006. ?result bool:equalTo \\\"true\\\" } LIMIT 1 \"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q854990 wdt:P162* wd:Q8006. ?result bool:equalTo \"true\" } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5640 is P58\nkg:9419 is P1040\nkg:7124 is Q8006\nkg:5209 is P1431\nkg:1629 is P162\nkg:6693 is Q854990\nkg:6018 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:5640 kg:9419 kg:7124 ;\",\n      \"      kg:5209 kg:6693 ;\",\n      \"      kg:1629 kg:6018 ;\",\n      \"      is P58 ?result .\",\n      \"VALUES ?result { true }\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:5640 kg:9419 kg:7124 ; kg:5209 kg:6693 ; kg:1629 kg:6018 ; is P58 ?result . VALUES ?result { true } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># Work of art or creative work\",\n    \"           wdt:P57 # Directed by\",\n    \"           ?director ;\",\n    \"          wdt:P285 # Edited by\",\n    \"           ?editor ;\",\n    \"          wdt:P93 # Written by\",\n    \"           ?writer .\",\n    \"  VALUES ?director { wd:Q1046721 } # Jørgen Leth\",\n    \"         ?editor { wd:Q5866666 } # Jens Jørgen Thorsen\",\n    \"        ?writer { wd:Q396666 }   # Ole John\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16501804 ; > wdt:P57 ?director ; wdt:P285 ?editor ; wdt:P93 ?writer . VALUES ?director { wd:Q1046721 } ?editor { wd:Q5866666 } ?writer { wd:Q396666 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n \t\t\"   wdt:P58 wd:Q35979475 ;\",\n \t\t\"   wdt:P1040 wd:Q35979475 .\"\n \t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3123 is P57\nkg:9032 is P58\nkg:9474 is P1040\nkg:2478 is Q35979475\nkg:9289 is Q1687239\nkg:4094 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:P57 kg:2478 ;\",\n           \"kg:P58 kg:9289 ;\",\n           \"kg:P1040 kg:4094 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:2478 ; kg:P58 kg:9289 ; kg:P1040 kg:4094 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31/wdt:P279* wd:Q16504802 ;\", \"# Media work\",\n    \"wdt:P57 \" ,\"?person1\" ,\".\",\n    \"wdt:P73 \" ,\"?person2\" ,\".\",\n    \"wdt:P74 \" ,\"?person3\" ,\".\" ,\n    \"?person1 wdt:P31/wdt:P279* wd:Q5 .\" ,\"# Person\",\n    \"?person2 wdt:P31/wdt:P279* wd:Q5 .\" ,\n    \"?person3 wdt:P31/wdt:P279* wd:Q5 .\" ,\n    \"FILTER(STR(?person1) = 'Ole John' && STR(?person2) = 'Jørgen Leth' && STR(?person3) = 'Jens Jørgen Thorsen')\" ,\n    \".}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16504802 ; wdt:P57 ?person1 . wdt:P73 ?person2 . wdt:P74 ?person3 . ?person1 wdt:P31/wdt:P279* wd:Q5 . ?person2 wdt:P31/wdt:P279* wd:Q5 . ?person3 wdt:P31/wdt:P279* wd:Q5 . FILTER(STR(?person1) = 'Ole John' && STR(?person2) = 'Jørgen Leth' && STR(?person3) = 'Jens Jørgen Thorsen') .} ORDER BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n \t\t\"   wdt:P58 wd:Q35979475 ;\",\n \t\t\"   wdt:P1040 wd:Q35979475 .\"\n \t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4531 is P57\nkg:9357 is P58\nkg:7634 is P1040\nkg:1203 is Q35979475\nkg:3933 is Q1687239\nkg:6565 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 kg:4531 ;\",\n    \"   kg:P58 kg:9357 ;\",\n    \"   kg:P1040 kg:7634.\",\n    \"?director kg:Q35979475 ?resource ;\",\n    \"   kg:Q1687239 \\\"Ole John\\\" ;\",\n    \"   kg:Q562108 \\\"Jørgen Leth\\\".\",\n    \"?writer kg:Q35979475 ?resource ;\",\n    \"   kg:Q1687239 \\\"Jens Jørgen Thorsen\\\".\",\n    \"?editor kg:Q35979475 ?resource ;\",\n    \"   kg:Q1687239 \\\"Ole John\\\" ;\",\n    \"   kg:Q562108 \\\"Jørgen Leth\\\".\"\n   \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:4531 ; kg:P58 kg:9357 ; kg:P1040 kg:7634. ?director kg:Q35979475 ?resource ; kg:Q1687239 \"Ole John\" ; kg:Q562108 \"Jørgen Leth\". ?writer kg:Q35979475 ?resource ; kg:Q1687239 \"Jens Jørgen Thorsen\". ?editor kg:Q35979475 ?resource ; kg:Q1687239 \"Ole John\" ; kg:Q562108 \"Jørgen Leth\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q168523 wdt:P31/wdt:P279* wd:Q11424 ;\",\n    \"    wdt:P577 ?date .\",\n    \"  OPTIONAL {\",\n    \"    wd:Q168523 wdt:P161 ?film .\",\n    \"    ?film wdt:P34 ?productionCompany .\",\n    \"  }\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"BIND(EXISTS{wd:Q168523 wdt:P750 wd:Q93874} AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q168523 wdt:P31/wdt:P279* wd:Q11424 ; wdt:P577 ?date . OPTIONAL { wd:Q168523 wdt:P161 ?film . ?film wdt:P34 ?productionCompany . } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } BIND(EXISTS{wd:Q168523 wdt:P750 wd:Q93874} AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q283699 is Q283699\nwd:Q3282637 is Q3282637\nwd:Q629819 is Q629819\nwd:Q1216566 is Q1216566\nwdt:P106 is P106\nwd:Q600762 is Q600762\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q629819 wdt:P106* ?productionRole .\",\n    \"?productionRole wdt:P57 Q3282637 ;\",\n    \"wdt:P344/Q600762/Q1216566/Q283699 .\",\n    \"BIND(EXISTS { ?productionRole } AS ?result)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { Q629819 wdt:P106* ?productionRole . ?productionRole wdt:P57 Q3282637 ; wdt:P344/Q600762/Q1216566/Q283699 . BIND(EXISTS { ?productionRole } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4071 is P57\nkg:8725 is Q283699\nkg:9888 is Q3282637\nkg:4908 is Q629819\nkg:1310 is Q1216566\nkg:3539 is P106\nkg:2996 is Q600762\nkg:3561 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:4071 kg:3561 kg:8725 ;\",\n    \"kg:3539 [ kg:p106*/kg:3561* kg:9888 ] .\",\n    \"?result bool:equalTo \\\"true\\\"\"\n    ]}", "normal_query": "SELECT ?result WHERE { kg:4071 kg:3561 kg:8725 ; kg:3539 [ kg:p106*/kg:3561* kg:9888 ] . ?result bool:equalTo \"true\" LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?actor wdt:P161 ?film .\",\n    \"  ?film wdt:P3459 \\\"Six Men Getting Sick\\\" ;\",\n    \"        wdt:P3459 \\\"Inland Empire\\\" ;\",\n    \"        wdt:P3459 \\\"Darkened Room\\\" ;\",\n    \"        wdt:P3459 \\\"Rabbits\\\" .\",\n    \"  ?actor wdt:P106/wdt:P279* ?role .\",\n    \"  FILTER(?role IN (wd:Q87669, wd:Q11349, wd:Q11350))\",\n    \"  BIND(EXISTS{?actor wdt:P3459 \\\"Six Men Getting Sick\\\"} AS ?cinematography)\",\n    \"  BIND(EXISTS{?actor wdt:P3459 \\\"Inland Empire\\\"} AS ?directorship)\",\n    \"  BIND(?cinematography && ?directorship AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?actor wdt:P161 ?film . ?film wdt:P3459 \"Six Men Getting Sick\" ; wdt:P3459 \"Inland Empire\" ; wdt:P3459 \"Darkened Room\" ; wdt:P3459 \"Rabbits\" . ?actor wdt:P106/wdt:P279* ?role . FILTER(?role IN (wd:Q87669, wd:Q11349, wd:Q11350)) BIND(EXISTS{?actor wdt:P3459 \"Six Men Getting Sick\"} AS ?cinematography) BIND(EXISTS{?actor wdt:P3459 \"Inland Empire\"} AS ?directorship) BIND(?cinematography && ?directorship AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwd:Q862058 is Q862058\nwd:Q33999 is Q33999\nwd:Q1473406 is Q1473406\nwdt:P106 is P106\nwd:Q3485595 is Q3485595\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"Q3016313 wdt:P106 wd:Q3485595 ;\",\n    \"(wdt:P344 ?film1) ;\",\n    \"(wdt:P344 ?film2) ;\",\n    \"(wdt:P344 ?film3) ;\",\n    \"(wdt:P344 ?film4).\",\n    \"VALUES ?film1 { wd:Q862058 }.\",\n    \"VALUES ?film2 { wd:Q33999 }.\",\n    \"VALUES ?film3 { wd:Q1473406 }.\",\n    \"VALUES ?film4 { wd:Q3016313 }.\",\n    \"?result bool(?film1 && ?film2 && ?film3 && ?film4)\"\n    ]\n  }\n ", "normal_query": "SELECT ?result WHERE { Q3016313 wdt:P106 wd:Q3485595 ; (wdt:P344 ?film1) ; (wdt:P344 ?film2) ; (wdt:P344 ?film3) ; (wdt:P344 ?film4). VALUES ?film1 { wd:Q862058 }. VALUES ?film2 { wd:Q33999 }. VALUES ?film3 { wd:Q1473406 }. VALUES ?film4 { wd:Q3016313 }. ?result bool(?film1 && ?film2 && ?film3 && ?film4) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9478 is P57\nkg:3132 is Q3016313\nkg:3143 is Q862058\nkg:2739 is Q33999\nkg:3781 is Q1473406\nkg:8346 is P106\nkg:1553 is Q3485595\nkg:7046 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?film kg:2739 \\\"Six Men Getting Sick\\\" ;\",\n           \"kg:2739 \\\"Inland Empire\\\" ;\",\n           \"kg:2739 \\\"Darkened Room\\\" ;\",\n           \"kg:2739 \\\"Rabbits\\\" .\",\n      \"?person kg:8346 ?film ;\",\n           \"kg:1553 ?role .\",\n      \"FILTER(?role IN (kg:3132, kg:3143))\",\n    \"}\",\n    \"BIND(EXISTS { SELECT WHERE { ... } } AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film kg:2739 \"Six Men Getting Sick\" ; kg:2739 \"Inland Empire\" ; kg:2739 \"Darkened Room\" ; kg:2739 \"Rabbits\" . ?person kg:8346 ?film ; kg:1553 ?role . FILTER(?role IN (kg:3132, kg:3143)) } BIND(EXISTS { SELECT WHERE { ... } } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P50 ?person ;\",\n    \"wdt:P648 ?person ;\",\n    \"wdt:P31/wdt:P279* wd:Q11424.\" ,\n    \"?person wdt:P39 ?role.\",\n    \"FILTER(?role IN (wd:Q16501, wd:Q16502, wd:Q16503)).\",\n    \"VALUES ?person { wd:Q7852 wd:Q40621 wd:Q109655 }\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P50 ?person ; wdt:P648 ?person ; wdt:P31/wdt:P279* wd:Q11424. ?person wdt:P39 ?role. FILTER(?role IN (wd:Q16501, wd:Q16502, wd:Q16503)). VALUES ?person { wd:Q7852 wd:Q40621 wd:Q109655 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P57 wd:Q452794 ;\",\n\t\t\"   wdt:P58 wd:Q363666 ;\",\n\t\t\"   wdt:P1431 wd:Q448604 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P57 wd:Q452794 ; wdt:P58 wd:Q363666 ; wdt:P1431 wd:Q448604 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7550 is P57\nkg:3916 is P58\nkg:0608 is P1431\nkg:2546 is Q452794\nkg:2101 is Q363666\nkg:6010 is Q448604", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:isP57 kg:2546 ;\",\n\t\t\t\t\"kg:isP58 kg:3916 ;\",\n\t\t\t\t\"kg:isP1431 kg:0608 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:isP57 kg:2546 ; kg:isP58 kg:3916 ; kg:isP1431 kg:0608 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?film ?role\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" ,\n      \"?person wdt:P735 \\\"Ole John\\\"@en , \\\"Jens Jørgen Thorsen\\\"@en , \\\"Jørgen Leth\\\"@en.\" ,\n      \"?film wdt:P31/wdt/P136* ?role ;\",\n      \"   p:P31/ps:P31 wd:Q11424.\" ,\n      \"?statement ?rank ?film.\" ,\n      \"?person ?statement ?film.\" ,\n      \"?statement wdt:P50 ?role.\" ,\n    \"}\",\n    \"ORDER BY ?person\"\n  ]\n}", "normal_query": "SELECT ?person ?film ?role WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P735 \"Ole John\"@en , \"Jens Jørgen Thorsen\"@en , \"Jørgen Leth\"@en. ?film wdt:P31/wdt/P136* ?role ; p:P31/ps:P31 wd:Q11424. ?statement ?rank ?film. ?person ?statement ?film. ?statement wdt:P50 ?role. } ORDER BY ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"Q35979475 wdt:P1040 ?resource.\",\n    \"FILTER(?resource IN (wd:Q1687239, wd:Q562108))\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { Q35979475 wdt:P1040 ?resource. FILTER(?resource IN (wd:Q1687239, wd:Q562108)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5641 is P57\nkg:6051 is P58\nkg:4443 is P1040\nkg:1920 is Q35979475\nkg:8040 is Q1687239\nkg:4465 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person1 kg:P57 kg:1920 ;\",\n       \"kg:P58 kg:8040 ;\",\n       \"kg:P1040 kg:4465 .\",\n    \"?person2 kg:P57 kg:1920 ;\",\n       \"kg:P58 kg:8040 ;\",\n       \"kg:P1040 kg:4465 .\",\n    \"?person3 kg:P57 kg:1920 ;\",\n       \"kg:P58 kg:8040 ;\",\n       \"kg:P1040 kg:4465 .\",\n    \"?person1 ?property1 ?resource ;\",\n    \"?person2 ?property2 ?resource ;\",\n    \"?person3 ?property3 ?resource .\",\n    \"FILTER(?property1 = kg:P57 || ?property1 = kg:P58 || ?property1 = kg:P1040)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person1 kg:P57 kg:1920 ; kg:P58 kg:8040 ; kg:P1040 kg:4465 . ?person2 kg:P57 kg:1920 ; kg:P58 kg:8040 ; kg:P1040 kg:4465 . ?person3 kg:P57 kg:1920 ; kg:P58 kg:8040 ; kg:P1040 kg:4465 . ?person1 ?property1 ?resource ; ?person2 ?property2 ?resource ; ?person3 ?property3 ?resource . FILTER(?property1 = kg:P57 || ?property1 = kg:P58 || ?property1 = kg:P1040) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wdt:P3457 'Grindhouse'.\",\n    \"  ?film wdt:P61 [wdt:P2860 ?person].\",\n    \"  VALUES ?person { wd:Q9507 wd:Q11600 wd:Q11601 wd:Q61834 wd:Q11602 }.\",\n    \"  BIND(EXISTS{?film wdt:P61 [wdt:P2860 ?person]} AS ?result).\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film wdt:P3457 'Grindhouse'. ?film wdt:P61 [wdt:P2860 ?person]. VALUES ?person { wd:Q9507 wd:Q11600 wd:Q11601 wd:Q61834 wd:Q11602 }. BIND(EXISTS{?film wdt:P61 [wdt:P2860 ?person]} AS ?result). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q522057 is Q522057\nwdt:P58 is P58\nwd:Q679023 is Q679023\nwd:Q358714 is Q358714\nwd:Q298255 is Q298255\nwd:Q3772 is Q3772", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q3772 wdt:P57/wdt:P58* ?director .\",\n    \"?director wdt:P1476 \\\"Eli Roth\\\" ;\",\n              \"wdt:P1476 \\\"Edgar Wright\\\" ;\",\n              \"wdt:P1476 \\\"Rob Zombie\\\" ;\",\n              \"wdt:P1476 \\\"Quentin Tarantino\\\" ;\",\n              \"wdt:P1476 \\\"Robert Rodriguez\\\" .\",\n    \"BIND(EXISTS{?director wdt:P1476 \\\"Eli Roth\\\"} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q3772 wdt:P57/wdt:P58* ?director . ?director wdt:P1476 \"Eli Roth\" ; wdt:P1476 \"Edgar Wright\" ; wdt:P1476 \"Rob Zombie\" ; wdt:P1476 \"Quentin Tarantino\" ; wdt:P1476 \"Robert Rodriguez\" . BIND(EXISTS{?director wdt:P1476 \"Eli Roth\"} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9202 is P57\nkg:3784 is Q47284\nkg:1714 is Q522057\nkg:1677 is P58\nkg:4939 is Q679023\nkg:8504 is Q358714\nkg:8863 is Q298255\nkg:1368 is Q3772", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:9202 kg:1677+ [ kg:4939 ; kg:8504 ; kg:8863 ; kg:3784 ; kg:1714 ] .\",\n      \"?movie kg:1368 kg:9202 .\",\n      \"BIND(EXISTS { ?person kg:5 a [ kg:522057 ] } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:9202 kg:1677+ [ kg:4939 ; kg:8504 ; kg:8863 ; kg:3784 ; kg:1714 ] . ?movie kg:1368 kg:9202 . BIND(EXISTS { ?person kg:5 a [ kg:522057 ] } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?filmProducer wdt:P31 wd:Q11424 ;\", \"# Film producer instance of person\",\n    \"  OPTIONAL {\",\n    \"    ?filmProducer wdt:P577 \\\"Katzelmacher\\\" .\",\n    \"    ?filmProducer wdt:P577 \\\"Lili Marleen\\\" .\",\n    \"    ?filmProducer wdt:P577 \\\"Whity\\\" .\",\n    \"    ?filmProducer wdt:P577 \\\"The Niklashausen Journey\\\" .\",\n    \"  } UNION {\",\n    \"    ?filmProducer wdt:P106/wdt:P279* wd:Q11424 ;\", \"# Film producer or subclass of film producer\",\n    \"    OPTIONAL {\",\n    \"      ?filmProducer wdt:P577 \\\"Katzelmacher\\\" .\",\n    \"      ?filmProducer wdt:P577 \\\"Lili Marleen\\\" .\",\n    \"      ?filmProducer wdt:P577 \\\"Whity\\\" .\",\n    \"      ?filmProducer wdt:P577 \\\"The Niklashausen Journey\\\" .\",\n    \"    }\",\n    \"  }\",\n    \"  BIND(EXISTS { ?filmProducer wdt:P577 \\\"Katzelmacher\\\" . } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?filmProducer wdt:P31 wd:Q11424 ; OPTIONAL { ?filmProducer wdt:P577 \"Katzelmacher\" . ?filmProducer wdt:P577 \"Lili Marleen\" . ?filmProducer wdt:P577 \"Whity\" . ?filmProducer wdt:P577 \"The Niklashausen Journey\" . } UNION { ?filmProducer wdt:P106/wdt:P279* wd:Q11424 ; OPTIONAL { ?filmProducer wdt:P577 \"Katzelmacher\" . ?filmProducer wdt:P577 \"Lili Marleen\" . ?filmProducer wdt:P577 \"Whity\" . ?filmProducer wdt:P577 \"The Niklashausen Journey\" . } } BIND(EXISTS { ?filmProducer wdt:P577 \"Katzelmacher\" . } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q567519 is Q567519\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwd:Q3282637 is Q3282637\nwd:Q327427 is Q327427\nwd:Q686125 is Q686125\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q567519 wdt:P106 ?producer .\",\n    \"?producer wdt:P58 wd:Q2789885 ;\",\n    \"   wdt:P58 wd:Q3282637 ;\",\n    \"   wdt:P58 wd:Q327427 ;\",\n    \"   wdt:P58 wd:Q686125 .\",\n    \"}\",\n    \"BIND(EXISTS { SELECT ?producer WHERE {\",\n    \"wd:Q567519 wdt:P106 ?producer .\",\n    \"?producer wdt:P58 wd:Q2789885 ;\",\n    \"   wdt:P58 wd:Q3282637 ;\",\n    \"   wdt:P58 wd:Q327427 ;\",\n    \"   wdt:P58 wd:Q686125 .\",\n    \"} } AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q567519 wdt:P106 ?producer . ?producer wdt:P58 wd:Q2789885 ; wdt:P58 wd:Q3282637 ; wdt:P58 wd:Q327427 ; wdt:P58 wd:Q686125 . } BIND(EXISTS { SELECT ?producer WHERE { wd:Q567519 wdt:P106 ?producer . ?producer wdt:P58 wd:Q2789885 ; wdt:P58 wd:Q3282637 ; wdt:P58 wd:Q327427 ; wdt:P58 wd:Q686125 . } } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3945 is Q567519\nkg:0639 is P58\nkg:2555 is P1040\nkg:6905 is Q2789885\nkg:0359 is Q3282637\nkg:2936 is Q327427\nkg:7970 is Q686125\nkg:1724 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:3945 kg:0639+ kg:2555 ;\",\n    \"kg:0639+ [ kg:1724 kg:6905 ] .\",\n    \"FILTER EXISTS { kg:3945 kg:0639+ [ kg:2936 kg:7970 ] }\",\n    \"?result BOOLEAN\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:3945 kg:0639+ kg:2555 ; kg:0639+ [ kg:1724 kg:6905 ] . FILTER EXISTS { kg:3945 kg:0639+ [ kg:2936 kg:7970 ] } ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16408 ;\",\n    \"    wdt:P50|wdt:P51|wdt:P52 [\",\n    \"      wdt:P2658 ?director ;\",\n    \"      wdt:P2659 ?writer\",\n    \"    ] .\",\n    \"  FILTER (regex(str(?director), \\\"Thomas Schnauz\\\", \\\"i\\\") && regex(str(?writer), \\\"Peter Gould\\\", \\\"i\\\")) ||\",\n    \"         FILTER (regex(str(?director), \\\"George Mastras\\\", \\\"i\\\") && regex(str(?writer), \\\"Sam Catlin\\\", \\\"i\\\")) ||\",\n    \"         FILTER (regex(str(?director), \\\"Vince Gilligan\\\", \\\"i\\\") && regex(str(?writer), \\\"Vince Gilligan\\\", \\\"i\\\"))\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16408 ; wdt:P50|wdt:P51|wdt:P52 [ wdt:P2658 ?director ; wdt:P2659 ?writer ] . FILTER (regex(str(?director), \"Thomas Schnauz\", \"i\") && regex(str(?writer), \"Peter Gould\", \"i\")) || FILTER (regex(str(?director), \"George Mastras\", \"i\") && regex(str(?writer), \"Sam Catlin\", \"i\")) || FILTER (regex(str(?director), \"Vince Gilligan\", \"i\") && regex(str(?writer), \"Vince Gilligan\", \"i\")) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwdt:P58 is P58\nwd:Q7407299 is Q7407299\nwd:Q4500 is Q4500\nwd:Q7174311 is Q7174311\nwd:Q15042700 is Q15042700", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P57 wd:Q5542223 ;\",\n             \"wdt:P58 wd:Q7407299 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q5542223 ; wdt:P58 wd:Q7407299 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4460 is Q5542223\nkg:7695 is P57\nkg:0529 is P58\nkg:3781 is Q7407299\nkg:4994 is Q4500\nkg:1978 is Q7174311\nkg:6138 is Q15042700", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:7695 kg:4460 ;\",\n           \"kg:0529 kg:3781.\",\n      \"kg:4460 kg:1978 \\\"Thomas Schnauz\\\" ;\",\n           \"kg:1978 \\\"Peter Gould\\\" ;\",\n           \"kg:1978 \\\"George Mastras\\\" ;\",\n           \"kg:1978 \\\"Sam Catlin\\\" ;\",\n           \"kg:1978 \\\"Vince Gilligan\\\".\",\n      \"kg:3781 kg:4500 \\\"directed by and written by\\\".\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7695 kg:4460 ; kg:0529 kg:3781. kg:4460 kg:1978 \"Thomas Schnauz\" ; kg:1978 \"Peter Gould\" ; kg:1978 \"George Mastras\" ; kg:1978 \"Sam Catlin\" ; kg:1978 \"Vince Gilligan\". kg:3781 kg:4500 \"directed by and written by\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501 .\",\n    \"  OPTIONAL { ?resource wdt:P345 ?director . }\",\n    \"  FILTER NOT EXISTS { ?resource wdt:P345 ?director . }\",\n    \"  OPTIONAL { ?resource wdt:P50 ?writer . }\",\n    \"  FILTER NOT EXISTS { ?resource wdt:P50 ?writer . }\",\n    \"  OPTIONAL { ?resource wdt:P731 ?editor . }\",\n    \"  FILTER NOT EXISTS { ?resource wdt:P731 ?editor . }\",\n    \"  BIND( CONCAT( STR(?director), ' ', STR(?writer), ' ', STR(?editor) ) AS ?name )\",\n    \"  FILTER ( ?name = \\\"Ole John , Jens Jørgen Thorsen , Jørgen Leth\\\" )\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16501 . OPTIONAL { ?resource wdt:P345 ?director . } FILTER NOT EXISTS { ?resource wdt:P345 ?director . } OPTIONAL { ?resource wdt:P50 ?writer . } FILTER NOT EXISTS { ?resource wdt:P50 ?writer . } OPTIONAL { ?resource wdt:P731 ?editor . } FILTER NOT EXISTS { ?resource wdt:P731 ?editor . } BIND( CONCAT( STR(?director), ' ', STR(?writer), ' ', STR(?editor) ) AS ?name ) FILTER ( ?name = \"Ole John , Jens Jørgen Thorsen , Jørgen Leth\" ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q1687239 ;\",\n \t\t\"   wdt:P58 wd:Q562108 ;\",\n \t\t\"   wdt:P1040 [\",\n \t\t\"      wdt:P1040 wd:Q35979475\"\n \t\t] }\n", "normal_query": "?work wdt:P57 wd:Q1687239 ; wdt:P58 wd:Q562108 ; wdt:P1040 [ wdt:P1040 wd:Q35979475 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5082 is P57\nkg:6675 is P58\nkg:8124 is P1040\nkg:5707 is Q35979475\nkg:5209 is Q1687239\nkg:1825 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5707 ?director .\",\n      \"?resource kg:6675 ?writer .\",\n      \"?resource kg:8124 ?editor .\",\n      \"?director kg:5209 kg:5707 .\",\n      \"?writer kg:5209 kg:6675 .\",\n      \"?editor kg:5209 kg:8124 .\",\n      \"FILTER (STR(?director) = 'Ole John' && STR(?writer) = 'Jens Jørgen Thorsen' && STR(?editor) = 'Jørgen Leth')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5707 ?director . ?resource kg:6675 ?writer . ?resource kg:8124 ?editor . ?director kg:5209 kg:5707 . ?writer kg:5209 kg:6675 . ?editor kg:5209 kg:8124 . FILTER (STR(?director) = 'Ole John' && STR(?writer) = 'Jens Jørgen Thorsen' && STR(?editor) = 'Jørgen Leth') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film1 wdt:P3459 wd:Q20867;\",\n    \"         wdt:P166 wd:Q11926.\",\n    \"  ?film2 wdt:P3459 wd:Q20867;\",\n    \"         wdt:P166 wd:Q11926.\",\n    \"  ?film3 wdt:P3459 wd:Q20867;\",\n    \"         wdt:P166 wd:Q11926.\",\n    \"  ?film4 wdt:P3459 wd:Q20867;\",\n    \"         wdt:P166 wd:Q11926.\",\n    \"  FILTER NOT EXISTS { ?film4 wdt:P3459 wd:Q12345 } # Replace wd:Q12345 with the Wikidata item for 'Star Whores' if available\",\n    \"  BIND(TRUE AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{ SELECT FALSE AS ?result }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film1 wdt:P3459 wd:Q20867; wdt:P166 wd:Q11926. ?film2 wdt:P3459 wd:Q20867; wdt:P166 wd:Q11926. ?film3 wdt:P3459 wd:Q20867; wdt:P166 wd:Q11926. ?film4 wdt:P3459 wd:Q20867; wdt:P166 wd:Q11926. FILTER NOT EXISTS { ?film4 wdt:P3459 wd:Q12345 } BIND(TRUE AS ?result) } UNION { SELECT FALSE AS ?result } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwd:Q3968346 is Q3968346\nwd:Q7042855 is Q7042855\nwdt:P106 is P106\nwd:Q17738 is Q17738\nwd:Q165713 is Q165713", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (COUNT(?film) AS ?result) WHERE { ?person wdt:P106 wd:Q17738 ; wdt:P58/wdt:P1431* wd:Q181803. VALUES ?film { wd:Q3968346 wd:Q7042855 } FILTER NOT EXISTS { ?person wdt:P58/wdt:P1431* wd:Q165713 } } LIMIT 1 ]\",\n\t\"booleanResult\" ]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (COUNT(?film) AS ?result) WHERE { ?person wdt:P106 wd:Q17738 ; wdt:P58/wdt:P1431* wd:Q181803. VALUES ?film { wd:Q3968346 wd:Q7042855 } FILTER NOT EXISTS { ?person wdt:P58/wdt:P1431* wd:Q165713 } } LIMIT 1 ] booleanResult", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0430 is P58\nkg:5508 is P1431\nkg:9666 is Q181803\nkg:2161 is Q3968346\nkg:0828 is Q7042855\nkg:5789 is P106\nkg:9317 is Q17738\nkg:6932 is Q165713", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:2161 kg:5789 kg:9666 ;\",\n    \"(kg:0430 kg:P58* / kg:5508 kg:P1431*)* ;\",\n    \"kg:6932 kg:Q3968346 ;\",\n    \"kg:9317 kg:Q7042855.\",\n    \"?result BOOLEAN\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:2161 kg:5789 kg:9666 ; (kg:0430 kg:P58* / kg:5508 kg:P1431*)* ; kg:6932 kg:Q3968346 ; kg:9317 kg:Q7042855. ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105928 wdt:P3064 ?director .\",\n    \"  wd:Q105928 wdt:P735 ?editor .\",\n    \"  wd:Q105928 wdt:P50 ?writer .\",\n    \"  BIND(EXISTS{?director} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q105928 wdt:P3064 ?director . wd:Q105928 wdt:P735 ?editor . wd:Q105928 wdt:P50 ?writer . BIND(EXISTS{?director} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q20729551 wdt:P57 [ wdt:P1040 wd:Q35979475 ] ; wdt:P58 [ wdt:P1040 wd:Q1687239 ] ; wdt:P57 [ wdt:P1040 wd:Q562108 ]. BIND ( true AS ?result ) } UNION { wd:Q20729551 wdt:P57 [] ; wdt:P58 [] ; wdt:P57 []. BIND ( false AS ?result ) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q20729551 wdt:P57 [ wdt:P1040 wd:Q35979475 ] ; wdt:P58 [ wdt:P1040 wd:Q1687239 ] ; wdt:P57 [ wdt:P1040 wd:Q562108 ]. BIND ( true AS ?result ) } UNION { wd:Q20729551 wdt:P57 [] ; wdt:P58 [] ; wdt:P57 []. BIND ( false AS ?result ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9716 is P57\nkg:7986 is Q20729551\nkg:6656 is P1040\nkg:1606 is P58\nkg:2369 is Q35979475\nkg:1743 is Q1687239\nkg:5837 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:9716 kg:1606 kg:7986 ;\",\n    \"kg:9716 kg:5837 kg:2369 ;\",\n    \"kg:9716 kg:6656 kg:1743 .\",\n    \"BIND(TRUE AS ?result)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:9716 kg:1606 kg:7986 ; kg:9716 kg:5837 kg:2369 ; kg:9716 kg:6656 kg:1743 . BIND(TRUE AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P57 ?writer;\",\n      \"wdt:P3078 ?cinematographer.\",\n      \"{SELECT ?title WHERE {SERVICE wikibase:label {bd:serviceParam wikibase:language \\\"en\\\".}} FILTER(?title = 'Anyone Lived in a Pretty How Town , 1:42.08' || ?title = 'Look at Life')}\",\n      \"UNION\",\n      \"?work wdt:P644 ?episode.\",\n      \"{SELECT ?episode WHERE {SERVICE wikibase:label {bd:serviceParam wikibase:language \\\"en\\\".}} FILTER(?episode = 'Star Wars: Episode I – The Phantom Menace' || ?episode = 'The Land Before Time')}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?work wdt:P31/wdt:P279* wd:Q11424; wdt:P57 ?writer; wdt:P3078 ?cinematographer. {SELECT ?title WHERE {SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}} FILTER(?title = 'Anyone Lived in a Pretty How Town , 1:42.08' || ?title = 'Look at Life')} UNION ?work wdt:P644 ?episode. {SELECT ?episode WHERE {SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}} FILTER(?episode = 'Star Wars: Episode I – The Phantom Menace' || ?episode = 'The Land Before Time')} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1869678 is Q1869678\nwd:Q208910 is Q208910\nwd:Q192403 is Q192403\nwd:Q165713 is Q165713\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?writer ?cinematographer\",\n\t\t\"WHERE {\",\n\t\t\t\"?work wdt:P58 ?writer ;\",\n\t\t\t\t\"wdt:P1431 ?cinematographer .\",\n\t\t\t\"{ SELECT ?work WHERE { ?work wdt:P344 wd:Q613974 } LIMIT 1 } UNION { SELECT ?work WHERE { ?work wdt:P344 wd:Q1869678 } LIMIT 1 } UNION { SELECT ?work WHERE { ?work wdt:P344 wd:Q208910 } LIMIT 1 }\",\n\t\t\t\"?work wdt:P344 wd:Q192403 ;\",\n\t\t\t\t\"wdt:P344 wd:Q165713 .\"\n\t\t]}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?work wdt:P58 ?writer ; wdt:P1431 ?cinematographer . { SELECT ?work WHERE { ?work wdt:P344 wd:Q613974 } LIMIT 1 } UNION { SELECT ?work WHERE { ?work wdt:P344 wd:Q1869678 } LIMIT 1 } UNION { SELECT ?work WHERE { ?work wdt:P344 wd:Q208910 } LIMIT 1 } ?work wdt:P344 wd:Q192403 ; wdt:P344 wd:Q165713 .", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9116 is P58\nkg:3555 is P1431\nkg:6043 is Q613974\nkg:8219 is Q1869678\nkg:4372 is Q208910\nkg:2481 is Q192403\nkg:7563 is Q165713\nkg:8581 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:isP58 ?writer .\",\n      \"?resource kg:isP1431 ?cinematographer .\",\n      \"?work kg:isQ6043 ?anyoneLivedInAPrettyHowTown .\",\n      \"?work kg:isQ8219 ?starWarsEpisodeI .\",\n      \"?production kg:isQ4372 \\\"Executive Producer\\\" ;\",\n        \"kg:isP344 ?resource .\",\n      \"?anyoneLivedInAPrettyHowTown kg:isP58 ?writer .\",\n      \"?anyoneLivedInAPrettyHowTown kg:isP1431 ?cinematographer .\",\n      \"?starWarsEpisodeI kg:isQ2481 \\\"The Phantom Menace\\\" ;\",\n      \"?starWarsEpisodeI kg:isQ7563 \\\"Episode I – The Phantom Menace\\\" ;\",\n      \"?production kg:isQ8581 \\\"Look at Life\\\"\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:isP58 ?writer . ?resource kg:isP1431 ?cinematographer . ?work kg:isQ6043 ?anyoneLivedInAPrettyHowTown . ?work kg:isQ8219 ?starWarsEpisodeI . ?production kg:isQ4372 \"Executive Producer\" ; kg:isP344 ?resource . ?anyoneLivedInAPrettyHowTown kg:isP58 ?writer . ?anyoneLivedInAPrettyHowTown kg:isP1431 ?cinematographer . ?starWarsEpisodeI kg:isQ2481 \"The Phantom Menace\" ; ?starWarsEpisodeI kg:isQ7563 \"Episode I – The Phantom Menace\" ; ?production kg:isQ8581 \"Look at Life\" } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P577 \\\"Uzak\\\";\",\n    \"?film wdt:P69 ?producer.\",\n    \"?producer wdt:P106/wdt:P279* wd:Q8751999.\",\n    \"OPTIONAL { ?film wdt:P577 \\\"Clouds of May\\\". }\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?film wdt:P577 \\\"Clouds of May\\\". }\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424; ?film wdt:P577 \"Uzak\"; ?film wdt:P69 ?producer. ?producer wdt:P106/wdt:P279* wd:Q8751999. OPTIONAL { ?film wdt:P577 \"Clouds of May\". } } FILTER NOT EXISTS { ?film wdt:P577 \"Clouds of May\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwd:Q3282637 is Q3282637\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P1431 wd:Q3282637 ;\",\n    \"   wdt:P106 wd:Q2086445 .\",\n    \"?person wdt:P57 ?film ;\",\n    \"   wdt:P1040 ?film ;\",\n    \"   wdt:P1431 ?film ;\",\n    \"   wdt:P58 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P1431 wd:Q3282637 ; wdt:P106 wd:Q2086445 . ?person wdt:P57 ?film ; wdt:P1040 ?film ; wdt:P1431 ?film ; wdt:P58 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2660 is Q2086445\nkg:5229 is P57\nkg:2992 is P58\nkg:9361 is P1040\nkg:4866 is P1431\nkg:8435 is Q1361018\nkg:2196 is Q3282637\nkg:9511 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:4866 kg:8435. \",\n      \"?resource kg:2992 kg:2660. \",\n      \"?resource kg:5229 kg:2196. \",\n      \"?resource kg:9361 kg:9511. \",\n      \"?resource kg:9361 kg:3487. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4866 kg:8435. ?resource kg:2992 kg:2660. ?resource kg:5229 kg:2196. ?resource kg:9361 kg:9511. ?resource kg:9361 kg:3487. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102985 wdt:P57 wdt:P3186 ?director ;\",\n    \"               wdt:P644 ?writer ;\",\n    \"               wdt:P101 ?producer .\",\n    \"  FILTER(?director IN (wd:Q102985, wd:Q102985, wd:Q102985))\",\n    \"  FILTER(?writer IN (wd:Q102985, wd:Q102985, wd:Q102985))\",\n    \"  FILTER(?producer IN (wd:Q102985, wd:Q102985, wd:Q102985))\",\n    \"  BIND(1 AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{ SELECT ?result WHERE { VALUES ?result { 0 } } }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102985 wdt:P57 wdt:P3186 ?director ; wdt:P644 ?writer ; wdt:P101 ?producer . FILTER(?director IN (wd:Q102985, wd:Q102985, wd:Q102985)) FILTER(?writer IN (wd:Q102985, wd:Q102985, wd:Q102985)) FILTER(?producer IN (wd:Q102985, wd:Q102985, wd:Q102985)) BIND(1 AS ?result) } UNION { SELECT ?result WHERE { VALUES ?result { 0 } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q452794 wdt:P57* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P58* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P1431* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . BIND ( 1 AS ?result ) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q452794 wdt:P57* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P58* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P1431* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . BIND ( 1 AS ?result ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3353 is P57\nkg:7474 is P58\nkg:1852 is P1431\nkg:5523 is Q452794\nkg:9322 is Q363666\nkg:1280 is Q448604\nkg:5960 is Q497256", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:5523 kg:1852 [ kg:3353 \\\"Jim Abrahams\\\" ;\",\n    \"kg:7474 \\\"Jerry Zucker\\\" ;\",\n    \"kg:1280 \\\"David Zucker\\\" ] .\",\n    \"?result boolean .\"\n    ]}\n ", "normal_query": "SELECT ?result WHERE { kg:5523 kg:1852 [ kg:3353 \"Jim Abrahams\" ; kg:7474 \"Jerry Zucker\" ; kg:1280 \"David Zucker\" ] . ?result boolean . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102985 wdt:P57 wdt:P361* ?director .\",\n    \"  FILTER(?director IN (wd:Q42221, wd:Q102982, wd:Q102983)) .\",\n    \"  FILTER NOT EXISTS { wd:Q102985 wdt:P677 ?executiveProducer } .\",\n    \"  BIND(true AS ?result) UNION BIND(false AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102985 wdt:P57 wdt:P361* ?director . FILTER(?director IN (wd:Q42221, wd:Q102982, wd:Q102983)) . FILTER NOT EXISTS { wd:Q102985 wdt:P677 ?executiveProducer } . BIND(true AS ?result) UNION BIND(false AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q452794 wdt:P57* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P1431* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . FILTER EXISTS { wd:Q452794 wdt:P58* wd:Q363666 } } ?result BIND(true AS ?result) UNION { FILTER NOT EXISTS { wd:Q452794 wdt:P57* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . wd:Q452794 wdt:P1431* ( wd:Q363666 | wd:Q448604 | wd:Q497256 ) . FILTER EXISTS { wd:Q452794 wdt:P58* wd:Q363666 } } } ?result BIND(false AS ?result) ]\"\n\t,\"default-graph-uri\" ,\"%s\"\n\t,\"from\" ,\"%s\"\n\t,\"where\" ,\"%s\"\n\t,\"limit\" ,\"1\"\n\t,\"format\" ,\"application/sparql-results+json\"\n\t,\"timeout\" ,\"60000\"\n\t,\"debug\" ,\"on\"\n\t,\"output\" ,\"boolean\"\n\t,\"base-uri\" ,\"%s\"\n\t,\"service-uris\" ,\"%s\"\n\t,\"graph-uris\" ,\"%s\"\n\t,\"values\" ,\"%s\"\n\t,\"order-by\" ,\"%s\"\n\t,\"group-by\" ,\"%s\"\n\t,\"having\" ,\"%s\"\n\t,\"offset\" ,\"0\"\n\t,\"return-type\" ,\"json\"\n\t,\"distinct\" ,\"false\"\n\t,\"as-ordered\" ,\"false\"\n\t,\"as-parallel\" ,\"false\"\n\t,\"as-samegraph\" ,\"false\"\n\t,\"as-subselect\" ,\"false\"\n\t,\"as-values\" ,\"%s\"\n\t,\"as-bgp\" ,\"true\"\n\t,\"as-fp\" ,\"false\"\n\t,\"as-named-graph\" ,\"false\"\n\t,\"as-union\" ,\"false\"\n\t,\"as-wildcard\" ,\"false\"\n\t,\"as-zip\" ,\"false\"\n\t,\"as-zip-merge\" ,\"false\"\n\t,\"as-zip-samegraph\" ,\"false\"\n\t,\"as-zip-subselect\" ,\"false\"\n\t,\"as-zip-values\" ,\"false\"\n\t,\"as-zip-wildcard\" ,\"false\"\n\t,\"as-zip-bgp\" ,\"false\"\n\t,\"as-zip-fp\" ,\"false\"\n\t,\"as-zip-named-graph\" ,\"false\"\n\t,\"as-zip-union\" ,\"false\"\n\t,\"as-zip-samegraph-subselect\" ,\"false\"\n\t,\"as-zip-samegraph-values\" ,\"false\"\n\t,\"as-zip-samegraph-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-bgp\" ,\"false\"\n\t,\"as-zip-samegraph-fp\" ,\"false\"\n\t,\"as-zip-samegraph-named-graph\" ,\"false\"\n\t,\"as-zip-samegraph-union\" ,\"false\"\n\t,\"as-zip-samegraph-subselect\" ,\"false\"\n\t,\"as-zip-samegraph-values-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-bgp-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-fp-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-named-graph-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-union-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-subselect-wildcard\" ,\"false\"\n\t,\"as-zip-samegraph-values-bgp\" ,\"false\"\n\t,\"as-zip-samegraph-values-fp\" ,\"false\"\n\t,\"as-zip-samegraph-values-named-graph\" ,\"false\"\n\t,\"as-zip-samegraph-values-union\" ,\"false\"\n\t,\"as-zip-samegraph-subselect-bgp\" ,\"false\"\n\t,\"as-zip-samegraph-subselect-fp\" ,\"false\"\n\t,\"as-zip-same", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0243 is P57\nkg:2589 is P58\nkg:2339 is P1431\nkg:0336 is Q452794\nkg:1474 is Q363666\nkg:4967 is Q448604\nkg:3598 is Q497256", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:0243 kg:P1431 kg:2339 ;\",\n    \"kg:2589 kg:P57 kg:0336 ;\",\n    \"kg:2589 kg:P58 kg:1474 ;\",\n    \"kg:2589 kg:P58* kg:4967 ;\",\n    \"?movie a dbo:Film ;\",\n    \"dbo:director ?director .\",\n    \"FILTER(?director IN (kg:2339, kg:0336, kg:1474, kg:4967))\",\n    \"BIND(TRUE AS ?result)\",\n    \"} UNION {\",\n    \"SELECT FALSE AS ?result WHERE {\",\n    \"NOT EXISTS {\",\n    \"kg:0243 kg:P1431 kg:2339 ;\",\n    \"kg:2589 kg:P57 kg:0336 ;\",\n    \"kg:2589 kg:P58 kg:1474 ;\",\n    \"kg:2589 kg:P58* kg:4967 ;\",\n    \"?movie a dbo:Film ;\",\n    \"dbo:director ?director .\",\n    \"FILTER(?director IN (kg:2339, kg:0336, kg:1474, kg:4967))\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:0243 kg:P1431 kg:2339 ; kg:2589 kg:P57 kg:0336 ; kg:2589 kg:P58 kg:1474 ; kg:2589 kg:P58* kg:4967 ; ?movie a dbo:Film ; dbo:director ?director . FILTER(?director IN (kg:2339, kg:0336, kg:1474, kg:4967)) BIND(TRUE AS ?result) } UNION { SELECT FALSE AS ?result WHERE { NOT EXISTS { kg:0243 kg:P1431 kg:2339 ; kg:2589 kg:P57 kg:0336 ; kg:2589 kg:P58 kg:1474 ; kg:2589 kg:P58* kg:4967 ; ?movie a dbo:Film ; dbo:director ?director . FILTER(?director IN (kg:2339, kg:0336, kg:1474, kg:4967)) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?director ?executiveProducer\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 ?writer ;\", \"# Twin Peaks: Fire Walk with Me\",\n      \"?film1 wdt:P6829 ?director ;\", \"# Twin Peaks: Fire Walk with Me\",\n      \"?film1 wdt:P1610 ?executiveProducer .\", \"# Twin Peaks: Fire Walk with Me\",\n      \"OPTIONAL {\",\n        \"?film2 wdt:P3457 ?writer ;\", \"# My Son, My Son, What Have Ye Done?\",\n        \"?film2 wdt:P6829 ?director ;\", \"# My Son, My Son, What Have Ye Done?\",\n        \"?film2 wdt:P1610 ?executiveProducer .\", \"# My Son, My Son, What Have Ye Done?\"\n      ,\n      \"FILTER NOT EXISTS {\",\n        \"?film3 wdt:P3457 ?writer ;\", \"# Surveillance\",\n        \"?film3 wdt:P6829 ?director ;\", \"# Surveillance\",\n        \"?film3 wdt:P1610 ?executiveProducer .\", \"# Surveillance\"\n      ]\n    }\n \t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t", "normal_query": "SELECT ?writer ?director ?executiveProducer WHERE { ?film1 wdt:P3457 ?writer ; ?film1 wdt:P6829 ?director ; ?film1 wdt:P1610 ?executiveProducer . OPTIONAL { ?film2 wdt:P3457 ?writer ; ?film2 wdt:P6829 ?director ; ?film2 wdt:P1610 ?executiveProducer . FILTER NOT EXISTS { ?film3 wdt:P3457 ?writer ; ?film3 wdt:P6829 ?director ; ?film3 wdt:P1610 ?executiveProducer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwd:Q583406 is Q583406\nwd:Q2085 is Q2085\nwd:Q1511905 is Q1511905", "response": "{\n \t\"query\": [\n  \t\t\"?person wdt:P57 wd:Q1140578 ;\",\n  \t\t\"    wdt:P58 wd:Q583406 ;\",\n  \t\t\"    wdt:P1431 wd:Q2085 .\"\n  \t]\n}", "normal_query": "?person wdt:P57 wd:Q1140578 ; wdt:P58 wd:Q583406 ; wdt:P1431 wd:Q2085 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0181 is P57\nkg:6994 is P58\nkg:7277 is P1431\nkg:0744 is Q1140578\nkg:2393 is Q583406\nkg:9999 is Q2085\nkg:4280 is Q1511905", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:P57 kg:0744 ;\",\n           \"kg:P58 kg:6994 ;\",\n           \"kg:P1431 kg:2393.\",\n      \"?otherResource kg:P1431 kg:9999 ;\",\n           \"kg:P58 kg:4280.\",\n      \"FILTER(?resource != ?otherResource)\"\n    ]\n  }\n", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:0744 ; kg:P58 kg:6994 ; kg:P1431 kg:2393. ?otherResource kg:P1431 kg:9999 ; kg:P58 kg:4280. FILTER(?resource != ?otherResource) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424806 ;\", \"# Film work\",\n    \"wdt:P50/wdt:P279* wd:Q11424806 .\", \"# Directed by person or organization\",\n    \"?film wdt:P50 ?director .\", \"# Link to director property\",\n    \"FILTER(?director IN (wd:Q13466, wd:Q1027994, wd:Q1028000, wd:Q1028001, wd:Q1028002))\" ,\"\\n# Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, Ingmar Bergman\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424806 ; wdt:P50/wdt:P279* wd:Q11424806 . ?film wdt:P50 ?director . FILTER(?director IN (wd:Q13466, wd:Q1027994, wd:Q1028000, wd:Q1028001, wd:Q1028002)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q982339 is Q982339\nwd:Q116760 is Q116760\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P31 is P31\nwd:Q7546 is Q7546\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q7546 ;\",\n       \"(wdt:P57/wdt:P58)* wd:Q982339 , wd:Q116760 , wd:Q11424 , wd:Q1033656 , wd:Q1365463 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q7546 ; (wdt:P57/wdt:P58)* wd:Q982339 , wd:Q116760 , wd:Q11424 , wd:Q1033656 , wd:Q1365463 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9278 is P57\nkg:9816 is Q982339\nkg:3993 is Q116760\nkg:9807 is Q11424\nkg:0020 is P58\nkg:6485 is Q1033656\nkg:2253 is P31\nkg:0524 is Q7546\nkg:9878 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:0020 kg:9816 ;\",\n    \"   kg:0524 kg:9878 ;\",\n    \"   kg:2253 [ kg:3993 kg:6485 ;\",\n    \"            kg:9278 kg:9807 ] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:0020 kg:9816 ; kg:0524 kg:9878 ; kg:2253 [ kg:3993 kg:6485 ; kg:9278 kg:9807 ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102685 wdt:P34 ?composer .\",\n    \"  wd:Q102685 wdt:P31/wdt:P279* wd:Q11424 .\",\n    \"  FILTER EXISTS { wd:Q102685 wdt:P161 ?director }\",\n    \"  FILTER EXISTS { wd:Q102685 wdt:P3285 ?cinematographer }\",\n    \"  BIND(EXISTS { wd:Q102685 wdt:P161 ?director } AS ?result)\",\n    \"  BIND(EXISTS { wd:Q102685 wdt:P3285 ?cinematographer } AS ?result)\"\n    ]\n  }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q102685 wdt:P34 ?composer . wd:Q102685 wdt:P31/wdt:P279* wd:Q11424 . FILTER EXISTS { wd:Q102685 wdt:P161 ?director } FILTER EXISTS { wd:Q102685 wdt:P3285 ?cinematographer } BIND(EXISTS { wd:Q102685 wdt:P161 ?director } AS ?result) BIND(EXISTS { wd:Q102685 wdt:P3285 ?cinematographer } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P86 is P86\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwd:Q550196 is Q550196\nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT (COUNT(?composer) AS ?result) WHERE { wd:Q550196 wdt:P57 ?composer. FILTER EXISTS { ?composer wdt:P86 wd:Q192115 } FILTER EXISTS { ?composer wdt:P86 wd:Q656357 } FILTER EXISTS { ?composer wdt:P86 wd:Q550196 } }]\",\n\t\"booleanResultBindingName\" ,\"%result\"\n\t]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT (COUNT(?composer) AS ?result) WHERE { wd:Q550196 wdt:P57 ?composer. FILTER EXISTS { ?composer wdt:P86 wd:Q192115 } FILTER EXISTS { ?composer wdt:P86 wd:Q656357 } FILTER EXISTS { ?composer wdt:P86 wd:Q550196 } }] booleanResultBindingName %result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9451 is P57\nkg:9960 is P86\nkg:4046 is Q192115\nkg:8643 is Q656357\nkg:8138 is Q550196\nkg:0619 is Q1653396\nkg:3757 is P161\nkg:2055 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:9451 kg:3757 kg:8643 ;\",\n    \"kg:2055 [ kg:p57*/kg:p86* kg:4046 ] .\",\n    \"OPTIONAL { kg:9451 kg:3757 kg:8138 ;\",\n    \"kg:2055 [ kg:p57*/kg:p86* kg:0619 ] } .\",\n    \"BIND(EXISTS{ kg:9451 kg:3757 kg:8138 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:9451 kg:3757 kg:8643 ; kg:2055 [ kg:p57*/kg:p86* kg:4046 ] . OPTIONAL { kg:9451 kg:3757 kg:8138 ; kg:2055 [ kg:p57*/kg:p86* kg:0619 ] } . BIND(EXISTS{ kg:9451 kg:3757 kg:8138 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?composer wdt:P57 \\\"A Woman of Paris\\\" ;\",\n    \"            wdt:P57 \\\"Pay Day\\\" .\",\n    \"  ?movie wdt:P161 ?composer ;\",\n    \"         wdt:P106/wdt:P279* \\\"editor\\\" ;\",\n    \"         wdt:P106/wdt:P279* \\\"star\\\" .\",\n    \"  VALUES ?movie { wd:Q134582 wd:Q134583 wd:Q134584 }\",\n    \"  BIND(EXISTS{?movie wdt:P161 ?composer ; wdt:P106/wdt:P279* \\\"editor\\\" ; wdt:P106/wdt:P279* \\\"star\\\"} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?composer wdt:P57 \"A Woman of Paris\" ; wdt:P57 \"Pay Day\" . ?movie wdt:P161 ?composer ; wdt:P106/wdt:P279* \"editor\" ; wdt:P106/wdt:P279* \"star\" . VALUES ?movie { wd:Q134582 wd:Q134583 wd:Q134584 } BIND(EXISTS{?movie wdt:P161 ?composer ; wdt:P106/wdt:P279* \"editor\" ; wdt:P106/wdt:P279* \"star\"} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P86 is P86\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwd:Q470895 is Q470895\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q3986814 wdt:P86 wd:Q199039 ;\",\n    \"  wdt:P1040 wd:Q470895 .\",\n    \"OPTIONAL {\",\n    \"  wd:Q3986814 wdt:P161 [ wdt:P279* wd:Q238211 ] ;\",\n    \"           wdt:P161 wd:Q45602 .\",\n    \"}\",\n    \"BIND(EXISTS { wd:Q3986814 wdt:P161 [ wdt:P279* wd:Q238211 ] } AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q3986814 wdt:P86 wd:Q199039 ; wdt:P1040 wd:Q470895 . OPTIONAL { wd:Q3986814 wdt:P161 [ wdt:P279* wd:Q238211 ] ; wdt:P161 wd:Q45602 . } BIND(EXISTS { wd:Q3986814 wdt:P161 [ wdt:P279* wd:Q238211 ] } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4080 is Q3986814\nkg:2193 is P86\nkg:5009 is P1040\nkg:7526 is Q199039\nkg:4213 is Q470895\nkg:0119 is Q238211\nkg:3653 is P161\nkg:4245 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:4080 kg:3653 kg:7526 ;\",\n    \"kg:2193 kg:5009 kg:470895 ;\",\n    \"kg:4213 kg:4245 kg:0119.\",\n    \"?result BOOLEAN.\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:4080 kg:3653 kg:7526 ; kg:2193 kg:5009 kg:470895 ; kg:4213 kg:4245 kg:0119. ?result BOOLEAN. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P3459 ?person .\",\n    \"?film wdt:P1207 ?person .\",\n    \"?film wdt:P688 ?person .\",\n    \"FILTER (BOUND(?person) && STRSTARTS(?person, \\\"Jim Abrahams\\\") || STRSTARTS(?person, \\\"Jerry Zucker\\\") || STRSTARTS(?person, \\\"David Zucker\\\"))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P3459 ?person . ?film wdt:P1207 ?person . ?film wdt:P688 ?person . FILTER (BOUND(?person) && STRSTARTS(?person, \"Jim Abrahams\") || STRSTARTS(?person, \"Jerry Zucker\") || STRSTARTS(?person, \"David Zucker\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwdt:P1431 is P1431\nwdt:P31 is P31\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film\",\n \t\t\"WHERE {\",\n \t\t\"?film wdt:P57 wd:Q11424 ;\",\n \t\t\"   wdt:P58 wd:Q11424 ;\",\n \t\t\"   wdt:P31 wd:Q452794 .\",\n \t\t\"?person wdt:P1431 ?film ;\",\n \t\t\"   wdt:P31 wd:Q363666 .\",\n \t\t\"VALUES ?person { wd:Q448604 }\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P58 wd:Q11424 ; wdt:P31 wd:Q452794 . ?person wdt:P1431 ?film ; wdt:P31 wd:Q363666 . VALUES ?person { wd:Q448604 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0541 is P57\nkg:9415 is Q11424\nkg:1517 is P58\nkg:2617 is P1431\nkg:0107 is P31\nkg:3259 is Q452794\nkg:4847 is Q363666\nkg:6735 is Q448604", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?person1 kg:P57* ?film.\",\n      \"?person2 kg:P57* ?film.\",\n      \"?person3 kg:P57* ?film.\",\n      \"?person1 kg:Q11424 kg:Q363666.\",\n      \"?person2 kg:Q11424 kg:Q363666.\",\n      \"?person3 kg:Q11424 kg:Q363666.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?person1 kg:P57* ?film. ?person2 kg:P57* ?film. ?person3 kg:P57* ?film. ?person1 kg:Q11424 kg:Q363666. ?person2 kg:Q11424 kg:Q363666. ?person3 kg:Q11424 kg:Q363666. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424865.\", \"# Film\",\n    \"  ?film wdt:P50 wd:Q1196976.\" , \"# Directed by Yūdai Yamaguchi\",\n    \"  ?film wdt:P52 wd:Q3042566.\" , \"# Written by Ernesto Díaz Espinoza\",\n    \"  ?film wdt:P800 wd:Q1975156.\" , \"# Edited by Adrián García Bogliano\",\n    \"  ?film wdt:P800 wd:Q2436956.\" ,\" # Edited by Yoshihiro Nishimura\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424865. ?film wdt:P50 wd:Q1196976. ?film wdt:P52 wd:Q3042566. ?film wdt:P800 wd:Q1975156. ?film wdt:P800 wd:Q2436956. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwd:Q5836844 is Q5836844\nwd:Q4023328 is Q4023328\nwd:Q5658534 is Q5658534", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 ?director ;\",\n\t\t\"   wdt:P58 ?writer ;\",\n\t\t\"   wdt:P1040 Q4022902. \",\n\t\t\"?director wd:Q5658534 \\\"Yūdai Yamaguchi\\\"@en .\",\n\t\t\"?writer wd:Q5836844 \\\"Ernesto Díaz Espinoza\\\"@en .\",\n\t\t\"?writer wd:Q4023328 \\\"Adrián García Bogliano\\\"@en .\",\n\t\t\"?writer wd:Q4023328 \\\"Yoshihiro Nishimura\\\"@en .\",\n\t\t\"FILTER EXISTS { ?film wdt:P1040 Q5658534 }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?director ; wdt:P58 ?writer ; wdt:P1040 Q4022902. ?director wd:Q5658534 \"Yūdai Yamaguchi\"@en . ?writer wd:Q5836844 \"Ernesto Díaz Espinoza\"@en . ?writer wd:Q4023328 \"Adrián García Bogliano\"@en . ?writer wd:Q4023328 \"Yoshihiro Nishimura\"@en . FILTER EXISTS { ?film wdt:P1040 Q5658534 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8693 is P57\nkg:0274 is P58\nkg:1344 is P1040\nkg:9251 is Q4022902\nkg:0833 is Q5836844\nkg:4265 is Q4023328\nkg:2821 is Q5658534", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:P57 ?resource ;\",\n    \"?writer kg:P58 ?resource ;\",\n    \"?editor kg:P1040 [ kg:is Q4022902 , kg:is Q5836844 , kg:is Q4023328 , kg:is Q5658534 ] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:P57 ?resource ; ?writer kg:P58 ?resource ; ?editor kg:P1040 [ kg:is Q4022902 , kg:is Q5836844 , kg:is Q4023328 , kg:is Q5658534 ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film editor wdt:P31/wdt:P279* wd:Q114246805 ;\",\n    \"    wdt:P577 ?date .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"  FILTER EXISTS {\",\n    \"    ?film editor wdt:P31/wdt:P279* wd:Q114246805 ;\",\n    \"      wdt:P710* wd:Q1004691 ;\",\n    \"      wdt:P800* wd:Q1004691 ;\",\n    \"      wdt:P710* wd:Q2340254 ;\",\n    \"      wdt:P800* wd:Q2340254 ;\",\n    \"      wdt:P710* wd:Q1004692 ;\",\n    \"      wdt:P800* wd:Q1004692 .\",\n    \"  }\",\n    \"  BIND(EXISTS { ?film editor wdt:P31/wdt:P279* wd:Q114246805 ; wdt:P710* wd:Q1004691 ; wdt:P800* wd:Q1004691 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film editor wdt:P31/wdt:P279* wd:Q114246805 ; wdt:P577 ?date . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } FILTER EXISTS { ?film editor wdt:P31/wdt:P279* wd:Q114246805 ; wdt:P710* wd:Q1004691 ; wdt:P800* wd:Q1004691 ; wdt:P710* wd:Q2340254 ; wdt:P800* wd:Q2340254 ; wdt:P710* wd:Q1004692 ; wdt:P800* wd:Q1004692 . } BIND(EXISTS { ?film editor wdt:P31/wdt:P279* wd:Q114246805 ; wdt:P710* wd:Q1004691 ; wdt:P800* wd:Q1004691 } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q7042855 is Q7042855\nwd:Q484679 is Q484679\nwdt:P106 is P106\nwd:Q483197 is Q483197", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q13471372 wdt:P106 ?job.;\",\n    \"(wdt:P58|wdt:P1040|wdt:P1431) wd:Q7042855.\",\n    \"?job wdt:P106* wd:Q484679.\",\n    \"FILTER(?result = true)\"\n   \t]}\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q13471372 wdt:P106 ?job.; (wdt:P58|wdt:P1040|wdt:P1431) wd:Q7042855. ?job wdt:P106* wd:Q484679. FILTER(?result = true) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1458 is Q13471372\nkg:6788 is P58\nkg:4116 is P1040\nkg:3804 is P1431\nkg:5732 is Q7042855\nkg:4732 is Q484679\nkg:9371 is P106\nkg:5325 is Q483197", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:1458 kg:3804 ?edit.\",\n      \"kg:1458 kg:5732 ?execProd.\",\n      \"kg:1458 kg:9371 [ kg:4732 \\\"Pietà\\\"; kg:4116 \\\"Dream\\\"; kg:4116 \\\"Moebius\\\" ].\",\n      \"?result bool:{}\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:1458 kg:3804 ?edit. kg:1458 kg:5732 ?execProd. kg:1458 kg:9371 [ kg:4732 \"Pietà\"; kg:4116 \"Dream\"; kg:4116 \"Moebius\" ]. ?result bool:{} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film (BOUND(?executiveProducer) AS ?result) WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 ;\", \"# Film instance of work\",\n    \"         wdt:P577 ?releaseDate .\", \"# Has release date\",\n    \"  OPTIONAL {\",\n    \"    ?film wdt:P608 ?executiveProducer . # Executive producer of film\",\n    \"    FILTER(?executiveProducer IN (wd:Q12345, wd:Q67890)) # Replace with specific executive producers if known\",\n    \"  }\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" . }\",\n    \"}\",\n    \"FILTER(?film IN (wd:Q123456, wd:Q789012)) # Replace with specific film titles if known\"\n  ]\n}", "normal_query": "SELECT ?film (BOUND(?executiveProducer) AS ?result) WHERE { ?film wdt:P31 wd:Q11424 ; wdt:P577 ?releaseDate . OPTIONAL { ?film wdt:P608 ?executiveProducer . FILTER(?executiveProducer IN (wd:Q12345, wd:Q67890)) } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . } } FILTER(?film IN (wd:Q123456, wd:Q789012)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010\nwdt:P106 is P106", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT (COUNT(?film) AS ?result) WHERE {\\n\\t?producer wdt:P106 wd:Q6084069.\\n\\t?producer wdt:P1040/wdt:P1431* wd:Q3282637.\\n\\t?producer wdt:P1040/wdt:P1431* wd:Q5437360.\\n\\t?producer wdt:P1040/wdt:P1431* wd:Q12813010.\\n}\",\n\t\"boolean\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT (COUNT(?film) AS ?result) WHERE { ?producer wdt:P106 wd:Q6084069. ?producer wdt:P1040/wdt:P1431* wd:Q3282637. ?producer wdt:P1040/wdt:P1431* wd:Q5437360. ?producer wdt:P1040/wdt:P1431* wd:Q12813010. } boolean LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3116 is Q6084069\nkg:8238 is P1040\nkg:6683 is P58\nkg:9184 is P1431\nkg:4078 is Q3282637\nkg:6510 is Q5437360\nkg:7130 is Q12813010\nkg:0001 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:3116 kg:9184 kg:8238.\",\n      \"kg:3116 kg:6683 kg:7130.\",\n      \"kg:3116 kg:4078 kg:6510.\",\n      \"?result bool:\",\n      \"  (kg:3116 kg:9184/kg:8238 \\\"executive produce\\\"@en) &&\",\n      \"  (kg:3116 kg:6683/kg:7130 \\\"edit\\\"@en) &&\",\n      \"  (kg:3116 kg:4078/kg:6510 \\\"write\\\"@en)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:3116 kg:9184 kg:8238. kg:3116 kg:6683 kg:7130. kg:3116 kg:4078 kg:6510. ?result bool: (kg:3116 kg:9184/kg:8238 \"executive produce\"@en) && (kg:3116 kg:6683/kg:7130 \"edit\"@en) && (kg:3116 kg:4078/kg:6510 \"write\"@en) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?writerEditor .\",\n    \"?film wdt:P162 ?subject .\",\n    \"?subject wdt:P26 ?marriage .\",\n    \"VALUES ?film { wd:Q104389 wd:Q104390 wd:Q104391 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?writerEditor . ?film wdt:P162 ?subject . ?subject wdt:P26 ?marriage . VALUES ?film { wd:Q104389 wd:Q104390 wd:Q104391 } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q63993096 is Q63993096\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?writerEditor wdt:P737 wd:Q2493884 ;\",\n    \"  wdt:P1040 wd:Q2298257 ;\",\n    \"  wdt:P58 ?marriage .\",\n    \"?marriage wdt:P26 ?person .\",\n    \"?writerEditor wdt:P737 ?resource .\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?writerEditor wdt:P737 wd:Q2493884 ; wdt:P1040 wd:Q2298257 ; wdt:P58 ?marriage . ?marriage wdt:P26 ?person . ?writerEditor wdt:P737 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4456 is Q2493884\nkg:3265 is P58\nkg:5011 is Q2298257\nkg:5902 is P1040\nkg:5863 is P26\nkg:6168 is P737\nkg:8979 is Q63993096\nkg:9891 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writerEditor kg:5902 ?movie .\",\n      \"?movie kg:6168 ?person .\",\n      \"?person kg:8979 ?marriage .\",\n      \"?person kg:9891 ?influence .\",\n      \"?writerEditor kg:3265 \\\"Vagabond\\\" ;\",\n                    \"kg:3265 \\\"Varda by Agnès\\\" ;\",\n                    \"kg:3265 \\\"The Gleaners and I\\\" .\",\n      \"?writerEditor kg:4456 ?demy .\",\n      \"?demy kg:5011 ?marriage ;\",\n                    \"kg:5863 ?influence .\",\n      \"?resource ?p ?o\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writerEditor kg:5902 ?movie . ?movie kg:6168 ?person . ?person kg:8979 ?marriage . ?person kg:9891 ?influence . ?writerEditor kg:3265 \"Vagabond\" ; kg:3265 \"Varda by Agnès\" ; kg:3265 \"The Gleaners and I\" . ?writerEditor kg:4456 ?demy . ?demy kg:5011 ?marriage ; kg:5863 ?influence . ?resource ?p ?o } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P50 \\\"Shoulder Arms\\\";\",\n    \"   wdt:P50 \\\"The Great Dictator\\\";\",\n    \"   wdt:P3847 \\\"The Floorwalker\\\".\",\n    \"?person wdt:P161 ?work1.\",\n    \"?person wdt:P161 ?work2.\",\n    \"?person wdt:P161 ?work3.\"\n    ,\n    \"?work1 rdfs:label \\\"Shoulder Arms\\\"@en .\",\n    \"?work2 rdfs:label \\\"The Great Dictator\\\"@en .\",\n    \"?work3 rdfs:label \\\"The Floorwalker\\\"@en .\"\n    ,\n    \"FILTER (?person != ?work1 && ?person != ?work2 && ?person != ?work3)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P50 \"Shoulder Arms\"; wdt:P50 \"The Great Dictator\"; wdt:P3847 \"The Floorwalker\". ?person wdt:P161 ?work1. ?person wdt:P161 ?work2. ?person wdt:P161 ?work3. ?work1 rdfs:label \"Shoulder Arms\"@en . ?work2 rdfs:label \"The Great Dictator\"@en . ?work3 rdfs:label \"The Floorwalker\"@en . FILTER (?person != ?work1 && ?person != ?work2 && ?person != ?work3) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P86 is P86\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116", "response": "{\n \t\"query\": [\n  \t\t\"?work wdt:P58 wd:Q166739.\",\n  \t\t\"?work wdt:P161 wd:Q1140317.\",\n  \t\t\"?person wdt:P57 ?work.\",\n  \t\t\"?person wdt:P86 wd:Q109116.\"\n  \t]\n}", "normal_query": "?work wdt:P58 wd:Q166739. ?work wdt:P161 wd:Q1140317. ?person wdt:P57 ?work. ?person wdt:P86 wd:Q109116. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2514 is P57\nkg:4943 is Q166739\nkg:4290 is P86\nkg:3608 is P58\nkg:6839 is Q1140317\nkg:7682 is P161\nkg:8244 is Q109116", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2514 ?work1 .\",\n      \"?work1 kg:4943 ?writer .\",\n      \"?work1 kg:4290 ?star .\",\n      \"?work1 kg:3608 ?director .\",\n      \"?work1 kg:7682 ?composer .\",\n      \"?resource kg:6839 ?floorwalkerDir\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2514 ?work1 . ?work1 kg:4943 ?writer . ?work1 kg:4290 ?star . ?work1 kg:3608 ?director . ?work1 kg:7682 ?composer . ?resource kg:6839 ?floorwalkerDir } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102659 wdt:P31/wdt:P279* wd:Q84819 ;\",\n    \"    p:P161/psn:P161 ?production .\",\n    \"  ?production pq:P580 ?tt0452220 ;\",\n    \"    pq:P582 ?tt1397525 .\",\n    \"  wd:Q102659 wdt:P161 ?person .\",\n    \"  ?person p:P106 [ ps:P106/wdfs:label \\\"cinematographer\\\"@en ;\",\n    \"                   pq:exactMatch ?role ] ;\",\n    \"    p:P108 [ ps:P108/wdfs:label \\\"star\\\"@en ;\",\n    \"             pq:exactMatch ?role ] ;\",\n    \"    p:P109 [ ps:P109/wdfs:label \\\"writer\\\"@en ;\",\n    \"             pq:exactMatch ?role ] ;\",\n    \"    p:P278 [ ps:P278/wdfs:label \\\"editor\\\"@en ;\",\n    \"             pq:exactMatch ?role ] ;\",\n    \"    p:P106 [ ps:P106/wdfs:label \\\"director\\\"@en ;\",\n    \"             pq:exactMatch ?role ] .\",\n    \"  BIND(EXISTS { ?person p:P106 [ ps:P106/wdfs:label \\\"cinematographer\\\"@en ] } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102659 wdt:P31/wdt:P279* wd:Q84819 ; p:P161/psn:P161 ?production . ?production pq:P580 ?tt0452220 ; pq:P582 ?tt1397525 . wd:Q102659 wdt:P161 ?person . ?person p:P106 [ ps:P106/wdfs:label \"cinematographer\"@en ; pq:exactMatch ?role ] ; p:P108 [ ps:P108/wdfs:label \"star\"@en ; pq:exactMatch ?role ] ; p:P109 [ ps:P109/wdfs:label \"writer\"@en ; pq:exactMatch ?role ] ; p:P278 [ ps:P278/wdfs:label \"editor\"@en ; pq:exactMatch ?role ] ; p:P106 [ ps:P106/wdfs:label \"director\"@en ; pq:exactMatch ?role ] . BIND(EXISTS { ?person p:P106 [ ps:P106/wdfs:label \"cinematographer\"@en ] } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q1165050 wdt:P161/wdt:P161/wdt:P161/wdt:P161/wdt:P161 wd:Q192115. \",\n    \"?result bool:equals true.\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q1165050 wdt:P161/wdt:P161/wdt:P161/wdt:P161/wdt:P161 wd:Q192115. ?result bool:equals true. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2515 is Q1165050\nkg:9133 is P57\nkg:7262 is P58\nkg:5100 is P1040\nkg:8718 is Q192115\nkg:8873 is P161\nkg:7887 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:2515 kg:8718 kg:9133.\",\n      \"kg:2515 kg:8718 kg:7262.\",\n      \"kg:2515 kg:8718 kg:5100.\",\n      \"kg:2515 kg:8718 kg:8873.\",\n      \"kg:2515 kg:8718 kg:7887.\",\n    \"}\",\n    \"BIND(EXISTS {\",\n      \"SELECT ?result\",\n      \"WHERE {\",\n        \"kg:2515 kg:8718 kg:9133.\",\n        \"kg:2515 kg:8718 kg:7262.\",\n        \"kg:2515 kg:8718 kg:5100.\",\n        \"kg:2515 kg:8718 kg:8873.\",\n        \"kg:2515 kg:8718 kg:7887.\",\n      \"}\",\n    \"} AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:2515 kg:8718 kg:9133. kg:2515 kg:8718 kg:7262. kg:2515 kg:8718 kg:5100. kg:2515 kg:8718 kg:8873. kg:2515 kg:8718 kg:7887. } BIND(EXISTS { SELECT ?result WHERE { kg:2515 kg:8718 kg:9133. kg:2515 kg:8718 kg:7262. kg:2515 kg:8718 kg:5100. kg:2515 kg:8718 kg:8873. kg:2515 kg:8718 kg:7887. } } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?movie1 wdt:P3457 'Contagion' ;\",\n    \"         wdt:P3460 'Schizopolis' ;\",\n    \"         wdt:P3460 'Ocean%27s+Eleven' ;\",\n    \"         wdt:P3460 'Full+Frontal+Magic+Mike+XXL'.\",\n    \"  ?movie1 wdt:P939 ?editor.\",\n    \"  ?movie1 wdt:P885 ?producer.\",\n    \"  FILTER(?editor = 'Schizopolis' && ?producer = 'Ocean%27s+Eleven').\",\n    \"  BIND(EXISTS{?movie1 wdt:P3460 'Magic+Mike+XXL'} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?movie1 wdt:P3457 'Contagion' ; wdt:P3460 'Schizopolis' ; wdt:P3460 'Ocean%27s+Eleven' ; wdt:P3460 'Full+Frontal+Magic+Mike+XXL'. ?movie1 wdt:P939 ?editor. ?movie1 wdt:P885 ?producer. FILTER(?editor = 'Schizopolis' && ?producer = 'Ocean%27s+Eleven'). BIND(EXISTS{?movie1 wdt:P3460 'Magic+Mike+XXL'} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1432710 is Q1432710\nwd:Q2082586 is Q2082586\nwd:Q730888 is Q730888\nwd:Q17893055 is Q17893055\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q2082586 wdt:P161* wd:Q1432710 ;\",\n    \"             wdt:P344 ?movie .\",\n    \"  FILTER(?movie IN (wd:Q17893055, wd:Q730888, wd:Q1431, wd:Q1068929))\",\n    \"  BIND(EXISTS { wd:Q2082586 wdt:P1040* wd:Q730888 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q2082586 wdt:P161* wd:Q1432710 ; wdt:P344 ?movie . FILTER(?movie IN (wd:Q17893055, wd:Q730888, wd:Q1431, wd:Q1068929)) BIND(EXISTS { wd:Q2082586 wdt:P1040* wd:Q730888 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4102 is P1040\nkg:3825 is P1431\nkg:4996 is Q1432710\nkg:7239 is Q2082586\nkg:5843 is Q730888\nkg:6323 is Q17893055\nkg:6906 is P161\nkg:6597 is Q205447\nkg:7548 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:6323 kg:6906 kg:4996 ;\",\n    \"kg:6323 kg:6597 kg:7239 ;\",\n    \"kg:6323 kg:7548 kg:3825 ;\",\n    \"kg:6323 kg:7548 kg:4102 ;\",\n    \"kg:6323 kg:7548 kg:5843 .\",\n    \"BIND(TRUE AS ?result)\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:6323 kg:6906 kg:4996 ; kg:6323 kg:6597 kg:7239 ; kg:6323 kg:7548 kg:3825 ; kg:6323 kg:7548 kg:4102 ; kg:6323 kg:7548 kg:5843 . BIND(TRUE AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q114248067 ;\", \"# Six Men Getting Sick\",\n    \"wdt:P3395 ?cinematographer .\", \"# cinematographer of the film\",\n    \"wdt:P1001 ?editor .\", \"# editor of the film\",\n    \"?film wdt:P3428 ?resource .  # stars in the film\" ,\n    \"VALUES ?resource { wd:Q75769 wd:Q114248067 wd:Q114248068 wd:Q114248069 wd:Q114248070 wd:Q114248071 }\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248067 ; wdt:P3395 ?cinematographer . wdt:P1001 ?editor . ?film wdt:P3428 ?resource . VALUES ?resource { wd:Q75769 wd:Q114248067 wd:Q114248068 wd:Q114248069 wd:Q114248070 wd:Q114248071 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q507285 is Q507285\nwd:Q862058 is Q862058\nwd:Q114819 is Q114819\nwd:Q2085 is Q2085\nwd:Q3641257 is Q3641257\nwd:Q3485595 is Q3485595\nwdt:P161 is P161\nwd:Q56756907 is Q56756907\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n  \t\t\"?film wdt:P161 wd:Q507285.\",\n  \t\t\"?person p:P344 ?statement.\",\n  \t\t\"?statement ps:P344 ?film.\",\n  \t\t\"?statement pq:P1040 wd:Q862058.\"\n  \t]\n}", "normal_query": "?film wdt:P161 wd:Q507285. ?person p:P344 ?statement. ?statement ps:P344 ?film. ?statement pq:P1040 wd:Q862058. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7540 is P1040\nkg:3390 is Q507285\nkg:7396 is Q862058\nkg:1297 is Q114819\nkg:3440 is Q2085\nkg:6076 is Q3641257\nkg:8230 is Q3485595\nkg:0966 is P161\nkg:6795 is Q56756907\nkg:7670 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film kg:7540 ?cinematographer .\",\n      \"?film kg:7670 ?editor .\",\n      \"?film kg:0966 \\\"The Black Ghiandola\\\" ;\",\n      \"   kg:0966 \\\"Twin Peaks\\\" ;\",\n      \"   kg:0966 \\\"Lumière and Company\\\" ;\",\n      \"   kg:0966 \\\"Dune\\\" ;\",\n      \"   kg:0966 \\\"Inland Empire\\\" ;\",\n      \"   kg:0966 \\\"Boat\\\" .\",\n      \"?cinematographer kg:3440 ?resource .\",\n      \"?editor kg:3440 ?resource .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:7540 ?cinematographer . ?film kg:7670 ?editor . ?film kg:0966 \"The Black Ghiandola\" ; kg:0966 \"Twin Peaks\" ; kg:0966 \"Lumière and Company\" ; kg:0966 \"Dune\" ; kg:0966 \"Inland Empire\" ; kg:0966 \"Boat\" . ?cinematographer kg:3440 ?resource . ?editor kg:3440 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?writer .\",\n      \"?film wdt:P69 ?editor .\",\n      \"?film wdt:P106 ?director .\",\n      \"?film wdt:P57 \\\"Vagabond\\\"@en .\",\n      \"?film wdt:P57 \\\"The Gleaners and I\\\"@en .\",\n      \"?writer wdno:Q249386 .\",\n      \"?director wdno:Q106664 .\",\n      \"?resource ?p ?o .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?writer . ?film wdt:P69 ?editor . ?film wdt:P106 ?director . ?film wdt:P57 \"Vagabond\"@en . ?film wdt:P57 \"The Gleaners and I\"@en . ?writer wdno:Q249386 . ?director wdno:Q106664 . ?resource ?p ?o . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person wdt:P57 wd:Q2493884 ;\",\n    \"   wdt:P58 wd:Q2298257 ;\",\n    \"   wdt:P1040 wd:Q312258 .\",\n    \"?person wdt:P26 ?spouse .\",\n    \"FILTER EXISTS { ?person wdt:P737 ?movie }\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P57 wd:Q2493884 ; wdt:P58 wd:Q2298257 ; wdt:P1040 wd:Q312258 . ?person wdt:P26 ?spouse . FILTER EXISTS { ?person wdt:P737 ?movie } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3029 is P57\nkg:9150 is Q2493884\nkg:2357 is P58\nkg:3931 is Q2298257\nkg:5608 is P1040\nkg:8868 is P26\nkg:7429 is P737\nkg:7583 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2357 kg:3931 ;\", \"# director of The Gleaners and I\",\n      \"?resource kg:3029 kg:9150 .\", \"# writer of Vagabond and The Gleaners and I\",\n      \"?resource kg:8868 kg:7429 .\" ,\"\\n\\t# influence and marry Jacques Demy\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2357 kg:3931 ; ?resource kg:3029 kg:9150 . ?resource kg:8868 kg:7429 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wd:p31/wd:P31* wd:Q11424195 ;\",\n    \"     wdt:P678 ?confession .\",\n    \"  OPTIONAL { ?person wdt:P106* [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] ;\",\n    \"             wdt:P31 wd:Q5 .\",\n    \"             ?person wdt:P678 ?film . }\",\n    \"  OPTIONAL { ?work wdt:P31/wdt:P279* wd:Q11424195 ;\",\n    \"            wdt:P57 ?person ;\",\n    \"            wdt:P106 [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] . }\",\n    \"  BIND(EXISTS { ?work wdt:P106 wd:Q12637 ; wdt:P57 ?person } AS ?starWriter) .\",\n    \"  BIND(EXISTS { ?film wdt:P678 ?confession ; wdt:P106 [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] } AS ?confessionPerson) .\",\n    \"  BIND(?starWriter && ?confessionPerson AS ?result).\"\n    ]\n  }\n ", "normal_query": "SELECT ?result WHERE { ?film wd:p31/wd:P31* wd:Q11424195 ; wdt:P678 ?confession . OPTIONAL { ?person wdt:P106* [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] ; wdt:P31 wd:Q5 . ?person wdt:P678 ?film . } OPTIONAL { ?work wdt:P31/wdt:P279* wd:Q11424195 ; wdt:P57 ?person ; wdt:P106 [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] . } BIND(EXISTS { ?work wdt:P106 wd:Q12637 ; wdt:P57 ?person } AS ?starWriter) . BIND(EXISTS { ?film wdt:P678 ?confession ; wdt:P106 [wdt:P106/wdt:P279* wdt:Q12637|wdt:Q11424195] } AS ?confessionPerson) . BIND(?starWriter && ?confessionPerson AS ?result). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6099428 is Q6099428\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwd:Q12813010 is Q12813010\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?result WHERE {\\n\\t?editor wdt:P1040 [wdt:P58 wd:Q6099428, wd:Q6084069] ;\\n\\t\\twdt:P1431 [wdt:P161 wd:Q5265241, wd:Q12813010] .\\n\\t?editor wdt:P344 ?film.\\n\\tFILTER(?film IN (wd:Q6099428, wd:Q6084069, wd:Q12813010))\\n\\tBIND(EXISTS { ?editor wdt:P1040 [wdt:P58 wd:Q6099428, wd:Q6084069] ; wdt:P1431 [wdt:P161 wd:Q5265241, wd:Q12813010] } AS ?result)\\n}\",\n\t\"default-graph-uri\" , \"http://www.wikidata.org\"\n]\n}", "normal_query": "@prefix wd: <<http://www.wikidata.org>/entity/> . @prefix wdt: <<http://www.wikidata.org>/prop/direct/> . SELECT ?result WHERE { ?editor wdt:P1040 [wdt:P58 wd:Q6099428, wd:Q6084069] ; wdt:P1431 [wdt:P161 wd:Q5265241, wd:Q12813010] . ?editor wdt:P344 ?film. FILTER(?film IN (wd:Q6099428, wd:Q6084069, wd:Q12813010)) BIND(EXISTS { ?editor wdt:P1040 [wdt:P58 wd:Q6099428, wd:Q6084069] ; wdt:P1431 [wdt:P161 wd:Q5265241, wd:Q12813010] } AS ?result) } default-graph-uri <http://www.wikidata.org> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4813 is Q6099428\nkg:2241 is Q6084069\nkg:0801 is P1040\nkg:6520 is P58\nkg:4504 is P1431\nkg:5080 is Q5265241\nkg:8770 is Q12813010\nkg:2419 is P161\nkg:4313 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?editor kg:2241 ?confession .\",\n      \"?editor kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] .\",\n      \"?producer kg:2241 ?confession .\",\n      \"?producer kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] .\",\n      \"?cinematographer kg:2241 ?confession .\",\n      \"?cinematographer kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] .\",\n      \"VALUES ?result { true }\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { ?editor kg:2241 ?confession . ?editor kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] . ?producer kg:2241 ?confession . ?producer kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] . ?cinematographer kg:2241 ?confession . ?cinematographer kg:0801 [ kg:5080 ?star ; kg:4504 ?writer ] . VALUES ?result { true } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424659.\" ,\n    \"  FILTER(?film IN (wd:Q107842, wd:Q107843, wd:Q107844, wd:Q107845)).\" ,\n    \"  ?film wdt:P71 ?editor.\" ,\n    \"  ?film wdt:P57 ?writer.\" ,\n    \"  ?film wdt:P921 ?director.\" ,\n    \"  BIND(1 AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  SELECT ?result WHERE {\",\n    \"    FILTER NOT EXISTS {\",\n    \"      ?film wdt:P71 ?editor.\" ,\n    \"      ?film wdt:P57 ?writer.\" ,\n    \"      ?film wdt:P921 ?director.\",\n    \"    }\",\n    \"    BIND(0 AS ?result)\",\n    \"  }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film wdt:P31 wd:Q11424659. FILTER(?film IN (wd:Q107842, wd:Q107843, wd:Q107844, wd:Q107845)). ?film wdt:P71 ?editor. ?film wdt:P57 ?writer. ?film wdt:P921 ?director. BIND(1 AS ?result) } UNION { SELECT ?result WHERE { FILTER NOT EXISTS { ?film wdt:P71 ?editor. ?film wdt:P57 ?writer. ?film wdt:P921 ?director. } BIND(0 AS ?result) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwd:Q7042855 is Q7042855\nwdt:P106 is P106\nwd:Q45602 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?film) AS ?result) WHERE {\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"?editor wdt:P106 wd:Q45602.\",\n    \"?film wdt:P57 ?editor.\",\n    \"?film wdt:P58 ?editor.\",\n    \"?film wdt:P1040 ?editor.\",\n    \"VALUES ?film { wd:Q166739 wd:Q2445896 wd:Q7042855 wd:Q199039 }\",\n    \"}\",\n    \"FILTER(?result = 4)\"\n  ]\n}", "normal_query": "SELECT (COUNT(?film) AS ?result) WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } ?editor wdt:P106 wd:Q45602. ?film wdt:P57 ?editor. ?film wdt:P58 ?editor. ?film wdt:P1040 ?editor. VALUES ?film { wd:Q166739 wd:Q2445896 wd:Q7042855 wd:Q199039 } } FILTER(?result = 4) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0832 is P57\nkg:7273 is Q166739\nkg:7866 is Q2445896\nkg:9999 is P58\nkg:0803 is P1040\nkg:9708 is Q199039\nkg:1515 is Q7042855\nkg:8834 is P106\nkg:5457 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:9999 kg:8834 kg:1515.\",\n      \"kg:9999 kg:9708 kg:7866.\",\n      \"kg:9999 kg:9708 kg:7273.\",\n      \"kg:9999 kg:9708 kg:0832.\",\n      \"BIND(EXISTS { kg:9999 kg:1515 kg:0803 } AS ?result).\"\n    ]\n  }\n \t        \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:9999 kg:8834 kg:1515. kg:9999 kg:9708 kg:7866. kg:9999 kg:9708 kg:7273. kg:9999 kg:9708 kg:0832. BIND(EXISTS { kg:9999 kg:1515 kg:0803 } AS ?result). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor\",\n    \"WHERE {\",\n      \"?film1 wdt:P3459 ?writer ;\",\n           \"wdt:P1026 ?executiveProducer ;\",\n           \"wdt:P7038 ?editor .\",\n      \"?film2 wdt:P3459 ?writer ;\",\n           \"wdt:P1026 ?executiveProducer ;\",\n           \"wdt:P7038 ?editor .\",\n      \"VALUES ?film1 { wd:Q1234567 }\", \"># Replace with actual QID for The Waiting Room\",\n      \"VALUES ?film2 { wd:Q7890123 }\" ,\"\\n# Replace with actual QID for The Confession\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?executiveProducer ?editor WHERE { ?film1 wdt:P3459 ?writer ; wdt:P1026 ?executiveProducer ; wdt:P7038 ?editor . ?film2 wdt:P3459 ?writer ; wdt:P1026 ?executiveProducer ; wdt:P7038 ?editor . VALUES ?film1 { wd:Q1234567 } > VALUES ?film2 { wd:Q7890123 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{\n \t\"query\": [\n  \t\t\"?resource wdt:P1040 wd:Q6084069 ;\",\n  \t\t\"   wdt:P58 ?writer ;\",\n  \t\t\"   wdt:P1431 ?executiveProducer .\"\n  \t]\n  \t\t}\n  \t  \t\t\t\t  \t\t\t\t  \t\t\t", "normal_query": "?resource wdt:P1040 wd:Q6084069 ; wdt:P58 ?writer ; wdt:P1431 ?executiveProducer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4544 is Q6084069\nkg:3400 is P1040\nkg:1539 is P58\nkg:9903 is P1431\nkg:6750 is Q5437360\nkg:5948 is Q12813010", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writer kg:3400 ?executiveProducer .\",\n      \"?executiveProducer kg:1539 ?editor .\",\n      \"?executiveProducer kg:9903 ?confessionExecutiveProducer .\",\n      \"?executiveProducer kg:6750 ?confessionEditor .\",\n      \"?writer kg:4544 \\\"The Waiting Room\\\" .\",\n      \"?executiveProducer kg:5948 \\\"The Confession\\\"\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writer kg:3400 ?executiveProducer . ?executiveProducer kg:1539 ?editor . ?executiveProducer kg:9903 ?confessionExecutiveProducer . ?executiveProducer kg:6750 ?confessionEditor . ?writer kg:4544 \"The Waiting Room\" . ?executiveProducer kg:5948 \"The Confession\" } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P50/wdt:P51 wd:Q26487 ;\", \"# Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, Ingmar Bergman as directors and writers\",\n    \"wdt:P50/wdt:P51 wd:Q26487 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P50/wdt:P51 wd:Q26487 ; wdt:P50/wdt:P51 wd:Q26487 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q982339 is Q982339\nwd:Q116760 is Q116760\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P31 is P31\nwd:Q7546 is Q7546\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57/Q982339/wdt:P58/Q116760/wdt:P58/Q11424/wdt:P58/Q1033656/wdt:P58/Q7546 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57/Q982339/wdt:P58/Q116760/wdt:P58/Q11424/wdt:P58/Q1033656/wdt:P58/Q7546 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7636 is P57\nkg:8164 is Q982339\nkg:9181 is Q116760\nkg:0329 is Q11424\nkg:9782 is P58\nkg:0334 is Q1033656\nkg:8850 is P31\nkg:1192 is Q7546\nkg:2729 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:8164 ?director .\",\n    \"?film kg:0329 ?writer .\",\n    \"FILTER ( ?director IN (kg:7636, kg:8164, kg:9181, kg:0329, kg:9782) )\",\n    \"FILTER ( ?writer IN (kg:7636, kg:8164, kg:9181, kg:0329, kg:9782) )\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:8164 ?director . ?film kg:0329 ?writer . FILTER ( ?director IN (kg:7636, kg:8164, kg:9181, kg:0329, kg:9782) ) FILTER ( ?writer IN (kg:7636, kg:8164, kg:9181, kg:0329, kg:9782) ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q123456 wdt:P106/wdt:P279* wd:Q876543 ;\",\n    \"              wdt:P106/wdt:P279* wd:Q976543 ;\",\n    \"              wdt:P106/wdt:P279* wd:Q123457 ;\",\n    \"              wdt:P106/wdt:P279* wd:Q876544 .\",\n    \"  ?film1 wdt:P31 wd:Q11424 ;\",\n    \"         wdt:P577 ?date1 ;\",\n    \"         wdt:P161 wd:Q123456 .\",\n    \"  ?film2 wdt:P31 wd:Q11424 ;\",\n    \"         wdt:P577 ?date2 ;\",\n    \"         wdt:P161 wd:Q876544 .\",\n    \"  FILTER(?result = true)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q123456 wdt:P106/wdt:P279* wd:Q876543 ; wdt:P106/wdt:P279* wd:Q976543 ; wdt:P106/wdt:P279* wd:Q123457 ; wdt:P106/wdt:P279* wd:Q876544 . ?film1 wdt:P31 wd:Q11424 ; wdt:P577 ?date1 ; wdt:P161 wd:Q123456 . ?film2 wdt:P31 wd:Q11424 ; wdt:P577 ?date2 ; wdt:P161 wd:Q876544 . FILTER(?result = true) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwd:Q12813010 is Q12813010\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT ( EXISTS { ?person wdt:P1040/wdt:P344 wd:Q5265241 ; wdt:P161 wd:Q12813010 } ) AS ?result\\nWHERE { \\n  OPTIONAL { ?person wdt:P1040/wdt:P344 wd:Q5265241 . } \\n  FILTER EXISTS { ?person wdt:P161 wd:Q12813010 . } \\n} \",\n\t\"prefixes\" ]}\n", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?person wdt:P1040/wdt:P344 wd:Q5265241 ; wdt:P161 wd:Q12813010 } ) AS ?result WHERE { OPTIONAL { ?person wdt:P1040/wdt:P344 wd:Q5265241 . } FILTER EXISTS { ?person wdt:P161 wd:Q12813010 . } } prefixes LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8377 is Q6084069\nkg:8146 is P1040\nkg:6005 is P58\nkg:2084 is P1431\nkg:9372 is Q5265241\nkg:3739 is Q12813010\nkg:5861 is P161\nkg:3667 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:8377 kg:58 ?result .\",\n    \"kg:8377 kg:2084 ?result .\",\n    \"kg:8377 kg:6005 ?result .\",\n    \"kg:8377 kg:3739 ?result .\"\n    ]}", "normal_query": "SELECT ?result WHERE { kg:8377 kg:58 ?result . kg:8377 kg:2084 ?result . kg:8377 kg:6005 ?result . kg:8377 kg:3739 ?result . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?filmEditor wdt:P31 wd:Q114248096 ;\", \"># Assuming Q114248096 is the film editor's item ID in Wikidata\",\n    \"           wdt:P50 ?spouse .\",\n    \"  ?film q1:City Tramp , q1:Katzelmacher , q1:Why Does Herr R. Run Amok? , q1:Whity , q1:In a Year of 13 Moons ;\", \"># Assuming these are the film titles in Wikidata\",\n    \"         wdt:P648 ?spouse .\",\n    \"  BIND(EXISTS { ?filmEditor wdt:P50 ?spouse } AS ?result) \"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?filmEditor wdt:P31 wd:Q114248096 ; > wdt:P50 ?spouse . ?film q1:City Tramp , q1:Katzelmacher , q1:Why Does Herr R. Run Amok? , q1:Whity , q1:In a Year of 13 Moons ; > wdt:P648 ?spouse . BIND(EXISTS { ?filmEditor wdt:P50 ?spouse } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q567519 is Q567519\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q570483 is Q570483\nwd:Q327427 is Q327427\nwd:Q7042855 is Q7042855\nwd:Q878673 is Q878673\nwdt:P106 is P106\nwd:Q543382 is Q543382", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?film) AS ?result) WHERE {\",\n    \"?editor wdt:P26 ?spouse ;\",\n    \"   wdt:P106 wd:Q567519 ;\",\n    \"   wdt:P1040 ?film .\",\n    \"?film wdt:P58 wd:Q570483 ;\",\n    \"   wdt:P58 wd:Q327427 ;\",\n    \"   wdt:P58 wd:Q7042855 ;\",\n    \"   wdt:P58 wd:Q878673 .\",\n    \"?spouse wdt:P106 wd:Q543382.\",\n    \"}\",\n    \"FILTER(?result > 0)\"\n  ]\n}", "normal_query": "SELECT (COUNT(?film) AS ?result) WHERE { ?editor wdt:P26 ?spouse ; wdt:P106 wd:Q567519 ; wdt:P1040 ?film . ?film wdt:P58 wd:Q570483 ; wdt:P58 wd:Q327427 ; wdt:P58 wd:Q7042855 ; wdt:P58 wd:Q878673 . ?spouse wdt:P106 wd:Q543382. } FILTER(?result > 0) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0576 is Q567519\nkg:0246 is P58\nkg:7992 is P1040\nkg:5447 is P26\nkg:2262 is Q570483\nkg:2892 is Q327427\nkg:8647 is Q7042855\nkg:0647 is Q878673\nkg:5188 is P106\nkg:1649 is Q543382", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:0576 kg:5188 [ kg:2262 ; kg:2892 ] .\",\n    \"kg:0576 kg:0246 kg:7992 .\",\n    \"kg:0576 kg:1649 [ kg:8647 ; kg:0647 ; kg:5447 ; kg:2262 ; kg:2892 ] .\",\n    \"?result BOOLEAN\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:0576 kg:5188 [ kg:2262 ; kg:2892 ] . kg:0576 kg:0246 kg:7992 . kg:0576 kg:1649 [ kg:8647 ; kg:0647 ; kg:5447 ; kg:2262 ; kg:2892 ] . ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?director WHERE { ?film wdt:P1370 ?female ; wdt:P654 ?edit ; wdt:P735 ?write ; wdt:P1068 ?direct . FILTER (REGEX(?film, 'Tag der Freiheit: Unsere Wehrmacht|Olympia|Triumph of the Will', 'i')) . ?director wdt:P279* ?film }\"\n\t]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P1370 ?female ; wdt:P654 ?edit ; wdt:P735 ?write ; wdt:P1068 ?direct . FILTER (REGEX(?film, 'Tag der Freiheit: Unsere Wehrmacht|Olympia|Triumph of the Will', 'i')) . ?director wdt:P279* ?film } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q6581072 is Q6581072\nwd:Q156497 is Q156497\nwd:Q158069 is Q158069\nwdt:P21 is P21\nwd:Q497617 is Q497617", "response": "{\n \t\"query\":\n\t\t[]}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0441 is P57\nkg:1797 is P58\nkg:5686 is P1040\nkg:7143 is Q6581072\nkg:3834 is Q156497\nkg:2213 is Q158069\nkg:0024 is P21\nkg:7744 is Q497617", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:P57 kg:3834 ;\",\n           \"kg:P58 kg:7143 ;\",\n           \"kg:P1040 kg:2213 .\",\n      \"kg:3834 kg:P21 kg:7744 ;\",\n           \"kg:P1040 kg:1797 ;\",\n           \"kg:P57/kg:P58 ?film .\",\n      \"?film kg:1040/kg:5686 \\\"Tag der Freiheit: Unsere Wehrmacht\\\" ;\",\n           \"kg:1040/kg:5686 \\\"Olympia\\\" ;\",\n           \"kg:1040/kg:5686 \\\"Triumph of the Will\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 kg:3834 ; kg:P58 kg:7143 ; kg:P1040 kg:2213 . kg:3834 kg:P21 kg:7744 ; kg:P1040 kg:1797 ; kg:P57/kg:P58 ?film . ?film kg:1040/kg:5686 \"Tag der Freiheit: Unsere Wehrmacht\" ; kg:1040/kg:5686 \"Olympia\" ; kg:1040/kg:5686 \"Triumph of the Will\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?movie1 wdt:P3459 \\\"Day of the Dead\\\" ;\",\n              \"wdt:P3460 ?person .\",\n      \"?movie2 wdt:P3459 \\\"Monkey Shines\\\" ;\",\n              \"wdt:P3460 ?person .\",\n      \"?movie3 wdt:P3459 \\\"Dawn of the Dead\\\" ;\",\n              \"wdt:P3460 ?person .\",\n      \"?movie4 wdt:P3459 \\\"Survival of the Dead\\\" ;\",\n              \"wdt:P3460 ?person .\",\n      \"?movie1 wdt:P161 ?editor .\",\n      \"?editor rdfs:label ?editorLabel .\",\n      \"FILTER (lang(?editorLabel) = 'en') .\",\n      \"?movie5 wdt:P3459 \\\"The Crazies\\\" ;\",\n              \"wdt:P3460 ?editor .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?movie1 wdt:P3459 \"Day of the Dead\" ; wdt:P3460 ?person . ?movie2 wdt:P3459 \"Monkey Shines\" ; wdt:P3460 ?person . ?movie3 wdt:P3459 \"Dawn of the Dead\" ; wdt:P3460 ?person . ?movie4 wdt:P3459 \"Survival of the Dead\" ; wdt:P3460 ?person . ?movie1 wdt:P161 ?editor . ?editor rdfs:label ?editorLabel . FILTER (lang(?editorLabel) = 'en') . ?movie5 wdt:P3459 \"The Crazies\" ; wdt:P3460 ?editor . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q16 is Q16\nwdt:P27 is P27\nwd:Q627060 is Q627060\nwd:Q219170 is Q219170", "response": "{\n \t\"query\": [\n  \t\t\"?person wdt:P58 wd:Q1277329 ;\",\n  \t\t\"   wdt:P1040 [\",\n  \t\t\"      wdt:P57 wd:Q219155 ;\",\n  \t\t\"      wdt:P57 wd:Q198557 ;\",\n  \t\t\"      wdt:P57 wd:Q627060 ;\",\n  \t\t\"      wdt:P57 wd:Q219170\",\n  \t\t\"   ] ;\",\n  \t\t\"   wdt:P27 wd:Q16\"\n  \t]\n}", "normal_query": "?person wdt:P58 wd:Q1277329 ; wdt:P1040 [ wdt:P57 wd:Q219155 ; wdt:P57 wd:Q198557 ; wdt:P57 wd:Q627060 ; wdt:P57 wd:Q219170 ] ; wdt:P27 wd:Q16 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8868 is Q1277329\nkg:7721 is P57\nkg:0150 is Q219155\nkg:3365 is Q198557\nkg:9886 is P58\nkg:3788 is P1040\nkg:5465 is Q16\nkg:0817 is P27\nkg:5844 is Q627060\nkg:4614 is Q219170", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3788 kg:8868.\",\n      \"?resource kg:5465 kg:3365.\",\n      \"?resource kg:9886 kg:0150.\",\n      \"?resource kg:3788 kg:5844.\",\n      \"?resource kg:5465 kg:4614.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3788 kg:8868. ?resource kg:5465 kg:3365. ?resource kg:9886 kg:0150. ?resource kg:3788 kg:5844. ?resource kg:5465 kg:4614. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?movie1 wdt:P3459 wd:Q1142780.\" ,\n    \"  ?movie2 wdt:P3459 wd:Q1142780.\" ,\n    \"  ?movie3 wdt:P3459 wd:Q1142780.\" ,\n    \"  ?movie4 wdt:P3459 wd:Q1142780.\" ,\n    \"  FILTER(?movie1 != ?movie2 && ?movie2 != ?movie3 && ?movie3 != ?movie4)\",\n    \"  BIND(EXISTS{?person wdt:P161 ?movie1. ?person wdt:P50 wd:Q1142780.} AS ?result1)\",\n    \"  BIND(EXISTS{?person wdt:P161 ?movie2. ?person wdt:P50 wd:Q1142780.} AS ?result2)\",\n    \"  BIND(EXISTS{?person wdt:P161 ?movie3. ?person wdt:P50 wd:Q1142780.} AS ?result3)\",\n    \"  BIND(EXISTS{?person wdt:P161 ?movie4. ?person wdt:P50 wd:Q1142780.} AS ?result4)\",\n    \"  BIND(?result1 && ?result2 && ?result3 && ?result4 AS ?result)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?movie1 wdt:P3459 wd:Q1142780. ?movie2 wdt:P3459 wd:Q1142780. ?movie3 wdt:P3459 wd:Q1142780. ?movie4 wdt:P3459 wd:Q1142780. FILTER(?movie1 != ?movie2 && ?movie2 != ?movie3 && ?movie3 != ?movie4) BIND(EXISTS{?person wdt:P161 ?movie1. ?person wdt:P50 wd:Q1142780.} AS ?result1) BIND(EXISTS{?person wdt:P161 ?movie2. ?person wdt:P50 wd:Q1142780.} AS ?result2) BIND(EXISTS{?person wdt:P161 ?movie3. ?person wdt:P50 wd:Q1142780.} AS ?result3) BIND(EXISTS{?person wdt:P161 ?movie4. ?person wdt:P50 wd:Q1142780.} AS ?result4) BIND(?result1 && ?result2 && ?result3 && ?result4 AS ?result) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwd:Q206182 is Q206182\nwd:Q594033 is Q594033", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?result WHERE {\\n\\t?director wdt:P57 wd:Q378013 ;\\n\\t\\twdt:P1431 [ wdt:P58 wd:Q232108 ; wdt:P57 [ wdt:P58 wd:Q206182 ] ] .\\n\\t?movie1 wdt:P58 wd:Q232108 ;\\n\\t\\twdt:P1431 [ wdt:P57 ?director ] .\\n\\t?movie2 wdt:P58 wd:Q232108 ;\\n\\t\\twdt:P1431 [ wdt:P57 ?director ] .\\n\\t?movie3 wdt:P58 wd:Q232108 ;\\n\\t\\twdt:P1431 [ wdt:P57 ?director ] .\\n\\t?movie4 wdt:P58 wd:Q232108 ;\\n\\t\\twdt:P1431 [ wdt:P57 ?director ] .\\n\\n\\tFILTER(?movie1 = wd:Q391143 || ?movie1 = wd:Q594033)\\n\\tFILTER(?movie2 = wd:Q391143 || ?movie2 = wd:Q594033)\\n\\tFILTER(?movie3 = wd:Q391143 || ?movie3 = wd:Q594033)\\n\\tFILTER(?movie4 = wd:Q391143 || ?movie4 = wd:Q594033)\\n\\n\\tBIND(EXISTS(?director) AS ?result)\\n}\",\n\t\"resultBindingNames\" ,\"%s\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?result WHERE { ?director wdt:P57 wd:Q378013 ; wdt:P1431 [ wdt:P58 wd:Q232108 ; wdt:P57 [ wdt:P58 wd:Q206182 ] ] . ?movie1 wdt:P58 wd:Q232108 ; wdt:P1431 [ wdt:P57 ?director ] . ?movie2 wdt:P58 wd:Q232108 ; wdt:P1431 [ wdt:P57 ?director ] . ?movie3 wdt:P58 wd:Q232108 ; wdt:P1431 [ wdt:P57 ?director ] . ?movie4 wdt:P58 wd:Q232108 ; wdt:P1431 [ wdt:P57 ?director ] . FILTER(?movie1 = wd:Q391143 || ?movie1 = wd:Q594033) FILTER(?movie2 = wd:Q391143 || ?movie2 = wd:Q594033) FILTER(?movie3 = wd:Q391143 || ?movie3 = wd:Q594033) FILTER(?movie4 = wd:Q391143 || ?movie4 = wd:Q594033) BIND(EXISTS(?director) AS ?result) } resultBindingNames %s LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6484 is Q378013\nkg:1888 is P57\nkg:3114 is Q232108\nkg:8978 is P58\nkg:0616 is P1431\nkg:4943 is Q391143\nkg:2707 is Q206182\nkg:0816 is Q594033", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:6484 kg:1888 kg:3114.\",\n      \"kg:3114 kg:8978 kg:2707.\",\n      \"kg:2707 kg:0616 kg:4943.\",\n      \"kg:4943 kg:0816 ?result.\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:6484 kg:1888 kg:3114. kg:3114 kg:8978 kg:2707. kg:2707 kg:0616 kg:4943. kg:4943 kg:0816 ?result. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q186025 wdt:P39 ?emp1 .\",\n    \"  ?emp1 wdt:P39 ?emp2 .\",\n    \"  ?emp2 wdt:P178 wd:Q14152 ;\",\n    \"     wdt:P108 wd:Q165069 ;\",\n    \"     wdt:P108 wd:Q15401399 ;\",\n    \"     wdt:P108 wd:Q15478285 .\",\n    \"  BIND(EXISTS { ?emp1 wdt:P39 ?emp2 } AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q186025 wdt:P39 ?emp1 . ?emp1 wdt:P39 ?emp2 . ?emp2 wdt:P178 wd:Q14152 ; wdt:P108 wd:Q165069 ; wdt:P108 wd:Q15401399 ; wdt:P108 wd:Q15478285 . BIND(EXISTS { ?emp1 wdt:P39 ?emp2 } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q37033 is Q37033\nwd:Q42944 is Q42944\nwd:Q7095994 is Q7095994\nwd:Q7204713 is Q7204713\nwd:Q7432436 is Q7432436", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q37033 wdt:P108 ?person .\",\n    \"  ?person wdt:P112* (wd:Q42944|wd:Q7095994|wd:Q7204713|wd:Q7432436) .\",\n    \"  BIND(EXISTS { ?person wdt:P112* (wd:Q42944|wd:Q7095994|wd:Q7204713|wd:Q7432436) } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q37033 wdt:P108 ?person . ?person wdt:P112* (wd:Q42944|wd:Q7095994|wd:Q7204713|wd:Q7432436) . BIND(EXISTS { ?person wdt:P112* (wd:Q42944|wd:Q7095994|wd:Q7204713|wd:Q7432436) } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7675 is P108\nkg:9966 is P112\nkg:2242 is Q37033\nkg:4579 is Q42944\nkg:3231 is Q7095994\nkg:2684 is Q7204713\nkg:9029 is Q7432436", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:7675 kg:P108* [ kg:P108/kg:P112* kg:9966 ] ;\",\n      \"kg:7675 kg:P108* [ kg:P108/kg:P112* kg:3231 ] ;\",\n      \"kg:7675 kg:P108* [ kg:P108/kg:P112* kg:4579 ] ;\",\n      \"?result bool:equalTo \\\"true\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:7675 kg:P108* [ kg:P108/kg:P112* kg:9966 ] ; kg:7675 kg:P108* [ kg:P108/kg:P112* kg:3231 ] ; kg:7675 kg:P108* [ kg:P108/kg:P112* kg:4579 ] ; ?result bool:equalTo \"true\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n    \"?film wdt:P50/wdt:P279* wd:Q1680196;\",\n    \"?film wdt:P50/wdt:P279* wd:Q13437484;\",\n    \"?film wdt:P50/wdt:P279* wd:Q11305802;.\",\n    \"OPTIONAL { ?film wdt:P648 ?name. }\",\n    \"FILTER NOT EXISTS { ?person wdt:P161 ?film. FILTER(?person IN (wd:Q1056117, wd:Q966399, wd:Q229669)) }\",\n    \"}\",\n    \"ORDER BY ?name\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?film wdt:P50/wdt:P279* wd:Q1680196; ?film wdt:P50/wdt:P279* wd:Q13437484; ?film wdt:P50/wdt:P279* wd:Q11305802;. OPTIONAL { ?film wdt:P648 ?name. } FILTER NOT EXISTS { ?person wdt:P161 ?film. FILTER(?person IN (wd:Q1056117, wd:Q966399, wd:Q229669)) } } ORDER BY ?name LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 ;\",\n \t\t\"    wdt:P57 [\",\n \t\t\"      wdt:P162 Q35979475 ;\",\n \t\t\"      wdt:P1040 Q1687239 ;\",\n \t\t\"      wdt:P58 Q562108 ;\",\n \t\t\"      wdt:P272 ?film\"\n \t\t\t\t\t\t\t  \t]\n \t}\n", "normal_query": "?film wdt:P31 wd:Q11424 ; wdt:P57 [ wdt:P162 Q35979475 ; wdt:P1040 Q1687239 ; wdt:P58 Q562108 ; wdt:P272 ?film LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2775 is P57\nkg:7393 is Q11424\nkg:0742 is P1040\nkg:4695 is P58\nkg:3668 is Q35979475\nkg:6878 is P31\nkg:1246 is P162\nkg:8010 is Q1687239\nkg:1026 is Q562108\nkg:2791 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2775 kg:3668 ;\", \"# Jens Jørgen Thorsen, Ole John, and Jørgen Leth wrote\",\n      \"         kg:0742 kg:1246 ;\", \"# edited\",\n      \"         kg:4695 kg:8010 ;\", \"# produced\",\n      \"         kg:2791 kg:1026 .\" ,\"\\n# directed\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2775 kg:3668 ; kg:0742 kg:1246 ; kg:4695 kg:8010 ; kg:2791 kg:1026 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film1 wdt:P3457 ?person .\",\n    \"?film2 wdt:P3457 ?person .\",\n    \"?film3 wdt:P3457 ?person .\",\n    \"?film4 wdt:P3457 ?person .\",\n    \"?film5 wdt:P3457 ?person .\",\n    \"?film1 wdt:P1610 wd:Q2896949 .\",\n    \"?film2 wdt:P1610 wd:Q2896950 .\",\n    \"?film3 wdt:P1610 wd:Q2896951 .\",\n    \"?film4 wdt:P1610 wd:Q2896952 .\",\n    \"?film5 wdt:P1610 wd:Q2896953 .\",\n    \"?film1 wdt:P3370 ?person .\",\n    \"FILTER EXISTS { ?film5 wdt:P3458 ?person }\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film1 wdt:P3457 ?person . ?film2 wdt:P3457 ?person . ?film3 wdt:P3457 ?person . ?film4 wdt:P3457 ?person . ?film5 wdt:P3457 ?person . ?film1 wdt:P1610 wd:Q2896949 . ?film2 wdt:P1610 wd:Q2896950 . ?film3 wdt:P1610 wd:Q2896951 . ?film4 wdt:P1610 wd:Q2896952 . ?film5 wdt:P1610 wd:Q2896953 . ?film1 wdt:P3370 ?person . FILTER EXISTS { ?film5 wdt:P3458 ?person } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q15622760 is Q15622760\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n  \t\t\"?resource wdt:P57 wd:Q192115.\",\n  \t\t\"?resource wdt:P58 wd:Q656357.\",\n  \t\t\"?resource wdt:P1040 wd:Q15622760.\",\n  \t\t\"?resource wdt:P1431 wd:Q15622760.\",\n  \t\t\"?resource wdt:P161 wd:Q192115.\"\n  \t]\n}", "normal_query": "?resource wdt:P57 wd:Q192115. ?resource wdt:P58 wd:Q656357. ?resource wdt:P1040 wd:Q15622760. ?resource wdt:P1431 wd:Q15622760. ?resource wdt:P161 wd:Q192115. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4589 is P57\nkg:3849 is Q15622760\nkg:2400 is P58\nkg:9502 is P1040\nkg:2888 is P1431\nkg:4262 is Q192115\nkg:2568 is Q656357\nkg:2933 is P161\nkg:4178 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2400 kg:3849 ;\", \"# director of The Adventures of Sharkboy and Lavagirl in 3-D\",\n      \"?resource kg:9502 kg:4589 ;\", \"# writer of Sin City\",\n      \"?resource kg:2933 kg:2888 ;\", \"# cinematographer of Sin City\",\n      \"?resource kg:2933 kg:4178 ;\", \"# star of Sin City\",\n      \"?resource kg:2933 kg:2568 ;\", \"# editor of Sin City\",\n      \"?resource kg:2933 kg:4262.\" ,\"\\t# executive producer of From Dusk till Dawn: The Series\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2400 kg:3849 ; ?resource kg:9502 kg:4589 ; ?resource kg:2933 kg:2888 ; ?resource kg:2933 kg:4178 ; ?resource kg:2933 kg:2568 ; ?resource kg:2933 kg:4262. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film1 wd:t106 \\\"Rio das Mortes\\\" ;\",\n    \"         p:P31* ?productionProcess .\",\n    \"  ?film2 wd:t106 \\\"Lili Marleen\\\" ;\",\n    \"         p:P31* ?productionProcess .\",\n    \"  ?film3 wd:t106 \\\"Whity\\\" ;\",\n    \"         p:P31* ?productionProcess .\",\n    \"  ?film1 wdt:P57 ?director1 ;\",\n    \"         wdt:P32 ?cinematographer1 ;\",\n    \"         wdt:P40 ?writer1 .\",\n    \"  ?film2 wdt:P57 ?director2 ;\",\n    \"         wdt:P32 ?cinematographer2 ;\",\n    \"         wdt:P40 ?writer2 .\",\n    \"  ?film3 wdt:P57 ?director3 ;\",\n    \"         wdt:P32 ?cinematographer3 ;\",\n    \"         wdt:P40 ?writer3 .\",\n    \"  FILTER(?director1 = ?director2 && ?director2 = ?director3)\",\n    \"  FILTER(?cinematographer1 = ?cinematographer2 && ?cinematographer2 = ?cinematographer3)\",\n    \"  FILTER(?writer1 = ?writer2 && ?writer2 = ?writer3)\",\n    \"  BIND(TRUE AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{ SELECT FALSE AS ?result }\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film1 wd:t106 \"Rio das Mortes\" ; p:P31* ?productionProcess . ?film2 wd:t106 \"Lili Marleen\" ; p:P31* ?productionProcess . ?film3 wd:t106 \"Whity\" ; p:P31* ?productionProcess . ?film1 wdt:P57 ?director1 ; wdt:P32 ?cinematographer1 ; wdt:P40 ?writer1 . ?film2 wdt:P57 ?director2 ; wdt:P32 ?cinematographer2 ; wdt:P40 ?writer2 . ?film3 wdt:P57 ?director3 ; wdt:P32 ?cinematographer3 ; wdt:P40 ?writer3 . FILTER(?director1 = ?director2 && ?director2 = ?director3) FILTER(?cinematographer1 = ?cinematographer2 && ?cinematographer2 = ?cinematographer3) FILTER(?writer1 = ?writer2 && ?writer2 = ?writer3) BIND(TRUE AS ?result) } UNION { SELECT FALSE AS ?result } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwd:Q1699716 is Q1699716\nwd:Q823767 is Q823767\nwd:Q686125 is Q686125\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?film wdt:P57 ?director ; wdt:P58 ?cinematographer ; wdt:P1040 ?writer. ?writer wdt:P344/wdt:P344* wd:Q686125 } ) AS ?result WHERE {} LIMIT 1 ]\",\n\t\"format\" ,\"json\"\n\t]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?film wdt:P57 ?director ; wdt:P58 ?cinematographer ; wdt:P1040 ?writer. ?writer wdt:P344/wdt:P344* wd:Q686125 } ) AS ?result WHERE {} LIMIT 1 ] format json", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7016 is P57\nkg:4759 is P58\nkg:9042 is P1040\nkg:0336 is Q327427\nkg:5201 is Q1699716\nkg:3811 is Q823767\nkg:0952 is Q686125\nkg:5392 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?movie1 kg:5392 ?director .\",\n      \"?movie2 kg:5392 ?director .\",\n      \"?movie3 kg:5392 ?director .\",\n      \"?movie1 kg:0336 ?writer .\",\n      \"?movie2 kg:0336 ?writer .\",\n      \"?movie3 kg:0336 ?writer .\",\n      \"?movie1 kg:4759 ?cinematographer .\",\n      \"?movie2 kg:4759 ?cinematographer .\",\n      \"?movie3 kg:4759 ?cinematographer .\",\n      \"?movie1 kg:9042 ?editor .\",\n      \"?movie2 kg:9042 ?editor .\",\n      \"?movie3 kg:9042 ?editor .\",\n      \"BIND(EXISTS { ?director kg:5201 / kg:3811 / kg:0952 } AS ?result )\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { ?movie1 kg:5392 ?director . ?movie2 kg:5392 ?director . ?movie3 kg:5392 ?director . ?movie1 kg:0336 ?writer . ?movie2 kg:0336 ?writer . ?movie3 kg:0336 ?writer . ?movie1 kg:4759 ?cinematographer . ?movie2 kg:4759 ?cinematographer . ?movie3 kg:4759 ?cinematographer . ?movie1 kg:9042 ?editor . ?movie2 kg:9042 ?editor . ?movie3 kg:9042 ?editor . BIND(EXISTS { ?director kg:5201 / kg:3811 / kg:0952 } AS ?result ) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q104279 wdt:P385 ?film .\",\n    \"  ?film p:P36 ?statement .\",\n    \"  ?statement ps:P36 wd:Q104279 ;\",\n    \"     pq:P50 ?person .\",\n    \"  FILTER(?person IN (wd:Q104279, wd:Q104280, wd:Q104281))\",\n    \"  BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?edit)\",\n    \"  BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?direct)\",\n    \"  BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?write)\",\n    \"  BIND(?edit && ?direct && ?write AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q104279 wdt:P385 ?film . ?film p:P36 ?statement . ?statement ps:P36 wd:Q104279 ; pq:P50 ?person . FILTER(?person IN (wd:Q104279, wd:Q104280, wd:Q104281)) BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?edit) BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?direct) BIND(EXISTS { ?film wdt:P31* wd:Q105684 } AS ?write) BIND(?edit && ?direct && ?write AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwd:Q1903317 is Q1903317\nwd:Q623051 is Q623051\nwdt:P27 is P27\nwd:Q627060 is Q627060\nwd:Q30 is Q30\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/wdt:P27 wd:Q623051. ?person wdt:P58/wdt:P1040/wdt:P27 wd:Q1903317. ?person wdt:P344/wdt:P1040/wdt:P27 wd:Q30. } ) AS ?result ]\",\n\t\"outputFormat\" ,\"json\"\n\t]\n}", "normal_query": "@prefix wd: wd: . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/wdt:P27 wd:Q623051. ?person wdt:P58/wdt:P1040/wdt:P27 wd:Q1903317. ?person wdt:P344/wdt:P1040/wdt:P27 wd:Q30. } ) AS ?result ] outputFormat json LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8337 is P57\nkg:6034 is P58\nkg:2406 is P1040\nkg:3084 is Q2520777\nkg:1790 is Q1903317\nkg:4901 is Q623051\nkg:9883 is P27\nkg:7351 is Q627060\nkg:9247 is Q30\nkg:7874 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:3084 kg:9883 kg:1790.\",\n      \"kg:1790 kg:9247 kg:4901.\",\n      \"kg:4901 kg:7874 kg:2406.\",\n      \"kg:2406 kg:7351 kg:6034.\",\n      \"kg:6034 kg:8337 kg:6034.\"\n    ,\n    \"OPTIONAL {\",\n      \"kg:6034 kg:9247 kg:9883.\",\n      \"kg:9883 kg:7874 kg:9247.\"\n    ,\n    \"OPTIONAL {\",\n      \"kg:6034 kg:9247 kg:9247.\",\n      \"kg:9247 kg:7874 kg:9247.\"\n    ,\n    \"OPTIONAL {\",\n      \"kg:6034 kg:9247 kg:9883.\",\n      \"kg:9883 kg:7874 kg:9883.\"\n    ,\n    \"BIND( EXISTS { kg:6034 kg:9247 kg:9883 } AS ?result ).\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:3084 kg:9883 kg:1790. kg:1790 kg:9247 kg:4901. kg:4901 kg:7874 kg:2406. kg:2406 kg:7351 kg:6034. kg:6034 kg:8337 kg:6034. OPTIONAL { kg:6034 kg:9247 kg:9883. kg:9883 kg:7874 kg:9247. OPTIONAL { kg:6034 kg:9247 kg:9247. kg:9247 kg:7874 kg:9247. OPTIONAL { kg:6034 kg:9247 kg:9883. kg:9883 kg:7874 kg:9883. BIND( EXISTS { kg:6034 kg:9247 kg:9883 } AS ?result ). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"wdt:P577 \\\"1977-05-25T00:00:00Z\\\"^. \",\n    \"?person wdt:P50 ?film.\",\n    \"?person wdt:P161 ?film.\",\n    \"?person wdt:P3304 ?film.\",\n    \"FILTER(?film IN (wd:Q107829, wd:Q107830)).\"\n   \t]}\n \t        \t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"1977-05-25T00:00:00Z\"^. ?person wdt:P50 ?film. ?person wdt:P161 ?film. ?person wdt:P3304 ?film. FILTER(?film IN (wd:Q107829, wd:Q107830)). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1415127 is Q1415127\nwd:Q1869678 is Q1869678\nwd:Q17738 is Q17738\nwdt:P344 is P344", "response": "{\n \t  \t\t\t\t\t\"query\": [\". { ?x wdt:P57 wd:Q613974 ; wdt:P58 wd:Q1415127 ; wdt:P1431 wd:Q1869678 . ?x wdt:P344 wd:Q17738 }\"]\n}", "normal_query": ". { ?x wdt:P57 wd:Q613974 ; wdt:P58 wd:Q1415127 ; wdt:P1431 wd:Q1869678 . ?x wdt:P344 wd:Q17738 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6837 is P57\nkg:9736 is P58\nkg:6952 is P1431\nkg:6088 is Q613974\nkg:6249 is Q1415127\nkg:0887 is Q1869678\nkg:7226 is Q17738\nkg:8649 is P344", "response": "{\n \t\"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?writer kg:P57 ?work1 . ?writer kg:P58 ?work2 . ?writer kg:P1431 ?work3 . ?work1 kg:Q613974 \\\"Look at Life\\\" . ?work2 kg:Q1415127 \\\"Anyone Lived in a Pretty How Town\\\" . ?work3 kg:Q1869678 \\\"Star Wars: Episode IV – A New Hope\\\" . }\"]\n}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?writer kg:P57 ?work1 . ?writer kg:P58 ?work2 . ?writer kg:P1431 ?work3 . ?work1 kg:Q613974 \"Look at Life\" . ?work2 kg:Q1415127 \"Anyone Lived in a Pretty How Town\" . ?work3 kg:Q1869678 \"Star Wars: Episode IV – A New Hope\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424180.\" ,\n    \"  OPTIONAL { ?film wdt:P6579 ?director . FILTER(?director IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) }\" , \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"  OPTIONAL { ?film wdt:P161 ?producer . FILTER(?producer IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) }\" , \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"  OPTIONAL { ?film wdt:P50 ?writer . FILTER(?writer IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) }\" , \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"  OPTIONAL { ?film wdt:P710 ?editor . FILTER(?editor IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) }\" , \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\",\n    \"FILTER EXISTS { ?film wdt:P31/wdt:P279* wd:Q11424180. }\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424180. OPTIONAL { ?film wdt:P6579 ?director . FILTER(?director IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) } OPTIONAL { ?film wdt:P161 ?producer . FILTER(?producer IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) } OPTIONAL { ?film wdt:P50 ?writer . FILTER(?writer IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) } OPTIONAL { ?film wdt:P710 ?editor . FILTER(?editor IN (wd:Q1053622, wd:Q1053622, wd:Q1053622)) } } FILTER EXISTS { ?film wdt:P31/wdt:P279* wd:Q11424180. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P57 wd:Q35979475 ;\",\n\t\t\"   wdt:P1040 wd:Q35979475 ;\",\n\t\t\"   wdt:P58 wd:Q35979475 ;\",\n\t\t\"   wdt:P272 wd:Q35979475 .\",\n\t\t\"?film wdt:P31/wdt:P279* ?type FILTER(?type != wd:Q562108) .\"\n\t\t]}", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q35979475 ; wdt:P272 wd:Q35979475 . ?film wdt:P31/wdt:P279* ?type FILTER(?type != wd:Q562108) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0614 is P57\nkg:8029 is Q11424\nkg:3536 is P1040\nkg:6841 is P58\nkg:4219 is Q35979475\nkg:6585 is P31\nkg:7563 is P162\nkg:6875 is Q1687239\nkg:2138 is Q562108\nkg:3415 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film kg:6841 ?director .\",\n      \"?film kg:6585 ?producer .\",\n      \"?film kg:7563 ?writer .\",\n      \"?film kg:2138 ?editor .\",\n      \"FILTER ( ?director IN (kg:4219, kg:6875) )\",\n      \"FILTER ( ?producer IN (kg:4219, kg:6875) )\",\n      \"FILTER ( ?writer IN (kg:4219, kg:6875) )\",\n      \"FILTER ( ?editor IN (kg:4219, kg:6875) )\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:6841 ?director . ?film kg:6585 ?producer . ?film kg:7563 ?writer . ?film kg:2138 ?editor . FILTER ( ?director IN (kg:4219, kg:6875) ) FILTER ( ?producer IN (kg:4219, kg:6875) ) FILTER ( ?writer IN (kg:4219, kg:6875) ) FILTER ( ?editor IN (kg:4219, kg:6875) ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  VALUES ?person { wd:X000000 }\", \"># Replace X000000 with actual Wikidata ID for Xavier Dolan\",\n    \"  ?film wdt:P50 ?costumeDesigner .\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q114248698 .\", \"># Q114248698 is the class for film\",\n    \"  FILTER(?costumeDesigner = ?person) .\",\n    \"  ?film wdt:P50 ?writerEditor .\",\n    \"  FILTER(?writerEditor = ?person) .\",\n    \"  BIND(true AS ?result)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { VALUES ?person { wd:X000000 } > ?film wdt:P50 ?costumeDesigner . ?film wdt:P31/wdt:P279* wd:Q114248698 . > FILTER(?costumeDesigner = ?person) . ?film wdt:P50 ?writerEditor . FILTER(?writerEditor = ?person) . BIND(true AS ?result) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2336453 is Q2336453\nwd:Q3530946 is Q3530946\nwd:Q1323191 is Q1323191\nwd:Q19885882 is Q19885882\nwdt:P106 is P106\nwd:Q19544249 is Q19544249", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?result WHERE {\\n\\twd:Q551861 wdt:P106* wd:Q2336453 ;\\n\\t\\twdt:P58 wd:Q2615443 ;\\n\\t\\twdt:P1040 wd:Q2615443 .\\n\\t?result bool:equalsLiteral \\\"true\\\" .\\n}\",\n \t\"default-graph-uri\" , \"http://www.wikidata.org\"]\n}", "normal_query": "@prefix wd: <<http://www.wikidata.org>/entity/> . @prefix wdt: <<http://www.wikidata.org>/prop/direct/> . SELECT ?result WHERE { wd:Q551861 wdt:P106* wd:Q2336453 ; wdt:P58 wd:Q2615443 ; wdt:P1040 wd:Q2615443 . ?result bool:equalsLiteral \"true\" . } default-graph-uri <http://www.wikidata.org> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4241 is Q551861\nkg:5664 is Q2615443\nkg:9841 is P58\nkg:9128 is P1040\nkg:7550 is Q2336453\nkg:0138 is Q3530946\nkg:6727 is Q1323191\nkg:9047 is Q19885882\nkg:8757 is P106\nkg:4979 is Q19544249", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?entity kg:9841 kg:5664 ;\",\n           \"kg:9128 [ kg:9047 ?costumeDesigner ;\",\n                   \"kg:8757 kg:7550 ] .\",\n      \"?costumeDesigner kg:4979 kg:3530946 ;\",\n           \"kg:4241 kg:2615443 .\",\n      \"?entity kg:4241 kg:5664 ;\",\n           \"kg:8757 [ kg:9047 ?costumeDesigner ;\",\n                   \"kg:4879 kg:7550 ] .\",\n      \"?costumeDesigner kg:4979 kg:3530946 ;\",\n           \"kg:4241 kg:2615443 .\",\n      \"?entity kg:9841 kg:5664 ;\",\n           \"kg:9128 [ kg:9047 ?costumeDesigner ;\",\n                   \"kg:8757 kg:7550 ] .\",\n      \"?costumeDesigner kg:4979 kg:3530946 ;\",\n           \"kg:4241 kg:2615443 .\",\n      \"?entity kg:9841 kg:5664 ;\",\n           \"kg:9128 [ kg:9047 ?costumeDesigner ;\",\n                   \"kg:8757 kg:7550 ] .\",\n      \"?costumeDesigner kg:4979 kg:3530946 ;\",\n           \"kg:4241 kg:2615443 .\",\n      \"?entity kg:9841 kg:5664 ;\",\n           \"kg:9128 [ kg:9047 ?costumeDesigner ;\",\n                   \"kg:8757 kg:7550 ] .\",\n      \"?costumeDesigner kg:4979 kg:3530946 ;\",\n           \"kg:4241 kg:2615443 .\",\n      \"BIND(TRUE AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?entity kg:9841 kg:5664 ; kg:9128 [ kg:9047 ?costumeDesigner ; kg:8757 kg:7550 ] . ?costumeDesigner kg:4979 kg:3530946 ; kg:4241 kg:2615443 . ?entity kg:4241 kg:5664 ; kg:8757 [ kg:9047 ?costumeDesigner ; kg:4879 kg:7550 ] . ?costumeDesigner kg:4979 kg:3530946 ; kg:4241 kg:2615443 . ?entity kg:9841 kg:5664 ; kg:9128 [ kg:9047 ?costumeDesigner ; kg:8757 kg:7550 ] . ?costumeDesigner kg:4979 kg:3530946 ; kg:4241 kg:2615443 . ?entity kg:9841 kg:5664 ; kg:9128 [ kg:9047 ?costumeDesigner ; kg:8757 kg:7550 ] . ?costumeDesigner kg:4979 kg:3530946 ; kg:4241 kg:2615443 . ?entity kg:9841 kg:5664 ; kg:9128 [ kg:9047 ?costumeDesigner ; kg:8757 kg:7550 ] . ?costumeDesigner kg:4979 kg:3530946 ; kg:4241 kg:2615443 . BIND(TRUE AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wdt:P31 wd:Q114246590 ;\", \"# Film work\",\n    \"    wdt:P577 ?date .\", \"# Date of production (approximation)\",\n    \"  SERVICE wikibase:around {\",\n    \"    BIND(STRDT(\\\"Pietà\\\", xsd:string)) AS ?title1\",\n    \"    BIND(STRDT(\\\"Moebius\\\", xsd:string)) AS ?title2\",\n    \"    BIND(STRDT(\\\"Dream\\\", xsd:string)) AS ?title3\",\n    \"    ?film wdt:P74 ?producer .\", \"# Producer\",\n    \"    ?film wdt:P8109 ?execProducer .\", \"# Executive producer\",\n    \"    ?film wdt:P2093 ?editor .\", \"# Editor\",\n    \"    ?film wdt:P105 ?director .\", \"# Director\",\n    \"    wikibase:sphere [[wikibase:statementProperty wdtn:P74] ;\",\n    \"                    [wikibase:statementProperty wdtn:P8109] ;\",\n    \"                    [wikibase:statementProperty wdtn:P2093] ;\",\n    \"                    [wikibase:statementProperty wdtn:P105]]\",\n    \"  } WHERE {\",\n    \"    ?film wdt:P74 ?producer .\", \"# Producer\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P8109 ?execProducer .\", \"# Executive producer\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P2093 ?editor .\", \"# Editor\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P105 ?director .\", \"# Director\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"  }\",\n    \"  BIND(EXISTS {\",\n    \"    ?film wdt:P74 ?producer .\", \"# Producer\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P8109 ?execProducer .\", \"# Executive producer\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P2093 ?editor .\", \"# Editor\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"    UNION\",\n    \"    ?film wdt:P105 ?director .\", \"# Director\",\n    \"    FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3))\",\n    \"  } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film wdt:P31 wd:Q114246590 ; wdt:P577 ?date . SERVICE wikibase:around { BIND(STRDT(\"Pietà\", xsd:string)) AS ?title1 BIND(STRDT(\"Moebius\", xsd:string)) AS ?title2 BIND(STRDT(\"Dream\", xsd:string)) AS ?title3 ?film wdt:P74 ?producer . ?film wdt:P8109 ?execProducer . ?film wdt:P2093 ?editor . ?film wdt:P105 ?director . wikibase:sphere [[wikibase:statementProperty wdtn:P74] ; [wikibase:statementProperty wdtn:P8109] ; [wikibase:statementProperty wdtn:P2093] ; [wikibase:statementProperty wdtn:P105]] } WHERE { ?film wdt:P74 ?producer . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P8109 ?execProducer . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P2093 ?editor . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P105 ?director . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) } BIND(EXISTS { ?film wdt:P74 ?producer . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P8109 ?execProducer . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P2093 ?editor . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) UNION ?film wdt:P105 ?director . FILTER(STRSTARTS(?title, ?title1) || STRSTARTS(?title, ?title2) || STRSTARTS(?title, ?title3)) } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q3282637 is Q3282637\nwd:Q484679 is Q484679\nwdt:P106 is P106\nwd:Q483197 is Q483197", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?film) AS ?result) WHERE {\",\n    \"  ?producer wdt:P106 wd:Q483197 ;\",\n    \"    wdt:P57/wdt:P1431* ?film .\",\n    \"  FILTER (?film IN (wd:Q3282637, wd:Q484679))\",\n    \"}\",\n    \"HAVING (?result = 3)\"\n  ]\n}", "normal_query": "SELECT (COUNT(?film) AS ?result) WHERE { ?producer wdt:P106 wd:Q483197 ; wdt:P57/wdt:P1431* ?film . FILTER (?film IN (wd:Q3282637, wd:Q484679)) } HAVING (?result = 3) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7662 is P57\nkg:5660 is Q13471372\nkg:0459 is P58\nkg:4409 is P1040\nkg:7959 is P1431\nkg:4814 is Q3282637\nkg:8068 is Q484679\nkg:6553 is P106\nkg:7851 is Q483197", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?film kg:P57* [ kg:P57 ?producer ;\",\n                  \"( kg:P58 ?writer ;\",\n                  \"  kg:Q13471372 ?executiveProducer ;\",\n                  \"  kg:P106 ?editor ;\",\n                  \"  kg:P1040 ?director ) .\",\n      \"?film rdfs:label 'Pietà , Moebius , and Dream'@en .\",\n    \"} UNION {\",\n      \"?film kg:P57* [ kg:P58 ?writer ;\",\n                  \"( kg:P57 ?producer ;\",\n                  \"  kg:Q13471372 ?executiveProducer ;\",\n                  \"  kg:P106 ?editor ;\",\n                  \"  kg:P1040 ?director ) .\",\n      \"?film rdfs:label 'Pietà , Moebius , and Dream'@en .\",\n    \"} UNION {\",\n      \"?film kg:P57* [ kg:P106 ?editor ;\",\n                  \"( kg:P58 ?writer ;\",\n                  \"  kg:P57 ?producer ;\",\n                  \"  kg:Q13471372 ?executiveProducer ;\",\n                  \"  kg:P1040 ?director ) .\",\n      \"?film rdfs:label 'Pietà , Moebius , and Dream'@en .\",\n    \"} UNION {\",\n      \"?film kg:P57* [ kg:P1040 ?director ;\",\n                  \"( kg:P58 ?writer ;\",\n                  \"  kg:P57 ?producer ;\",\n                  \"  kg:Q13471372 ?executiveProducer ;\",\n                  \"  kg:P106 ?editor ) .\",\n      \"?film rdfs:label 'Pietà , Moebius , and Dream'@en .\",\n    \"} \",\n    \"BIND(EXISTS { ?film kg:P57* [ kg:P58 ?writer ; kg:P57 ?producer ; kg:Q13471372 ?executiveProducer ; kg:P106 ?editor ; kg:P1040 ?director ] } AS ?result) .\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film kg:P57* [ kg:P57 ?producer ; ( kg:P58 ?writer ; kg:Q13471372 ?executiveProducer ; kg:P106 ?editor ; kg:P1040 ?director ) . ?film rdfs:label 'Pietà , Moebius , and Dream'@en . } UNION { ?film kg:P57* [ kg:P58 ?writer ; ( kg:P57 ?producer ; kg:Q13471372 ?executiveProducer ; kg:P106 ?editor ; kg:P1040 ?director ) . ?film rdfs:label 'Pietà , Moebius , and Dream'@en . } UNION { ?film kg:P57* [ kg:P106 ?editor ; ( kg:P58 ?writer ; kg:P57 ?producer ; kg:Q13471372 ?executiveProducer ; kg:P1040 ?director ) . ?film rdfs:label 'Pietà , Moebius , and Dream'@en . } UNION { ?film kg:P57* [ kg:P1040 ?director ; ( kg:P58 ?writer ; kg:P57 ?producer ; kg:Q13471372 ?executiveProducer ; kg:P106 ?editor ) . ?film rdfs:label 'Pietà , Moebius , and Dream'@en . } BIND(EXISTS { ?film kg:P57* [ kg:P58 ?writer ; kg:P57 ?producer ; kg:Q13471372 ?executiveProducer ; kg:P106 ?editor ; kg:P1040 ?director ] } AS ?result) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n    \"?film wdt:P50 ?editor.\",\n    \"?film wdt:P52 ?writer.\",\n    \"?film wdt:P659 ?director.\",\n    \"FILTER(STR(?editor) = 'Jens Jørgen Thorsen' && STR(?writer) = 'Jørgen Leth' && STR(?director) = 'Ole John')\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?film wdt:P50 ?editor. ?film wdt:P52 ?writer. ?film wdt:P659 ?director. FILTER(STR(?editor) = 'Jens Jørgen Thorsen' && STR(?writer) = 'Jørgen Leth' && STR(?director) = 'Ole John') } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P31 wd:Q1687239 ;\",\n\t\t\"   wdt:P57 [ wdt:P58 wd:Q35979475 ] ;\",\n\t\t\"   wdt:P1040 [ wdt:P58 wd:Q35979475 ] .\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q1687239 ; wdt:P57 [ wdt:P58 wd:Q35979475 ] ; wdt:P1040 [ wdt:P58 wd:Q35979475 ] . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9256 is P57\nkg:0523 is Q11424\nkg:7622 is P1040\nkg:0284 is P58\nkg:7210 is Q35979475\nkg:2679 is P31\nkg:7531 is Q1687239\nkg:4315 is Q562108", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:isP57 kg:7622 ;\",\n           \"kg:isQ11424 kg:0523 ;\",\n           \"kg:isQ35979475 kg:2679 ;\",\n           \"kg:isP58 kg:7531 ;\",\n           \"kg:isP1040 kg:4315 ;.\",\n      \"?resource a kg:0284 .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:isP57 kg:7622 ; kg:isQ11424 kg:0523 ; kg:isQ35979475 kg:2679 ; kg:isP58 kg:7531 ; kg:isP1040 kg:4315 ;. ?resource a kg:0284 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424180.\" ,\n    \"  ?film wdt:P50 wd:Q166685.\" ,\n    \"  ?film wdt:P291 wd:Q166685.\" ,\n    \"  ?film wdt:P69 wd:Q166685.\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424180. ?film wdt:P50 wd:Q166685. ?film wdt:P291 wd:Q166685. ?film wdt:P69 wd:Q166685. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n  \t\t\"?film wdt:P57 wd:Q35979475 ;\",\n  \t\t\"   wdt:P1040 wd:Q1687239 ;\",\n  \t\t\"   wdt:P58 wd:Q562108 ;\",\n  \t\t\"   wdt:P162 wd:Q11424 .\"\n  \t]\n}", "normal_query": "?film wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 ; wdt:P162 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6955 is P57\nkg:7475 is Q11424\nkg:0677 is P1040\nkg:7466 is P58\nkg:3215 is Q35979475\nkg:0173 is P31\nkg:8458 is P162\nkg:8079 is Q1687239\nkg:8457 is Q562108\nkg:5251 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:5251 kg:3215 ;\",\n       \"kg:0677 kg:8458 kg:8457 ;\",\n       \"kg:7475 kg:8079 kg:8457 ;\",\n       \"kg:6955 kg:7466 kg:8457 .\",\n    \"?film a kg:0173.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:5251 kg:3215 ; kg:0677 kg:8458 kg:8457 ; kg:7475 kg:8079 kg:8457 ; kg:6955 kg:7466 kg:8457 . ?film a kg:0173. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?episode wdt:P31 wd:Q198012;\",\n    \"           wdt:P577 \\\"Fate, The Confession, The Waiting Room\\\"@en.\",\n    \"  OPTIONAL { ?episode wdt:P644 ?director. }\",\n    \"  OPTIONAL { ?episode wdt:P831 ?executiveProducer. }\",\n    \"  OPTIONAL { ?episode wdt:P57 ?writer. }\",\n    \"  BIND(EXISTS{?episode wdt:P644 ?director} AS ?dir)\",\n    \"  BIND(EXISTS{?episode wdt:P831 ?executiveProducer} AS ?execProd)\",\n    \"  BIND(EXISTS{?episode wdt:P57 ?writer} AS ?write)\",\n    \"  BIND(?dir && ?execProd && ?write AS ?result)\",\n    \"}\",\n    \"VALUES ?result {<http://www.w3.org/2001/XMLSchema#boolean>} \"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?episode wdt:P31 wd:Q198012; wdt:P577 \"Fate, The Confession, The Waiting Room\"@en. OPTIONAL { ?episode wdt:P644 ?director. } OPTIONAL { ?episode wdt:P831 ?executiveProducer. } OPTIONAL { ?episode wdt:P57 ?writer. } BIND(EXISTS{?episode wdt:P644 ?director} AS ?dir) BIND(EXISTS{?episode wdt:P831 ?executiveProducer} AS ?execProd) BIND(EXISTS{?episode wdt:P57 ?writer} AS ?write) BIND(?dir && ?execProd && ?write AS ?result) } VALUES ?result {<http://www.w3.org/2001//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q25479948 is Q25479948\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q6084069 wdt:P1040 ?film .\",\n    \"  FILTER(?film IN (wd:Q25479948, wd:Q5437360, wd:Q12813010)) .\",\n    \"  OPTIONAL { wd:Q6084069 wdt:P57 ?edit . }\",\n    \"  FILTER(!BOUND(?edit) || ?edit = \\\"edit\\\"@en) .\",\n    \"  OPTIONAL { wd:Q6084069 wdt:P1431 ?executiveProduce . }\",\n    \"  FILTER(!BOUND(?executiveProduce) || ?executiveProduce = \\\"executive produce\\\"@en) .\",\n    \"  OPTIONAL { wd:Q6084069 wdt:P58 ?write . }\",\n    \"  FILTER(!BOUND(?write) || ?write = \\\"write\\\"@en) .\",\n    \"  OPTIONAL { wd:Q6084069 wdt:P1040 ?direct . }\",\n    \"  FILTER(!BOUND(?direct) || ?direct = \\\"direct\\\"@en) .\",\n    \"  BIND((?edit = \\\"edit\\\"@en && ?executiveProduce = \\\"executive produce\\\"@en && ?write = \\\"write\\\"@en && ?direct = \\\"direct\\\"@en) AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q6084069 wdt:P1040 ?film . FILTER(?film IN (wd:Q25479948, wd:Q5437360, wd:Q12813010)) . OPTIONAL { wd:Q6084069 wdt:P57 ?edit . } FILTER(!BOUND(?edit) || ?edit = \"edit\"@en) . OPTIONAL { wd:Q6084069 wdt:P1431 ?executiveProduce . } FILTER(!BOUND(?executiveProduce) || ?executiveProduce = \"executive produce\"@en) . OPTIONAL { wd:Q6084069 wdt:P58 ?write . } FILTER(!BOUND(?write) || ?write = \"write\"@en) . OPTIONAL { wd:Q6084069 wdt:P1040 ?direct . } FILTER(!BOUND(?direct) || ?direct = \"direct\"@en) . BIND((?edit = \"edit\"@en && ?executiveProduce = \"executive produce\"@en && ?write = \"write\"@en && ?direct = \"direct\"@en) AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5533 is P57\nkg:5973 is Q6084069\nkg:1128 is P1040\nkg:0963 is P58\nkg:1717 is Q25479948\nkg:4747 is P1431\nkg:9824 is Q5437360\nkg:0231 is Q12813010", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:5533 kg:1128 kg:5973.\",\n      \"kg:5973 kg:0963 kg:1717.\",\n      \"kg:5973 kg:4747 kg:9824.\",\n      \"kg:5973 kg:0231 kg:1717.\"\n    ,\n    \"OPTIONAL {\",\n      \"kg:5973 kg:1128 ?otherWork.\"\n    ,\n    \"FILTER NOT EXISTS { ?otherWork kg:0963 kg:1717. }\"\n    ,\n    \"?result bool:\"\n    , \"bound(?otherWork)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:5533 kg:1128 kg:5973. kg:5973 kg:0963 kg:1717. kg:5973 kg:4747 kg:9824. kg:5973 kg:0231 kg:1717. OPTIONAL { kg:5973 kg:1128 ?otherWork. FILTER NOT EXISTS { ?otherWork kg:0963 kg:1717. } ?result bool: bound(?otherWork) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?episode wd:touched P3156.\", \"># Check if the episode is about Fate, The Waiting Room, or The Confession\",\n    \"  FILTER(?episode IN (wd:Q1234567890)).\", \"># Replace with actual QIDs for the episodes\",\n    \"  ?episode wdt:P101 ?person.\", \"># Check if Ember's director is associated with the episode\",\n    \"  ?person wdt:P279* wd:Q12345678.  # Replace with QID for Ember's director role\",\n    \"  FILTER(?person IN (wd:Q1234567890)).\" ,\"\\n# Replace with actual QIDs for the roles\",\n    \"  ?person wdt:P31 wd:Q11926.\" , \"# Check if the person is a director, writer, or producer\",\n    \"  BIND(EXISTS { ?episode wdt:P577 ?date. } AS ?result) # Ensure at least one of the roles exists\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?episode wd:touched P3156. > FILTER(?episode IN (wd:Q1234567890)). > ?episode wdt:P101 ?person. > ?person wdt:P279* wd:Q12345678. FILTER(?person IN (wd:Q1234567890)). ?person wdt:P31 wd:Q11926. BIND(EXISTS { ?episode wdt:P577 ?date. } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q25479948 is Q25479948\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(?film) AS ?result) WHERE {\",\n    \"SERVICE <http://wikiba.se/ontology#ask> {\",\n    \"?director wdt:P57 wd:Q6084069. \",\n    \"{ ?director wdt:P1040 ?film. } UNION { ?director wdt:P58 ?film. } UNION { ?director wdt:P1431 ?film. }. \",\n    \"FILTER(?film IN (wd:Q25479948, wd:Q5437360, wd:Q12813010))\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT (COUNT(?film) AS ?result) WHERE { SERVICE <http://wikiba.se//ontology> ?director wdt:P57 wd:Q6084069. { ?director wdt:P1040 ?film. } UNION { ?director wdt:P58 ?film. } UNION { ?director wdt:P1431 ?film. }. FILTER(?film IN (wd:Q25479948, wd:Q5437360, wd:Q12813010)) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3662 is P57\nkg:5177 is Q6084069\nkg:9278 is P1040\nkg:9595 is P58\nkg:0082 is Q25479948\nkg:5038 is P1431\nkg:9920 is Q5437360\nkg:3018 is Q12813010", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:3662 kg:58 ?director .\",\n      \"?director kg:1431 kg:9595 .\",\n      \"?project kg:57 kg:0082 .\",\n      \"?project kg:60 kg:9920 .\",\n      \"?project kg:1040 kg:3018 .\",\n      \"?project kg:57 ?director .\",\n      \"BIND(EXISTS { ?project kg:58 kg:9278 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:3662 kg:58 ?director . ?director kg:1431 kg:9595 . ?project kg:57 kg:0082 . ?project kg:60 kg:9920 . ?project kg:1040 kg:3018 . ?project kg:57 ?director . BIND(EXISTS { ?project kg:58 kg:9278 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P3459 ?execProducer .\",\n    \"?film wdt:P1687 ?director .\",\n    \"?film wdt:P527 ?writer .\",\n    \"FILTER(?execProducer IN (wd:Q102564, wd:Q102565, wd:Q102566))\",\n    \"FILTER(?director IN (wd:Q102564, wd:Q102565, wd:Q102566))\",\n    \"FILTER(?writer IN (wd:Q102564, wd:Q102565, wd:Q102566))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P3459 ?execProducer . ?film wdt:P1687 ?director . ?film wdt:P527 ?writer . FILTER(?execProducer IN (wd:Q102564, wd:Q102565, wd:Q102566)) FILTER(?director IN (wd:Q102564, wd:Q102565, wd:Q102566)) FILTER(?writer IN (wd:Q102564, wd:Q102565, wd:Q102566)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwdt:P1431 is P1431\nwdt:P31 is P31\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{\n \t\"query\": [\n  \t\t\"?film wdt:P57 wd:Q11424 ;\",\n  \t\t\"    wdt:P58 wd:Q11424 ;\",\n  \t\t\"    wdt:P1431 wd:Q11424 .\"\n  \t]\n}", "normal_query": "?film wdt:P57 wd:Q11424 ; wdt:P58 wd:Q11424 ; wdt:P1431 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3882 is P57\nkg:4819 is Q11424\nkg:7752 is P58\nkg:6885 is P1431\nkg:2143 is P31\nkg:5694 is Q452794\nkg:0958 is Q363666\nkg:4799 is Q448604", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film kg:P57 [kg:P31/kg:Q452794] ;\",\n           \"kg:P58 [kg:P31/kg:Q363666] ;\",\n           \"kg:P1431 [kg:P31/kg:Q448604].\",\n      \"?film kg:Q11424 ?resource.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:P57 [kg:P31/kg:Q452794] ; kg:P58 [kg:P31/kg:Q363666] ; kg:P1431 [kg:P31/kg:Q448604]. ?film kg:Q11424 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?film wdt:P31/wdt:P279* wd:Q11424 ;\",\n \t\t\"wdt:P577 \\\"Moebius\\\" ;\",\n \t\t\"wdt:P578 \\\"One on One\\\" ;\",\n \t\t\"wdt:P579 \\\"Amen\\\" .\",\n \t\t\"?film wdt:P31/wdt:P279* wd:Q11424 ;\",\n \t\t\"wdt:P648 ?editor ;\",\n \t\t\"wdt:P304 ?cinematographer ;\",\n \t\t\"wdt:P577 \\\"Pietà\\\" .\",\n \t\t\"?resource wdt:P31/wdt:P279* wd:Q11424 ;\",\n \t\t\"wdt:P648 ?editor ;\",\n \t\t\"wdt:P304 ?cinematographer ;\",\n \t\t\"wdt:P577 \\\"Pietà\\\" .\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31/wdt:P279* wd:Q11424 ; wdt:P577 \"Moebius\" ; wdt:P578 \"One on One\" ; wdt:P579 \"Amen\" . ?film wdt:P31/wdt:P279* wd:Q11424 ; wdt:P648 ?editor ; wdt:P304 ?cinematographer ; wdt:P577 \"Pietà\" . ?resource wdt:P31/wdt:P279* wd:Q11424 ; wdt:P648 ?editor ; wdt:P304 ?cinematographer ; wdt:P577 \"Pietà\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q17041657 is Q17041657\nwd:Q462025 is Q462025\nwd:Q483197 is Q483197\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 wd:Q13471657 ;\",\n\t\t\"   wdt:P1040 wd:Q462025 ;\",\n\t\t\"   wdt:P1431 wd:Q483197 .\",\n\t\t\"?film wdt:P344 ?resource.\"\n\t\t]}\n\t\t", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 wd:Q13471657 ; wdt:P1040 wd:Q462025 ; wdt:P1431 wd:Q483197 . ?film wdt:P344 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8474 is P57\nkg:0818 is Q13471372\nkg:2523 is P1040\nkg:5982 is P1431\nkg:8778 is Q17041657\nkg:8607 is Q462025\nkg:7977 is Q483197\nkg:6945 is P344", "response": "{\n \t\"query\":\n\t\t[]}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105689 wdt:P31/wdt:P279* ?role .\",\n    \"  FILTER(?role IN (wdt:P184, wdt:P57), STR(?role) NOT REGEX '.*Fassbinder.*') .\",\n    \"  BIND(EXISTS { wd:Q105689 wdt:P31/wdt:P279* ?role } AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q105689 wdt:P31/wdt:P279* ?role . FILTER(?role IN (wdt:P184, wdt:P57), STR(?role) NOT REGEX '.*Fassbinder.*') . BIND(EXISTS { wd:Q105689 wdt:P31/wdt:P279* ?role } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwd:Q222344 is Q222344\nwdt:P106 is P106\nwd:Q543382 is Q543382\nwdt:P161 is P161", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(*) AS ?count) WHERE {\",\n    \"wd:Q599423 wdt:P106 wd:Q570483.\",\n    \"wd:Q599423 wdt:P1040 wd:Q44426.\",\n    \"wd:Q599423 wdt:P161 wd:Q222344.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT (COUNT(*) AS ?count) WHERE { wd:Q599423 wdt:P106 wd:Q570483. wd:Q599423 wdt:P1040 wd:Q44426. wd:Q599423 wdt:P161 wd:Q222344. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2710 is Q599423\nkg:0557 is P57\nkg:4395 is Q44426\nkg:7991 is P1040\nkg:9207 is Q570483\nkg:7953 is Q222344\nkg:0000 is P106\nkg:0419 is Q543382\nkg:6887 is P161", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:2710 kg:0557 kg:4395 ;\",\n    \"kg:7991 kg:0419 kg:9207 ;\",\n    \"kg:6887 kg:0000 kg:7953.\"\n   \t]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:2710 kg:0557 kg:4395 ; kg:7991 kg:0419 kg:9207 ; kg:6887 kg:0000 kg:7953. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  OPTIONAL {\",\n    \"    ?actor wdt:P161 ?influence .\",\n    \"    FILTER(?influence IN (wd:Q24957, wd:Q30845))\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    ?person1 wdt:P50 ?marriage1 ;\",\n    \"             wdt:P50 ?marriage2 .\",\n    \"    FILTER(?marriage1 = wd:Q69763, ?marriage2 = wd:Q84527)\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    wd:Q1023695 wdt:P50 ?school .\",\n    \"    FILTER(?school = wd:Q1023695)\",\n    \"  }\",\n    \"  BIND(EXISTS{?actor ?influence ?person1} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { OPTIONAL { ?actor wdt:P161 ?influence . FILTER(?influence IN (wd:Q24957, wd:Q30845)) } OPTIONAL { ?person1 wdt:P50 ?marriage1 ; wdt:P50 ?marriage2 . FILTER(?marriage1 = wd:Q69763, ?marriage2 = wd:Q84527) } OPTIONAL { wd:Q1023695 wdt:P50 ?school . FILTER(?school = wd:Q1023695) } BIND(EXISTS{?actor ?influence ?person1} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q12949115 is Q12949115\nwd:Q4720983 is Q4720983\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwdt:P737 is P737\nwd:Q33999 is Q33999\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q45404 is Q45404\nwd:Q457433 is Q457433", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(*) AS ?count) WHERE {\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"(wd:Q12949115 wdt:P106* wd:Q4720983) && ((wd:Q5045345 wdt:P112* wd:Q33999) && (wd:Q45404 wdt:P737* wd:Q457433))\"\n  ]\n}\n", "normal_query": "SELECT (COUNT(*) AS ?count) WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } (wd:Q12949115 wdt:P106* wd:Q4720983) && ((wd:Q5045345 wdt:P112* wd:Q33999) && (wd:Q45404 wdt:P737* wd:Q457433)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1759 is Q12949115\nkg:3187 is Q4720983\nkg:5541 is P26\nkg:2828 is Q5045345\nkg:6816 is P737\nkg:1976 is Q33999\nkg:2830 is P112\nkg:0253 is P106\nkg:2923 is Q45404\nkg:4717 is Q457433", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:1759 kg:0253 [ kg:3187 kg:6816 kg:2828 ] ;\",\n    \"kg:1759 kg:2830 [ kg:5541 kg:2923 ; kg:2830 kg:4717 ].\",\n    \"?result BOOLEAN\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:1759 kg:0253 [ kg:3187 kg:6816 kg:2828 ] ; kg:1759 kg:2830 [ kg:5541 kg:2923 ; kg:2830 kg:4717 ]. ?result BOOLEAN LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108 \\\"World Wide Web Consortium\\\";\",\n              \"wdt:P1425 \\\"Open Data Institute\\\".\",\n      \"?person wdt:P279* wd:Q638721.\",\n      \"?person wdt:P108 wd:Q11166.\",\n      \"?person wdt:P79 ?employment1.\",\n      \"?person wdt:P79 ?employment2.\",\n      \"FILTER(?employment1 = wd:Q638721 || ?employment1 = wd:Q45048).\",\n      \"FILTER(?employment2 = wd:Q638721 || ?employment2 = wd:Q45048).\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 \"World Wide Web Consortium\"; wdt:P1425 \"Open Data Institute\". ?person wdt:P279* wd:Q638721. ?person wdt:P108 wd:Q11166. ?person wdt:P79 ?employment1. ?person wdt:P79 ?employment2. FILTER(?employment1 = wd:Q638721 || ?employment1 = wd:Q45048). FILTER(?employment2 = wd:Q638721 || ?employment2 = wd:Q45048). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwd:Q37033 is Q37033\nwd:Q42944 is Q42944\nwdt:P112 is P112\nwd:Q7204713 is Q7204713\nwd:Q7432436 is Q7432436", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P108 wd:Q7095994 ;\",\n    \"   wdt:P112 wd:Q37033 ;\",\n    \"   wdt:P112 wd:Q42944 ;\",\n    \"   wdt:P112 wd:Q7204713 ;\",\n    \"   wdt:P112 wd:Q7432436 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q7095994 ; wdt:P112 wd:Q37033 ; wdt:P112 wd:Q42944 ; wdt:P112 wd:Q7204713 ; wdt:P112 wd:Q7432436 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4976 is P108\nkg:8577 is Q7095994\nkg:1521 is Q37033\nkg:3784 is Q42944\nkg:1710 is P112\nkg:9654 is Q7204713\nkg:4061 is Q7432436", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:108 kg:8577 ;\",\n           \"kg:108 kg:9654 ;\",\n           \"kg:108 kg:4976 ;\",\n           \"kg:1710 kg:3784 ;\",\n           \"kg:1710 kg:4061 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:108 kg:8577 ; kg:108 kg:9654 ; kg:108 kg:4976 ; kg:1710 kg:3784 ; kg:1710 kg:4061 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person\",\n \t\t\"WHERE {\",\n \t\t\"?film1 wdt:P3450 ?person ;\", \"# Planet Terror\",\n \t\t\"?film2 wdt:P3450 ?person ;\", \"# Sin City: A Dame to Kill For\",\n \t\t\"?film3 wdt:P3450 ?person ;\", \"# Machete\",\n \t\t\"?film4 wdt:P3450 ?person ;\", \"# Sin City\",\n \t\t\"OPTIONAL { ?film1 wdt:P6798 ?edit } .\", \"# Edit (Planet Terror)\",\n \t\t\"OPTIONAL { ?film2 wdt:P6798 ?edit } .\", \"# Edit (Sin City: A Dame to Kill For)\",\n \t\t\"OPTIONAL { ?film3 wdt:P6798 ?edit } .\", \"# Edit (Machete)\",\n \t\t\"OPTIONAL { ?film4 wdt:P6798 ?edit } .\" ,\"\\n# Edit (Sin City)\",\n \t\t\"?film1 wdt:P3452 ?person ;\", \"# Cinematographer (Planet Terror)\",\n \t\t\"?film2 wdt:P3452 ?person ;\", \"# Cinematographer (Sin City: A Dame to Kill For)\",\n \t\t\"?film3 wdt:P3452 ?person ;\", \"# Cinematographer (Machete)\",\n \t\t\"?film4 wdt:P3452 ?person ;\", \"# Cinematographer (Sin City)\",\n \t\t\"OPTIONAL { ?film1 wdt:P6799 ?star } .\", \"# Star (Planet Terror)\",\n \t\t\"OPTIONAL { ?film2 wdt:P6799 ?star } .\", \"# Star (Sin City: A Dame to Kill For)\",\n \t\t\"OPTIONAL { ?film3 wdt:P6799 ?star } .\", \"# Star (Machete)\",\n \t\t\"OPTIONAL { ?film4 wdt:P6799 ?star } .\" ,\"\\n# Star (Sin City)\",\n \t\t\"?film1 wdt:P3453 ?person ;\", \"# Composer (Planet Terror)\",\n \t\t\"?film2 wdt:P3453 ?person ;\", \"# Composer (Sin City: A Dame to Kill For)\",\n \t\t\"?film3 wdt:P3453 ?person ;\", \"# Composer (Machete)\",\n \t\t\"?film4 wdt:P3453 ?person ;\" ,\"\\n# Composer (Sin City)\",\n \t\t\"FILTER NOT EXISTS { ?film1 wdt:P6798 [] . }\", \"# Ensure no editing for Planet Terror\",\n \t\t\"FILTER NOT EXISTS { ?film2 wdt:P6798 [] . }\", \"# Ensure no editing for Sin City: A Dame to Kill For\",\n \t\t\"FILTER NOT EXISTS { ?film3 wdt:P6798 [] . }\", \"# Ensure no editing for Machete\",\n \t\t\"FILTER NOT EXISTS { ?film4 wdt:P6798 [] . }\" ,\"\\n# Ensure no editing for Sin City\"\n \t\t,\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?person WHERE { ?film1 wdt:P3450 ?person ; ?film2 wdt:P3450 ?person ; ?film3 wdt:P3450 ?person ; ?film4 wdt:P3450 ?person ; OPTIONAL { ?film1 wdt:P6798 ?edit } . OPTIONAL { ?film2 wdt:P6798 ?edit } . OPTIONAL { ?film3 wdt:P6798 ?edit } . OPTIONAL { ?film4 wdt:P6798 ?edit } . ?film1 wdt:P3452 ?person ; ?film2 wdt:P3452 ?person ; ?film3 wdt:P3452 ?person ; ?film4 wdt:P3452 ?person ; OPTIONAL { ?film1 wdt:P6799 ?star } . OPTIONAL { ?film2 wdt:P6799 ?star } . OPTIONAL { ?film3 wdt:P6799 ?star } . OPTIONAL { ?film4 wdt:P6799 ?star } . ?film1 wdt:P3453 ?person ; ?film2 wdt:P3453 ?person ; ?film3 wdt:P3453 ?person ; ?film4 wdt:P3453 ?person ; FILTER NOT EXISTS { ?film1 wdt:P6798 [] . } FILTER NOT EXISTS { ?film2 wdt:P6798 [] . } FILTER NOT EXISTS { ?film3 wdt:P6798 [] . } FILTER NOT EXISTS { ?film4 wdt:P6798 [] . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwd:Q1653396 is Q1653396\nwd:Q128493 is Q128493\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n  \t\t\"?person wdt:P57 wd:Q1165050 ;\",\n  \t\t\"    wdt:P86 wd:Q192115 ;\",\n  \t\t\"    wdt:P58 wd:Q1653396 ;\",\n  \t\t\"    wdt:P1040 wd:Q128493 .\"\n  \t]\n}", "normal_query": "?person wdt:P57 wd:Q1165050 ; wdt:P86 wd:Q192115 ; wdt:P58 wd:Q1653396 ; wdt:P1040 wd:Q128493 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7357 is Q1165050\nkg:5667 is P57\nkg:3967 is P86\nkg:8263 is P58\nkg:9956 is P1040\nkg:6162 is Q192115\nkg:2217 is Q1653396\nkg:1188 is Q128493\nkg:0946 is P161\nkg:1339 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5667 ?writer .\",\n      \"?resource kg:3967 ?cinematographer .\",\n      \"?resource kg:8263 ?star .\",\n      \"?resource kg:9956 ?composer .\",\n      \"?resource kg:0946 [kg:1339 kg:6162 ; kg:1339 kg:2217 ; kg:1339 kg:1188 ]\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5667 ?writer . ?resource kg:3967 ?cinematographer . ?resource kg:8263 ?star . ?resource kg:9956 ?composer . ?resource kg:0946 [kg:1339 kg:6162 ; kg:1339 kg:2217 ; kg:1339 kg:1188 ] } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102679 wdt:P50 ?editor .\",\n    \"  wd:Q102679 wdt:P2854 ?execProducer .\",\n    \"  ?editor wdt:P31/wdt:P279* wd:Q11424 .\",\n    \"  ?execProducer wdt:P31/wdt:P279* wd:Q10686 .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    wd:Q567890 wdt:P1001 ?edit .\",\n    \"    wd:Q567890 wdt:P304 ?direct .\",\n    \"    wd:Q567890 wdt:P2991 ?write .\",\n    \"    wd:Q567890 wdt:P1002 ?execProd .\",\n    \"  }\",\n    \"  BIND(EXISTS {\",\n    \"    wd:Q567890 wdt:P1001 ?edit .\",\n    \"    wd:Q567890 wdt:P304 ?direct .\",\n    \"    wd:Q567890 wdt:P2991 ?write .\",\n    \"    wd:Q567890 wdt:P1002 ?execProd .\",\n    \"  } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102679 wdt:P50 ?editor . wd:Q102679 wdt:P2854 ?execProducer . ?editor wdt:P31/wdt:P279* wd:Q11424 . ?execProducer wdt:P31/wdt:P279* wd:Q10686 . FILTER NOT EXISTS { wd:Q567890 wdt:P1001 ?edit . wd:Q567890 wdt:P304 ?direct . wd:Q567890 wdt:P2991 ?write . wd:Q567890 wdt:P1002 ?execProd . } BIND(EXISTS { wd:Q567890 wdt:P1001 ?edit . wd:Q567890 wdt:P304 ?direct . wd:Q567890 wdt:P2991 ?write . wd:Q567890 wdt:P1002 ?execProd . } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwd:Q483197 is Q483197", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?editor wdt:P57/wdt:P1040/wdt:P1431 wd:Q484679. ?producer wdt:P58/wdt:P1040/wdt:P1431 wd:Q483197 } ) AS ?result . ]\"\n\t,\"defaultGraph\" ,\"%s\"\n\t,\"from\" ,\"%s\"\n\t,\"where\" ,\"%s\"\n\t,\"?editor wdt:P57 ?editRole.\"\n\t,\"?editRole wdt:P1040 ?editWork.\"\n\t,\"?editWork wdt:P1431 wd:Q484679.\"\n\t,\"?producer wdt:P58 ?prodRole.\"\n\t,\"?prodRole wdt:P1040 ?prodWork.\"\n\t,\"?prodWork wdt:P1431 wd:Q483197.\"\n\t,\"limit\" ,\"1\"\n\t,\"return\" ,\"?result\"\n\t,\"order by\" ,\"%s\"\n\t,\"group by\" ,\"%s\"\n\t,\"having\" ,\"%s\"\n\t,\"offset\" ,\"%s\"\n\t,\"with\" ,\"%s\"\n\t,\"register\" ,\"%s\"\n\t,\"values\" ,\"%s\"\n\t,\"service\" ,\"%s\"\n\t,\"union\" ,\"%s\"\n\t,\"minus\" ,\"%s\"\n\t,\"filter\" ,\"%s\"\n\t,\"optional\" ,\"%s\"\n\t,\"bind\" ,\"%s\"\n\t,\"describe\" ,\"%s\"\n\t,\"ask\" ,\"%s\"\n\t,\"count\" ,\"%s\"\n\t,\"path\" ,\"%s\"\n\t,\"isIRI\" ,\"%s\"\n\t,\"isBlank\" ,\"%s\"\n\t,\"isLiteral\" ,\"%s\"\n\t,\"lang\" ,\"%s\"\n\t,\"datatype\" ,\"%s\"\n\t,\"regex\" ,\"%s\"\n\t,\"strstarts\" ,\"%s\"\n\t,\"strendsWith\" ,\"%s\"\n\t,\"contains\" ,\"%s\"\n\t,\"langMatches\" ,\"%s\"\n\t,\"bnm:isBNodeMentionOf\" ,\"%s\"\n\t,\"bnm:isIRIMentionOf\" ,\"%s\"\n\t,\"bnm:isBlankMentionOf\" ,\"%s\"\n\t,\"bnm:isLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsLiteral\" ,\"%s\"\n\t,\"bnm:blankAsLiteral\" ,\"%s\"\n\t,\"bnm:literalAsIRI\" ,\"%s\"\n\t,\"bnm:literalAsBlank\" ,\"%s\"\n\t,\"bnm:literalAsLiteral\" ,\"%s\"\n\t,\"bnm:iriAsIRI\" ,\"%s\"\n\t,\"bnm:blankAsIRI\" ,\"%s\"\n\t,\"bnm:blankAsBlank\" ,\"%s\"\n\t,\"bnm:literalAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsBlankMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsLiteralMentionOf\" ,\"%s\"\n\t,\"bnm:blankAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:literalAsIRIMentionOf\" ,\"%s\"\n\t,\"bnm:iriAsBlank", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0089 is P57\nkg:1798 is Q13471372\nkg:6842 is P58\nkg:9458 is P1040\nkg:8108 is P1431\nkg:1401 is Q484679\nkg:9947 is Q483197", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:1798 kg:9458 kg:9947 ;\", \"# P57\",\n      \"         kg:6842 kg:0089 ;\" , \"# P58\",\n      \"         kg:8108 kg:1401.\" ,\"# P1431\",\n      \"?result a boolean.\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { kg:1798 kg:9458 kg:9947 ; kg:6842 kg:0089 ; kg:8108 kg:1401. ?result a boolean. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?producer wdt:P170 ?film .\",\n    \"  FILTER EXISTS {\",\n    \"    ?producer wdt:P361 wd:Q249589 ;\",\n    \"              wdt:P361 wd:Q106444 ;\",\n    \"              wdt:P361 wd:Q767666 .\",\n    \"  }\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424805 .\",\n    \"  FILTER EXISTS {\",\n    \"    ?film wdt:P57 ?work1 ;\",\n    \"          wdt:P57 ?work2 ;\",\n    \"          wdt:P57 ?work3 .\",\n    \"    FILTER (?work1 = wd:Q4698069) ;\",\n    \"           FILTER (?work2 = wd:Q4698070) ;\",\n    \"           FILTER (?work3 = wd:Q4698071)\",\n    \"  }\",\n    \"  ?film wdt:P57 ?lastWork .\",\n    \"  FILTER NOT EXISTS { ?film wdt:P57 ?otherWork . }\",\n    \"  BIND(TRUE AS ?result)\"\n    ]\n  }\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?result WHERE { ?producer wdt:P170 ?film . FILTER EXISTS { ?producer wdt:P361 wd:Q249589 ; wdt:P361 wd:Q106444 ; wdt:P361 wd:Q767666 . } ?film wdt:P31/wdt:P279* wd:Q11424805 . FILTER EXISTS { ?film wdt:P57 ?work1 ; wdt:P57 ?work2 ; wdt:P57 ?work3 . FILTER (?work1 = wd:Q4698069) ; FILTER (?work2 = wd:Q4698070) ; FILTER (?work3 = wd:Q4698071) } ?film wdt:P57 ?lastWork . FILTER NOT EXISTS { ?film wdt:P57 ?otherWork . } BIND(TRUE AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q219400 is Q219400\nwd:Q220394 is Q220394\nwd:Q3282637 is Q3282637\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q3011043 is Q3011043\nwd:Q64434913 is Q64434913", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT (COUNT(?film) AS ?result) WHERE { wd:Q1857205 wdt:P106* wd:Q542216 ; wdt:P112* Q3011043. Q3011043 wdt:P57* wd:Q64434913. FILTER EXISTS { wd:Q64434913 wdt:P58 ?film . FILTER (BOUND(?film)) } }]\",\n\t\"booleanResultBindingName\" ,\"%result\"\n\t,\"defaultGraphUri\" ,\"<http://www.wikidata.org/wiki/Special:EntityData>\"\n\t,\"outputFormat\" ,\"json\"\n\t,\"limit\" ,\"1\"\n\t,\"offset\" ,\"0\"\n\t,\"returnFormat\" ,\"application/sparql-results+json\"\n\t,\"queryTimeout\" ,\"60\"\n\t,\"resultTimeout\" ,\"300\"\n\t,\"timeout\" ,\"300\"\n\t,\"useServiceEndpoint\" ,\"true\"\n\t,\"serviceEndpointUri\" ,\"https://query.wikidata.org/sparql\"\n\t,\"sparqlVersion\" ,\"1.1\"\n\t,\"showWarnings\" ,\"false\"\n\t,\"showErrors\" ,\"false\"\n\t,\"showProfile\" ,\"false\"\n\t,\"showExecutionPlan\" ,\"false\"\n\t,\"showQueryLog\" ,\"false\"\n\t,\"showResultsetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"showResultSetErrors\" ,\"false\"\n\t,\"showResultSetProfile\" ,\"false\"\n\t,\"showResultSetExecutionPlan\" ,\"false\"\n\t,\"showResultSetQueryLog\" ,\"false\"\n\t,\"showResultSetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"showResultSetErrors\" ,\"false\"\n\t,\"showResultSetProfile\" ,\"false\"\n\t,\"showResultSetExecutionPlan\" ,\"false\"\n\t,\"showResultSetQueryLog\" ,\"false\"\n\t,\"showResultSetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"showResultSetErrors\" ,\"false\"\n\t,\"showResultSetProfile\" ,\"false\"\n\t,\"showResultSetExecutionPlan\" ,\"false\"\n\t,\"showResultSetQueryLog\" ,\"false\"\n\t,\"showResultSetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"showResultSetErrors\" ,\"false\"\n\t,\"showResultSetProfile\" ,\"false\"\n\t,\"showResultSetExecutionPlan\" ,\"false\"\n\t,\"showResultSetQueryLog\" ,\"false\"\n\t,\"showResultSetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"showResultSetErrors\" ,\"false\"\n\t,\"showResultSetProfile\" ,\"false\"\n\t,\"showResultSetExecutionPlan\" ,\"false\"\n\t,\"showResultSetQueryLog\" ,\"false\"\n\t,\"showResultSetMetadata\" ,\"false\"\n\t,\"showResultSetHeaders\" ,\"true\"\n\t,\"showResultSetRows\" ,\"true\"\n\t,\"showResultSetRowNumbers\" ,\"false\"\n\t,\"showResultSetSummary\" ,\"true\"\n\t,\"showResultSetStatistics\" ,\"false\"\n\t,\"showResultSetTiming\" ,\"false\"\n\t,\"showResultSetWarnings\" ,\"false\"\n\t,\"show", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6214 is Q1857205\nkg:2271 is P57\nkg:7583 is Q542216\nkg:8972 is P58\nkg:2999 is Q219400\nkg:1273 is Q220394\nkg:6969 is Q3282637\nkg:3217 is P112\nkg:9846 is P106\nkg:0938 is Q3011043\nkg:0697 is Q64434913", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?producer kg:9846 ?production .\",\n      \"?production kg:2271 kg:6214 ;\",\n          \"kg:3217 kg:7583 ;\",\n          \"kg:8972 kg:0938 .\",\n      \"FILTER(?producer = kg:2999 || ?producer = kg:1273)\",\n      \"?production kg:2346 ?movie1 .\",\n      \"?production kg:2346 ?movie2 .\",\n      \"?production kg:2346 ?movie3 .\",\n      \"VALUES (?movie1 ?movie2 ?movie3) { (kg:6969 kg:3217 kg:0697) }\",\n      \"?movie1 kg:2345 kg:2999 ;\",\n          \"kg:2348 kg:2999 .\",\n      \"?movie2 kg:2345 kg:2999 ;\",\n          \"kg:2348 kg:2999 .\",\n      \"?movie3 kg:2345 kg:2999 ;\",\n          \"kg:2348 kg:2999 .\",\n      \"BIND(EXISTS { ?production kg:2346 kg:7583 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?producer kg:9846 ?production . ?production kg:2271 kg:6214 ; kg:3217 kg:7583 ; kg:8972 kg:0938 . FILTER(?producer = kg:2999 || ?producer = kg:1273) ?production kg:2346 ?movie1 . ?production kg:2346 ?movie2 . ?production kg:2346 ?movie3 . VALUES (?movie1 ?movie2 ?movie3) { (kg:6969 kg:3217 kg:0697) } ?movie1 kg:2345 kg:2999 ; kg:2348 kg:2999 . ?movie2 kg:2345 kg:2999 ; kg:2348 kg:2999 . ?movie3 kg:2345 kg:2999 ; kg:2348 kg:2999 . BIND(EXISTS { ?production kg:2346 kg:7583 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424800 ;\", \"# Film instance\",\n      \"   wdt:P577 \\\"Brecha\\\" .\", \"# Title is Brecha\",\n      \"OPTIONAL { ?film wdt:P710 ?executiveProducer } ,\",\n      \"         { ?film wdt:P711 ?editor } ,\",\n      \"         { ?film wdt:P832 ?composer } ,\",\n      \"         { ?film wdt:P934 ?cinematographer } ,\",\n      \"         { ?film wdt:P577 \\\"Primary! and In Your Absence\\\"@en .} # Title is Primary! and In Your Absence\",\n      \"?resource ?property ?value .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424800 ; wdt:P577 \"Brecha\" . OPTIONAL { ?film wdt:P710 ?executiveProducer } , { ?film wdt:P711 ?editor } , { ?film wdt:P832 ?composer } , { ?film wdt:P934 ?cinematographer } , { ?film wdt:P577 \"Primary! and In Your Absence\"@en .} ?resource ?property ?value . } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwd:Q7243050 is Q7243050\nwd:Q4959991 is Q4959991\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n  \t\t\"?movie wdt:P344 wd:Q5375110.\",\n  \t\t\"?movie wdt:P86 ?producer.\",\n  \t\t\"?movie wdt:P1040 ?editor.\",\n  \t\t\"?movie wdt:P1431 ?composer.\",\n  \t\t\"?movie wdt:P57 ?cinematographer.\",\n  \t\t\"?movie wdt:P58 ?director.\"\n  \t]\n}", "normal_query": "?movie wdt:P344 wd:Q5375110. ?movie wdt:P86 ?producer. ?movie wdt:P1040 ?editor. ?movie wdt:P1431 ?composer. ?movie wdt:P57 ?cinematographer. ?movie wdt:P58 ?director. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0248 is P57\nkg:6336 is P86\nkg:6879 is P58\nkg:5755 is P1040\nkg:3415 is P1431\nkg:1904 is Q5375110\nkg:4869 is Q7243050\nkg:2032 is Q4959991\nkg:8681 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:86 ?editor .\",\n    \"?film kg:5755 ?composer .\",\n    \"?film kg:3415 ?director .\",\n    \"?film kg:2032 ?cinematographer .\",\n    \"?film kg:1904 ?producer .\",\n    \"FILTER(?producer = kg:6336 && ?editor = kg:6879 && ?composer = kg:4869 && ?director = kg:5755 && ?cinematographer = kg:2032)\",\n    \"?film kg:1904 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:86 ?editor . ?film kg:5755 ?composer . ?film kg:3415 ?director . ?film kg:2032 ?cinematographer . ?film kg:1904 ?producer . FILTER(?producer = kg:6336 && ?editor = kg:6879 && ?composer = kg:4869 && ?director = kg:5755 && ?cinematographer = kg:2032) ?film kg:1904 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P106 wd:Q938724.\" , \"# founder of Sally Ride Science\",\n    \"?person wdt:P108 ?organization1.\" , \"# employed by Center for International Security and Cooperation\",\n    \"?person wdt:P108 ?organization2.\" , \"# employed by Stanford University\",\n    \"?person wdt:P108 ?organization3.\" , \"# employed by National Aeronautics and Space Administration\",\n    \"?person wdt:P108 ?organization4.\" , \"# employed by University of California, San Diego\",\n    \"FILTER(?organization1 != ?organization2 && ?organization2 != ?organization3 && ?organization3 != ?organization4)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q938724. ?person wdt:P108 ?organization1. ?person wdt:P108 ?organization2. ?person wdt:P108 ?organization3. ?person wdt:P108 ?organization4. FILTER(?organization1 != ?organization2 && ?organization2 != ?organization3 && ?organization3 != ?organization4) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q41506 is Q41506\nwd:Q5059715 is Q5059715\nwd:Q23548 is Q23548\nwd:Q55206 is Q55206\nwdt:P27 is P27\nwdt:P112 is P112\nwd:Q622664 is Q622664\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P108 wd:Q5059715 ;\",\n    \"   wdt:P27 wd:Q30 ;\",\n    \"   wdt:P112* [\",\n    \"      wdt:P27 wd:Q622664 ;\",\n    \"      wdt:P108* [\",\n    \"         wdt:P27 wd:Q55206 ;\",\n    \"         wdt:P112* ?org ]\",\n    \"   ] .\",\n    \"?org wdt:P108* wd:Q41506 ;\",\n    \"   wdt:P108* wd:Q5059715 ;\",\n    \"   wdt:P108* wd:Q23548 ;\",\n    \"   wdt:P108* wd:Q622664 .\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q5059715 ; wdt:P27 wd:Q30 ; wdt:P112* [ wdt:P27 wd:Q622664 ; wdt:P108* [ wdt:P27 wd:Q55206 ; wdt:P112* ?org ] ] . ?org wdt:P108* wd:Q41506 ; wdt:P108* wd:Q5059715 ; wdt:P108* wd:Q23548 ; wdt:P108* wd:Q622664 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5724 is P108\nkg:4947 is Q41506\nkg:1923 is Q5059715\nkg:4276 is Q23548\nkg:6969 is Q55206\nkg:1549 is P27\nkg:6662 is P112\nkg:5619 is Q622664\nkg:7907 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:4947 ?founder.\",\n      \"?resource kg:6662 ?employeeOfSR.\",\n      \"?founder kg:5724 kg:1923.\",\n      \"?founder kg:6969 kg:5619.\",\n      \"?founder kg:4276 kg:7907.\",\n      \"?resource kg:1549 ?centerForInternationalSecurityAndCooperation.\",\n      \"?resource kg:1549 ?stanfordUniversity.\",\n      \"?resource kg:1549 ?nationalAeronauticsAndSpaceAdministration.\",\n      \"?resource kg:1549 ?universityOfCaliforniaSanDiego.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4947 ?founder. ?resource kg:6662 ?employeeOfSR. ?founder kg:5724 kg:1923. ?founder kg:6969 kg:5619. ?founder kg:4276 kg:7907. ?resource kg:1549 ?centerForInternationalSecurityAndCooperation. ?resource kg:1549 ?stanfordUniversity. ?resource kg:1549 ?nationalAeronauticsAndSpaceAdministration. ?resource kg:1549 ?universityOfCaliforniaSanDiego. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102869 wdt:P31/wdt:P279* wd:Q11424 ;\",\n    \"    wdt:P577 ?date .\",\n    \"  OPTIONAL {\",\n    \"    wd:Q102869 wdt:P105 ?cinematographer .\",\n    \"    FILTER(?cinematographer IN (wd:Q102869))\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    wd:Q102869 wdt:P7300 ?writer .\",\n    \"    FILTER(?writer IN (wd:Q102869))\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    wd:Q102869 wdt:P407 ?editor .\",\n    \"    FILTER(?editor IN (wd:Q102869))\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    wd:Q102869 wdt:P1635 ?composer .\",\n    \"    FILTER(?composer IN (wd:Q102869))\",\n    \"  }\",\n    \"  BIND(EXISTS{?cinematographer} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102869 wdt:P31/wdt:P279* wd:Q11424 ; wdt:P577 ?date . OPTIONAL { wd:Q102869 wdt:P105 ?cinematographer . FILTER(?cinematographer IN (wd:Q102869)) } OPTIONAL { wd:Q102869 wdt:P7300 ?writer . FILTER(?writer IN (wd:Q102869)) } OPTIONAL { wd:Q102869 wdt:P407 ?editor . FILTER(?editor IN (wd:Q102869)) } OPTIONAL { wd:Q102869 wdt:P1635 ?composer . FILTER(?composer IN (wd:Q102869)) } BIND(EXISTS{?cinematographer} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwd:Q93853 is Q93853\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/wdt:P86 wd:Q192115 ; wdt:P58/wdt:P344 wd:Q656357 ; wdt:P161 wd:Q93853 } ) AS ?result WHERE {} \",\n\t\"from\" ,\"<http://www.wikidata.org>\" ]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/wdt:P86 wd:Q192115 ; wdt:P58/wdt:P344 wd:Q656357 ; wdt:P161 wd:Q93853 } ) AS ?result WHERE {} from <http://www.wikidata.org> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9224 is Q1165050\nkg:0533 is P57\nkg:1320 is P86\nkg:4950 is P58\nkg:9007 is P1040\nkg:1464 is Q192115\nkg:8563 is Q656357\nkg:6304 is Q93853\nkg:5932 is P161\nkg:7811 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:9224 kg:5932 kg:0533 ;\",\n    \"kg:5932 kg:6304 kg:8563 ;\",\n    \"kg:5932 kg:7811 kg:1464 ;\",\n    \"kg:5932 kg:4950 kg:1320 ;\",\n    \"kg:5932 kg:1464 kg:9007.\",\n    \"?result BOOLEAN.\"\n    ]}", "normal_query": "SELECT ?result WHERE { kg:9224 kg:5932 kg:0533 ; kg:5932 kg:6304 kg:8563 ; kg:5932 kg:7811 kg:1464 ; kg:5932 kg:4950 kg:1320 ; kg:5932 kg:1464 kg:9007. ?result BOOLEAN. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q102685 wdt:P921/wdt:P279* ?producer .\",\n    \"  wd:Q102685 wdt:P735/wdt:P279* ?writer .\",\n    \"  FILTER EXISTS {\",\n    \"    ?producer wdt:P1439+ ?organization1 ;\",\n    \"              wdt:P1439+ [ wikibase:claim psv:P1439+ ?organization2 ] .\",\n    \"    FILTER (BOUND(?organization2) && (?organization1 = wd:Q5786022 || ?organization1 = wd:Q11300499 || ?organization1 = wd:Q11300500)) .\",\n    \"  }\",\n    \"  FILTER EXISTS {\",\n    \"    ?writer wdt:P1439+ ?organization3 ;\",\n    \"            wdt:P1439+ [ wikibase:claim psv:P1439+ ?organization4 ] .\",\n    \"    FILTER (BOUND(?organization4) && (?organization3 = wd:Q5786022 || ?organization3 = wd:Q11300499 || ?organization3 = wd:Q11300500)) .\",\n    \"  }\",\n    \"  BIND(1 AS ?result)\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  FILTER NOT EXISTS {\",\n    \"    wd:Q102685 wdt:P921/wdt:P279* ?producer .\",\n    \"    wd:Q102685 wdt:P735/wdt:P279* ?writer .\",\n    \"  }\",\n    \"  BIND(0 AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q102685 wdt:P921/wdt:P279* ?producer . wd:Q102685 wdt:P735/wdt:P279* ?writer . FILTER EXISTS { ?producer wdt:P1439+ ?organization1 ; wdt:P1439+ [ wikibase:claim psv:P1439+ ?organization2 ] . FILTER (BOUND(?organization2) && (?organization1 = wd:Q5786022 || ?organization1 = wd:Q11300499 || ?organization1 = wd:Q11300500)) . } FILTER EXISTS { ?writer wdt:P1439+ ?organization3 ; wdt:P1439+ [ wikibase:claim psv:P1439+ ?organization4 ] . FILTER (BOUND(?organization4) && (?organization3 = wd:Q5786022 || ?organization3 = wd:Q11300499 || ?organization3 = wd:Q11300500)) . } BIND(1 AS ?result) } UNION { FILTER NOT EXISTS { wd:Q102685 wdt:P921/wdt:P279* ?producer . wd:Q102685 wdt:P735/wdt:P279* ?writer . } BIND(0 AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q11490471 is Q11490471\nwd:Q947907 is Q947907\nwd:Q11371930 is Q11371930\nwd:Q182950 is Q182950\nwd:Q1054807 is Q1054807", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT (COUNT(*) AS ?count) WHERE {\\n\\t?person wdt:P108/wdt:P1431* wd:Q29011 ;\\n\\twdt:P58/wdt:P1431* wd:Q1136386.\\n\\tOPTIONAL { ?person wdt:P108/wdt:P1431* wd:Q11490471. }\\n\\tOPTIONAL { ?person wdt:P58/wdt:P1431* wd:Q947907. }\\n}\\nFILTER(?count > 0)\\n\",\n\t\"\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT (COUNT(*) AS ?count) WHERE { ?person wdt:P108/wdt:P1431* wd:Q29011 ; wdt:P58/wdt:P1431* wd:Q1136386. OPTIONAL { ?person wdt:P108/wdt:P1431* wd:Q11490471. } OPTIONAL { ?person wdt:P58/wdt:P1431* wd:Q947907. } } FILTER(?count > 0) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6208 is Q29011\nkg:5056 is P108\nkg:7212 is Q1136386\nkg:2917 is P58\nkg:1056 is P1431\nkg:4471 is Q11490471\nkg:5894 is Q947907\nkg:1459 is Q11371930\nkg:4277 is Q182950\nkg:7135 is Q1054807", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?execProducer a kg:6208 ;\",\n      \"   kg:5056 ?writer ;\",\n      \"   kg:7212 [ kg:2917 \\\"Nibariki, Ghibli Museum\\\"@en ;\",\n      \"            kg:1056 \\\"TMS Entertainment\\\"@en ] .\",\n      \"?execProducer kg:4471 [ kg:5894 ?writer ;\",\n      \"                       kg:1459 \\\"Shin-Ei Animation\\\"@en ;\",\n      \"                       kg:4277 \\\"Studio Ghibli\\\"@en ;\",\n      \"                       kg:7135 \\\"Tokuma Memorial Cultural Foundation for Animation\\\"@en ] .\",\n    \"}\",\n    \"BIND(EXISTS { ?execProducer a kg:6208 } AS ?result)\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?execProducer a kg:6208 ; kg:5056 ?writer ; kg:7212 [ kg:2917 \"Nibariki, Ghibli Museum\"@en ; kg:1056 \"TMS Entertainment\"@en ] . ?execProducer kg:4471 [ kg:5894 ?writer ; kg:1459 \"Shin-Ei Animation\"@en ; kg:4277 \"Studio Ghibli\"@en ; kg:7135 \"Tokuma Memorial Cultural Foundation for Animation\"@en ] . } BIND(EXISTS { ?execProducer a kg:6208 } AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q114248067 ;\", \"# Episode IV - A New Hope\",\n    \"  wdt:P577 \\\"1977-05-25T00:00:00Z\\\"^^xsd:dateTime .\", \"# Release date of Episode IV - A New Hope\",\n    \"?film wdt:P648 ?person ;\", \"# Directed by\",\n    \"  wdt:P735 ?person ;\" ,\"# Wrote\",\n    \"  wdt:P1092 ?person.\" ,\"# Executive produced\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"FILTER EXISTS { ?film wdt:P3457 wd:Q68226 . }\" ,\"# Herbie film\",\n    \"FILTER EXISTS { ?film wdt:P1092 wd:Q1028646 . }\" ,\"# Anyone Lived in a Pretty How Town writer\",\n    \"FILTER EXISTS { ?person wdt:P175 wd:Q330221 . }\" ,\"# Filmmaker\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q114248067 ; wdt:P577 \"1977-05-25T00:00:00Z\"^^xsd:dateTime . ?film wdt:P648 ?person ; wdt:P735 ?person ; wdt:P1092 ?person. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } FILTER EXISTS { ?film wdt:P3457 wd:Q68226 . } FILTER EXISTS { ?film wdt:P1092 wd:Q1028646 . } FILTER EXISTS { ?person wdt:P175 wd:Q330221 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1415127 is Q1415127\nwd:Q208910 is Q208910\nwd:Q17738 is Q17738\nwd:Q1609393 is Q1609393\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q1415127 ;\",\n    \"   wdt:P58 wd:Q613974 ;\",\n    \"   wdt:P1431 wd:Q208910 ;\",\n    \"   wdt:P344 wd:Q17738 ;\",\n    \"   wdt:P1431 wd:Q1609393 .\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q1415127 ; wdt:P58 wd:Q613974 ; wdt:P1431 wd:Q208910 ; wdt:P344 wd:Q17738 ; wdt:P1431 wd:Q1609393 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5100 is P57\nkg:4592 is P58\nkg:5973 is P1431\nkg:0415 is Q613974\nkg:0431 is Q1415127\nkg:6153 is Q208910\nkg:7141 is Q17738\nkg:1714 is Q1609393\nkg:9250 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5100 ?cinematographer .\",\n      \"?resource kg:4592 ?writer .\",\n      \"?resource kg:5973 ?filmmaker .\",\n      \"?resource kg:0415 ?starWarsEpisodeIV .\",\n      \"?starWarsEpisodeIV kg:9250 [ kg:6153 'Herbie' ; kg:7141 'Anyone Lived in a Pretty How Town' ; kg:1714 'Filmmaker' ; kg:1814 '1:42.08 directed, wrote, and executive produced Star Wars: Episode IV – A New Hope' ]\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5100 ?cinematographer . ?resource kg:4592 ?writer . ?resource kg:5973 ?filmmaker . ?resource kg:0415 ?starWarsEpisodeIV . ?starWarsEpisodeIV kg:9250 [ kg:6153 'Herbie' ; kg:7141 'Anyone Lived in a Pretty How Town' ; kg:1714 'Filmmaker' ; kg:1814 '1:42.08 directed, wrote, and executive produced Star Wars: Episode IV – A New Hope' ] } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248056 ;\",\n      \"wdt:P137 ?cinematographer ;\",\n      \"wdt:P65 ?director ;\",\n      \"wdt:P800 ?editor .\",\n      \"?film wdt:P577 \\\"Rabbits\\\"@en ;\",\n      \"?film wdt:P577 \\\"Six Men Getting Sick\\\"@en ;\",\n      \"?executiveProducer wdt:P1477* ?film ;\",\n      \"wdt:P31/wdt:P279* wd:Q86027 .\",\n      \"?resource ?p ?object FILTER(?resource = ?film || ?resource = ?cinematographer || ?resource = ?director || ?resource = ?editor || ?resource = ?executiveProducer)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31/wdt:P279* wd:Q114248056 ; wdt:P137 ?cinematographer ; wdt:P65 ?director ; wdt:P800 ?editor . ?film wdt:P577 \"Rabbits\"@en ; ?film wdt:P577 \"Six Men Getting Sick\"@en ; ?executiveProducer wdt:P1477* ?film ; wdt:P31/wdt:P279* wd:Q86027 . ?resource ?p ?object FILTER(?resource = ?film || ?resource = ?cinematographer || ?resource = ?director || ?resource = ?editor || ?resource = ?executiveProducer) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwd:Q1473406 is Q1473406\nwd:Q1511905 is Q1511905\nwd:Q3485595 is Q3485595\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P1431 wd:Q2085 ;\",\n    \"   wdt:P344 ?person .\",\n    \"?person wdt:P57 ?cinematographer ;\",\n    \"         wdt:P1040 ?director ;\",\n    \"         wdt:P1431 wd:Q1140578 .\",\n    \"FILTER EXISTS { ?film wdt:P344 wd:Q1511905 }\",\n    \"FILTER EXISTS { ?film wdt:P344 wd:Q3485595 }\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P1431 wd:Q2085 ; wdt:P344 ?person . ?person wdt:P57 ?cinematographer ; wdt:P1040 ?director ; wdt:P1431 wd:Q1140578 . FILTER EXISTS { ?film wdt:P344 wd:Q1511905 } FILTER EXISTS { ?film wdt:P344 wd:Q3485595 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6445 is P57\nkg:8008 is P1040\nkg:1773 is Q1140578\nkg:4869 is P1431\nkg:3440 is Q2085\nkg:6408 is Q1473406\nkg:8028 is Q1511905\nkg:4888 is Q3485595\nkg:5923 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:6445 kg:1773 ;\", \"# cinematographer, director, and editor of Rabbits and Six Men Getting Sick\",\n      \"   kg:8008 kg:4869 ;\", \"# executive produced Twin Peaks\",\n      \"   kg:8028 kg:4888 .\", \"# executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6445 kg:1773 ; kg:8008 kg:4869 ; kg:8028 kg:4888 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782806 ?director .\",\n    \"  (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782807 ?editor .\",\n    \"  (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782808 ?director .\",\n    \"  (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782809 ?editor .\",\n    \"  ?director wd:Q14782810 ?LitaGrey .\",\n    \"  ?director wd:Q14782811 ?MildredHarris .\",\n    \"  ?editor wd:Q14782812 ?OonaONeill .\",\n    \"  BIND(EXISTS { ?director wd:Q14782810 ?LitaGrey . ?director wd:Q14782811 ?MildredHarris . ?editor wd:Q14782812 ?OonaONeill . } AS ?result) \"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782806 ?director . (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782807 ?editor . (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782808 ?director . (wd:Q102659 wd:p31/wd:P27 wd:Q186) wd:Q14782809 ?editor . ?director wd:Q14782810 ?LitaGrey . ?director wd:Q14782811 ?MildredHarris . ?editor wd:Q14782812 ?OonaONeill . BIND(EXISTS { ?director wd:Q14782810 ?LitaGrey . ?director wd:Q14782811 ?MildredHarris . ?editor wd:Q14782812 ?OonaONeill . } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q241019 is Q241019\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q374172 is Q374172\nwd:Q2449461 is Q2449461\nwd:Q45602 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  (wdt:P57 wd:Q166739) wdt:P1040/wdt:P26* ?spouse1. FILTER(?spouse1 IN (wd:Q32337, wd:Q137808))\",\n    \"  (wdt:P57 wd:Q241019) wdt:P1040/wdt:P26* ?spouse2. FILTER(?spouse2 IN (wd:Q32337, wd:Q137808))\",\n    \"  (wdt:P57 wd:Q2449461) wdt:P1040/wdt:P26* ?spouse3. FILTER(?spouse3 IN (wd:Q374172, wd:Q45602))\",\n    \"  (wdt:P57 wd:Q374172) wdt:P1040/wdt:P26* ?spouse4. FILTER(?spouse4 IN (wd:Q32337, wd:Q137808))\",\n    \"  BIND(EXISTS { ?person wdt:P57 wd:Q166739; wdt:P1040/wdt:P26* ?spouse1. FILTER(?spouse1 IN (wd:Q32337, wd:Q137808)) } AS ?result)\",\n    \"  BIND(EXISTS { ?person wdt:P57 wd:Q241019; wdt:P1040/wdt:P26* ?spouse2. FILTER(?spouse2 IN (wd:Q32337, wd:Q137808)) } AS ?result)\",\n    \"  BIND(EXISTS { ?person wdt:P57 wd:Q2449461; wdt:P1040/wdt:P26* ?spouse3. FILTER(?spouse3 IN (wd:Q374172, wd:Q45602)) } AS ?result)\",\n    \"  BIND(EXISTS { ?person wdt:P57 wd:Q374172; wdt:P1040/wdt:P26* ?spouse4. FILTER(?spouse4 IN (wd:Q32337, wd:Q137808)) } AS ?result)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { (wdt:P57 wd:Q166739) wdt:P1040/wdt:P26* ?spouse1. FILTER(?spouse1 IN (wd:Q32337, wd:Q137808)) (wdt:P57 wd:Q241019) wdt:P1040/wdt:P26* ?spouse2. FILTER(?spouse2 IN (wd:Q32337, wd:Q137808)) (wdt:P57 wd:Q2449461) wdt:P1040/wdt:P26* ?spouse3. FILTER(?spouse3 IN (wd:Q374172, wd:Q45602)) (wdt:P57 wd:Q374172) wdt:P1040/wdt:P26* ?spouse4. FILTER(?spouse4 IN (wd:Q32337, wd:Q137808)) BIND(EXISTS { ?person wdt:P57 wd:Q166739; wdt:P1040/wdt:P26* ?spouse1. FILTER(?spouse1 IN (wd:Q32337, wd:Q137808)) } AS ?result) BIND(EXISTS { ?person wdt:P57 wd:Q241019; wdt:P1040/wdt:P26* ?spouse2. FILTER(?spouse2 IN (wd:Q32337, wd:Q137808)) } AS ?result) BIND(EXISTS { ?person wdt:P57 wd:Q2449461; wdt:P1040/wdt:P26* ?spouse3. FILTER(?spouse3 IN (wd:Q374172, wd:Q45602)) } AS ?result) BIND(EXISTS { ?person wdt:P57 wd:Q374172; wdt:P1040/wdt:P26* ?spouse4. FILTER(?spouse4 IN (wd:Q32337, wd:Q137808)) } AS ?result) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8306 is P57\nkg:1894 is Q166739\nkg:3898 is Q241019\nkg:9027 is P1040\nkg:2897 is P26\nkg:8608 is Q32337\nkg:7511 is Q137808\nkg:6357 is Q374172\nkg:4272 is Q2449461\nkg:2314 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  (kg:8306 kg:is_P57 kg:1894) .\",\n    \"  (kg:8306 kg:is_P57 kg:3898) .\",\n    \"  (kg:8306 kg:is_P57 kg:9027) .\",\n    \"  (kg:8306 kg:is_P57 kg:2897) .\",\n    \"  (kg:1894 kg:26 kg:8608) .\",\n    \"  (kg:3898 kg:26 kg:7511) .\",\n    \"  (kg:9027 kg:26 kg:6357) .\",\n    \"  (kg:2897 kg:26 kg:4272) .\",\n    \"  FILTER NOT EXISTS {\",\n    \"    (kg:8306 kg:is_P1040 ?person) .\",\n    \"    ?person kg:26 kg:2314\",\n    \"  }\",\n    \"  BIND(true AS ?result)\",\n    \"} UNION {\",\n    \"  FILTER EXISTS {\",\n    \"    (kg:8306 kg:is_P1040 ?person) .\",\n    \"    ?person kg:26 kg:2314\",\n    \"  }\",\n    \"  BIND(false AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { (kg:8306 kg:is_P57 kg:1894) . (kg:8306 kg:is_P57 kg:3898) . (kg:8306 kg:is_P57 kg:9027) . (kg:8306 kg:is_P57 kg:2897) . (kg:1894 kg:26 kg:8608) . (kg:3898 kg:26 kg:7511) . (kg:9027 kg:26 kg:6357) . (kg:2897 kg:26 kg:4272) . FILTER NOT EXISTS { (kg:8306 kg:is_P1040 ?person) . ?person kg:26 kg:2314 } BIND(true AS ?result) } UNION { FILTER EXISTS { (kg:8306 kg:is_P1040 ?person) . ?person kg:26 kg:2314 } BIND(false AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q17628 wdt:P108 ?person ;\",\n    \"    wdt:P2943 ?person ;\",\n    \"    wdt:P50 ?person .\",\n    \"  FILTER(?person = wd:Q17628)\",\n    \"  BIND(TRUE AS ?result)\"\n    ]\n  }\n \t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { wd:Q17628 wdt:P108 ?person ; wdt:P2943 ?person ; wdt:P50 ?person . FILTER(?person = wd:Q17628) BIND(TRUE AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwd:Q214723 is Q214723\nwd:Q5 is Q5\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P31 is P31\nwdt:P21 is P21\nwd:Q1070468 is Q1070468\nwd:Q6581097 is Q6581097", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q882 wdt:P21 ?gender ;\",\n    \"wdt:P57 wd:Q166739 ;\",\n    \"wdt:P1040 wd:Q214723 ;\",\n    \"wdt:P58 wd:Q5 ;\",\n    \"wdt:P31 wd:Q6581097 .\",\n    \"?result BIND(true AS ?result) FILTER(?gender = wd:Q5)\"\n    ]}", "normal_query": "SELECT ?result WHERE { wd:Q882 wdt:P21 ?gender ; wdt:P57 wd:Q166739 ; wdt:P1040 wd:Q214723 ; wdt:P58 wd:Q5 ; wdt:P31 wd:Q6581097 . ?result BIND(true AS ?result) FILTER(?gender = wd:Q5) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4256 is P57\nkg:0218 is Q882\nkg:5560 is Q166739\nkg:7441 is Q214723\nkg:1133 is Q5\nkg:3670 is P1040\nkg:3925 is P58\nkg:3826 is P31\nkg:5855 is P21\nkg:6478 is Q1070468\nkg:8755 is Q6581097", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:0218 kg:3670 kg:6478 ;\", \"# Charlie Chaplin directed by\",\n      \"      kg:3925 kg:6478 ;\", \"# Charlie Chaplin edited by\",\n      \"      kg:3826 kg:6478 .\", \"# Charlie Chaplin written by\",\n      \"kg:6478 kg:5855 ?result.\" ,\"\\n\" ,\"FILTER(?result = \\\"true\\\"^^<http://www.w3.org/2001/XMLSchema#boolean>)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:0218 kg:3670 kg:6478 ; kg:3925 kg:6478 ; kg:3826 kg:6478 . kg:6478 kg:5855 ?result. FILTER(?result = \"true\"^^<http://www.w3.org/2001//XMLSchema> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424680.\" ,\n    \"?film wdt:P979 ?distributorProducer.\" ,\n    \"?film wdt:P577 \\\"acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies\\\"@en.\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?film wdt:P31 wd:Q11424680. ?film wdt:P979 ?distributorProducer. ?film wdt:P577 \"acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies\"@en. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q1411292 is Q1411292\nwd:Q505275 is Q505275\nwd:Q219635 is Q219635\nwd:Q3133593 is Q3133593\nwd:Q2062523 is Q2062523\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwd:Q7603552 is Q7603552\nwdt:P272 is P272", "response": "{\n \t\"query\": [\"_ ?o ] wdt:P750 [ wdt:P127 wd:Q505275 ; wdt:P272 [ wdt:P127 [ wdt:P7603552 wd:Q3133593 ] ; wdt:P7603552 [ wdt:P127 [ wdt:P7603552 wd:Q2062523 ] ] ] ]\",\n\t\"outputFormat\" ,\"json\"]\n}", "normal_query": "_ ?o ] wdt:P750 [ wdt:P127 wd:Q505275 ; wdt:P272 [ wdt:P127 [ wdt:P7603552 wd:Q3133593 ] ; wdt:P7603552 [ wdt:P127 [ wdt:P7603552 wd:Q2062523 ] ] ] ] outputFormat json LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7165 is P750\nkg:8351 is Q1411292\nkg:1911 is Q505275\nkg:4842 is Q219635\nkg:1272 is Q3133593\nkg:5118 is Q2062523\nkg:1846 is P127\nkg:2485 is Q3511946\nkg:8821 is Q7603552\nkg:1460 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:1846 kg:8351 ;\",\n           \"kg:1911 kg:4842 ;\",\n           \"kg:1460 kg:7165.\",\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:3511946 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:5118 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:1911 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:2485 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:8351 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:1846 ;\",\n           \"kg:1460 kg:1272.\"\n    ,\n      \"?acquisition kg:127 ?resource ;\",\n           \"kg:2485 kg:8821 ;\",\n           \"kg:1911 kg:4842 ;\",\n           \"kg:1460 kg:1272.\"\n    , \"}\",\n    \"LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1846 kg:8351 ; kg:1911 kg:4842 ; kg:1460 kg:7165. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:3511946 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:5118 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:1911 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:2485 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:8351 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:1846 ; kg:1460 kg:1272. ?acquisition kg:127 ?resource ; kg:2485 kg:8821 ; kg:1911 kg:4842 ; kg:1460 kg:1272. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 wd:Q2490587.\" , \"# City Lights\",\n      \"?resource wdt:P361 wd:Q2490588.\" ,\"# Modern Times\",\n      \"?resource wdt:P73 wd:Q2490587.\" , \"# City Lights\",\n      \"?resource wdt:P80 wd:Q2490587.\" ,\"# The Floorwalker\",\n      \"?resource wdt:P161 wd:Q2490587.\" ,\"# His Musical Career\",\n      \"?resource wdt:P361 wd:Q2490589.\" , \"# The Kid\",\n      \"?resource wdt:P361 wd:Q2490590.\" ,\"# The Gold Rush\",\n      \"?resource wdt:P73 wd:Q11228.\" ,\"# Composer\",\n      \"?resource wdt:P73 wd:Q11229.\" ,\"# Editor\",\n      \"?resource wdt:P73 wd:Q11230.\" ,\"# Director\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P361 wd:Q2490587. ?resource wdt:P361 wd:Q2490588. ?resource wdt:P73 wd:Q2490587. ?resource wdt:P80 wd:Q2490587. ?resource wdt:P161 wd:Q2490587. ?resource wdt:P361 wd:Q2490589. ?resource wdt:P361 wd:Q2490590. ?resource wdt:P73 wd:Q11228. ?resource wdt:P73 wd:Q11229. ?resource wdt:P73 wd:Q11230. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q214723 is Q214723\nwdt:P86 is P86\nwdt:P1040 is P1040\nwd:Q2345349 is Q2345349\nwd:Q374172 is Q374172\nwd:Q238211 is Q238211\nwd:Q45602 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P57 wd:Q166739 ;\",\n               \"wdt:P86 wd:Q214723 ;\",\n               \"wdt:P1040 wd:Q2345349.\",\n      \"?resource wdt:P86 wd:Q374172 ;\",\n               \"wdt:P1040 wd:Q238211.\",\n      \"?resource wdt:P86 wd:Q45602 ;\",\n               \"wdt:P1040 wd:Q45602.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q166739 ; wdt:P86 wd:Q214723 ; wdt:P1040 wd:Q2345349. ?resource wdt:P86 wd:Q374172 ; wdt:P1040 wd:Q238211. ?resource wdt:P86 wd:Q45602 ; wdt:P1040 wd:Q45602. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6496 is P57\nkg:4642 is Q166739\nkg:0042 is Q214723\nkg:5260 is P86\nkg:7729 is P1040\nkg:0016 is Q2345349\nkg:3716 is Q374172\nkg:5926 is Q238211\nkg:1194 is Q45602", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:5260 kg:4642 ;\",\n    \"   kg:7729 kg:3716 ;\",\n    \"   kg:0042 kg:5926 ;\",\n    \"   kg:5926 kg:1194 ;\",\n    \"   kg:5260 kg:0016.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5260 kg:4642 ; kg:7729 kg:3716 ; kg:0042 kg:5926 ; kg:5926 kg:1194 ; kg:5260 kg:0016. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film1 wdt:P3457 \\\"There Will Be No Leave Today\\\" ;\",\n    \"         wdt:P3458 \\\"The Killers\\\" .\",\n    \"  ?director1 wdt:P31 wd:Q11424 ;\",\n    \"             wdt:P577 ?film1 .\",\n    \"  ?director2 wdt:P31 wd:Q11424 ;\",\n    \"             wdt:P577 ?film2 .\",\n    \"  FILTER(?director1 != ?director2) .\",\n    \"  ?director1 wdt:P108* wd:Q96039 ;\",\n    \"             wdt:P108* wd:Q466695 .\",\n    \"  ?director2 wdt:P108* wd:Q96039 ;\",\n    \"             wdt:P108* wd:Q466695 .\",\n    \"  BIND(EXISTS { ?director1 wdt:P108* wd:Q96039 } AS ?result) UNION \",\n    \"         BIND(EXISTS { ?director2 wdt:P108* wd:Q96039 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film1 wdt:P3457 \"There Will Be No Leave Today\" ; wdt:P3458 \"The Killers\" . ?director1 wdt:P31 wd:Q11424 ; wdt:P577 ?film1 . ?director2 wdt:P31 wd:Q11424 ; wdt:P577 ?film2 . FILTER(?director1 != ?director2) . ?director1 wdt:P108* wd:Q96039 ; wdt:P108* wd:Q466695 . ?director2 wdt:P108* wd:Q96039 ; wdt:P108* wd:Q466695 . BIND(EXISTS { ?director1 wdt:P108* wd:Q96039 } AS ?result) UNION BIND(EXISTS { ?director2 wdt:P108* wd:Q96039 } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwd:Q1970252 is Q1970252\nwd:Q133730 is Q133730\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwdt:P161 is P161", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q88965291 wdt:P737/wdt:P161* wd:Q3017093. wd:Q88965291 wdt:P737/wdt:P161* wd:Q1970252. } ?result bool(?x) . FILTER(?result = true) }\",\n\t\"booleanResult\" ]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { wd:Q88965291 wdt:P737/wdt:P161* wd:Q3017093. wd:Q88965291 wdt:P737/wdt:P161* wd:Q1970252. } ?result bool(?x) . FILTER(?result = true) } booleanResult LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4191 is P57\nkg:8543 is Q3017093\nkg:8695 is Q1970252\nkg:3528 is Q133730\nkg:3236 is Q88965291\nkg:0172 is P737\nkg:3710 is P161", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"?film1 kg:isP57 ?director1.\",\n      \"?film2 kg:isP57 ?director2.\",\n      \"?film1 kg:isQ3017093 \\\"There Will Be No Leave Today\\\".\",\n      \"?film2 kg:isQ3017093 \\\"The Killers\\\".\",\n      \"?director1 kg:isQ1970252 ?person1.\",\n      \"?director2 kg:isQ1970252 ?person2.\",\n      \"?person1 kg:P737* ?person3.\",\n      \"?person3 kg:P737* ?person4.\",\n      \"?person4 kg:P737* ?person5.\",\n      \"?person5 kg:P737* ?person6.\",\n      \"FILTER(?person6 = kg:Q88965291 || ?person6 = kg:Q133730)\",\n      \"?person1 kg:P737* ?person7.\",\n      \"?person7 kg:P737* ?person8.\",\n      \"?person8 kg:P737* ?person9.\",\n      \"?person9 kg:P737* ?person10.\",\n      \"FILTER(?person10 = kg:Q88965291 || ?person10 = kg:Q133730)\",\n      \"?result bool(?director1 != ?director2)\"\n    ]\n  }\n \t  \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?result WHERE { ?film1 kg:isP57 ?director1. ?film2 kg:isP57 ?director2. ?film1 kg:isQ3017093 \"There Will Be No Leave Today\". ?film2 kg:isQ3017093 \"The Killers\". ?director1 kg:isQ1970252 ?person1. ?director2 kg:isQ1970252 ?person2. ?person1 kg:P737* ?person3. ?person3 kg:P737* ?person4. ?person4 kg:P737* ?person5. ?person5 kg:P737* ?person6. FILTER(?person6 = kg:Q88965291 || ?person6 = kg:Q133730) ?person1 kg:P737* ?person7. ?person7 kg:P737* ?person8. ?person8 kg:P737* ?person9. ?person9 kg:P737* ?person10. FILTER(?person10 = kg:Q88965291 || ?person10 = kg:Q133730) ?result bool(?director1 != ?director2) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?person wdt:P31 wd:Q5.;\", \"# Person is human\",\n    \"         wdt:P770 ?filmEditorship.,\", \"# Has film editorship\",\n    \"         wdt:P26 ?marriage1.,\", \"# Married to Oona O'Neill\",\n    \"         wdt:P26 ?marriage2.,\", \"# Married to Lita Grey\",\n    \"         wdt:P26 ?marriage3.;\", \"# Married to Mildred Harris\",\n    \"  ?filmEditorship wdt:P1437 ?influenceList.\", \"# Film editor influenced people\",\n    \"  FILTER(?influenceList IN (wd:Q105, wd:Q8912, wd:Q622)),\" ,\"\\t# Influenced Federico Fellini, Marcel Marceau, and Harold Lloyd\",\n    \"  ?person wdt:P279* wd:Q34489.\" ,\"\\t\\t# Is a founder of United Artists Corporation\",\n    \"  BIND(EXISTS(?filmEditorship) AS ?result)\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person wdt:P31 wd:Q5.; wdt:P770 ?filmEditorship., wdt:P26 ?marriage1., wdt:P26 ?marriage2., wdt:P26 ?marriage3.; ?filmEditorship wdt:P1437 ?influenceList. FILTER(?influenceList IN (wd:Q105, wd:Q8912, wd:Q622)), ?person wdt:P279* wd:Q34489. BIND(EXISTS(?filmEditorship) AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q157191 is Q157191\nwd:Q241019 is Q241019\nwd:Q137808 is Q137808\nwd:Q219400 is Q219400\nwdt:P26 is P26\nwd:Q104340 is Q104340\nwd:Q32337 is Q32337\nwdt:P737 is P737\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"wd:Q157191 wdt:P112* (wd:Q241019|wd:Q137808|wd:Q219400).\",\n    \"wd:Q157191 wdt:P737 wd:Q104340.\",\n    \"wd:Q157191 wdt:P106 wd:Q32337.\"\n    ]}", "normal_query": "SELECT ?result WHERE { wd:Q157191 wdt:P112* (wd:Q241019|wd:Q137808|wd:Q219400). wd:Q157191 wdt:P737 wd:Q104340. wd:Q157191 wdt:P106 wd:Q32337. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2742 is Q157191\nkg:0977 is Q241019\nkg:2423 is Q137808\nkg:1644 is Q219400\nkg:7531 is P26\nkg:3587 is Q104340\nkg:1939 is Q32337\nkg:3966 is P737\nkg:8335 is Q7042855\nkg:3282 is Q7371\nkg:6541 is P112\nkg:8327 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:2742 kg:1939 [ kg:3587 kg:8335 ; kg:3966 [ kg:6541 \\\"Oona O'Neill\\\" ; kg:8327 kg:0977 ] ; kg:3966 [ kg:6541 \\\"Lita Grey\\\" ; kg:8327 kg:2423 ] ; kg:3966 [ kg:6541 \\\"Mildred Harris\\\" ; kg:8327 kg:1644 ] ; kg:112 [ kg:7531 kg:3282 ; kg:106 [ kg:3587 kg:8335 ; kg:3966 [ kg:6541 \\\"Federico Fellini\\\" ; kg:8327 kg:1939 ] ; kg:3966 [ kg:6541 \\\"Marcel Marceau\\\" ; kg:8327 kg:1939 ] ; kg:3966 [ kg:6541 \\\"Harold Lloyd\\\" ; kg:8327 kg:1939 ] ] ] ]\",\n    \"OPTIONAL { kg:2742 kg:3587 kg:8335 }\",\n    \"BIND(EXISTS{kg:2742 kg:3587 kg:8335} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { kg:2742 kg:1939 [ kg:3587 kg:8335 ; kg:3966 [ kg:6541 \"Oona O'Neill\" ; kg:8327 kg:0977 ] ; kg:3966 [ kg:6541 \"Lita Grey\" ; kg:8327 kg:2423 ] ; kg:3966 [ kg:6541 \"Mildred Harris\" ; kg:8327 kg:1644 ] ; kg:112 [ kg:7531 kg:3282 ; kg:106 [ kg:3587 kg:8335 ; kg:3966 [ kg:6541 \"Federico Fellini\" ; kg:8327 kg:1939 ] ; kg:3966 [ kg:6541 \"Marcel Marceau\" ; kg:8327 kg:1939 ] ; kg:3966 [ kg:6541 \"Harold Lloyd\" ; kg:8327 kg:1939 ] ] ] ] OPTIONAL { kg:2742 kg:3587 kg:8335 } BIND(EXISTS{kg:2742 kg:3587 kg:8335} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"   wdt:P577 \\\"2012-06-28T00:00:00Z\\\"^^xsd:dateTime .\",\n      \"?director wdt:P57 ?film ;\",\n      \"          wdt:P161 ?star ;\",\n      \"          wdt:P40 ?writer .\",\n      \"?star wdt:P190 ?director .\",\n      \"?writer wdt:P286 ?director .\",\n      \"?director wdt:P570 ?died .\",\n      \"?demy wdt:P57 ?film ;\",\n      \"     wdt:P190 ?star ;\",\n      \"     wdt:P286 ?writer .\",\n      \"?demy wdt:P570 ?died .\",\n      \"FILTER(?director != ?demy)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"2012-06-28T00:00:00Z\"^^xsd:dateTime . ?director wdt:P57 ?film ; wdt:P161 ?star ; wdt:P40 ?writer . ?star wdt:P190 ?director . ?writer wdt:P286 ?director . ?director wdt:P570 ?died . ?demy wdt:P57 ?film ; wdt:P190 ?star ; wdt:P286 ?writer . ?demy wdt:P570 ?died . FILTER(?director != ?demy) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q3161846 is Q3161846\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?director ;\",\n           \"wdt:P58 ?star ;\",\n           \"wdt:P26 ?writer.\",\n      \"?director wdt:P161* wd:Q312258 ;\",\n      \"?star wdt:P737* wd:Q312258 ;\",\n      \"?writer wdt:P161* wd:Q312258.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film wdt:P57 ?director ; wdt:P58 ?star ; wdt:P26 ?writer. ?director wdt:P161* wd:Q312258 ; ?star wdt:P737* wd:Q312258 ; ?writer wdt:P161* wd:Q312258. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9746 is Q2709504\nkg:0250 is P57\nkg:8158 is P58\nkg:7399 is P26\nkg:8148 is P737\nkg:3421 is Q3161846\nkg:4915 is Q3204825\nkg:7418 is P161\nkg:5056 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?director kg:7399 ?star ;\",\n           \"kg:8158 ?writer ;\",\n           \"kg:4915 ?movie .\",\n      \"?star kg:0250 ?influencedBy .\",\n      \"?writer kg:7418 ?influencedBy .\",\n      \"?influencedBy kg:3421 ?jacquesDemy .\",\n      \"?director kg:5056 ?jacquesDemy .\",\n      \"?movie kg:9746 ?jacquesDemy .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:7399 ?star ; kg:8158 ?writer ; kg:4915 ?movie . ?star kg:0250 ?influencedBy . ?writer kg:7418 ?influencedBy . ?influencedBy kg:3421 ?jacquesDemy . ?director kg:5056 ?jacquesDemy . ?movie kg:9746 ?jacquesDemy . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5846096 ;\", \"# Distributor and producer of Mozart in the Jungle\",\n      \"wdt:P1416 ?acquirer .\", \"# Acquired by The Vanguard Group and BlackRock\",\n      \"?acquirer wdt:P31/wdt:P279* wd:Q5846096 ;\", \"# The Vanguard Group and BlackRock are financial institutions\",\n      \"wdt:P1416 ?cloudFront .\", \"# Acquired Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n      \"?cloudFront wdt:P31/wdt:P279* wd:Q5846096\" ,\"\\n\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5846096 ; wdt:P1416 ?acquirer . ?acquirer wdt:P31/wdt:P279* wd:Q5846096 ; wdt:P1416 ?cloudFront . ?cloudFront wdt:P31/wdt:P279* wd:Q5846096 } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q318128 is Q318128\nwd:Q136469 is Q136469\nwdt:P750 is P750\nwd:Q849363 is Q849363\nwd:Q219635 is Q219635\nwd:Q1628791 is Q1628791\nwd:Q17070012 is Q17070012\nwdt:P127 is P127\nwd:Q65073147 is Q65073147\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n  \t\t\"?resource wdt:P750 wd:Q849363 ;\",\n  \t\t\"   wdt:P127 ?distributorProducer .\"\n  \t]\n}", "normal_query": "?resource wdt:P750 wd:Q849363 ; wdt:P127 ?distributorProducer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9406 is Q318128\nkg:3582 is Q136469\nkg:6794 is P750\nkg:3899 is Q849363\nkg:4815 is Q219635\nkg:7822 is Q1628791\nkg:6151 is Q17070012\nkg:0839 is P127\nkg:8342 is Q65073147\nkg:6881 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?distributorProducer kg:6794 ?distributedProduct .\",\n      \"?distributedProduct kg:3582 ?vanguardBlackrockAcquisition .\",\n      \"?vanguardBlackrockAcquisition kg:0839 ?amazonCloudFront .\",\n      \"?amazonCloudFront kg:8342 ?amazonDotAmazon .\",\n      \"?amazonDotAmazon kg:6151 ?amazonKindle .\",\n      \"?amazonKindle kg:7822 ?abeBooks\"\n    ]\n  }\n", "normal_query": "SELECT ?resource WHERE { ?distributorProducer kg:6794 ?distributedProduct . ?distributedProduct kg:3582 ?vanguardBlackrockAcquisition . ?vanguardBlackrockAcquisition kg:0839 ?amazonCloudFront . ?amazonCloudFront kg:8342 ?amazonDotAmazon . ?amazonDotAmazon kg:6151 ?amazonKindle . ?amazonKindle kg:7822 ?abeBooks LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?person wdt:P161 ?star .\",\n    \"  ?person wdt:P279* wd:Q80354 ;\", \"# Editor\",\n    \"  ?person wdt:P161 ?cinematographer .\", \"# Cinematographer\",\n    \"  FILTER(?star = wd:Q11424999) .\", \"# Female Vampire\",\n    \"  FILTER(?cinematographer = wd:Q3085799) .\", \"# No label defined\",\n    \"  ?person wdt:P36 ?spanish_writer .\", \"# Spanish writer and director of 99 Women, No label defined, The Blood of Fu Manchu\",\n    \"  FILTER(?spanish_writer = wd:Q1028475) .\"\n    ,\"  BIND(EXISTS{?person wdt:P33 ?director} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?person wdt:P161 ?star . ?person wdt:P279* wd:Q80354 ; ?person wdt:P161 ?cinematographer . FILTER(?star = wd:Q11424999) . FILTER(?cinematographer = wd:Q3085799) . ?person wdt:P36 ?spanish_writer . FILTER(?spanish_writer = wd:Q1028475) . BIND(EXISTS{?person wdt:P33 ?director} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwd:Q29 is Q29\nwd:Q289021 is Q289021\nwd:Q4004365 is Q4004365\nwdt:P27 is P27\nwd:Q3207690 is Q3207690\nwd:Q463946 is Q463946\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/Q29 ; wdt:P58 [ wdt:P161* wd:Q3633009 ] ; wdt:P27 wd:Q3207690 ; wdt:P344 [ wdt:P161* wd:Q4004365 ] } ) AS ?result\",\n\t\t\t\"?person\" , \"wdt:P57\" , \"/wdt:P1040\" , \"/wdt:P161\" , \"wd:Q29\" ,\n\t\t\t\"?person\" , \"wdt:P58\" , \"wdt:P161\" , \"*\", \"wd:Q3633009\" ,\n\t\t\t\"?person\" , \"wdt:P27\" , \"wd:Q3207690\" ,\n\t\t\t\"?person\" , \"wdt:P344\" , \"wdt:P161\" , \"*\", \"wd:Q4004365\" ]\n}", "normal_query": "@prefix wd: wd: . SELECT ( EXISTS { ?person wdt:P57/wdt:P1040/Q29 ; wdt:P58 [ wdt:P161* wd:Q3633009 ] ; wdt:P27 wd:Q3207690 ; wdt:P344 [ wdt:P161* wd:Q4004365 ] } ) AS ?result ?person wdt:P57 /wdt:P1040 /wdt:P161 wd:Q29 ?person wdt:P58 wdt:P161 * wd:Q3633009 ?person wdt:P27 wd:Q3207690 ?person wdt:P344 wdt:P161 * wd:Q4004365 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6105 is P57\nkg:3725 is P58\nkg:5429 is P1040\nkg:9963 is Q3633009\nkg:8680 is Q29\nkg:4149 is Q289021\nkg:0390 is Q4004365\nkg:4171 is P27\nkg:2180 is Q3207690\nkg:5880 is Q463946\nkg:3113 is P161\nkg:8531 is P344", "response": "{\n  \"query\": [\n    \"SELECT (COUNT(*) AS ?count) WHERE {\",\n    \"kg:6105 kg:isP57 kg:3725 ;\",\n    \"kg:isP58 kg:9963 ;\",\n    \"kg:isP1040 kg:4149.\",\n    \"kg:3725 kg:isP57 kg:0390 ;\",\n    \"kg:isP58 kg:2180 ;\",\n    \"kg:isP1040 kg:5880.\",\n    \"kg:9963 kg:isP57 kg:4171 ;\",\n    \"kg:isP58 kg:5429 ;\",\n    \"kg:isP1040 kg:3113.\"\n    ]}", "normal_query": "SELECT (COUNT(*) AS ?count) WHERE { kg:6105 kg:isP57 kg:3725 ; kg:isP58 kg:9963 ; kg:isP1040 kg:4149. kg:3725 kg:isP57 kg:0390 ; kg:isP58 kg:2180 ; kg:isP1040 kg:5880. kg:9963 kg:isP57 kg:4171 ; kg:isP58 kg:5429 ; kg:isP1040 kg:3113. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  OPTIONAL {\",\n    \"    <http://www.wikidata.org/entity/Q7824> <http://www.wikidata.org/prop/direct/P136> <http://www.wikidata.org/entity/Q5091>.\",\n    \"    <http://www.wikidata.org/entity/Q5091> <http://www.wikidata.org/prop/direct/P178> <http://www.wikidata.org/entity/Q246147>.\",\n    \"  }\",\n    \"  OPTIONAL {\",\n    \"    <http://www.wikidata.org/entity/Q7824> <http://www.wikidata.org/prop/direct/P37> ?founder.\",\n    \"    FILTER(?founder = <http://www.wikidata.org/entity/Q10569999>).\",\n    \"  }\",\n    \"  BIND(EXISTS { SELECT WHERE {} AS ?exists } AS ?result).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { OPTIONAL { <http://www.wikidata.org/entity/Q7824> <http://www.wikidata.org/prop/direct/P136> <http://www.wikidata.org/entity/Q5091>. <http://www.wikidata.org/entity/Q5091> <http://www.wikidata.org/prop/direct/P178> <http://www.wikidata.org/entity/Q246147>. } OPTIONAL { <http://www.wikidata.org/entity/Q7824> <http://www.wikidata.org/prop/direct/P37> ?founder. FILTER(?founder = <http://www.wikidata.org/entity/Q10569999>). } BIND(EXISTS { SELECT WHERE {} AS ?exists } AS ?result). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q216611 is Q216611\nwd:Q746676 is Q746676\nwdt:P26 is P26\nwd:Q222344 is Q222344\nwd:Q1044630 is Q1044630\nwd:Q6813152 is Q6813152\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q242446 is Q242446", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q258945 wdt:P106/wdt:P112* wd:Q746676 ;\",\n    \"               wdt:P106/wdt:P112* wd:Q222344 ;\",\n    \"               wdt:P106/wdt:P112* wd:Q242446 .\",\n    \"  ?result boolean:.true.\"\n    ]\n  }\n", "normal_query": "SELECT ?result WHERE { wd:Q258945 wdt:P106/wdt:P112* wd:Q746676 ; wdt:P106/wdt:P112* wd:Q222344 ; wdt:P106/wdt:P112* wd:Q242446 . ?result boolean:.true. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2179 is Q216611\nkg:3956 is Q746676\nkg:8666 is P26\nkg:0833 is Q222344\nkg:6382 is Q1044630\nkg:0345 is Q6813152\nkg:2742 is Q258945\nkg:8731 is P112\nkg:2547 is P106\nkg:0788 is Q242446", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:2179 kg:2547 kg:3956 ;\",\n    \"kg:8666 kg:0833 kg:6382 ;\",\n    \"kg:8731 kg:2742 kg:0345 .\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q216611) FILTER (?entity = kg:2179) }\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q746676) FILTER (?entity = kg:3956) }\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q222344) FILTER (?entity = kg:8666) }\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q1044630) FILTER (?entity = kg:0833) }\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q258945) FILTER (?entity = kg:6382) }\",\n    \"SERVICE <http://example.org/sparql-service> {\",\n    \"?entity a ?class .\",\n    \"FILTER (?class = wd:Q242446) FILTER (?entity = kg:0345) }\",\n    \"?result [] []\"\n    ]\n  }\n \t\t\t\t           \t\t", "normal_query": "SELECT ?result WHERE { kg:2179 kg:2547 kg:3956 ; kg:8666 kg:0833 kg:6382 ; kg:8731 kg:2742 kg:0345 . SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q216611) FILTER (?entity = kg:2179) } SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q746676) FILTER (?entity = kg:3956) } SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q222344) FILTER (?entity = kg:8666) } SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q1044630) FILTER (?entity = kg:0833) } SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q258945) FILTER (?entity = kg:6382) } SERVICE <http://example.org//sparql-service> { ?entity a ?class . FILTER (?class = wd:Q242446) FILTER (?entity = kg:0345) } ?result [] [] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?film wdt:P31 wd:Q11424 ;\", \"# Film instance of Q11424 (CreativeWork)\",\n \t\t\"wdt:P577 \\\"The Madness\\\"@en ;\", \"# Title is The Madness\",\n \t\t\"wdt:P608 ?cinematographer .\", \"# Cinematographer\",\n \t\t\"wdt:P161 ?star .\", \"# Star\",\n \t\t\"?film wdt:P3492 ?resource . # Wrote, directed, executive produced, and edited\"\n \t\t]}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 ; wdt:P577 \"The Madness\"@en ; wdt:P608 ?cinematographer . wdt:P161 ?star . ?film wdt:P3492 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q85532437 is Q85532437\nwdt:P58 is P58\nwd:Q85520081 is Q85520081\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{\n \t\"query\": [\n  \t\t\"?film wdt:P57 wd:Q85520081 ;\",\n  \t\t\"    wdt:P58 wd:Q85532437 ;\",\n  \t\t\"    wdt:P1040 wd:Q96054985 ;\",\n  \t\t\"    wdt:P1431 wd:Q87778273 ;\",\n  \t\t\"    wdt:P161 wd:Q85532437 ;\",\n  \t\t\"    wdt:P344 wd:Q96054985 .\"\n  \t]\n}", "normal_query": "?film wdt:P57 wd:Q85520081 ; wdt:P58 wd:Q85532437 ; wdt:P1040 wd:Q96054985 ; wdt:P1431 wd:Q87778273 ; wdt:P161 wd:Q85532437 ; wdt:P344 wd:Q96054985 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9503 is P57\nkg:2126 is Q85532437\nkg:7542 is P58\nkg:6698 is Q85520081\nkg:2944 is P1040\nkg:3405 is Q87778273\nkg:9760 is P1431\nkg:9002 is Q96054985\nkg:7968 is P161\nkg:8447 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9503 ?cinematographer .\",\n      \"?resource kg:2126 ?star .\",\n      \"?resource kg:7542 ?title1 . FILTER(?title1 = \\\"Inception\\\" || ?title1 = \\\"Game Over\\\" || ?title1 = \\\"Liberation\\\") .\",\n      \"?resource kg:6698 ?title2 . FILTER(?title2 = \\\"The Madness\\\") .\",\n      \"?resource kg:2944 ?writer .\",\n      \"?resource kg:3405 ?director .\",\n      \"?resource kg:9760 ?executiveProducer .\",\n      \"?resource kg:9002 ?editor .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9503 ?cinematographer . ?resource kg:2126 ?star . ?resource kg:7542 ?title1 . FILTER(?title1 = \"Inception\" || ?title1 = \"Game Over\" || ?title1 = \"Liberation\") . ?resource kg:6698 ?title2 . FILTER(?title2 = \"The Madness\") . ?resource kg:2944 ?writer . ?resource kg:3405 ?director . ?resource kg:9760 ?executiveProducer . ?resource kg:9002 ?editor . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q11424806.\" ,\n    \"?work wdt:P57 ?writer.\" ,\n    \"?work wdt:P32 ?cinematographer.\" ,\n    \"FILTER(?work IN (wd:Q11424806, wd:Q11424807, wd:Q11424808, wd:Q11424809)).\" ,\n    \"?writer wdt:P31/wdt:P279* wd:Q5.\" ,\n    \"?cinematographer wdt:P31/wdt:P279* wd:Q5.\" ,\n    \"OPTIONAL { ?work wdt:P1625 ?influencedPerson. FILTER(?influencedPerson = wd:Q1048699) }\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?work wdt:P31/wdt:P279* wd:Q11424806. ?work wdt:P57 ?writer. ?work wdt:P32 ?cinematographer. FILTER(?work IN (wd:Q11424806, wd:Q11424807, wd:Q11424808, wd:Q11424809)). ?writer wdt:P31/wdt:P279* wd:Q5. ?cinematographer wdt:P31/wdt:P279* wd:Q5. OPTIONAL { ?work wdt:P1625 ?influencedPerson. FILTER(?influencedPerson = wd:Q1048699) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q717378 is Q717378\nwdt:P58 is P58\nwd:Q5 is Q5\nwd:Q52306598 is Q52306598\nwdt:P26 is P26\nwd:Q613974 is Q613974\nwdt:P31 is P31\nwdt:P737 is P737\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwd:Q2411065 is Q2411065", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?writer wdt:P31 wd:Q5;\",\n\t\t\"   wdt:P737 ?work .\",\n\t\t\"?cinematographer wdt:P31 wd:Q5;\",\n\t\t\"   wdt:P26 ?writer .\",\n\t\t\"?work wdt:P31 wd:Q208910;\",\n\t\t\"   wdt:P58 ?writer;\",\n\t\t\"   wdt:P344 ?cinematographer .\",\n\t\t\"VALUES ?work { wd:Q717378 wd:Q52306598 wd:Q613974 }\",\n\t\t\"?person wdt:P31 wd:Q5;\",\n\t\t\"   wdt:P737 ?writer .\",\n\t\t\"?influence wdt:P31 wd:Q2411065;\",\n\t\t\"   wdt:P737 ?person .\",\n\t\t\"VALUES ?influence { wd:Q1609393 wd:Q208910 }\",\n\t\t\"?resource [] ?writer .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?writer wdt:P31 wd:Q5; wdt:P737 ?work . ?cinematographer wdt:P31 wd:Q5; wdt:P26 ?writer . ?work wdt:P31 wd:Q208910; wdt:P58 ?writer; wdt:P344 ?cinematographer . VALUES ?work { wd:Q717378 wd:Q52306598 wd:Q613974 } ?person wdt:P31 wd:Q5; wdt:P737 ?writer . ?influence wdt:P31 wd:Q2411065; wdt:P737 ?person . VALUES ?influence { wd:Q1609393 wd:Q208910 } ?resource [] ?writer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2068 is Q717378\nkg:6977 is P58\nkg:8967 is Q5\nkg:4388 is Q52306598\nkg:2475 is P26\nkg:8667 is Q613974\nkg:5569 is P31\nkg:9549 is P737\nkg:8346 is Q208910\nkg:2685 is P344\nkg:7782 is Q1609393\nkg:3768 is Q2411065", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?work kg:2475 ?writer .\",\n      \"?work kg:2685 ?cinematographer .\",\n      \"?work kg:9549 [ kg:3768 \\\"The Emperor\\\" ; kg:7782 \\\"Anyone Lived in a Pretty How Town\\\" ; kg:8346 \\\"1:42.08\\\" ; kg:8667 \\\"Herbie married a person and influenced Marcus Orelias and Lorne Lanning\\\" ] .\",\n      \"?writer kg:5569 ?person .\",\n      \"?cinematographer kg:5569 ?person .\",\n      \"?person kg:6977 ?role .\",\n      \"?person kg:8967 ?roleName .\",\n      \"FILTER(?role = \\\"Q71738\\\" || ?role = \\\"Q208910\\\")\"\n    ,\n      \"VALUES ?resource { ?writer ?cinematographer }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work kg:2475 ?writer . ?work kg:2685 ?cinematographer . ?work kg:9549 [ kg:3768 \"The Emperor\" ; kg:7782 \"Anyone Lived in a Pretty How Town\" ; kg:8346 \"1:42.08\" ; kg:8667 \"Herbie married a person and influenced Marcus Orelias and Lorne Lanning\" ] . ?writer kg:5569 ?person . ?cinematographer kg:5569 ?person . ?person kg:6977 ?role . ?person kg:8967 ?roleName . FILTER(?role = \"Q71738\" || ?role = \"Q208910\") VALUES ?resource { ?writer ?cinematographer } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P648 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P1001 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P2860 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P2861 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n    \"       wdt:P577 \\\"Uzak\\\"@en ;\",\n    \"       wdt:P577 \\\"Ağlı Ağaçlar Mayıs\\\"@tr ;\",\n    \"       wdt:P939 wd:Q114246280 .\",\n    \"  ?film wdt:P31 wd:Q114246280 ;\",\n", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwd:Q18609037 is Q18609037\nwd:Q222344 is Q222344\nwdt:P106 is P106", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT ?result WHERE {\\n\\t?film wdt:P57 wd:Q222344 ;\\n\\t\\twdt:P58 wd:Q1361018 ;\\n\\t\\twdt:P1040 wd:Q18609037 ;\\n\\t\\twdt:P1431 wd:Q2086445 .\\n\\t?trilogy wdt:P106 wd:Q2086445 ;\\n\\t\\twdt:P57 ?film ;\\n\\t\\twdt:P58 ?film ;\\n\\t\\twdt:P1040 ?film ;\\n\\t\\twdt:P1431 ?film .\\n\\tBIND(TRUE AS ?result)\\n}\",\n\t\"resultBindingNames\" ]}\n", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?result WHERE { ?film wdt:P57 wd:Q222344 ; wdt:P58 wd:Q1361018 ; wdt:P1040 wd:Q18609037 ; wdt:P1431 wd:Q2086445 . ?trilogy wdt:P106 wd:Q2086445 ; wdt:P57 ?film ; wdt:P58 ?film ; wdt:P1040 ?film ; wdt:P1431 ?film . BIND(TRUE AS ?result) } resultBindingNames LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1489 is Q2086445\nkg:2333 is P57\nkg:7038 is P58\nkg:2038 is P1040\nkg:2955 is P1431\nkg:8800 is Q1361018\nkg:7285 is Q18609037\nkg:7775 is Q222344\nkg:8078 is P106", "response": "{\n  \"query\": [\n    \"SELECT ?result\",\n    \"WHERE {\",\n      \"kg:1489 kg:2333+ kg:8800 ;\",\n      \"kg:1489 kg:2038+ kg:7285 ;\",\n      \"kg:1489 kg:7038+ kg:7775 ;\",\n      \"kg:1489 kg:2955+ kg:7285 .\",\n      \"?result bool:\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?result WHERE { kg:1489 kg:2333+ kg:8800 ; kg:1489 kg:2038+ kg:7285 ; kg:1489 kg:7038+ kg:7775 ; kg:1489 kg:2955+ kg:7285 . ?result bool: LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  ?film1 wdt:P31 wd:Q114248096 ;\", \"# Vagabond, The Gleaners and I\",\n    \"         wdt:P577 ?date1 .\",\n    \"  ?film2 wdt:P31 wd:Q114248096 ;\", \"# Varda by Agnès\",\n    \"         wdt:P577 ?date2 .\",\n    \"  ?director wdt:P50 ?film1 ;\",\n    \"            wdt:P50 ?film2 .\",\n    \"  ?director wdt:P26 wd:Q9483 ;\", \"# Agnès Varda\",\n    \"  ?director wdt:P731 ?jacquesDemy .\", \"# Influence\",\n    \"  FILTER(?date1 < ?date2) .\",\n    \"  BIND(EXISTS { ?film1 wdt:P570 ?marriageDate } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { ?film1 wdt:P31 wd:Q114248096 ; wdt:P577 ?date1 . ?film2 wdt:P31 wd:Q114248096 ; wdt:P577 ?date2 . ?director wdt:P50 ?film1 ; wdt:P50 ?film2 . ?director wdt:P26 wd:Q9483 ; ?director wdt:P731 ?jacquesDemy . FILTER(?date1 < ?date2) . BIND(EXISTS { ?film1 wdt:P570 ?marriageDate } AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2493884 is Q2493884\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q2526255 is Q2526255\nwdt:P106 is P106\nwd:Q63993096 is Q63993096\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q2493884 wdt:P106 ?director ;\",\n    \"    wdt:P737 ?film1 .\",\n    \"  wd:Q2298257 wdt:P106 ?director ;\",\n    \"    wdt:P737 ?film2 .\",\n    \"  ?film1 wdt:P58 ?scriptwriter ;\",\n    \"         wdt:P26 ?editor .\",\n    \"  ?film2 wdt:P58 ?scriptwriter ;\",\n    \"         wdt:P26 ?editor .\",\n    \"  ?scriptwriter wdt:P737 wd:Q63993096 .\",\n    \"  ?director wdt:P737 wd:Q312258 .\",\n    \"  BIND(EXISTS { ?film1 wdt:P1040 ?film2 } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q2493884 wdt:P106 ?director ; wdt:P737 ?film1 . wd:Q2298257 wdt:P106 ?director ; wdt:P737 ?film2 . ?film1 wdt:P58 ?scriptwriter ; wdt:P26 ?editor . ?film2 wdt:P58 ?scriptwriter ; wdt:P26 ?editor . ?scriptwriter wdt:P737 wd:Q63993096 . ?director wdt:P737 wd:Q312258 . BIND(EXISTS { ?film1 wdt:P1040 ?film2 } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6293 is Q2493884\nkg:9159 is Q2298257\nkg:0458 is P1040\nkg:5068 is P58\nkg:1776 is P26\nkg:5634 is P737\nkg:2246 is Q2526255\nkg:7602 is P106\nkg:4671 is Q63993096\nkg:0984 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"kg:6293 kg:7602 kg:9159 ;\",\n    \"kg:5634 kg:0458 ;\",\n    \"kg:5068 kg:2246 ;\",\n    \"kg:1776 kg:4671 .\",\n    \"kg:9159 kg:5634 ?person ;\",\n    \"?person kg:1776 ?jacquesDemy ;\",\n    \"?person kg:0984 ?result.\"\n   \t]}\n", "normal_query": "SELECT ?result WHERE { kg:6293 kg:7602 kg:9159 ; kg:5634 kg:0458 ; kg:5068 kg:2246 ; kg:1776 kg:4671 . kg:9159 kg:5634 ?person ; ?person kg:1776 ?jacquesDemy ; ?person kg:0984 ?result. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424680.\" ,\n    \"?film wdt:P979 ?distributorProducer.\" ,\n    \"?film wdt:P123 ?acquirer.\" ,\n    \"(wd:State_Street_Global_Advisors/wdt/P279*|wd:BlackRock/wdt/P279*|wd:T_Rowe_Price/wdt/P279*|wd:Capital_Group_Companies/wdt/P279*) wd:P226 ?acquirer.\" ,\n    \"(wd:State_Farm_Insurance/wdt/P279*|wd:The_Vanguard_Group/wdt/P279*) wd:P226 ?acquirer.\" ,\n    \"?film wdt:P571 ?startDate.\" ,\n    \"FILTER(YEAR(?startDate) >= 2000)\" , \"-- Assuming the acquisition happened after 2000, adjust as necessary\"\n   \t,\n    \"VALUES ?film { wd:Q146983 }\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?film wdt:P31 wd:Q11424680. ?film wdt:P979 ?distributorProducer. ?film wdt:P123 ?acquirer. (wd:State_Street_Global_Advisors/wdt/P279*|wd:BlackRock/wdt/P279*|wd:T_Rowe_Price/wdt/P279*|wd:Capital_Group_Companies/wdt/P279*) wd:P226 ?acquirer. (wd:State_Farm_Insurance/wdt/P279*|wd:The_Vanguard_Group/wdt/P279*) wd:P226 ?acquirer. ?film wdt:P571 ?startDate. FILTER(YEAR(?startDate) >= 2000) -- Assuming the acquisition happened after 2000, adjust as necessary VALUES ?film { wd:Q146983 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q849363 is Q849363\nwd:Q505275 is Q505275\nwd:Q219635 is Q219635\nwd:Q2062523 is Q2062523\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwd:Q7603552 is Q7603552\nwd:Q2007336 is Q2007336\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n  \t\t\"?subject wdt:P750 wd:Q849363.\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q505275].\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q219635].\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q2062523].\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q3511946].\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q7603552].\"\n  \t\t, \"?subject wdt:P127 [wdt:P272 wd:Q2007336].\"\n  \t\t, \"?subject wdt:P272 wd:Q3511946.\"\n  \t\t, \"?subject wdt:P272 wd:Q7603552.\"\n  \t\t, \"?subject wdt:P272 wd:Q2007336.\"\n  \t]\n  \t}\n  \t\t", "normal_query": "?subject wdt:P750 wd:Q849363. ?subject wdt:P127 [wdt:P272 wd:Q505275]. ?subject wdt:P127 [wdt:P272 wd:Q219635]. ?subject wdt:P127 [wdt:P272 wd:Q2062523]. ?subject wdt:P127 [wdt:P272 wd:Q3511946]. ?subject wdt:P127 [wdt:P272 wd:Q7603552]. ?subject wdt:P127 [wdt:P272 wd:Q2007336]. ?subject wdt:P272 wd:Q3511946. ?subject wdt:P272 wd:Q7603552. ?subject wdt:P272 wd:Q2007336. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6179 is P750\nkg:7910 is Q849363\nkg:5039 is Q505275\nkg:2517 is Q219635\nkg:0561 is Q2062523\nkg:9181 is P127\nkg:1535 is Q3511946\nkg:8413 is Q7603552\nkg:3135 is Q2007336\nkg:3319 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9181 kg:7910 ;\",\n           \"kg:3319 kg:5039 ;\",\n           \"kg:3135 kg:2517 ;\",\n           \"kg:0561 kg:8413 ;\",\n           \"kg:1535 kg:6179.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9181 kg:7910 ; kg:3319 kg:5039 ; kg:3135 kg:2517 ; kg:0561 kg:8413 ; kg:1535 kg:6179. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q114248700 ;\", \"># Film instance of work\",\n    \"wdt:P5776 ?director .\", \"># Directed by\",\n    \"wdt:P5777 ?producer .\", \"># Produced by\",\n    \"wdt:P5779 ?writer1 , ?writer2 , ?writer3 , ?writer4 , ?writer5 ;\", \"># Written by\",\n    \"wdt:P161 ?actor1 , ?actor2 .\", \"># Stars\",\n    \"FILTER(BOUND(?director) && BOUND(?producer) && BOUND(?writer1) && BOUND(?writer2) && BOUND(?writer3) && BOUND(?writer4) && BOUND(?writer5) && BOUND(?actor1) && BOUND(?actor2))\",\n    \"?director rdfs:label 'Randolph Scott'@en .\",\n    \"?producer rdfs:label 'Miriam Hopkins'@en .\",\n    \"?writer1 rdfs:label 'Humphrey Bogart'@en .\",\n    \"?writer2 rdfs:label 'Robert Buckner'@en .\",\n    \"?actor1 rdfs:label 'Errol Flynn'@en .\",\n    \"?actor2 rdfs:label 'Paul Fix'@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q114248700 ; > wdt:P5776 ?director . > wdt:P5777 ?producer . > wdt:P5779 ?writer1 , ?writer2 , ?writer3 , ?writer4 , ?writer5 ; > wdt:P161 ?actor1 , ?actor2 . > FILTER(BOUND(?director) && BOUND(?producer) && BOUND(?writer1) && BOUND(?writer2) && BOUND(?writer3) && BOUND(?writer4) && BOUND(?writer5) && BOUND(?actor1) && BOUND(?actor2)) ?director rdfs:label 'Randolph Scott'@en . ?producer rdfs:label 'Miriam Hopkins'@en . ?writer1 rdfs:label 'Humphrey Bogart'@en . ?writer2 rdfs:label 'Robert Buckner'@en . ?actor1 rdfs:label 'Errol Flynn'@en . ?actor2 rdfs:label 'Paul Fix'@en . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwd:Q16390 is Q16390\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q242477 is Q242477\nwd:Q93188 is Q93188\nwd:Q744357 is Q744357\nwdt:P161 is P161\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n  \t\t\"?film wdt:P57 wd:Q4420093 ;\",\n  \t\t\"    wdt:P58 wd:Q11424 ;\",\n  \t\t\"    wdt:P31 wd:Q295984 ;\",\n  \t\t\"    wdt:P162 wd:Q16390 ;\",\n  \t\t\"    wdt:P161 [\",\n  \t\t\"        wdt:P272 wd:Q242477 ;\",\n  \t\t\"        wdt:P272 wd:Q93188 ;\",\n  \t\t\"        wdt:P272 wd:Q744357\",\n  \t\t\"    ] .\"\n  \t]\n}", "normal_query": "?film wdt:P57 wd:Q4420093 ; wdt:P58 wd:Q11424 ; wdt:P31 wd:Q295984 ; wdt:P162 wd:Q16390 ; wdt:P161 [ wdt:P272 wd:Q242477 ; wdt:P272 wd:Q93188 ; wdt:P272 wd:Q744357 ] . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6318 is P57\nkg:8718 is Q4420093\nkg:5332 is Q11424\nkg:0005 is P58\nkg:6789 is Q295984\nkg:4267 is Q16390\nkg:7326 is P31\nkg:0512 is P162\nkg:5655 is Q242477\nkg:3890 is Q93188\nkg:4674 is Q744357\nkg:7209 is P161\nkg:8286 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film kg:7326 ?director .\",\n      \"?film kg:5655 ?producer .\",\n      \"?film kg:4674 ?writer .\",\n      \"?film kg:8286 [ kg:0512 \\\"Errol Flynn\\\" ; kg:7209 \\\"Paul Fix\\\" ] .\",\n      \"?director kg:3890 \\\"Randolph Scott\\\" .\",\n      \"?producer kg:4267 \\\"Miriam Hopkins\\\" .\",\n      \"?writer kg:6789 \\\"Humphrey Bogart\\\" .\",\n      \"?writer kg:5332 \\\"Robert Buckner\\\" .\",\n      \"?film a ?resource .\"\n    ]\n  }\n \t  \t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?film kg:7326 ?director . ?film kg:5655 ?producer . ?film kg:4674 ?writer . ?film kg:8286 [ kg:0512 \"Errol Flynn\" ; kg:7209 \"Paul Fix\" ] . ?director kg:3890 \"Randolph Scott\" . ?producer kg:4267 \"Miriam Hopkins\" . ?writer kg:6789 \"Humphrey Bogart\" . ?writer kg:5332 \"Robert Buckner\" . ?film a ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"ASK WHERE { wd:Q239675 wdt:P4656 ?screenwriter . }\"] }", "normal_query": "ASK WHERE { wd:Q239675 wdt:P4656 ?screenwriter . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"{\", \"  wd:Q103013 (wdt:P106 ?occupation) .\" , \"}\",\"?occupation wdt:P279* wd:Q69423232 .\", \"BIND((?occupation = wd:Q69423232) as ?result)\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . { wd:Q103013 (wdt:P106 ?occupation) . } ?occupation wdt:P279* wd:Q69423232 . BIND((?occupation = wd:Q69423232) as ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5377 is Q103013\nkg:3581 is P106\nkg:4815 is Q69423232", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK { kg:5377 kg:3581 kg:4815 . }\"]}", "normal_query": "ASK { kg:5377 kg:3581 kg:4815 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?composerP3947 = ?dylanP3947, true, false) AS ?result) WHERE { wd:Q3947 wdt:P106 wd:Q28358 . wd:Q3947 wdt:P1476 ?name . FILTER(LANG(?name) = 'en') . BIND(str(?name) AS ?dylanP3947) . wd:Q3947 wdt:P106 wd:Q25282 . wd:Q3947 wdt:P1476 ?composerName . FILTER(LANG(?composerName) = 'en') . BIND(str(?composerName) AS ?composerP3947) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?composerP3947 = ?dylanP3947, true, false) AS ?result) WHERE { wd:Q3947 wdt:P106 wd:Q28358 . wd:Q3947 wdt:P1476 ?name . FILTER(LANG(?name) = 'en') . BIND(str(?name) AS ?dylanP3947) . wd:Q3947 wdt:P106 wd:Q25282 . wd:Q3947 wdt:P1476 ?composerName . FILTER(LANG(?composerName) = 'en') . BIND(str(?composerName) AS ?composerP3947) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q392 is Q392", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q36834 wdt:P106 wd:Q392. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q36834 wdt:P106 wd:Q392. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2843 is P106\nkg:7831 is Q36834\nkg:4707 is Q392", "response": "{ \"query\": [\"ASK WHERE { <http://rdf.freebase.com/ns/m.01gvp> <http://rdf.freebase.com/ns/wikipedia2mid.is_p106> ?composer . FILTER(?composer = <http://rdf.freebase.com/ns/m.0392>) }\"]}", "normal_query": "ASK WHERE { <http://rdf.freebase.com/ns//m.01gvp> <http://rdf.freebase.com/ns//wikipedia2mid.is_p106> ?composer . FILTER(?composer = <http://rdf.freebase.com/ns//m.0392>) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\"query\": [\n\t\t\t\"{ ?item wdt:P1433 ?foundItem . }\"\n\t\t]\n}", "normal_query": "{ ?item wdt:P1433 ?foundItem . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n \t\t\"query\": [\n\t\t\t\"{ ?entity wdt:P112 ?resource . }\"\n\t\t]\n}", "normal_query": "{ ?entity wdt:P112 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2539 is P112\nkg:1553 is Q5", "response": "{ \"query\": [\"@prefix : {<http://example.org/>}.\", \"SELECT ?resource WHERE { kg:1553 :P112 ?resource . }\"]}", "normal_query": "@prefix : {<http://example.org/>}. SELECT ?resource WHERE { kg:1553 :P112 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\"SELECT ?resource WHERE { wd:Q211596 wdt:P3458 ?resource . }\"]\n} ", "normal_query": "SELECT ?resource WHERE { wd:Q211596 wdt:P3458 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q853 is Q853\nwdt:P1040 is P1040", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9804 is Q853\nkg:9299 is P1040", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\nkg:9804 kg:9299 ?resource.\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { kg:9804 kg:9299 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$SELECT\", \"$ASK\", \"?has_sequel\", \"{\", \"wd:Q19267\", \"$wdt:P1730\", \"?has_sequel\", \"}\", \"$FILTER\", \"((?has_sequel = wd:Q58419))\", \"}\"]\n}", "normal_query": "$SELECT $ASK ?has_sequel { wd:Q19267 $wdt:P1730 ?has_sequel } $FILTER ((?has_sequel = wd:Q58419)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q721 is Q721\nwd:Q1042294 is Q1042294", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q1042294 wdt:P155 wd:Q721. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q1042294 wdt:P155 wd:Q721. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8724 is P155\nkg:4176 is Q721\nkg:2908 is Q1042294", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\" ,\n\"?x kg:P155 kg:4176 .\",\n\"?y kg:P155 kg:2908 .\",\n\"?x kg:Q721 ?y .\",\n\"ASK { <http://rdf.data-vocabulary.org/resource/8724> kg:Q721 ?z }\"]}", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> ?x kg:P155 kg:4176 . ?y kg:P155 kg:2908 . ?x kg:Q721 ?y . ASK { <http://rdf.data-vocabulary.org//>resource/8724> kg:Q721 ?z } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q168 is Q168\nwdt:P155 is P155\nwd:Q131593 is Q131593", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9605 is Q168\nkg:4172 is P155\nkg:6194 is Q131593", "response": "{ \"query\": [\"ASK WHERE { kg:9605 kg:4172 kg:6194 . }\"] }", "normal_query": "ASK WHERE { kg:9605 kg:4172 kg:6194 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?parent WHERE { wd:Q239576 p:P22 ?statement . ?statement ps:P22 ?parent }\"\n]}", "normal_query": "SELECT ?parent WHERE { wd:Q239576 p:P22 ?statement . ?statement ps:P22 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{ \"query\" : [\n    \"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . }\"\n]}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5554 is P40\nkg:0706 is P355\nkg:6549 is Q260", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?parent WHERE {\\n  kg:djm.5554 kg:p40 ?parent .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?parent WHERE { kg:djm.5554 kg:p40 ?parent . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571; wdt:P50 wd:Q42. }\"]\n} ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571; wdt:P50 wd:Q42. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q42 is Q42\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P58 wd:Q42 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P58 wd:Q42 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3912 is Q42\nkg:7317 is P58", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nSELECT ?resource WHERE {\\n?resource kg:P58 kg:3912.\\n}\"] }", "normal_query": "@prefix kg:<http://example.org/kg/>. SELECT ?resource WHERE { ?resource kg:P58 kg:3912. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (EXISTS { wd:Q107965 p:P108 ?employmentStatement . ?employmentStatement ps:P108 wd:Q32 . } ) AS ?result\"\n \t]\n}", "normal_query": "SELECT (EXISTS { wd:Q107965 p:P108 ?employmentStatement . ?employmentStatement ps:P108 wd:Q32 . } ) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q40 is Q40\nwd:Q79070 is Q79070", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q79070 wdt:P108 wd:Q40. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q79070 wdt:P108 wd:Q40. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3861 is P108\nkg:9872 is Q40\nkg:2983 is Q79070", "response": "{ \"query\": [\"ASK { <http://kg.example/kg:2983> <http://kg.example/P108> <http://kg.example/kg:9872> . }\"]}", "normal_query": "ASK { <http://kg.example//kg:2983> <http://kg.example//P108> <http://kg.example//kg:9872> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(?hasAuthor) AS ?result WHERE { wd:Q23116 wdt:P50 ?author . VALUES ?tolkien { wd:Q21318 } . FILTER(?author = ?tolkien) BIND(true AS ?hasAuthor) }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(?hasAuthor) AS ?result WHERE { wd:Q23116 wdt:P50 ?author . VALUES ?tolkien { wd:Q21318 } . FILTER(?author = ?tolkien) BIND(true AS ?hasAuthor) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q80379 is Q80379\nwd:Q892 is Q892\nwdt:P58 is P58", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0340 is Q80379\nkg:6871 is Q892\nkg:3789 is P58", "response": "{ \"query\": [\"ASK WHERE { kg:0340 kg:3789 kg:6871 . }\"] }", "normal_query": "ASK WHERE { kg:0340 kg:3789 kg:6871 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q21465798 wdt:P57 wd:Q2302 . }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q21465798 wdt:P57 wd:Q2302 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q72276 is Q72276\nwd:Q2680 is Q2680", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q72276 wdt:P1431 wd:Q2680. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q72276 wdt:P1431 wd:Q2680. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6783 is P1431\nkg:2469 is Q72276\nkg:3205 is Q2680", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg#> ASK { kg:2469 kg:P1431 kg:3205 . }\"] }", "normal_query": "PREFIX kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2733930 is Q2733930\nwd:Q36834 is Q36834\nwdt:P2515 is P2515", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6017 is P106\nkg:4352 is Q2733930\nkg:8367 is Q36834\nkg:8749 is P2515", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> . \\nASK { kg:6017 kg:8749 kg:4352. }\"]}", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?screenwriter) > 0 AS ?result) WHERE { wd:Q1649578 ?p ?screenwriter. ?screenwriter wdt:P31 wd:Q2411730. }\"\n \t]\n}", "normal_query": "SELECT (COUNT(?screenwriter) > 0 AS ?result) WHERE { wd:Q1649578 ?p ?screenwriter. ?screenwriter wdt:P31 wd:Q2411730. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q158069 is Q158069\nwd:Q69423232 is Q69423232\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q69423232 wdt:P106 wd:Q158069. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q69423232 wdt:P106 wd:Q158069. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9361 is P106\nkg:5939 is Q158069\nkg:2023 is Q69423232\nkg:3413 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:p106 kg:5939 .\",\n\"?x kg:p344 kg:2023 .\",\n\"?x kg:P106 ?y .\",\n\"?z kg:P344 kg:2023 .\",\n\"?z kg:P106 kg:9361 .\",\n\"FILTER(?y=kg:9361)\" ,\n\"ASK {?z ?p ?o}\"]}", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//> . ?x kg:p106 kg:5939 . ?x kg:p344 kg:2023 . ?x kg:P106 ?y . ?z kg:P344 kg:2023 . ?z kg:P106 kg:9361 . FILTER(?y=kg:9361) ASK {?z ?p ?o} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasEmployee = wd:Q189067 , true, false) AS ?result) WHERE { wd:Q189067 wdt:P3482 ?hasEmployee. }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasEmployee = wd:Q189067 , true, false) AS ?result) WHERE { wd:Q189067 wdt:P3482 ?hasEmployee. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q2607 is Q2607\nwdt:P26 is P26\nwd:Q76845 is Q76845", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"{\", \"  ?result ?x wdt:P26 wd:Q76845 .\", \"  ?x wdt:P108 wd:Q2607 .\", \"} UNION {\", \"  ?result wd:Q76845 wdt:P26 ?y .\", \"  ?y wdt:P108 wd:Q2607 .\", \"}\", \"?result\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . { ?result ?x wdt:P26 wd:Q76845 . ?x wdt:P108 wd:Q2607 . } UNION { ?result wd:Q76845 wdt:P26 ?y . ?y wdt:P108 wd:Q2607 . } ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3273 is P108\nkg:5506 is Q2607\nkg:4792 is P26\nkg:2096 is Q76845", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:p108 ?y .\",\n\"?y kg:p26 <kg:m.0d3qkz> .\",\n\"?x kg:p26 <kg:m.0n4v9_5> .\",\n\"FILTER(?x=kg:2096 && ?y=kg:5506)\" ,\n\"?result = kg:3273(?x,?y)\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//> . ?x kg:p108 ?y . ?y kg:p26 <kg:m.0d3qkz> . ?x kg:p26 <kg:m.0n4v9_5> . FILTER(?x=kg:2096 && ?y=kg:5506) ?result = kg:3273(?x,?y) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\" : [\n    \"SELECT ?hasComposer WHERE { wd:Q173569 wdt:P748 ?hasComposer } LIMIT 1\"\n] }", "normal_query": "SELECT ?hasComposer WHERE { wd:Q173569 wdt:P748 ?hasComposer } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q208824 is Q208824\nwd:Q36834 is Q36834\nwdt:P162 is P162\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0379 is Q208824\nkg:7550 is Q36834\nkg:6377 is P162\nkg:4939 is P106\nkg:4843 is P272", "response": "{ \"query\": [\"ASK { kg:0379 kg:6377 ?composer . ?composer kg:4939 kg:7550 }\"] }", "normal_query": "ASK { kg:0379 kg:6377 ?composer . ?composer kg:4939 kg:7550 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwdt:P86 is P86\nwd:Q577126 is Q577126", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"SELECT (COUNT(?composer) > 0 AS ?result) WHERE { wd:Q577126 wdt:P86 ?composer. ?composer wdt:P106 wd:Q69423232. }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (COUNT(?composer) > 0 AS ?result) WHERE { wd:Q577126 wdt:P86 ?composer. ?composer wdt:P106 wd:Q69423232. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4113 is P106\nkg:2292 is Q69423232\nkg:6907 is P86\nkg:8322 is Q577126", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nASK { kg:8322 kg:6907 kg:4113 kg:2292 . }\"] }", "normal_query": "@prefix kg:<http://example.org/kg//>. ASK { kg:8322 kg:6907 kg:4113 kg:2292 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q76582 is Q76582\nwdt:P86 is P86\nwd:Q222344 is Q222344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q222344 wdt:P86 wd:Q76582. }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q222344 wdt:P86 wd:Q76582. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3474 is P106\nkg:7972 is Q76582\nkg:2929 is P86\nkg:5918 is Q222344", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.\\nASK { kg:7972 kg:2929 kg:5918. }\"] }", "normal_query": "@prefix kg:<http://example.org/kg//>. @prefix rdf:<http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?sequel WHERE { wd:Q1965420 schema:hasPart ?sequel . ?sequel wdt:P361 wd:Q1965420. }\"\n]}", "normal_query": "SELECT ?sequel WHERE { wd:Q1965420 schema:hasPart ?sequel . ?sequel wdt:P361 wd:Q1965420. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4348691 is Q4348691\nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q4348691 wdt:P155 ?resource .\", \"}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q4348691 wdt:P155 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7702 is Q4348691\nkg:2537 is P750\nkg:0298 is Q2283\nkg:0218 is P155", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.data-vocabulary.org/resource/Q4348691> kg:P750 ?resource.\\n\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?sequel WHERE {\\n  ?sequel wdt:P364 wd:Q279501 ; # work by Twin Peaks\\n  wdt:P179 ?prequel . # has prequel\\n  ?prequel wdt:P364 wd:Q279489 . # work by Twin Peaks (original)\\n  ?sequel wdt:P178 wd:Q503168 . # directed by David Lynch and Mark Frost\\n  ?sequel wdt:P161 wd:Q129267 . # starring James Parks\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?sequel WHERE { ?sequel wdt:P364 wd:Q279501 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q967797 is Q967797\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P155 is P155", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q967797 wdt:P155 ?resource.\", \"?resource wdt:P161 wd:Q2085.\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q967797 wdt:P155 ?resource. ?resource wdt:P161 wd:Q2085. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8350 is Q967797\nkg:9022 is P161\nkg:8107 is Q2085\nkg:6018 is P155", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.freebase.com/ns/m.03zg4> kg:6018 ?resource.\\n?resource kg:9022 <http://rdf.freebase.com/ns/m.03zg4>.\\n?resource kg:8107 <http://rdf.freebase.com/ns/m.0k5q_0>.\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <http://rdf.freebase.com/ns//m.03zg4> kg:6018 ?resource. ?resource kg:9022 <http://rdf.freebase.com/ns//m.03zg4>. ?resource kg:8107 <http://rdf.freebase.com/ns//m.0k5q_0>. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"{?founder p102 ?statement . ?statement ps102 wd:Q25649378 . ?statement pq150 ?maliaParent .}\",\n \t\t \t\t\t\t\"?founder wdt:P106 wd:Q7889 .\", \">// occupation is film producer\",\n \t\t \t\t\t\t\"?founder wdt:P451 wd:Q25649378 .\", \">// founded Higher Ground Productions\"\n \t\t \t\t\t\t]\n \t\t \t\t \t\t}\n \t\t \t\t \t\t\t\t\t\t      \t", "normal_query": "{?founder p102 ?statement . ?statement ps102 wd:Q25649378 . ?statement pq150 ?maliaParent .} ?founder wdt:P106 wd:Q7889 . >// occupation is film producer ?founder wdt:P451 wd:Q25649378 . >// founded Higher Ground Productions LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044\nwdt:P112 is P112", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \" wd:Q81950264 wdt:P355 ?founder .\", \"?founder wdt:P40 wd:Q15070044 .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q81950264 wdt:P355 ?founder . ?founder wdt:P40 wd:Q15070044 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6694 is Q81950264\nkg:3307 is P355\nkg:3145 is P40\nkg:4139 is Q15070044\nkg:9701 is P112", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:p355/kg:6694 ?y .\",\n\"?y kg:p40/kg:3145 kg:4139 .\",\n\"?x kg:p112/kg:9701 ?z .\",\n\"FILTER(?z = true || ?z = false)\"] }", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ?x kg:p355/kg:6694 ?y . ?y kg:p40/kg:3145 kg:4139 . ?x kg:p112/kg:9701 ?z . FILTER(?z = true || ?z = false) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P3373 is P3373\nwd:Q1022419 is Q1022419\nwd:Q352 is Q352", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?hasOccupation WHERE { wd:Q352 wdt:P3373 ?hasOccupation . FILTER(?hasOccupation = wd:Q1022419) } LIMIT 1\"\n \t]\n}", "normal_query": "SELECT ?hasOccupation WHERE { wd:Q352 wdt:P3373 ?hasOccupation . FILTER(?hasOccupation = wd:Q1022419) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4875 is P108\nkg:0617 is P3373\nkg:5640 is Q1022419\nkg:5846 is Q352", "response": "{ \"query\": [\"ASK { kg:5640 kg:0617/kg:4875* kg:5846 . }\"] }", "normal_query": "ASK { kg:5640 kg:0617/kg:4875* kg:5846 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?employer WHERE {\\n  ?game wdt:P31 wd:Q7889 ;\\n        wdt:P123 ?distributor .\\n  ?distributor wdt:P108 ?employer .\\n  ?game rdfs:label ?titleLabel .\\n  FILTER(LANG(?titleLabel) = \\\"en\\\") .\\n  FILTER(CONTAINS(?titleLabel, \\\"Animal Crossing: Pocket Camp\\\")) .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { ?game wdt:P31 wd:Q7889 ; wdt:P123 ?distributor . ?distributor wdt:P108 ?employer . ?game rdfs:label ?titleLabel . FILTER(LANG(?titleLabel) = \"en\") . FILTER(CONTAINS(?titleLabel, \"Animal Crossing: Pocket Camp\")) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q6078 is Q6078\nwdt:P750 is P750\nwd:Q42310881 is Q42310881", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?distributor WHERE {\\nwd:Q42310881 wdt:P750 ?employerOfDrDre .\\n?employerOfDrDre wdt:P108 ?distributor .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?distributor WHERE { wd:Q42310881 wdt:P750 ?employerOfDrDre . ?employerOfDrDre wdt:P108 ?distributor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3105 is P108\nkg:6825 is Q6078\nkg:2983 is P750\nkg:5683 is Q42310881", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\\n\\nSELECT ?resource WHERE {\\n<http://rdf.data-vocabulary.org/resource/DrDreEmployer> kg:P108 ?resource.\\n?resource kg:P750 <http://rdf.data-vocabulary.org/resource/AnimalCrossingPocketCamp>.\\n\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t \t\t\"SELECT ?parent WHERE { wd:Q169487 p:p521 ?statement . ?statement ps:p521 wd:Q30969 ; pq:P108 wd:Q169487 . ?statement prv:P1943 ?parent }\"\n \t\t \t\t \t\t]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q169487 p:p521 ?statement . ?statement ps:p521 wd:Q30969 ; pq:P108 wd:Q169487 . ?statement prv:P1943 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q103941992 is Q103941992\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044", "response": "{ \"query\" : [\n    \"?employer wdt:P108 wd:Q15070044 .\",\n    \"?parent wdt:P40 ?employer .\",\n    \"?parent wdt:P355 wd:Q103941992 .\",\n    \"?employer\"\n] }", "normal_query": "?employer wdt:P108 wd:Q15070044 . ?parent wdt:P40 ?employer . ?parent wdt:P355 wd:Q103941992 . ?employer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5141 is P108\nkg:8860 is Q103941992\nkg:7388 is P355\nkg:8558 is P40\nkg:6690 is Q15070044", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"SELECT ?resource WHERE {\", \"  kg:5141 kg:8860 kg:7388 kg:8558 kg:6690 .\", \"?employer kg:7388 kg:5141 .\", \"?parent kg:8558 kg:5141 .\", \"?parent kg:8860 kg:6690 .\", \"?resource ?property ?value .\" ]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns/> . SELECT ?resource WHERE { kg:5141 kg:8860 kg:7388 kg:8558 kg:6690 . ?employer kg:7388 kg:5141 . ?parent kg:8558 kg:5141 . ?parent kg:8860 kg:6690 . ?resource ?property ?value . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwd:Q730300 is Q730300", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?spouseSibling) > 0 AS ?result) WHERE { wd:Q1323191 wdt:P26 ?spouse . ?spouse wdt:P3373 ?sibling . wd:Q730300 wdt:P3373 ?sibling }\"\n \t]\n}", "normal_query": "SELECT (COUNT(?spouseSibling) > 0 AS ?result) WHERE { wd:Q1323191 wdt:P26 ?spouse . ?spouse wdt:P3373 ?sibling . wd:Q730300 wdt:P3373 ?sibling } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5230 is P26\nkg:6784 is P3373\nkg:5611 is Q1323191\nkg:7961 is P106\nkg:7441 is Q730300", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\" ,\n\"?x kg:P26 kg:5611 .\",\n\"?x kg:P3373 ?y .\",\n\"?y kg:P106 kg:7961 .\",\n\"?y kg:P348 kg:7441 .\",\n\"FILTER (isLiteral(?y))\",\n\"{?y rdf:type owl:NamedIndividual}\",\n\"ASK { ?x ?p ?o }\"]}", "normal_query": "@prefix kg: <http://example.org/kg//> . ?x kg:P26 kg:5611 . ?x kg:P3373 ?y . ?y kg:P106 kg:7961 . ?y kg:P348 kg:7441 . FILTER (isLiteral(?y)) {?y rdf:type owl:NamedIndividual} ASK { ?x ?p ?o } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{ \"query\": [\"ASK WHERE { wd:Q1102919 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q1323191 . ?spouse wdt:P112 ?clubjenna . }\"]}", "normal_query": "ASK WHERE { wd:Q1102919 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q1323191 . ?spouse wdt:P112 ?clubjenna . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2685 is Q1102919\nkg:8856 is P26\nkg:2403 is Q1323191\nkg:4868 is P112\nkg:3954 is P106", "response": "{ \"query\": [\"ASK { ?x kg:3954 kg:2685 . ?x kg:8856 ?y . ?y kg:4868 kg:2403 }\"] }", "normal_query": "ASK { ?x kg:3954 kg:2685 . ?x kg:8856 ?y . ?y kg:4868 kg:2403 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . ?resource wdcn:writtenAndDirectedBy wd:Q650948 }\"]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . ?resource wdcn:writtenAndDirectedBy wd:Q650948 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2643 is Q2643\nwdt:P57 is P57\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P57 wd:Q2643 .\\n  ?resource wdt:P58 wd:Q2643 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5528 is Q2643\nkg:9476 is P57\nkg:0200 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?x kg:9476 kg:5528 . ?x kg:0200 kg:5528 }\"] }", "normal_query": "SELECT ?resource WHERE { ?x kg:9476 kg:5528 . ?x kg:0200 kg:5528 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t\"SELECT ?resource WHERE { ?resource wdt:P50 wd:Q123456789 . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q123456789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q24907 is Q24907\nwdt:P1040 is P1040", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P58 wd:Q24907.\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9426 is P58\nkg:7794 is Q24907\nkg:9565 is P1040", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n@prefix p:<http://example.org/p/>.\\n\\nSELECT ?resource WHERE {\\n?resource p:P58 kg:7794 .\\n}\"]}", "normal_query": "@prefix kg:<http://example.org/kg/>. @prefix p:<http://example.org/p/>. SELECT ?resource WHERE { ?resource p:P58 kg:7794 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4990261 is Q4990261\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { wd:Q4990261 wdt:P355 ?parent .\\n      ?parent wdt:P27 wd:Q34 .\\n      ?parent wdt:P106 wd:Q1323191 . }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { wd:Q4990261 wdt:P355 ?parent . ?parent wdt:P27 wd:Q34 . ?parent wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2874 is Q4990261\nkg:7163 is P40\nkg:5504 is P355\nkg:3752 is Q1323191\nkg:5083 is P27\nkg:4628 is Q34\nkg:7704 is P106", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg#> ASK { kg:2874 kg:5083 kg:3752 . kg:2874 kg:7163 ?parent . ?parent kg:7704 kg:5504 . FILTER (kg:5504 = kg:34) }\"] }", "normal_query": "PREFIX kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q3514303 is Q3514303", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \"wd:Q222344 wdt:P26 ?spouse .\", \"?spouse wdt:P106 wd:Q3514303 .\", \"?spouse wdt:P27 wd:Q17 .}\", \"\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q222344 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q3514303 . ?spouse wdt:P27 wd:Q17 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8441 is Q17\nkg:9470 is P26\nkg:7001 is Q222344\nkg:7497 is P27\nkg:4826 is P106\nkg:4692 is Q3514303", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\" ,\n\"?s kg:P106 kg:4692 .\",\n\"?s kg:P26 ?spouse .\",\n\"?spouse kg:P106 kg:7001 .\",\n\"?spouse kg:P27 kg:8441 .\",\n\"FILTER (str(?s) = str(kg:4356))\", \"label(?spouse) as ?result\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> ?s kg:P106 kg:4692 . ?s kg:P26 ?spouse . ?spouse kg:P106 kg:7001 . ?spouse kg:P27 kg:8441 . FILTER (str(?s) = str(kg:4356)) label(?spouse) as ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?resource WHERE { wd:Q25679 ?p ?o . FILTER (regex(str(?o), \\\"Canada\\\")) }\"\n \t\t \t\t\t ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q25679 ?p ?o . FILTER (regex(str(?o), \"Canada\")) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q16 is Q16\nwd:Q2526255 is Q2526255\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\"?employerOfFilmDirector wdt:P108 ?filmDirector.\"\n\t,\"?filmDirector wdt:P106 wd:Q2526255.\" ]\n} ", "normal_query": "?employerOfFilmDirector wdt:P108 ?filmDirector. ?filmDirector wdt:P106 wd:Q2526255. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5225 is P108\nkg:8394 is Q16\nkg:5322 is Q2526255\nkg:8183 is P112\nkg:3423 is P106", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.freebase.com/ns/kg:5225> kg:8394 ?resource.\\n?resource kg:8183 kg:5322.\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <http://rdf.freebase.com/ns//kg:5225> kg:8394 ?resource. ?resource kg:8183 kg:5322. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P162 is P162\nwd:Q1744 is Q1744\nwdt:P272 is P272\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P162 wd:Q1744 ;\\n            wdt:P58 wd:Q1744 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P162 wd:Q1744 ; wdt:P58 wd:Q1744 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8263 is P162\nkg:9717 is Q1744\nkg:8042 is P272\nkg:0836 is P58", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.\\n?x kg:P58 kg:9717 ; kg:P272 kg:8263 .\"] }", "normal_query": "@prefix kg:<http://example.org/kg//>. @prefix rdf:<http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$ENTITY$\"] }\n \t\t \t\t \t  \t\t \t\t\t\t\t\t\t", "normal_query": "$ENTITY$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { ?costume_designer wdt:P108 ?employer .\\n       ?employer wdt:P1323191 wd:Q1141467 . }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { ?costume_designer wdt:P108 ?employer . ?employer wdt:P1323191 wd:Q1141467 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6133 is P108\nkg:5628 is Q1141467\nkg:9610 is Q1323191\nkg:6052 is P106\nkg:4927 is P272", "response": "{ \"query\": [\"@prefix : {<http://rdf.freebase.com/ns/>}.\", \"ASK WHERE { kg:6133 :P108 ?x . ?x :P272 kg:5628 }.\"] }", "normal_query": "@prefix : {<http://rdf.freebase.com/ns/>}. ASK WHERE { kg:6133 :P108 ?x . ?x :P272 kg:5628 }. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?sibling) > 0 AS ?result) WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P361 ?filmWork . ?costumeDesigner wdt:P452 ?filmWork . ?costumeDesigner wdt:P90 ?sibling . ?sibling wdt:P26 wd:Q78886 . wd:Q78886 wdt:P22 wd:Nadia Cassini }}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?sibling) > 0 AS ?result) WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P361 ?filmWork . ?costumeDesigner wdt:P452 ?filmWork . ?costumeDesigner wdt:P90 ?sibling . ?sibling wdt:P26 wd:Q78886 . wd:Q78886 wdt:P22 wd:Nadia Cassini }} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354\nwdt:P106 is P106", "response": "{\n \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { ?costumeDesigner wdt:P3373 ?sibling ; wdt:P26 wd:Q1323191 . }\"]\n}", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { ?costumeDesigner wdt:P3373 ?sibling ; wdt:P26 wd:Q1323191 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7569 is P26\nkg:5526 is P3373\nkg:3310 is Q1323191\nkg:9214 is Q461354\nkg:0795 is P106", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\" ,\n\"?x kg:P3373 kg:3310 .\",\n\"?x kg:P26 ?y .\",\n\"?y kg:P3373 kg:9214 .\"] }", "normal_query": "@prefix kg: <http://example.org/kg//> . ?x kg:P3373 kg:3310 . ?x kg:P26 ?y . ?y kg:P3373 kg:9214 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?parentCompany WHERE { wd:Q12345678 wdt:P108 ?company . ?company wdt:P469 ?parentCompany }\"\n \t\t \t\t\t \t\t]\n}", "normal_query": "SELECT ?parentCompany WHERE { wd:Q12345678 wdt:P108 ?company . ?company wdt:P469 ?parentCompany } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q67134 is Q67134\nwdt:P40 is P40\nwd:Q4830453 is Q4830453", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n  \t\t\"{ ?employer wdt:P108 wd:Q67134 . ?employer wdt:P31 wd:Q4830453 }\"\n  \t]\n}", "normal_query": "{ ?employer wdt:P108 wd:Q67134 . ?employer wdt:P31 wd:Q4830453 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8352 is P108\nkg:0741 is P355\nkg:3431 is P31\nkg:2837 is Q67134\nkg:2647 is P40\nkg:4063 is Q4830453", "response": "{ \"query\" : [\"SELECT ?parentCompany WHERE { kg:8352 P108 ?employer . ?employer P355 kg:2837 }\"] }", "normal_query": "SELECT ?parentCompany WHERE { kg:8352 P108 ?employer . ?employer P355 kg:2837 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?employer WHERE {\",\n \t\t \t\t\t\"  wd:Q103578692 wdt:P108 ?employer .\", \">// Claire Doutriaux is Q103578692, P108 for employer\"\n \t\t \t\t\t] }\n \t\t \t\t\t\t\t \t\t\t\t \t\t\t \t", "normal_query": "SELECT ?employer WHERE { wd:Q103578692 wdt:P108 ?employer . >// Claire Doutriaux is Q103578692, P108 for employer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwd:Q11424 is Q11424\nwdt:P31 is P31", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \" wd:Q1094792 wdt:P108 ?employer .\", \"?employer wdt:P750 wd:Q11424 .\", \"?resource (wdt:P31/wdt:P279*) wd:Q11424 .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P750 wd:Q11424 . ?resource (wdt:P31/wdt:P279*) wd:Q11424 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2383 is Q1094792\nkg:8379 is P108\nkg:3353 is P750\nkg:6890 is Q11424\nkg:7882 is P31", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"SELECT ?employer WHERE {\", \"  kg:2383 kg:8379 ?employer .\", \"?employer kg:3353 kg:6890 .}\", \"}\"]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns/> . SELECT ?employer WHERE { kg:2383 kg:8379 ?employer . ?employer kg:3353 kg:6890 .} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5484 is P112\nkg:3971 is P750\nkg:3993 is Q34\nkg:2670 is Q1651543\nkg:5518 is P272", "response": "{ \"query\": [\"ASK { kg:2670 P750/kg:3993 . }\"]}", "normal_query": "ASK { kg:2670 P750/kg:3993 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . select ?x where { ?x wdt:P31 wd:Q5 ; wdt:P27 wd:Q169 ; wdt:P106 wd:Q184962 . ?y wdt:P26 ?x ; wdt:P19 wd:Q169 ; wdt:P1406 wd:Q335889 . } limit 1\"]\n}", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . select ?x where { ?x wdt:P31 wd:Q5 ; wdt:P27 wd:Q169 ; wdt:P106 wd:Q184962 . ?y wdt:P26 ?x ; wdt:P19 wd:Q169 ; wdt:P1406 wd:Q335889 . } limit 1 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P27 is P27\nwd:Q1323191 is Q1323191\nwd:Q34 is Q34\nwd:Q6200573 is Q6200573\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK WHERE {\\n ?x wdt:P106 wd:Q1323191 ;\\n     wdt:P26 ?y .\\n ?y wdt:P27 wd:Q34 .\\n FILTER(?x = wd:Q6200573)\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { ?x wdt:P106 wd:Q1323191 ; wdt:P26 ?y . ?y wdt:P27 wd:Q34 . FILTER(?x = wd:Q6200573) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7235 is P26\nkg:2740 is P27\nkg:9611 is Q1323191\nkg:1646 is Q34\nkg:8811 is Q6200573\nkg:9204 is P106", "response": "{ \"query\": [\"ASK { kg:9611 p26/kg:7235 ?x . ?x p27/kg:1646 . ?x p106/kg:8811 }\"]}", "normal_query": "ASK { kg:9611 p26/kg:7235 ?x . ?x p27/kg:1646 . ?x p106/kg:8811 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?spouse ?sibling\\nWHERE {\\n  wd:Q176928 wdt:P106 ?role ;\\n          wdt:P26 ?spouse ;\\nwdt:P3373 ?sibling .\\nFILTER(?role = wd:Q42951) }\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?spouse ?sibling WHERE { wd:Q176928 wdt:P106 ?role ; wdt:P26 ?spouse ; wdt:P3373 ?sibling . FILTER(?role = wd:Q42951) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P3373 is P3373\nwd:Q2045778 is Q2045778", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"wd:Q3356 wdt:P26 ?spouse .\", \"wd:Q3356 wdt:P3373 ?sibling .\", \"?spouse wdt:P26 wd:Q2045778 .\", \"?sibling wdt:P26 wd:Q2045778 .\"]}", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . wd:Q3356 wdt:P26 ?spouse . wd:Q3356 wdt:P3373 ?sibling . ?spouse wdt:P26 wd:Q2045778 . ?sibling wdt:P26 wd:Q2045778 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5243 is P26\nkg:5778 is Q3356\nkg:3352 is P3373\nkg:9457 is Q2045778", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\\nSELECT ?resource WHERE {\\n  kg:Q3356 kg:P26 ?resource .\\n  kg:Q3356 kg:P3373 ?resource\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/> . SELECT ?resource WHERE { kg:Q3356 kg:P26 ?resource . kg:Q3356 kg:P3373 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?producer ?distributor WHERE {\",\n \t\t \t\t\t\"  wd:Q267594 wdt:P169 ?producer .\", \">// assumes Q267974 is the Sweden entity, needs to be replaced with correct Sweden item ID if different or not specified in the original question context. Replace with actual The Magic Flute item ID if available and relevant for filtering results specifically to this work's production/distribution by Sweden. \",\n \t\t \t\t\t\"  wd:Q267594 wdt:P488 ?distributor .\",\n \t\t \t\t\t\"}\"\n \t\t \t\t\t] }\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q267594 wdt:P169 ?producer . >// assumes Q267974 is the Sweden entity, needs to be replaced with correct Sweden item ID if different or not specified in the original question context. Replace with actual The Magic Flute item ID if available and relevant for filtering results specifically to this work's production/distribution by Sweden. wd:Q267594 wdt:P488 ?distributor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\"?x0 ?y0 wd:Q1651543.\"\n\t,\"?x0 wdt:P750 ?x1.\"\n\t,\"?x1 wdt:P112 wd:Q34.\"\n\t]\n}", "normal_query": "?x0 ?y0 wd:Q1651543. ?x0 wdt:P750 ?x1. ?x1 wdt:P112 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6995 is P112\nkg:1073 is P750\nkg:2711 is Q34\nkg:8386 is Q1651543\nkg:0606 is P272", "response": "{ \"query\": [\"SELECT ?producer ?distributor WHERE { kg:2711 P112 ?producer . kg:2711 P750 ?distributor }\"] }", "normal_query": "SELECT ?producer ?distributor WHERE { kg:2711 P112 ?producer . kg:2711 P750 ?distributor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(?founderIsSiblingOfPrince) WHERE { wd:Q7815 wdt:P161 ?founder . ?founder wdt:P452 wd:Q930667 . ?prince wdt:P106 wd:Q7467 ; wdt:P26 ?siblingOfPrince . ?founder wdt:P3373 ?siblingOfPrince . BIND(?founder = ?siblingOfPrince AS ?founderIsSiblingOfPrince) }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(?founderIsSiblingOfPrince) WHERE { wd:Q7815 wdt:P161 ?founder . ?founder wdt:P452 wd:Q930667 . ?prince wdt:P106 wd:Q7467 ; wdt:P26 ?siblingOfPrince . ?founder wdt:P3373 ?siblingOfPrince . BIND(?founder = ?siblingOfPrince AS ?founderIsSiblingOfPrince) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2336212 is Q2336212\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q117892 is Q117892\nwdt:P112 is P112\nwd:Q29999 is Q29999", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \"wd:Q2336212 wdt:P112 ?person .\", \"?person wdt:P3373 wd:Q117892 .\", \"?person wdt:P27 wd:Q29999 .}\", \"\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q2336212 wdt:P112 ?person . ?person wdt:P3373 wd:Q117892 . ?person wdt:P27 wd:Q29999 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6698 is Q2336212\nkg:3351 is P3373\nkg:6005 is P27\nkg:9572 is Q117892\nkg:3163 is P112\nkg:8045 is Q29999", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"ASK { kg:d.0akdj7k _:_a .\", \"_:_a kg:3351 kg:6698 .\", \"_:_a kg:3163 kg:9572 .\", \"_:_a kg:8045 kg:6005 . }\"]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ASK { kg:d.0akdj7k _:_a . _:_a kg:3351 kg:6698 . _:_a kg:3163 kg:9572 . _:_a kg:8045 kg:6005 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?brotherOrSister) > 0 AS ?result) WHERE {\",\n \t\t\t\"?person wdt:P31 wd:Q5 ;\",\n \t\t\t\t\"wdt:P106 wd:Q28497 ;\",\n \t\t\t\t\"wdt:P102 wd:Q2270 ;\",\n \t\t\t\t\"wdt:P3373 ?brotherOrSister .\",\n \t\t\t\"?brotherOrSister wdt:P102 wd:Q2270 ;\",\n \t\t\t\t\"wdt:P451 wd:Q69867 .\"\n \t\t,\"?person rdfs:label ?name FILTER (LANG(?name) = 'de') FILTER (?name = 'Dieter Hoeneß').\"\n \t]}\n \t\t\t", "normal_query": "SELECT (COUNT(?brotherOrSister) > 0 AS ?result) WHERE { ?person wdt:P31 wd:Q5 ; wdt:P106 wd:Q28497 ; wdt:P102 wd:Q2270 ; wdt:P3373 ?brotherOrSister . ?brotherOrSister wdt:P102 wd:Q2270 ; wdt:P451 wd:Q69867 . ?person rdfs:label ?name FILTER (LANG(?name) = 'de') FILTER (?name = 'Dieter Hoeneß'). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q60414 is Q60414\nwdt:P3373 is P3373\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8556 is P108\nkg:2123 is Q60414\nkg:7792 is P3373\nkg:5478 is Q15789\nkg:6546 is P27\nkg:9615 is Q183", "response": "{ \"query\": [\"ASK { kg:2123 p108 _:x . _:x p3373 kg:5478 . kg:5478 p27 kg:9615 }\"] }", "normal_query": "ASK { kg:2123 p108 _:x . _:x p3373 kg:5478 . kg:5478 p27 kg:9615 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label ?titleLabel. FILTER(CONTAINS(LCASE(?titleLabel), \\\"drums of love\\\")). ?film wdt:P987 ?producer. ?producer wdt:P172 wd:Q65066. }\"\n \t\t \t\t]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label ?titleLabel. FILTER(CONTAINS(LCASE(?titleLabel), \"drums of love\")). ?film wdt:P987 ?producer. ?producer wdt:P172 wd:Q65066. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwd:Q882 is Q882\nwdt:P750 is P750\nwdt:P112 is P112\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q3715556 wdt:P112 ?resource .\", \"?resource wdt:P750 wd:Q882 .}\", \"\", \"]\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q3715556 wdt:P112 ?resource . ?resource wdt:P750 wd:Q882 .} ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8209 is Q3715556\nkg:4426 is Q882\nkg:9672 is P750\nkg:0016 is P112\nkg:3116 is P272", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?producer ?distributor WHERE {\\n?film kg:P112 ?producer ; kg:P750 ?distributor .\\n?producer kg:P272 kg:4426 .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?work wdt:P50 wd:Q27964; wdt:P991 wd:Q83651.\"\n  \t]\n}", "normal_query": "?work wdt:P50 wd:Q27964; wdt:P991 wd:Q83651. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P162 is P162\nwd:Q888311 is Q888311\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n ?x wdt:P58 wd:Q4500 ; wdt:P162 wd:Q888311 .\\n ?resource wdt:P272 ?x .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?x wdt:P58 wd:Q4500 ; wdt:P162 wd:Q888311 . ?resource wdt:P272 ?x . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0791 is P58\nkg:2994 is Q4500\nkg:8432 is P162\nkg:7545 is Q888311\nkg:3490 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:7545 P58 ?resource . kg:7545 P162 kg:2990 }\"] }", "normal_query": "SELECT ?resource WHERE { kg:7545 P58 ?resource . kg:7545 P162 kg:2990 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$ENTITY$\"] }\n \t\t \t\t \t  \t\t \t\t\t\t\t\t\t", "normal_query": "$ENTITY$ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1079409 is Q1079409\nwd:Q142 is Q142\nwdt:P31 is P31\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q4830453 is Q4830453\nwdt:P112 is P112", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \" wd:Q1079409 wdt:P31 wd:Q4830453 .\", \" wd:Q1079409 wdt:P112 wd:Q142 .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q1079409 wdt:P31 wd:Q4830453 . wd:Q1079409 wdt:P112 wd:Q142 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6647 is Q1079409\nkg:0267 is Q142\nkg:3839 is P31\nkg:4332 is P3373\nkg:7131 is P27\nkg:8417 is Q4830453\nkg:9900 is P112", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:9900 kg:6647 .\",\n\"?x kg:7131 kg:0267 .\",\n\"?y kg:9900 kg:8417 .\",\n\"?y kg:7131 kg:0267 .\",\n\"?z kg:4332 ?y .\",\n\"?z kg:3839 ?x .\",\n\"FILTER(?x != ?y) .\" ,\n\"ASK { ?z kg:4332 ?y }\"]}", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//> . ?x kg:9900 kg:6647 . ?x kg:7131 kg:0267 . ?y kg:9900 kg:8417 . ?y kg:7131 kg:0267 . ?z kg:4332 ?y . ?z kg:3839 ?x . FILTER(?x != ?y) . ASK { ?z kg:4332 ?y } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q320211 is Q320211\nwdt:P162 is P162\nwd:Q2831 is Q2831\nwd:Q44477 is Q44477\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q320211 wdt:P58 ?producer . ?producer wdt:P272 wd:Q2831 . wd:Q320211 wdt:P162 wd:Q44477 . }\"] }", "normal_query": "ASK WHERE { wd:Q320211 wdt:P58 ?producer . ?producer wdt:P272 wd:Q2831 . wd:Q320211 wdt:P162 wd:Q44477 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8529 is P58\nkg:7815 is Q320211\nkg:9226 is P162\nkg:0017 is Q2831\nkg:6821 is Q44477\nkg:1786 is P272", "response": "{ \"query\": [\"ASK { <http://rdf.freebase.com/ns/m.00zg5x> <http://rdf.freebase.com/ns/common/topic/producer> <http://rdf.freebase.com/ns/m.00yv48> . <http://rdf.freebase.com/ns/m.00zg5x> <http://rdf.freebase.com/ns/common/topic/writer> <http://rdf.freebase.com/ns/m.00yv48> }\"]}", "normal_query": "ASK { <http://rdf.freebase.com/ns//m.00zg5x> <http://rdf.freebase.com/ns/common/topic//producer> <http://rdf.freebase.com/ns//m.00yv48> . <http://rdf.freebase.com/ns//m.00zg5x> <http://rdf.freebase.com/ns/common/topic//writer> <http://rdf.freebase.com/ns//m.00yv48> } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?work wdt:P31 wd:Q11424. \",\n  \t\t\"?work wdt:P957 wd:Q680268. \",\n  \t\t\"?work wdt:P57 wd:Q21178. \",\n  \t\t\"?work wdt:P1433 ?writtenBy. \"\n \t]\n \t}\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t", "normal_query": "?work wdt:P31 wd:Q11424. ?work wdt:P957 wd:Q680268. ?work wdt:P57 wd:Q21178. ?work wdt:P1433 ?writtenBy. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q8877 is Q8877\nwdt:P1431 is P1431\nwd:Q75079 is Q75079\nwdt:P58 is P58", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"?resource wdt:P1431 wd:Q8877 ;\", \"wdt:P58 wd:Q75079 .}\", \"\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q8877 ; wdt:P58 wd:Q75079 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1015 is Q8877\nkg:2440 is P1431\nkg:3954 is Q75079\nkg:1631 is P58", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nSELECT ?resource WHERE {\\n\\t?x kg:2440 kg:3954 ;\\n\\t\\tkg:1631 kg:1015 .\\n\\t?x kg:1631 ?resource .\\n}\"] }", "normal_query": "@prefix kg:<http://example.org/kg/>. SELECT ?resource WHERE { ?x kg:2440 kg:3954 ; kg:1631 kg:1015 . ?x kg:1631 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\t\"?resource wdt:P31 wd:Q47569; \",\n \t\t  \t\t\t\"wdt:P17 wd:Q188; \",\n \t\t  \t\t\t\"wdt:P169 wd:Q20658. }\"\n \t\t \t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47569; wdt:P17 wd:Q188; wdt:P169 wd:Q20658. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\"?x wdt:P112 wd:Q34 . ?x wdt:P750 wd:Q1651543 .\"\n]\n}", "normal_query": "?x wdt:P112 wd:Q34 . ?x wdt:P750 wd:Q1651543 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5489 is P112\nkg:5509 is P750\nkg:6133 is Q34\nkg:1703 is Q1651543\nkg:6530 is P272", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix schema: <http://schema.org/> .\\n\\nSELECT ?resource WHERE {\\n  kg:5489 schema:P750 kg:6133 ; schema:P112 ?resource .\\n  kg:6133 rdf:type kg:Q34 .\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg//> . @prefix rdf: <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT (COUNT(?x) AS ?result) WHERE {\",\n \t\t\"  wd:Q106475 wdt:P32|wdt:P26|wdt:P39 ?person .\",\n \t\t\"  ?person wdt:P26 wd:Q106481 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?x) AS ?result) WHERE { wd:Q106475 wdt:P32|wdt:P26|wdt:P39 ?person . ?person wdt:P26 wd:Q106481 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P3373 is P3373\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?x) AS ?result) WHERE {\",\n \t\t\t\"{ wd:Q210535 wdt:P26 ?spouse. ?spouse wdt:P26/wdt:P355* wd:Q443473. }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ wd:Q210535 wdt:P40 ?child. ?child wdt:P26/wdt:P355* wd:Q443473. }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ wd:Q210535 wdt:P3373 ?sibling. ?sibling wdt:P26/wdt:P355* wd:Q443473. }\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?x) AS ?result) WHERE { { wd:Q210535 wdt:P26 ?spouse. ?spouse wdt:P26/wdt:P355* wd:Q443473. } UNION { wd:Q210535 wdt:P40 ?child. ?child wdt:P26/wdt:P355* wd:Q443473. } UNION { wd:Q210535 wdt:P3373 ?sibling. ?sibling wdt:P26/wdt:P355* wd:Q443473. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0923 is P26\nkg:4012 is P40\nkg:8757 is P355\nkg:6273 is P3373\nkg:4555 is Q210535\nkg:9518 is Q443473", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg#> ASK { kg:4555 kg:0923 ?x . ?x kg:8757 kg:9518 } UNION { kg:4555 kg:4012 ?y . ?y kg:8757 kg:9518 } UNION { kg:4555 kg:6273 ?z . ?z kg:8757 kg:9518 }\"] }", "normal_query": "PREFIX kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q6581097 is Q6581097\nwd:Q233128 is Q233128", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"SELECT (IF(?hasSpouse = wd:Q6581097, true, false) AS ?result) WHERE {\", \"wd:Q233128 wdt:P26 ?spouse .\", \"?spouse wdt:P21 wd:Q6581097 .\", \"?spouse wdt:P27 wd:Q1323191 .\", \"?spouse wdt:P106 wd:Q16 .\", \"BIND(?spouse AS ?hasSpouse) }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasSpouse = wd:Q6581097, true, false) AS ?result) WHERE { wd:Q233128 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 . ?spouse wdt:P27 wd:Q1323191 . ?spouse wdt:P106 wd:Q16 . BIND(?spouse AS ?hasSpouse) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6083 is Q16\nkg:5047 is P26\nkg:9612 is Q1323191\nkg:9401 is P21\nkg:2669 is P27\nkg:7176 is P106\nkg:1713 is Q6581097\nkg:2219 is Q233128", "response": "{ \"query\": [\"ASK { kg:1713 kg:5047/kg:7176/kg:2669/kg:9612/kg:2219/kg:6083/kg:9401 ?x. }\"] }", "normal_query": "ASK { kg:1713 kg:5047/kg:7176/kg:2669/kg:9612/kg:2219/kg:6083/kg:9401 ?x. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t \t\t\t\"SELECT ?resource WHERE { \",\n \t\t  \t\t\t\"?work wdt:P31 wd:Q59486; \", \"path:(wdt:P179*|wdt:P1472) wd:Q206956;\", \"path:wdt:P179 wd:Q206956. \",\n \t\t  \t\t\t\"?work wdt:P179 ?sequelOf; \", \"?sequelOf rdfs:label \\\"Between Love and Hatred\\\"@en. \",\n \t\t  \t\t\t\"FILTER NOT EXISTS {?work wdt:P345 ?imdb} \",\n \t\t  \t\t\t\"?work wdt:P364 wd:Q206956. \",\n \t\t  \t\t\t\"?work wdt:P179 ?sequelOf; \", \"?sequelOf rdfs:label \\\"Between Love and Hatred\\\"@en. \",\n \t\t  \t\t\t\"?resource wdt:P31/wdt:P279* wd:Q4180568. \",\n \t\t  \t\t\t\"}\"\n \t\t \t\t\t] }\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P31 wd:Q59486; path:(wdt:P179*|wdt:P1472) wd:Q206956; path:wdt:P179 wd:Q206956. ?work wdt:P179 ?sequelOf; ?sequelOf rdfs:label \"Between Love and Hatred\"@en. FILTER NOT EXISTS {?work wdt:P345 ?imdb} ?work wdt:P364 wd:Q206956. ?work wdt:P179 ?sequelOf; ?sequelOf rdfs:label \"Between Love and Hatred\"@en. ?resource wdt:P31/wdt:P279* wd:Q4180568. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099\nwdt:P155 is P155", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?item wdt:P162 wd:Q115945; wdt:P155 wd:Q47095. ?item wdt:P31/wdt:P279* wd:Q11424.}\"\n     \t\t ]\n}", "normal_query": "{?item wdt:P162 wd:Q115945; wdt:P155 wd:Q47095. ?item wdt:P31/wdt:P279* wd:Q11424.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0925 is P750\nkg:1844 is Q115945\nkg:5970 is P162\nkg:0055 is P272\nkg:3884 is Q47099\nkg:9227 is P155", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\\n\\nSELECT ?resource WHERE {\\n<http://rdf.data-vocabulary.org/resource/3884> kg:P162 ?resource.\\n<http://rdf.data-vocabulary.org/resource/3884> kg:P750 <http://rdf.data-vocabulary.org/resource/1844> .\\n\"]} ", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikida‌t.org/prop/direct/> .\\n\\nSELECT ?child ?parent\\nWHERE {\\n?acquisition wdt:P17 ‌Verizon_Communications_INC_.\\n?acquisition wdt:P361 ?child.\\n?acquisition wdt:P209‌4 ?parent.\\n}\\n\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikida‌t.org/prop/direct/> . SELECT ?child ?parent WHERE { ?acquisition wdt:P17 ‌Verizon_Communications_INC_. ?acquisition wdt:P361 ?child. ?acquisition wdt:P209‌4 ?parent. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q467752 is Q467752\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwdt:P127 is P127\nwdt:P749 is P749", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?childCompany ?parentCompany WHERE {\\n  wd:Q467752 wdt:P355 ?childCompany ; wdt:P127 ?parentCompany .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?childCompany ?parentCompany WHERE { wd:Q467752 wdt:P355 ?childCompany ; wdt:P127 ?parentCompany . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2565 is P40\nkg:0532 is P355\nkg:4626 is Q467752\nkg:5815 is P31\nkg:3431 is Q4830453\nkg:9280 is P127\nkg:0489 is P749", "response": "{ \"query\": [\"SELECT ?child ?parent WHERE { kg:4626 ?p ?child . kg:4626 ?q ?parent . FILTER(?child != ?parent) }\"] }", "normal_query": "SELECT ?child ?parent WHERE { kg:4626 ?p ?child . kg:4626 ?q ?parent . FILTER(?child != ?parent) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q524849 is Q524849\nwd:Q882 is Q882\nwdt:P750 is P750\nwd:Q104109 is Q104109\nwdt:P112 is P112\nwdt:P272 is P272", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0762 is Q524849\nkg:9606 is Q882\nkg:9314 is P750\nkg:1063 is Q104109\nkg:2310 is P112\nkg:7316 is P272", "response": "{ \"query\": [\"ASK { kg:0762 kg:2310 ?x . ?x kg:7316 [ kg:9606 wd:Q40185 ; kg:9314 wd:Q60676 ] } UNION { kg:0762 kg:2310 ?x . ?x kg:7316 [ kg:9606 wd:Q60676 ; kg:9314 wd:Q40185 ] }\"] }", "normal_query": "ASK { kg:0762 kg:2310 ?x . ?x kg:7316 [ kg:9606 wd:Q40185 ; kg:9314 wd:Q60676 ] } UNION { kg:0762 kg:2310 ?x . ?x kg:7316 [ kg:9606 wd:Q60676 ; kg:9314 wd:Q40185 ] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\n  \t\t \t  \t\t \t\t \t  \t\t \"description\" ] }\n\t\t\t \t  \t\t\t\t\t \t \t\t\t \t", "normal_query": "description LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P737 is P737\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P3373 is P3373\nwdt:P106 is P106\nwd:Q4811453 is Q4811453", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?actor) > 0 AS ?result) WHERE { ?actor wdt:P737 wd:Q33999 ; wdt:P106 wd:Q142701 . wd:Q4811453 wdt:P3373 ?actor }\"\n \t]\n}", "normal_query": "SELECT (COUNT(?actor) > 0 AS ?result) WHERE { ?actor wdt:P737 wd:Q33999 ; wdt:P106 wd:Q142701 . wd:Q4811453 wdt:P3373 ?actor } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5553 is P737\nkg:1882 is Q33999\nkg:0703 is Q142701\nkg:8622 is P3373\nkg:9946 is P106\nkg:4070 is Q4811453", "response": "{ \"query\": [\"ASK { kg:5553 P737/kg:1882 ; P3373/kg:0703 ; P106/kg:9946 . }\"]}", "normal_query": "ASK { kg:5553 P737/kg:1882 ; P3373/kg:0703 ; P106/kg:9946 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P50/wdt:P177 ?author1.\"\n \t\t, \"?work wdt:P50/wdt:P177 ?author2.\"\n \t\t, \"?work wdt:P50/wdt:P177 ?author3.\"\n \t\t, \"VALUES (?author1) {(wd:Q48969)}\" ,\"%NEWLINE%\"\n \t\t, \"VALUES (?author2) {(wd:Q48970)}\" ,\"%NEWLINE%\"\n \t\t, \"VALUES (?author3) {(wd:Q48971)}\" ,\"%NEWLINE%\"\n \t\t, \"?work wdt:P31 wd:Q571.\"\n \t\t, \"?work wdt:P959 ?writtenWork.\"\n \t\t, \"?writtenWork wdt:P31 wd:Q20631.\"\n \t\t, \"SERVICE wikibase:(wdsv-SELECT DISTINCT ?writtenWork)\"\n \t\t \t\t \t\t]\n}", "normal_query": "?work wdt:P50/wdt:P177 ?author1. ?work wdt:P50/wdt:P177 ?author2. ?work wdt:P50/wdt:P177 ?author3. VALUES (?author1) {(wd:Q48969)} %NEWLINE% VALUES (?author2) {(wd:Q48970)} %NEWLINE% VALUES (?author3) {(wd:Q48971)} %NEWLINE% ?work wdt:P31 wd:Q571. ?work wdt:P959 ?writtenWork. ?writtenWork wdt:P31 wd:Q20631. SERVICE wikibase:(wdsv-SELECT DISTINCT ?writtenWork) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?resource wdt:P58 wd:Q35979475 .\",\n\t\t \"?resource wdt:P58 wd:Q1687239 .\",\n\t\t \"?resource wdt:P58 wd:Q562108 .\"\n\t ]\n}", "normal_query": "?resource wdt:P58 wd:Q35979475 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2818 is P58\nkg:0501 is P1040\nkg:9608 is Q35979475\nkg:4803 is Q1687239\nkg:2068 is Q562108", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:2818 <http://purl.org/dc/elements/1.1/contributor> ?resource . kg:0501 <http://purl.org/dc/elements/1.1/contributor> ?resource . kg:9608 <http://purl.org/dc/elements/1.1/contributor> ?resource }\"]}", "normal_query": "SELECT ?resource WHERE { kg:2818 <http://purl.org/dc/elements/1.1//contributor> ?resource . kg:0501 <http://purl.org/dc/elements/1.1//contributor> ?resource . kg:9608 <http://purl.org/dc/elements/1.1//contributor> ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?costumeDesigner WHERE {\"\n  \t\t,\"?person wdt:P31 wd:Q5 .\"\n  \t\t,\"?person wdt:P451 wd:Q28967 .\"\n  \t\t,\"?person wdt:P3373 wd:Q158469 .\"\n  \t\t,\"wd:Q28967 wdt:P361 ?film.\"\n  \t\t,\"?film wdt:P105 ?costumeDesigner.\"\n  \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P451 wd:Q28967 . ?person wdt:P3373 wd:Q158469 . wd:Q28967 wdt:P361 ?film. ?film wdt:P105 ?costumeDesigner. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q29 is Q29\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwdt:P3373 is P3373\nwdt:P27 is P27\nwdt:P2515 is P2515", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9073 is Q29\nkg:2529 is Q11424\nkg:5412 is Q3083718\nkg:5351 is P31\nkg:8548 is P3373\nkg:3509 is P27\nkg:9364 is P2515", "response": "{\n \t\t\"query\": [\n\t\t\t\"{?x kg:8548 kg:5412}\",\n\t\t\t\"?x kg:9364 ?y\",\n\t\t\t\"?y kg:3509 kg:2529\"\n\t\t]\n}", "normal_query": "{?x kg:8548 kg:5412} ?x kg:9364 ?y ?y kg:3509 kg:2529 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?composer) > 0 AS ?result) WHERE { ?composer wdt:P24 wd:Q168973 ; wdt:P26 wd:Q5000 . }\"\n \t]\n}", "normal_query": "SELECT (COUNT(?composer) > 0 AS ?result) WHERE { ?composer wdt:P24 wd:Q168973 ; wdt:P26 wd:Q5000 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q36834 is Q36834\nwdt:P27 is P27\nwdt:P21 is P21\nwd:Q34 is Q34\nwd:Q96203723 is Q96203723\nwdt:P106 is P106", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9964 is Q6581072\nkg:3473 is P26\nkg:3697 is Q36834\nkg:7284 is P27\nkg:4428 is P21\nkg:1169 is Q34\nkg:3170 is Q96203723\nkg:0770 is P106", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg#> ASK { kg:9964 kg:3473 ?spouse . ?spouse kg:4428 kg:1169 . ?spouse kg:3697 kg:3170 . }\"]}", "normal_query": "PREFIX kg: <http://example.org//kg> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasCreator, true, false) as ?result) WHERE { wd:Q123456789 p:P50 ?statement . ?statement ps:P50 ?creator . ?statement pq:P698 wd:Q987654321 . FILTER(?creator = wd:Q1 OR ?creator = wd:Q2 OR ?creator = wd:Q3) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasCreator, true, false) as ?result) WHERE { wd:Q123456789 p:P50 ?statement . ?statement ps:P50 ?creator . ?statement pq:P698 wd:Q987654321 . FILTER(?creator = wd:Q1 OR ?creator = wd:Q2 OR ?creator = wd:Q3) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q20729551 wdt:P162 ?person . FILTER(?person = wd:Q35979475 || ?person = wd:Q1687239 || ?person = wd:Q562108) }\"] }", "normal_query": "ASK WHERE { wd:Q20729551 wdt:P162 ?person . FILTER(?person = wd:Q35979475 || ?person = wd:Q1687239 || ?person = wd:Q562108) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0395 is Q20729551\nkg:1198 is P1040\nkg:3845 is Q35979475\nkg:9180 is P162\nkg:4813 is Q1687239\nkg:2491 is Q562108\nkg:9666 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:0395 kg:9180 ?x . ?x kg:1198 kg:2491 . ?x kg:1198 kg:3845 . ?x kg:1198 kg:4813 }\"] }", "normal_query": "ASK WHERE { kg:0395 kg:9180 ?x . ?x kg:1198 kg:2491 . ?x kg:1198 kg:3845 . ?x kg:1198 kg:4813 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?siblingSpouse WHERE {\\n  wd:Q108497 wdt:P26 ?siblingSpouse .\\n  ?siblingSpouse wdt:P25 wd:Q108493 .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?siblingSpouse WHERE { wd:Q108497 wdt:P26 ?siblingSpouse . ?siblingSpouse wdt:P25 wd:Q108493 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwdt:P3373 is P3373\nwdt:P21 is P21", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?spouse WHERE {\", \"  wd:Q6581072 wdt:P3373 ?siblingAndSpouse .\", \"  ?siblingAndSpouse wdt:P26 wd:Q296446 .\", \"  ?siblingAndSpouse wdt:P21 wd:Q3340 .\", \"  wd:Q6581072 wdt:P26 ?spouse .\", \"}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?spouse WHERE { wd:Q6581072 wdt:P3373 ?siblingAndSpouse . ?siblingAndSpouse wdt:P26 wd:Q296446 . ?siblingAndSpouse wdt:P21 wd:Q3340 . wd:Q6581072 wdt:P26 ?spouse . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6357 is Q6581072\nkg:1650 is P26\nkg:0099 is Q3340\nkg:2000 is Q296446\nkg:0617 is P3373\nkg:0020 is P21", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:6357 kg:1650 ?resource . FILTER(?resource = kg:0099 || ?resource = kg:2000) }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:6357 kg:1650 ?resource . FILTER(?resource = kg:0099 || ?resource = kg:2000) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P50 wd:Q123456789 ; wdt:P1433 wd:Q987654321 .\"\n \t ]\n}", "normal_query": "?work wdt:P50 wd:Q123456789 ; wdt:P1433 wd:Q987654321 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q35979475 wdt:P1040 ?resource .\", \"?resource wdt:P58 wd:Q1687239 .\", \"?resource wdt:P58 wd:Q562108 .}\", \"\", \"UNION\", \"\", \"{\", \"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q35979475 wdt:P1040 ?resource .\", \"?resource wdt:P58 wd:Q1687239 .\", \"?resource wdt:P58 wd:Q562108 .}\", \"\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q35979475 wdt:P1040 ?resource . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 .} UNION { @prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q35979475 wdt:P1040 ?resource . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q562108 .} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1653 is P58\nkg:6938 is P1040\nkg:7308 is Q35979475\nkg:2833 is Q1687239\nkg:6999 is Q562108", "response": "{ \"query\" : [\"SELECT ?resource WHERE { kg:7308 P58 ?resource . kg:7308 P1040 ?resource }\"] }", "normal_query": "SELECT ?resource WHERE { kg:7308 P58 ?resource . kg:7308 P1040 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasAuthor && ?hasEditor, true, false) AS ?result) WHERE { wd:Q1234567 wdt:P50 ?author . wd:Q1234567 wdt:P98 ?editor . FILTER(?author = wd:Q9876543 || ?author = wd:Q12345678 || ?author = wd:Q8765432) . FILTER(?editor = wd:Q9876543 || ?editor = wd:Q12345678 || ?editor = wd:Q8765432) . BIND(EXISTS { wd:Q1234567 wdt:P50 ?author } AS ?hasAuthor) . BIND(EXISTS { wd:Q1234567 wdt:P98 ?editor } AS ?hasEditor) . }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasAuthor && ?hasEditor, true, false) AS ?result) WHERE { wd:Q1234567 wdt:P50 ?author . wd:Q1234567 wdt:P98 ?editor . FILTER(?author = wd:Q9876543 || ?author = wd:Q12345678 || ?author = wd:Q8765432) . FILTER(?editor = wd:Q9876543 || ?editor = wd:Q12345678 || ?editor = wd:Q8765432) . BIND(EXISTS { wd:Q1234567 wdt:P50 ?author } AS ?hasAuthor) . BIND(EXISTS { wd:Q1234567 wdt:P98 ?editor } AS ?hasEditor) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"ASK WHERE { wd:Q20729551 wdt:P1040 ?work . ?work wdt:P58 (wd:Q35979475 wd:Q1687239 wd:Q562108) }\"] }", "normal_query": "ASK WHERE { wd:Q20729551 wdt:P1040 ?work . ?work wdt:P58 (wd:Q35979475 wd:Q1687239 wd:Q562108) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7697 is Q20729551\nkg:7756 is P1040\nkg:3640 is P58\nkg:4263 is Q35979475\nkg:2993 is Q1687239\nkg:6938 is Q562108", "response": "{ \"query\": [\"ASK WHERE { kg:7697 kg:7756 ?x . ?x kg:3640/kg:4263/kg:2993 kg:6938 }\"] }", "normal_query": "ASK WHERE { kg:7697 kg:7756 ?x . ?x kg:3640/kg:4263/kg:2993 kg:6938 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(COALETTE(?producer, ?editor)) WHERE { ?work wdt:P31 wd:Q53540987 ; wdt:P179 wd:Q2605088 . ?work wdt:P57 ?producer . ?producer (wdt:P106/wdt:P279*) wd:Q725389 . ?work wdt:P140 wd:Q11689 . OPTIONAL { ?work wdt:P58 ?editor } FILTER(?producer = wd:Q2605088 || ?editor IN (wd:Q2605088, wd:Q37019, wd:Q40836)) } COALESCE(?editor != wd:Q2605088 , FALSE)\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(COALETTE(?producer, ?editor)) WHERE { ?work wdt:P31 wd:Q53540987 ; wdt:P179 wd:Q2605088 . ?work wdt:P57 ?producer . ?producer (wdt:P106/wdt:P279*) wd:Q725389 . ?work wdt:P140 wd:Q11689 . OPTIONAL { ?work wdt:P58 ?editor } FILTER(?producer = wd:Q2605088 || ?editor IN (wd:Q2605088, wd:Q37019, wd:Q40836)) } COALESCE(?editor != wd:Q2605088 , FALSE) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q20729551 wdt:P1040/wdt:P162 ?producer . wd:Q20729551 wdt:P1040/wdt:P272 ?editor . FILTER(?producer = wd:Q35979475 || ?producer = wd:Q1687239 || ?producer = wd:Q562108) . FILTER(?editor = wd:Q35979475 || ?editor = wd:Q1687239 || ?editor = wd:Q562108) }\"] }", "normal_query": "ASK WHERE { wd:Q20729551 wdt:P1040/wdt:P162 ?producer . wd:Q20729551 wdt:P1040/wdt:P272 ?editor . FILTER(?producer = wd:Q35979475 || ?producer = wd:Q1687239 || ?producer = wd:Q562108) . FILTER(?editor = wd:Q35979475 || ?editor = wd:Q1687239 || ?editor = wd:Q562108) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8184 is Q20729551\nkg:7201 is P1040\nkg:8215 is Q35979475\nkg:3252 is P162\nkg:1778 is Q1687239\nkg:2847 is Q562108\nkg:4864 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:8184 kg:3252/kg:7201/kg:4864 [ kg:1778/kg:2847/kg:8215 ] . }\"] }", "normal_query": "ASK WHERE { kg:8184 kg:3252/kg:7201/kg:4864 [ kg:1778/kg:2847/kg:8215 ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P31 wd:Q5385962 ;\"\n \t\t,\"wdt:P57 ?producer .\"\n \t\t,\"?producer wdt:P106 wd:Q78896 ;\"\n \t\t,\"wdt:P178 wd:Q47095 ;\"\n \t\t,\"wdt:P169 wd:Q23227 .\"\n \t\t,\"?work wdt:P57 ?execProducer .\"\n \t\t,\"?execProducer wdt:P106 wd:Q78896 ;\"\n \t\t,\"wdt:P178 wd:Q47095 ;\"\n \t\t,\"wdt:P169 wd:Q23227 .\"\n \t\t,\"?work wdt:P57 ?producer2 .\"\n \t\t,\"?producer2 wdt:P106 wd:Q78896 ;\"\n \t\t,\"wdt:P178 wd:Q47095 ;\"\n \t\t,\"wdt:P169 wd:Q23227 .\"\n \t\t,\"?work wdt:P57 ?producer3 .\"\n \t\t,\"?producer3 wdt:P106 wd:Q78896 ;\"\n \t\t,\"wdt:P178 wd:Q47095 ;\"\n \t\t,\"wdt:P169 wd:Q23227 .\"\n \t]\n}", "normal_query": "?work wdt:P31 wd:Q5385962 ; wdt:P57 ?producer . ?producer wdt:P106 wd:Q78896 ; wdt:P178 wd:Q47095 ; wdt:P169 wd:Q23227 . ?work wdt:P57 ?execProducer . ?execProducer wdt:P106 wd:Q78896 ; wdt:P178 wd:Q47095 ; wdt:P169 wd:Q23227 . ?work wdt:P57 ?producer2 . ?producer2 wdt:P106 wd:Q78896 ; wdt:P178 wd:Q47095 ; wdt:P169 wd:Q23227 . ?work wdt:P57 ?producer3 . ?producer3 wdt:P106 wd:Q78896 ; wdt:P178 wd:Q47095 ; wdt:P169 wd:Q23227 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q365090 is Q365090\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q43994 is Q43994\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q365090 wdt:P1431 ?resource .\", \"wd:Q95125 wdt:P1431 ?resource .\", \"wd:Q43994 wdt:P1431 ?resource .\", \"wd:Q365090 wdt:P162 ?resource .\", \"wd:Q95125 wdt:P162 ?resource .\", \"wd:Q43994 wdt:P162 ?resource .}\", \"\", \"\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q365090 wdt:P1431 ?resource . wd:Q95125 wdt:P1431 ?resource . wd:Q43994 wdt:P1431 ?resource . wd:Q365090 wdt:P162 ?resource . wd:Q95125 wdt:P162 ?resource . wd:Q43994 wdt:P162 ?resource .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4109 is Q365090\nkg:1068 is Q95125\nkg:3658 is P1431\nkg:0807 is P162\nkg:7576 is Q43994\nkg:4304 is P272", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"SELECT ?resource WHERE {\", \"?x kg:0807 ?y .\", \"?x kg:162 ?z .\", \"?x kg:3658 ?w .\", \"?y kg:4109 wd:Q365090 .\", \"?z kg:1068 wd:Q95125 .\", \"?w kg:7576 wd:Q43994 .\", \"?x kg:4304 ?resource .}\", \"\", \"\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?x kg:0807 ?y . ?x kg:162 ?z . ?x kg:3658 ?w . ?y kg:4109 wd:Q365090 . ?z kg:1068 wd:Q95125 . ?w kg:7576 wd:Q43994 . ?x kg:4304 ?resource .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?siblingSpouse WHERE { wd:Q100976 wdt:P32 Ptolemy_X_Alexander_I ; wdt:P451 ?femaleSibling . ?femaleSibling wdt:P32 ?maleRelative . ?maleRelative wdt:P26 wd:Q100980 }\"\n  \t\t]\n} ", "normal_query": "SELECT ?siblingSpouse WHERE { wd:Q100976 wdt:P32 Ptolemy_X_Alexander_I ; wdt:P451 ?femaleSibling . ?femaleSibling wdt:P32 ?maleRelative . ?maleRelative wdt:P26 wd:Q100980 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6581072 is Q6581072\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwdt:P3373 is P3373\nwdt:P21 is P21\nwd:Q3345 is Q3345", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"wd:Q6581072 ?p1 ?o1 .\", \"wd:Q3340 ?p2 ?o2 .\" ] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . wd:Q6581072 ?p1 ?o1 . wd:Q3340 ?p2 ?o2 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2080 is Q6581072\nkg:0041 is P26\nkg:1593 is Q3340\nkg:5056 is P3373\nkg:9247 is P21\nkg:0896 is Q3345", "response": "{\n \t\t\"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?siblingSpouse WHERE {\\n  kg:2080 kg:0041 ?siblingSpouse .\\n  ?siblingSpouse kg:5056 kg:1593 .\\n}\\n\"]\n}", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?siblingSpouse WHERE { kg:2080 kg:0041 ?siblingSpouse . ?siblingSpouse kg:5056 kg:1593 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes\", \"{\", \"  SELECT\", \"    (BOUND(?director) && BOUND(?writer) && BOUND(?producer)) AS ?result\", \"  WHERE\", \"  {\", \"    wd:Q21195768 wdt:P31 wd:Q5383402 .\", \"    wd:Q21195768 wdt:P170 wd:Q2605088 .\", \"    wd:Q21195768 wdt:P170 wd:Q1602643 .\", \"    OPTIONAL { wd:Q21195768 wdt:P725 ?director . }\", \"    OPTIONAL { wd:Q21195768 wdt:P57 ?writer . }\", \"    OPTIONAL { wd:Q21195768 wdt:P913 ?producer . }\", \"  }\", \"}\"]\n}", "normal_query": "$prefixes { SELECT (BOUND(?director) && BOUND(?writer) && BOUND(?producer)) AS ?result WHERE { wd:Q21195768 wdt:P31 wd:Q5383402 . wd:Q21195768 wdt:P170 wd:Q2605088 . wd:Q21195768 wdt:P170 wd:Q1602643 . OPTIONAL { wd:Q21195768 wdt:P725 ?director . } OPTIONAL { wd:Q21195768 wdt:P57 ?writer . } OPTIONAL { wd:Q21195768 wdt:P913 ?producer . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P162 is P162\nwd:Q1079 is Q1079\nwdt:P272 is P272", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5996 is Q5542223\nkg:8147 is P57\nkg:0995 is P58\nkg:7668 is Q4500\nkg:6360 is P162\nkg:5617 is Q1079\nkg:6767 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:5996 kg:6360 kg:7668 . kg:5996 kg:8147 kg:5617 . kg:5996 kg:0995 kg:5617 . kg:5996 kg:6767 kg:7668 }\"] }", "normal_query": "ASK WHERE { kg:5996 kg:6360 kg:7668 . kg:5996 kg:8147 kg:5617 . kg:5996 kg:0995 kg:5617 . kg:5996 kg:6767 kg:7668 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q2336453 is Q2336453\nwd:Q3530946 is Q3530946\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwdt:P161 is P161", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \"wd:Q2336453 wdt:P1040 ?costumeDesigner .\", \"?costumeDesigner wdt:P106 wd:Q2615443 .\", \"?film (wdt:P161|wdt:P161/^wdt:P161) wd:Q2336453 .\", \"{ wd:Q2336453 wdt:P1040 ?costumeDesigner } UNION { wd:Q3530946 wdt:P1040 ?costumeDesigner } UNION { wd:Q1323191 wdt:P1040 ?costumeDesigner }\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q2336453 wdt:P1040 ?costumeDesigner . ?costumeDesigner wdt:P106 wd:Q2615443 . ?film (wdt:P161|wdt:P161/^wdt:P161) wd:Q2336453 . { wd:Q2336453 wdt:P1040 ?costumeDesigner } UNION { wd:Q3530946 wdt:P1040 ?costumeDesigner } UNION { wd:Q1323191 wdt:P1040 ?costumeDesigner } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3875 is Q2615443\nkg:0075 is P1040\nkg:3190 is Q2336453\nkg:3259 is Q3530946\nkg:8462 is Q1323191\nkg:9815 is P106\nkg:8116 is P161", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nASK { kg:3875 kg:9815 ?x . FILTER(?x = kg:0075) }.\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//>. ASK { kg:3875 kg:9815 ?x . FILTER(?x = kg:0075) }. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P108 wd:Q750984 . ?work1 wdk:P6244 wd:Q2695619 . ?work2 wdk:P6244 wd:Q2695620 . ?work3 wdk:P6244 wd:Q2695621 . ?work4 wdk:P6244 wd:Q2695622 . ?resource wdt:P178 ?work1 . ?resource wdt:P178 ?work2 . ?resource wdt:P178 ?work3 . ?resource wdt:P178 ?work4 }\"]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P108 wd:Q750984 . ?work1 wdk:P6244 wd:Q2695619 . ?work2 wdk:P6244 wd:Q2695620 . ?work3 wdk:P6244 wd:Q2695621 . ?work4 wdk:P6244 wd:Q2695622 . ?resource wdt:P178 ?work1 . ?resource wdt:P178 ?work2 . ?resource wdt:P178 ?work3 . ?resource wdt:P178 ?work4 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q658822 is Q658822\nwd:Q2718259 is Q2718259\nwd:Q921678 is Q921678\nwd:Q5 is Q5\nwdt:P1040 is P1040\nwdt:P31 is P31\nwdt:P161 is P161\nwd:Q45602 is Q45602", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n ?resource wdt:P31 wd:Q5 ;\\n           wdt:P1040 wd:Q658822 , wd:Q2718259 , wd:Q921678 , wd:Q45602 .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; wdt:P1040 wd:Q658822 , wd:Q2718259 , wd:Q921678 , wd:Q45602 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8855 is Q658822\nkg:0252 is Q2718259\nkg:3802 is Q921678\nkg:5868 is Q5\nkg:5590 is P1040\nkg:5400 is P31\nkg:6546 is P161\nkg:2053 is Q45602", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:8855 kg:5400 ?resource . kg:8855 kg:6546 <http://rdf.freebase.com/ns/m.01kzg> } UNION SELECT ?resource WHERE { kg:0252 kg:5400 ?resource . kg:0252 kg:6546 <http://rdf.freebase.com/ns/m.01kzg> } UNION SELECT ?resource WHERE { kg:3802 kg:5400 ?resource . kg:3802 kg:6546 <http://rdf.freebase.com/ns/m.01kzg> } UNION SELECT ?resource WHERE { kg:2053 kg:5400 ?resource . kg:2053 kg:6546 <http://rdf.freebase.com/ns/m.01kzg> }\"] }", "normal_query": "SELECT ?resource WHERE { kg:8855 kg:5400 ?resource . kg:8855 kg:6546 <http://rdf.freebase.com/ns//m.01kzg> } UNION SELECT ?resource WHERE { kg:0252 kg:5400 ?resource . kg:0252 kg:6546 <http://rdf.freebase.com/ns//m.01kzg> } UNION SELECT ?resource WHERE { kg:3802 kg:5400 ?resource . kg:3802 kg:6546 <http://rdf.freebase.com/ns//m.01kzg> } UNION SELECT ?resource WHERE { kg:2053 kg:5400 ?resource . kg:2053 kg:6546 <http://rdf.freebase.com/ns//m.01kzg> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q27645198 ?p ?o .\\n?o ?q ?resource .\\nwikibase:label wikibase:language \\\"en\\\" -> ?l .\\nFILTER(?p != wdt:P31 && ?p != wdt:P279)\\n}\\nUNION\\n{\\nwd:Q465801 ?p ?o .\\n?o ?q ?resource .\\nwikibase:label wikibase:language \\\"en\\\" -> ?l .\\nFILTER(?p != wdt:P31 && ?p != wdt:P279)\\n}\\nUNION\\n{\\nwd:Q465801 ?p ?o .\\n?o ?q ?resource .\\nwikibase:label wikibase:language \\\"en\\\" -> ?l .\\nFILTER(?p != wdt:P31 && ?p != wdt:P279)\\n}\\nUNION\\n{\\nwd:Q465801 ?p ?o .\\n?o ?q ?resource .\\nwikibase:label wikibase:language \\\"en\\\" -> ?l .\\nFILTER(?p != wdt:P31 && ?p != wdt:P279)\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q27645198 ?p ?o . ?o ?q ?resource . wikibase:label wikibase:language \"en\" -> ?l . FILTER(?p != wdt:P31 && ?p != wdt:P279) } UNION { wd:Q465801 ?p ?o . ?o ?q ?resource . wikibase:label wikibase:language \"en\" -> ?l . FILTER(?p != wdt:P31 && ?p != wdt:P279) } UNION { wd:Q465801 ?p ?o . ?o ?q ?resource . wikibase:label wikibase:language \"en\" -> ?l . FILTER(?p != wdt:P31 && ?p != wdt:P279) } UNION { wd:Q465801 ?p ?o . ?o ?q ?resource . wikibase:label wikibase:language \"en\" -> ?l . FILTER(?p != wdt:P31 && ?p != wdt:P279) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987\nwd:Q4207234 is Q4207234\nwd:Q1291210 is Q1291210", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q4679987 wdt:P57 ?resource .\", \"wd:Q1291210 wdt:P57 ?resource .\", \"wd:Q16198328 wdt:P57 ?resource .\", \"wd:Q4207234 wdt:P57 ?resource .}\", \"\", \"\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q4679987 wdt:P57 ?resource . wd:Q1291210 wdt:P57 ?resource . wd:Q16198328 wdt:P57 ?resource . wd:Q4207234 wdt:P57 ?resource .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1391 is P57\nkg:8789 is Q16198328\nkg:2396 is P1040\nkg:2280 is Q4679987\nkg:1300 is Q4207234\nkg:7562 is Q1291210", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:1391 P57 ?resource . kg:8789 P57 ?resource . kg:2396 P57 ?resource . kg:2280 P57 ?resource }\"] }", "normal_query": "SELECT ?resource WHERE { kg:1391 P57 ?resource . kg:8789 P57 ?resource . kg:2396 P57 ?resource . kg:2280 P57 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(COALESCE(?isDirector, FALSE)) AS ?result WHERE { wd:Q237649 wikibase:directClaim <http://wikiba.se/ontology#director> ?statement . ?statement ps:P161 wd:Q85019 ; pq:P577 ?date . FILTER (EXISTS { wd:Q85019 wdt:P463 wd:Q237649 } || EXISTS { wd:Q85019 wdt:P463 wd:Q92056 } || EXISTS { wd:Q85019 wdt:P463 wd:Q154866 } || EXISTS { wd:Q85019 wdt:P463 wd:Q72549 }) . BIND(true AS ?isDirector) . } UNION { SELECT DISTINCT BOOL(COALESCE(?isWriter, FALSE)) AS ?result WHERE { wd:Q237649 wikibase:directClaim <http://wikiba.se/ontology#writer> ?statement . ?statement ps:P57 wdt:P1438|wdt:P1439|wdt:P1440|wdt:P1441 wd:Q237649 ; pq:P577 ?date . FILTER (EXISTS { wd:Q237649 wdt:P57 wd:Q85019 } || EXISTS { wd:Q237649 wdt:P57 wd:Q92056 } || EXISTS { wd:Q237649 wdt:P57 wd:Q154866 } || EXISTS { wd:Q237649 wdt:P57 wd:Q72549 }) . BIND(true AS ?isWriter) . } }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(COALESCE(?isDirector, FALSE)) AS ?result WHERE { wd:Q237649 wikibase:directClaim <http://wikiba.se//ontology> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1137372 is Q1137372\nwd:Q47284 is Q47284\nwdt:P58 is P58\nwd:Q2838329 is Q2838329\nwd:Q3772 is Q3772\nwd:Q549956 is Q549956", "response": "{ \"query\": [\"ASK WHERE { wd:Q1137372 wdt:P58 ?director1 . ?director1 wdt:P57 wd:Q47284 . wd:Q1137372 wdt:P58 ?director2 . ?director2 wdt:P57 wd:Q2838329 . wd:Q1137372 wdt:P58 ?director3 . ?director3 wdt:P57 wd:Q549956 . wd:Q1137372 wdt:P58 ?director4 . ?director4 wdt:P57 wd:Q3772 }\"] }", "normal_query": "ASK WHERE { wd:Q1137372 wdt:P58 ?director1 . ?director1 wdt:P57 wd:Q47284 . wd:Q1137372 wdt:P58 ?director2 . ?director2 wdt:P57 wd:Q2838329 . wd:Q1137372 wdt:P58 ?director3 . ?director3 wdt:P57 wd:Q549956 . wd:Q1137372 wdt:P58 ?director4 . ?director4 wdt:P57 wd:Q3772 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2620 is P57\nkg:9530 is Q1137372\nkg:7046 is Q47284\nkg:7981 is P58\nkg:2301 is Q2838329\nkg:4240 is Q3772\nkg:0145 is Q549956", "response": "{ \"query\": [\"ASK WHERE { kg:2620 p57 ?x . FILTER(?x = kg:9530 || ?x = kg:7046 || ?x = kg:7981 || ?x = kg:2301) }\"] }", "normal_query": "ASK WHERE { kg:2620 p57 ?x . FILTER(?x = kg:9530 || ?x = kg:7046 || ?x = kg:7981 || ?x = kg:2301) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwd:Q40220 is Q40220\nwd:Q5127380 is Q5127380\nwd:Q117392 is Q117392\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q4235 wdt:P57 ?director . wd:Q3977597 wdt:P57 ?producer . wd:Q5127380 wdt:P57 ?actor1 . wd:Q117392 wdt:P57 ?actor2 . FILTER(?director = wd:Q40220 && ?producer = wd:Q4235 && ?actor1 = wd:Q3977597 && ?actor2 = wd:Q117392) }\"] }", "normal_query": "ASK WHERE { wd:Q4235 wdt:P57 ?director . wd:Q3977597 wdt:P57 ?producer . wd:Q5127380 wdt:P57 ?actor1 . wd:Q117392 wdt:P57 ?actor2 . FILTER(?director = wd:Q40220 && ?producer = wd:Q4235 && ?actor1 = wd:Q3977597 && ?actor2 = wd:Q117392) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7455 is P57\nkg:3267 is Q4235\nkg:2507 is Q3977597\nkg:5050 is P162\nkg:2562 is Q40220\nkg:3272 is Q5127380\nkg:6690 is Q117392\nkg:6645 is P272", "response": "{ \"query\": [\"ASK { kg:2507 wdt:P57 wd:Q4235 ; wdt:P162 wd:Q3977597 , wd:Q5127380 , wd:Q117392 . }\"]}", "normal_query": "ASK { kg:2507 wdt:P57 wd:Q4235 ; wdt:P162 wd:Q3977597 , wd:Q5127380 , wd:Q117392 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P31 wd:Q59648; wdt:P50 wd:Q25747.\",\n \t \"?work wdt:P1476 ?title.\"\n \t ]\n}", "normal_query": "?work wdt:P31 wd:Q59648; wdt:P50 wd:Q25747. ?work wdt:P1476 ?title. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q38222 is Q38222\nwdt:P272 is P272", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t\"?resource wdt:P58 wd:Q38222 .\",\n\t\t\"?resource wdt:P1040 wd:Q38222 .\",\n\t\t\"?resource wdt:P1431 wd:Q38222 .\",\n\t\t\"?resource wdt:P162 wd:Q38222 .\"\n\t]\n}", "normal_query": "?resource wdt:P58 wd:Q38222 . ?resource wdt:P1040 wd:Q38222 . ?resource wdt:P1431 wd:Q38222 . ?resource wdt:P162 wd:Q38222 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9000 is P58\nkg:7674 is P1040\nkg:1559 is P1431\nkg:1687 is P162\nkg:6160 is Q38222\nkg:0144 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:6160 ?property ?resource . FILTER(?property = <http://example.org/P58> || ?property = <http://example.org/P1040> || ?property = <http://example.org/P1431> || ?property = <http://example.org/P162>) }\"]}", "normal_query": "SELECT ?resource WHERE { kg:6160 ?property ?resource . FILTER(?property = <http://example.org//P58> || ?property = <http://example.org//P1040> || ?property = <http://example.org//P1431> || ?property = <http://example.org//P162>) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P31 wd:Q5 .\"\n\t\t,\"?writer wdt:P1476 ?title .\"\n\t\t,\"VALUES ?title { 'Every Man for Himself'@en 'Passion'@en 'Notre musique'@en } .\"\n\t\t,\"?writer wdt:P98 wd:Q205377 .\"\n\t\t,\"?writer wdt:P108 wd:Q64068 .\"\n\t\t,\"?writer wdt:P108 ?cine_journal .\"\n\t\t,\"?cine_journal wdt:P1476 'Cahiers du cinéma'@fr .\"\n\t\t,\"?writer wdt:P50 ?work .\"\n\t\t,\"?work wdt:P361 wd:Q296081 .\"\n\t\t]\n}", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P1476 ?title . VALUES ?title { 'Every Man for Himself'@en 'Passion'@en 'Notre musique'@en } . ?writer wdt:P98 wd:Q205377 . ?writer wdt:P108 wd:Q64068 . ?writer wdt:P108 ?cine_journal . ?cine_journal wdt:P1476 'Cahiers du cinéma'@fr . ?writer wdt:P50 ?work . ?work wdt:P361 wd:Q296081 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwd:Q672061 is Q672061\nwd:Q909176 is Q909176", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?x ?y ?z}\",\n  \t\t\"?x wdt:P58 wd:Q3141131.\",\n  \t\t\"?x wdt:P1040 wd:Q972787.\"\n  \t]\n}", "normal_query": "{?x ?y ?z} ?x wdt:P58 wd:Q3141131. ?x wdt:P1040 wd:Q972787. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4774 is P108\nkg:1412 is Q972787\nkg:0484 is P58\nkg:7559 is P1040\nkg:7675 is Q3141131\nkg:9627 is Q672061\nkg:2560 is Q909176", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.freebase.com/ns/kg:4774> kg:P108 ?resource.\\n?resource kg:P58 <http://rdf.freebase.com/ns/kg:1412>.\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <http://rdf.freebase.com/ns//kg:4774> kg:P108 ?resource. ?resource kg:P58 <http://rdf.freebase.com/ns//kg:1412>. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q81520 is Q81520\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwdt:P162 is P162\nwd:Q1295611 is Q1295611\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q81520 wdt:P1431/wdt:P162* wd:Q1969128 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q819109 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q381545 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q1295611 }\"] }", "normal_query": "ASK WHERE { wd:Q81520 wdt:P1431/wdt:P162* wd:Q1969128 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q819109 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q381545 . wd:Q81520 wdt:P1431/wdt:P162* wd:Q1295611 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3202 is Q81520\nkg:1758 is Q1969128\nkg:1430 is Q819109\nkg:7006 is P1431\nkg:9761 is Q381545\nkg:6061 is P162\nkg:8344 is Q1295611\nkg:0047 is P272", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nASK { kg:3202 kg:6061 ?producer .\\n?producer kg:7006 kg:9761 ; kg:7006 kg:8344 ; kg:7006 kg:1430 ; kg:7006 kg:1758 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg//> . ASK { kg:3202 kg:6061 ?producer . ?producer kg:7006 kg:9761 ; kg:7006 kg:8344 ; kg:7006 kg:1430 ; kg:7006 kg:1758 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(COALEXISTS { wd:Q78569 wdt:P57 wd:Q211430 . wd:Q78569 wdt:P110 wd:Q211430 . wd:Q78569 wdt:P170 wd:Q211430 . wd:Q78569 wdt:P50 wd:Q211430 }) AS ?result\"] }\n\t\t\t \t  \t\t\t\t\t  \t\t", "normal_query": "$prefixes SELECT DISTINCT BOOL(COALEXISTS { wd:Q78569 wdt:P57 wd:Q211430 . wd:Q78569 wdt:P110 wd:Q211430 . wd:Q78569 wdt:P170 wd:Q211430 . wd:Q78569 wdt:P50 wd:Q211430 }) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwdt:P1431 is P1431\nwdt:P162 is P162\nwd:Q854990 is Q854990\nwdt:P272 is P272", "response": "{ \"query\": [\"ASK WHERE { wd:Q854990 wdt:P58 ?editor . wd:Q854990 wdt:P1040 ?producer . wd:Q854990 wdt:P162 ?writer . FILTER(?editor = wd:Q8006 && ?producer = wd:Q8006 && ?writer = wd:Q8006) }\"] }", "normal_query": "ASK WHERE { wd:Q854990 wdt:P58 ?editor . wd:Q854990 wdt:P1040 ?producer . wd:Q854990 wdt:P162 ?writer . FILTER(?editor = wd:Q8006 && ?producer = wd:Q8006 && ?writer = wd:Q8006) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5640 is P58\nkg:9419 is P1040\nkg:7124 is Q8006\nkg:5209 is P1431\nkg:1629 is P162\nkg:6693 is Q854990\nkg:6018 is P272", "response": "{ \"query\": [\"ASK { kg:6693 p58/kg:7124 ; p1040/kg:7124 ; p1431/kg:7124 ; p162/kg:7124 . }\"]}", "normal_query": "ASK { kg:6693 p58/kg:7124 ; p1040/kg:7124 ; p1431/kg:7124 ; p162/kg:7124 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t  \t\t\"WHERE {\",\n \t  \t\t\"VALUES ( ?director ?editor ?writer ) { ( wd:Q123 wd:Q456 wd:789 ) }\", \">// Replace Q123, Q456, and 789 with actual Wikidata IDs for Jørgen Leth, Jens Jørgen Thorsen, and Ole John respectively\",\n \t  \t\t\"?resource wdt:P31 wd:Q102080. # Instance of Film/Work\", \">// Replace Q102080 with the actual Wikidata ID for a film or work entity\",\n \t  \t\t\"FILTER (?director wdt:P57 ?resource .) # Directed by\",\n \t  \t\t\"FILTER (?editor wdt:P58 ?resource .) # Edited by\",\n \t  \t\t\"FILTER (?writer wdt:P59 ?resource .) # Written by\",\n \t  \t\t\"}\"\n \t\t \t\t \t\t]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ( ?director ?editor ?writer ) { ( wd:Q123 wd:Q456 wd:789 ) } >// Replace Q123, Q456, and 789 with actual Wikidata IDs for Jørgen Leth, Jens Jørgen Thorsen, and Ole John respectively ?resource wdt:P31 wd:Q102080. >// Replace Q102080 with the actual Wikidata ID for a film or work entity FILTER (?director wdt:P57 ?resource .) FILTER (?editor wdt:P58 ?resource .) FILTER (?writer wdt:P59 ?resource .) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P1040 wd:Q562108 . }\"\n     \t\t ]\n}", "normal_query": "{ ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3123 is P57\nkg:9032 is P58\nkg:9474 is P1040\nkg:2478 is Q35979475\nkg:9289 is Q1687239\nkg:4094 is Q562108", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:2478 P57 ?director . kg:2478 P58 ?editor . kg:2478 P1040 ?writer . ?director <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> foaf:Person . ?editor <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> foaf:Person . ?writer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> foaf:Person . ?director <http://schema.org/name> \\\"Jørgen Leth\\\". ?editor <http://schema.org/name> \\\"Jens Jørgen Thorsen\\\". ?writer <http://schema.org/name> \\\"Ole John\\\". ?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> foaf:Document . }\"]}", "normal_query": "SELECT ?resource WHERE { kg:2478 P57 ?director . kg:2478 P58 ?editor . kg:2478 P1040 ?writer . ?director <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P31 wd:Q590942; wdt:P57 wd:Ole_John; wdt:P59 wd:Jørgen_Leth; wdt:P110 wd:Jens_Jørgen_Thorsen.\"\n \t ]\n}", "normal_query": "?work wdt:P31 wd:Q590942; wdt:P57 wd:Ole_John; wdt:P59 wd:Jørgen_Leth; wdt:P110 wd:Jens_Jørgen_Thorsen. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q35979475 wdt:P57 ?director .\", \"wd:Q35979475 wdt:P58 ?writer .\", \"wd:Q35979475 wdt:P1040 ?editor .\", \"?director rdfs:label \\\"Ole John\\\"@en .\", \"?writer rdfs:label \\\"Jørgen Leth\\\"@en .\", \"?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q35979475 wdt:P57 ?director . wd:Q35979475 wdt:P58 ?writer . wd:Q35979475 wdt:P1040 ?editor . ?director rdfs:label \"Ole John\"@en . ?writer rdfs:label \"Jørgen Leth\"@en . ?editor rdfs:label \"Jens Jørgen Thorsen\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4531 is P57\nkg:9357 is P58\nkg:7634 is P1040\nkg:1203 is Q35979475\nkg:3933 is Q1687239\nkg:6565 is Q562108", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:1203 P57 ?director . kg:1203 P58 ?writer . kg:1203 P1040 ?editor . ?director <http://schema.org/name> \\\"Ole John\\\"@en . ?writer <http://schema.org/name> \\\"Jørgen Leth\\\"@en . ?editor <http://schema.org/name> \\\"Jens Jørgen Thorsen\\\"@en . ?resource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/CreativeWork> }\"]}", "normal_query": "SELECT ?resource WHERE { kg:1203 P57 ?director . kg:1203 P58 ?writer . kg:1203 P1040 ?editor . ?director schema:name \"Ole John\"@en . ?writer schema:name \"Jørgen Leth\"@en . ?editor schema:name \"Jens Jørgen Thorsen\"@en . ?resource <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q283699 is Q283699\nwd:Q3282637 is Q3282637\nwd:Q629819 is Q629819\nwd:Q1216566 is Q1216566\nwdt:P106 is P106\nwd:Q600762 is Q600762\nwdt:P344 is P344", "response": "{ \"query\": [\"ASK WHERE { wd:Q283699 wdt:P57 ?x . FILTER(?x = wd:Q1216566) }\"] }", "normal_query": "ASK WHERE { wd:Q283699 wdt:P57 ?x . FILTER(?x = wd:Q1216566) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4071 is P57\nkg:8725 is Q283699\nkg:9888 is Q3282637\nkg:4908 is Q629819\nkg:1310 is Q1216566\nkg:3539 is P106\nkg:2996 is Q600762\nkg:3561 is P344", "response": "{ \"query\": [\"ASK { kg:8725 p344/kg:4071/p57 ?x . FILTER (isURI(?x)) }\"] }", "normal_query": "ASK { kg:8725 p344/kg:4071/p57 ?x . FILTER (isURI(?x)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasRole, TRUE, FALSE) as ?result) WHERE { wd:Q12345 wdt:P108 ?organisation . ?organisation wdt:P3457 wd:Q67890 . wd:Q12345 wdt:P108 ?organisation2 . ?organisation2 wdt:P3457 wd:Q56789 . wd:Q12345 wdt:P108 ?organisation3 . ?organisation3 wdt:P3457 wd:Q11223 . wd:Q12345 wdt:P108 ?organisation4 . ?organisation4 wdt:P3457 wd:Q98765 . ?hasRole wd:Q12345 wdt:P108 ?roleOrganisation . ?roleOrganisation wdt:P3457 wd:Q12345 . FILTER(?roleOrganisation != ?organisation && ?roleOrganisation != ?organisation2 && ?roleOrganisation != ?organisation3 && ?roleOrganisation != ?organisation4) } LIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?hasRole, TRUE, FALSE) as ?result) WHERE { wd:Q12345 wdt:P108 ?organisation . ?organisation wdt:P3457 wd:Q67890 . wd:Q12345 wdt:P108 ?organisation2 . ?organisation2 wdt:P3457 wd:Q56789 . wd:Q12345 wdt:P108 ?organisation3 . ?organisation3 wdt:P3457 wd:Q11223 . wd:Q12345 wdt:P108 ?organisation4 . ?organisation4 wdt:P3457 wd:Q98765 . ?hasRole wd:Q12345 wdt:P108 ?roleOrganisation . ?roleOrganisation wdt:P3457 wd:Q12345 . FILTER(?roleOrganisation != ?organisation && ?roleOrganisation != ?organisation2 && ?roleOrganisation != ?organisation3 && ?roleOrganisation != ?organisation4) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwd:Q862058 is Q862058\nwd:Q33999 is Q33999\nwd:Q1473406 is Q1473406\nwdt:P106 is P106\nwd:Q3485595 is Q3485595\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK WHERE {\\n ?x wdt:P106 wd:Q3016313 ;\\n     wdt:P57 wd:Q862058 , wd:Q33999 , wd:Q1473406 , wd:Q3485595 .\\n}\" ]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { ?x wdt:P106 wd:Q3016313 ; wdt:P57 wd:Q862058 , wd:Q33999 , wd:Q1473406 , wd:Q3485595 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9478 is P57\nkg:3132 is Q3016313\nkg:3143 is Q862058\nkg:2739 is Q33999\nkg:3781 is Q1473406\nkg:8346 is P106\nkg:1553 is Q3485595\nkg:7046 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nASK { kg:dbr:Six_Men_Getting_Sick kg:7046 ?x1 .\\n      kg:dbr:Inland_Empire kg:7046 ?x2 .\\n      kg:dbr:Darkened_Room kg:7046 ?x3 .\\n      kg:dbr:Rabbits_(film) kg:7046 ?x4 .\\n      ?x1 kg:8346 kg:9478 .\\n      ?x2 kg:8346 kg:9478 .\\n      ?x3 kg:8346 kg:9478 .\\n      ?x4 kg:8346 kg:9478 .\\n      kg:9478 kg:8346 kg:3132 .\\n      kg:9478 kg:8346 kg:3143 .\\n      kg:9478 kg:8346 kg:2739 .\\n      kg:9478 kg:8346 kg:3781 .}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//>. ASK { kg:dbr:Six_Men_Getting_Sick kg:7046 ?x1 . kg:dbr:Inland_Empire kg:7046 ?x2 . kg:dbr:Darkened_Room kg:7046 ?x3 . kg:dbr:Rabbits_(film) kg:7046 ?x4 . ?x1 kg:8346 kg:9478 . ?x2 kg:8346 kg:9478 . ?x3 kg:8346 kg:9478 . ?x4 kg:8346 kg:9478 . kg:9478 kg:8346 kg:3132 . kg:9478 kg:8346 kg:3143 . kg:9478 kg:8346 kg:2739 . kg:9478 kg:8346 kg:3781 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  ?work wdt:P31 wd:Q1142129 ;\", \">// instance of film or similar work\",\n  \t\t\"        wdt:P57 wd:Q68859 ;\", \">// directed by\"\n  \t\t,\"        wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 .\", \">// executive producer or producer\"\n  \t\t,\n  \t\t\"  ?work wdt:P57 wd:Q68860 ;\", \">// directed by\"\n  \t\t,\"        wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 .\", \">// executive producer or producer\"\n  \t\t,\n  \t\t\"  ?work wdt:P57 wd:Q68861 ;\", \">// directed by\"\n  \t\t,\"        wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 .\", \">// executive producer or producer\"\n  \t\t,\n  \t\t\"  ?work wdt:P50 wd:Q68859, wd:Q68860, wd:Q68861 .\", \">// written by\"\n  \t\t,\n  \t\t\"}\",\n  \t\t\"\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P31 wd:Q1142129 ; >// instance of film or similar work wdt:P57 wd:Q68859 ; >// directed by wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 . >// executive producer or producer ?work wdt:P57 wd:Q68860 ; >// directed by wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 . >// executive producer or producer ?work wdt:P57 wd:Q68861 ; >// directed by wdt:P162 wd:Q68859, wd:Q68860, wd:Q68861 . >// executive producer or producer ?work wdt:P50 wd:Q68859, wd:Q68860, wd:Q68861 . >// written by } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q452794 ; wdt:P58 wd:Q363666 ; wdt:P1431 wd:Q448604 . } UNION { ?item wdt:P57 wd:Q452794 ; wdt:P57 wd:Q363666 ; wdt:P57 wd:Q448604 . }\"\n \t]\n}", "normal_query": "{ ?item wdt:P57 wd:Q452794 ; wdt:P58 wd:Q363666 ; wdt:P1431 wd:Q448604 . } UNION { ?item wdt:P57 wd:Q452794 ; wdt:P57 wd:Q363666 ; wdt:P57 wd:Q448604 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7550 is P57\nkg:3916 is P58\nkg:0608 is P1431\nkg:2546 is Q452794\nkg:2101 is Q363666\nkg:6010 is Q448604", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:2546 ?property ?resource . FILTER(?property = <http://example.org/P57> || ?property = <http://example.org/P58> || ?property = <http://example.org/P1431>) }\"]}", "normal_query": "SELECT ?resource WHERE { kg:2546 ?property ?resource . FILTER(?property = <http://example.org//P57> || ?property = <http://example.org//P58> || ?property = <http://example.org//P1431>) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?work wdt:P31 wd:Q59026; wdt:P57 ?director.\",\n \t \"?director (wdt:P488|wdt:P50|wdt:P140) wd:Q26957.\"\n \t ]\n}", "normal_query": "?work wdt:P31 wd:Q59026; wdt:P57 ?director. ?director (wdt:P488|wdt:P50|wdt:P140) wd:Q26957. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P57 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . }\"\n \t]\n}", "normal_query": "{ ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P58 wd:Q1687239 ; wdt:P57 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P58 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P58 wd:Q562108 . } UNION { ?item wdt:P1040 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q562108 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5641 is P57\nkg:6051 is P58\nkg:4443 is P1040\nkg:1920 is Q35979475\nkg:8040 is Q1687239\nkg:4465 is Q562108", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"SELECT ?resource WHERE {\", \"  kg:1920 kg:P57 ?directorResource .\", \"  kg:1920 kg:P58 ?editorResource .\", \"  kg:1920 kg:P1040 ?writerResource .\", \"?directorResource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:4465 .\", \"?editorResource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:4465 .\", \"?writerResource <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:4465 .\", \"?directorResource <http://schema.org/name> \\\"Ole John\\\"@en .\", \"?editorResource <http://schema.org/name> \\\"Jens Jørgen Thorsen\\\"@en .\", \"?writerResource <http://schema.org/name> \\\"Jørgen Leth\\\"@en .\", \"?directorResource kg:5641 ?resource .\", \"?editorResource kg:6051 ?resource .\", \"?writerResource kg:4443 ?resource .\" ,\"}\"]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1920 kg:P57 ?directorResource . kg:1920 kg:P58 ?editorResource . kg:1920 kg:P1040 ?writerResource . ?directorResource <http://www.w3.org/1999/02//22-rdf-syntax-ns> ?editorResource <http://www.w3.org/1999/02//22-rdf-syntax-ns> ?writerResource <http://www.w3.org/1999/02//22-rdf-syntax-ns> ?directorResource schema:name \"Ole John\"@en . ?editorResource schema:name \"Jens Jørgen Thorsen\"@en . ?writerResource schema:name \"Jørgen Leth\"@en . ?directorResource kg:5641 ?resource . ?editorResource kg:6051 ?resource . ?writerResource kg:4443 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL_AND(?hasDirector) AS ?result WHERE { wd:Q196450 wikibase:directClaim ?directorStatement . OPTIONAL { ?directorStatement ps:P729 ?director . FILTER(?director = wd:Q38026 || ?director = wd:Q18227 || ?director = wd:Q18228 || ?director = wd:Q45829 || ?director = wd:Q18229) } FILTER(!BOUND(?director)) . VALUES ?hasDirector { false true }\"] }\n    \t\t\t\t\t\t  \t\t\t\t \t  ", "normal_query": "$prefixes SELECT DISTINCT BOOL_AND(?hasDirector) AS ?result WHERE { wd:Q196450 wikibase:directClaim ?directorStatement . OPTIONAL { ?directorStatement ps:P729 ?director . FILTER(?director = wd:Q38026 || ?director = wd:Q18227 || ?director = wd:Q18228 || ?director = wd:Q45829 || ?director = wd:Q18229) } FILTER(!BOUND(?director)) . VALUES ?hasDirector { false true } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q522057 is Q522057\nwdt:P58 is P58\nwd:Q679023 is Q679023\nwd:Q358714 is Q358714\nwd:Q298255 is Q298255\nwd:Q3772 is Q3772", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK WHERE {\\nwd:Q47284 (wdt:P57|wdt:P58) ?person1.\\n?person1 wdt:P31 wd:Q522057.\\nwd:Q679023 (wdt:P57|wdt:P58) ?person2.\\n?person2 wdt:P31 wd:Q522057.\\nwd:Q358714 (wdt:P57|wdt:P58) ?person3.\\n?person3 wdt:P31 wd:Q522057.\\nwd:Q298255 (wdt:P57|wdt:P58) ?person4.\\n?person4 wdt:P31 wd:Q522057.\\nwd:Q3772 (wdt:P57|wdt:P58) ?person5.\\n?person5 wdt:P31 wd:Q522057.\\nFILTER(?person1 = ?person2 && ?person2 = ?person3 && ?person3 = ?person4 && ?person4 = ?person5).\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q47284 (wdt:P57|wdt:P58) ?person1. ?person1 wdt:P31 wd:Q522057. wd:Q679023 (wdt:P57|wdt:P58) ?person2. ?person2 wdt:P31 wd:Q522057. wd:Q358714 (wdt:P57|wdt:P58) ?person3. ?person3 wdt:P31 wd:Q522057. wd:Q298255 (wdt:P57|wdt:P58) ?person4. ?person4 wdt:P31 wd:Q522057. wd:Q3772 (wdt:P57|wdt:P58) ?person5. ?person5 wdt:P31 wd:Q522057. FILTER(?person1 = ?person2 && ?person2 = ?person3 && ?person3 = ?person4 && ?person4 = ?person5). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9202 is P57\nkg:3784 is Q47284\nkg:1714 is Q522057\nkg:1677 is P58\nkg:4939 is Q679023\nkg:8504 is Q358714\nkg:8863 is Q298255\nkg:1368 is Q3772", "response": "{ \"query\": [\"ASK { kg:9202 p57 kg:3784 . kg:9202 p57 kg:1714 . kg:9202 p57 kg:4939 . kg:9202 p57 kg:8504 . kg:9202 p57 kg:8863 }\"] }", "normal_query": "ASK { kg:9202 p57 kg:3784 . kg:9202 p57 kg:1714 . kg:9202 p57 kg:4939 . kg:9202 p57 kg:8504 . kg:9202 p57 kg:8863 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(bound(?x),true,false) as ?result) WHERE { ?x wdt:P31 wd:Q5; wdt:P106 wd:Q725389; wdt:P50 wd:Q49228.  wd:Q270265 wdt:P57 ?x. wd:Q270265 wdt:P50 wd:Q49228. wd:Q161367 wdt:P57 ?x. wd:Q161367 wdt:P50 wd:Q49228. wd:Q161368 wdt:P57 ?x. wd:Q161368 wdt:P50 wd:Q49228. wd:Q161369 wdt:P57 ?x. wd:Q161369 wdt:P50 wd:Q49228. }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(bound(?x),true,false) as ?result) WHERE { ?x wdt:P31 wd:Q5; wdt:P106 wd:Q725389; wdt:P50 wd:Q49228. wd:Q270265 wdt:P57 ?x. wd:Q270265 wdt:P50 wd:Q49228. wd:Q161367 wdt:P57 ?x. wd:Q161367 wdt:P50 wd:Q49228. wd:Q161368 wdt:P57 ?x. wd:Q161368 wdt:P50 wd:Q49228. wd:Q161369 wdt:P57 ?x. wd:Q161369 wdt:P50 wd:Q49228. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q567519 is Q567519\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwd:Q3282637 is Q3282637\nwd:Q327427 is Q327427\nwd:Q686125 is Q686125\nwdt:P106 is P106", "response": "{ \"query\": [\"ASK WHERE { wd:Q567519 wdt:P106 wd:Q3282637 . wd:Q567519 wdt:P58 ?producer . ?producer wdt:P1040 wd:Q2789885 . ?producer wdt:P1040 wd:Q327427 . ?producer wdt:P1040 wd:Q686125 . }\"] }", "normal_query": "ASK WHERE { wd:Q567519 wdt:P106 wd:Q3282637 . wd:Q567519 wdt:P58 ?producer . ?producer wdt:P1040 wd:Q2789885 . ?producer wdt:P1040 wd:Q327427 . ?producer wdt:P1040 wd:Q686125 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3945 is Q567519\nkg:0639 is P58\nkg:2555 is P1040\nkg:6905 is Q2789885\nkg:0359 is Q3282637\nkg:2936 is Q327427\nkg:7970 is Q686125\nkg:1724 is P106", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\" ,\n\"?x kg:P58 kg:3945 .\",\n\"?x kg:P1040 kg:0639 .\",\n\"?y kg:P58 kg:3945 .\",\n\"?y kg:P1040 kg:2555 .\",\n\"?z kg:P58 kg:3945 .\",\n\"?z kg:P1040 kg:7970 .\",\n\"?w kg:P58 kg:3945 .\",\n\"?w kg:P1040 kg:6905 .\",\n\"?v kg:P58 kg:3945 .\",\n\"?v kg:P1040 kg:2936 .\",\n\"kg:3945 kg:1724 kg:0359 .\" ,\n\"ASK { ?x ?y ?z ?w ?v }\"]}", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> ?x kg:P58 kg:3945 . ?x kg:P1040 kg:0639 . ?y kg:P58 kg:3945 . ?y kg:P1040 kg:2555 . ?z kg:P58 kg:3945 . ?z kg:P1040 kg:7970 . ?w kg:P58 kg:3945 . ?w kg:P1040 kg:6905 . ?v kg:P58 kg:3945 . ?v kg:P1040 kg:2936 . kg:3945 kg:1724 kg:0359 . ASK { ?x ?y ?z ?w ?v } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q53984526 ;\\nwdt:P57 wd:Q211908 ;\\nwdt:P1433 wd:Q211908 .\\n}\\nUNION\\n{\\n?resource wdt:P31 wd:Q53984526 ;\\nwdt:P57 wd:Q156415 ;\\nwdt:P1433 wd:Q156415 .\\n}\\nUNION\\n{\\n?resource wdt:P31 wd:Q53984526 ;\\nwdt:P57 wd:Q204395 ;\\nwdt:P1433 wd:Q204395 .\\n}\\nUNION\\n{\\n?resource wdt:P31 wd:Q53984526 ;\\nwdt:P57 wd:Q211909 ;\\nwdt:P1433 wd:Q211909 .\\n}\\nUNION\\n{\\n?resource wdt:P31 wd:Q53984526 ;\\nwdt:P57 wd:Q182261 ;\\nwdt:P1433 wd:Q182261 .\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q53984526 ; wdt:P57 wd:Q211908 ; wdt:P1433 wd:Q211908 . } UNION { ?resource wdt:P31 wd:Q53984526 ; wdt:P57 wd:Q156415 ; wdt:P1433 wd:Q156415 . } UNION { ?resource wdt:P31 wd:Q53984526 ; wdt:P57 wd:Q204395 ; wdt:P1433 wd:Q204395 . } UNION { ?resource wdt:P31 wd:Q53984526 ; wdt:P57 wd:Q211909 ; wdt:P1433 wd:Q211909 . } UNION { ?resource wdt:P31 wd:Q53984526 ; wdt:P57 wd:Q182261 ; wdt:P1433 wd:Q182261 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwdt:P58 is P58\nwd:Q7407299 is Q7407299\nwd:Q4500 is Q4500\nwd:Q7174311 is Q7174311\nwd:Q15042700 is Q15042700", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikida‌t.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q5542223 wdt:P57 ?director1.\\nwd:Q5542223 wdt:P58 ?writer1.\\nwd:Q7407299 wdt:P57 ?director2.\\nwd:Q7407299 wdt:P58 ?writer2.\\nwd:Q4500 wdt:P57 ?director3.\\nwd:Q4500 wdt:P58 ?writer3.\\nwd:Q7174311 wdt:P57 ?director4.\\nwd:Q7174311 wdt:P58 ?writer4.\\nwd:Q15042700 wdt:P57 ?director5.\\nwd:Q15042700 wdt:P58 ?writer5.\\n?resource (wdt:P57|wdt:P58) ?person.\\nFILTER(?person = ?director1 || ?person = ?writer1 || ?person = ?director2 || ?person = ?writer2 || ?person = ?director3 || ?person = ?writer3 || ?person = ?director4 || ?person = ?writer4 || ?person = ?director5 || ?person = ?writer5)\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikida‌t.org/prop/direct/> . SELECT ?resource WHERE { wd:Q5542223 wdt:P57 ?director1. wd:Q5542223 wdt:P58 ?writer1. wd:Q7407299 wdt:P57 ?director2. wd:Q7407299 wdt:P58 ?writer2. wd:Q4500 wdt:P57 ?director3. wd:Q4500 wdt:P58 ?writer3. wd:Q7174311 wdt:P57 ?director4. wd:Q7174311 wdt:P58 ?writer4. wd:Q15042700 wdt:P57 ?director5. wd:Q15042700 wdt:P58 ?writer5. ?resource (wdt:P57|wdt:P58) ?person. FILTER(?person = ?director1 || ?person = ?writer1 || ?person = ?director2 || ?person = ?writer2 || ?person = ?director3 || ?person = ?writer3 || ?person = ?director4 || ?person = ?writer4 || ?person = ?director5 || ?person = ?writer5) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4460 is Q5542223\nkg:7695 is P57\nkg:0529 is P58\nkg:3781 is Q7407299\nkg:4994 is Q4500\nkg:1978 is Q7174311\nkg:6138 is Q15042700", "response": "{ \"query\": [\"@prefix kg: <http://rdf.data-vocabulary.org/#> .\\n\\nSELECT ?resource WHERE {\\n\\t?x kg:7695 kg:3781 ; kg:0529 kg:1978 , kg:4994 , kg:6138 , kg:0529 , kg:4460 .\\n\\t?resource kg:7695 ?x .\\n}\"]}", "normal_query": "@prefix kg: <http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?work wdt:P31 wd:Q5383902 ;\\n\\twdt:P57 wd:Ole_John ;\\n\\twdt:P50 wd:Jens_Jørgen_Thorsen ;\\n\\twdt:P1433 wd:Jørgen_Leth .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?work wdt:P31 wd:Q5383902 ; wdt:P57 wd:Ole_John ; wdt:P50 wd:Jens_Jørgen_Thorsen ; wdt:P1433 wd:Jørgen_Leth . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q35979475 wdt:P57 ?director .\", \"wd:Q35979475 wdt:P58 ?writer .\", \"wd:Q35979475 wdt:P1040 ?editor .\", \"?director rdfs:label ?directorLabel FILTER (LANG(?directorLabel) = 'en') .\", \"?writer rdfs:label ?writerLabel FILTER (LANG(?writerLabel) = 'en') .\", \"?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'en') .\", \"}\", \"VALUES (?director ?writer ?editor) {\", \"(wd:Q1687239 wd:Q562108 wd:Q35979475)\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q35979475 wdt:P57 ?director . wd:Q35979475 wdt:P58 ?writer . wd:Q35979475 wdt:P1040 ?editor . ?director rdfs:label ?directorLabel FILTER (LANG(?directorLabel) = 'en') . ?writer rdfs:label ?writerLabel FILTER (LANG(?writerLabel) = 'en') . ?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'en') . } VALUES (?director ?writer ?editor) { (wd:Q1687239 wd:Q562108 wd:Q35979475) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5082 is P57\nkg:6675 is P58\nkg:8124 is P1040\nkg:5707 is Q35979475\nkg:5209 is Q1687239\nkg:1825 is Q562108", "response": "{ \"query\": [\"SELECT ?director ?writer ?editor WHERE { kg:5707 P57 ?director . kg:5707 P58 ?writer . kg:5707 P1040 ?editor }\"]}", "normal_query": "SELECT ?director ?writer ?editor WHERE { kg:5707 P57 ?director . kg:5707 P58 ?writer . kg:5707 P1040 ?editor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"{?film1 wdt:P31 wd:Q11424. ?film1 wdt:P57 wd:Q21198. ?film1 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film1. FILTER(?film1 = wd:Q274)} UNION\",\n \t\t\"{?film2 wdt:P31 wd:Q11424. ?film2 wdt:P57 wd:Q21198. ?film2 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film2. FILTER(?film2 = wd:Q380))} UNION\",\n \t\t\"{?film3 wdt:P31 wd:Q11424. ?film3 wdt:P57 wd:Q21198. ?film3 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film3. FILTER(?film3 = wd:Q274)} UNION\",\n \t\t\"{?film4 wdt:P31 wd:Q11424. ?film4 wdt:P57 wd:Q21198. ?film4 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film4. FILTER(?film4 = wd:Q381)}\"\n \t]\n \t}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "{?film1 wdt:P31 wd:Q11424. ?film1 wdt:P57 wd:Q21198. ?film1 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film1. FILTER(?film1 = wd:Q274)} UNION {?film2 wdt:P31 wd:Q11424. ?film2 wdt:P57 wd:Q21198. ?film2 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film2. FILTER(?film2 = wd:Q380))} UNION {?film3 wdt:P31 wd:Q11424. ?film3 wdt:P57 wd:Q21198. ?film3 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film3. FILTER(?film3 = wd:Q274)} UNION {?film4 wdt:P31 wd:Q11424. ?film4 wdt:P57 wd:Q21198. ?film4 wdt:P50 ?editor. ?editor wdt:P169 wd:Q21198. ?editor wdt:P468 ?film4. FILTER(?film4 = wd:Q381)} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwd:Q3968346 is Q3968346\nwd:Q7042855 is Q7042855\nwdt:P106 is P106\nwd:Q17738 is Q17738\nwd:Q165713 is Q165713", "response": "{ \"query\": [\n    \"SELECT (COUNT(?film) AS ?count) WHERE {\",\n    \"?person wdt:P106 wd:Q181803 ;\",\n    \"wdt:P58 ?film .\",\n    \"?film wdt:P1431 ?title .\",\n    \"{ ?title rdfs:label 'Star Wars: Episode IV – A New Hope'@en } UNION\",\n    \"{ ?title rdfs:label 'Star Wars: Episode I – The Phantom Menace'@en } UNION\",\n    \"{ ?title rdfs:label 'Star Wars: Episode VI – Return of the Jedi'@en } UNION\",\n    \"{ ?title rdfs:label 'Star Whores'@en } .\",\n    \"?film wdt:P165713 wd:Q17738 ;\",\n    \"wdt:P3968346 wd:Q7042855 .\",\n    \"} GROUP BY ?person HAVING (COUNT(?film) = 4)\"\n]}", "normal_query": "SELECT (COUNT(?film) AS ?count) WHERE { ?person wdt:P106 wd:Q181803 ; wdt:P58 ?film . ?film wdt:P1431 ?title . { ?title rdfs:label 'Star Wars: Episode IV – A New Hope'@en } UNION { ?title rdfs:label 'Star Wars: Episode I – The Phantom Menace'@en } UNION { ?title rdfs:label 'Star Wars: Episode VI – Return of the Jedi'@en } UNION { ?title rdfs:label 'Star Whores'@en } . ?film wdt:P165713 wd:Q17738 ; wdt:P3968346 wd:Q7042855 . } GROUP BY ?person HAVING (COUNT(?film) = 4) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0430 is P58\nkg:5508 is P1431\nkg:9666 is Q181803\nkg:2161 is Q3968346\nkg:0828 is Q7042855\nkg:5789 is P106\nkg:9317 is Q17738\nkg:6932 is Q165713", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE {\", \"{ ?x kg:P58 kg:0430 . }\", \"{ ?x kg:P1431 kg:5508 . }\", \"{ ?x kg:P106 kg:9666 . }\", \"{ ?x kg:P1431 kg:2161 . }\", \"?y kg:P58 kg:0430 .\", \"?y kg:P1431 kg:5789 .\", \"?z kg:P106 kg:9666 .\", \"?w kg:P1431 kg:2161 .\", \"{ ?x kg:P1431 kg:6932 . }\", \"}\"]}", "normal_query": "ASK WHERE { { ?x kg:P58 kg:0430 . } { ?x kg:P1431 kg:5508 . } { ?x kg:P106 kg:9666 . } { ?x kg:P1431 kg:2161 . } ?y kg:P58 kg:0430 . ?y kg:P1431 kg:5789 . ?z kg:P106 kg:9666 . ?w kg:P1431 kg:2161 . { ?x kg:P1431 kg:6932 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"ASK WHERE { wd:Q35979475 wdt:P57 wd:Q562108 . wd:Q35979475 wdt:P1040 wd:Q20729551 . wd:Q35979475 wdt:P58 wd:Q1687239 }\"] }", "normal_query": "ASK WHERE { wd:Q35979475 wdt:P57 wd:Q562108 . wd:Q35979475 wdt:P1040 wd:Q20729551 . wd:Q35979475 wdt:P58 wd:Q1687239 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9716 is P57\nkg:7986 is Q20729551\nkg:6656 is P1040\nkg:1606 is P58\nkg:2369 is Q35979475\nkg:1743 is Q1687239\nkg:5837 is Q562108", "response": "{ \"query\": [\"ASK WHERE { kg:2369 P57 kg:9716 . kg:2369 P1040 kg:7986 . kg:2369 P58 kg:1606 }\"] }", "normal_query": "ASK WHERE { kg:2369 P57 kg:9716 . kg:2369 P1040 kg:7986 . kg:2369 P58 kg:1606 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P31 wd:Q5 . \"\n\t\t,\"?writer wdt:P108 wd:Q241173 . \" ,\"%s\"\n\t\t,\"?writer wdt:P1698 ?episodeI . \"\n\t\t,\"?episodeI wdt:P345 ?titleEpisodeI . \"\n\t\t,\"FILTER(?titleEpisodeI = 'Star_Wars:_Episode_I_–_The_Phantom_Menace') . \"\n\t\t,\"?writer wdt:P1698 ?landBeforeTime . \"\n\t\t,\"?landBeforeTime wdt:P345 ?titleLabelBeforeTime . \"\n\t\t,\"FILTER(?titleLabelBeforeTime = 'The_Land_Before_Time_(film_series)') . \"\n\t] }\n \t\t \t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P108 wd:Q241173 . %s ?writer wdt:P1698 ?episodeI . ?episodeI wdt:P345 ?titleEpisodeI . FILTER(?titleEpisodeI = 'Star_Wars:_Episode_I_–_The_Phantom_Menace') . ?writer wdt:P1698 ?landBeforeTime . ?landBeforeTime wdt:P345 ?titleLabelBeforeTime . FILTER(?titleLabelBeforeTime = 'The_Land_Before_Time_(film_series)') . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1869678 is Q1869678\nwd:Q208910 is Q208910\nwd:Q192403 is Q192403\nwd:Q165713 is Q165713\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?resource wdt:P58 wd:Q613974 ;\\n\\t\\twdt:P1431 wd:Q208910 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P58 wd:Q613974 ; wdt:P1431 wd:Q208910 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9116 is P58\nkg:3555 is P1431\nkg:6043 is Q613974\nkg:8219 is Q1869678\nkg:4372 is Q208910\nkg:2481 is Q192403\nkg:7563 is Q165713\nkg:8581 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.data-vocabulary.org/resource/9116> kg:P58 ?resource .\\nOPTIONAL { <http://rdf.data-vocabulary.org/resource/3555> kg:P1431 ?optionalResource }.\\nFILTER(?resource = <http://rdf.data-vocabulary.org/resource/6043> || ?resource = <http://rdf.data-vocabulary.org/resource/8219> || ?resource = <http://rdf.data-vocabulary.org/resource/4372> || ?resource = <http://rdf.data-vocabulary.org/resource/2481> || ?resource = <http://rdf.data-vocabulary.org/resource/7563> || ?resource = <http://rdf.data-vocabulary.org/resource/8581>)\\n\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q83629. ?film wdt:P58 wd:Q83629. ?film wdt:P98 wd:Q83629. ?film wdt:P59 wd:Q83629. ?producer wdt:P169 wd:Q786049. }\"\n \t]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q83629. ?film wdt:P58 wd:Q83629. ?film wdt:P98 wd:Q83629. ?film wdt:P59 wd:Q83629. ?producer wdt:P169 wd:Q786049. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwd:Q3282637 is Q3282637\nwdt:P106 is P106", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n  \t\t\"{ ?entity wdt:P57 wd:Q1361018 ; wdt:P1431 wd:Q2086445 ; wdt:P106 wd:Q3282637 . } UNION { ?entity wdt:P57 wd:Q1361018 ; wdt:P1431 wd:Q3282637 ; wdt:P106 wd:Q2086445 . }\"\n \t]\n}", "normal_query": "{ ?entity wdt:P57 wd:Q1361018 ; wdt:P1431 wd:Q2086445 ; wdt:P106 wd:Q3282637 . } UNION { ?entity wdt:P57 wd:Q1361018 ; wdt:P1431 wd:Q3282637 ; wdt:P106 wd:Q2086445 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2660 is Q2086445\nkg:5229 is P57\nkg:2992 is P58\nkg:9361 is P1040\nkg:4866 is P1431\nkg:8435 is Q1361018\nkg:2196 is Q3282637\nkg:9511 is P106", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?producer WHERE {\\n\\t?film kg:5229 ?producer .\\n\\t?producer kg:4866 kg:2660 .\\n\\t?producer kg:2196 kg:8435 .\\n\\t?producer kg:2992 kg:2196 .\\n\\t?producer kg:9361 kg:2196 .\\n}\" ] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?producer WHERE { ?film kg:5229 ?producer . ?producer kg:4866 kg:2660 . ?producer kg:2196 kg:8435 . ?producer kg:2992 kg:2196 . ?producer kg:9361 kg:2196 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256", "response": "{ \"query\": [\"ASK WHERE { wd:Q452794 wdt:P57 ?director . ?director (wdt:P1431|wdt:P58)* wd:Q363666 . ?director (wdt:P1431|wdt:P58)* wd:Q448604 . ?director (wdt:P1431|wdt:P58)* wd:Q497256 }\"] }", "normal_query": "ASK WHERE { wd:Q452794 wdt:P57 ?director . ?director (wdt:P1431|wdt:P58)* wd:Q363666 . ?director (wdt:P1431|wdt:P58)* wd:Q448604 . ?director (wdt:P1431|wdt:P58)* wd:Q497256 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3353 is P57\nkg:7474 is P58\nkg:1852 is P1431\nkg:5523 is Q452794\nkg:9322 is Q363666\nkg:1280 is Q448604\nkg:5960 is Q497256", "response": "{ \"query\": [\"ASK WHERE { kg:5523 p57 _:a . _:a rdfs:label \\\"Jim Abrahams\\\"@en. kg:5523 p1431 _:b . _:b rdfs:label \\\"Jerry Zucker\\\"@en. kg:5523 p1431 _:c . _:c rdfs:label \\\"David Zucker\\\"@en. }\"] }", "normal_query": "ASK WHERE { kg:5523 p57 _:a . _:a rdfs:label \"Jim Abrahams\"@en. kg:5523 p1431 _:b . _:b rdfs:label \"Jerry Zucker\"@en. kg:5523 p1431 _:c . _:c rdfs:label \"David Zucker\"@en. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256", "response": "{ \"query\": [\"ASK WHERE { wd:Q452794 wdt:P57 wd:Q363666 . wd:Q452794 wdt:P58 wd:Q448604 . wd:Q452794 wdt:P1431 wd:Q497256 }\"] }", "normal_query": "ASK WHERE { wd:Q452794 wdt:P57 wd:Q363666 . wd:Q452794 wdt:P58 wd:Q448604 . wd:Q452794 wdt:P1431 wd:Q497256 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0243 is P57\nkg:2589 is P58\nkg:2339 is P1431\nkg:0336 is Q452794\nkg:1474 is Q363666\nkg:4967 is Q448604\nkg:3598 is Q497256", "response": "{ \"query\": [\"ASK { kg:0336 (P57/kg:2589, P58/kg:2339, P1431/kg:1474) kg:0243 ; (P57/kg:2589, P58/kg:2339, P1431/kg:4967) kg:0243 ; (P57/kg:2589, P58/kg:2339, P1431/kg:3598) kg:0243 . }\"] }", "normal_query": "ASK { kg:0336 (P57/kg:2589, P58/kg:2339, P1431/kg:1474) kg:0243 ; (P57/kg:2589, P58/kg:2339, P1431/kg:4967) kg:0243 ; (P57/kg:2589, P58/kg:2339, P1431/kg:3598) kg:0243 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P31 wd:Q5 . \"\n\t\t,\"?writer wdt:P169 wd:Q2411807 . \" ,\"%Twin_Peaks:_Fire_Walk_with_Me%\"\n\t\t,\"?writer wdt:P169 wd:Q21196389 . \" ,\"%My_Son,_My_Son,_What_Have_Thou_Done% or %My Son, My Son, What Have Ye Done%\"\n\t\t,\"?writer wdt:P169 wd:Q4570927 . \" ,\"%Surveillance%\"\n\t]\n}", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P169 wd:Q2411807 . %Twin_Peaks:_Fire_Walk_with_Me% ?writer wdt:P169 wd:Q21196389 . %My_Son,_My_Son,_What_Have_Thou_Done% or %My Son, My Son, What Have Ye Done% ?writer wdt:P169 wd:Q4570927 . %Surveillance% LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwd:Q583406 is Q583406\nwd:Q2085 is Q2085\nwd:Q1511905 is Q1511905", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{ ?x0 wdt:P57 wd:Q1140578 ; wdt:P58 wd:Q2085 . } UNION { ?x0 wdt:P1431 wd:Q1511905 . } UNION { ?x0 wdt:P1431 wd:Q583406 . }\"\n \t]\n}", "normal_query": "{ ?x0 wdt:P57 wd:Q1140578 ; wdt:P58 wd:Q2085 . } UNION { ?x0 wdt:P1431 wd:Q1511905 . } UNION { ?x0 wdt:P1431 wd:Q583406 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0181 is P57\nkg:6994 is P58\nkg:7277 is P1431\nkg:0744 is Q1140578\nkg:2393 is Q583406\nkg:9999 is Q2085\nkg:4280 is Q1511905", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> . SELECT ?resource WHERE { kg:0744 kg:6994 ?resource }\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q982339 is Q982339\nwd:Q116760 is Q116760\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P31 is P31\nwd:Q7546 is Q7546\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q982339 wdt:P57 ?film.\\nwdf:Q116760 wdt:P57 ?film.\\nwd:Q11424 wdt:P57 ?film.\\nwd:Q1033656 wdt:P57 ?film.\\nwd:Q1365463 wdt:P57 ?film.\\n?film wdt:P31 wd:Q7546.\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { wd:Q982339 wdt:P57 ?film. wdf:Q116760 wdt:P57 ?film. wd:Q11424 wdt:P57 ?film. wd:Q1033656 wdt:P57 ?film. wd:Q1365463 wdt:P57 ?film. ?film wdt:P31 wd:Q7546. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9278 is P57\nkg:9816 is Q982339\nkg:3993 is Q116760\nkg:9807 is Q11424\nkg:0020 is P58\nkg:6485 is Q1033656\nkg:2253 is P31\nkg:0524 is Q7546\nkg:9878 is Q1365463", "response": "{ \"query\": [\"SELECT ?film WHERE { kg:9816 P57 ?film . kg:3993 P57 ?film . kg:0020 P57 ?film . kg:9807 P57 ?film . kg:9278 P57 ?film }\"] }", "normal_query": "SELECT ?film WHERE { kg:9816 P57 ?film . kg:3993 P57 ?film . kg:0020 P57 ?film . kg:9807 P57 ?film . kg:9278 P57 ?film } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P86 is P86\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwd:Q550196 is Q550196\nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"ASK WHERE { wd:Q192115 wdt:P86 ?composer . ?composer wdt:P57 wd:Q656357 . ?composer wdt:P57 wd:Q550196 . ?composer wdt:P57 wd:Q1653396 . }\"] }", "normal_query": "ASK WHERE { wd:Q192115 wdt:P86 ?composer . ?composer wdt:P57 wd:Q656357 . ?composer wdt:P57 wd:Q550196 . ?composer wdt:P57 wd:Q1653396 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9451 is P57\nkg:9960 is P86\nkg:4046 is Q192115\nkg:8643 is Q656357\nkg:8138 is Q550196\nkg:0619 is Q1653396\nkg:3757 is P161\nkg:2055 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nASK { kg:9960 kg:3757 kg:8643 .\\nkf:9960 kg:2055 kg:4046 .\\nkg:9960 kg:0619 kg:8138 .\\nkg:9960 kg:0619 kg:9451 .\\nkg:9960 kg:0619 kg:2055 .\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P86 is P86\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwd:Q470895 is Q470895\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602", "response": "{ \"query\": [\"ASK WHERE { wd:Q3986814 wdt:P86 ?composer . ?composer wdt:P1040 wd:Q199039 . wd:Q470895 wdt:P161 ?editor . FILTER(?editor = wd:Q238211) }\"] }", "normal_query": "ASK WHERE { wd:Q3986814 wdt:P86 ?composer . ?composer wdt:P1040 wd:Q199039 . wd:Q470895 wdt:P161 ?editor . FILTER(?editor = wd:Q238211) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4080 is Q3986814\nkg:2193 is P86\nkg:5009 is P1040\nkg:7526 is Q199039\nkg:4213 is Q470895\nkg:0119 is Q238211\nkg:3653 is P161\nkg:4245 is Q45602", "response": "{ \"query\": [\"ASK { kg:4080 kg:2193 ?composer . ?film1 kg:3653 ?composer . ?film2 kg:3653 ?composer . FILTER ( STR(?film1) = \\\"A Woman of Paris\\\"@en || STR(?film1) = \\\"Pay Day\\\"@en ) . FILTER ( STR(?film2) = \\\"Modern Times\\\"@en || STR(?film2) = \\\"City Lights\\\"@en || STR(?film2) = \\\"The Essanay-Chaplin Revue of 1916\\\"@en ) . kg:4080 kg:5009 ?editor_star . ?editor_star kg:7526 kg:0119 . }\"]}", "normal_query": "ASK { kg:4080 kg:2193 ?composer . ?film1 kg:3653 ?composer . ?film2 kg:3653 ?composer . FILTER ( STR(?film1) = \"A Woman of Paris\"@en || STR(?film1) = \"Pay Day\"@en ) . FILTER ( STR(?film2) = \"Modern Times\"@en || STR(?film2) = \"City Lights\"@en || STR(?film2) = \"The Essanay-Chaplin Revue of 1916\"@en ) . kg:4080 kg:5009 ?editor_star . ?editor_star kg:7526 kg:0119 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?film WHERE {\",\n  \t\t\"  ?film wdt:P31 wd:Q11424. \",\n  \t\t\"  ?film wdt:P57 wd:Q80967. \",\n  \t\t\"  ?film wdt:P57 wd:Q182267. \",\n  \t\t\"  ?film wdt:P57 wd:Q182268. \",\n  \t\t\"  ?film wdt:P463 wd:Q80967. \",\n  \t\t\"  ?film wdt:P463 wd:Q182267. \",\n  \t\t\"  ?film wdt:P463 wd:Q182268. \",\n  \t\t\"}\"\n  \t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q80967. ?film wdt:P57 wd:Q182267. ?film wdt:P57 wd:Q182268. ?film wdt:P463 wd:Q80967. ?film wdt:P463 wd:Q182267. ?film wdt:P463 wd:Q182268. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwdt:P1431 is P1431\nwdt:P31 is P31\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?film WHERE {\", \"wd:Q11424 wdt:P57 ?film .\", \"wd:Q363666 wdt:P57 ?film .\", \"wd:Q448604 wdt:P57 ?film .\", \"wd:Q11424 wdt:P58 ?film .\", \"wd:Q363666 wdt:P58 ?film .\", \"wd:Q448604 wdt:P58 ?film .\", \"wd:Q11424 wdt:P1431 ?film .\", \"wd:Q363666 wdt:P1431 ?film .\", \"wd:Q448604 wdt:P1431 ?film .\", \"?film wdt:P31 wd:Q452794 .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { wd:Q11424 wdt:P57 ?film . wd:Q363666 wdt:P57 ?film . wd:Q448604 wdt:P57 ?film . wd:Q11424 wdt:P58 ?film . wd:Q363666 wdt:P58 ?film . wd:Q448604 wdt:P58 ?film . wd:Q11424 wdt:P1431 ?film . wd:Q363666 wdt:P1431 ?film . wd:Q448604 wdt:P1431 ?film . ?film wdt:P31 wd:Q452794 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0541 is P57\nkg:9415 is Q11424\nkg:1517 is P58\nkg:2617 is P1431\nkg:0107 is P31\nkg:3259 is Q452794\nkg:4847 is Q363666\nkg:6735 is Q448604", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:p57 kg:9415 .\",\n\"?x kg:p58 kg:3259 .\",\n\"?x kg:p1431 kg:6735 .\"] }", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ?x kg:p57 kg:9415 . ?x kg:p58 kg:3259 . ?x kg:p1431 kg:6735 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?resource wdt:P31 wd:Q57804269 ;\\nwdt:P57 ?director ;\\nwdt:P50 ?author ;\\nwdt:P1476 ?editor .\\nFILTER(?director = (wd:Yūdai Yamaguchi) || ?author = (wd:Ernesto Díaz Espinoza) || ?author = (wd:Adrián García Bogliano) || ?editor = (wd:Yoshihiro Nishimura)}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q57804269 ; wdt:P57 ?director ; wdt:P50 ?author ; wdt:P1476 ?editor . FILTER(?director = (wd:Yūdai Yamaguchi) || ?author = (wd:Ernesto Díaz Espinoza) || ?author = (wd:Adrián García Bogliano) || ?editor = (wd:Yoshihiro Nishimura)} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwd:Q5836844 is Q5836844\nwd:Q4023328 is Q4023328\nwd:Q5658534 is Q5658534", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{ ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4022902 ; wdt:P1040 wd:Q4023328 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4022902 ; wdt:P1040 wd:Q5658534 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4023328 ; wdt:P1040 wd:Q4022902 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4023328 ; wdt:P1040 wd:Q5658534 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q5658534 ; wdt:P1040 wd:Q4022902 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q5658534 ; wdt:P1040 wd:Q4023328 . }\"\n \t]\n}", "normal_query": "{ ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4022902 ; wdt:P1040 wd:Q4023328 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4022902 ; wdt:P1040 wd:Q5658534 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4023328 ; wdt:P1040 wd:Q4022902 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q4023328 ; wdt:P1040 wd:Q5658534 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q5658534 ; wdt:P1040 wd:Q4022902 . } UNION { ?item wdt:P57 wd:Q5836844 ; wdt:P58 wd:Q5658534 ; wdt:P1040 wd:Q4023328 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8693 is P57\nkg:0274 is P58\nkg:1344 is P1040\nkg:9251 is Q4022902\nkg:0833 is Q5836844\nkg:4265 is Q4023328\nkg:2821 is Q5658534", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\", \"SELECT ?director ?writer ?editor WHERE {\", \"?movie kg:P57 ?director .\", \"?movie kg:P58 ?writer .\", \"?movie kg:P1040 ?editor .\", \"?director kg:9251 yudai_yamaguchi .\", \"?writer kg:0833 ernesto_diaz_espinoza .\", \"?writer kg:4265 adrian_garcia_bogliano .\", \"?editor kg:2821 yoshihiro_nishimura .}\", \"\"]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?director ?writer ?editor WHERE { ?movie kg:P57 ?director . ?movie kg:P58 ?writer . ?movie kg:P1040 ?editor . ?director kg:9251 yudai_yamaguchi . ?writer kg:0833 ernesto_diaz_espinoza . ?writer kg:4265 adrian_garcia_bogliano . ?editor kg:2821 yoshihiro_nishimura .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q7042855 is Q7042855\nwd:Q484679 is Q484679\nwdt:P106 is P106\nwd:Q483197 is Q483197", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK { ?film1 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q13471372 .\\n      ?film2 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q7042855 .\\n      ?film3 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q1040 }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { ?film1 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q13471372 . ?film2 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q7042855 . ?film3 wdt:P58 wd:Q483197 ; wdt:P106 wd:Q484679 ; wdt:P1431 wd:Q1040 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1458 is Q13471372\nkg:6788 is P58\nkg:4116 is P1040\nkg:3804 is P1431\nkg:5732 is Q7042855\nkg:4732 is Q484679\nkg:9371 is P106\nkg:5325 is Q483197", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE {\", \"?x kg:1458 ?y .\", \"?x kg:6788 kg:5732 .\", \"?x kg:4116 kg:4732 .\", \"?x kg:3804 kg:9371 .}\", \"{\", \"?y kg:1458 ?z .\", \"?y kg:6788 kg:5732 .\", \"?y kg:4116 kg:4732 .\", \"?y kg:3804 kg:9371 .}\"]}", "normal_query": "ASK WHERE { ?x kg:1458 ?y . ?x kg:6788 kg:5732 . ?x kg:4116 kg:4732 . ?x kg:3804 kg:9371 .} { ?y kg:1458 ?z . ?y kg:6788 kg:5732 . ?y kg:4116 kg:4732 . ?y kg:3804 kg:9371 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(COALEXISTS { ?producer p:P31/ps:P31 wd:Q578. ?film wdt:P162 ?producer. ?film wdt:P488 ?producer. ?film wdt:P50 ?producer. FILTER(?film IN (wd:Fate, wd:The_Confession, wd:The_Waiting_Room)) } ) AS ?result\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(COALEXISTS { ?producer p:P31/ps:P31 wd:Q578. ?film wdt:P162 ?producer. ?film wdt:P488 ?producer. ?film wdt:P50 ?producer. FILTER(?film IN (wd:Fate, wd:The_Confession, wd:The_Waiting_Room)) } ) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010\nwdt:P106 is P106", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3116 is Q6084069\nkg:8238 is P1040\nkg:6683 is P58\nkg:9184 is P1431\nkg:4078 is Q3282637\nkg:6510 is Q5437360\nkg:7130 is Q12813010\nkg:0001 is P106", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"ASK { kg:3116 kg:9184 [ kg:0001 kg:4078 ] ; kg:8238 [ kg:0001 kg:6510 ] ; kg:6683 [ kg:0001 kg:7130 ] . }\"]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ASK { kg:3116 kg:9184 [ kg:0001 kg:4078 ] ; kg:8238 [ kg:0001 kg:6510 ] ; kg:6683 [ kg:0001 kg:7130 ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P31 wd:Q5 . \"\n\t\t,\"?writer wdt:P800 wd:Q247694 . \"\n\t\t,\"?writer wdt:P800 wd:Q1064756 . \"\n\t\t,\"?writer wdt:P800 wd:Q3918046 . \"\n\t\t,\"?writer wdt:P26 ?spouse . \"\n\t\t,\"?spouse wdt:P31 wd:Q5 . \"\n\t\t,\"?writer wdt:P47 ?influenced . \"\n\t\t,\"?influenced wdt:P31 wd:Q187089 . \"\n\t\t,\"?writer wdt:P26 ?marriage . \"\n\t\t,\"?marriage wdt:P54 ?writer . \"\n\t\t,\"?marriage wdt:P1343 ?spouse . \"\n\t\t]\n} ", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P800 wd:Q247694 . ?writer wdt:P800 wd:Q1064756 . ?writer wdt:P800 wd:Q3918046 . ?writer wdt:P26 ?spouse . ?spouse wdt:P31 wd:Q5 . ?writer wdt:P47 ?influenced . ?influenced wdt:P31 wd:Q187089 . ?writer wdt:P26 ?marriage . ?marriage wdt:P54 ?writer . ?marriage wdt:P1343 ?spouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q63993096 is Q63993096\nwd:Q312258 is Q312258", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?work wdt:P31 wd:Q5398427 ;\\n         wdt:P58 ?person .\\n  ?person wdt:P26 wd:Q2493884 ;\\n           wdt:P737 wd:Q2298257 .\\n  FILTER(?work = wd:Q63993096 || ?work = wd:Q312258)\\n}\\n\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?work wdt:P31 wd:Q5398427 ; wdt:P58 ?person . ?person wdt:P26 wd:Q2493884 ; wdt:P737 wd:Q2298257 . FILTER(?work = wd:Q63993096 || ?work = wd:Q312258) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4456 is Q2493884\nkg:3265 is P58\nkg:5011 is Q2298257\nkg:5902 is P1040\nkg:5863 is P26\nkg:6168 is P737\nkg:8979 is Q63993096\nkg:9891 is Q312258", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\n\\nSELECT ?resource WHERE {\\n  kg:4456 kg:5863 ?resource.\\n  ?resource kg:5902 kg:5011.\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:4456 kg:5863 ?resource. ?resource kg:5902 kg:5011. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"  ?work wdt:P31 wd:Q1142469; \",\n\t\t\"        wdt:P50 ?writer;\",\n\t\t\"        wdt:P161 ?star;\",\n\t\t\"        wdt:P750 ?director;\",\n\t\t\"        wdt:P86 ?composer.\",\n\t\t\"  ?writer wdt:P345 ?imdbId.\",\n\t\t\"  ?otherWork wdt:P31 wd:Q1142469; \",\n\t\t\"              wdt:P50 ?writer;\",\n\t\t\"              wdt:P57 ?director.\",\n\t\t\"  ?otherWork rdfs:label ?title.\",\n\t\t\"  FILTER (LANG(?title) = 'en').\",\n\t\t\"  FILTER (?work != ?otherWork).\",\n\t\t\"  FILTER (regex(?title, \\\"The Floorwalker\\\", \\\"i\\\")).\",\n\t\t\"  ?writer wdt:P345 ?imdbId.\",\n\t\t\"  ?writer rdfs:label ?resource.\",\n\t\t\"  FILTER (LANG(?resource) = 'en').\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P31 wd:Q1142469; wdt:P50 ?writer; wdt:P161 ?star; wdt:P750 ?director; wdt:P86 ?composer. ?writer wdt:P345 ?imdbId. ?otherWork wdt:P31 wd:Q1142469; wdt:P50 ?writer; wdt:P57 ?director. ?otherWork rdfs:label ?title. FILTER (LANG(?title) = 'en'). FILTER (?work != ?otherWork). FILTER (regex(?title, \"The Floorwalker\", \"i\")). ?writer wdt:P345 ?imdbId. ?writer rdfs:label ?resource. FILTER (LANG(?resource) = 'en'). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P86 is P86\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\twd:Q1140317 wdt:P58 ?composer.\\n\\twd:Q1140317 wdt:P86 ?writer.\\n\\twd:Q1140317 wdt:P57 ?director.\\n\\twd:Q1140317 wdt:P161 ?star.\\n\\t?resource wdt:P57 wd:Q109116.\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1140317 wdt:P58 ?composer. wd:Q1140317 wdt:P86 ?writer. wd:Q1140317 wdt:P57 ?director. wd:Q1140317 wdt:P161 ?star. ?resource wdt:P57 wd:Q109116. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2514 is P57\nkg:4943 is Q166739\nkg:4290 is P86\nkg:3608 is P58\nkg:6839 is Q1140317\nkg:7682 is P161\nkg:8244 is Q109116", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?writer ?star ?director ?composer ?floorwalkerDirector WHERE {\",\n \t\t\"?shoulderArms kg:3608 kg:6839 .\", \">// writer of Shoulder Arms is Charlie Chaplin (Q1140317)\",\n \t\t\"?shoulderArms kg:4290 ?writer .\", \">// writer\"\n \t\t,\n \t\t\"?shoulderArms kg:7682 ?star .\", \">// star\"\n \t\t,\n \t\t\"?shoulderArms kg:2514 ?director .\", \">// director\"\n \t\t,\n \t\t\"?shoulderArms kg:4943 ?composer .\", \">// composer\"\n \t\t,\n \t\t\"?floorwalker kg:8244 ?floorwalkerDirector .\", \">// The Floorwalker (Q109116) directed by\"\n \t\t,\n \t\t\"?floorwalkerDirector kg:2514 ?director .\" ]}", "normal_query": "SELECT ?writer ?star ?director ?composer ?floorwalkerDirector WHERE { ?shoulderArms kg:3608 kg:6839 . >// writer of Shoulder Arms is Charlie Chaplin (Q1140317) ?shoulderArms kg:4290 ?writer . >// writer ?shoulderArms kg:7682 ?star . >// star ?shoulderArms kg:2514 ?director . >// director ?shoulderArms kg:4943 ?composer . >// composer ?floorwalker kg:8244 ?floorwalkerDirector . >// The Floorwalker (Q109116) directed by ?floorwalkerDirector kg:2514 ?director . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT (COUNT(?role) AS ?hasRole) WHERE { wd:Q1634870 wdt:P57 ?director . ?director wdt:P108 ?company . ?company wdt:P361 wd:Q2519469 . ?person wdt:P108 ?company . ?person wdt:P101 ?role . ?film wdt:P57 ?director . VALUES ?film { wd:Q1634870 wd:Q1634869 } . FILTER(?role = wd:Q23980) } GROUP BY ?director\"]\n}", "normal_query": "$prefixes SELECT DISTINCT (COUNT(?role) AS ?hasRole) WHERE { wd:Q1634870 wdt:P57 ?director . ?director wdt:P108 ?company . ?company wdt:P361 wd:Q2519469 . ?person wdt:P108 ?company . ?person wdt:P101 ?role . ?film wdt:P57 ?director . VALUES ?film { wd:Q1634870 wd:Q1634869 } . FILTER(?role = wd:Q23980) } GROUP BY ?director LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"ASK WHERE {\", \"wd:Q1165050 wdt:P57 ?director .\", \"wd:Q1165050 wdt:P58 ?writer .\", \"wd:Q1165050 wdt:P1040 ?cinematographer .\", \"wd:Q192115 wdt:P161 ?star .\", \"wd:Q192115 wdt:P344 ?editor .\", \"?director wdt:P57 wd:Q1165050 .\", \"?writer wdt:P58 wd:Q1165050 .\", \"?cinematographer wdt:P1040 wd:Q1165050 .\", \"?star wdt:P161 wd:Q192115 .\", \"?editor wdt:P344 wd:Q192115 .}\", \"\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q1165050 wdt:P57 ?director . wd:Q1165050 wdt:P58 ?writer . wd:Q1165050 wdt:P1040 ?cinematographer . wd:Q192115 wdt:P161 ?star . wd:Q192115 wdt:P344 ?editor . ?director wdt:P57 wd:Q1165050 . ?writer wdt:P58 wd:Q1165050 . ?cinematographer wdt:P1040 wd:Q1165050 . ?star wdt:P161 wd:Q192115 . ?editor wdt:P344 wd:Q192115 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2515 is Q1165050\nkg:9133 is P57\nkg:7262 is P58\nkg:5100 is P1040\nkg:8718 is Q192115\nkg:8873 is P161\nkg:7887 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#> .\" ,\n\"?x kg:P57 ?y .\",\n\"?x kg:P58 ?z .\",\n\"?x kg:P1040 ?w .\",\n\"?x kg:P161 ?a .\",\n\"?x kg:P344 ?b .\",\n\"?y kg:sameAs <http://rdf.data-vocabulary.org/resource/Q1165050> .\",\n\"FILTER(?z = kg:8718 && ?w = kg:9133 && ?a = kg:7262 && ?b = kg:7887)\" ,\n\"?x kg:sameAs ?result .\" ] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> ?x kg:P57 ?y . ?x kg:P58 ?z . ?x kg:P1040 ?w . ?x kg:P161 ?a . ?x kg:P344 ?b . ?y kg:sameAs <http://rdf.data-vocabulary.org//>resource/Q1165050> . FILTER(?z = kg:8718 && ?w = kg:9133 && ?a = kg:7262 && ?b = kg:7887) ?x kg:sameAs ?result . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"{?person wdt:P3456 wd:Q25198709. ?person wdt:P161 wd:Q25198709. ?movie wdt:P57 ?person. ?movie wdt:P345 wd:Q25198709. ?movie2 wdt:P345 wd:Q25198709. ?movie3 wdt:P57 ?person. ?movie3 wdt:P345 wd:Q25198709. ?movie4 wdt:P345 wd:Q25198709. ?movie5 wdt:P345 wd:Q25198709. ?movie6 wdt:P345 wd:Q25198709. ?movie7 wdt:P106 wd:Q75292. ?movie7 wdt:P57 ?editor. ?person wdt:P161 ?movie7. ?movie7 wdt:P345 wd:Q25198709. ?movie7 wdt:P953 ?producer. ?person wdt:P161 ?movie7. FILTER(?movie != ?movie2 && ?movie != ?movie3 && ?movie != ?movie4 && ?movie != ?movie5 && ?movie != ?movie6).}\"\n \t]\n \t\t\t \t\t}\n \t\t\t \t\t\t\t \t\t", "normal_query": "{?person wdt:P3456 wd:Q25198709. ?person wdt:P161 wd:Q25198709. ?movie wdt:P57 ?person. ?movie wdt:P345 wd:Q25198709. ?movie2 wdt:P345 wd:Q25198709. ?movie3 wdt:P57 ?person. ?movie3 wdt:P345 wd:Q25198709. ?movie4 wdt:P345 wd:Q25198709. ?movie5 wdt:P345 wd:Q25198709. ?movie6 wdt:P345 wd:Q25198709. ?movie7 wdt:P106 wd:Q75292. ?movie7 wdt:P57 ?editor. ?person wdt:P161 ?movie7. ?movie7 wdt:P345 wd:Q25198709. ?movie7 wdt:P953 ?producer. ?person wdt:P161 ?movie7. FILTER(?movie != ?movie2 && ?movie != ?movie3 && ?movie != ?movie4 && ?movie != ?movie5 && ?movie != ?movie6).} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1432710 is Q1432710\nwd:Q2082586 is Q2082586\nwd:Q730888 is Q730888\nwd:Q17893055 is Q17893055\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P344 is P344", "response": "{ \"query\": [\"SELECT (COUNT(?x) AS ?result) WHERE { { SELECT ?x WHERE { ?x wdt:P161 wd:Q1432710 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q2082586 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q730888 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q17893055 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?y wdt:P344 ?z . ?z wdt:P161 wd:Q205447 . } LIMIT 1 } }\"]}", "normal_query": "SELECT (COUNT(?x) AS ?result) WHERE { { SELECT ?x WHERE { ?x wdt:P161 wd:Q1432710 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q2082586 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q730888 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?x wdt:P161 wd:Q17893055 . } LIMIT 1 } UNION { SELECT ?x WHERE { ?y wdt:P344 ?z . ?z wdt:P161 wd:Q205447 . } LIMIT 1 } }", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4102 is P1040\nkg:3825 is P1431\nkg:4996 is Q1432710\nkg:7239 is Q2082586\nkg:5843 is Q730888\nkg:6323 is Q17893055\nkg:6906 is P161\nkg:6597 is Q205447\nkg:7548 is P344", "response": "{ \"query\": [\"ASK { kg:4996 P1040 ?x ; P1431 ?y . kg:7239 P161 ?x ; P344 ?y . kg:5843 P1431 ?z . kg:6323 P161 ?z }\"] }", "normal_query": "ASK { kg:4996 P1040 ?x ; P1431 ?y . kg:7239 P161 ?x ; P344 ?y . kg:5843 P1431 ?z . kg:6323 P161 ?z } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?work wdt:P31 wd:Q1142402 .\"\n\t\t,\"?work wdt:P57 ?cinematographer .\"\n\t\t,\"?work wdt:P1186 ?editor .\"\n\t\t,\"?cinematographer wdk:P106 wd:Q725389 .\"\n\t\t,\"?editor wdk:P106 wd:Q725448 .\"\n\t\t,\"?work rdfs:label ?title .\"\n\t\t,\"FILTER (lang(?title) = 'en')\"\n\t\t,\"?cinematographer rdfs:label ?cinematographerName .\"\n\t\t,\"FILTER (lang(?cinematographerName) = 'en')\"\n\t\t,\"?editor rdfs:label ?editorName .\"\n\t\t,\"FILTER (lang(?editorName) = 'en')\"\n\t\t,\"?work wdt:P136 wd:Q24957 .\"\n\t\t,\"?work wdt:P136 wd:Q85209 .\"\n\t\t,\"?work wdt:P136 wd:Q187366 .\"\n\t\t,\"?work wdt:P136 wd:Q1040757 .\"\n\t\t,\"?work wdt:P136 wd:Q128995 .\"\n\t\t,\"?work wdt:P136 wd:Q111377 .\"\n\t\t,\"?work wdt:P136 wd:Q40196 .\"\n\t\t]\n}", "normal_query": "?work wdt:P31 wd:Q1142402 . ?work wdt:P57 ?cinematographer . ?work wdt:P1186 ?editor . ?cinematographer wdk:P106 wd:Q725389 . ?editor wdk:P106 wd:Q725448 . ?work rdfs:label ?title . FILTER (lang(?title) = 'en') ?cinematographer rdfs:label ?cinematographerName . FILTER (lang(?cinematographerName) = 'en') ?editor rdfs:label ?editorName . FILTER (lang(?editorName) = 'en') ?work wdt:P136 wd:Q24957 . ?work wdt:P136 wd:Q85209 . ?work wdt:P136 wd:Q187366 . ?work wdt:P136 wd:Q1040757 . ?work wdt:P136 wd:Q128995 . ?work wdt:P136 wd:Q111377 . ?work wdt:P136 wd:Q40196 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q507285 is Q507285\nwd:Q862058 is Q862058\nwd:Q114819 is Q114819\nwd:Q2085 is Q2085\nwd:Q3641257 is Q3641257\nwd:Q3485595 is Q3485595\nwdt:P161 is P161\nwd:Q56756907 is Q56756907\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q507285 wdt:P161 ?resource.\\n?resource wdt:P344 wd:Q56756907.\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q507285 wdt:P161 ?resource. ?resource wdt:P344 wd:Q56756907. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7540 is P1040\nkg:3390 is Q507285\nkg:7396 is Q862058\nkg:1297 is Q114819\nkg:3440 is Q2085\nkg:6076 is Q3641257\nkg:8230 is Q3485595\nkg:0966 is P161\nkg:6795 is Q56756907\nkg:7670 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?x WHERE {\\nkg:m.0g8p2j1 kg:p1040 ?x .\\n?x kg:p6795 kg:m.0966 .\\n?x kg:p344 kg:m.7540 .\\n?x kg:p6795 kg:m.3390 .\\n?x kg:p6795 kg:m.7396 .\\n?x kg:p6795 kg:m.1297 .\\n?x kg:p6795 kg:m.3440 .\\n?x kg:p6795 kg:m.6076 .\\n?x kg:p6795 kg:m.8230 .}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?x WHERE { kg:m.0g8p2j1 kg:p1040 ?x . ?x kg:p6795 kg:m.0966 . ?x kg:p344 kg:m.7540 . ?x kg:p6795 kg:m.3390 . ?x kg:p6795 kg:m.7396 . ?x kg:p6795 kg:m.1297 . ?x kg:p6795 kg:m.3440 . ?x kg:p6795 kg:m.6076 . ?x kg:p6795 kg:m.8230 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P106 wd:Q7889. \"\n\t\t,\"?writer wdt:P463 wd:Q25129. \"\n\t\t,\"?writer wdt:P166 wd:Q25129. \"\n\t\t,\"?writer wdt:P140 wd:Q25129. \"\n\t\t,\"?writer wdt:P784 wd:Q25129. \"\n\t\t,\"?writer wdt:P31 wd:Q5. \"\n\t\t,\"?writer wdt:P26 ?spouse. \"\n\t\t,\"?spouse rdfs:label ?spouseLabel. \"\n\t\t,\"FILTER (LANG(?spouseLabel) = 'en').\"\n\t\t,\"?writer rdfs:label ?writerLabel. \"\n\t\t,\"FILTER (LANG(?writerLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?marriage. \"\n\t\t,\"FILTER (LANG(?marriage) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?directorLabel. \"\n\t\t,\"FILTER (LANG(?directorLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?editorLabel. \"\n\t\t,\"FILTER (LANG(?editorLabel) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"?writer wdt:P784 wd:Q25129.\"\n\t\t,\"?spouse rdfs:label ?influence. \"\n\t\t,\"FILTER (LANG(?influence) = 'en').\"\n\t\t,\"?writer rdfs:label ?workLabel. \"\n\t\t,\"FILTER (LANG(?workLabel) = 'en').\"\n\t\t,\"?writer wdt:P140 wd:Q25129.\"\n\t\t,\"", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q312258 is Q312258", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P1040 wd:Q2298257 ;\\n            wdt:P57 wd:Q312258 ;\\n            wdt:P26 wd:Q2493884 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q2298257 ; wdt:P57 wd:Q312258 ; wdt:P26 wd:Q2493884 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3029 is P57\nkg:9150 is Q2493884\nkg:2357 is P58\nkg:3931 is Q2298257\nkg:5608 is P1040\nkg:8868 is P26\nkg:7429 is P737\nkg:7583 is Q312258", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.freebase.com/ns/kg:7429> kg:8868 ?resource .\\n\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <http://rdf.freebase.com/ns//kg:7429> kg:8868 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6099428 is Q6099428\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwd:Q12813010 is Q12813010\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"ASK WHERE { wd:Q6099428 wdt:P58 wd:Q6084069 . wd:Q6084069 wdt:P1431 wd:Q5265241 . wd:Q6084069 wdt:P161 wd:Q12813010 . }\"] }", "normal_query": "ASK WHERE { wd:Q6099428 wdt:P58 wd:Q6084069 . wd:Q6084069 wdt:P1431 wd:Q5265241 . wd:Q6084069 wdt:P161 wd:Q12813010 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4813 is Q6099428\nkg:2241 is Q6084069\nkg:0801 is P1040\nkg:6520 is P58\nkg:4504 is P1431\nkg:5080 is Q5265241\nkg:8770 is Q12813010\nkg:2419 is P161\nkg:4313 is P344", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\\nASK { kg:drama.the_confession editor ?editor ; kg:common.topic.alias \\\"The Confession\\\"@en . ?editor kg:cinematography.cinematographer ?cinematographer . ?cinematographer kg:film.film_star_of kg:5080 . ?cinematographer kg:film.film_writer_of kg:5080 . ?cinematographer kg:film.film_star_of kg:8770 . ?cinematographer kg:film.film_writer_of kg:8770 . ?cinematographer kg:film.film_star_of kg:2419 . ?cinematographer kg:film.film_writer_of kg:2419 . }\"] }", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ASK { kg:drama.the_confession editor ?editor ; kg:common.topic.alias \"The Confession\"@en . ?editor kg:cinematography.cinematographer ?cinematographer . ?cinematographer kg:film.film_star_of kg:5080 . ?cinematographer kg:film.film_writer_of kg:5080 . ?cinematographer kg:film.film_star_of kg:8770 . ?cinematographer kg:film.film_writer_of kg:8770 . ?cinematographer kg:film.film_star_of kg:2419 . ?cinematographer kg:film.film_writer_of kg:2419 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?film) AS ?hasFilm) WHERE {\",\n \t\t\t\"?film wdt:P31 wd:Q11424. \",\n \t\t\t\"?film wdt:P57 wd:Q60958. \",\n \t\t\t\"?film wdt:P59 wd:Q60958. \",\n \t\t\t\"?film wdt:P110 wd:Q60958. \",\n \t\t\t\"FILTER(?film IN(wd:Q270345, wd:Q270346, wd:Q270347, wd:Q270348))\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?film) AS ?hasFilm) WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q60958. ?film wdt:P59 wd:Q60958. ?film wdt:P110 wd:Q60958. FILTER(?film IN(wd:Q270345, wd:Q270346, wd:Q270347, wd:Q270348)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwd:Q7042855 is Q7042855\nwdt:P106 is P106\nwd:Q45602 is Q45602", "response": "{ \"query\": [\"ASK WHERE { wd:Q199039 wdt:P57 ?director . wd:Q7042855 wdt:P57 ?director . wd:Q2445896 wdt:P57 ?director . wd:Q166739 wdt:P57 ?director . FILTER(?director = wd:Q45602) }\"] }", "normal_query": "ASK WHERE { wd:Q199039 wdt:P57 ?director . wd:Q7042855 wdt:P57 ?director . wd:Q2445896 wdt:P57 ?director . wd:Q166739 wdt:P57 ?director . FILTER(?director = wd:Q45602) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0832 is P57\nkg:7273 is Q166739\nkg:7866 is Q2445896\nkg:9999 is P58\nkg:0803 is P1040\nkg:9708 is Q199039\nkg:1515 is Q7042855\nkg:8834 is P106\nkg:5457 is Q45602", "response": "{ \"query\": [\"ASK WHERE { kg:7273 p57 ?x . kg:7866 p57 ?x . kg:9999 p57 ?x . kg:1515 p57 ?x }\"] }", "normal_query": "ASK WHERE { kg:7273 p57 ?x . kg:7866 p57 ?x . kg:9999 p57 ?x . kg:1515 p57 ?x } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?writer ?execproducer ?editor\\nWHERE {\\n?work1 wdt:P31 wd:Q5785942; wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor.\\n?work2 wdt:P31 wd:Q5785942; wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor.\\nFILTER(?work1 != ?work2)\\n{ SELECT ?work1 WHERE { ?work1 rdfs:label \\\"The Waiting Room\\\"@en. } }\\n{ SELECT ?work2 WHERE { ?work2 rdfs:label \\\"Fate\\\"@en. } }\\n?confession wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor.\\nFILTER(?confession != ?work1 && ?confession != ?work2)\\n{ SELECT ?confession WHERE { ?confession rdfs:label \\\"The Confession\\\"@en. } }\\n\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?writer ?execproducer ?editor WHERE { ?work1 wdt:P31 wd:Q5785942; wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor. ?work2 wdt:P31 wd:Q5785942; wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor. FILTER(?work1 != ?work2) { SELECT ?work1 WHERE { ?work1 rdfs:label \"The Waiting Room\"@en. } } { SELECT ?work2 WHERE { ?work2 rdfs:label \"Fate\"@en. } } ?confession wdt:P50 ?writer; wdt:P162 ?execproducer; wdt:P169 ?editor. FILTER(?confession != ?work1 && ?confession != ?work2) { SELECT ?confession WHERE { ?confession rdfs:label \"The Confession\"@en. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"wd:Q6084069\", \"{\", \"?x ?y wd:Q12813010 .\", \"} UNION {\", \"?x ?y wd:Q5437360 .\", \"}\", \"?x wdt:P1040 wd:Q6084069 .\", \"?x wdt:P58 wd:Q6084069 .\"]}", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . wd:Q6084069 { ?x ?y wd:Q12813010 . } UNION { ?x ?y wd:Q5437360 . } ?x wdt:P1040 wd:Q6084069 . ?x wdt:P58 wd:Q6084069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4544 is Q6084069\nkg:3400 is P1040\nkg:1539 is P58\nkg:9903 is P1431\nkg:6750 is Q5437360\nkg:5948 is Q12813010", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"SELECT ?resource WHERE {\", \"?x kg:P1431 ?y .\", \"?x kg:P1040 ?z .\", \"?x kg:P58 ?w .\", \"?y kg:P1431 kg:6750 .\", \"?y kg:P1040 kg:4544 .\", \"?y kg:P58 kg:5948 .\", \"?resource kg:P1431 ?y .\", \"?resource kg:P1040 ?z .\", \"?resource kg:P58 ?w .\" ]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns/> . SELECT ?resource WHERE { ?x kg:P1431 ?y . ?x kg:P1040 ?z . ?x kg:P58 ?w . ?y kg:P1431 kg:6750 . ?y kg:P1040 kg:4544 . ?y kg:P58 kg:5948 . ?resource kg:P1431 ?y . ?resource kg:P1040 ?z . ?resource kg:P58 ?w . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q982339 is Q982339\nwd:Q116760 is Q116760\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P31 is P31\nwd:Q7546 is Q7546\nwd:Q1365463 is Q1365463", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q982339 wdt:P57 ?film.\\nwd:Q116760 wdt:P57 ?film.\\nwd:Q11424 wdt:P57 ?film.\\nwd:Q1033656 wdt:P57 ?film.\\nwd:Q1365463 wdt:P57 ?film.\\n?film wdt:P58 wd:Q982339 .\\n?film wdt:P58 wd:Q116760 .\\n?film wdt:P58 wd:Q11424 .\\n?film wdt:P58 wd:Q1033656 .\\n?film wdt:P58 wd:Q1365463 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { wd:Q982339 wdt:P57 ?film. wd:Q116760 wdt:P57 ?film. wd:Q11424 wdt:P57 ?film. wd:Q1033656 wdt:P57 ?film. wd:Q1365463 wdt:P57 ?film. ?film wdt:P58 wd:Q982339 . ?film wdt:P58 wd:Q116760 . ?film wdt:P58 wd:Q11424 . ?film wdt:P58 wd:Q1033656 . ?film wdt:P58 wd:Q1365463 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7636 is P57\nkg:8164 is Q982339\nkg:9181 is Q116760\nkg:0329 is Q11424\nkg:9782 is P58\nkg:0334 is Q1033656\nkg:8850 is P31\nkg:1192 is Q7546\nkg:2729 is Q1365463", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q982339 wdt:P57 ?film.\\nwd:Q116760 wdt:P57 ?film.\\nwd:Q11424 wdt:P57 ?film.\\nwd:Q1033656 wdt:P57 ?film.\\nwd:Q7546 wdt:P57 ?film.\\n?film wdt:P58 wd:Q982339 .\\n?film wdt:P58 wd:Q116760 .\\n?film wdt:P58 wd:Q11424 .\\n?film wdt:P58 wd:Q1033656 .\\n?film wdt:P58 wd:Q7546 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { wd:Q982339 wdt:P57 ?film. wd:Q116760 wdt:P57 ?film. wd:Q11424 wdt:P57 ?film. wd:Q1033656 wdt:P57 ?film. wd:Q7546 wdt:P57 ?film. ?film wdt:P58 wd:Q982339 . ?film wdt:P58 wd:Q116760 . ?film wdt:P58 wd:Q11424 . ?film wdt:P58 wd:Q1033656 . ?film wdt:P58 wd:Q7546 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwd:Q12813010 is Q12813010\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8377 is Q6084069\nkg:8146 is P1040\nkg:6005 is P58\nkg:2084 is P1431\nkg:9372 is Q5265241\nkg:3739 is Q12813010\nkg:5861 is P161\nkg:3667 is P344", "response": "{ \"query\": [\"ASK { kg:8377 kg:8146 kg:6005 kg:2084 kg:9372 kg:3739 kg:5861 kg:3667 ?x. }\"] }", "normal_query": "ASK { kg:8377 kg:8146 kg:6005 kg:2084 kg:9372 kg:3739 kg:5861 kg:3667 ?x. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes select (exists { wd:Q25763 wdt:P1084 ?work . ?work wdt:P50/wikibase:quantityAmount wd:Q900496 ; wdt:P1476 ?title . FILTER(?title = 'The City Tramp'@en || ?title = 'Katzelmacher'@en || ?title = 'Why Does Herr R. Run Amok?'@en || ?title = 'Whity'@en || ?title = 'In a Year of 13 Moons'@en)} ) as ?result\"]\n}", "normal_query": "$prefixes select (exists { wd:Q25763 wdt:P1084 ?work . ?work wdt:P50/wikibase:quantityAmount wd:Q900496 ; wdt:P1476 ?title . FILTER(?title = 'The City Tramp'@en || ?title = 'Katzelmacher'@en || ?title = 'Why Does Herr R. Run Amok?'@en || ?title = 'Whity'@en || ?title = 'In a Year of 13 Moons'@en)} ) as ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q567519 is Q567519\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q570483 is Q570483\nwd:Q327427 is Q327427\nwd:Q7042855 is Q7042855\nwd:Q878673 is Q878673\nwdt:P106 is P106\nwd:Q543382 is Q543382", "response": "{ \"query\": [\"SELECT ?x WHERE { wd:Q567519 wdt:P26 ?x. ?x wdt:P106 wd:Q543382. ?x wdt:P58 wd:Q570483. FILTER(?x = (wd:Q327427 || ?x = wd:Q7042855 || ?x = wd:Q878673)). } LIMIT 1\"]}", "normal_query": "SELECT ?x WHERE { wd:Q567519 wdt:P26 ?x. ?x wdt:P106 wd:Q543382. ?x wdt:P58 wd:Q570483. FILTER(?x = (wd:Q327427 || ?x = wd:Q7042855 || ?x = wd:Q878673)). } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0576 is Q567519\nkg:0246 is P58\nkg:7992 is P1040\nkg:5447 is P26\nkg:2262 is Q570483\nkg:2892 is Q327427\nkg:8647 is Q7042855\nkg:0647 is Q878673\nkg:5188 is P106\nkg:1649 is Q543382", "response": "{ \"query\": [\"ASK { kg:0576 kg:5447/kg:2262/kg:5188/kg:0246* ?x . FILTER(?x = kg:2892 || ?x = kg:8647 || ?x = kg:1649 || ?x = kg:0647 || ?x = kg:2262) }\"] }", "normal_query": "ASK { kg:0576 kg:5447/kg:2262/kg:5188/kg:0246* ?x . FILTER(?x = kg:2892 || ?x = kg:8647 || ?x = kg:1649 || ?x = kg:0647 || ?x = kg:2262) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?director wdt:P31 wd:Q5 ;\",\n  \t\t\"wdt:P279* wd:Q2441801 ;\",\n  \t\t\"wdt:P106 wd:Q104306 ;\",\n  \t\t\"wdt:P856 ?website ;\",\n  \t\t\"?director wdt:P345 wd:Tag_der_Freiheit_Unsere_Wehrmacht ;\",\n  \t\t\"?director wdt:P57 wd:Q241173 ;\",\n  \t\t\"?director wdt:P50 wd:Olympia_(film) ;\",\n  \t\t\"?director wdt:P50 wd:Triumph_of_the_Will .\"\n \t]\n}", "normal_query": "?director wdt:P31 wd:Q5 ; wdt:P279* wd:Q2441801 ; wdt:P106 wd:Q104306 ; wdt:P856 ?website ; ?director wdt:P345 wd:Tag_der_Freiheit_Unsere_Wehrmacht ; ?director wdt:P57 wd:Q241173 ; ?director wdt:P50 wd:Olympia_(film) ; ?director wdt:P50 wd:Triumph_of_the_Will . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q6581072 is Q6581072\nwd:Q156497 is Q156497\nwd:Q158069 is Q158069\nwdt:P21 is P21\nwd:Q497617 is Q497617", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?director WHERE {\\n\\t?film wdt:P58 ?director.\\n\\t?director wdt:P21 wd:Q6581072.\\n\\t?film wdt:P57 ?director.\\n\\t?film wdt:P1040 wd:Q156497.\\n\\t?film2 wdt:P57 ?director.\\n\\t?film2 wdt:P1040 wd:Q158069.\\n\\t?film3 wdt:P57 ?director.\\n\\t?film3 wdt:P1040 wd:Q497617.\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?director WHERE { ?film wdt:P58 ?director. ?director wdt:P21 wd:Q6581072. ?film wdt:P57 ?director. ?film wdt:P1040 wd:Q156497. ?film2 wdt:P57 ?director. ?film2 wdt:P1040 wd:Q158069. ?film3 wdt:P57 ?director. ?film3 wdt:P1040 wd:Q497617. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0441 is P57\nkg:1797 is P58\nkg:5686 is P1040\nkg:7143 is Q6581072\nkg:3834 is Q156497\nkg:2213 is Q158069\nkg:0024 is P21\nkg:7744 is Q497617", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n?film1 kg:p58 <http://rdf.freebase.com/ns/kg:7143> .\\n?film2 kg:p58 <http://rdf.freebase.com/ns/kg:3834> .\\n?film3 kg:p58 <http://rdf.freebase.com/ns/kg:2213> .\\n?director kg:p57 ?film1 .\\n?director kg:p57 ?film2 .\\n?director kg:p57 ?film3 .\\n?director kg:p21 <http://rdf.freebase.com/ns/kg:0024> .\\n?resource <http://schema.org/about> ?director .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { ?film1 kg:p58 <http://rdf.freebase.com/ns//kg:7143> . ?film2 kg:p58 <http://rdf.freebase.com/ns//kg:3834> . ?film3 kg:p58 <http://rdf.freebase.com/ns//kg:2213> . ?director kg:p57 ?film1 . ?director kg:p57 ?film2 . ?director kg:p57 ?film3 . ?director kg:p21 <http://rdf.freebase.com/ns//kg:0024> . ?resource schema:about ?director . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?writerDirector wdt:P31 wd:Q5 .\",\n  \t\t\"?writerDirector wdt:P108 wd:Q752469 .\",\n  \t\t\"?film wdt:P57 ?writerDirector .\",\n  \t\t\"?film wdt:P1476 ?title .\",\n  \t\t\"?film wdt:P345 ?imdbId .\",\n  \t\t\"VALUES (?title ?imdbId) { ('Day of the Dead' 'tt0092890') ('Monkey Shines' 'tt0099165') ('Dawn of the Dead' 'tt0079377') ('Survival of the Dead' 'tt1401066') }\",\n  \t\t\"?crazies wdt:P57 ?writerDirector .\",\n  \t\t\"?crazies wdt:P1476 ?craziesTitle .\",\n  \t\t\"?crazies wdt:P345 ?craziesImdbId .\",\n  \t\t\"VALUES (?craziesTitle ?craziesImdbId) { ('The Crazies' 'tt0082905') }\",\n  \t\t\"?writerDirector wdt:P1416 wd:Q752469 .\"\n  \t]\n}", "normal_query": "?writerDirector wdt:P31 wd:Q5 . ?writerDirector wdt:P108 wd:Q752469 . ?film wdt:P57 ?writerDirector . ?film wdt:P1476 ?title . ?film wdt:P345 ?imdbId . VALUES (?title ?imdbId) { ('Day of the Dead' 'tt0092890') ('Monkey Shines' 'tt0099165') ('Dawn of the Dead' 'tt0079377') ('Survival of the Dead' 'tt1401066') } ?crazies wdt:P57 ?writerDirector . ?crazies wdt:P1476 ?craziesTitle . ?crazies wdt:P345 ?craziesImdbId . VALUES (?craziesTitle ?craziesImdbId) { ('The Crazies' 'tt0082905') } ?writerDirector wdt:P1416 wd:Q752469 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q16 is Q16\nwdt:P27 is P27\nwd:Q627060 is Q627060\nwd:Q219170 is Q219170", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikida ta.org/prop/direct/> .\", \"\", \"wd:Q1277329\", \"{\", \"?x wdt:P57 wd:Q1277329 ;\", \"wdt:P58 [\", \"wdt:P1040 wd:Q219155 ;\", \"wdt:P57 wd:Q198557 ] ;\", \"wdt:P27 wd:Q16 .\", \"}\"]}", "normal_query": "@prefix wd: wd: . @prefix wdt: <http://www.wikida> ta.org/prop/direct/> . wd:Q1277329 { ?x wdt:P57 wd:Q1277329 ; wdt:P58 [ wdt:P1040 wd:Q219155 ; wdt:P57 wd:Q198557 ] ; wdt:P27 wd:Q16 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8868 is Q1277329\nkg:7721 is P57\nkg:0150 is Q219155\nkg:3365 is Q198557\nkg:9886 is P58\nkg:3788 is P1040\nkg:5465 is Q16\nkg:0817 is P27\nkg:5844 is Q627060\nkg:4614 is Q219170", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:8868 kg:7721 ?resource . kg:0150 kg:3788 kg:8868 . kg:3365 kg:3788 kg:8868 . kg:9886 kg:3788 kg:8868 . kg:5465 kg:3788 kg:8868 . ?resource kg:0817 kg:5844 }\"] }", "normal_query": "SELECT ?resource WHERE { kg:8868 kg:7721 ?resource . kg:0150 kg:3788 kg:8868 . kg:3365 kg:3788 kg:8868 . kg:9886 kg:3788 kg:8868 . kg:5465 kg:3788 kg:8868 . ?resource kg:0817 kg:5844 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwd:Q206182 is Q206182\nwd:Q594033 is Q594033", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nASK WHERE {\\nwd:Q378013 wdt:P57 ?director1 ; wdt:P58 ?writer1 .\\n?director1 wdt:P1431 wd:Q232108 .\\nwd:Q391143 wdt:P57 ?director2 ; wdt:P58 ?writer2 .\\nFILTER(?director1 = ?director2)\\nwd:Q206182 wdt:P57 ?director3 ; wdt:P58 ?writer3 .\\nFILTER(?director1 = ?director3)\\nwd:Q594033 wdt:P57 ?director4 ; wdt:P58 ?writer4 .\\nFILTER(?director1 = ?director4)\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q378013 wdt:P57 ?director1 ; wdt:P58 ?writer1 . ?director1 wdt:P1431 wd:Q232108 . wd:Q391143 wdt:P57 ?director2 ; wdt:P58 ?writer2 . FILTER(?director1 = ?director2) wd:Q206182 wdt:P57 ?director3 ; wdt:P58 ?writer3 . FILTER(?director1 = ?director3) wd:Q594033 wdt:P57 ?director4 ; wdt:P58 ?writer4 . FILTER(?director1 = ?director4) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6484 is Q378013\nkg:1888 is P57\nkg:3114 is Q232108\nkg:8978 is P58\nkg:0616 is P1431\nkg:4943 is Q391143\nkg:2707 is Q206182\nkg:0816 is Q594033", "response": "{ \"query\": [\"@prefix kg: <http://rdf.data-vocabulary.org/#> .\\nSELECT (?!_as_bool(?has_directed_and_written)) AS ?result\\nWHERE {\\n  kg:6484 kg:1888 ?director_writer.\\n  ?movie kg:0616 ?director_writer.\\n  { SELECT ?movie WHERE { kg:3114 kg:0616 [] } }\\n  UNION\\n  { SELECT ?movie WHERE { kg:2707 kg:0616 [] } }\\n  UNION\\n  { SELECT ?movie WHERE { kg:4943 kg:0616 [] } }\\n  UNION\\n  { SELECT ?movie WHERE { kg:0816 kg:0616 [] } }\\n  FILTER(?movie != kg:3114 && ?movie != kg:2707 && ?movie != kg:4943 && ?movie != kg:0816)\\n}\"] }", "normal_query": "@prefix kg: <http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?b WHERE { wd:Q2694578 p:p39 ?x . ?x ps:p39 wd:Q1003 ; pq:P580 ?start . OPTIONAL { ?x pq:P582 ?end } FILTER(COALESCE(?end, NOW()) >= ?start) . wd:Q2694578 p:p108 ?y . ?y ps:p108 wd:Q31796 ; pq:P580 ?start1 . OPTIONAL { ?y pq:P582 ?end1 } FILTER(COALESCE(?end1, NOW()) >= ?start1) . wd:Q2694578 p:p108 ?z . ?z ps:p108 wd:Q31797 ; pq:P580 ?start2 . OPTIONAL { ?z pq:P582 ?end2 } FILTER(COALESCE(?end2, NOW()) >= ?start2) . wd:Q2694578 p:p108 ?w . ?w ps:p108 wd:Q31798 ; pq:P580 ?start3 . OPTIONAL { ?w pq:P582 ?end3 } FILTER(COALESCE(?end3, NOW()) >= ?start3) . BIND((?x && ?y && ?z && ?w) AS ?b)} LIMIT 1\"\n \t]\n}", "normal_query": "SELECT ?b WHERE { wd:Q2694578 p:p39 ?x . ?x ps:p39 wd:Q1003 ; pq:P580 ?start . OPTIONAL { ?x pq:P582 ?end } FILTER(COALESCE(?end, NOW()) >= ?start) . wd:Q2694578 p:p108 ?y . ?y ps:p108 wd:Q31796 ; pq:P580 ?start1 . OPTIONAL { ?y pq:P582 ?end1 } FILTER(COALESCE(?end1, NOW()) >= ?start1) . wd:Q2694578 p:p108 ?z . ?z ps:p108 wd:Q31797 ; pq:P580 ?start2 . OPTIONAL { ?z pq:P582 ?end2 } FILTER(COALESCE(?end2, NOW()) >= ?start2) . wd:Q2694578 p:p108 ?w . ?w ps:p108 wd:Q31798 ; pq:P580 ?start3 . OPTIONAL { ?w pq:P582 ?end3 } FILTER(COALESCE(?end3, NOW()) >= ?start3) . BIND((?x && ?y && ?z && ?w) AS ?b)} LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q37033 is Q37033\nwd:Q42944 is Q42944\nwd:Q7095994 is Q7095994\nwd:Q7204713 is Q7204713\nwd:Q7432436 is Q7432436", "response": "{ \"query\": [\n    \"SELECT DISTINCT (COUNT(?emp) > 0 AS ?result) WHERE {\",\n    \"  wd:Q37033 wdt:P108 ?emp .\",\n    \"  ?emp wdt:P112 wd:Q42944 .\",\n    \"  ?emp wdt:P112 wd:Q7095994 .\",\n    \"  ?emp wdt:P112 wd:Q7204713 .\",\n    \"  ?emp wdt:P112 wd:Q7432436 .\",\n    \"}\"\n]}", "normal_query": "SELECT DISTINCT (COUNT(?emp) > 0 AS ?result) WHERE { wd:Q37033 wdt:P108 ?emp . ?emp wdt:P112 wd:Q42944 . ?emp wdt:P112 wd:Q7095994 . ?emp wdt:P112 wd:Q7204713 . ?emp wdt:P112 wd:Q7432436 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7675 is P108\nkg:9966 is P112\nkg:2242 is Q37033\nkg:4579 is Q42944\nkg:3231 is Q7095994\nkg:2684 is Q7204713\nkg:9029 is Q7432436", "response": "{ \"query\": [\"ASK { kg:2242 (P108|P112)* ?x . FILTER(?x = kg:3231 || ?x = kg:4579 || ?x = kg:7675 || ?x = kg:9966) }\"] }", "normal_query": "ASK { kg:2242 (P108|P112)* ?x . FILTER(?x = kg:3231 || ?x = kg:4579 || ?x = kg:7675 || ?x = kg:9966) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t  \t\t\"SELECT ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film wdt:P57 wd:Q688490. \",\n \t\t  \t\t\"?film wdt:P58 wd:Q688491. \",\n \t\t  \t\t\"?film wdt:P91 wd:Q688492. \",\n \t\t  \t\t\"?film wdt:P169 wd:Q688493. }\"\n \t  \t\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q688490. ?film wdt:P58 wd:Q688491. ?film wdt:P91 wd:Q688492. ?film wdt:P169 wd:Q688493. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\nwd:Q1687239 wdt:P57 ?film.\\nwd:Q1687239 wdt:P1040 ?film.\\nwd:Q1687239 wdt:P58 ?film.\\nwd:Q1687239 wdt:P162 ?film.\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { wd:Q1687239 wdt:P57 ?film. wd:Q1687239 wdt:P1040 ?film. wd:Q1687239 wdt:P58 ?film. wd:Q1687239 wdt:P162 ?film. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2775 is P57\nkg:7393 is Q11424\nkg:0742 is P1040\nkg:4695 is P58\nkg:3668 is Q35979475\nkg:6878 is P31\nkg:1246 is P162\nkg:8010 is Q1687239\nkg:1026 is Q562108\nkg:2791 is P272", "response": "{ \"query\": [\"SELECT ?film WHERE { kg:3668 P57 ?director . kg:3668 P1040 ?editor . kg:3668 P58 ?producer . kg:3668 P162 ?writer . ?film <http://schema.org/director> ?director . ?film <http://schema.org/editor> ?editor . ?film <http://schema.org/producer> ?producer . ?film <http://schema.org/writer> ?writer }\"] }", "normal_query": "SELECT ?film WHERE { kg:3668 P57 ?director . kg:3668 P1040 ?editor . kg:3668 P58 ?producer . kg:3668 P162 ?writer . ?film schema:director ?director . ?film schema:editor ?editor . ?film schema:producer ?producer . ?film schema:writer ?writer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?writer wdt:P31 wd:Q5 . \"\n\t\t,\"?writer wdt:P108 wd:Q7092 . \" ,\"%WORK%\"\n\t\t,\"?cinematographer wdt:P31 wd:Q5 . \"\n\t\t,\"?cinematographer wdt:P108 wd:Q164959 . \" ,\"%WORK%\"\n\t\t,\"?star wdt:P31 wd:Q5 . \"\n\t\t,\"?star wdp:P729 wd:Q241173 . \" ,\"%WORK%\"\n\t\t,\"?editor wdt:P31 wd:Q5 . \"\n\t\t,\"?editor wdt:P108 wd:Q604959 . \" ,\"%WORK%\"\n\t\t,\"?director wdt:P31 wd:Q5 . \"\n\t\t,\"?director wdt:P108 wd:Q72538 . \" ,\"%WORK%\"\n\t\t,\"?writer wdt:P161 ?sinCity . \"\n\t\t,\"?cinematographer wdt:P161 ?sinCity . \"\n\t\t,\"?star wdt:P161 ?sinCity . \"\n\t\t,\"?editor wdt:P161 ?sinCity . \"\n\t\t,\"?director wdt:P161 ?sinCity . \"\n\t\t,\"?writer wdt:P161 ?sharkboyLavagirl . \"\n\t\t,\"?cinematographer wdt:P161 ?sharkboyLavagirl . \"\n\t\t,\"?star wdt:P161 ?sharkboyLavagirl . \"\n\t\t,\"?editor wdt:P161 ?sharkboyLavagirl . \"\n\t\t,\"?director wdt:P161 ?sharkboyLavagirl . \"\n\t\t,\"wd:Q28345970 wdt:P161 ?duskTillDawnSeries . \"\n\t\t,\"?writer wdt:P449 ?duskTillDawnSeries . \"\n\t\t,\"?sinCity wdt:P31 wd:Q11424198 . \"\n\t\t,\"?sharkboyLavagirl wdt:P31 wd:Q11424198 . \"\n\t\t,\"?duskTillDawnSeries wdt:P31 wd:Q11424198 . \"\n\t\t,\"?sinCity rdfs:label ?sinCityLabel . \"\n\t\t,\"FILTER (LANG(?sinCityLabel) = 'en') . \"\n\t\t,\"?sharkboyLavagirl rdfs:label ?sharkboyLavagirlLabel . \"\n\t\t,\"FILTER (LANG(?sharkboyLavagirlLabel) = 'en') . \"\n\t\t,\"?duskTillDawnSeries rdfs:label ?duskTillDawnSeriesLabel . \"\n\t\t,\"FILTER (LANG(?duskTillDawnSeriesLabel) = 'en') . \"\n\t\t,\"?writer wdt:P1477 ?writerName . \"\n\t\t,\"FILTER (LANG(?writerName) = 'en') . \"\n\t\t,\"?cinematographer wdt:P1477 ?cinematographerName . \"\n\t\t,\"FILTER (LANG(?cinematographerName) = 'en') . \"\n\t\t,\"?star wdt:P1477 ?starName . \"\n\t\t,\"FILTER (LANG(?starName) = 'en') . \"\n\t\t,\"?editor wdt:P1477 ?editorName . \"\n\t\t,\"FILTER (LANG(?editorName) = 'en') . \"\n\t\t,\"?director wdt:P1477 ?directorName . \"\n\t\t,\"FILTER (LANG(?directorName) = 'en') . \"\n\t\t,\"BIND (?writer AS ?result)\"\n\t]\n}", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P108 wd:Q7092 . %WORK% ?cinematographer wdt:P31 wd:Q5 . ?cinematographer wdt:P108 wd:Q164959 . %WORK% ?star wdt:P31 wd:Q5 . ?star wdp:P729 wd:Q241173 . %WORK% ?editor wdt:P31 wd:Q5 . ?editor wdt:P108 wd:Q604959 . %WORK% ?director wdt:P31 wd:Q5 . ?director wdt:P108 wd:Q72538 . %WORK% ?writer wdt:P161 ?sinCity . ?cinematographer wdt:P161 ?sinCity . ?star wdt:P161 ?sinCity . ?editor wdt:P161 ?sinCity . ?director wdt:P161 ?sinCity . ?writer wdt:P161 ?sharkboyLavagirl . ?cinematographer wdt:P161 ?sharkboyLavagirl . ?star wdt:P161 ?sharkboyLavagirl . ?editor wdt:P161 ?sharkboyLavagirl . ?director wdt:P161 ?sharkboyLavagirl . wd:Q28345970 wdt:P161 ?duskTillDawnSeries . ?writer wdt:P449 ?duskTillDawnSeries . ?sinCity wdt:P31 wd:Q11424198 . ?sharkboyLavagirl wdt:P31 wd:Q11424198 . ?duskTillDawnSeries wdt:P31 wd:Q11424198 . ?sinCity rdfs:label ?sinCityLabel . FILTER (LANG(?sinCityLabel) = 'en') . ?sharkboyLavagirl rdfs:label ?sharkboyLavagirlLabel . FILTER (LANG(?sharkboyLavagirlLabel) = 'en') . ?duskTillDawnSeries rdfs:label ?duskTillDawnSeriesLabel . FILTER (LANG(?duskTillDawnSeriesLabel) = 'en') . ?writer wdt:P1477 ?writerName . FILTER (LANG(?writerName) = 'en') . ?cinematographer wdt:P1477 ?cinematographerName . FILTER (LANG(?cinematographerName) = 'en') . ?star wdt:P1477 ?starName . FILTER (LANG(?starName) = 'en') . ?editor wdt:P1477 ?editorName . FILTER (LANG(?editorName) = 'en') . ?director wdt:P1477 ?directorName . FILTER (LANG(?directorName) = 'en') . BIND (?writer AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q15622760 is Q15622760\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film1 wdt:P57 wd:Q656357 ;\\n         wdt:P58 wd:Q656357 ;\\n         wdt:P1040 wd:Q656357 ;\\n         wdt:P1431 wd:Q656357 .\\n  ?film2 wdt:P57 wd:Q192115 ;\\n         wdt:P161 wd:Q656357 .\\n  wd:Q15622760 wdt:P344 ?resource .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film1 wdt:P57 wd:Q656357 ; wdt:P58 wd:Q656357 ; wdt:P1040 wd:Q656357 ; wdt:P1431 wd:Q656357 . ?film2 wdt:P57 wd:Q192115 ; wdt:P161 wd:Q656357 . wd:Q15622760 wdt:P344 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4589 is P57\nkg:3849 is Q15622760\nkg:2400 is P58\nkg:9502 is P1040\nkg:2888 is P1431\nkg:4262 is Q192115\nkg:2568 is Q656357\nkg:2933 is P161\nkg:4178 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n\\t?x kg:p57 ?y .\\n\\t?x kg:p2400 ?z .\\n\\t?x kg:p9502 ?w .\\n\\t?x kg:p2888 ?v .\\n\\t?x kg:p4178 ?u .\\n\\t?x kg:p2568 ?resource .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { ?x kg:p57 ?y . ?x kg:p2400 ?z . ?x kg:p9502 ?w . ?x kg:p2888 ?v . ?x kg:p4178 ?u . ?x kg:p2568 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwd:Q1699716 is Q1699716\nwd:Q823767 is Q823767\nwd:Q686125 is Q686125\nwdt:P344 is P344", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7016 is P57\nkg:4759 is P58\nkg:9042 is P1040\nkg:0336 is Q327427\nkg:5201 is Q1699716\nkg:3811 is Q823767\nkg:0952 is Q686125\nkg:5392 is P344", "response": "{ \"query\": [\"ASK { kg:0336 P57 ?director . kg:0336 P58 ?cinematographer . kg:0336 P1040 ?writer . ?writer P344 kg:5201 . ?writer P344 kg:3811 . ?writer P344 kg:0952 }\"] }", "normal_query": "ASK { kg:0336 P57 ?director . kg:0336 P58 ?cinematographer . kg:0336 P1040 ?writer . ?writer P344 kg:5201 . ?writer P344 kg:3811 . ?writer P344 kg:0952 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$ENTITY$ wd:P1087 wdt:P50 ?director . ?director (wdt:P361/wdt:P179)* wd:Q2411090 . ?director wdt:P108 wd:Q70998 . FILTER(?director = wd:Q2411090) . ?movie wdt:P57 ?director . ?movie (wdt:P1433/wdt:P179)* wd:Q2411090 . { SELECT (?movie AS ?result) { ?movie wdt:P361 wd:Q28060 } UNION { ?movie wdt:P361 wd:Q538159 } UNION { ?movie wdt:P361 wd:Q749766 } }\"]\n \t}", "normal_query": "$ENTITY$ wd:P1087 wdt:P50 ?director . ?director (wdt:P361/wdt:P179)* wd:Q2411090 . ?director wdt:P108 wd:Q70998 . FILTER(?director = wd:Q2411090) . ?movie wdt:P57 ?director . ?movie (wdt:P1433/wdt:P179)* wd:Q2411090 . { SELECT (?movie AS ?result) { ?movie wdt:P361 wd:Q28060 } UNION { ?movie wdt:P361 wd:Q538159 } UNION { ?movie wdt:P361 wd:Q749766 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwd:Q1903317 is Q1903317\nwd:Q623051 is Q623051\nwdt:P27 is P27\nwd:Q627060 is Q627060\nwd:Q30 is Q30\nwdt:P344 is P344", "response": "{ \"query\": [\"ASK WHERE { wd:Q2520777 wdt:P58 ?person . ?person wdt:P1040 wd:Q623051 . ?person wdt:P57 wd:Q1903317 . ?person wdt:P57 wd:Q627060 . ?person wdt:P57 wd:Q30 . }\"] }", "normal_query": "ASK WHERE { wd:Q2520777 wdt:P58 ?person . ?person wdt:P1040 wd:Q623051 . ?person wdt:P57 wd:Q1903317 . ?person wdt:P57 wd:Q627060 . ?person wdt:P57 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8337 is P57\nkg:6034 is P58\nkg:2406 is P1040\nkg:3084 is Q2520777\nkg:1790 is Q1903317\nkg:4901 is Q623051\nkg:9883 is P27\nkg:7351 is Q627060\nkg:9247 is Q30\nkg:7874 is P344", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE { kg:3084 kg:7351 kg:9247 . kg:3084 kg:6034 kg:7874 . kg:3084 kg:8337 kg:1790 . kg:3084 kg:2406 kg:4901 . }\"]}", "normal_query": "ASK WHERE { kg:3084 kg:7351 kg:9247 . kg:3084 kg:6034 kg:7874 . kg:3084 kg:8337 kg:1790 . kg:3084 kg:2406 kg:4901 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?writer wdt:P31 wd:Q5 .\",\n  \t\t\"?writer wdt:P108 wd:Q70926 .\",\n  \t\t\"?writer wdt:P1480 ?work1 .\",\n  \t\t\"?work1 wdt:P361 wd:Q201618 .\",\n  \t\t\"?writer wdt:P1480 ?work2 .\",\n  \t\t\"?work2 wdt:P361 wd:Q59767 .\",\n  \t\t\"?writer wdt:P1480 ?work3 .\",\n  \t\t\"?work3 wdt:P361 wd:Q1144159 .\",\n  \t\t\"?film wdt:P57 ?writer .\",\n  \t\t\"?film wdt:P1196 wd:Q2765 .\"\n  \t]\n  \t}\n  \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t", "normal_query": "?writer wdt:P31 wd:Q5 . ?writer wdt:P108 wd:Q70926 . ?writer wdt:P1480 ?work1 . ?work1 wdt:P361 wd:Q201618 . ?writer wdt:P1480 ?work2 . ?work2 wdt:P361 wd:Q59767 . ?writer wdt:P1480 ?work3 . ?work3 wdt:P361 wd:Q1144159 . ?film wdt:P57 ?writer . ?film wdt:P1196 wd:Q2765 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1415127 is Q1415127\nwd:Q1869678 is Q1869678\nwd:Q17738 is Q17738\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q613974 wdt:P58 ?resource .\", \"wd:Q1415127 wdt:P57 ?resource .\", \"wd:Q1869678 wdt:P57 ?resource .\", \"wd:Q17738 wdt:P1431 ?resource .}\", \"\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q613974 wdt:P58 ?resource . wd:Q1415127 wdt:P57 ?resource . wd:Q1869678 wdt:P57 ?resource . wd:Q17738 wdt:P1431 ?resource .} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6837 is P57\nkg:9736 is P58\nkg:6952 is P1431\nkg:6088 is Q613974\nkg:6249 is Q1415127\nkg:0887 is Q1869678\nkg:7226 is Q17738\nkg:8649 is P344", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nSELECT ?resource WHERE {\\n\\t?film kg:P57 ?writer ;\\n\\t\\tkg:P58 ?cinematographer ;\\n\\t\\tkg:P1431 ?director .\\n\\t?writer kg:P344 kg:6088 .\\n\\t?cinematographer kg:P344 kg:6249 .\\n\\t?director kg:P344 kg:6952 .\\n\\t?film kg:P344 kg:7226 .\\n}\\n\"] }", "normal_query": "@prefix kg:<http://example.org/kg/>. SELECT ?resource WHERE { ?film kg:P57 ?writer ; kg:P58 ?cinematographer ; kg:P1431 ?director . ?writer kg:P344 kg:6088 . ?cinematographer kg:P344 kg:6249 . ?director kg:P344 kg:6952 . ?film kg:P344 kg:7226 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n  ?film wdt:P31 wd:Q11424 .\\n  ?film wdt:P57 wd:Q609864 .\\n  ?film wdt:P162 wd:Q609864 .\\n  ?film wdt:P59 wd:Q609864 .\\n  ?film wdt:P127 wd:Q36557 .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q609864 . ?film wdt:P162 wd:Q609864 . ?film wdt:P59 wd:Q609864 . ?film wdt:P127 wd:Q36557 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 . }\"] }", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0614 is P57\nkg:8029 is Q11424\nkg:3536 is P1040\nkg:6841 is P58\nkg:4219 is Q35979475\nkg:6585 is P31\nkg:7563 is P162\nkg:6875 is Q1687239\nkg:2138 is Q562108\nkg:3415 is P272", "response": "{ \"query\": [\"SELECT ?film WHERE { kg:4219 ?p1 ?film . FILTER(?p1 = <http://www.wikidata.org/prop/P57> || ?p1 = <http://www.wikidata.org/prop/P1040> || ?p1 = <http://www.wikidata.org/prop/P58> || ?p1 = <http://www.wikidata.org/prop/P162>) . kg:3536 ?p2 ?film . FILTER(?p2 = <http://www.wikidata.org/prop/P57> || ?p2 = <http://www.wikidata.org/prop/P1040> || ?p2 = <http://www.wikidata.org/prop/P58> || ?p2 = <http://www.wikidata.org/prop/P162>) . kg:6841 ?p3 ?film . FILTER(?p3 = <http://www.wikidata.org/prop/P57> || ?p3 = <http://www.wikidata.org/prop/P1040> || ?p3 = <http://www.wikidata.org/prop/P58> || ?p3 = <http://www.wikidata.org/prop/P162>) . kg:7563 ?p4 ?film . FILTER(?p4 = <http://www.wikidata.org/prop/P57> || ?p4 = <http://www.wikidata.org/prop/P1040> || ?p4 = <http://www.wikidata.org/prop/P58> || ?p4 = <http://www.wikidata.org/prop/P162>) . kg:6585 ?p5 ?film . FILTER(?p5 = <http://www.wikidata.org/prop/P57> || ?p5 = <http://www.wikidata.org/prop/P1040> || ?p5 = <http://www.wikidata.org/prop/P58> || ?p5 = <http://www.wikidata.org/prop/P162>) . }\"]}", "normal_query": "SELECT ?film WHERE { kg:4219 ?p1 ?film . FILTER(?p1 = p:P57 || ?p1 = p:P1040 || ?p1 = p:P58 || ?p1 = p:P162) . kg:3536 ?p2 ?film . FILTER(?p2 = p:P57 || ?p2 = p:P1040 || ?p2 = p:P58 || ?p2 = p:P162) . kg:6841 ?p3 ?film . FILTER(?p3 = p:P57 || ?p3 = p:P1040 || ?p3 = p:P58 || ?p3 = p:P162) . kg:7563 ?p4 ?film . FILTER(?p4 = p:P57 || ?p4 = p:P1040 || ?p4 = p:P58 || ?p4 = p:P162) . kg:6585 ?p5 ?film . FILTER(?p5 = p:P57 || ?p5 = p:P1040 || ?p5 = p:P58 || ?p5 = p:P162) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t    \t  \t  \t\"query\": [\n \t\t\t \t  \t    \t  \t\t\t\"SELECT (COUNT(?costumeDesigner) > 0 AS ?result) WHERE {\",\n\t\t \t  \t    \t  \t\t\t\t\"?film wdt:P31 wd:Q11424. \",\n\t\t \t  \t    \t  \t\t\t\t\"?film wdt:P57 wd:Q689462. \", \">// Xavier Dolan as director/writer/actor needs to be specified more clearly here, but the exact property is not clear from the question.\",\n\t\t \t  \t    \t  \t\t\t\t\"?film wdt:P105 ?costumeDesigner. \",\n\t\t \t  \t    \t  \t\t\t\t\"?costumeDesigner wdt:P31 wd:Q549742. \"\n\t\t \t  \t    \t  \t\t\t,\"}\"\n \t\t\t \t  \t    \t  \t\t]\n}", "normal_query": "SELECT (COUNT(?costumeDesigner) > 0 AS ?result) WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q689462. >// Xavier Dolan as director/writer/actor needs to be specified more clearly here, but the exact property is not clear from the question. ?film wdt:P105 ?costumeDesigner. ?costumeDesigner wdt:P31 wd:Q549742. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q2336453 is Q2336453\nwd:Q3530946 is Q3530946\nwd:Q1323191 is Q1323191\nwd:Q19885882 is Q19885882\nwdt:P106 is P106\nwd:Q19544249 is Q19544249", "response": "{ \"query\": [\"ASK WHERE { wd:Q551861 wdt:P106 wd:Q3530946 . wd:Q551861 wdt:P58 ?creator . ?creator wdt:P1040 wd:Q2336453 }\"] }", "normal_query": "ASK WHERE { wd:Q551861 wdt:P106 wd:Q3530946 . wd:Q551861 wdt:P58 ?creator . ?creator wdt:P1040 wd:Q2336453 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4241 is Q551861\nkg:5664 is Q2615443\nkg:9841 is P58\nkg:9128 is P1040\nkg:7550 is Q2336453\nkg:0138 is Q3530946\nkg:6727 is Q1323191\nkg:9047 is Q19885882\nkg:8757 is P106\nkg:4979 is Q19544249", "response": "{ \"query\": [\"ASK { kg:4241 kg:9128 kg:5664 . }\"] }", "normal_query": "ASK { kg:4241 kg:9128 kg:5664 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(COUNT(?producer) > 0, true, false) AS ?result) WHERE { ?film1 wdt:P31 wd:Q11424 . ?film1 wdt:P57 wd:Q836849 . ?film1 wdt:P58 wd:Q836849 . ?film1 wdt:P910 wd:Q836849 . ?producer wdt:P169 wd:Q836849 . FILTER(?film1 != ?producer) . SERVICE <https://query.wikidata.org/sparql> { wd:Q257596 wdt:P31 ?film1 . wd:Q257596 wdt:P169 ?producer . } UNION { wd:Q408192 wdt:P31 ?film1 . wd:Q408192 wdt:P169 ?producer . } UNION { wd:Q257597 wdt:P31 ?film1 . wd:Q257597 wdt:P169 ?producer . } } GROUP BY ?producer\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(COUNT(?producer) > 0, true, false) AS ?result) WHERE { ?film1 wdt:P31 wd:Q11424 . ?film1 wdt:P57 wd:Q836849 . ?film1 wdt:P58 wd:Q836849 . ?film1 wdt:P910 wd:Q836849 . ?producer wdt:P169 wd:Q836849 . FILTER(?film1 != ?producer) . SERVICE <https://query.wikidata.org/sparql> { wd:Q257596 wdt:P31 ?film1 . wd:Q257596 wdt:P169 ?producer . } UNION { wd:Q408192 wdt:P31 ?film1 . wd:Q408192 wdt:P169 ?producer . } UNION { wd:Q257597 wdt:P31 ?film1 . wd:Q257597 wdt:P169 ?producer . } } GROUP BY ?producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q3282637 is Q3282637\nwd:Q484679 is Q484679\nwdt:P106 is P106\nwd:Q483197 is Q483197", "response": "{ \"query\": [\"ASK WHERE { wd:Q13471372 wdt:P57 ?director . wd:Q13471372 wdt:P58 ?editor . wd:Q13471372 wdt:P1040 ?producer . wd:Q13471372 wdt:P1431 ?writer . FILTER(?director = ?editor && ?director = ?producer && ?director = ?writer) . ?director wdt:P106 wd:Q3282637 }\"] }", "normal_query": "ASK WHERE { wd:Q13471372 wdt:P57 ?director . wd:Q13471372 wdt:P58 ?editor . wd:Q13471372 wdt:P1040 ?producer . wd:Q13471372 wdt:P1431 ?writer . FILTER(?director = ?editor && ?director = ?producer && ?director = ?writer) . ?director wdt:P106 wd:Q3282637 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7662 is P57\nkg:5660 is Q13471372\nkg:0459 is P58\nkg:4409 is P1040\nkg:7959 is P1431\nkg:4814 is Q3282637\nkg:8068 is Q484679\nkg:6553 is P106\nkg:7851 is Q483197", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nASK { ?x kg:P57 kg:5660 .\\n?x kg:P58 kg:0459 .\\n?x kg:P1040 kg:4409 .\\n?x kg:P1431 kg:7959 . }\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?film wdt:P31 wd:Q11424. \"\n \t\t]\n}", "normal_query": "?film wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108", "response": "{ \"query\": [\"SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 . }\"] }", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9256 is P57\nkg:0523 is Q11424\nkg:7622 is P1040\nkg:0284 is P58\nkg:7210 is Q35979475\nkg:2679 is P31\nkg:7531 is Q1687239\nkg:4315 is Q562108", "response": "{ \"query\": [\"SELECT ?film WHERE { kg:7531 p:P57 [] ; p:P1040 [] ; p:P58 [].\"]} ", "normal_query": "SELECT ?film WHERE { kg:7531 p:P57 [] ; p:P1040 [] ; p:P58 []. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n  ?film wdt:P31 wd:Q11424 .\\n  ?film wdt:P57 wd:Q609896 .\\n  ?film wdt:P1105 wd:Q609896 .\\n  ?film wdt:P58 wd:Q609896 .\\n  ?film wdt:P91 wd:Q609896 .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q609896 . ?film wdt:P1105 wd:Q609896 . ?film wdt:P58 wd:Q609896 . ?film wdt:P91 wd:Q609896 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q35979475 is Q35979475\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q1687239 is Q1687239\nwd:Q562108 is Q562108\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 ; wdt:P162 wd:Q1687239 . }\"] }", "normal_query": "SELECT ?film WHERE { ?film wdt:P57 wd:Q11424 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 ; wdt:P162 wd:Q1687239 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6955 is P57\nkg:7475 is Q11424\nkg:0677 is P1040\nkg:7466 is P58\nkg:3215 is Q35979475\nkg:0173 is P31\nkg:8458 is P162\nkg:8079 is Q1687239\nkg:8457 is Q562108\nkg:5251 is P272", "response": "{ \"query\": [\"SELECT ?film WHERE { kg:3215 ?p1 ?director . kg:3215 ?p2 ?editor . kg:3215 ?p3 ?writer . kg:3215 ?p4 ?producer . ?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. ?editor rdfs:label \\\"Jørgen Leth\\\"@en. ?writer rdfs:label \\\"Ole John\\\"@en. ?film a kg:8079 }\"] }", "normal_query": "SELECT ?film WHERE { kg:3215 ?p1 ?director . kg:3215 ?p2 ?editor . kg:3215 ?p3 ?writer . kg:3215 ?p4 ?producer . ?director rdfs:label \"Jens Jørgen Thorsen\"@en. ?editor rdfs:label \"Jørgen Leth\"@en. ?writer rdfs:label \"Ole John\"@en. ?film a kg:8079 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?work) AS ?hasWork) WHERE {\",\n \t\t\t\"?director wdt:P1698 wd:Q25374096 .\",\n \t\t\t\"?work wdt:P57 wd:Q25374096 .\",\n \t\t\t\"?work wdt:P458 wd:Q25374096 .\",\n \t\t\t\"OPTIONAL { ?work wdt:P140 wd:Q1104779 . }\",\n \t\t\t\"?work wdk:P1698|P458|P57 wd:Q25374096 .\",\n \t\t\t\"?work rdfs:label ?title.\",\n \t\t\t\"FILTER (?title = \\\"Fate\\\"@en || ?title = \\\"The Confession\\\"@en || ?title = \\\"The Waiting Room\\\"@en)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?work) AS ?hasWork) WHERE { ?director wdt:P1698 wd:Q25374096 . ?work wdt:P57 wd:Q25374096 . ?work wdt:P458 wd:Q25374096 . OPTIONAL { ?work wdt:P140 wd:Q1104779 . } ?work wdk:P1698|P458|P57 wd:Q25374096 . ?work rdfs:label ?title. FILTER (?title = \"Fate\"@en || ?title = \"The Confession\"@en || ?title = \"The Waiting Room\"@en) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q25479948 is Q25479948\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{ \"query\": [\"ASK WHERE { wd:Q6084069 wdt:P57 ?director . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q12813010 }\"] }", "normal_query": "ASK WHERE { wd:Q6084069 wdt:P57 ?director . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q12813010 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5533 is P57\nkg:5973 is Q6084069\nkg:1128 is P1040\nkg:0963 is P58\nkg:1717 is Q25479948\nkg:4747 is P1431\nkg:9824 is Q5437360\nkg:0231 is Q12813010", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/> ASK { kg:1717 kg:P57 ?x . kg:1717 kg:P58 ?y . kg:1717 kg:P1040 ?z . kg:1717 kg:P1431 ?w . FILTER(?x = kg:5973 && ?y = kg:5533 && ?z = kg:9824 && ?w = kg:4747) }\"] }", "normal_query": "ASK { kg:1717 kg:P57 ?x . kg:1717 kg:P58 ?y . kg:1717 kg:P1040 ?z . kg:1717 kg:P1431 ?w . FILTER(?x = kg:5973 && ?y = kg:5533 && ?z = kg:9824 && ?w = kg:4747) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT (exists(?x) as ?result) WHERE { wd:Q1290674 wdt:P57 wd:Q836290 . wd:Q836290 wdt:P418 wd:Q1290674 . wd:Q836290 wdt:P127 wd:Q1290674 . wd:Q836290 wdt:P57 wd:Q1290674 }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT (exists(?x) as ?result) WHERE { wd:Q1290674 wdt:P57 wd:Q836290 . wd:Q836290 wdt:P418 wd:Q1290674 . wd:Q836290 wdt:P127 wd:Q1290674 . wd:Q836290 wdt:P57 wd:Q1290674 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwdt:P58 is P58\nwd:Q25479948 is Q25479948\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwd:Q12813010 is Q12813010", "response": "{ \"query\": [\"ASK WHERE { wd:Q6084069 wdt:P57 ?director . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q12813010 }\"] }", "normal_query": "ASK WHERE { wd:Q6084069 wdt:P57 ?director . ?director wdt:P1040 wd:Q25479948 . ?director wdt:P58 wd:Q5437360 . ?director wdt:P1431 wd:Q12813010 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3662 is P57\nkg:5177 is Q6084069\nkg:9278 is P1040\nkg:9595 is P58\nkg:0082 is Q25479948\nkg:5038 is P1431\nkg:9920 is Q5437360\nkg:3018 is Q12813010", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/> ASK { kg:0082 kg:9595 kg:3662 . kg:0082 kg:9278 kg:5177 . kg:0082 kg:9920 kg:3018 . kg:0082 kg:5038 kg:9920 . }\"] }", "normal_query": "ASK { kg:0082 kg:9595 kg:3662 . kg:0082 kg:9278 kg:5177 . kg:0082 kg:9920 kg:3018 . kg:0082 kg:5038 kg:9920 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t \"?film wdt:P31 wd:Q11424. \"\n \t\t]\n}\n\t \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t", "normal_query": "?film wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwdt:P1431 is P1431\nwdt:P31 is P31\nwd:Q452794 is Q452794\nwd:Q363666 is Q363666\nwd:Q448604 is Q448604", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{ ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q363666 ; wdt:P58 wd:Q448604 . } UNION { ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q448604 ; wdt:P58 wd:Q363666 . } UNION { ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q11424 ; wdt:P58 wd:Q363666 . }\"\n      \t]\n}", "normal_query": "{ ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q363666 ; wdt:P58 wd:Q448604 . } UNION { ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q448604 ; wdt:P58 wd:Q363666 . } UNION { ?film wdt:P1431 wd:Q11424 ; wdt:P57 wd:Q11424 ; wdt:P58 wd:Q363666 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3882 is P57\nkg:4819 is Q11424\nkg:7752 is P58\nkg:6885 is P1431\nkg:2143 is P31\nkg:5694 is Q452794\nkg:0958 is Q363666\nkg:4799 is Q448604", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\n\\nSELECT ?film WHERE {\\n\\t?film kg:P1431 kg:5694 ;\\n\\t\\tkg:P57 kg:4819 ;\\n\\t\\tkg:P58 kg:0958 .\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?film WHERE { ?film kg:P1431 kg:5694 ; kg:P57 kg:4819 ; kg:P58 kg:0958 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  ?work1 wdt:P31 wd:Q1142422 ;\", \">// instance of film/TV movie\",\n  \t\t\"        wdt:P57 wd:Q68906 ;\", \">// editor\"\n  \t\t,\"        wdt:P910 wd:Q68906 .\", \">// cinematographer\"\n  \t\t,\n  \t\t\"  ?work2 wdt:P31 wd:Q1142422 ;\",\n  \t\t\"        wdt:P57 wd:Q68906 ;\",\n  \t\t\"        wdt:P910 wd:Q68906 .\",\n  \t\t\"\",\n  \t\t\"  ?work3 wdt:P31 wd:Q1142422 ;\",\n  \t\t\"        wdt:P57 wd:Q68906 ;\",\n  \t\t\"        wdt:P910 wd:Q68906 .\",\n  \t\t\"\",\n  \t\t\"  ?pieta wdt:P31 wd:Q1142422 ;\", \">// instance of film/TV movie\"\n  \t\t,\"        wdt:P57 ?director ;\", \">// directed by\"\n  \t\t,\"        wdt:P404 ?editor .\", \">// edited by\"\n  \t\t,\n  \t\t\"  ?pieta wdt:P169 wd:Q238555 .\", \">// Pietà (film)\"\n  \t\t,\n  \t\t\"  ?director wdt:P404 wd:Q68906 .\", \">// editor of the director\"\n  \t\t,\n  \t\t\"  FILTER(?work1 != ?pieta && ?work2 != ?pieta && ?work3 != ?pieta)\",\n  \t\t\"\",\n  \t\t\"  ?resource (wdt:P57|wdt:P404) wd:Q68906 .\", \">// editor or director\"\n  \t\t,\n  \t\t\"} GROUP BY ?resource}\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { ?work1 wdt:P31 wd:Q1142422 ; >// instance of film/TV movie wdt:P57 wd:Q68906 ; >// editor wdt:P910 wd:Q68906 . >// cinematographer ?work2 wdt:P31 wd:Q1142422 ; wdt:P57 wd:Q68906 ; wdt:P910 wd:Q68906 . ?work3 wdt:P31 wd:Q1142422 ; wdt:P57 wd:Q68906 ; wdt:P910 wd:Q68906 . ?pieta wdt:P31 wd:Q1142422 ; >// instance of film/TV movie wdt:P57 ?director ; >// directed by wdt:P404 ?editor . >// edited by ?pieta wdt:P169 wd:Q238555 . >// Pietà (film) ?director wdt:P404 wd:Q68906 . >// editor of the director FILTER(?work1 != ?pieta && ?work2 != ?pieta && ?work3 != ?pieta) ?resource (wdt:P57|wdt:P404) wd:Q68906 . >// editor or director } GROUP BY ?resource} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q17041657 is Q17041657\nwd:Q462025 is Q462025\nwd:Q483197 is Q483197\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q17041657 wdt:P57 ?editorCinematographer .\\n?editorCinematographer wdt:P344 wd:Q13471372 .\\n?editorCinematographer wdt:P1040 wd:Q483197 .\\n?editorCinematographer wdt:P1431 wd:Q462025 .\\n?resource ?property ?value .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q17041657 wdt:P57 ?editorCinematographer . ?editorCinematographer wdt:P344 wd:Q13471372 . ?editorCinematographer wdt:P1040 wd:Q483197 . ?editorCinematographer wdt:P1431 wd:Q462025 . ?resource ?property ?value . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8474 is P57\nkg:0818 is Q13471372\nkg:2523 is P1040\nkg:5982 is P1431\nkg:8778 is Q17041657\nkg:8607 is Q462025\nkg:7977 is Q483197\nkg:6945 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\nkg:8474 kg:2523 ?resource .\\n?resource kg:5982 kg:0818 .\\n?resource kg:6945 kg:8778 .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { kg:8474 kg:2523 ?resource . ?resource kg:5982 kg:0818 . ?resource kg:6945 kg:8778 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"{ ?a <http://www.wikidata.org/prop/direct/P170> wd:Q253896 ; <http://www.wikidata.org/prop/direct/P1485> ?b . wd:Q253896 <http://www.wikidata.org/prop/direct/P170> ?a } UNION { ?c <http://www.wikidata.org/prop/direct/P170> wd:Q253896 ; <http://www.wikidata.org/prop/direct/P1485> ?d . wd:Q253896 <http://www.wikidata.org/prop/direct/P170> ?c } UNION { ?e <http://www.wikidata.org/prop/direct/P170> wd:Q253896 ; <http://www.wikidata.org/prop/direct/P1485> ?f . wd:Q253896 <http://www.wikidata.org/prop/direct/P170> ?e }\"\n \t\t\t \t\t]\n \t\t \t \t}\n \t\t \t \t\t\t\t\t      \t\t\t", "normal_query": "{ ?a wdt:P170 wd:Q253896 ; wdt:P1485 ?b . wd:Q253896 wdt:P170 ?a } UNION { ?c wdt:P170 wd:Q253896 ; wdt:P1485 ?d . wd:Q253896 wdt:P170 ?c } UNION { ?e wdt:P170 wd:Q253896 ; wdt:P1485 ?f . wd:Q253896 wdt:P170 ?e } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwd:Q222344 is Q222344\nwdt:P106 is P106\nwd:Q543382 is Q543382\nwdt:P161 is P161", "response": "{ \"query\": [\"ASK WHERE { wd:Q599423 wdt:P57 ?x . ?y wdt:P1040 wd:Q599423 . wd:Q599423 wdt:P161 ?z . }\"] }", "normal_query": "ASK WHERE { wd:Q599423 wdt:P57 ?x . ?y wdt:P1040 wd:Q599423 . wd:Q599423 wdt:P161 ?z . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2710 is Q599423\nkg:0557 is P57\nkg:4395 is Q44426\nkg:7991 is P1040\nkg:9207 is Q570483\nkg:7953 is Q222344\nkg:0000 is P106\nkg:0419 is Q543382\nkg:6887 is P161", "response": "{ \"query\": [\"ASK { kg:2710 kg:0557 ?x . ?y kg:7991 kg:2710 . kg:2710 kg:6887 ?z . FILTER(?x = kg:4395 && ?y = kg:2710 && ?z = kg:7953) }\"] }", "normal_query": "ASK { kg:2710 kg:0557 ?x . ?y kg:7991 kg:2710 . kg:2710 kg:6887 ?z . FILTER(?x = kg:4395 && ?y = kg:2710 && ?z = kg:7953) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\n \t\t \t\t              \"struct { (wd:Q123456 wdt:P50 wd:Q789012) || (wd:Q123456 wdt:P50 wd:Q234567) } && struct { (wd:Q123456 wdt:P161 wd:Q345678) || (wd:Q123456 wdt:P161 wd:Q456789) } && struct { (wd:Q101234 wdt:P69 wd:Q123456) }\"\n \t\t \t\t              ]\n}", "normal_query": "struct { (wd:Q123456 wdt:P50 wd:Q789012) || (wd:Q123456 wdt:P50 wd:Q234567) } && struct { (wd:Q123456 wdt:P161 wd:Q345678) || (wd:Q123456 wdt:P161 wd:Q456789) } && struct { (wd:Q101234 wdt:P69 wd:Q123456) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q12949115 is Q12949115\nwd:Q4720983 is Q4720983\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwdt:P737 is P737\nwd:Q33999 is Q33999\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q45404 is Q45404\nwd:Q457433 is Q457433", "response": "{ \"query\": [\n    \"SELECT (COUNT(?influencedBy) > 0 AS ?result) WHERE {\",\n    \"?actor wdt:P106 wd:Q33999 .\",\n    \"?ambros wdt:P737 ?actor .\",\n    \"?carlotti wdt:P737 ?actor .\",\n    \"?dennis wdt:P26 ?actor .\",\n    \"?dylan wdt:P26 ?actor .\",\n    \"?founder wdt:P112 wd:Q45404 .\",\n    \"FILTER(?dennis != ?dylan)\",\n    \"{ wd:Q12949115 ?p ?actor } UNION { wd:Q4720983 ?p ?actor } UNION { wd:Q5045345 ?p ?actor } UNION { wd:Q457433 ?p ?actor }\",\n    \"}\"\n]}", "normal_query": "SELECT (COUNT(?influencedBy) > 0 AS ?result) WHERE { ?actor wdt:P106 wd:Q33999 . ?ambros wdt:P737 ?actor . ?carlotti wdt:P737 ?actor . ?dennis wdt:P26 ?actor . ?dylan wdt:P26 ?actor . ?founder wdt:P112 wd:Q45404 . FILTER(?dennis != ?dylan) { wd:Q12949115 ?p ?actor } UNION { wd:Q4720983 ?p ?actor } UNION { wd:Q5045345 ?p ?actor } UNION { wd:Q457433 ?p ?actor } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1759 is Q12949115\nkg:3187 is Q4720983\nkg:5541 is P26\nkg:2828 is Q5045345\nkg:6816 is P737\nkg:1976 is Q33999\nkg:2830 is P112\nkg:0253 is P106\nkg:2923 is Q45404\nkg:4717 is Q457433", "response": "{ \"query\": [\"ASK { kg:1759 kg:6816 ?x ; kg:2830 ?y . kg:3187 kg:6816 ?x . kg:2923 kg:5541 ?z . kg:4717 kg:5541 ?w . FILTER(?y = ?z && ?w = ?x) }\"] }", "normal_query": "ASK { kg:1759 kg:6816 ?x ; kg:2830 ?y . kg:3187 kg:6816 ?x . kg:2923 kg:5541 ?z . kg:4717 kg:5541 ?w . FILTER(?y = ?z && ?w = ?x) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t  \t\t\"SELECT ?resource\",\n \t  \t\t\"WHERE {\",\n \t  \t\t\"  ?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n \t  \t\t\"  ?resource wdt:P108 wd:Q259647 .\", \">// World Wide Web Consortium\",\n \t  \t\t\"  ?resource wdt:P108 wd:Q640634 .\", \">// Open Data Institute\",\n \t  \t\t\"  ?resource wdk:P106 wd:Q339992 .\", \">// occupation: computer scientist or engineer\",\n \t  \t\t\"  ?resource wdt:P580 wd:Q7099 .\", \">// employed by Plessey\",\n \t  \t\t\"  ?resource wdt:P1411 wd:Q60356 .\", \">// employed at CERN\",\n \t  \t\t\"  ?resource wdt:P1411 wd:Q289716 .\", \">// employed at School of Electronics and Computer Science, University of Southampton\",\n \t  \t\t\"}\"\n \t\t \t\t \t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdt:P108 wd:Q259647 . >// World Wide Web Consortium ?resource wdt:P108 wd:Q640634 . >// Open Data Institute ?resource wdk:P106 wd:Q339992 . >// occupation: computer scientist or engineer ?resource wdt:P580 wd:Q7099 . >// employed by Plessey ?resource wdt:P1411 wd:Q60356 . >// employed at CERN ?resource wdt:P1411 wd:Q289716 . >// employed at School of Electronics and Computer Science, University of Southampton } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwd:Q37033 is Q37033\nwd:Q42944 is Q42944\nwdt:P112 is P112\nwd:Q7204713 is Q7204713\nwd:Q7432436 is Q7432436", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P108 wd:Q7432436 ;\\n            wdt:P112 wd:Q7095994 , wd:Q37033 , wd:Q7204713 .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P108 wd:Q7432436 ; wdt:P112 wd:Q7095994 , wd:Q37033 , wd:Q7204713 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4976 is P108\nkg:8577 is Q7095994\nkg:1521 is Q37033\nkg:3784 is Q42944\nkg:1710 is P112\nkg:9654 is Q7204713\nkg:4061 is Q7432436", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<kg:8577> kg:p108 ?resource .\\n?resource kg:p112 kg:9654 .\\n?resource kg:p112 kg:3784 .\\n?resource kg:p112 kg:1521 .}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <kg:8577> kg:p108 ?resource . ?resource kg:p112 kg:9654 . ?resource kg:p112 kg:3784 . ?resource kg:p112 kg:1521 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?item wdt:P31 wd:Q5 . \"\n\t\t] }\n\t\t\t\t \t\t\t\t \t\t\t\t \t\t\t \t", "normal_query": "?item wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwd:Q1653396 is Q1653396\nwd:Q128493 is Q128493\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?film wdt:P57 wd:Q192115 ;\\n\\twdt:P86 wd:Q1653396 ;\\n\\twdt:P58 wd:Q128493 ;\\n\\twdt:P1040 ?composer .\\n\\t?film wdt:P344 ?movieName .\\n\\tFILTER(?movieName = \\\"Planet Terror\\\"@en)\\n\\twd:Q1165050 wdt:P57 ?resource .\\n\\t?resource wdt:P57 <http://www.wikidata.org/entity/Q28986> ;\\n\\twdt:P57 <http://www.wikidata.org/entity/Q34567> ;\\n\\twdt:P57 <http://www.wikidata.org/entity/Q1055777> .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P57 wd:Q192115 ; wdt:P86 wd:Q1653396 ; wdt:P58 wd:Q128493 ; wdt:P1040 ?composer . ?film wdt:P344 ?movieName . FILTER(?movieName = \"Planet Terror\"@en) wd:Q1165050 wdt:P57 ?resource . ?resource wdt:P57 wd:Q28986 ; wdt:P57 wd:Q34567 ; wdt:P57 wd:Q1055777 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7357 is Q1165050\nkg:5667 is P57\nkg:3967 is P86\nkg:8263 is P58\nkg:9956 is P1040\nkg:6162 is Q192115\nkg:2217 is Q1653396\nkg:1188 is Q128493\nkg:0946 is P161\nkg:1339 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n\\t?film kg:5667 kg:2217. # film directed by Quentin Tarantino\\n\\tkg:6162 kg:9956 ?film. # Sin City: A Dame to Kill For edited and directed by someone\\n\\tkg:6162 kg:0946 kg:1339. # Sin City: A Dame to Kill For has cinematographer\\n\\tkg:6162 kg:8263 kg:1188. # Sin City: A Dame to Kill For has starring actor\\n\\tkg:6162 kg:3967 kg:7357. # Sin City: A Dame to Kill For has composer\\n\\tkg:1188 kg:5667 ?resource. # Robert Rodriguez directed Machete and Sin City\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { ?film kg:5667 kg:2217. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes select (exists { wd:Q198460 wdt:P57 wd:Q23229 . wd:Q23229 wdt:P41 wd:Q198460 } union wd:Q198460 wdt:P127 wd:Q23229 . wd:Q23229 wdt:P57 wd:Q198460 ) as ?result\"]\n}", "normal_query": "$prefixes select (exists { wd:Q198460 wdt:P57 wd:Q23229 . wd:Q23229 wdt:P41 wd:Q198460 } union wd:Q198460 wdt:P127 wd:Q23229 . wd:Q23229 wdt:P57 wd:Q198460 ) as ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwd:Q483197 is Q483197", "response": "{ \"query\": [\"ASK WHERE { wd:Q13471372 wdt:P57 ?director . wd:Q13471372 wdt:P58 ?editor . wd:Q13471372 wdt:P1040 ?writer . wd:Q13471372 wdt:P1431 ?producer . FILTER(?director = wd:Q484679 && ?editor = wd:Q484679 && ?writer = wd:Q484679 && ?producer = wd:Q484679) }\"] }", "normal_query": "ASK WHERE { wd:Q13471372 wdt:P57 ?director . wd:Q13471372 wdt:P58 ?editor . wd:Q13471372 wdt:P1040 ?writer . wd:Q13471372 wdt:P1431 ?producer . FILTER(?director = wd:Q484679 && ?editor = wd:Q484679 && ?writer = wd:Q484679 && ?producer = wd:Q484679) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0089 is P57\nkg:1798 is Q13471372\nkg:6842 is P58\nkg:9458 is P1040\nkg:8108 is P1431\nkg:1401 is Q484679\nkg:9947 is Q483197", "response": "{ \"query\": [\"@prefix : {<http://rdf.freebase.com/ns/>}.\", \"ASK WHERE {\", \"  { kg:1798 :type :type.object_type. } UNION\", \"  { kg:0089 :film.directedWork kg:1401. } UNION\", \"  { kg:6842 :film.editedWork kg:1401. } UNION\", \"  { kg:9458 :film.writtenWork kg:1401. } UNION\", \"  { kg:8108 :film.executiveProducedWork kg:1401. }\", \"}\"] }", "normal_query": "@prefix : {<http://rdf.freebase.com/ns/>}. ASK WHERE { { kg:1798 :type :type.object_type. } UNION { kg:0089 :film.directedWork kg:1401. } UNION { kg:6842 :film.editedWork kg:1401. } UNION { kg:9458 :film.writtenWork kg:1401. } UNION { kg:8108 :film.executiveProducedWork kg:1401. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q219400 is Q219400\nwd:Q220394 is Q220394\nwd:Q3282637 is Q3282637\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q3011043 is Q3011043\nwd:Q64434913 is Q64434913", "response": "{ \"query\": [\n    \"SELECT (COUNT(?film) AS ?hasFilm) WHERE {\",\n    \"VALUES (?founder ?work1 ?work2 ?work3) {\",\n    \"(wd:Q1857205 wd:Q64434913 wd:Q219400 wd:Q220394)\",\n    \"(wd:Q1857205 wd:Q219400 wd:Q220394 wd:Q64434913)\",\n    \"(wd:Q1857205 wd:Q220394 wd:Q64434913 wd:Q219400)\",\n    \"(wd:Q1857205 wd:Q220394 wd:Q219400 wd:Q64434913)\",\n    \"(wd:Q1857205 wd:Q64434913 wd:Q220394 wd:Q219400)\",\n    \"(wd:Q1857205 wd:Q64434913 wd:Q219400 wd:Q220394)}\",\n    \"?founder wdt:P106 wd:Q3011043 .\",\n    \"?work1 wdt:P57 ?founder ; wdt:P112 ?film1 .\",\n    \"?work2 wdt:P57 ?founder ; wdt:P112 ?film2 .\",\n    \"?work3 wdt:P57 ?founder ; wdt:P112 ?film3 .\",\n    \"?film1 wdt:P58 wd:Q542216 .\",\n    \"?film2 wdt:P58 wd:Q3282637 .\",\n    \"?film3 wdt:P58 wd:Q219400 .}\",\n    \"FILTER(?hasFilm = 3)\"]\n}", "normal_query": "SELECT (COUNT(?film) AS ?hasFilm) WHERE { VALUES (?founder ?work1 ?work2 ?work3) { (wd:Q1857205 wd:Q64434913 wd:Q219400 wd:Q220394) (wd:Q1857205 wd:Q219400 wd:Q220394 wd:Q64434913) (wd:Q1857205 wd:Q220394 wd:Q64434913 wd:Q219400) (wd:Q1857205 wd:Q220394 wd:Q219400 wd:Q64434913) (wd:Q1857205 wd:Q64434913 wd:Q220394 wd:Q219400) (wd:Q1857205 wd:Q64434913 wd:Q219400 wd:Q220394)} ?founder wdt:P106 wd:Q3011043 . ?work1 wdt:P57 ?founder ; wdt:P112 ?film1 . ?work2 wdt:P57 ?founder ; wdt:P112 ?film2 . ?work3 wdt:P57 ?founder ; wdt:P112 ?film3 . ?film1 wdt:P58 wd:Q542216 . ?film2 wdt:P58 wd:Q3282637 . ?film3 wdt:P58 wd:Q219400 .} FILTER(?hasFilm = 3) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6214 is Q1857205\nkg:2271 is P57\nkg:7583 is Q542216\nkg:8972 is P58\nkg:2999 is Q219400\nkg:1273 is Q220394\nkg:6969 is Q3282637\nkg:3217 is P112\nkg:9846 is P106\nkg:0938 is Q3011043\nkg:0697 is Q64434913", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE {\", \"{ ?x kg:P57 kg:2271 . }\", \"{ ?x kg:P58 kg:0938 . }\", \"{ ?x kg:P112 kg:6214 . }\", \"?y kg:P106 kg:7583 .\", \"?z kg:P106 kg:2999 .\", \"?w kg:P106 kg:1273 .\", \"?x kg:P106 kg:6969 .\", \"}\"]}", "normal_query": "ASK WHERE { { ?x kg:P57 kg:2271 . } { ?x kg:P58 kg:0938 . } { ?x kg:P112 kg:6214 . } ?y kg:P106 kg:7583 . ?z kg:P106 kg:2999 . ?w kg:P106 kg:1273 . ?x kg:P106 kg:6969 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q123456789 p:P123 ?statement . ?statement ps:P123 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q123456789 p:P123 ?statement . ?statement ps:P123 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwd:Q7243050 is Q7243050\nwd:Q4959991 is Q4959991\nwdt:P344 is P344", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?x ?p ?o\"\n  \t\t]\n  \t\t}\n  \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "?x ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0248 is P57\nkg:6336 is P86\nkg:6879 is P58\nkg:5755 is P1040\nkg:3415 is P1431\nkg:1904 is Q5375110\nkg:4869 is Q7243050\nkg:2032 is Q4959991\nkg:8681 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.data-vocabulary.org/#>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.data-vocabulary.org/resource/1904> kg:P57 ?executiveProducer .\\n<http://rdf.data-vocabulary.org/resource/1904> kg:P86 ?editor .\\n<http://rdf.data-vocabulary.org/resource/1904> kg:P58 ?composer .\\n<http://rdf.data-vocabulary.org/resource/1904> kg:P1040 ?cinematographer .\\n<http://rdf.data-vocabulary.org/resource/1904> kg:P1431 ?director .\\n?executiveProducer kg:P344 <http://rdf.data-vocabulary.org/resource/2032> .\\n?editor kg:P344 <http://rdf.data-vocabulary.org/resource/2032> .\\n?composer kg:P344 <http://rdf.data-vocabulary.org/resource/2032> .\\n?cinematographer kg:P344 <http://rdf.data-vocabulary.org/resource/2032> .\\n?director kg:P344 <http://rdf.data-vocabulary.org/resource/2032> .\\n}\"] }", "normal_query": "@prefix kg:<http://rdf.data-vocabulary.org//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"{ ?item wdt:P31 wd:Q5 ;\"\n  \t\t\t\t\t,\"wdt:P108 wd:Q247695 ;\"\n  \t\t\t,\"wdt:P108 wd:Q1695876 ;\"\n  \t\t\t,\"wdt:P1416 wd:Q230814 ;\"\n  \t\t\t,\"wdt:P1416 wd:Q74779 ;\"\n  \t\t\t,\"wdt:P1416 wd:Q127655 .}\"\n  \t\t]\n}", "normal_query": "{ ?item wdt:P31 wd:Q5 ; wdt:P108 wd:Q247695 ; wdt:P108 wd:Q1695876 ; wdt:P1416 wd:Q230814 ; wdt:P1416 wd:Q74779 ; wdt:P1416 wd:Q127655 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q41506 is Q41506\nwd:Q5059715 is Q5059715\nwd:Q23548 is Q23548\nwd:Q55206 is Q55206\nwdt:P27 is P27\nwdt:P112 is P112\nwd:Q622664 is Q622664\nwd:Q30 is Q30", "response": "{ \"query\": [\n    \"{ ?entity wdt:P108 wd:Q55206 ; wdt:P112 wd:Q41506 . }\",\n    \"{ ?entity wdt:P108 wd:Q622664 . }\",\n    \"{ ?entity wdt:P108 wd:Q30 . }\",\n    \"{ ?entity wdt:P108 wd:Q23548 . }\"\n]\n}", "normal_query": "{ ?entity wdt:P108 wd:Q55206 ; wdt:P112 wd:Q41506 . } { ?entity wdt:P108 wd:Q622664 . } { ?entity wdt:P108 wd:Q30 . } { ?entity wdt:P108 wd:Q23548 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5724 is P108\nkg:4947 is Q41506\nkg:1923 is Q5059715\nkg:4276 is Q23548\nkg:6969 is Q55206\nkg:1549 is P27\nkg:6662 is P112\nkg:5619 is Q622664\nkg:7907 is Q30", "response": "{ \"query\": [\"@prefix rdf:<http://www.w3.org/1999/01/XMLSchema#> .\\n@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix foaf:<http://xmlns.com/foaf/0.1/> .\\n@prefix dc:<http://purl.org/dc/elements/1.1/> .\\n@prefix xsd:<http://www.w3.org/2001/XMLSchema#> .\\n?resource kg:P108 kg:4947 .\\n?resource kg:P112 kg:6969 .\\n?resource kg:P112 kg:5619 .\\n?resource kg:P112 kg:1923 .\\n?resource kg:P112 kg:5724 .\"] }", "normal_query": "@prefix rdf:<http://www.w3.org/1999/01//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwdt:P86 is P86\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwd:Q656357 is Q656357\nwd:Q93853 is Q93853\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"ASK WHERE { wd:Q1165050 wdt:P57 ?director . wd:Q192115 wdt:P86 ?writer . wd:Q656357 wdt:P58 ?editor . wd:Q93853 wdt:P1040 ?composer . }\"] }", "normal_query": "ASK WHERE { wd:Q1165050 wdt:P57 ?director . wd:Q192115 wdt:P86 ?writer . wd:Q656357 wdt:P58 ?editor . wd:Q93853 wdt:P1040 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9224 is Q1165050\nkg:0533 is P57\nkg:1320 is P86\nkg:4950 is P58\nkg:9007 is P1040\nkg:1464 is Q192115\nkg:8563 is Q656357\nkg:6304 is Q93853\nkg:5932 is P161\nkg:7811 is P344", "response": "{ \"query\": [\"ASK WHERE { kg:9224 kg:0533/kg:1320/kg:4950/kg:9007/kg:1464/kg:8563/kg:6304 ; kg:5932/kg:7811 ?x }\"] }", "normal_query": "ASK WHERE { kg:9224 kg:0533/kg:1320/kg:4950/kg:9007/kg:1464/kg:8563/kg:6304 ; kg:5932/kg:7811 ?x } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"{?person wdt:P31 wd:Q5 . ?person wdt:P108 wd:Q24976 . ?person wdt:P108 wd:Q161556 . ?person wdt:P108 wd:Q196945 . ?person wdt:P108 wd:Q33116 . ?person wdt:P108 wd:Q276579 . ?person wdt:P108 wd:Q276580 .}\"\n \t\t \t\t\t]\n \t\t \t\t\t}\n \t\t \t\t\t\t\t\t\t\t      \t ", "normal_query": "{?person wdt:P31 wd:Q5 . ?person wdt:P108 wd:Q24976 . ?person wdt:P108 wd:Q161556 . ?person wdt:P108 wd:Q196945 . ?person wdt:P108 wd:Q33116 . ?person wdt:P108 wd:Q276579 . ?person wdt:P108 wd:Q276580 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q11490471 is Q11490471\nwd:Q947907 is Q947907\nwd:Q11371930 is Q11371930\nwd:Q182950 is Q182950\nwd:Q1054807 is Q1054807", "response": "{ \"query\": [\n    \"SELECT (COUNT(?x) AS ?result) WHERE {\"\n   \t\t\t,\"?x wdt:P108 wd:Q29011 .\"\n       \t\t,\"?x wdt:P58 wd:Q1136386 .\"\n       \t\t,\"?x wdt:P1431 wd:Q11490471 .\"\n       \t\t,\"?x wdt:P108 wd:Q947907 .\"\n       \t\t,\"?x wdt:P58 wd:Q11371930 .\"\n       \t\t,\"?x wdt:P1431 wd:Q182950 .\"\n       \t\t,\"?x wdt:P108 wd:Q1054807 .\"\n   \t\t,\"}\"\n] }", "normal_query": "SELECT (COUNT(?x) AS ?result) WHERE { ?x wdt:P108 wd:Q29011 . ?x wdt:P58 wd:Q1136386 . ?x wdt:P1431 wd:Q11490471 . ?x wdt:P108 wd:Q947907 . ?x wdt:P58 wd:Q11371930 . ?x wdt:P1431 wd:Q182950 . ?x wdt:P108 wd:Q1054807 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6208 is Q29011\nkg:5056 is P108\nkg:7212 is Q1136386\nkg:2917 is P58\nkg:1056 is P1431\nkg:4471 is Q11490471\nkg:5894 is Q947907\nkg:1459 is Q11371930\nkg:4277 is Q182950\nkg:7135 is Q1054807", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE {\", \"{ ?x kg:5056 kg:6208 . }\", \"{ ?x kg:2917 kg:7212 . }\", \"{ ?x kg:1459 kg:4471 . }\", \"{ ?x kg:5894 kg:1056 . }\", \"{ ?x kg:5056 kg:7135 . }\", \"{ ?x kg:5056 kg:4277 . }\", \"{ ?x kg:5056 kg:1459 . }\", \"}\"]}", "normal_query": "ASK WHERE { { ?x kg:5056 kg:6208 . } { ?x kg:2917 kg:7212 . } { ?x kg:1459 kg:4471 . } { ?x kg:5894 kg:1056 . } { ?x kg:5056 kg:7135 . } { ?x kg:5056 kg:4277 . } { ?x kg:5056 kg:1459 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1431 is P1431\nwd:Q613974 is Q613974\nwd:Q1415127 is Q1415127\nwd:Q208910 is Q208910\nwd:Q17738 is Q17738\nwd:Q1609393 is Q1609393\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?film wdt:P57 wd:Q613974 ;\\n\\twdt:P58 wd:Q1415127 ;\\n\\twdt:P1431 wd:Q208910 .\\n\\tOPTIONAL { ?film wdt:P344 \\\"1:42.08\\\"^^xsd:string } .\\n\\t?resource wdt:P57 ?film ;\\n\\twdt:P58 ?film ;\\n\\twdt:P1431 ?film .\\n}\" ]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P57 wd:Q613974 ; wdt:P58 wd:Q1415127 ; wdt:P1431 wd:Q208910 . OPTIONAL { ?film wdt:P344 \"1:42.08\"^^xsd:string } . ?resource wdt:P57 ?film ; wdt:P58 ?film ; wdt:P1431 ?film . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5100 is P57\nkg:4592 is P58\nkg:5973 is P1431\nkg:0415 is Q613974\nkg:0431 is Q1415127\nkg:6153 is Q208910\nkg:7141 is Q17738\nkg:1714 is Q1609393\nkg:9250 is P344", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\n\\nSELECT ?resource WHERE {\\n\\t?film kg:P58 kg:6153 ;\\n\\t\\tkg:P57 kg:5973 ;\\n\\t\\tkg:P1431 kg:0415 ;\\n\\t\\tkg:P344 kg:0431 .\\n\\t?resource <http://schema.org/about> ?film .\\n}\" ] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P58 kg:6153 ; kg:P57 kg:5973 ; kg:P1431 kg:0415 ; kg:P344 kg:0431 . ?resource schema:about ?film . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n\t\t \"?cinematographer wdt:P345 wd:Q123456789 .\"\n\t\t,\"?director wdt:P345 wd:Q123456789 .\"\n\t\t,\"?editor wdt:P345 wd:Q123456789 .\"\n\t\t,\"wd:Q123456789 wdt:P110 ?cinematographer .\"\n\t\t,\"wd:Q123456789 wdt:P111 ?director .\"\n\t\t,\"wd:Q123456789 wdt:P112 ?editor .\"\n\t\t,\"?twin_peaks wdtn:P361 wd:Q123456789 .\"\n\t\t,\"?fire_walk_with_me wdtn:P361 wd:Q123456789 .\"\n\t\t,\"?my_son_my_son_what_have_ye_done wdtn:P361 wd:Q123456789 .\"\n\t\t,\"wd:Q123456789 wdt:P110 ?twin_peaks_cinematographer .\"\n\t\t,\"wd:Q123456789 wdt:P111 ?twin_peaks_director .\"\n\t\t,\"wd:Q123456789 wdt:P112 ?twin_peaks_editor .\"\n\t\t,\"?fire_walk_with_me_cinematographer wdt:P345 wd:Q123456789 .\"\n\t\t,\"?fire_walk_with_me_director wdt:P345 wd:Q123456789 .\"\n\t\t,\"?fire_walk_with_me_editor wdt:P345 wd:Q123456789 .\"\n\t\t,\"wd:Q123456789 wdt:P110 ?my_son_my_son_what_have_ye_done_cinematographer .\"\n\t\t,\"wd:Q123456789 wdt:P111 ?my_son_my_son_what_have_ye_done_director .\"\n\t\t,\"wd:Q123456789 wdt:P112 ?my_son_my_son_what_have_ye_done_editor .\"\n\t\t]\n}", "normal_query": "?cinematographer wdt:P345 wd:Q123456789 . ?director wdt:P345 wd:Q123456789 . ?editor wdt:P345 wd:Q123456789 . wd:Q123456789 wdt:P110 ?cinematographer . wd:Q123456789 wdt:P111 ?director . wd:Q123456789 wdt:P112 ?editor . ?twin_peaks wdtn:P361 wd:Q123456789 . ?fire_walk_with_me wdtn:P361 wd:Q123456789 . ?my_son_my_son_what_have_ye_done wdtn:P361 wd:Q123456789 . wd:Q123456789 wdt:P110 ?twin_peaks_cinematographer . wd:Q123456789 wdt:P111 ?twin_peaks_director . wd:Q123456789 wdt:P112 ?twin_peaks_editor . ?fire_walk_with_me_cinematographer wdt:P345 wd:Q123456789 . ?fire_walk_with_me_director wdt:P345 wd:Q123456789 . ?fire_walk_with_me_editor wdt:P345 wd:Q123456789 . wd:Q123456789 wdt:P110 ?my_son_my_son_what_have_ye_done_cinematographer . wd:Q123456789 wdt:P111 ?my_son_my_son_what_have_ye_done_director . wd:Q123456789 wdt:P112 ?my_son_my_son_what_have_ye_done_editor . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwd:Q1473406 is Q1473406\nwd:Q1511905 is Q1511905\nwd:Q3485595 is Q3485595\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?film1 wdt:P57 ?cinematographer ; wdt:P1040 ?director ; wdt:P1431 ?editor .\\n\\twd:Q2085 wdt:P344 ?film1 .\\n\\twd:Q1140578 wdt:P344 ?film2 .\\n\\t?film2 wdt:P344 wd:Q1473406 ; wdt:P344 wd:Q1511905 ; wdt:P344 wd:Q3485595 .\\n\\t?resource (wdt:P57|wdt:P1040|wdt:P1431) ?film2 .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film1 wdt:P57 ?cinematographer ; wdt:P1040 ?director ; wdt:P1431 ?editor . wd:Q2085 wdt:P344 ?film1 . wd:Q1140578 wdt:P344 ?film2 . ?film2 wdt:P344 wd:Q1473406 ; wdt:P344 wd:Q1511905 ; wdt:P344 wd:Q3485595 . ?resource (wdt:P57|wdt:P1040|wdt:P1431) ?film2 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6445 is P57\nkg:8008 is P1040\nkg:1773 is Q1140578\nkg:4869 is P1431\nkg:3440 is Q2085\nkg:6408 is Q1473406\nkg:8028 is Q1511905\nkg:4888 is Q3485595\nkg:5923 is P344", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nSELECT ?cinematographer ?director ?editor WHERE {\\n\\t?film1 kg:P57 ?cinematographer .\\n\\t?film1 kg:P1040 ?director .\\n\\t?film1 kg:P1431 ?editor .\\n\\t?film2 kg:Q1140578 ?producer1 .\\n\\t?film3 kg:Q2085 ?producer2 .\\n\\tFILTER(?producer1 = ?producer2)\\n}\"] }", "normal_query": "@prefix kg:<http://example.org/kg/>. SELECT ?cinematographer ?director ?editor WHERE { ?film1 kg:P57 ?cinematographer . ?film1 kg:P1040 ?director . ?film1 kg:P1431 ?editor . ?film2 kg:Q1140578 ?producer1 . ?film3 kg:Q2085 ?producer2 . FILTER(?producer1 = ?producer2) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"SELECT (COUNT(?director) > 0 AS ?result) WHERE {\",\n \t\t\t\"?film1 wdt:P31 wd:Q11424. \",\n \t\t\t\"?film1 rdfs:label ?title_en. \",\n \t\t\t\"FILTER(LANG(?title_en) = 'en'). \",\n \t\t\t\"FILTER(CONTAINS(?title_en, \\\"The Kid\\\") || CONTAINS(?title_en, \\\"The Floorwalker\\\") || CONTAINS(?title_en, \\\"A Woman\\\") || CONTAINS(?title_en, \\\"Modern Times\\\"))\",\n \t\t\t\"?film1 wdt:P75 ?director. \",\n \t\t\t\"?director wdt:P609 ?spouse1. \",\n \t\t\t\"FILTER(?spouse1 = wd:Q284319 || ?spouse1 = wd:Q284320). \",\n \t\t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t\t\"?film2 rdfs:label ?title_en2. \",\n \t\t\t\"FILTER(LANG(?title_en2) = 'en'). \",\n \t\t\t\"?film2 wdt:P75 ?director2. \",\n \t\t\t\"?director2 wdt:P609 ?spouse2. \",\n \t\t\t\"FILTER(?spouse2 = wd:Q184319).\",\n \t\t\t\"?director sameAs|owl:sameAs ?director2.\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT (COUNT(?director) > 0 AS ?result) WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 rdfs:label ?title_en. FILTER(LANG(?title_en) = 'en'). FILTER(CONTAINS(?title_en, \"The Kid\") || CONTAINS(?title_en, \"The Floorwalker\") || CONTAINS(?title_en, \"A Woman\") || CONTAINS(?title_en, \"Modern Times\")) ?film1 wdt:P75 ?director. ?director wdt:P609 ?spouse1. FILTER(?spouse1 = wd:Q284319 || ?spouse1 = wd:Q284320). ?film2 wdt:P31 wd:Q11424. ?film2 rdfs:label ?title_en2. FILTER(LANG(?title_en2) = 'en'). ?film2 wdt:P75 ?director2. ?director2 wdt:P609 ?spouse2. FILTER(?spouse2 = wd:Q184319). ?director sameAs|owl:sameAs ?director2. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q241019 is Q241019\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q374172 is Q374172\nwd:Q2449461 is Q2449461\nwd:Q45602 is Q45602", "response": "{ \"query\": [\n    \"SELECT (COUNT(?director) > 0 AS ?result) WHERE {\",\n    \"?film wdt:P31 wd:Q11421; wdt:P57 ?director.\",\n    \"{?director wdt:P26 wd:Q32337.}\",\n    \"UNION {?director wdt:P26 wd:Q137808.}\",\n    \"UNION {?director wdt:P26 wd:Q374172.}\",\n    \"?film rdfs:label ?title.\",\n    \"{?film wdt:P57 wd:Q166739; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').}\",\n    \"UNION {?film wdt:P57 wd:Q241019; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').}\",\n    \"UNION {?film wdt:P57 wd:Q374172; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').}\",\n    \"UNION {?film wdt:P57 wd:Q2449461; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').}\",\n    \"?director wdt:P1040 ?spouse.\",\n    \"{?spouse rdfs:label ?spouseName FILTER(LANGMATCHES(LANG(?spouseName), 'en')).}\",\n    \"FILTER(CONTAINS(STR(?title), \\\"The Kid\\\") || CONTAINS(STR(?title), \\\"The Floorwalker\\\") || CONTAINS(STR(?title), \\\"A Woman\\\") || CONTAINS(STR(?title), \\\"Modern Times\\\"))\"\n   \t]}", "normal_query": "SELECT (COUNT(?director) > 0 AS ?result) WHERE { ?film wdt:P31 wd:Q11421; wdt:P57 ?director. {?director wdt:P26 wd:Q32337.} UNION {?director wdt:P26 wd:Q137808.} UNION {?director wdt:P26 wd:Q374172.} ?film rdfs:label ?title. {?film wdt:P57 wd:Q166739; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').} UNION {?film wdt:P57 wd:Q241019; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').} UNION {?film wdt:P57 wd:Q374172; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').} UNION {?film wdt:P57 wd:Q2449461; rdfs:label ?title, ?titleLabel FILTER(LANG(?titleLabel) = 'en').} ?director wdt:P1040 ?spouse. {?spouse rdfs:label ?spouseName FILTER(LANGMATCHES(LANG(?spouseName), 'en')).} FILTER(CONTAINS(STR(?title), \"The Kid\") || CONTAINS(STR(?title), \"The Floorwalker\") || CONTAINS(STR(?title), \"A Woman\") || CONTAINS(STR(?title), \"Modern Times\")) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8306 is P57\nkg:1894 is Q166739\nkg:3898 is Q241019\nkg:9027 is P1040\nkg:2897 is P26\nkg:8608 is Q32337\nkg:7511 is Q137808\nkg:6357 is Q374172\nkg:4272 is Q2449461\nkg:2314 is Q45602", "response": "{ \"query\": [\"ASK WHERE { kg:8306 P57 ?director . ?director P26 kg:1894 . kg:8306 P57 ?editor . ?editor P26 kg:1894 . kg:8306 P57 ?person . ?person P26 kg:3898 . kg:8306 P57 ?anotherPerson . ?anotherPerson P26 kg:9027 }\"] }", "normal_query": "ASK WHERE { kg:8306 P57 ?director . ?director P26 kg:1894 . kg:8306 P57 ?editor . ?editor P26 kg:1894 . kg:8306 P57 ?person . ?person P26 kg:3898 . kg:8306 P57 ?anotherPerson . ?anotherPerson P26 kg:9027 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?chaplin = ?author , IF(?chaplin = ?editor , IF(?chaplin = ?director , true, false)), false) AS ?result) WHERE { wd:Q89467 wdt:P31 wd:Q5 ; wdt:P21 wd:Q6581072 . wd:Q89467 wdt:P50 ?author . wd:Q89467 wdt:P140 ?editor . wd:Q89467 wdt:P1319 ?director . BIND(wd:Q89467 AS ?chaplin) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT (IF(?chaplin = ?author , IF(?chaplin = ?editor , IF(?chaplin = ?director , true, false)), false) AS ?result) WHERE { wd:Q89467 wdt:P31 wd:Q5 ; wdt:P21 wd:Q6581072 . wd:Q89467 wdt:P50 ?author . wd:Q89467 wdt:P140 ?editor . wd:Q89467 wdt:P1319 ?director . BIND(wd:Q89467 AS ?chaplin) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwd:Q214723 is Q214723\nwd:Q5 is Q5\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P31 is P31\nwdt:P21 is P21\nwd:Q1070468 is Q1070468\nwd:Q6581097 is Q6581097", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/>. @prefix wdt: <http://www.wikidata.org/prop/direct/>.\\n\\nASK WHERE {\\nwd:Q166739 wdt:P58 ?writer; wdt:P1040 ?editor; wdt:P57 ?director.\\n?writer wdt:P21 wd:Q6581097.\\nFILTER(?writer = wd:Q166739)\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/>. @prefix wdt: <http://www.wikidata.org/prop/direct/>. ASK WHERE { wd:Q166739 wdt:P58 ?writer; wdt:P1040 ?editor; wdt:P57 ?director. ?writer wdt:P21 wd:Q6581097. FILTER(?writer = wd:Q166739) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4256 is P57\nkg:0218 is Q882\nkg:5560 is Q166739\nkg:7441 is Q214723\nkg:1133 is Q5\nkg:3670 is P1040\nkg:3925 is P58\nkg:3826 is P31\nkg:5855 is P21\nkg:6478 is Q1070468\nkg:8755 is Q6581097", "response": "{ \"query\": [\"ASK { kg:6478 kg:5855 kg:1133 . }\"]}", "normal_query": "ASK { kg:6478 kg:5855 kg:1133 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?item p:P31/psv:P31/wdt:P279* wd:Q468502 ;\",\n\t\t \t\t\t\"p:P127/ps:P127 ?producer ;\",\n\t\t \t\t\t\"?acquisitionPredicate ?acquirer . }\",\n\t\t \t\t\t\"{ ?item p:P31/psv:P31/wdt:P279* wd:Q468502 ;\",\n\t\t \t\t\t\"p:P123/ps/P123 ?producer ;\",\n\t\t \t\t\t\"?acquisitionPredicate ?acquirer . }\"\n\t\t \t\t] }\n\t \t\t \t\t\t\t\t\t\t      \t\t", "normal_query": "{ ?item p:P31/psv:P31/wdt:P279* wd:Q468502 ; p:P127/ps:P127 ?producer ; ?acquisitionPredicate ?acquirer . } { ?item p:P31/psv:P31/wdt:P279* wd:Q468502 ; p:P123/ps/P123 ?producer ; ?acquisitionPredicate ?acquirer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q1411292 is Q1411292\nwd:Q505275 is Q505275\nwd:Q219635 is Q219635\nwd:Q3133593 is Q3133593\nwd:Q2062523 is Q2062523\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwd:Q7603552 is Q7603552\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"SELECT ?resource WHERE {\", \"wd:Q1411292 wdt:P750 ?resource .\", \"}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1411292 wdt:P750 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7165 is P750\nkg:8351 is Q1411292\nkg:1911 is Q505275\nkg:4842 is Q219635\nkg:1272 is Q3133593\nkg:5118 is Q2062523\nkg:1846 is P127\nkg:2485 is Q3511946\nkg:8821 is Q7603552\nkg:1460 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:8351 ?property ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:8351 ?property ?resource . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?composer wdt:P31 wd:Q5 .\",\n  \t\t\"?composer wdt:P108 wd:Q241173 .\",\n  \t\t\"?film1 wdt:P57 ?composer .\",\n  \t\t\"?film1 wdt:P364 wd:Q90899 .\",\n  \t\t\"?film2 wdt:P57 ?composer .\",\n  \t\t\"?film2 wdt:P364 wd:Q1003777 .\",\n  \t\t\"?film3 wdt:P58 editor_of_work) ?composer .\",\n  \t\t\"?film3 wdt:P364 wd:Q90900 .\",\n  \t\t\"?film4 wdt:P58 editor_of_work) ?composer .\",\n  \t\t\"?film4 wdt:P364 wd:Q172957 .\",\n  \t\t\"?film5 wdt:P58 editor_of_work) ?composer .\",\n  \t\t\"?film5 wdt:P364 wd:Q1003778 .\",\n  \t\t\"?film6 wdt:P57 ?composer .\",\n  \t\t\"?film6 wdt:P364 wd:Q92075 .\"\n  \t]\n  }\n \t\t \t\t\t\t \t\t\t\t \t\t\t\t \t", "normal_query": "?composer wdt:P31 wd:Q5 . ?composer wdt:P108 wd:Q241173 . ?film1 wdt:P57 ?composer . ?film1 wdt:P364 wd:Q90899 . ?film2 wdt:P57 ?composer . ?film2 wdt:P364 wd:Q1003777 . ?film3 wdt:P58 editor_of_work) ?composer . ?film3 wdt:P364 wd:Q90900 . ?film4 wdt:P58 editor_of_work) ?composer . ?film4 wdt:P364 wd:Q172957 . ?film5 wdt:P58 editor_of_work) ?composer . ?film5 wdt:P364 wd:Q1003778 . ?film6 wdt:P57 ?composer . ?film6 wdt:P364 wd:Q92075 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q166739 is Q166739\nwd:Q214723 is Q214723\nwdt:P86 is P86\nwdt:P1040 is P1040\nwd:Q2345349 is Q2345349\nwd:Q374172 is Q374172\nwd:Q238211 is Q238211\nwd:Q45602 is Q45602", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composer_editor_director WHERE {\\n\\t?composer_editor_director wdt:P57 wd:Q214723 ;\\n\\twdt:P86 wd:Q2345349 , wd:Q238211 ;\\n\\twdt:P1040 wd:Q166739 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composer_editor_director WHERE { ?composer_editor_director wdt:P57 wd:Q214723 ; wdt:P86 wd:Q2345349 , wd:Q238211 ; wdt:P1040 wd:Q166739 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6496 is P57\nkg:4642 is Q166739\nkg:0042 is Q214723\nkg:5260 is P86\nkg:7729 is P1040\nkg:0016 is Q2345349\nkg:3716 is Q374172\nkg:5926 is Q238211\nkg:1194 is Q45602", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?composer_editor_director WHERE {\\n\\t?film1 kg:P57 kg:4642 ; kg:P86 ?composer_editor_director .\\n\\t?film2 kg:P57 kg:0042 ; kg:P1040 ?composer_editor_director .\\n\\t?film3 kg:P57 kg:1194 ; kg:P1040 ?composer_editor_director .\\n\\t?film4 kg:P57 kg:6496 ; kg:P86 ?composer_editor_director .\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?composer_editor_director WHERE { ?film1 kg:P57 kg:4642 ; kg:P86 ?composer_editor_director . ?film2 kg:P57 kg:0042 ; kg:P1040 ?composer_editor_director . ?film3 kg:P57 kg:1194 ; kg:P1040 ?composer_editor_director . ?film4 kg:P57 kg:6496 ; kg:P86 ?composer_editor_director . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT (exists(?influence) as ?result) WHERE { wd:Q108496 wdt:P1303 ?director . ?director wdk:P577 ?film1 . ?director wdk:P577 ?film2 . ?director wdt:P161 wd:Q108496 . wd:Q108496 wdt:P1303 ?influence . wd:Q108496 wdt:P1303 wd:Q259757 . wd:Q259757 wdk:P577 ?film1 . wd:Q259757 wdk:P577 ?film2 }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT (exists(?influence) as ?result) WHERE { wd:Q108496 wdt:P1303 ?director . ?director wdk:P577 ?film1 . ?director wdk:P577 ?film2 . ?director wdt:P161 wd:Q108496 . wd:Q108496 wdt:P1303 ?influence . wd:Q108496 wdt:P1303 wd:Q259757 . wd:Q259757 wdk:P577 ?film1 . wd:Q259757 wdk:P577 ?film2 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwd:Q1970252 is Q1970252\nwd:Q133730 is Q133730\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwdt:P161 is P161", "response": "{ \"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4191 is P57\nkg:8543 is Q3017093\nkg:8695 is Q1970252\nkg:3528 is Q133730\nkg:3236 is Q88965291\nkg:0172 is P737\nkg:3710 is P161", "response": "{ \"query\": [\"ASK WHERE { kg:4191 p57 ?director . kg:8543 p737 kg:4191 . kg:8695 p737 kg:4191 . ?director p161 kg:3236 . ?director p161 kg:3528 }\"] }", "normal_query": "ASK WHERE { kg:4191 p57 ?director . kg:8543 p737 kg:4191 . kg:8695 p737 kg:4191 . ?director p161 kg:3236 . ?director p161 kg:3528 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\"$prefixes SELECT DISTINCT BOOL(?foundUnitedArtists) WHERE { ?person wdt:P1409 wd:Q25867 ; wdt:P361 wd:Q25867 ; wdp:P1409 wd:Q25867 . wd:Q25867 wdt:P1409 ?person . wd:Q25867 wdt:P1409 ?oonaOneill . wd:Q25867 wdt:P1409 ?litaGrey . wd:Q25867 wdt:P1409 ?mildredHarris . ?person wdt:P155 ?fellini . ?person wdt:P155 ?marceau . ?person wdt:P155 ?haroldLloyd . ?founder wdt:P1416 wd:Q25867 . ?founder wdt:P39 wd:Q25867 . }\"]\n}", "normal_query": "$prefixes SELECT DISTINCT BOOL(?foundUnitedArtists) WHERE { ?person wdt:P1409 wd:Q25867 ; wdt:P361 wd:Q25867 ; wdp:P1409 wd:Q25867 . wd:Q25867 wdt:P1409 ?person . wd:Q25867 wdt:P1409 ?oonaOneill . wd:Q25867 wdt:P1409 ?litaGrey . wd:Q25867 wdt:P1409 ?mildredHarris . ?person wdt:P155 ?fellini . ?person wdt:P155 ?marceau . ?person wdt:P155 ?haroldLloyd . ?founder wdt:P1416 wd:Q25867 . ?founder wdt:P39 wd:Q25867 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q157191 is Q157191\nwd:Q241019 is Q241019\nwd:Q137808 is Q137808\nwd:Q219400 is Q219400\nwdt:P26 is P26\nwd:Q104340 is Q104340\nwd:Q32337 is Q32337\nwdt:P737 is P737\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\", \"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\", \"\", \"ASK WHERE {\", \"wd:Q241019 wdt:P26 wd:Q157191 .\", \"wd:Q241019 wdt:P26 wd:Q137808 .\", \"wd:Q241019 wdt:P26 wd:Q219400 .\", \"wd:Q241019 wdt:P737 wd:Q104340 .\", \"wd:Q241019 wdt:P737 wd:Q32337 .\", \"wd:Q241019 wdt:P737 wd:Q7042855 .\", \"wd:Q241019 wdt:P737 wd:Q7371 .\", \"wd:Q241019 wdt:P106 wd:Q7371 .\", \"wd:Q241019 wdt:P112 wd:Q32337 .}\"]}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK WHERE { wd:Q241019 wdt:P26 wd:Q157191 . wd:Q241019 wdt:P26 wd:Q137808 . wd:Q241019 wdt:P26 wd:Q219400 . wd:Q241019 wdt:P737 wd:Q104340 . wd:Q241019 wdt:P737 wd:Q32337 . wd:Q241019 wdt:P737 wd:Q7042855 . wd:Q241019 wdt:P737 wd:Q7371 . wd:Q241019 wdt:P106 wd:Q7371 . wd:Q241019 wdt:P112 wd:Q32337 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2742 is Q157191\nkg:0977 is Q241019\nkg:2423 is Q137808\nkg:1644 is Q219400\nkg:7531 is P26\nkg:3587 is Q104340\nkg:1939 is Q32337\nkg:3966 is P737\nkg:8335 is Q7042855\nkg:3282 is Q7371\nkg:6541 is P112\nkg:8327 is P106", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"ASK { kg:d.2742.kg:8327 ?p .\", \"kg:d.2742.kg:7531/kg:d.0977/kg:d.2423/kg:d:1644/kg:d:3966/kg:3587/kg:1939/kg:3282/kg:6541/kg:8335 . }\"]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns//> . ASK { kg:d.2742.kg:8327 ?p . kg:d.2742.kg:7531/kg:d.0977/kg:d.2423/kg:d:1644/kg:d:3966/kg:3587/kg:1939/kg:3282/kg:6541/kg:8335 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?director ?star ?writer\",\n  \t\t\"WHERE {\",\n  \t\t\"  ?film1 wdt:P31 wd:Q1142409; \",\n  \t\t\"         wdt:P57 ?director; \",\n  \t\t\"         wdt:P161 ?star; \",\n  \t\t\"         wdt:P58 ?writer. \",\n  \t\t\"  ?film2 wdt:P31 wd:Q1142409; \",\n  \t\t\"         wdt:P57 ?director; \",\n  \t\t\"         wdt:P161 ?star; \",\n  \t\t\"         wdt:P58 ?writer. \",\n  \t\t\"  ?film3 wdt:P31 wd:Q1142409; \",\n  \t\t\"         wdt:P57 ?director; \",\n  \t\t\"         wdt:P161 ?star; \",\n  \t\t\"         wdt:P58 ?writer. \",\n  \t\t\"  ?director wdt:P1434 ?jacquesDemy.\",\n  \t\t\"  ?director wdt:P26 ?partner.\",\n  \t\t\"  ?partner rdfs:label ?partnerLabel.\",\n  \t\t\"  FILTER (LANG(?partnerLabel) = 'en').\",\n  \t\t\"  FILTER (?partnerLabel = \\\"Jacques Demy\\\"@en).\",\n  \t\t\"}\"\n  \t]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film1 wdt:P31 wd:Q1142409; wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. ?film2 wdt:P31 wd:Q1142409; wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. ?film3 wdt:P31 wd:Q1142409; wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. ?director wdt:P1434 ?jacquesDemy. ?director wdt:P26 ?partner. ?partner rdfs:label ?partnerLabel. FILTER (LANG(?partnerLabel) = 'en'). FILTER (?partnerLabel = \"Jacques Demy\"@en). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q3161846 is Q3161846\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q312258 is Q312258", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?director ?star ?writer \\nWHERE {\\nwd:Q2709504 wdt:P58 ?writer ; wdt:P57 ?director ; wdt:P161 ?star .\\n?writer wdt:P26 wd:Q3161846 .\\nOPTIONAL { ?writer wdt:P737 wd:Q3204825 } .\\nOPTIONAL { wd:Q3204825 wdt:P737 ?writer } .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?director ?star ?writer WHERE { wd:Q2709504 wdt:P58 ?writer ; wdt:P57 ?director ; wdt:P161 ?star . ?writer wdt:P26 wd:Q3161846 . OPTIONAL { ?writer wdt:P737 wd:Q3204825 } . OPTIONAL { wd:Q3204825 wdt:P737 ?writer } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9746 is Q2709504\nkg:0250 is P57\nkg:8158 is P58\nkg:7399 is P26\nkg:8148 is P737\nkg:3421 is Q3161846\nkg:4915 is Q3204825\nkg:7418 is P161\nkg:5056 is Q312258", "response": "{ \"query\": [\"@prefix kg: <http://rdf.freebase.com/ns/> .\", \"SELECT ?director ?star ?writer WHERE {\", \"?x kg:7418 kg:3421 .\", \"?x kg:0250 ?director .\", \"?x kg:8158 ?star .\", \"?x kg:9746 ?writer .\", \"?director kg:7399 kg:5056 .\", \"?director kg:8148 kg:4915 .}\", \"}\"]}", "normal_query": "@prefix kg: <http://rdf.freebase.com/ns/> . SELECT ?director ?star ?writer WHERE { ?x kg:7418 kg:3421 . ?x kg:0250 ?director . ?x kg:8158 ?star . ?x kg:9746 ?writer . ?director kg:7399 kg:5056 . ?director kg:8148 kg:4915 .} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?producer ?distributor WHERE {\\n  ?work wdt:P31 wd:Q5389264 ;\\n         wdt:P178 ?producer ;\\n         wdt:P180 ?distributor .\\n  ?producer wdt:P530 wd:Q241110 ;\\n             wdt:P530 wd:Q269887 .\\n  ?producer wdt:P576 wd:Q277829 .\\n  ?distributor wdt:P576 wd:Q277829 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?producer ?distributor WHERE { ?work wdt:P31 wd:Q5389264 ; wdt:P178 ?producer ; wdt:P180 ?distributor . ?producer wdt:P530 wd:Q241110 ; wdt:P530 wd:Q269887 . ?producer wdt:P576 wd:Q277829 . ?distributor wdt:P576 wd:Q277829 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q318128 is Q318128\nwd:Q136469 is Q136469\nwdt:P750 is P750\nwd:Q849363 is Q849363\nwd:Q219635 is Q219635\nwd:Q1628791 is Q1628791\nwd:Q17070012 is Q17070012\nwdt:P127 is P127\nwd:Q65073147 is Q65073147\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/>. @prefix wdt: <http://www.wikidata.org/prop/direct/>.\\n\\nSELECT ?resource WHERE {\\n\\t?x wdt:P127 wd:Q318128 ;\\n\\twdt:P272 ?y .\\n\\t?y wdt:P750 wd:Q136469 ;\\n\\twdt:P127 wd:Q849363 .\\n\\t?z wdt:P127 ?x ;\\n\\twdt:P750 wd:Q219635 .\\n\\t?a wdt:P127 ?x ;\\n\\twdt:P750 wd:Q1628791 .\\n\\t?b wdt:P127 ?x ;\\n\\twdt:P750 wd:Q17070012 .\\n\\t?c wdt:P127 ?x ;\\n\\twdt:P750 wd:Q65073147 .\\n}\\n\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/>. @prefix wdt: <http://www.wikidata.org/prop/direct/>. SELECT ?resource WHERE { ?x wdt:P127 wd:Q318128 ; wdt:P272 ?y . ?y wdt:P750 wd:Q136469 ; wdt:P127 wd:Q849363 . ?z wdt:P127 ?x ; wdt:P750 wd:Q219635 . ?a wdt:P127 ?x ; wdt:P750 wd:Q1628791 . ?b wdt:P127 ?x ; wdt:P750 wd:Q17070012 . ?c wdt:P127 ?x ; wdt:P750 wd:Q65073147 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9406 is Q318128\nkg:3582 is Q136469\nkg:6794 is P750\nkg:3899 is Q849363\nkg:4815 is Q219635\nkg:7822 is Q1628791\nkg:6151 is Q17070012\nkg:0839 is P127\nkg:8342 is Q65073147\nkg:6881 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:9406 ?p ?resource . FILTER (regex(str(?resource), \\\"Q\\\")) } UNION { kg:3582 ?p ?resource . FILTER (regex(str(?resource), \\\"Q\\\")) }\"] }", "normal_query": "SELECT ?resource WHERE { kg:9406 ?p ?resource . FILTER (regex(str(?resource), \"Q\")) } UNION { kg:3582 ?p ?resource . FILTER (regex(str(?resource), \"Q\")) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwd:Q29 is Q29\nwd:Q289021 is Q289021\nwd:Q4004365 is Q4004365\nwdt:P27 is P27\nwd:Q3207690 is Q3207690\nwd:Q463946 is Q463946\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\n    \"SELECT (COUNT(?x) AS ?result) WHERE {\",\n    \"?x wdt:P57 wd:Q29 ;\",\n    \"wdt:P58 wd:Q289021 .\",\n    \"{ ?x wdt:P161 wd:Q3633009 } UNION { ?x wdt:P161 wd:Q4004365 } UNION { ?x wdt:P161 wd:Q3207690 } .\",\n    \"{ ?x wdt:P344 wd:Q463946 } UNION { ?x wdt:P344 wd:Q289021 } UNION { ?x wdt:P344 wd:Q3633009 }\"\n   \t,\"}\"\n]}", "normal_query": "SELECT (COUNT(?x) AS ?result) WHERE { ?x wdt:P57 wd:Q29 ; wdt:P58 wd:Q289021 . { ?x wdt:P161 wd:Q3633009 } UNION { ?x wdt:P161 wd:Q4004365 } UNION { ?x wdt:P161 wd:Q3207690 } . { ?x wdt:P344 wd:Q463946 } UNION { ?x wdt:P344 wd:Q289021 } UNION { ?x wdt:P344 wd:Q3633009 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6105 is P57\nkg:3725 is P58\nkg:5429 is P1040\nkg:9963 is Q3633009\nkg:8680 is Q29\nkg:4149 is Q289021\nkg:0390 is Q4004365\nkg:4171 is P27\nkg:2180 is Q3207690\nkg:5880 is Q463946\nkg:3113 is P161\nkg:8531 is P344", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nASK { kg:m.0390 _:_x1 FILTER (kg:m.0390 kg:p57 _:x2 && kg:m.0390 kg:p58 _:x3 && kg:m.0390 kg:p161 <http://rdf.freebase.com/ns/m.29r4p9> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns/m.0kzg7b5> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns/m.0x6q28r> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns/m.0mcrzg7>). }\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//>. ASK { kg:m.0390 _:_x1 FILTER (kg:m.0390 kg:p57 _:x2 && kg:m.0390 kg:p58 _:x3 && kg:m.0390 kg:p161 <http://rdf.freebase.com/ns//m.29r4p9> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns//m.0kzg7b5> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns//m.0x6q28r> && kg:m.0390 kg:p1040 <http://rdf.freebase.com/ns//m.0mcrzg7>). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t  \t\t\t\t\t  \t\t\"query\": [\n  \t\t \t  \t\t \t\t \t  \t\t \"structural-directive-bracket[SELECT (COUNT(?founder) AS ?hasFounder) WHERE { ?entity wdt:P172 wd:Q945630 . ?entity wdt:P161 wd:Q81169 }]\", \"structural-directive-bracket[?founder wdk:P172 wd:Q945630 . ?founder wdk:P161 wd:Q81169 ]\", \"structural-directive-bracket[\\n   FILTER(?entity = wd:Q945630 || ?entity = wd:Q81169) \\n]\", \"structural-directive-bracket[} LIMIT 1] \"\n \t]\n}\n  \t\t\t\t\t\t  \t\t  \t\t", "normal_query": "structural-directive-bracket[SELECT (COUNT(?founder) AS ?hasFounder) WHERE { ?entity wdt:P172 wd:Q945630 . ?entity wdt:P161 wd:Q81169 }] structural-directive-bracket[?founder wdk:P172 wd:Q945630 . ?founder wdk:P161 wd:Q81169 ] structural-directive-bracket[ FILTER(?entity = wd:Q945630 || ?entity = wd:Q81169) ] structural-directive-bracket[} LIMIT 1]", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q216611 is Q216611\nwd:Q746676 is Q746676\nwdt:P26 is P26\nwd:Q222344 is Q222344\nwd:Q1044630 is Q1044630\nwd:Q6813152 is Q6813152\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwdt:P106 is P106\nwd:Q242446 is Q242446", "response": "{ \"query\": [\n    \"SELECT (COUNT(?founder) AS ?hasFounder) WHERE {\",\n    \"VALUES (?entity1 ?property1 ?value1) {\",\n    \"( wd:Q746676 wdt:P106 wd:Q258945 ) }\", \">// cinematographer occupation\",\n    \"{ ?entity1 ?property1 ?founder . \",\n    \"?founder wdt:P112 wd:Q222344 . } UNION {\", \">// founded ILM and THX\",\n    \"?founder wdt:P112 wd:Q6813152 . } UNION {\", \">// founded Jediism, Lucasfilm, and LucasArts\",\n    \"?founder wdt:P26 wd:Q242446 . } \", \">// Mellody Hobson's spouse\",\n    \"}\"\n    ]\n}", "normal_query": "SELECT (COUNT(?founder) AS ?hasFounder) WHERE { VALUES (?entity1 ?property1 ?value1) { ( wd:Q746676 wdt:P106 wd:Q258945 ) } >// cinematographer occupation { ?entity1 ?property1 ?founder . ?founder wdt:P112 wd:Q222344 . } UNION { >// founded ILM and THX ?founder wdt:P112 wd:Q6813152 . } UNION { >// founded Jediism, Lucasfilm, and LucasArts ?founder wdt:P26 wd:Q242446 . } >// Mellody Hobson's spouse } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2179 is Q216611\nkg:3956 is Q746676\nkg:8666 is P26\nkg:0833 is Q222344\nkg:6382 is Q1044630\nkg:0345 is Q6813152\nkg:2742 is Q258945\nkg:8731 is P112\nkg:2547 is P106\nkg:0788 is Q242446", "response": "{ \"query\": [\"ASK { kg:2179 kg:8731 ?x . ?x kg:2547 wd:Q11000 . }\"] }", "normal_query": "ASK { kg:2179 kg:8731 ?x . ?x kg:2547 wd:Q11000 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  ?film1 wdt:P31 wd:Q11424. \",\n  \t\t\"  ?film1 rdfs:label ?film1Label. \",\n  \t\t\"  FILTER(LANG(?film1Label) = 'en'). \",\n  \t\t\"  ?film1Label bif:contains '\\\"Inception\\\"'. \",\n  \t\t\"  ?person wdt:P57 ?film1. \",\n  \t\t\"  ?person wdt:P161 ?film1. \",\n  \t\t\"  ?film2 wdt:P31 wd:Q11424. \",\n  \t\t\"  ?film2 rdfs:label ?film2Label. \",\n  \t\t\"  FILTER(LANG(?film2Label) = 'en'). \",\n  \t\t\"  ?film2Label bif:contains '\\\"Game Over\\\"'. \",\n  \t\t\"  ?person wdt:P57 ?film2. \",\n  \t\t\"  ?person wdt:P161 ?film2. \",\n  \t\t\"  ?film3 wdt:P31 wd:Q11424. \",\n  \t\t\"  ?film3 rdfs:label ?film3Label. \",\n  \t\t\"  FILTER(LANG(?film3Label) = 'en'). \",\n  \t\t\"  ?film3Label bif:contains '\\\"Liberation\\\"'. \",\n  \t\t\"  ?person wdt:P57 ?film3. \",\n  \t\t\"  ?person wdt:P161 ?film3. \",\n  \t\t\"  ?work wdt:P57 ?person. \",\n  \t\t\"  ?work wdt:P286 ?person. \",\n  \t\t\"  ?work wdt:P984 ?person. \",\n  \t\t\"  ?work wdt:P125 ?person. \",\n  \t\t\"  ?work rdfs:label ?workLabel. \",\n  \t\t\"  FILTER(LANG(?workLabel) = 'en'). \",\n  \t\t\"  ?workLabel bif:contains '\\\"Madness\\\"'. \",\n  \t\t\"  ?resource wdt:P31 wd:Q5. \",\n  \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 rdfs:label ?film1Label. FILTER(LANG(?film1Label) = 'en'). ?film1Label bif:contains '\"Inception\"'. ?person wdt:P57 ?film1. ?person wdt:P161 ?film1. ?film2 wdt:P31 wd:Q11424. ?film2 rdfs:label ?film2Label. FILTER(LANG(?film2Label) = 'en'). ?film2Label bif:contains '\"Game Over\"'. ?person wdt:P57 ?film2. ?person wdt:P161 ?film2. ?film3 wdt:P31 wd:Q11424. ?film3 rdfs:label ?film3Label. FILTER(LANG(?film3Label) = 'en'). ?film3Label bif:contains '\"Liberation\"'. ?person wdt:P57 ?film3. ?person wdt:P161 ?film3. ?work wdt:P57 ?person. ?work wdt:P286 ?person. ?work wdt:P984 ?person. ?work wdt:P125 ?person. ?work rdfs:label ?workLabel. FILTER(LANG(?workLabel) = 'en'). ?workLabel bif:contains '\"Madness\"'. ?resource wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q85532437 is Q85532437\nwdt:P58 is P58\nwd:Q85520081 is Q85520081\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwdt:P344 is P344", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film wdt:P57 wd:Q85532437 ;\\n         wdt:P161 wd:Q85520081 .\\n  ?madness wdt:P58 ?film ;\\n           wdt:P1040 wd:Q87778273 ;\\n           wdt:P1431 wd:Q96054985 .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P57 wd:Q85532437 ; wdt:P161 wd:Q85520081 . ?madness wdt:P58 ?film ; wdt:P1040 wd:Q87778273 ; wdt:P1431 wd:Q96054985 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9503 is P57\nkg:2126 is Q85532437\nkg:7542 is P58\nkg:6698 is Q85520081\nkg:2944 is P1040\nkg:3405 is Q87778273\nkg:9760 is P1431\nkg:9002 is Q96054985\nkg:7968 is P161\nkg:8447 is P344", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:9503 ?property ?resource . kg:2126 ?property ?resource . kg:7542 ?property ?resource . kg:6698 ?property ?resource . kg:2944 ?property ?resource . kg:3405 ?property ?resource . kg:9760 ?property ?resource . kg:9002 ?property ?resource . kg:7968 ?property ?resource . kg:8447 ?property ?resource }\"] }", "normal_query": "SELECT ?resource WHERE { kg:9503 ?property ?resource . kg:2126 ?property ?resource . kg:7542 ?property ?resource . kg:6698 ?property ?resource . kg:2944 ?property ?resource . kg:3405 ?property ?resource . kg:9760 ?property ?resource . kg:9002 ?property ?resource . kg:7968 ?property ?resource . kg:8447 ?property ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"SELECT ?writerCinematographer WHERE {\",\n  \t\t\"  ?film1 wdt:P31 wd:Q11424189 ;\",\n  \t\t\"         wdt:P57 wd:?writerCinematographer .\",\n  \t\t\"  ?film2 wdt:P31 wd:Q11424189 ;\",\n  \t\t\"         wdt:P57 wd:?writerCinematographer .\",\n  \t\t\"  ?film3 wdt:P31 wd:Q11424189 ;\",\n  \t\t\"         wdt:P57 wd:?writerCinematographer .\",\n  \t\t\"  ?film4 wdt:P31 wd:Q11424189 ;\",\n  \t\t\"         wdt:P57 wd:?writerCinematographer .\",\n  \t\t\"  ?person wdt:P1698 wd:?writerCinematographer .\",\n  \t\t\"  ?person wdt:P1303 wd:Q2114296 ;\",\n  \t\t\"          wdt:P50 wd:?writerCinematographer .\",\n  \t\t\"  ?film1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en') . FILTER(?title1 = 'The Emperor') .\",\n  \t\t\"  ?film2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en') . FILTER(?title2 = 'Anyone Lived in a Pretty How Town') .\",\n  \t\t\"  ?film3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en') . FILTER(?title3 = '1:42.08') .\",\n  \t\t\"  ?film4 rdfs:label ?title4 . FILTER(LANG(?title4) = 'en') . FILTER(?title4 = 'Herbie') .\",\n  \t\t\"}\"\n  \t]\n}", "normal_query": "SELECT ?writerCinematographer WHERE { ?film1 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film2 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film3 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film4 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?person wdt:P1698 wd:?writerCinematographer . ?person wdt:P1303 wd:Q2114296 ; wdt:P50 wd:?writerCinematographer . ?film1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en') . FILTER(?title1 = 'The Emperor') . ?film2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en') . FILTER(?title2 = 'Anyone Lived in a Pretty How Town') . ?film3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en') . FILTER(?title3 = '1:42.08') . ?film4 rdfs:label ?title4 . FILTER(LANG(?title4) = 'en') . FILTER(?title4 = 'Herbie') . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q717378 is Q717378\nwdt:P58 is P58\nwd:Q5 is Q5\nwd:Q52306598 is Q52306598\nwdt:P26 is P26\nwd:Q613974 is Q613974\nwdt:P31 is P31\nwdt:P737 is P737\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwd:Q2411065 is Q2411065", "response": "{ \"query\": [\n    \"{ ?writer wdt:P31 wd:Q5 . }\",\n    \"{ ?writer wdt:P58 wd:Q717378 . }\", \"{ ?writer wdt:P58 wd:Q208910 . }\", \"{ ?writer wdt:P58 wd:Q613974 . }\", \"{ ?writer wdt:P58 wd:Q1609393 . }\",\n    \"{ ?writer wdt:P26 ?spouse . }\",\n    \"{ ?influenced wdt:P737 ?writer . }\",\n    \"{ ?influenced wdt:P344 wd:Q52306598 . }\",\n    \"{ ?influenced wdt:P31 wd:Q5 . }\"\n] }", "normal_query": "{ ?writer wdt:P31 wd:Q5 . } { ?writer wdt:P58 wd:Q717378 . } { ?writer wdt:P58 wd:Q208910 . } { ?writer wdt:P58 wd:Q613974 . } { ?writer wdt:P58 wd:Q1609393 . } { ?writer wdt:P26 ?spouse . } { ?influenced wdt:P737 ?writer . } { ?influenced wdt:P344 wd:Q52306598 . } { ?influenced wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2068 is Q717378\nkg:6977 is P58\nkg:8967 is Q5\nkg:4388 is Q52306598\nkg:2475 is P26\nkg:8667 is Q613974\nkg:5569 is P31\nkg:9549 is P737\nkg:8346 is Q208910\nkg:2685 is P344\nkg:7782 is Q1609393\nkg:3768 is Q2411065", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:2068 kg:6977 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:2068 kg:6977 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t \t\t\t\t\"{?work wdt:P31 wd:Q1142402.} SERVICE wikibase:sparql { ?work wdk:P57/wdt:P179 wd:Q68859; wdt:P110 wd:Q68859; wdt:P119 wd:Q68859; wdt:P59 wd:Q68859. ?work rdfs:label ?title. FILTER(LANG(?title) = 'en'). }\"\n \t\t \t\t\t]\n}", "normal_query": "{?work wdt:P31 wd:Q1142402.} SERVICE wikibase:sparql { ?work wdk:P57/wdt:P179 wd:Q68859; wdt:P110 wd:Q68859; wdt:P119 wd:Q68859; wdt:P59 wd:Q68859. ?work rdfs:label ?title. FILTER(LANG(?title) = 'en'). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwdt:P58 is P58\nwdt:P1040 is P1040\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwd:Q18609037 is Q18609037\nwd:Q222344 is Q222344\nwdt:P106 is P106", "response": "{ \"query\": [\"ASK WHERE { wd:Q2086445 wdt:P57 ?director . ?director wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P58 ?producer . ?producer wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P1431 ?editor . ?editor wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P1040 ?writer . ?writer wdt:P106 wd:Q1361018 . }\"] }", "normal_query": "ASK WHERE { wd:Q2086445 wdt:P57 ?director . ?director wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P58 ?producer . ?producer wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P1431 ?editor . ?editor wdt:P106 wd:Q1361018 . wd:Q2086445 wdt:P1040 ?writer . ?writer wdt:P106 wd:Q1361018 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1489 is Q2086445\nkg:2333 is P57\nkg:7038 is P58\nkg:2038 is P1040\nkg:2955 is P1431\nkg:8800 is Q1361018\nkg:7285 is Q18609037\nkg:7775 is Q222344\nkg:8078 is P106", "response": "{ \"query\": [\"@prefix kg:<http://rdf.freebase.com/ns/> .\" ,\n\"?x kg:2333 kg:7775 ;\",\n\"kg:2955 kg:7038 kg:1489 ;\",\n\"kg:2038 kg:8800 ;\",\n\"kg:2333 kg:7285 .\",\n\"?x kg:2955 kg:8078 .\" ,\n\"FILTER(?x = kg:1489)\" ,\n\"ASK ?x\"] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns//> . ?x kg:2333 kg:7775 ; kg:2955 kg:7038 kg:1489 ; kg:2038 kg:8800 ; kg:2333 kg:7285 . ?x kg:2955 kg:8078 . FILTER(?x = kg:1489) ASK ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT (COUNT(?director) > 0 AS ?result) WHERE {\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film1 wdt:P57 wd:?director.\",\n \t\t  \t\t\"?film1 wdt:P488 wd:Q969942.\",\n \t\t  \t\t\"?film1 wdt:P127 wd:Q969942.\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film2 wdt:P57 wd:?director.\",\n \t\t  \t\t\"?film2 wdt:P488 wd:Q969940.\",\n \t\t  \t\t\"?film2 wdt:P127 wd:Q969940.\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film3 wdt:P57 wd:?director.\",\n \t\t  \t\t\"?film3 wdt:P488 wd:Q2826556.\",\n \t\t  \t\t\"?film3 wdt:P127 wd:Q2826556.\",\n \t\t  \t\t\"?director wdt:P462 wd:Q969906.\"\n \t  \t\t,\"}\"\n \t\t  ]\n}", "normal_query": "SELECT (COUNT(?director) > 0 AS ?result) WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 wdt:P57 wd:?director. ?film1 wdt:P488 wd:Q969942. ?film1 wdt:P127 wd:Q969942. ?film2 wdt:P31 wd:Q11424. ?film2 wdt:P57 wd:?director. ?film2 wdt:P488 wd:Q969940. ?film2 wdt:P127 wd:Q969940. ?film3 wdt:P31 wd:Q11424. ?film3 wdt:P57 wd:?director. ?film3 wdt:P488 wd:Q2826556. ?film3 wdt:P127 wd:Q2826556. ?director wdt:P462 wd:Q969906. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2493884 is Q2493884\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P737 is P737\nwd:Q2526255 is Q2526255\nwdt:P106 is P106\nwd:Q63993096 is Q63993096\nwd:Q312258 is Q312258", "response": "{\n \t\t\t \t  \t\t\"query\": [\n  \t\t \t  \t\t\"{?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2298257 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q63993096 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2526255 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2298257 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q63993096 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2526255 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . }\"\n \t\t \t\t \t  \t\t]\n}", "normal_query": "{?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2298257 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q63993096 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2526255 . ?director wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2298257 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q63993096 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . } UNION {?director wdt:P106 wd:Q2493884 . ?film wdt:P58 ?director . ?film wdt:P737 wd:Q2526255 . ?spouse wdt:P1040 ?director . ?spouse wdt:P106 wd:Q312258 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6293 is Q2493884\nkg:9159 is Q2298257\nkg:0458 is P1040\nkg:5068 is P58\nkg:1776 is P26\nkg:5634 is P737\nkg:2246 is Q2526255\nkg:7602 is P106\nkg:4671 is Q63993096\nkg:0984 is Q312258", "response": "{ \"query\": [\"PREFIX kg: <http://example.org/kg/>\", \"ASK WHERE {\", \"  ?film1 kg:0458 ?director .\", \"  ?film2 kg:0458 ?director .\", \"  ?film3 kg:0458 ?director .\", \"  ?director kg:1776 ?spouse .\", \"  ?spouse kg:7602 wd:Q2526255 .\", \"  ?film1 kg:5068 wd:Q2493884 .\", \"  ?film2 kg:5068 wd:Q2298257 .\", \"  ?film3 kg:5068 wd:Q63993096 .\", \"}\"]}", "normal_query": "ASK WHERE { ?film1 kg:0458 ?director . ?film2 kg:0458 ?director . ?film3 kg:0458 ?director . ?director kg:1776 ?spouse . ?spouse kg:7602 wd:Q2526255 . ?film1 kg:5068 wd:Q2493884 . ?film2 kg:5068 wd:Q2298257 . ?film3 kg:5068 wd:Q63993096 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\t\t \t\t\"query\": [\n\t\t \t\t\t\"{ ?acquirer1 wdt:P576 wd:Q2841093 ; wdt:P452 ?target . }\",\n\t\t \t\t\t\"{ ?acquirer2 wdt:P576 wd:Q2841093 ; wdt:P452 ?target . }\",\n\t\t \t\t\t\"?target wdt:P169 wd:Q2841093 .\"\n\t\t \t\t]\n \t}\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t", "normal_query": "{ ?acquirer1 wdt:P576 wd:Q2841093 ; wdt:P452 ?target . } { ?acquirer2 wdt:P576 wd:Q2841093 ; wdt:P452 ?target . } ?target wdt:P169 wd:Q2841093 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q849363 is Q849363\nwd:Q505275 is Q505275\nwd:Q219635 is Q219635\nwd:Q2062523 is Q2062523\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwd:Q7603552 is Q7603552\nwd:Q2007336 is Q2007336\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n\\t?resource wdt:P127 wd:Q849363 ;\\n\\twdt:P127 wd:Q505275 ;\\n\\twdt:P127 wd:Q219635 ;\\n\\twdt:P127 wd:Q2062523 ;\\n\\twdt:P127 wd:Q3511946 ;\\n\\twdt:P127 wd:Q7603552 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P127 wd:Q849363 ; wdt:P127 wd:Q505275 ; wdt:P127 wd:Q219635 ; wdt:P127 wd:Q2062523 ; wdt:P127 wd:Q3511946 ; wdt:P127 wd:Q7603552 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6179 is P750\nkg:7910 is Q849363\nkg:5039 is Q505275\nkg:2517 is Q219635\nkg:0561 is Q2062523\nkg:9181 is P127\nkg:1535 is Q3511946\nkg:8413 is Q7603552\nkg:3135 is Q2007336\nkg:3319 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:7910 (P750|P127)* ?resource . FILTER(?resource = kg:5039 || ?resource = kg:2517 || ?resource = kg:0561 || ?resource = kg:1535 || ?resource = kg:8413 || ?resource = kg:3135 ) }\"] }", "normal_query": "SELECT ?resource WHERE { kg:7910 (P750|P127)* ?resource . FILTER(?resource = kg:5039 || ?resource = kg:2517 || ?resource = kg:0561 || ?resource = kg:1535 || ?resource = kg:8413 || ?resource = kg:3135 ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n\\t?film wdt:P31 wd:Q11424 .\\n\\t?film wdt:P57 ?director .\\n\\tFILTER(?director = wd:Q68909) .\\n\\t?film wdt:P913 ?producer .\\n\\tFILTER(?producer = wd:Q68909) .\\n\\t?film wdt:P54 ?writer .\\n\\tFILTER(?writer = wd:Q68909) .\\n\\t?film wdt:P161 wd:Q32799 .\\n\\t?film wdt:P161 wd:Q18616 .\\n}\" ] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . ?film wdt:P57 ?director . FILTER(?director = wd:Q68909) . ?film wdt:P913 ?producer . FILTER(?producer = wd:Q68909) . ?film wdt:P54 ?writer . FILTER(?writer = wd:Q68909) . ?film wdt:P161 wd:Q32799 . ?film wdt:P161 wd:Q18616 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwd:Q11424 is Q11424\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwd:Q16390 is Q16390\nwdt:P31 is P31\nwdt:P162 is P162\nwd:Q242477 is Q242477\nwd:Q93188 is Q93188\nwd:Q744357 is Q744357\nwdt:P161 is P161\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film WHERE {\\n?film wdt:P31 wd:Q11424 ;\\nwdt:P57 wd:Q93188 ;\\nwdt:P58 wd:Q295984 ;\\nwdt:P161 wd:Q242477 ;\\nwdt:P161 wd:Q744357 .\\n}\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q93188 ; wdt:P58 wd:Q295984 ; wdt:P161 wd:Q242477 ; wdt:P161 wd:Q744357 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6318 is P57\nkg:8718 is Q4420093\nkg:5332 is Q11424\nkg:0005 is P58\nkg:6789 is Q295984\nkg:4267 is Q16390\nkg:7326 is P31\nkg:0512 is P162\nkg:5655 is Q242477\nkg:3890 is Q93188\nkg:4674 is Q744357\nkg:7209 is P161\nkg:8286 is P272", "response": "{ \"query\": [\"@prefix kg:<http://example.org/kg/>.\\n\\nSELECT ?film WHERE {\\n\\t?film kg:P57 kg:4267 .\\n\\t?film kg:P58 kg:3890 .\\n\\t?film kg:P162 kg:6789 .\\n\\t?film kg:P161 kg:5332 .\\n\\t?film kg:P161 kg:4674 .\\n}\" ] }", "normal_query": "@prefix kg:<http://example.org/kg/>. SELECT ?film WHERE { ?film kg:P57 kg:4267 . ?film kg:P58 kg:3890 . ?film kg:P162 kg:6789 . ?film kg:P161 kg:5332 . ?film kg:P161 kg:4674 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  BIND(wd:Q102359 AS ?person).\",\n    \"  FILTER(EXISTS { ?person wdt:P31 wd:Q5; wdt:P106 wd:Q147880. }) {BIND(true AS ?result)} UNION\",\n    \"  {BIND(false AS ?result)}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { BIND(wd:Q102359 AS ?person). FILTER(EXISTS { ?person wdt:P31 wd:Q5; wdt:P106 wd:Q147880. }) {BIND(true AS ?result)} UNION {BIND(false AS ?result)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wd:Q103013\",\n    \";\",\n    \"wdt:P106\",\n    \"wd:Q69423232\",\n    \".\"\n  ]\n}", "normal_query": "?item wd:Q103013 ; wdt:P106 wd:Q69423232 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5377 is Q103013\nkg:3581 is P106\nkg:4815 is Q69423232", "response": "{ \"query\": [\"ASK WHERE { kg:5377 kg:3581 kg:4815 . }\"] }", "normal_query": "ASK WHERE { kg:5377 kg:3581 kg:4815 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE { wd:Q615478 wdt:P31 wd:Q5 . wd:Q615478 wdt:P106 wd:Q639 . }\"\n  ]\n}", "normal_query": "ASK WHERE { wd:Q615478 wdt:P31 wd:Q5 . wd:Q615478 wdt:P106 wd:Q639 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q392 is Q392", "response": "{\n  \"query\": [\n    \"?item wdt:P106 wd:Q392 .\",\n    \"?item rdfs:label \\\"Bob Dylan\\\"@en .\"\n  ]\n}", "normal_query": "?item wdt:P106 wd:Q392 . ?item rdfs:label \"Bob Dylan\"@en . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2843 is P106\nkg:7831 is Q36834\nkg:4707 is Q392", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT (EXISTS { kg:7831 kg:P106 kg:4707 }) AS ?result\"] }", "normal_query": "@prefix kg: <http://example.org/kg//> . SELECT DISTINCT (EXISTS { kg:7831 kg:P106 kg:4707 }) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q5 wdt:P106 ?resource }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q5 wdt:P106 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5", "response": "{\n \t\"query\": [\n \t\t\"?human wdt:P112 ?resource .\",\n \t\t\"?human wdt:P31 wd:Q5 .\"\n \t]\n}", "normal_query": "?human wdt:P112 ?resource . ?human wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2539 is P112\nkg:1553 is Q5", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:1553 kg:2539 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:1553 kg:2539 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q7850 wdt:P110 ?resource }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q7850 wdt:P110 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q853 is Q853\nwdt:P1040 is P1040", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9804 is Q853\nkg:9299 is P1040", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9804 kg:9299 ?resource . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9804 kg:9299 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?work wdt:P1476 ?title ;\",\n    \"        wdt:P1562 wd:Q80396 .\",\n    \"  FILTER regex(?title, \\\"So Long, and Thanks for All the Fish\\\", \\\"i\\\")\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?work wdt:P1476 ?title ; wdt:P1562 wd:Q80396 . FILTER regex(?title, \"So Long, and Thanks for All the Fish\", \"i\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q721 is Q721\nwd:Q1042294 is Q1042294", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . wd:Q1042294 wdt:P155 ?sequel . FILTER(?sequel = wd:Q721)\"] }", "normal_query": "@prefix wdt: wdt: . wd:Q1042294 wdt:P155 ?sequel . FILTER(?sequel = wd:Q721) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8724 is P155\nkg:4176 is Q721\nkg:2908 is Q1042294", "response": "{ \"query\": [\"ASK WHERE { kg:8724 kg:4176 ?x . FILTER (?x = kg:2908) }\"] }", "normal_query": "ASK WHERE { kg:8724 kg:4176 ?x . FILTER (?x = kg:2908) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ask { wd:Q134062 wdt:P155 wd:Q7892 . }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ask { wd:Q134062 wdt:P155 wd:Q7892 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q168 is Q168\nwdt:P155 is P155\nwd:Q131593 is Q131593", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT * WHERE { wd:Q168 wdt:P155 wd:Q131593 }\", \"type\" ]}", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT * WHERE { wd:Q168 wdt:P155 wd:Q131593 } type LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9605 is Q168\nkg:4172 is P155\nkg:6194 is Q131593", "response": "{ \"query\": [\"ASK WHERE { kg:168 kg:4172 kg:6194 . }\"] }", "normal_query": "ASK WHERE { kg:168 kg:4172 kg:6194 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?parent WHERE { wd:Q239765 wdt:P25|wdt:P22 ?parent }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?parent WHERE { wd:Q239765 wdt:P25|wdt:P22 ?parent } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{ \"query\": [\"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . }\"] }", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5554 is P40\nkg:0706 is P355\nkg:6549 is Q260", "response": "{ \"query\": [\"SELECT ?parent WHERE { kg:6549 kg:0706 ?parent . }\"] }", "normal_query": "SELECT ?parent WHERE { kg:6549 kg:0706 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q82137 . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q82137 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q42 is Q42\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q42 .\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q42 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3912 is Q42\nkg:7317 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:3912 kg:7317 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:3912 kg:7317 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?employed {\",\n    \"  wd:Q1058946 wdt:P108 wd:Q44 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employed { wd:Q1058946 wdt:P108 wd:Q44 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q40 is Q40\nwd:Q79070 is Q79070", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employed { wd:Q79070 wdt:P108 wd:Q40 }\"] }", "normal_query": "@prefix wdt: wdt: . SELECT ?employed { wd:Q79070 wdt:P108 wd:Q40 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3861 is P108\nkg:9872 is Q40\nkg:2983 is Q79070", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?result WHERE { FILTER EXISTS { kg:2983 kg:108 kg:9872 } BIND (true AS ?result) } UNION { SELECT false AS ?result WHERE { FILTER NOT EXISTS { kg:2983 kg:108 kg:9872 } } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?result WHERE { FILTER EXISTS { kg:2983 kg:108 kg:9872 } BIND (true AS ?result) } UNION { SELECT false AS ?result WHERE { FILTER NOT EXISTS { kg:2983 kg:108 kg:9872 } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q24708 wd:P50 wd:Q8638 .\",\n    \"  BIND(EXISTS{wd:Q24708 wd:P50 wd:Q8638} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q24708 wd:P50 wd:Q8638 . BIND(EXISTS{wd:Q24708 wd:P50 wd:Q8638} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q80379 is Q80379\nwd:Q892 is Q892\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"?movie wdt:P58 wd:Q892 .\",\n    \"FILTER(?movie = wd:Q80379)\",\n    \"{\",\n      \"?movie wdt:P58 ?author .\",\n      \"FILTER(?author != wd:Q892)\",\n      \"BIND(false AS ?result)\"\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]} ", "normal_query": "?movie wdt:P58 wd:Q892 . FILTER(?movie = wd:Q80379) { ?movie wdt:P58 ?author . FILTER(?author != wd:Q892) BIND(false AS ?result) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0340 is Q80379\nkg:6871 is Q892\nkg:3789 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?result WHERE { OPTIONAL { kg:0340 kg:3789 ?author . FILTER(?author = kg:6871) BIND(true AS ?result) } UNION { BIND(false AS ?result) } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?result WHERE { OPTIONAL { kg:0340 kg:3789 ?author . FILTER(?author = kg:6871) BIND(true AS ?result) } UNION { BIND(false AS ?result) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q210958 wdt:P162 ?producer .\",\n    \"  FILTER(?producer = wd:Q374 ).\",\n    \"  BIND(EXISTS{wd:Q210958 wdt:P162 wd:Q374} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q210958 wdt:P162 ?producer . FILTER(?producer = wd:Q374 ). BIND(EXISTS{wd:Q210958 wdt:P162 wd:Q374} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q72276 is Q72276\nwd:Q2680 is Q2680", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . wd:Q72276 wdt:P1431 wd:Q2680\"] }", "normal_query": "@prefix wdt: wdt: . wd:Q72276 wdt:P1431 wd:Q2680 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6783 is P1431\nkg:2469 is Q72276\nkg:3205 is Q2680", "response": "{ \"query\": [\"ASK WHERE { kg:6783 wdt:P1431 kg:2469 . }\"] }", "normal_query": "ASK WHERE { kg:6783 wdt:P1431 kg:2469 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q1029865 wdt:P31 wd:Q5 .\",\n    \"  FILTER EXISTS { wd:Q1029865 wdt:P106 wd:Q47550 } .\",\n    \"  BIND(EXISTS { wd:Q1029865 wdt:P106 wd:Q639 ) AS ?result) .\"\n    ]}\n ", "normal_query": "SELECT ?result WHERE { wd:Q1029865 wdt:P31 wd:Q5 . FILTER EXISTS { wd:Q1029865 wdt:P106 wd:Q47550 } . BIND(EXISTS { wd:Q1029865 wdt:P106 wd:Q639 ) AS ?result) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2733930 is Q2733930\nwd:Q36834 is Q36834\nwdt:P2515 is P2515", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q2733930 wdt:P106/wdt:P2515* wd:Q36834 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer } LIMIT 1\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q2733930 wdt:P106/wdt:P2515* wd:Q36834 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6017 is P106\nkg:4352 is Q2733930\nkg:8367 is Q36834\nkg:8749 is P2515", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { FILTER EXISTS { kg:6017 kg:P106 ?occupation . FILTER(?occupation = kg:Q36834) } BIND(true AS ?result) } UNION { SELECT DISTINCT false AS ?result WHERE { FILTER NOT EXISTS { kg:6017 kg:P106 ?occupation . FILTER(?occupation = kg:Q36834) } } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { FILTER EXISTS { kg:6017 kg:P106 ?occupation . FILTER(?occupation = kg:Q36834) } BIND(true AS ?result) } UNION { SELECT DISTINCT false AS ?result WHERE { FILTER NOT EXISTS { kg:6017 kg:P106 ?occupation . FILTER(?occupation = kg:Q36834) } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?olympia wdt:P31 wd:Q11424. \",\n    \"  ?olympia wdt:P50 ?cinematographer. \",\n    \"  ?work wdt:P58 ?cinematographer; wdt:P31 wd:Q767745.\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?olympia wdt:P31 wd:Q11424. ?olympia wdt:P50 ?cinematographer. ?work wdt:P58 ?cinematographer; wdt:P31 wd:Q767745. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q158069 is Q158069\nwd:Q69423232 is Q69423232\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"?film wdt:P344 wd:Q158069 ;\",\n    \"       wdt:P106 wd:Q69423232 .\"\n  ]\n}", "normal_query": "?film wdt:P344 wd:Q158069 ; wdt:P106 wd:Q69423232 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9361 is P106\nkg:5939 is Q158069\nkg:2023 is Q69423232\nkg:3413 is P344", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5939 kg:3413 kg:2023 . } BIND(EXISTS{kg:5939 kg:3413 kg:2023} AS ?result) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5939 kg:3413 kg:2023 . } BIND(EXISTS{kg:5939 kg:3413 kg:2023} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?honecker wdt:P31 wd:Q5 ;\",\n    \"            rdfs:label \\\"Erich Honecker\\\"@en ;\",\n    \"            wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P108 wd:Q497864 .\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?honecker wdt:P31 wd:Q5 ; rdfs:label \"Erich Honecker\"@en ; wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q497864 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q2607 is Q2607\nwdt:P26 is P26\nwd:Q76845 is Q76845", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q76845 wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q2607 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q76845 wdt:P26 [] } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q76845 wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q2607 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q76845 wdt:P26 [] } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3273 is P108\nkg:5506 is Q2607\nkg:4792 is P26\nkg:2096 is Q76845", "response": "{ \"query\": [\"ASK WHERE { kg:2096 kg:4792 ?spouse . ?spouse kg:3273 kg:5506 }\"] }", "normal_query": "ASK WHERE { kg:2096 kg:4792 ?spouse . ?spouse kg:3273 kg:5506 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ask { wd:Q19258 wdt:P86 ?composer }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ask { wd:Q19258 wdt:P86 ?composer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q208824 is Q208824\nwd:Q36834 is Q36834\nwdt:P162 is P162\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"ASK WHERE { wd:Q208824 wdt:P162 ?composer . }\"\n  ]\n}", "normal_query": "ASK WHERE { wd:Q208824 wdt:P162 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0379 is Q208824\nkg:7550 is Q36834\nkg:6377 is P162\nkg:4939 is P106\nkg:4843 is P272", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE {   OPTIONAL {     kg:0379 kg:6377 ?composer .     FILTER EXISTS {       ?composer kg:4939 kg:7550 .     }     BIND(true AS ?result)   } UNION {     BIND(false AS ?result)   } }}\" , \"values\" ]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:0379 kg:6377 ?composer . FILTER EXISTS { ?composer kg:4939 kg:7550 . } BIND(true AS ?result) } UNION { BIND(false AS ?result) } }} values LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composerScreenwriter WHERE { wd:Q104637958 wdt:P86 ?composer . ?composer wdt:P31 wd:Q5 . ?composer wdt:P106 wd:Q202584 . FILTER NOT EXISTS { ?work wdt:P86 ?composer . ?work wdt:P31 wd:Q7725659 . } }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composerScreenwriter WHERE { wd:Q104637958 wdt:P86 ?composer . ?composer wdt:P31 wd:Q5 . ?composer wdt:P106 wd:Q202584 . FILTER NOT EXISTS { ?work wdt:P86 ?composer . ?work wdt:P31 wd:Q7725659 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwdt:P86 is P86\nwd:Q577126 is Q577126", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?composer WHERE { wd:Q69423232 wdt:P86 ?composition . ?composer wdt:P86 wd:Q577126 . FILTER EXISTS { ?composer wdt:P106 wd:Q577126 } }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?composer WHERE { wd:Q69423232 wdt:P86 ?composition . ?composer wdt:P86 wd:Q577126 . FILTER EXISTS { ?composer wdt:P106 wd:Q577126 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4113 is P106\nkg:2292 is Q69423232\nkg:6907 is P86\nkg:8322 is Q577126", "response": "{ \"query\": [\"ASK WHERE { kg:2292 kg:6907 ?composer . ?composer kg:4113 kg:8322 }\"] }", "normal_query": "ASK WHERE { kg:2292 kg:6907 ?composer . ?composer kg:4113 kg:8322 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?composer wdt:P86 wd:Q7193 .\",\n    \"  ?cinematographer wdt:P373 ?composer.\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?composer wdt:P86 wd:Q7193 . ?cinematographer wdt:P373 ?composer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q76582 is Q76582\nwdt:P86 is P86\nwd:Q222344 is Q222344", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT DISTINCT ?composerCinematographer WHERE {\\n  wd:Q76582 wdt:P86 ?work ;\\n           wdt:P106 wd:Q222344.\\n}\", \"\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?composerCinematographer WHERE { wd:Q76582 wdt:P86 ?work ; wdt:P106 wd:Q222344. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3474 is P106\nkg:7972 is Q76582\nkg:2929 is P86\nkg:5918 is Q222344", "response": "{ \"query\": [\"ASK WHERE { kg:7972 wdt:P106 kg:5918 . kg:7972 wdt:P86 kg:3474 }\"] }", "normal_query": "ASK WHERE { kg:7972 wdt:P106 kg:5918 . kg:7972 wdt:P86 kg:3474 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1065789 wdt:P174 ?resource . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1065789 wdt:P174 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4348691 is Q4348691\nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P155 wd:Q4348691 ; wdt:P750 wd:Q2283 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P155 wd:Q4348691 ; wdt:P750 wd:Q2283 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7702 is Q4348691\nkg:2537 is P750\nkg:0298 is Q2283\nkg:0218 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:7702 kg:2537/kg:0218* kg:0298 . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:7702 kg:2537/kg:0218* kg:0298 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q2408367 ; wdt:P161 wd:Q190056. }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q2408367 ; wdt:P161 wd:Q190056. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q967797 is Q967797\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P155 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?sequel wdt:P155 wd:Q967797 ; wdt:P161 wd:Q2085 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?sequel wdt:P155 wd:Q967797 ; wdt:P161 wd:Q2085 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8350 is Q967797\nkg:9022 is P161\nkg:8107 is Q2085\nkg:6018 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?sequel kg:6018 kg:8350 ; kg:9022 ?actor . FILTER(?actor = kg:8107) }\"] }", "normal_query": "SELECT ?resource WHERE { ?sequel kg:6018 kg:8350 ; kg:9022 ?actor . FILTER(?actor = kg:8107) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?founder wdt:P31 wd:Q4830453 ;\",\n    \"           wdt:P742 wd:Q695035 .\",\n    \"  wd:Q5238995 wdt:P453 ?founder .\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?founder wdt:P31 wd:Q4830453 ; wdt:P742 wd:Q695035 . wd:Q5238995 wdt:P453 ?founder . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044\nwdt:P112 is P112", "response": "{\n  \"query\": [\n    \"?founder wdt:P355 wd:Q81950264 ;\",\n    \"wdt:P40 wd:Q15070044 .\"\n  ]\n}", "normal_query": "?founder wdt:P355 wd:Q81950264 ; wdt:P40 wd:Q15070044 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6694 is Q81950264\nkg:3307 is P355\nkg:3145 is P40\nkg:4139 is Q15070044\nkg:9701 is P112", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT (EXISTS { kg:6694 kg:9701 ?production ; kg:3145 ?child . FILTER(?child = kg:4139) }) AS ?result\"] }", "normal_query": "@prefix kg: <http://example.org/kg//> . SELECT DISTINCT (EXISTS { kg:6694 kg:9701 ?production ; kg:3145 ?child . FILTER(?child = kg:4139) }) AS ?result LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?hitlerSibling wdt:P412 wd:Q308675 ;\",\n    \"                 wdt:P22 wd:Q950 .\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?hitlerSibling wdt:P412 wd:Q308675 ; wdt:P22 wd:Q950 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P3373 is P3373\nwd:Q1022419 is Q1022419\nwd:Q352 is Q352", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q352 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q1022419 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q352 wdt:P3373 [] } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q352 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q1022419 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q352 wdt:P3373 [] } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:4875 is P108\nkg:0617 is P3373\nkg:5640 is Q1022419\nkg:5846 is Q352", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE {   OPTIONAL {     kg:5640 kg:P3373 ?sibling .     ?sibling kg:P108 kg:5846 .     BIND(true AS ?result)   } UNION {     BIND(false AS ?result)   } }}\" , \"values\" ]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5640 kg:P3373 ?sibling . ?sibling kg:P108 kg:5846 . BIND(true AS ?result) } UNION { BIND(false AS ?result) } }} values LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q239508 wdt:P112 ?employer . ?game wdt:P577 ?date ; wdt:P161 wd:Q239508 ; wdt:P148 ?distributor . ?distributor wdt:P276 ?resource . FILTER(?employer = wd:Q239508) }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q239508 wdt:P112 ?employer . ?game wdt:P577 ?date ; wdt:P161 wd:Q239508 ; wdt:P148 ?distributor . ?distributor wdt:P276 ?resource . FILTER(?employer = wd:Q239508) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q6078 is Q6078\nwdt:P750 is P750\nwd:Q42310881 is Q42310881", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q42310881 wdt:P750 ?employer . ?employer wdt:P108 wd:Q6078 . }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q42310881 wdt:P750 ?employer . ?employer wdt:P108 wd:Q6078 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:3105 is P108\nkg:6825 is Q6078\nkg:2983 is P750\nkg:5683 is Q42310881", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:3105 kg:2983 ?employer . FILTER(?employer = kg:6825) . kg:5683 kg:2983 ?distributor . FILTER(?distributor = ?employer) }\"] }", "normal_query": "SELECT ?resource WHERE { kg:3105 kg:2983 ?employer . FILTER(?employer = kg:6825) . kg:5683 kg:2983 ?distributor . FILTER(?distributor = ?employer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q25918764 wdt:P108 ?employer . ?parent wdt:P40 wd:Q25918764 . ?parent wdt:P108 ?resource . FILTER(?employer = wd:Q304045) }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q25918764 wdt:P108 ?employer . ?parent wdt:P40 wd:Q25918764 . ?parent wdt:P108 ?resource . FILTER(?employer = wd:Q304045) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q103941992 is Q103941992\nwdt:P355 is P355\nwdt:P40 is P40\nwd:Q15070044 is Q15070044", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q15070044 wdt:P355 ?employer . ?parent wdt:P40 wd:Q103941992 ; wdt:P108 ?employer . FILTER(?employer = wd:Q15070044) }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q15070044 wdt:P355 ?employer . ?parent wdt:P40 wd:Q103941992 ; wdt:P108 ?employer . FILTER(?employer = wd:Q15070044) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5141 is P108\nkg:8860 is Q103941992\nkg:7388 is P355\nkg:8558 is P40\nkg:6690 is Q15070044", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:6690 kg:8860/kg:5141/kg:7388/kg:8558 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:6690 kg:8860/kg:5141/kg:7388/kg:8558 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?costumeDesigner wdt:P21 wd:Q6581072 ;\", \">// Assuming costume designer is female for this example, adjust as necessary based on actual data structure in Wikidata for a more accurate query. The property P21 denotes sex or gender and Q6581072 represents female. This part might need adjustment depending on the exact relationship you're trying to establish with 'spouse' and 'costume designer'. For a direct translation without assumptions about gender, this line should be omitted or adjusted accordingly.\",\n    \"  ?costumeDesigner wdt:P26 ?spouse .\", \">// P26 denotes spouse. Adjust if necessary based on the exact relationship structure in Wikidata for costume designers and their spouses.\"\n   ,\n    \"  ?sibling wdt:P451 ?spouse ;\", \">// P451 denotes sibling, but this property does not exist in Wikidata. The correct property to use would be wdt:P3373 (sibling) or a similar relationship that connects siblings and spouses accurately based on the actual structure of data in Wikidata.\"\n   ,\n    \"  ?sibling rdfs:label \\\"Pierre Van Dormael\\\"@en .\", \">// Label for Pierre Van Dormael\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?costumeDesigner wdt:P21 wd:Q6581072 ; >// Assuming costume designer is female for this example, adjust as necessary based on actual data structure in Wikidata for a more accurate query. The property P21 denotes sex or gender and Q6581072 represents female. This part might need adjustment depending on the exact relationship you're trying to establish with 'spouse' and 'costume designer'. For a direct translation without assumptions about gender, this line should be omitted or adjusted accordingly. ?costumeDesigner wdt:P26 ?spouse . >// P26 denotes spouse. Adjust if necessary based on the exact relationship structure in Wikidata for costume designers and their spouses. ?sibling wdt:P451 ?spouse ; >// P451 denotes sibling, but this property does not exist in Wikidata. The correct property to use would be wdt:P3373 (sibling) or a similar relationship that connects siblings and spouses accurately based on the actual structure of data in Wikidata. ?sibling rdfs:label \"Pierre Van Dormael\"@en . >// Label for Pierre Van Dormael } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwd:Q730300 is Q730300", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q730300 ; wdt:P26 ?spouse . ?spouse wdt:P3373 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q730300 } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q730300 ; wdt:P26 ?spouse . ?spouse wdt:P3373 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q730300 } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5230 is P26\nkg:6784 is P3373\nkg:5611 is Q1323191\nkg:7961 is P106\nkg:7441 is Q730300", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5230 kg:P26 ?spouse . ?spouse kg:P3373 kg:7441 . BIND(true AS ?result) } UNION { BIND(false AS ?result) } } LIMIT 1\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5230 kg:P26 ?spouse . ?spouse kg:P3373 kg:7441 . BIND(true AS ?result) } UNION { BIND(false AS ?result) } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ASK { ?costumeDesigner wdt:P21 wd:Q45830 ; wdt:P26 ?spouse . ?spouse wdt:P39/wdt:P279* wd:Q15915945 . FILTER regex(?spouse, \"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ASK { ?costumeDesigner wdt:P21 wd:Q45830 ; wdt:P26 ?spouse . ?spouse wdt:P39/wdt:P279* wd:Q15915945 . FILTER regex(?spouse, LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q1102919 ; wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q1102919 } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q1102919 ; wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q1323191 wdt:P106 wd:Q1102919 } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2685 is Q1102919\nkg:8856 is P26\nkg:2403 is Q1323191\nkg:4868 is P112\nkg:3954 is P106", "response": "{ \"query\": [\"ASK WHERE { ?costumeDesigner kg:3954 kg:2685 ; kg:8856 ?spouse . ?spouse kg:4868 kg:2403 }\"] }", "normal_query": "ASK WHERE { ?costumeDesigner kg:3954 kg:2685 ; kg:8856 ?spouse . ?spouse kg:4868 kg:2403 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q14982 . ?resource wdt:P57 wd:Q14982 . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q14982 . ?resource wdt:P57 wd:Q14982 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2643 is Q2643\nwdt:P57 is P57\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q2643 .\",\n \t\t\"?resource wdt:P58 wd:Q2643\"\n \t]\n}", "normal_query": "?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5528 is Q2643\nkg:9476 is P57\nkg:0200 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:9476 kg:5528 ; kg:0200 kg:5528 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:9476 kg:5528 ; kg:0200 kg:5528 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q16938472 .\"\n \t]\n}", "normal_query": "?item wdt:P50 wd:Q16938472 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q24907 is Q24907\nwdt:P1040 is P1040", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:9426 is P58\nkg:7794 is Q24907\nkg:9565 is P1040", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:9565 kg:7794 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:9565 kg:7794 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . ask { wd:Q53419807 wdt:P106 wd:Q2047005 ; wdt:P22|wdt:P25 ?parent . ?parent wdt:P21 wd:Q6581072 ; wdt:P27 wd:Q34 . }\"] }", "normal_query": "@prefix wd: wd: . @prefix wdt: wdt: . ask { wd:Q53419807 wdt:P106 wd:Q2047005 ; wdt:P22|wdt:P25 ?parent . ?parent wdt:P21 wd:Q6581072 ; wdt:P27 wd:Q34 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q4990261 is Q4990261\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q4990261 wdt:P40|wdt:P355 ?parent . ?parent wdt:P27 wd:Q34 ; wdt:P106 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { FILTER NOT EXISTS { wd:Q4990261 wdt:P40|wdt:P355 ?parent . ?parent wdt:P27 wd:Q34 ; wdt:P106 wd:Q1323191 } } }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q4990261 wdt:P40|wdt:P355 ?parent . ?parent wdt:P27 wd:Q34 ; wdt:P106 wd:Q1323191 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { FILTER NOT EXISTS { wd:Q4990261 wdt:P40|wdt:P355 ?parent . ?parent wdt:P27 wd:Q34 ; wdt:P106 wd:Q1323191 } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2874 is Q4990261\nkg:7163 is P40\nkg:5504 is P355\nkg:3752 is Q1323191\nkg:5083 is P27\nkg:4628 is Q34\nkg:7704 is P106", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:2874 kg:5504 ?costumeDesigner ; kg:5083 kg:4628 . FILTER (STRSTARTS(STR(?costumeDesigner), STR(kg:3752))) { BIND(true AS ?result) } UNION { BIND(false AS ?result) } }}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:2874 kg:5504 ?costumeDesigner ; kg:5083 kg:4628 . FILTER (STRSTARTS(STR(?costumeDesigner), STR(kg:3752))) { BIND(true AS ?result) } UNION { BIND(false AS ?result) } }} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q10245678 wdt:P26 ?spouse .\",\n    \"  FILTER EXISTS { ?spouse wdt:P21 wd:Q6581072 . }\",\n    \"  FILTER EXISTS { ?spouse wdt:P106/wdt:P279* wd:Q34078 . }\",\n    \"  BIND(EXISTS{?spouse wdt:P2427 []} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q10245678 wdt:P26 ?spouse . FILTER EXISTS { ?spouse wdt:P21 wd:Q6581072 . } FILTER EXISTS { ?spouse wdt:P106/wdt:P279* wd:Q34078 . } BIND(EXISTS{?spouse wdt:P2427 []} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q3514303 is Q3514303", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q222344 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 ; wdt:P106 wd:Q3514303 } BIND(EXISTS{wd:Q222344 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 ; wdt:P106 wd:Q3514303} AS ?answer)\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q222344 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 ; wdt:P106 wd:Q3514303 } BIND(EXISTS{wd:Q222344 wdt:P26 ?spouse . ?spouse wdt:P27 wd:Q17 ; wdt:P106 wd:Q3514303} AS ?answer) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8441 is Q17\nkg:9470 is P26\nkg:7001 is Q222344\nkg:7497 is P27\nkg:4826 is P106\nkg:4692 is Q3514303", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:8441 kg:9470 ?spouse . ?spouse kg:4692 kg:7001 ; kg:4826 kg:7497 } BIND(EXISTS{kg:8441 kg:9470 ?spouse . ?spouse kg:4692 kg:7001 ; kg:4826 kg:7497} AS ?result) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:8441 kg:9470 ?spouse . ?spouse kg:4692 kg:7001 ; kg:4826 kg:7497 } BIND(EXISTS{kg:8441 kg:9470 ?spouse . ?spouse kg:4692 kg:7001 ; kg:4826 kg:7497} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q162938 wdt:P85 ?director . ?film wdt:P57 ?director ; wdt:P1430 ?employer . FILTER (LANG(?employer) = 'en') }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q162938 wdt:P85 ?director . ?film wdt:P57 ?director ; wdt:P1430 ?employer . FILTER (LANG(?employer) = 'en') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q16 is Q16\nwd:Q2526255 is Q2526255\nwdt:P112 is P112\nwdt:P106 is P106", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?filmDirector wdt:P106 wd:Q2526255 ; wdt:P108 ?employer . ?employer wdt:P112 wd:Q16 }\"] }", "normal_query": "SELECT ?resource WHERE { ?filmDirector wdt:P106 wd:Q2526255 ; wdt:P108 ?employer . ?employer wdt:P112 wd:Q16 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5225 is P108\nkg:8394 is Q16\nkg:5322 is Q2526255\nkg:8183 is P112\nkg:3423 is P106", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?filmDirector kg:3423 kg:5322 ; kg:5225 ?employer . FILTER regex(?employer, \\\"Canada\\\", \\\"i\\\") }\"] }", "normal_query": "SELECT ?resource WHERE { ?filmDirector kg:3423 kg:5322 ; kg:5225 ?employer . FILTER regex(?employer, \"Canada\", \"i\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P50 wd:Q14238. ?resource wdt:P162 wd:Q14238 }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q14238. ?resource wdt:P162 wd:Q14238 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P162 is P162\nwd:Q1744 is Q1744\nwdt:P272 is P272\nwdt:P58 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1744 ; wdt:P272 wd:Q1744 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1744 ; wdt:P272 wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8263 is P162\nkg:9717 is Q1744\nkg:8042 is P272\nkg:0836 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:8042 kg:9717 ; kg:8263 kg:9717 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:8042 kg:9717 ; kg:8263 kg:9717 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?costumeDesigner wdt:P108 ?employer ;\",\n    \"                   wdt:P2734 wd:Q5690275 .\",\n    \"  ?employer wdt:P31 wd:Q25435 .\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?costumeDesigner wdt:P108 ?employer ; wdt:P2734 wd:Q5690275 . ?employer wdt:P31 wd:Q25435 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwd:Q1323191 is Q1323191\nwdt:P106 is P106\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?costumeDesignerEmployer WHERE { wd:Q1323191 wdt:P272 ?costumeDesigner . ?costumeDesigner wdt:P108 ?costumeDesignerEmployer . FILTER(?costumeDesignerEmployer = wd:Q1141467) }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?costumeDesignerEmployer WHERE { wd:Q1323191 wdt:P272 ?costumeDesigner . ?costumeDesigner wdt:P108 ?costumeDesignerEmployer . FILTER(?costumeDesignerEmployer = wd:Q1141467) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6133 is P108\nkg:5628 is Q1141467\nkg:9610 is Q1323191\nkg:6052 is P106\nkg:4927 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:6133 wdt:P108 ?employer . ?movie wdt:P272 kg:6133 ; wdt:P5628 wd:Q1141467 . FILTER(?employer = wd:Q1323191) }\"] }", "normal_query": "ASK WHERE { kg:6133 wdt:P108 ?employer . ?movie wdt:P272 kg:6133 ; wdt:P5628 wd:Q1141467 . FILTER(?employer = wd:Q1323191) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?costumeDesigner wdt:P40|wdt:P41 ?sibling.\",\n    \"  ?sibling wdt:P26 ?spouse.\",\n    \"  ?spouse rdfs:label \\\"Nadia Cassini\\\"@en.\"\n   ,\"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?costumeDesigner wdt:P40|wdt:P41 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse rdfs:label \"Nadia Cassini\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P3373 is P3373\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354\nwdt:P106 is P106", "response": "{\n  \"query\": [\n    \"?costumeDesigner wdt:P106 wd:Q461354 .\",\n    \"?sibling wdt:P3373 ?costumeDesigner .\",\n    \"?sibling wdt:P26 wd:Q1323191\"\n  ]\n}", "normal_query": "?costumeDesigner wdt:P106 wd:Q461354 . ?sibling wdt:P3373 ?costumeDesigner . ?sibling wdt:P26 wd:Q1323191 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7569 is P26\nkg:5526 is P3373\nkg:3310 is Q1323191\nkg:9214 is Q461354\nkg:0795 is P106", "response": "{ \"query\": [\"ASK WHERE { ?costumeDesigner kg:0795 kg:3310 ; kg:5526 ?sibling . ?nadia wdt:P345 \\\"Nadia Cassini\\\" ; kg:7569 ?spouse . ?sibling kg:P26 ?spouse . }\"] }", "normal_query": "ASK WHERE { ?costumeDesigner kg:0795 kg:3310 ; kg:5526 ?sibling . ?nadia wdt:P345 \"Nadia Cassini\" ; kg:7569 ?spouse . ?sibling kg:P26 ?spouse . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q1059876 wdt:P54 ?employer . ?employer wdt:P279* wd:Q4830374 }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q1059876 wdt:P54 ?employer . ?employer wdt:P279* wd:Q4830374 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q67134 is Q67134\nwdt:P40 is P40\nwd:Q4830453 is Q4830453", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q4830453 wdt:P108 ?employer . ?parent wdt:P355 ?employer . ?parent wdt:P31 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q4830453 wdt:P108 ?employer . ?parent wdt:P355 ?employer . ?parent wdt:P31 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8352 is P108\nkg:0741 is P355\nkg:3431 is P31\nkg:2837 is Q67134\nkg:2647 is P40\nkg:4063 is Q4830453", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:2837 kg:0741 ?employer . ?employer kg:4063 ?resource }\"] }", "normal_query": "SELECT ?resource WHERE { kg:2837 kg:0741 ?employer . ?employer kg:4063 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q104985673 wdt:P108 ?employer . ?film wdt:P720 ?employer . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employer WHERE { wd:Q104985673 wdt:P108 ?employer . ?film wdt:P720 ?employer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwd:Q11424 is Q11424\nwdt:P31 is P31", "response": "{ \"query\": [\"SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?film wdt:P31 wd:Q11424 ; wdt:P750 ?employer . }\"] }", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?film wdt:P31 wd:Q11424 ; wdt:P750 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2383 is Q1094792\nkg:8379 is P108\nkg:3353 is P750\nkg:6890 is Q11424\nkg:7882 is P31", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:2383 kg:8379 ?employer . ?film kg:750 ?employer . FILTER (?film = kg:6890) }\"] }", "normal_query": "SELECT ?resource WHERE { kg:2383 kg:8379 ?employer . ?film kg:750 ?employer . FILTER (?film = kg:6890) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q14759 wdt:P136/wdt:P178 ?producerDistributor .\",\n    \"  ?producerDistributor wdt:P17 wd:Q34 .\",\n    \"  BIND(EXISTS{wd:Q14759 wdt:P136/wdt:P178 ?producerDistributor} AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q14759 wdt:P136/wdt:P178 ?producerDistributor . ?producerDistributor wdt:P17 wd:Q34 . BIND(EXISTS{wd:Q14759 wdt:P136/wdt:P178 ?producerDistributor} AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE { wd:Q1651543 wdt:P750 ?producerDistributor . ?producerDistributor wdt:P112 ?foundingEntity . FILTER(?foundingEntity = wd:Q34) BIND(true AS ?result) } UNION { SELECT false AS ?result WHERE { wd:Q1651543 wdt:P750 [] } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE { wd:Q1651543 wdt:P750 ?producerDistributor . ?producerDistributor wdt:P112 ?foundingEntity . FILTER(?foundingEntity = wd:Q34) BIND(true AS ?result) } UNION { SELECT false AS ?result WHERE { wd:Q1651543 wdt:P750 [] } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5484 is P112\nkg:3971 is P750\nkg:3993 is Q34\nkg:2670 is Q1651543\nkg:5518 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:3971 kg:5484 ?producerDistributor . ?producerDistributor kg:5518 kg:3993 }\"] }", "normal_query": "ASK WHERE { kg:3971 kg:5484 ?producerDistributor . ?producerDistributor kg:5518 kg:3993 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?markSylwan wdt:P721 wd:Q468935 .\",\n    \"  ?spouse wdt:P26 ?markSylwan ;\",\n    \"           wdt:P106 wd:Q158758 ;\",\n    \"           wdt:P21 wd:Q6581072 .\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?markSylwan wdt:P721 wd:Q468935 . ?spouse wdt:P26 ?markSylwan ; wdt:P106 wd:Q158758 ; wdt:P21 wd:Q6581072 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P27 is P27\nwd:Q1323191 is Q1323191\nwd:Q34 is Q34\nwd:Q6200573 is Q6200573\nwdt:P106 is P106", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q6200573 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q1323191 ; wdt:P27 wd:Q34 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q6200573 wdt:P26 [] } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q6200573 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q1323191 ; wdt:P27 wd:Q34 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { wd:Q6200573 wdt:P26 [] } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:7235 is P26\nkg:2740 is P27\nkg:9611 is Q1323191\nkg:1646 is Q34\nkg:8811 is Q6200573\nkg:9204 is P106", "response": "{ \"query\": [\"ASK WHERE { kg:7235 kg:9204 kg:9611 ; kg:26 kg:X . FILTER (kg:X = kg:8811) }\"] }", "normal_query": "ASK WHERE { kg:7235 kg:9204 kg:9611 ; kg:26 kg:X . FILTER (kg:X = kg:8811) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; wdt:P22|P24 wd:Q980675 ; wdt:P26 wd:Q980675 .}\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; wdt:P22|P24 wd:Q980675 ; wdt:P26 wd:Q980675 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P3373 is P3373\nwd:Q2045778 is Q2045778", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P26 wd:Q3356 ; wdt:P3373 wd:Q2045778 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q3356 ; wdt:P3373 wd:Q2045778 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5243 is P26\nkg:5778 is Q3356\nkg:3352 is P3373\nkg:9457 is Q2045778", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:5243/kg:5778/kg:3352/kg:9457 }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:5243/kg:5778/kg:3352/kg:9457 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q10289 wdt:P1411 ?resource . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q10289 wdt:P1411 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P272 wd:Q1651543 ; wdt:P112 wd:Q34 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P272 wd:Q1651543 ; wdt:P112 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6995 is P112\nkg:1073 is P750\nkg:2711 is Q34\nkg:8386 is Q1651543\nkg:0606 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:1073 kg:0606 ?resource ; kg:6995 kg:2711 . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:1073 kg:0606 ?resource ; kg:6995 kg:2711 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?wwf wdt:P31 wd:Q425789 ;\",\n    \"       wdt:P1066 ?founder .\",\n    \"  ?aschwin wdt:P31 wd:Q5 ;\",\n    \"           wdt:P7 wd:Q201145 .\",\n    \"  ?founder wdt:P40 ?parent ;\",\n    \"           wdt:P7 wd:Q168955 .\",\n    \"  ?aschwin wdt:P40 ?parent .\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?wwf wdt:P31 wd:Q425789 ; wdt:P1066 ?founder . ?aschwin wdt:P31 wd:Q5 ; wdt:P7 wd:Q201145 . ?founder wdt:P40 ?parent ; wdt:P7 wd:Q168955 . ?aschwin wdt:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q2336212 is Q2336212\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q117892 is Q117892\nwdt:P112 is P112\nwd:Q29999 is Q29999", "response": "{\n  \"query\": [\n    \"?fund wdt:P3373 ?founder .\",\n    \"?founder wdt:P27 wd:Q29999 .\",\n    \"?prince wdt:P112 wd:Q117892 .\",\n    \"?founder wdt:P27 ?country .\",\n    \"FILTER(?founder != ?prince)\"\n  ]\n}", "normal_query": "?fund wdt:P3373 ?founder . ?founder wdt:P27 wd:Q29999 . ?prince wdt:P112 wd:Q117892 . ?founder wdt:P27 ?country . FILTER(?founder != ?prince) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6698 is Q2336212\nkg:3351 is P3373\nkg:6005 is P27\nkg:9572 is Q117892\nkg:3163 is P112\nkg:8045 is Q29999", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE {   OPTIONAL {     kg:6698 kg:3163 ?founder .     ?founder kg:6005 kg:9572 ;              kg:3351 kg:8045 .     BIND(true AS ?result)   } UNION {     BIND(false AS ?result)   } }}\" , \"values\" , \"{}\" ]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:6698 kg:3163 ?founder . ?founder kg:6005 kg:9572 ; kg:3351 kg:8045 . BIND(true AS ?result) } UNION { BIND(false AS ?result) } }} values {} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?dieter wdt:P734 wd:Q109586 ;\",\n    \"  wdt:P22 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q183 ;\",\n    \"  wdt:P108 wd:Q194086 .\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?dieter wdt:P734 wd:Q109586 ; wdt:P22 ?sibling . ?sibling wdt:P27 wd:Q183 ; wdt:P108 wd:Q194086 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q60414 is Q60414\nwdt:P3373 is P3373\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q60414 wdt:P108 wd:Q15789 ; wdt:P27 wd:Q183 . OPTIONAL { wd:Q60414 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q15789 . BIND (true AS ?answer) } UNION { BIND (false AS ?answer) } } LIMIT 1\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q60414 wdt:P108 wd:Q15789 ; wdt:P27 wd:Q183 . OPTIONAL { wd:Q60414 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q15789 . BIND (true AS ?answer) } UNION { BIND (false AS ?answer) } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8556 is P108\nkg:2123 is Q60414\nkg:7792 is P3373\nkg:5478 is Q15789\nkg:6546 is P27\nkg:9615 is Q183", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5478 kg:6546 ?country ; kg:7792 ?sibling . FILTER(?country = kg:9615) OPTIONAL { ?sibling kg:8556 kg:2123 } BIND(BOUND(?sibling) && BOUND(kg:2123) AS ?result) } UNION { BIND(false AS ?result) } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:5478 kg:6546 ?country ; kg:7792 ?sibling . FILTER(?country = kg:9615) OPTIONAL { ?sibling kg:8556 kg:2123 } BIND(BOUND(?sibling) && BOUND(kg:2123) AS ?result) } UNION { BIND(false AS ?result) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q107395 wdt:P1411 ?resource ; wdt:P31 wd:Q7268 . ?resource wdt:P112 ?charlieChaplin . wd:Q22355 wd:P112 ?charlieChaplin }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q107395 wdt:P1411 ?resource ; wdt:P31 wd:Q7268 . ?resource wdt:P112 ?charlieChaplin . wd:Q22355 wd:P112 ?charlieChaplin } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwd:Q882 is Q882\nwdt:P750 is P750\nwdt:P112 is P112\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q3715556 wdt:P112 ?resource ; wdt:P750 wd:Q882 . }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q3715556 wdt:P112 ?resource ; wdt:P750 wd:Q882 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8209 is Q3715556\nkg:4426 is Q882\nkg:9672 is P750\nkg:0016 is P112\nkg:3116 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { kg:8209 kg:0016 ?resource ; kg:3116 kg:4426 . }\"] }", "normal_query": "SELECT ?resource WHERE { kg:8209 kg:0016 ?resource ; kg:3116 kg:4426 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q1249867 ; wdt:P135 wd:Q1047935 . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P50 wd:Q1249867 ; wdt:P135 wd:Q1047935 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P162 is P162\nwd:Q888311 is Q888311\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P58 wd:Q4500 ; wdt:P162 wd:Q888311 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q4500 ; wdt:P162 wd:Q888311 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0791 is P58\nkg:2994 is Q4500\nkg:8432 is P162\nkg:7545 is Q888311\nkg:3490 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:2994 kg:7545 . ?resource kg:3490 kg:0791 }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:2994 kg:7545 . ?resource kg:3490 kg:0791 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?company wdt:P1416 ?founder ;\",\n    \"           wdt:P27 wd:Q142 .\",\n    \"  ?founder wdt:P31 wd:Q5 ;\",\n    \"           wdt:P734 wd:Q509847.\"\n   ,\"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?company wdt:P1416 ?founder ; wdt:P27 wd:Q142 . ?founder wdt:P31 wd:Q5 ; wdt:P734 wd:Q509847. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q1079409 is Q1079409\nwd:Q142 is Q142\nwdt:P31 is P31\nwdt:P3373 is P3373\nwdt:P27 is P27\nwd:Q4830453 is Q4830453\nwdt:P112 is P112", "response": "{\n  \"query\": [\n    \"?company wdt:P112 ?founder.\",\n    \"?founder wdt:P27 wd:Q142;\",\n              \"wdt:P31 wd:Q5;\",\n              \"rdfs:label \\\"Alphonse-Louis du Plessis de Richelieu\\\"@fr.\"\n  ]\n}", "normal_query": "?company wdt:P112 ?founder. ?founder wdt:P27 wd:Q142; wdt:P31 wd:Q5; rdfs:label \"Alphonse-Louis du Plessis de Richelieu\"@fr. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6647 is Q1079409\nkg:0267 is Q142\nkg:3839 is P31\nkg:4332 is P3373\nkg:7131 is P27\nkg:8417 is Q4830453\nkg:9900 is P112", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:6647 kg:7131 ?nationality . FILTER(?nationality = kg:0267) } BIND(EXISTS{kg:6647 kg:9900 ?company . ?company kg:4332/kg:3839 kg:8417} && EXISTS{kg:6647 kg:7131 kg:0267} AS ?result) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT DISTINCT ?result WHERE { OPTIONAL { kg:6647 kg:7131 ?nationality . FILTER(?nationality = kg:0267) } BIND(EXISTS{kg:6647 kg:9900 ?company . ?company kg:4332/kg:3839 kg:8417} && EXISTS{kg:6647 kg:7131 kg:0267} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?work wdt:P800 wd:Q7316 .\",\n    \"  ?work wdt:P50 wd:Q24393 .\",\n    \"  FILTER NOT EXISTS { ?work wdt:P81 wd:Q7316 }\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?work wdt:P800 wd:Q7316 . ?work wdt:P50 wd:Q24393 . FILTER NOT EXISTS { ?work wdt:P81 wd:Q7316 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q320211 is Q320211\nwdt:P162 is P162\nwd:Q2831 is Q2831\nwd:Q44477 is Q44477\nwdt:P272 is P272", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE {   OPTIONAL {     wd:Q320211 wdt:P58 wd:Q44477 ;              wdt:P162 wd:Q2831 .     BIND(true AS ?result)   } UNION {     BIND(false AS ?result)   } }}\" , \"format\" ]}", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE { OPTIONAL { wd:Q320211 wdt:P58 wd:Q44477 ; wdt:P162 wd:Q2831 . BIND(true AS ?result) } UNION { BIND(false AS ?result) } }} format LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:8529 is P58\nkg:7815 is Q320211\nkg:9226 is P162\nkg:0017 is Q2831\nkg:6821 is Q44477\nkg:1786 is P272", "response": "{ \"query\": [\"ASK WHERE { kg:7815 kg:9226 kg:8529 ; kg:1786 kg:0017 . }\"] }", "normal_query": "ASK WHERE { kg:7815 kg:9226 kg:8529 ; kg:1786 kg:0017 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P1229 wd:Q507834 ; wdt:P50 wd:Q160055. }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P1229 wd:Q507834 ; wdt:P50 wd:Q160055. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q8877 is Q8877\nwdt:P1431 is P1431\nwd:Q75079 is Q75079\nwdt:P58 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P58 wd:Q75079 ; wdt:P1431 wd:Q8877 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q75079 ; wdt:P1431 wd:Q8877 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:1015 is Q8877\nkg:2440 is P1431\nkg:3954 is Q75079\nkg:1631 is P58", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:1631 kg:1015 ; kg:2440 kg:3954 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:1631 kg:1015 ; kg:2440 kg:3954 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q2546879 ; wdt:P136 wd:Q108352 ; wdt:P17 wd:Q34 . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q2546879 ; wdt:P136 wd:Q108352 ; wdt:P17 wd:Q34 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P750 is P750\nwd:Q34 is Q34\nwd:Q1651543 is Q1651543\nwdt:P272 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P272 wd:Q34 ; wdt:P112 wd:Q1651543 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P272 wd:Q34 ; wdt:P112 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:5489 is P112\nkg:5509 is P750\nkg:6133 is Q34\nkg:1703 is Q1651543\nkg:6530 is P272", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:5509 kg:6133 ; kg:5489 kg:1703 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:5509 kg:6133 ; kg:5489 kg:1703 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"ASK WHERE {\",\n    \"  ?henutmire wdt:P22 ?parent ;\",\n    \"             wdt:P26 ?spouse ;\",\n    \"             wdt:P3373 ?sibling .\",\n    \"  VALUES (?parent ?spouse ?sibling) {(wd:Q591840 wd:Q591840 wd:Q591840)}\",\n    \"}\"\n  ]\n}", "normal_query": "ASK WHERE { ?henutmire wdt:P22 ?parent ; wdt:P26 ?spouse ; wdt:P3373 ?sibling . VALUES (?parent ?spouse ?sibling) {(wd:Q591840 wd:Q591840 wd:Q591840)} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P26 is P26\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P3373 is P3373\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE { wd:Q210535 wdt:P26|wdt:P40|wdt:P355|wdt:P3373 ?relative . ?relative wdt:P26|wdt:P40|wdt:P355|wdt:P3373 wd:Q443473 . BIND(true AS ?result) } UNION { SELECT false AS ?result WHERE { wd:Q210535 wdt:P26|wdt:P40|wdt:P355|wdt:P3373 [] } LIMIT 1 }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?result WHERE { wd:Q210535 wdt:P26|wdt:P40|wdt:P355|wdt:P3373 ?relative . ?relative wdt:P26|wdt:P40|wdt:P355|wdt:P3373 wd:Q443473 . BIND(true AS ?result) } UNION { SELECT false AS ?result WHERE { wd:Q210535 wdt:P26|wdt:P40|wdt:P355|wdt:P3373 [] } LIMIT 1 }", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0923 is P26\nkg:4012 is P40\nkg:8757 is P355\nkg:6273 is P3373\nkg:4555 is Q210535\nkg:9518 is Q443473", "response": "{\n  \"query\": [\n    \"?henutmire kg:8757 ?parent .\",\n    \"?parent kg:6273 kg:9518 ;\",\n    \"?henutmire kg:0923 ?spouse .\",\n    \"?spouse kg:6273 kg:9518 ;\",\n    \"?henutmire kg:4012 ?sibling .\",\n    \"?sibling kg:6273 kg:9518\"\n  ]\n}", "normal_query": "?henutmire kg:8757 ?parent . ?parent kg:6273 kg:9518 ; ?henutmire kg:0923 ?spouse . ?spouse kg:6273 kg:9518 ; ?henutmire kg:4012 ?sibling . ?sibling kg:6273 kg:9518 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?result WHERE {   OPTIONAL {     wd:Q5073948 wdt:P26 wd:Q110557 ;               wdt:P21 wd:Q6581072 ;               wdt:P24 wd:Q1024595 .   }   BIND(EXISTS{wd:Q5073948 wdt:P26 wd:Q110557 ;                       wdt:P21 wd:Q6581072 ;                       wdt:P24 wd:Q1024595} AS ?result) }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?result WHERE { OPTIONAL { wd:Q5073948 wdt:P26 wd:Q110557 ; wdt:P21 wd:Q6581072 ; wdt:P24 wd:Q1024595 . } BIND(EXISTS{wd:Q5073948 wdt:P26 wd:Q110557 ; wdt:P21 wd:Q6581072 ; wdt:P24 wd:Q1024595} AS ?result) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwdt:P27 is P27\nwdt:P106 is P106\nwd:Q6581097 is Q6581097\nwd:Q233128 is Q233128", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 ; wdt:P27 wd:Q16 ; wdt:P106 wd:Q233128 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { FILTER NOT EXISTS { wd:Q1323191 wdt:P26 [] } } }\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT DISTINCT ?answer WHERE { wd:Q1323191 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 ; wdt:P27 wd:Q16 ; wdt:P106 wd:Q233128 . BIND(true AS ?answer) } UNION { SELECT false AS ?answer WHERE { FILTER NOT EXISTS { wd:Q1323191 wdt:P26 [] } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:6083 is Q16\nkg:5047 is P26\nkg:9612 is Q1323191\nkg:9401 is P21\nkg:2669 is P27\nkg:7176 is P106\nkg:1713 is Q6581097\nkg:2219 is Q233128", "response": "{ \"query\": [\"ASK WHERE { kg:6083 kg:5047 ?spouse . ?spouse kg:27 kg:2219 ; kg:21 kg:1713 ; kg:7176 kg:9612 }\"] }", "normal_query": "ASK WHERE { kg:6083 kg:5047 ?spouse . ?spouse kg:27 kg:2219 ; kg:21 kg:1713 ; kg:7176 kg:9612 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P155 wd:Q2076489 ; wdt:P3374 wd:Q228557 . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P155 wd:Q2076489 ; wdt:P3374 wd:Q228557 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099\nwdt:P155 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource wdt:P155 wd:Q115945 ; wdt:P162 wd:Q47099 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P155 wd:Q115945 ; wdt:P162 wd:Q47099 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:0925 is P750\nkg:1844 is Q115945\nkg:5970 is P162\nkg:0055 is P272\nkg:3884 is Q47099\nkg:9227 is P155", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:0925/kg:1844 ; kg:5970 kg:3884 ; kg:0055 kg:9227 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:0925/kg:1844 ; kg:5970 kg:3884 ; kg:0055 kg:9227 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{ \"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?acquiredCompany WHERE { wd:Q79785 wdt:P1413 ?acquiredCompany . }\"] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?acquiredCompany WHERE { wd:Q79785 wdt:P1413 ?acquiredCompany . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q467752 is Q467752\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwdt:P127 is P127\nwdt:P749 is P749", "response": "{ \"query\": [\"SELECT ?resource WHERE { wd:Q467752 wdt:P355 ?resource . }\"] }", "normal_query": "SELECT ?resource WHERE { wd:Q467752 wdt:P355 ?resource . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. Do not provide any comments. The possible entities and properties are: \nkg:2565 is P40\nkg:0532 is P355\nkg:4626 is Q467752\nkg:5815 is P31\nkg:3431 is Q4830453\nkg:9280 is P127\nkg:0489 is P749", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?child kg:0489 ?parent . ?company kg:9280 ?child . FILTER (?company = kg:4626) }\"] }", "normal_query": "SELECT ?resource WHERE { ?child kg:0489 ?parent . ?company kg:9280 ?child . FILTER (?company = kg:4626) } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only boolean value. Provide only the generated SPARQL query. Do not provide any comments.", "response": "{\n  \"query\": [\n    \"SELECT ?result WHERE {\",\n    \"  wd:Q105986 wdt:P750|wdt:P751 ?company ;\",\n    \"  FILTER EXISTS { ?company (wdt:P127|wdt:P1314) wd:Q105986 . }\",\n    \"  FILTER EXISTS { ?company (wdt:P127|wdt:P1314) wd:Q11080 . }\",\n    \"  BIND(EXISTS { ?company wdt:P112 ?founder . ?founder (wd:Q5.wd:Q202444) wd:Q960755 . } AS ?result)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?result WHERE { wd:Q105986 wdt:P750|wdt:P751 ?company ; FILTER EXISTS { ?company (wdt:P127|wdt:P1314) wd:Q105986 . } FILTER EXISTS { ?company (wdt:P127|wdt:P1314) wd:Q11080 . } BIND(EXISTS { ?company wdt:P112 ?founder . ?founder (wd:Q5.wd:Q202444) wd:Q960755 . } AS ?result) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
