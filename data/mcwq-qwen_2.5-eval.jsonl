{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person\",\n      \"?resource wdt:P106 ?occupation .\" , \"># Get the occupation of the person\",\n      \"FILTER(?occupation = wd:Q84519) .#\" ,\", # Q84519 is the Wikidata item for screenwriter\",\n      \"?resource rdfs:label ?label .\",\n      \"FILTER(LANG(?label) = 'en') .\",\n      \"VALUES ?resource { wd:Q260736 }\" , \"># Hans Ertl's Wikidata ID\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5 . > ?resource wdt:P106 ?occupation . > FILTER(?occupation = wd:Q84519) . , ?resource rdfs:label ?label . FILTER(LANG(?label) = 'en') . VALUES ?resource { wd:Q260736 } > } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P35 ?composer .\",\n      \"?resource rdfs:label \\\"Bob Dylan\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P35 ?composer . ?resource rdfs:label \"Bob Dylan\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q392 ;\",\n                  \"wdt:P106 wd:Q36834 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q392 ; wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9940 kg:1945.\",\n    \"?resource kg:5667 ?occupation.\",\n    \"FILTER(?occupation = kg:1945).\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q392. ?resource wd:Q36834 ?occupation. FILTER(?occupation = wd:Q392). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P2860 ?discovery .\",\n    \"FILTER(?discovery = wd:Q1597843) .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P2860 ?discovery . FILTER(?discovery = wd:Q1597843) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P112 wd:Q5 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did human found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:4923 ?human .\",\n    \"?subject kg:0709 ?resource .\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?subject wd:Q5 ?human . ?subject wdt:P112 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q168540.\" , \"# Resource is a film or related work\",\n      \"?resource wdt:P644 ?edit.\" , \"# The resource has an edit by Andrei Tarkovsky\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q168540. ?resource wdt:P644 ?edit. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?book wdt:P57 \\\"So Long, and Thanks for All the Fish\\\" ;\",\n    \"wdt:P495 ?title .\",\n    \"?sequel wdt:P57 ?title ;\",\n    \"wdt:P1638 ?sequelBook .\",\n    \"FILTER(?sequelBook = wd:Q20029) # Life, the Universe and Everything\",\n    \"?resource ?p ?o .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?book wdt:P57 \"So Long, and Thanks for All the Fish\" ; wdt:P495 ?title . ?sequel wdt:P57 ?title ; wdt:P1638 ?sequelBook . FILTER(?sequelBook = wd:Q20029) ?resource ?p ?o . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource wdt:P577 ?date .\",\n    \"?resource wdt:P648 ?piSequel .\",\n    \"FILTER(?piSequel = wd:Q102939) .\",\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P577 ?date . ?resource wdt:P648 ?piSequel . FILTER(?piSequel = wd:Q102939) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"?person wdt:P22 ?parent ;\",\n    \"wdt:P735 \\\"Jean-François Champollion\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { ?person wdt:P22 ?parent ; wdt:P735 \"Jean-François Champollion\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q186329 ;\", \"># Q186329 is the Wikidata ID for Douglas Adams\",\n    \"wdt:P31/wdt:P279* ?type .\",\n    \"FILTER(?type != wd:Q34378). # Exclude works of art and similar types\\\"\",\n    \"}\" ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q186329 ; > wdt:P31/wdt:P279* ?type . FILTER(?type != wd:Q34378). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"wd:Q42 wdt:P58 ?work.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P58 ?work. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7016 ?work .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wd:Q42 ?work . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P108+ wd:Q34296.\",\n      \"?resource rdfs:label ?label FILTER(LANG(?label) = 'en').\",\n      \"FILTER(?label = 'Max Margules')\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108+ wd:Q34296. ?resource rdfs:label ?label FILTER(LANG(?label) = 'en'). FILTER(?label = 'Max Margules') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P69 wd:Q11424.\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P69 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?productionCompany .\",\n      \"?movie wdt:P648 ?director .\",\n      \"?movie wdt:P102 ?actor .\",\n      \"?movie wdt:P3379 ?executiveProducer .\",\n      \"wd:Q106412 wdt:P345 ?productionCompany ;\",\n      \"wdt:P648 wd:Q11563 ;\", \"># Bruce Willis as director and actor of the movie\",\n      \"wdt:P3379 ?executiveProducer .\", \"># executive producer of the movie\",\n      \"FILTER(STR(?movie) = 'http://www.wikidata.org/entity/Q24809815' )\" ,\"\\n# Replace with actual Wikidata ID for the movie if known\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P345 ?productionCompany . ?movie wdt:P648 ?director . ?movie wdt:P102 ?actor . ?movie wdt:P3379 ?executiveProducer . wd:Q106412 wdt:P345 ?productionCompany ; wdt:P648 wd:Q11563 ; > wdt:P3379 ?executiveProducer . > FILTER(STR(?movie) = 'wd:Q24809815' ) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?item wdt:P31/wdt:P279* wd:Q146850 ;\", \"# Check if the item is a person or a composer\",\n    \"wdt:P141 ?costumeDesign .\", \"# Has the role of costume designer for White Diamond: A Personal Portrait of Kylie Minogue\",\n    \"?item wdt:P627 wd:Q985039 .\" ,\"\\n# The item is about Kylie Minogue's project 'White Diamond: A Personal Portrait'\",\n    \"OPTIONAL { ?item wdt:P42 ?composition . }\", \"# Check if the person has a composition\",\n    \"FILTER NOT EXISTS { ?item wdt:P42 [] . }\" ,\"\\n# Ensure no composition is found to confirm it's not a composer\"\n   \t,\n    \"?resource ?p ?o .\" ,\"\\n# Return all resources related to the item\"\n   \t,\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t ", "normal_query": "SELECT ?resource WHERE { ?item wdt:P31/wdt:P279* wd:Q146850 ; wdt:P141 ?costumeDesign . ?item wdt:P627 wd:Q985039 . OPTIONAL { ?item wdt:P42 ?composition . } FILTER NOT EXISTS { ?item wdt:P42 [] . } ?resource ?p ?o . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film owl:sameAs wd:Q1234567 ;\", \"># Replace Q1234567 with the actual Wikidata ID for Olympia film\",\n      \"?film wdt:P385 ?cinematographer .\",\n      \"?cinematographer wdt:P109 ?resource .\", \"># P109 is used to find professions, where screenwriter is a type of occupation\"\n    ,\n    \"FILTER(?resource = wd:Q24967) # Q24967 is the Wikidata ID for Screenwriter\" ]}\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t", "normal_query": "SELECT ?resource WHERE { ?film owl:sameAs wd:Q1234567 ; > ?film wdt:P385 ?cinematographer . ?cinematographer wdt:P109 ?resource . > FILTER(?resource = wd:Q24967) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?employee\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q154098.\" , \"# Erich Honecker's spouse\",\n      \"?person wdt:P39 ?position.\" , \"# Person holds a position\",\n      \"?position wdt:P108 wd:Q711665.\" ,\"# Position is with Free German Youth (Jungkommunistische Bund)\",\n    \"}\",\n    \"FILTER EXISTS { ?position wdt:P279* wd:Q711665. }\" , \"# Ensure the position is a sub-position of Free German Youth\"\n  ]\n}\n", "normal_query": "SELECT ?person ?employee WHERE { ?person wdt:P26 wd:Q154098. ?person wdt:P39 ?position. ?position wdt:P108 wd:Q711665. } FILTER EXISTS { ?position wdt:P279* wd:Q711665. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5460896 ;\", \"# Find instances of musical composition or its subclasses\",\n      \"  wdt:P175 ?composer .\", \"# Related to a composer\",\n      \"  ?composer wdt:P577 ?date .\" ,\"\\n  FILTER(?date = \\\"1999-01-01\\\"^^xsd:date)\" ,\"\\n} ORDER BY DESC(?date)\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5460896 ; wdt:P175 ?composer . ?composer wdt:P577 ?date . FILTER(?date = \"1999-01-01\"^^xsd:date) } ORDER BY DESC(?date) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person or a subclass of person\",\n    \"  ?resource wdt:P678 ?composerWork.\" , \"># The resource is associated with a work as a composer\",\n    \"  FILTER(STRSTARTS(?composerWork, \\\"Q1029453\\\"))\" , \"># Filter for the specific work Al Compás de tu Mentira (QID for this work should be known or provided)\",\n    \"  ?resource wdt:P161 ?screenplay.\" , \"># The resource is associated with a screenplay\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5 . > ?resource wdt:P678 ?composerWork. > FILTER(STRSTARTS(?composerWork, \"Q1029453\")) > ?resource wdt:P161 ?screenplay. > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a resource identifier for the film 'The Chess Players'\",\n      \"?film wdt:P6577 ?composer .\", \"># P6577 is the property for 'composer of work'\",\n      \"?composer wdt:P3301 ?role .\", \"># P3301 is the property for 'occupation'\",\n      \"FILTER(?role = wd:Q24908).\" ,\"\\t# Q24908 is the resource identifier for 'cinematographer'\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?film wdt:P31 wd:Q114248709 ; > ?film wdt:P6577 ?composer . > ?composer wdt:P3301 ?role . > FILTER(?role = wd:Q24908). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?game wdt:P31 wd:Q24906857 ;\", \"># Game is a software title (Microsoft Flight Simulator 2004: A Century of Flight)\",\n      \"?game p:P136 ?sequelStatement .\", \"># The game has a sequel statement\",\n      \"?sequelStatement ps:P136 ?resource .\", \"># The resource is the sequel to the game\",\n      \"?game wdt:P175 \\\"Microsoft\\\"@en .\", \"># The game was distributed by Microsoft\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game wdt:P31 wd:Q24906857 ; > ?game p:P136 ?sequelStatement . > ?sequelStatement ps:P136 ?resource . > ?game wdt:P175 \"Microsoft\"@en . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel\",\n    \"WHERE {\",\n    \"?work wdt:P31/wdt:P279* wd:Q86459 ;\", \"# Find works that are a sequel to something\",\n    \"?hasSequel wdt:P105 ?work ;\", \"# The work that has the current work as its sequel\",\n    \"wdt:P577 ?date .\", \"# Optional date, just for context (can be removed)\",\n    \"?sequelTitle wdt:P648 'James Parks'^^xsd:string .\", \"# Title of the sequel with James Parks in it\",\n    \"FILTER(?work != ?sequel) # Ensure we don't get the same work as a sequel to itself\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n", "normal_query": "SELECT ?sequel WHERE { ?work wdt:P31/wdt:P279* wd:Q86459 ; ?hasSequel wdt:P105 ?work ; wdt:P577 ?date . ?sequelTitle wdt:P648 'James Parks'^^xsd:string . FILTER(?work != ?sequel) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?production wdt:P39 ?founder.\",\n      \"?founder wdt:P1628 ?child.\",\n      \"?child wdt:P106 wd:Q5.\", \"# Parent\",\n      \"wd:Q7445 wdt:P31/wdt:P279* ?production.\",\n      \"wd:Q7445 wdt:P106 wd:Q5.\" ,\"\\n# Malia Obama is a person\"\n    ,\n    \"FILTER(?founder = ?child).\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t     \t\t\t", "normal_query": "SELECT ?resource WHERE { ?production wdt:P39 ?founder. ?founder wdt:P1628 ?child. ?child wdt:P106 wd:Q5. wd:Q7445 wdt:P31/wdt:P279* ?production. wd:Q7445 wdt:P106 wd:Q5. FILTER(?founder = ?child). } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P26 ?sibling .\",\n      \"?person wdt:P39 ?position .\",\n      \"?position wdt:P108 \\\"Uniqa Insurance Group\\\"@en .\",\n      \"?sibling wdt:P21 ?gender .\",\n      \"FILTER(?person = wd:Q6417)\" ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wd::P26 ?sibling . ?person wdt:P39 ?position . ?position wdt:P108 \"Uniqa Insurance Group\"@en . ?sibling wdt:P21 ?gender . FILTER(?person = wd:Q6417) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company wdt:P1417 ?distributor .\", \"# Dr. Dre's employer\",\n      \"?game wdt:P361 ?distributor .\", \"# Animal Crossing: Pocket Camp's distributor\",\n      \"?company rdfs:label ?employerLabel.\",\n      \"?game rdfs:label ?gameLabel.\",\n      \"FILTER (lang(?employerLabel) = 'en' && lang(?gameLabel) = 'en')\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P1417 ?distributor . ?game wdt:P361 ?distributor . ?company rdfs:label ?employerLabel. ?game rdfs:label ?gameLabel. FILTER (lang(?employerLabel) = 'en' && lang(?gameLabel) = 'en') } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wd::P26+ ?parent .\",\n      \"?parent wdt:P108 ?employer .\",\n      \"wd:Q97953 wdt:P26 ?person .\", \"-- Malia Obama's parent (assuming it is her mother, Michelle Obama)\",\n      \"FILTER(?person != wd:Q97953) .  -- Exclude Malia Obama herself\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wd::P26+ ?parent . ?parent wdt:P108 ?employer . wd:Q97953 wdt:P26 ?person . -- Malia Obama's parent (assuming it is her mother, Michelle Obama) FILTER(?person != wd:Q97953) . -- Exclude Malia Obama herself } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdtn:spouse wd:Q182659 .\",\n      \"?person wdt:P173 ?sibling .\",\n      \"wd:Q182659 wdt:P26 ?sibling .\",\n      \"VALUES ?person { wd:Q40268 } # Replace with the actual QID for the costume designer if known\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdtn:spouse wd:Q182659 . ?person wdt:P173 ?sibling . wd:Q182659 wdt:P26 ?sibling . VALUES ?person { wd:Q40268 } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P162 ?spouse .\",\n      \"?spouse wdt:P39 wd:Q840759 .\", \"># Q840759 is the Wikidata item for ClubJenna (found by searching wikidata.org)\",\n      \"?person wdt:P161 ?costumeDesignerRole .\",\n      \"FILTER(?costumeDesignerRole = wd:Q24939) # Q24939 is the Wikidata item for Costume designer\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P162 ?spouse . ?spouse wdt:P39 wd:Q840759 . > ?person wdt:P161 ?costumeDesignerRole . FILTER(?costumeDesignerRole = wd:Q24939) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3457 \\\"George Harrison\\\" ;\", \"># P3457 is the property for 'written and directed by'\",\n      \"?resource a/wdt:P31/wdt:P279* ?type .\"\n   ,\"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P3457 \"George Harrison\" ; > ?resource a/wdt:P31/wdt:P279* ?type . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P50 wd:Q182694; # P50 is used for 'author', Q182694 is the Wikidata item for Anker Sørensen\",\n      \"?resource wdt:P2093 ?title. # P2093 is used for 'text written' or 'edited work'\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q182694; ?resource wdt:P2093 ?title. } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P27 ?country ;\",\n              \"wdt:P161 wd:Q950843.\" ,\n      \"?country rdfs:label ?countryLabel .\",\n      \"FILTER(LANG(?countryLabel) = 'en') .\",\n      \"?resource wdt:P26 ?person .\",\n      \"?resource rdfs:label ?label .\",\n      \"FILTER(LANG(?label) = 'en')\" ,\n    \"}\",\n    \"ORDER BY ?label\"\n  ]\n}\n\t\t\t \t\t\t\t\t\t\t\t     \t \t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P27 ?country ; wdt:P161 wd:Q950843. ?country rdfs:label ?countryLabel . FILTER(LANG(?countryLabel) = 'en') . ?resource wdt:P26 ?person . ?resource rdfs:label ?label . FILTER(LANG(?label) = 'en') } ORDER BY ?label LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" , \"# Person\",\n      \"?person wdt:P7409 wd:Q28691.\" , \"# Takenori Sentō\",\n      \"?person wdt:P27 wd:Q172.\" , \"# Japanese nationality\",\n      \"?spouse wdt:P26 ?person.\" , \"# Spouse of the person\",\n      \"?spouse wdt:P106 wd:Q83594.\" , \"# Occupation is cinematographer\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P7409 wd:Q28691. ?person wdt:P27 wd:Q172. ?spouse wdt:P26 ?person. ?spouse wdt:P106 wd:Q83594. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?director wdt:P39 ?employment.\" , \"# Find people who have an employment relationship\",\n      \"?employment wdt:P108 ?employer.\" , \"# Find the employer of those employments\",\n      \"FILTER(?director != ?employer).\" , \"# Ensure we don't return the director as their own employer\",\n      \"?director wdt:P27 wd:Q388.\" , \"# Filter to only directors from Canada\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?director wdt:P39 ?employment. ?employment wdt:P108 ?employer. FILTER(?director != ?employer). ?director wdt:P27 wd:Q388. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?employer wdt:P108 wd:Q2526255 ;\", \"# Employer of a film director\",\n    \"wdt:P112 wd:Q16 .          # Founded by Canada\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 wd:Q2526255 ; wdt:P112 wd:Q16 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:5147 ?occupation .\",\n    \"?director kg:7565 ?employer .\",\n    \"?employer kg:8057 kg:3288 .\",\n    \"?employer a ?resourceType .\",\n    \"BIND(?resourceType AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P106 ?occupation . ?director wdt:P108 ?employer . ?employer wdt:P112 wd:Q16 . ?employer a ?resourceType . BIND(?resourceType AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work ?workLabel\",\n    \"WHERE {\",\n      \"?work wdt:P50 wd:Q911786.\" , \"# P50 is used for 'author' or 'written by'\",\n      \"?work wdt:P648 wd:Q911786.\" , \"# P648 is used for 'producer'\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?work ?workLabel WHERE { ?work wdt:P50 wd:Q911786. ?work wdt:P648 wd:Q911786. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P58 ?screenwriter .\",\n      \"?resource wdt:P162 wd:Q1744 .\",\n      \"FILTER(?screenwriter = wd:Q1744)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 ?screenwriter . ?resource wdt:P162 wd:Q1744 . FILTER(?screenwriter = wd:Q1744) } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?work kg:isProducedBy kg:5664 ;\",\n    \"   kg:isWrittenBy kg:1984 .\",\n    \"kg:5664 kg:isMadonna true .\",\n    \"?resource rdfs:label ?label .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work kg:isProducedBy wd:Q1744 ; kg:isWrittenBy wdt:P58 . wd:Q1744 kg:isMadonna true . ?resource rdfs:label ?label . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P39 ?productionRole .\",\n      \"?productionRole wdt:P108 wd:Q24657990 .\", \"># Joe's Bed-Stuy Barbershop: We Cut Heads\",\n      \"?costumeDesigner wdt:P279* ?employer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?costumeDesigner wdt:P39 ?productionRole . ?productionRole wdt:P108 wd:Q24657990 . > ?costumeDesigner wdt:P279* ?employer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P31 wd:Q5; # Person\",\n      \"?costumeDesigner wdt:P26 ?sibling. # Sibling of the costume designer\",\n      \"?sibling wdt:P1047 ?spouse. # Spouse of the sibling\",\n      \"?spouse wdt:P2159 \\\"Nadia Cassini\\\"@en. # Nadia Cassini as a spouse\",\n      \"VALUES ?resource { ?costumeDesigner }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P31 wd:Q5; ?costumeDesigner wdt:P26 ?sibling. ?sibling wdt:P1047 ?spouse. ?spouse wdt:P2159 \"Nadia Cassini\"@en. VALUES ?resource { ?costumeDesigner } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wdtn:birthPlace / wdt:P39 ?employer ;\",\n      \"   rdfs:label \\\"Christian Abt\\\"@en .\",\n      \"?employer wdt:P279* ?parentCompany .\",\n      \"?parentCompany a wd:Q45268 .\", \">// Q45268 is the Wikidata item for 'company'\"\n    ,\"}\"\n  ]\n}\n", "normal_query": "SELECT ?employer WHERE { ?person wdtn:birthPlace / wdt:P39 ?employer ; rdfs:label \"Christian Abt\"@en . ?employer wdt:P279* ?parentCompany . ?parentCompany a wd:Q45268 . >// Q45268 is the Wikidata item for 'company' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wd::P50 ?employer .\",\n      \"?film wd:P136 ?person .\",\n      \"?film wdt:P279* ?distributor .\",\n      \"FILTER NOT EXISTS { ?film wdt:P1477 ?otherDistributor }\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wd::P50 ?employer . ?film wd:P136 ?person . ?film wdt:P279* ?distributor . FILTER NOT EXISTS { ?film wdt:P1477 ?otherDistributor } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property wdt:P648 ?producerDistributor.\",\n      \"wdt:P648 ?producerDistributor.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER(?resource = wd:Q11424)\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424; ?property wdt:P648 ?producerDistributor. wdt:P648 ?producerDistributor. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } FILTER(?resource = wd:Q11424) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wd::P31/wd:Q9428776 ?role.\",\n      \"?person wdt:P26 ?spouse.\",\n      \"?spouse wdt:P27 ?swedishCountry.\",\n      \"?person wdt:P570 ?markSylwan.\",\n      \"FILTER(?role = wd:Q134319) \",\n      \"FILTER(?markSylwan = wd:Q89666)\",\n      \"VALUES ?swedishCountry { wd:Q173 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wd::P31/wd:Q9428776 ?role. ?person wdt:P26 ?spouse. ?spouse wdt:P27 ?swedishCountry. ?person wdt:P570 ?markSylwan. FILTER(?role = wd:Q134319) FILTER(?markSylwan = wd:Q89666) VALUES ?swedishCountry { wd:Q173 } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse ?sibling\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 ?spouse ;\",\n           \"wdt:P280* ?sibling .\",\n      \"?person2 wdt:P26 ?spouse ;\",\n           \"wdt:P280* [ wikibase:sitelink 'Antiochus IV Epiphanes' ] .\",\n      \"FILTER(?person1 != ?person2)\",\n      \"?person1 rdfs:label ?name1 \",\n      \"?person2 rdfs:label ?name2 \",\n      \"FILTER(LANG(?name1) = 'en')\",\n      \"FILTER(LANG(?name2) = 'en')\",\n    \"}\",\n    \"ORDER BY ?spouse\"\n  ]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { ?person1 wdt:P26 ?spouse ; wdt:P280* ?sibling . ?person2 wdt:P26 ?spouse ; wdt:P280* [ wikibase:sitelink 'Antiochus IV Epiphanes' ] . FILTER(?person1 != ?person2) ?person1 rdfs:label ?name1 ?person2 rdfs:label ?name2 FILTER(LANG(?name1) = 'en') FILTER(LANG(?name2) = 'en') } ORDER BY ?spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?work wdt:P31 wd:Q11424890.\" , \"# Work is an artistic work\",\n      \"?work wdt:P6257 ?location.\" , \"# Location of the event (Sweden)\",\n      \"?work wdt:P57 ?productionEvent.\" , \"# Production event\",\n      \"?productionEvent wdt:P136 wd:Q98409.\" , \"# Type of production is 'Distributor and producer'\",\n      \"?productionEvent wdt:P279* ?distributorProducer.\" , \"# Distributor and producer\",\n      \"?work wdt:P17 ?locationFilter.\" , \"# Location filter for Sweden\",\n      \"FILTER(?location = wd:Q183).\" , \"# Q183 is the Wikidata item for Sweden\",\n      \"?productionEvent wdt:P580 ?date.\" , \"# Date of production event (optional, can be removed if not needed)\"\n    ,\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?distributorProducer WHERE { ?work wdt:P31 wd:Q11424890. ?work wdt:P6257 ?location. ?work wdt:P57 ?productionEvent. ?productionEvent wdt:P136 wd:Q98409. ?productionEvent wdt:P279* ?distributorProducer. ?work wdt:P17 ?locationFilter. FILTER(?location = wd:Q183). ?productionEvent wdt:P580 ?date. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?organization wdt:P170 ?founder.;\",\n                   \"wdt:P625 ?location.\",\n      \"?founder wdt:P26 ?prince;\",\n                \"p:P26 ?princeStatement.\",\n      \"?princeStatement ps:P26 ?princeSib; pq:P527 ?siblingDegree.\",\n      \"FILTER(?organization = wd:Q138924 && ?location != \\\"Netherlands\\\"@en && ?princeSib = wd:Q102109) # World Wide Fund for Nature, not in Netherlands, and Dutch sibling of Prince Aschwin of Lippe-Biesterfeld\",\n      \"?resource ?property ?value.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?organization wdt:P170 ?founder.; wdt:P625 ?location. ?founder wdt:P26 ?prince; p:P26 ?princeStatement. ?princeStatement ps:P26 ?princeSib; pq:P527 ?siblingDegree. FILTER(?organization = wd:Q138924 && ?location != \"Netherlands\"@en && ?princeSib = wd:Q102109) ?resource ?property ?value. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P26 ?sibling .\", \"# sibling of\",\n      \"?person wdt:P108 wd:Q957439 .\", \"# employee of FC Bayern Munich\",\n      \"?sibling wdt:P27 wd:Q244 .\", \"# German nationality\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P26 ?sibling . ?person wdt:P108 wd:Q957439 . ?sibling wdt:P27 wd:Q244 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"wdt:P577 \\\"Drums of Love\\\"@en;\",\n      \"wdt:P1416 ?distributor; # distributor\",\n      \"wdt:P123 ?producer.   # producer\",\n      \"?film wdt:P57 \" , \"# founder\",\n      \"/wdt:P847 wd:Q10942.\" ,\"# Charlie Chaplin (Q10942 is the Wikidata ID for Charlie Chaplin)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"Drums of Love\"@en; wdt:P1416 ?distributor; wdt:P123 ?producer. ?film wdt:P57 /wdt:P847 wd:Q10942. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P50 ?author ;\", \"# P50 is used for authorship\",\n    \"?work wdt:P800 ?producer .\", \"# P800 is used for production by\",\n    \"?author wdsgn:label \\\"Vince Gilligan\\\"@en .\", \"# Filter for Vince Gilligan as the author\",\n    \"?producer wdsgn:label \\\"Bob Weinstein\\\"@en .\" ,\"# Filter for Bob Weinstein as the producer\",\n    \"VALUES ?resource { ?work }\" ,\"# Return only the resource (work)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P50 ?author ; ?work wdt:P800 ?producer . ?author wdsgn:label \"Vince Gilligan\"@en . ?producer wdsgn:label \"Bob Weinstein\"@en . VALUES ?resource { ?work } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company ?founder ?sibling\",\n    \"WHERE {\",\n      \"?company wdt:P17 ?country ;\", \"@en\",\n      \"?company wdt:P57 ?founder .\",\n      \"?founder wdt:P26 ?sibling .\",\n      \"FILTER(?sibling = wd:Q140) # Q140 is the Wikidata ID for Alphonse-Louis du Plessis de Richelieu\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?company ?founder ?sibling WHERE { ?company wdt:P17 ?country ; @en ?company wdt:P57 ?founder . ?founder wdt:P26 ?sibling . FILTER(?sibling = wd:Q140) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 ?production ;\", \"># Check if the resource is a production of Michael Jackson's Ghosts\",\n      \"?production wdt:P1477 ?stanWinston .\", \"># Stan Winston was a producer\",\n      \"?production wdt:P57 ?michaelJackson .\", \"># Michael Jackson was involved in writing\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P361 ?production ; > ?production wdt:P1477 ?stanWinston . > ?production wdt:P57 ?michaelJackson . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P345 ? Spielberg .\",\n      \"?resource wdt:P50 ? ChrisColumbus .\",\n      \"?Spielberg rdfs:label \\\"Steven Spielberg\\\"@en .\",\n      \"?ChrisColumbus rdfs:label \\\"Chris Columbus\\\"@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P345 ? Spielberg . ?resource wdt:P50 ? ChrisColumbus . ?Spielberg rdfs:label \"Steven Spielberg\"@en . ?ChrisColumbus rdfs:label \"Chris Columbus\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?work wdt:P6259 ?location.\" , \"# P6259 is used for founding country\",\n    \"?work wdt:P361 ?producerDistributor.\" , \"# P361 is used for producers and distributors\",\n    \"?work wdtn:Q7187.\" , \"# Q7187 is the Wikidata item for The Magic Flute\",\n    \"FILTER(?location = wd:Q183)\" , \"# Q183 is the Wikidata item for Sweden\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?distributorProducer WHERE { ?work wdt:P6259 ?location. ?work wdt:P361 ?producerDistributor. ?work wdtn:Q7187. FILTER(?location = wd:Q183) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person1 ?person2 ?person3 ?person4\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 wd:Q95780. # Henutmire's parent\",\n      \"?person2 wdt:P70 wdt:P26 wd:Q95780. # Henutmire's spouse\",\n      \"?person3 wdt:P26 wd:Q95780. # Henutmire's sibling\",\n      \"OPTIONAL { ?person1 wdt:P50 wd:Q95784. } # Check if parent married Nefertarilllala\",\n      \"OPTIONAL { ?person2 wdt:P50 wd:Q95784. } # Check if spouse married Nefertarilllala\",\n      \"OPTIONAL { ?person3 wdt:P50 wd:Q95784. } # Check if sibling married Nefertarilllala\",\n    \"}\",\n    \"FILTER NOT EXISTS { ?person1 wdt:P50 ?notMarriedToNefertarilllala. }\",\n    \"FILTER NOT EXISTS { ?person2 wdt:P50 ?notMarriedToNefertarilllala. }\",\n    \"FILTER NOT EXISTS { ?person3 wdt:P50 ?notMarriedToNefertarilllala. }\"\n  ]\n}", "normal_query": "SELECT ?person1 ?person2 ?person3 ?person4 WHERE { ?person1 wdt:P26 wd:Q95780. ?person2 wdt:P70 wdt:P26 wd:Q95780. ?person3 wdt:P26 wd:Q95780. OPTIONAL { ?person1 wdt:P50 wd:Q95784. } OPTIONAL { ?person2 wdt:P50 wd:Q95784. } OPTIONAL { ?person3 wdt:P50 wd:Q95784. } } FILTER NOT EXISTS { ?person1 wdt:P50 ?notMarriedToNefertarilllala. } FILTER NOT EXISTS { ?person2 wdt:P50 ?notMarriedToNefertarilllala. } FILTER NOT EXISTS { ?person3 wdt:P50 ?notMarriedToNefertarilllala. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P166* wd:Q7394852.\" , \"# Jessica Drake\",\n      \"?resource wdt:P27 wd:Q940.\" , \"# Canadian citizenship\",\n      \"?resource wdt:P114 ?spouse.\" , \"# Spouse of the resource\",\n      \"FILTER(?spouse = wd:Q63875).\" ,\"\\t# Male spouse (Q63875 is the Wikidata item for male)\"\n    ,\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P166* wd:Q7394852. ?resource wdt:P27 wd:Q940. ?resource wdt:P114 ?spouse. FILTER(?spouse = wd:Q63875). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?sequel .\",\n      \"?sequel wdt:P1239 ?productionCompany .\",\n      \"?productionCompany rdfs:label ?companyName .\",\n      \"FILTER (lang(?companyName) = 'en') .\",\n      \"VALUES ?productionCompany { wd:Q6807 } # Televisa's Wikidata ID\",\n      \"?sequel wdt:P577 ?releaseDate .\",\n      \"?movie rdfs:label ?movieTitle .\",\n      \"FILTER (lang(?movieTitle) = 'en') .\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P345 ?sequel . ?sequel wdt:P1239 ?productionCompany . ?productionCompany rdfs:label ?companyName . FILTER (lang(?companyName) = 'en') . VALUES ?productionCompany { wd:Q6807 } ?sequel wdt:P577 ?releaseDate . ?movie rdfs:label ?movieTitle . FILTER (lang(?movieTitle) = 'en') . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?childCompany ?parentCompany\",\n    \"WHERE {\",\n      \"?childCompany wdt:P279* ?parentCompany ;\",\n      \"wdt:P431 ?acquisitionEvent .\",\n      \"?parentCompany wdt:P31 wd:Q5784660 .\", \"-- Company\",\n      \"?acquisitionEvent wdt:P527 ?verizon .\" ,\"-- Verizon as the acquirer\"\n    ,\n    \"FILTER(?childCompany != ?parentCompany)\"\n    ,\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?childCompany ?parentCompany WHERE { ?childCompany wdt:P279* ?parentCompany ; wdt:P431 ?acquisitionEvent . ?parentCompany wdt:P31 wd:Q5784660 . -- Company ?acquisitionEvent wdt:P527 ?verizon . -- Verizon as the acquirer FILTER(?childCompany != ?parentCompany) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424865.\" , \"# Check if the resource is a production company or distributor\",\n      \"?resource wdt:P57 ?movie .\" , \"# The movie 'Barbary Coast' is associated with this resource\",\n      \"wd:Q303891 wdt:P57 ?movie\" , \"# 'Barbary Coast' is the movie in question\"\n    ,\n      \"?resource wdt:P176 ?founder.\" , \"# The founder of the company or distributor is associated with this resource\",\n      \"VALUES ?founder { wd:Q8249 wd:Q1053 }\" , \"# Mary Pickford (Q8249) and Charlie Chaplin (Q1053)\"\n    ,\n      \"FILTER EXISTS { ?resource wdt:P31/wdt:P279* wd:Q11424865. }\" , \"# Ensure the resource is a production company or distributor\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" , \"# Label in English for readability\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424865. ?resource wdt:P57 ?movie . wd:Q303891 wdt:P57 ?movie ?resource wdt:P176 ?founder. VALUES ?founder { wd:Q8249 wd:Q1053 } FILTER EXISTS { ?resource wdt:P31/wdt:P279* wd:Q11424865. } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P141 ?influence.\",\n      \"?influence rdfs:label ?influenceLabel.\",\n      \"?influence wdt:P26 ?sibling.\",\n      \"wd:Q7385 wdt:P141 ?actor.\",\n      \"FILTER(LANG(?influenceLabel) = 'en').\",\n      \"VALUES ?sibling { wd:Q109259 }\", \">// Astrid Young's sibling (assuming it is known or can be linked to Wikidata)\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"FILTER(?actor != ?resource).\"\n    ,\n      \"}\"\n    ,\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?actor wdt:P141 ?influence. ?influence rdfs:label ?influenceLabel. ?influence wdt:P26 ?sibling. wd:Q7385 wdt:P141 ?actor. FILTER(LANG(?influenceLabel) = 'en'). VALUES ?sibling { wd:Q109259 } >// Astrid Young's sibling (assuming it is known or can be linked to Wikidata) ?resource ?p ?o. FILTER(?actor != ?resource). } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q182694 ;\", \"# Jens Jørgen Thorsen (Q182694) was the author or editor\",\n    \"   wdt:P50 wd:Q374662 ;\" ,\"\\t# Ole John (Q374662) was the author or editor\",\n    \"   wdt:P50 wd:Q182695 .\" ,\"\\t# Jørgen Leth (Q182695) was the author or editor\",\n    \"}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"\\\" }\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q182694 ; wdt:P50 wd:Q374662 ; wdt:P50 wd:Q182695 . } SERVICE wikibase:label { bd:serviceParam wikibase:language \"\" } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P1647 ?costumeDesigner .\",\n      \"?person wdt:P2650 ?costumeDesigner .\",\n      \"?person wdt:P26 'Miguel Albaladejo' .\",\n      \"?person wdt:P27 wd:Q397 .\",\n      \"?resource wdt:P1647 ?costumeDesigner .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n  \t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?film wdt:P1647 ?costumeDesigner . ?person wdt:P2650 ?costumeDesigner . ?person wdt:P26 'Miguel Albaladejo' . ?person wdt:P27 wd:Q397 . ?resource wdt:P1647 ?costumeDesigner . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer\",\n    \"WHERE {\",\n      \"?composer wdt:P39 ?spouse.\",\n      \"?spouse wdt:P21 ?gender.\",\n      \"?spouse wdt:P569 ?birthDate.\",\n      \"?composer wdt:P108 ?occupation.\",\n      \"FILTER(?gender = wd:Q65274996 && ?occupation = wd:Q134443 && ?spouse = wd:Q181666)\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P39 ?spouse. ?spouse wdt:P21 ?gender. ?spouse wdt:P569 ?birthDate. ?composer wdt:P108 ?occupation. FILTER(?gender = wd:Q65274996 && ?occupation = wd:Q134443 && ?spouse = wd:Q181666) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># QID for Stop for Bud film (assuming it exists)\",\n      \"?film wdt:P644 ?producer ;\",\n      \"?film wdt:P710 ?editor .\",\n      \"FILTER(STR(?producer) = 'Jens Jørgen Thorsen' || STR(?producer) = 'Ole John' || STR(?producer) = 'Jørgen Leth') .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248709 ; > ?film wdt:P644 ?producer ; ?film wdt:P710 ?editor . FILTER(STR(?producer) = 'Jens Jørgen Thorsen' || STR(?producer) = 'Ole John' || STR(?producer) = 'Jørgen Leth') . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q184073.\" , \"# Spouse of Ptolemy IX Lathyros\",\n      \"?resource wdt:P22 wd:Q9566.\" , \"# Female sibling of Ptolemy IX Lathyros\",\n      \"?resource wdt:P73 wd:Q108465.\" ,\"# Antiochus IX Cyzicenus as the spouse\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q184073. ?resource wdt:P22 wd:Q9566. ?resource wdt:P73 wd:Q108465. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P50|wdt:P286 ?author .\",\n    \"  ?resource wdt:P2439 ?editor .\",\n    \"  FILTER (regex(str(?author), \\\"Jens Jørgen Thorsen\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?author), \\\"Jørgen Leth\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?author), \\\"Ole John\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Jens Jørgen Thorsen\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Jørgen Leth\\\", \\\"i\\\")) \",\n    \"  FILTER (regex(str(?editor), \\\"Ole John\\\", \\\"i\\\")) \",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50|wdt:P286 ?author . ?resource wdt:P2439 ?editor . FILTER (regex(str(?author), \"Jens Jørgen Thorsen\", \"i\")) FILTER (regex(str(?author), \"Jørgen Leth\", \"i\")) FILTER (regex(str(?author), \"Ole John\", \"i\")) FILTER (regex(str(?editor), \"Jens Jørgen Thorsen\", \"i\")) FILTER (regex(str(?editor), \"Jørgen Leth\", \"i\")) FILTER (regex(str(?editor), \"Ole John\", \"i\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P69 ?author ;\",\n    \"   wdt:P105 ?editor .\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"FILTER(?work = wd:Q234879) # Replace with the actual Wikidata ID for 'Stop for Bud'\",\n    \"?author wdt:P2150 ?authorName .\",\n    \"?editor wdt:P2150 ?editorName .\",\n    \"VALUES (?authorName ?editorName) { (\\\"Jens Jørgen Thorsen\\\" \\\"Jørgen Leth\\\" \\\"Ole John\\\") }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n  \t\t\t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P69 ?author ; wdt:P105 ?editor . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } FILTER(?work = wd:Q234879) ?author wdt:P2150 ?authorName . ?editor wdt:P2150 ?editorName . VALUES (?authorName ?editorName) { (\"Jens Jørgen Thorsen\" \"Jørgen Leth\" \"Ole John\") } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q114248760 ;\", \"># QID for 'Stop for Bud' film\",\n    \"wdt:P577 ?releaseDate .\",\n    \"?film wdt:P644 ?producer .\",\n    \"?film wdt:P710 ?editor .\",\n    \"VALUES ?producer { wd:Q2983112 wd:Q15484251 wd:Q1027495 }\", \"># QIDs for Ole John, Jørgen Leth, and Jens Jørgen Thorsen\",\n    \"VALUES ?editor { wd:Q2983112 wd:Q15484251 wd:Q1027495 }\",\n    \"?resource ?p ?o .\",\n    \"FILTER(?p IN (wdt:P644, wdt:P710))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248760 ; > wdt:P577 ?releaseDate . ?film wdt:P644 ?producer . ?film wdt:P710 ?editor . VALUES ?producer { wd:Q2983112 wd:Q15484251 wd:Q1027495 } > VALUES ?editor { wd:Q2983112 wd:Q15484251 wd:Q1027495 } ?resource ?p ?o . FILTER(?p IN (wdt:P644, wdt:P710)) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?tvShow wdt:P57 ?person ;\",\n      \"   wdt:P3409 ?person2 ;\",\n      \"   wdt:P3408 ?person3 .\",\n      \"?person wd:qid ?personQid ;\",\n      \"?person2 wd:qid ?person2Qid ;\",\n      \"?person3 wd:qid ?person3Qid .\",\n      \"FILTER (STR(?personQid) = 'Q165947' || STR(?person2Qid) = 'Q165947' || STR(?person3Qid) = 'Q165947')\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t ", "normal_query": "SELECT ?resource WHERE { ?tvShow wdt:P57 ?person ; wdt:P3409 ?person2 ; wdt:P3408 ?person3 . ?person wd:qid ?personQid ; ?person2 wd:qid ?person2Qid ; ?person3 wd:qid ?person3Qid . FILTER (STR(?personQid) = 'Q165947' || STR(?person2Qid) = 'Q165947' || STR(?person3Qid) = 'Q165947') } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P26 wd:Q184079.\" , \"# Ptolemy IX Lathyros's sibling\",\n      \"?resource wdt:P22 wd:Q184079.\" , \"# Ptolemy IX Lathyros's spouse\",\n      \"wd:Q184079 wdt:P26 ?sibling.\" , \"# Find the sibling of Ptolemy IX Lathyros\",\n      \"?sibling wdt:P22 wd:Q184079.\" , \"# The sibling is also his spouse, who must be a female sibling of Ptolemy X Alexander I\",\n      \"FILTER(?sibling != wd:Q184079)\" , \"# Ensure it's not the same person\",\n      \"?sibling wdt:P21 wd:Q652349.\" ,\"# The sibling must be female\"\n    ,\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P26 wd:Q184079. ?resource wdt:P22 wd:Q184079. wd:Q184079 wdt:P26 ?sibling. ?sibling wdt:P22 wd:Q184079. FILTER(?sibling != wd:Q184079) ?sibling wdt:P21 wd:Q652349. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361* wd:Q2490785.\" , \"# Vince Gilligan\",\n      \"?resource wdt:P361* wd:Q167695.\" , \"# George Mastras\",\n      \"?episode wdt:P41 ?resource.\" , \"# Produced by\",\n      \"FILTER(?episode = wd:Q24802).\" , \"# Breaking Bad\",\n      \"?episode wdt:P31 wd:Q11926.\" , \"# TV episode\"\n    ,\n      \"?episode wdt:P570 ?date.\" , \"# Release date (to ensure it's the same show)\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P361* wd:Q2490785. ?resource wdt:P361* wd:Q167695. ?episode wdt:P41 ?resource. FILTER(?episode = wd:Q24802). ?episode wdt:P31 wd:Q11926. ?episode wdt:P570 ?date. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  ?film2 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  ?film3 <http://www.wikidata.org/prop/statement/P345> ?costumeDesigner .\",\n    \"  FILTER (regex(?film1, \\\"Tom at the Farm\\\", \\\"i\\\"))\",\n    \"  FILTER (regex(?film2, \\\"Heartbeats\\\", \\\"i\\\"))\",\n    \"  FILTER (regex(?film3, \\\"Laurence Anyways\\\", \\\"i\\\"))\",\n    \"  ?costumeDesigner <http://www.wikidata.org/prop/direct/P175> ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 ps:P345 ?costumeDesigner . ?film2 ps:P345 ?costumeDesigner . ?film3 ps:P345 ?costumeDesigner . FILTER (regex(?film1, \"Tom at the Farm\", \"i\")) FILTER (regex(?film2, \"Heartbeats\", \"i\")) FILTER (regex(?film3, \"Laurence Anyways\", \"i\")) ?costumeDesigner wdt:P175 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248700 ;\", \"># Assuming Q114248700 is the item identifier for films or movies in Wikidata\",\n      \"wdt:P136 ?role .\",\n      \"?person wdt:P161 ?film ;\", \"># P161 is used to link a person to their role in a film\",\n      \"wdt:P161 wd:Q24905780 .  # Q24905780 is the item identifier for 'editor' or 'star'\",\n      \"VALUES ?film { wd:Q1234567890 } ;\", \"># Replace with actual Wikidata identifiers for the films\",\n      \"FILTER(?role IN (wdt:P161))\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}\n", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q114248700 ; > wdt:P136 ?role . ?person wdt:P161 ?film ; > wdt:P161 wd:Q24905780 . VALUES ?film { wd:Q1234567890 } ; > FILTER(?role IN (wdt:P161)) } GROUP BY ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?edit ?direct ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n             \"wdt:P577 ?date.\",\n      \"?person wdt:P31 wd:Q5.\", \"# Ensure the person is a human\",\n      \"?person wdt:P106/wdt:P279* wd:Q899696. # Editor or Director role\",\n      \"OPTIONAL { ?film wdt:P703 ?person. } # To link people to films they edited/directed\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"FILTER (regex(str(?person), 'Eduardo Sánchez|Gareth Evans|Jason Eisener|Adam Wingard', 'i'))\"\n  ]\n}\n", "normal_query": "SELECT ?person ?edit ?direct ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; wdt:P577 ?date. ?person wdt:P31 wd:Q5. ?person wdt:P106/wdt:P279* wd:Q899696. OPTIONAL { ?film wdt:P703 ?person. } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } FILTER (regex(str(?person), 'Eduardo Sánchez|Gareth Evans|Jason Eisener|Adam Wingard', 'i')) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P3459 'Four Rooms'.\", \"># Film title (replace with actual property if needed)\",\n      \"?film wdt:P50 ?director.\", \"># Director property\",\n      \"?film wdt:P69 ?writer.\" ,\", # Writer property\",\n      \"FILTER(?director IN wd:Q182473, wd:Q11300, wd:Q182473, wd:Q52416)\" ,\", # Specific individuals (replace with actual Wikidata IDs if needed)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?writer WHERE { ?film wdt:P3459 'Four Rooms'. > ?film wdt:P50 ?director. > ?film wdt:P69 ?writer. , FILTER(?director IN wd:Q182473, wd:Q11300, wd:Q182473, wd:Q52416) , } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?movie wdt:P3459 ?director .\", \"># P3459 is the property for 'director of work'\",\n    \"  ?movie wdt:P1617 ?producer .\", \"># P1617 is the property for 'production company'\",\n    \"  FILTER(STR(?director) = 'Susie Essman' || STR(?director) = 'Malcolm McDowell' || STR(?director) = 'Clark Spencer' || STR(?director) = 'Miley Cyrus')\",\n    \"  FILTER(STR(?producer) = 'Susie Essman' || STR(?producer) = 'Malcolm McDowell' || STR(?producer) = 'Clark Spencer' || STR(?producer) = 'Miley Cyrus')\",\n    \"  VALUES ?movie { wd:Q12345678 } # Replace with the actual Wikidata ID for Super Rhino if known\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P3459 ?director . > ?movie wdt:P1617 ?producer . > FILTER(STR(?director) = 'Susie Essman' || STR(?director) = 'Malcolm McDowell' || STR(?director) = 'Clark Spencer' || STR(?director) = 'Miley Cyrus') FILTER(STR(?producer) = 'Susie Essman' || STR(?producer) = 'Malcolm McDowell' || STR(?producer) = 'Clark Spencer' || STR(?producer) = 'Miley Cyrus') VALUES ?movie { wd:Q12345678 } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P50 ?person .\",\n    \"  ?film wdt:P6487 ?person .\", \"># P6487 is the property for 'executive producer'\",\n    \"  ?film wdt:P6392 ?person .\", \"># P6392 is the property for 'producer'\",\n    \"  ?film wdt:P2915 ?person .\", \"># P2915 is the property for 'editor'\",\n    \"  ?person wdt:P31 wd:Q5 .\" ,\"\\n# Q5 is the item for 'human'\",\n    \"  FILTER(STR(?person) = 'George Lucas'@en)\",\n    \"  VALUES ?resource { wd:Q2490 } # Q2490 is the item for 'Star Wars (film)' as an example\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P50 ?person . ?film wdt:P6487 ?person . > ?film wdt:P6392 ?person . > ?film wdt:P2915 ?person . > ?person wdt:P31 wd:Q5 . FILTER(STR(?person) = 'George Lucas'@en) VALUES ?resource { wd:Q2490 } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q114248065 ;\", \"># Every Man for Himself, Passion, and Notre musique are instances of film or TV series\"\n     \t\t] }", "normal_query": "SELECT ?person WHERE { ?work wdt:P31/wdt:P279* wd:Q114248065 ; > LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?tvShow wdt:P3459 ?producer .\",\n      \"?tvShow wdt:P6480 ?producer2 .\",\n      \"?tvShow wdt:P6480 ?producer3 .\",\n      \"?tvShow wdt:P6480 ?producer4 .\",\n      \"VALUES ?producer { wd:Q175911 }\",\n      \"VALUES ?producer2 { wd:Q1126227 }\",\n      \"VALUES ?producer3 { wd:Q1028855 }\",\n      \"VALUES ?producer4 { wd:Q1028856 }\",\n      \"?tvShow wdt:P31 wd:Q11922 .\",\n      \"FILTER(?producer = wd:Q175911 || ?producer2 = wd:Q1126227 || ?producer3 = wd:Q1028855 || ?producer4 = wd:Q1028856)\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t ", "normal_query": "SELECT ?resource WHERE { ?tvShow wdt:P3459 ?producer . ?tvShow wdt:P6480 ?producer2 . ?tvShow wdt:P6480 ?producer3 . ?tvShow wdt:P6480 ?producer4 . VALUES ?producer { wd:Q175911 } VALUES ?producer2 { wd:Q1126227 } VALUES ?producer3 { wd:Q1028855 } VALUES ?producer4 { wd:Q1028856 } ?tvShow wdt:P31 wd:Q11922 . FILTER(?producer = wd:Q175911 || ?producer2 = wd:Q1126227 || ?producer3 = wd:Q1028855 || ?producer4 = wd:Q1028856) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q134378.\" , \"># Check if the resource is a film or its subclass\",\n    \"  ?resource wdt:P577 ?date.\" , \"># Optional date, can be removed if not needed\",\n    \"  OPTIONAL { ?resource wdt:P644 ?akiraKurosawa . } # Akira Kurosawa as editor/producer/writer\",\n    \"  FILTER(?akiraKurosawa = wd:Q127859) # Q127859 is the Wikidata ID for Akira Kurosawa\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q134378. > ?resource wdt:P577 ?date. > OPTIONAL { ?resource wdt:P644 ?akiraKurosawa . } FILTER(?akiraKurosawa = wd:Q127859) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># Q16501804 is the item for film\",\n    \"           wdt:P50 ?director .\",\n    \"  ?director wdt:P31/wdt:P279* wd:Q1246726 ; # Q1246726 is the item for human\",\n    \"            wdt:P283 ?coDirector .\",\n    \"  FILTER(?coDirector IN (wd:Q105162, wd:Q196619, wd:Q105162)) # Jørgen Leth, Jens Jørgen Thorsen, Ole John\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># Ensure it's a film\",\n    \"           wdt:P286 ?writer .\",\n    \"  ?writer wdt:P31/wdt:P279* wd:Q1246726 ; # Ensure the writer is a human\",\n    \"         wdt:P283 ?coWriter .\",\n    \"  FILTER(?coWriter IN (wd:Q105162, wd:Q196619, wd:Q105162)) # Jørgen Leth, Jens Jørgen Thorsen, Ole John\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16501804 ; > wdt:P50 ?director . ?director wdt:P31/wdt:P279* wd:Q1246726 ; wdt:P283 ?coDirector . FILTER(?coDirector IN (wd:Q105162, wd:Q196619, wd:Q105162)) ?resource wdt:P31/wdt:P279* wd:Q16501804 ; > wdt:P286 ?writer . ?writer wdt:P31/wdt:P279* wd:Q1246726 ; wdt:P283 ?coWriter . FILTER(?coWriter IN (wd:Q105162, wd:Q196619, wd:Q105162)) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31/wdt:P279* wd:Q16504802 ;\", \"># A film or TV series\",\n    \"wdt:P57 P186 \\\"Ole John\\\" ;\", \"># Directed by Ole John\",\n    \"wdt:P57 P186 \\\"Jørgen Leth\\\" ;\", \"># Directed by Jørgen Leth\",\n    \"wdt:P57 P186 \\\"Jens Jørgen Thorsen\\\" .\", \"># Directed by Jens Jørgen Thorsen\"\n   \t]}\n \t\t    \t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16504802 ; > wdt:P57 P186 \"Ole John\" ; > wdt:P57 P186 \"Jørgen Leth\" ; > wdt:P57 P186 \"Jens Jørgen Thorsen\" . > LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film a wd:Film ;\",\n        \"wdt:P31* wd:Q11424980.\" , \"# Check if it's a film\",\n      \"?person wdt:P577 ?date .\", \"# Person has a date (to ensure we're talking about the same person)\",\n      \"?film wdt:P161 ?person ;\", \"# Film has person as cinematographer or director\",\n      \"VALUES ?film { wd:Q249308 wd:Q576272 wd:Q1024768 wd:Q1024769 }\" , \"# The specific films mentioned\",\n      \"?person wdt:P750 ?productionCompany .\", \"# Person is a producer for the film\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?person WHERE { ?film a wd:Film ; wdt:P31* wd:Q11424980. ?person wdt:P577 ?date . ?film wdt:P161 ?person ; VALUES ?film { wd:Q249308 wd:Q576272 wd:Q1024768 wd:Q1024769 } ?person wdt:P750 ?productionCompany . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property rdfs:label \\\"Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits\\\"@en .\",\n      \"?actor wdt:P161 ?film ;\",\n      \"  wdt:P3308 ?cinematography ;\",\n      \"  wdt:P6594 ?direction.\",\n      \"FILTER EXISTS { ?film wdt:P31 wd:Q11424 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \t ", "normal_query": "SELECT ?actor WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?property rdfs:label \"Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits\"@en . ?actor wdt:P161 ?film ; wdt:P3308 ?cinematography ; wdt:P6594 ?direction. FILTER EXISTS { ?film wdt:P31 wd:Q11424 } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?movie wdt:P50 ?person ;\",\n    \"   wdt:P6489 ?person2 ;\",\n    \"   wdt:P31/wdt:P279* wd:Q11424 .\",\n    \"?person wdt:P106/wdt:P279* wd:Q87579 ;\",\n    \"?person2 wdt:P106/wdt:P279* wd:Q87579 ;\",\n    \"   wdt:P39 ?movie .\",\n    \"FILTER (regex(str(?person), \\\"David Zucker\\\", \\\"i\\\")) &&\",\n    \"FILTER (regex(str(?person2), \\\"Jim Abrahams\\\", \\\"i\\\")) ||\",\n    \"FILTER (regex(str(?person2), \\\"Jerry Zucker\\\", \\\"i\\\"))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P50 ?person ; wdt:P6489 ?person2 ; wdt:P31/wdt:P279* wd:Q11424 . ?person wdt:P106/wdt:P279* wd:Q87579 ; ?person2 wdt:P106/wdt:P279* wd:Q87579 ; wdt:P39 ?movie . FILTER (regex(str(?person), \"David Zucker\", \"i\")) && FILTER (regex(str(?person2), \"Jim Abrahams\", \"i\")) || FILTER (regex(str(?person2), \"Jerry Zucker\", \"i\")) } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person ?film ?role\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" ,\n      \"?person wdt:P735 \\\"Ole John\\\"@en, \\\"Jens Jørgen Thorsen\\\"@en, \\\"Jørgen Leth\\\"@en.\" ,\n      \"?film wdt:P31/wdt/P136* ?role ;\",\n      \"   p:P31/ps:P31 wd:Q11424.\" ,\n      \"?statement a wikibase.Statement;\",\n      \"   pq:P580 ?person;\",\n      \"   pq:P136 ?role.\",\n      \"}\",\n    \"ORDER BY ?film\"\n  ]\n}\n\t\t\t \t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?person ?film ?role WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P735 \"Ole John\"@en, \"Jens Jørgen Thorsen\"@en, \"Jørgen Leth\"@en. ?film wdt:P31/wdt/P136* ?role ; p:P31/ps:P31 wd:Q11424. ?statement a wikibase.Statement; pq:P580 ?person; pq:P136 ?role. } ORDER BY ?film LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director WHERE {\",\n    \"?movie wdt:P3459 'Grindhouse'.\", \"># P3459 is the property for 'written and directed by'\",\n    \"?movie wdt:P61 ?director. # P61 is the property for 'director'\",\n    \"VALUES ?director { wd:Q28071 wd:Q16601 wd:Q11603 wd:Q9545 wd:Q11604 } # Q numbers for Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie ?director WHERE { ?movie wdt:P3459 'Grindhouse'. > ?movie wdt:P61 ?director. VALUES ?director { wd:Q28071 wd:Q16601 wd:Q11603 wd:Q9545 wd:Q11604 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmProducer WHERE {\",\n    \"  ?filmProducer wdt:P31/wdt:P279* wd:Q865420.\" , \"# Film producer\",\n    \"  FILTER(?filmProducer != wd:Q865420).\" , \"# Exclude the class itself\",\n    \"  ?filmProducer wdt:P577 ?productionDate .\",\n    \"  FILTER NOT EXISTS { ?filmProducer wdt:P193 ?film }.\" , \"# Ensure no existing film production to avoid false positives\",\n    \"  VALUES ?films { wd:Q2486012 wd:Q10275655 wd:Q10275656 wd:Q10275657 }.\" , \"# Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey\",\n    \"  ?film wdt:P1477 ?filmProducer . # Production company or producer\",\n    \"  FILTER(?film IN ?films).\" ,\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P31/wdt:P279* wd:Q865420. FILTER(?filmProducer != wd:Q865420). ?filmProducer wdt:P577 ?productionDate . FILTER NOT EXISTS { ?filmProducer wdt:P193 ?film }. VALUES ?films { wd:Q2486012 wd:Q10275655 wd:Q10275656 wd:Q10275657 }. ?film wdt:P1477 ?filmProducer . FILTER(?film IN ?films). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?episode wdt:P50|wdt:P51|wdt:P52 ?director .\",\n    \"?episode wdt:P730 ?writer .\",\n    \"FILTER(?director IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) .\",\n    \"FILTER(?writer IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) .\",\n    \"?resource wdt:P31 ?episode .\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?episode wdt:P50|wdt:P51|wdt:P52 ?director . ?episode wdt:P730 ?writer . FILTER(?director IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) . FILTER(?writer IN (wd:Q123456789, wd:Q234567890, wd:Q345678901, wd:Q456789012, wd:Q567890123)) . ?resource wdt:P31 ?episode . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q16501804 ;\", \"># A movie or TV show\",\n    \"    wdt:P57 P2869 ?director .\", \"># Directed by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"    wdt:P73 P2869 ?writer .\", \"># Written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"    wdt:P105 P2869 ?editor .  # Edited by Ole John, Jens Jørgen Thorsen, and Jørgen Leth\",\n    \"}\",\n    \"VALUES ?director { wd:Q143712 } ;\", \"># Ole John\"\n    , \"VALUES ?writer { wd:Q143712 } ;\" ,\", # Ole John (assuming the same person for director and writer, adjust as necessary)\"\n    , \"VALUES ?editor { wd:Q143712 wd:Q5689011 wd:Q143713 }.\" ,\", # Ole John, Jens Jørgen Thorsen, Jørgen Leth\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n                 \t \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q16501804 ; > wdt:P57 P2869 ?director . > wdt:P73 P2869 ?writer . > wdt:P105 P2869 ?editor . } VALUES ?director { wd:Q143712 } ; > VALUES ?writer { wd:Q143712 } ; , VALUES ?editor { wd:Q143712 wd:Q5689011 wd:Q143713 }. , SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?episode ?executiveProducer ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?episode .\", \"@en\",\n      \"?film wdt:P161 ?executiveProducer .\",\n      \"?film wdt:P50 ?writer .\",\n      \"VALUES ?episode { wd:Q287112 wd:Q287113 wd:Q287114 }\", \"@en\",\n      \"FILTER NOT EXISTS { ?film wdt:P703 \\\"Star Whores\\\"@en }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?film ?episode ?executiveProducer ?writer WHERE { ?film wdt:P3459 ?episode . @en ?film wdt:P161 ?executiveProducer . ?film wdt:P50 ?writer . VALUES ?episode { wd:Q287112 wd:Q287113 wd:Q287114 } @en FILTER NOT EXISTS { ?film wdt:P703 \"Star Whores\"@en } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1059286 wdt:P304 ?director .\",\n    \"  wd:Q1059286 wdt:P735 ?editor .\",\n    \"  wd:Q1059286 wdt:P571 ?publicationDate .\",\n    \"  FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Ole John\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Jens Jørgen Thorsen\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?director), LCASE(\\\"Jørgen Leth\\\"))) &&\",\n    \"  FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Ole John\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Jens Jørgen Thorsen\\\"))) &&\",\n    \"         FILTER(CONTAINS(LCASE(?editor), LCASE(\\\"Jørgen Leth\\\")))\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1059286 wdt:P304 ?director . wd:Q1059286 wdt:P735 ?editor . wd:Q1059286 wdt:P571 ?publicationDate . FILTER(CONTAINS(LCASE(?director), LCASE(\"Ole John\"))) && FILTER(CONTAINS(LCASE(?director), LCASE(\"Jens Jørgen Thorsen\"))) && FILTER(CONTAINS(LCASE(?director), LCASE(\"Jørgen Leth\"))) && FILTER(CONTAINS(LCASE(?editor), LCASE(\"Ole John\"))) && FILTER(CONTAINS(LCASE(?editor), LCASE(\"Jens Jørgen Thorsen\"))) && FILTER(CONTAINS(LCASE(?editor), LCASE(\"Jørgen Leth\"))) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P57 ?writer;\",\n      \"wdt:P32 ?cinematographer.\",\n      \"{ SELECT ?title WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". } ?work rdfs:label ?title FILTER(?title = 'Anyone Lived in a Pretty How Town , 1:42.08' || ?title = 'Look at Life') } }\",\n      \"UNION { ?work wdt:P644 ?episode; ?episode p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer. }\",\n      \"UNION { ?work wdt:P121* wd:Q109838. }\"\n    ,\n      \"?work wdt:P644 ?episode; ?episode p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n      \"FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\"\n    ,\n      \"?episode wdt:P57 ?writerStatement; ?writerStatement pq:P580 \\\"1999-05-19\\\"^^xsd:date.\"\n    ,\n      \"?episode wdt:P32 ?cinematographerStatement; ?cinematographerStatement pq:P580 \\\"1999-05-19\\\"^^xsd:date.\"\n    ,\n      \"VALUES ?work { wd:Q12345678 } # Replace with actual Wikidata item IDs\"\n    ,\n      \"?episode wdt:P644 ?starWarsEpisode; ?starWarsEpisode p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\",\n      \"FILTER(?starWarsEpisode = wd:Q109838)\"\n    ,\n      \"?episode wdt:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?starWarsEpisode { wd:Q109838 } # Replace with actual Wikidata item ID\"\n    ,\n      \"FILTER NOT EXISTS { ?work wdt:P644 ?landBeforeTime. FILTER(?landBeforeTime = wd:Q2345678) }\",\n      \"?episode wdt:P644 ?landBeforeTime; ?landBeforeTime p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P32 ?cinematographerStatement; ?cinematographerStatement ps:P32 ?cinematographer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121* wd:Q109838. FILTER NOT EXISTS { ?work wdt:P644 ?starWarsEpisode. FILTER(?starWarsEpisode = wd:Q109838) }\",\n      \"?work wdt:P644 ?landBeforeTime; ?landBeforeTime p:P57 ?writerStatement; ?writerStatement ps:P57 ?writer.\"\n    ,\n      \"VALUES ?landBeforeTime { wd:Q2345678 } # Replace with actual Wikidata item ID\"\n    ,\n      \"?work wdt:P121*", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q114248760 ;\", \"># Assuming Uzak and Clouds of May are films, use appropriate property for film type if different.\",\n    \"wdt:P577 \\\"Uzak\\\"@en ;\", \"># Start with the title 'Uzak' as a placeholder. Use specific titles or properties to match exact works.\",\n    \"wdt:P1477 ?producer .\", \"># P1477 is used for producers, use appropriate property if different.\",\n    \"?producer wdt:P31 wd:Q925286 ;\", \"># Q925286 is the Wikidata item for film producer. Use specific properties to match roles like editor, executive producer, director, and writer.\",\n    \"wdt:P105* wd:Q925286 ;\", \"># P105 relates a person to their occupation. This checks if the person has any of these occupations.\",\n    \"FILTER(?producer != wd:Q925286) # Exclude the producer role itself from being returned as it's not specific enough.\" ,\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q114248760 ; > wdt:P577 \"Uzak\"@en ; > wdt:P1477 ?producer . > ?producer wdt:P31 wd:Q925286 ; > wdt:P105* wd:Q925286 ; > FILTER(?producer != wd:Q925286) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q102695 wdt:P361 ?director .\",\n    \"  wd:Q102695 wdt:P50 ?writer .\",\n    \"  wd:Q102695 wdt:P2814 ?executiveProducer .\",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"Jim Abrahams\\\")) \",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"Jerry Zucker\\\")) \",\n    \"  FILTER(CONTAINS(str(?executiveProducer), \\\"David Zucker\\\")) \",\n    \"  BIND(wd:Q102695 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q102695 wdt:P361 ?director . wd:Q102695 wdt:P50 ?writer . wd:Q102695 wdt:P2814 ?executiveProducer . FILTER(CONTAINS(str(?executiveProducer), \"Jim Abrahams\")) FILTER(CONTAINS(str(?executiveProducer), \"Jerry Zucker\")) FILTER(CONTAINS(str(?executiveProducer), \"David Zucker\")) BIND(wd:Q102695 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?writer ?execProducer ?director1 ?director2 ?director3\",\n    \"WHERE {\",\n      \"?movie wdt:P3459 'Airplane!'.\", \"@en\",\n      \"?movie wdt:P50 ?writer.\",\n      \"?movie wdt:P880 ?execProducer.\",\n      \"?movie wdt:P673 ?director1;\",\n      \"   wdt:P673 ?director2;\",\n      \"   wdt:P673 ?director3.\"\n    ,\n    \"FILTER(?director1 = 'Jim Abrahams'@en && ?director2 = 'David Zucker'@en && ?director3 = 'Jerry Zucker'@en).\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?movie ?writer ?execProducer ?director1 ?director2 ?director3 WHERE { ?movie wdt:P3459 'Airplane!'. @en ?movie wdt:P50 ?writer. ?movie wdt:P880 ?execProducer. ?movie wdt:P673 ?director1; wdt:P673 ?director2; wdt:P673 ?director3. FILTER(?director1 = 'Jim Abrahams'@en && ?director2 = 'David Zucker'@en && ?director3 = 'Jerry Zucker'@en). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?director ?executiveProducer\",\n    \"WHERE {\",\n      \"?film1 wdt:P3457 ?writer .\", \"# Twin Peaks: Fire Walk with Me writer\",\n      \"?film1 wdt:P6829 ?director .\", \"# Twin Peaks: Fire Walk with Me director\",\n      \"?film1 wdt:P161 ?executiveProducer .\", \"# Twin Peaks: Fire Walk with Me executive producer\",\n      \"FILTER(?film1 IN (wd:Q34570, wd:Q182912)).\", \"# QIDs for the films\",\n      \"?film2 wdt:P3457 ?writer .\", \"# My Son, My Son, What Have Ye Done? writer\",\n      \"?film2 wdt:P6829 ?director .\", \"# My Son, My Son, What Have Ye Done? director\",\n      \"?film2 wdt:P161 ?executiveProducer .\", \"# My Son, My Son, What Have Ye Done? executive producer\",\n      \"FILTER(?film2 = wd:Q345709).\", \"# QID for the film\"\n    ,\n      \"?film3 wdt:P3457 ?writer .\", \"# Surveillance writer\",\n      \"?film3 wdt:P6829 ?director .\", \"# Surveillance director\",\n      \"?film3 wdt:P161 ?executiveProducer .\", \"# Surveillance executive producer\",\n      \"FILTER(?film3 = wd:Q1064579).\" ,\"\\n    # QID for the film\"\n    ,\n      \"VALUES ?writer { wd:Q28411 }.\" ,\"\\n    # Specific writer, if known\"\n    , \"VALUES ?director { wd:Q28411 }.\" ,\"\\n    # Specific director, if known\"\n    , \"VALUES ?executiveProducer { wd:Q28411 }\" ,\"\\n    # Specific executive producer, if known\"\n    ,\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424.\" ,\"\\n    # Ensure it's a film\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424.\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424.\"\n    ,\n      \"FILTER NOT EXISTS { ?film1 wdt:P577 ?date . }.\" ,\"\\n    # Exclude films with no date\",\n      \"FILTER NOT EXISTS { ?film2 wdt:P577 ?date . }.\",\n      \"FILTER NOT EXISTS { ?film3 wdt:P577 ?date . }.\"\n    ,\n      \"?film1 wdt:P407 wd:Q698.\" ,\"\\n    # Ensure it's related to Twin Peaks\",\n      \"?film2 wdt:P407 wd:Q698.\",\n      \"?film3 wdt:P407 wd:Q698.\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n    ,\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?writer ?director ?executiveProducer WHERE { ?film1 wdt:P3457 ?writer . ?film1 wdt:P6829 ?director . ?film1 wdt:P161 ?executiveProducer . FILTER(?film1 IN (wd:Q34570, wd:Q182912)). ?film2 wdt:P3457 ?writer . ?film2 wdt:P6829 ?director . ?film2 wdt:P161 ?executiveProducer . FILTER(?film2 = wd:Q345709). ?film3 wdt:P3457 ?writer . ?film3 wdt:P6829 ?director . ?film3 wdt:P161 ?executiveProducer . FILTER(?film3 = wd:Q1064579). VALUES ?writer { wd:Q28411 }. VALUES ?director { wd:Q28411 }. VALUES ?executiveProducer { wd:Q28411 } ?film1 wdt:P31/wdt:P279* wd:Q11424. ?film2 wdt:P31/wdt:P279* wd:Q11424. ?film3 wdt:P31/wdt:P279* wd:Q11424. FILTER NOT EXISTS { ?film1 wdt:P577 ?date . }. FILTER NOT EXISTS { ?film2 wdt:P577 ?date . }. FILTER NOT EXISTS { ?film3 wdt:P577 ?date . }. ?film1 wdt:P407 wd:Q698. ?film2 wdt:P407 wd:Q698. ?film3 wdt:P407 wd:Q698. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69/wdt:P279* wd:Q34512;\",\n      \"?film wdt:P69/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P69 ?director.\",\n      \"FILTER(?director IN (wd:Q1680196, wd:Q34512, wd:Q1680196, wd:Q1680196, wd:Q34512))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?film wdt:P50/wdt:P279* wd:Q1680196; ?film wdt:P69/wdt:P279* wd:Q1680196; ?film wdt:P69/wdt:P279* wd:Q34512; ?film wdt:P69/wdt:P279* wd:Q1680196; ?film wdt:P69 ?director. FILTER(?director IN (wd:Q1680196, wd:Q34512, wd:Q1680196, wd:Q1680196, wd:Q34512)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P355 ?composer .\",\n      \"?resource wdt:P161 ?directorSinCity .\",\n      \"?resource wdt:P2870 ?cinematographerSinCity .\",\n      \"?resource wdt:P161 ?directorSinCityA .\",\n      \"?resource wdt:P2870 ?cinematographerSinCityA .\",\n      \"?resource wdt:P161 ?directorSharkboy .\",\n      \"?composer wdsg:label \\\"composer of Spy Kids 3-D: Game Over\\\"@en .\",\n      \"?directorSinCity wdsg:label \\\"director of Sin City\\\"@en .\",\n      \"?cinematographerSinCity wdsg:label \\\"cinematographer of Sin City\\\"@en .\",\n      \"?directorSinCityA wdsg:label \\\"director of Sin City: A Dame to Kill For\\\"@en .\",\n      \"?cinematographerSinCityA wdsg:label \\\"cinematographer of Sin City: A Dame to Kill For\\\"@en .\",\n      \"?directorSharkboy wdsg:label \\\"director of The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P355 ?composer . ?resource wdt:P161 ?directorSinCity . ?resource wdt:P2870 ?cinematographerSinCity . ?resource wdt:P161 ?directorSinCityA . ?resource wdt:P2870 ?cinematographerSinCityA . ?resource wdt:P161 ?directorSharkboy . ?composer wdsg:label \"composer of Spy Kids 3-D: Game Over\"@en . ?directorSinCity wdsg:label \"director of Sin City\"@en . ?cinematographerSinCity wdsg:label \"cinematographer of Sin City\"@en . ?directorSinCityA wdsg:label \"director of Sin City: A Dame to Kill For\"@en . ?cinematographerSinCityA wdsg:label \"cinematographer of Sin City: A Dame to Kill For\"@en . ?directorSharkboy wdsg:label \"director of The Adventures of Sharkboy and Lavagirl in 3-D\"@en . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer ?editor ?star\",\n    \"WHERE {\",\n      \"?work1 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?composer;\",\n              \"wdt:P648 ?title1.\",\n      \"?work2 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?editor;\",\n              \"wdt:P648 ?title2.\",\n      \"?work3 wdt:P31/wdt:P279* wd:Q11424;\",\n              \"wdt:P50 ?star;\",\n              \"wdt:P648 ?title3.\",\n      \"VALUES ?composer { wd:Q15411 }\", \"# Replace with actual QID if known\"\n     ,\"VALUES ?editor { wd:Q15411 }\", \"# Replace with actual QID if known\"\n      ,\"VALUES ?star { wd:Q15411 }\" ,\"# Replace with actual QID if known\"\n      ,\"?title1 ?p ?title2; ?p ?title3.\"\n    ,\n    \"FILTER(?composer != ?editor && ?composer != ?star && ?editor != ?star)\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?composer ?editor ?star WHERE { ?work1 wdt:P31/wdt:P279* wd:Q11424; wdt:P50 ?composer; wdt:P648 ?title1. ?work2 wdt:P31/wdt:P279* wd:Q11424; wdt:P50 ?editor; wdt:P648 ?title2. ?work3 wdt:P31/wdt:P279* wd:Q11424; wdt:P50 ?star; wdt:P648 ?title3. VALUES ?composer { wd:Q15411 } VALUES ?editor { wd:Q15411 } VALUES ?star { wd:Q15411 } ?title1 ?p ?title2; ?p ?title3. FILTER(?composer != ?editor && ?composer != ?star && ?editor != ?star) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?person .\", \"# Jim Abrahams, Jerry Zucker, and David Zucker\",\n      \"?film wdt:P703 ?person .\", \"# (Assuming P703 is used for writing)\",\n      \"?film wdt:P6881 ?person .\", \"# (Assuming P6881 is used for directing)\",\n      \"VALUES ?person { wd:Q249512 wd:Q1566122 wd:Q70355 }\" ,\"\\n\" ,\"\\t# Wikidata IDs for Jim Abrahams, Jerry Zucker, and David Zucker\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P3459 ?person . ?film wdt:P703 ?person . ?film wdt:P6881 ?person . VALUES ?person { wd:Q249512 wd:Q1566122 wd:Q70355 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?director ?writer ?editor1 ?editor2 ?editor3 ?editor4\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"      wdt:P577 ?releaseDate. # Optional: filter by release date, if needed\",\n      \"wdt:P6300 ?director. # Director of the film\",\n      \"?film wdt:P50 ?writer. # Writer of the film\",\n      \"?film wdt:P800 ?editor1; # Editors of the film\",\n      \"     p:P800/psv:P800 ?editor2; # Editors of the film (continued)\",\n      \"     p:P800/psv:P800 ?editor3; # Editors of the film (continued)\",\n      \"     p:P800/psv:P800 ?editor4. # Editors of the film (final editor)\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?film ?director ?writer ?editor1 ?editor2 ?editor3 ?editor4 WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 ?releaseDate. wdt:P6300 ?director. ?film wdt:P50 ?writer. ?film wdt:P800 ?editor1; p:P800/psv:P800 ?editor2; p:P800/psv:P800 ?editor3; p:P800/psv:P800 ?editor4. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?editor\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"?film wdt:P577 \\\"Pietà\\\"|\\\"Dream\\\"|\\\"Moebius\\\"@en. # The title of the film (in English)\",\n      \"?film wdt:P69 ?editor. # The editor of the film\",\n      \"OPTIONAL { ?film wdt:P6480 ?executiveProducer. } # Optional: executive producer, if any\",\n      \"FILTER NOT EXISTS { ?film wdt:P71 ?writer. } # Filter out films where a writer is explicitly stated\"\n    ,\n      \"?editor wdt:P31 wd:Q5. # The editor should be a person\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?film ?editor WHERE { ?film wdt:P31 wd:Q11424; ?film wdt:P577 \"Pietà\"|\"Dream\"|\"Moebius\"@en. ?film wdt:P69 ?editor. OPTIONAL { ?film wdt:P6480 ?executiveProducer. } FILTER NOT EXISTS { ?film wdt:P71 ?writer. } ?editor wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?executiveProducer ?edit ?write\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"      wdt:P577 ?releaseDate. # Optional: to filter by release date, if needed\",\n      \"?executiveProducer wdt:P106/wdt:P279* wd:Q83799; # Executive producer\",\n      \"?film wdt:P648 ?executiveProducer. # The executive producer is associated with the film\",\n      \"OPTIONAL { ?film wdt:P50 ?edit. } # Editor (optional)\",\n      \"OPTIONAL { ?film wdt:P2137 ?write. } # Writer (optional)\",\n      \"VALUES ?film { wd:Q123456 wd:Q678901 wd:Q234567 } # Replace with actual Wikidata IDs for the films\",\n    \"}\",\n    \"ORDER BY ASC(?film)\"\n  ]\n}", "normal_query": "SELECT ?film ?executiveProducer ?edit ?write WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 ?releaseDate. ?executiveProducer wdt:P106/wdt:P279* wd:Q83799; ?film wdt:P648 ?executiveProducer. OPTIONAL { ?film wdt:P50 ?edit. } OPTIONAL { ?film wdt:P2137 ?write. } VALUES ?film { wd:Q123456 wd:Q678901 wd:Q234567 } } ORDER BY ASC(?film) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writerEditor wdt:P31/wdt:P279* wd:Q80465;\",\n                   \"wdt:P57 ?writerName;\",\n                   \"wdt:P143 ?filmOrWork.\",\n      \"?marriage wdt:P570 ?date;\",\n                  \"wdt:P26 ?writerEditor.\",\n      \"?influence wdt:P527 ?writerEditor;\",\n                    \"wdt:P136 ?fieldOfInfluence.\",\n      \"FILTER(?filmOrWork IN (wd:Q48966, wd:Q1027699, wd:Q1027698))\",\n      \"?resource ?property ?value.\"\n    ,\n    \"}\"\n  ]\n}\n             \t \t \t \t", "normal_query": "SELECT ?resource WHERE { ?writerEditor wdt:P31/wdt:P279* wd:Q80465; wdt:P57 ?writerName; wdt:P143 ?filmOrWork. ?marriage wdt:P570 ?date; wdt:P26 ?writerEditor. ?influence wdt:P527 ?writerEditor; wdt:P136 ?fieldOfInfluence. FILTER(?filmOrWork IN (wd:Q48966, wd:Q1027699, wd:Q1027698)) ?resource ?property ?value. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q5 .\", \"># Person or subclass of Person (writer, star, director, composer)\",\n      \"?resource wdt:P50 wd:Q164828 .\", \"># Directed The Floorwalker\",\n      \"OPTIONAL { ?resource wdt:P6235 wd:Q19704 . } # Shoulder Arms (film) - P6235 is used for film work, but may need to be adjusted based on exact property used in Wikidata\",\n      \"OPTIONAL { ?resource wdt:P6235 wd:Q8602 . } # The Great Dictator (film) - similarly adjust as needed\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5 . > ?resource wdt:P50 wd:Q164828 . > OPTIONAL { ?resource wdt:P6235 wd:Q19704 . } OPTIONAL { ?resource wdt:P6235 wd:Q8602 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a placeholder for the movie 'Planet Terror and Sin City'\",\n      \"wdt:P136* ?role .\",\n      \"?role wdt:P279* wd:Q115109959 ;\", \"># Q115109959 is a placeholder for the occupation 'Cinematographer'\",\n      \"FILTER(?role != wd:Q1344698 || ?role != wd:Q2797589 || ?role != wd:Q244409 || ?role != wd:Q115109959) .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248709 ; > wdt:P136* ?role . ?role wdt:P279* wd:Q115109959 ; > FILTER(?role != wd:Q1344698 || ?role != wd:Q2797589 || ?role != wd:Q244409 || ?role != wd:Q115109959) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q11424;\",\n    \"    wdt:P161* [wdt:P577 \\\"Contagion\\\"@en, \\\"Schizopolis\\\"@en, \\\"Ocean's Eleven\\\"@en, \\\"Full Frontal Magic Mike XXL\\\"@en];\",\n    \"    wdt:P700 ?editor;\",\n    \"    wdt:P846 ?producer.\",\n    \"  ?editor wdt:P31/wdt:P279* wd:Q1547316.\",\n    \"  ?producer wdt:P31/wdt:P279* wd:Q1057613.\"\n    ]\n  }\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424; wdt:P161* [wdt:P577 \"Contagion\"@en, \"Schizopolis\"@en, \"Ocean's Eleven\"@en, \"Full Frontal Magic Mike XXL\"@en]; wdt:P700 ?editor; wdt:P846 ?producer. ?editor wdt:P31/wdt:P279* wd:Q1547316. ?producer wdt:P31/wdt:P279* wd:Q1057613. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248067 ;\", \"# Six Men Getting Sick\",\n      \"  wdt:P3395 ?cinematographer ;\", \"# cinematographer of the film\"\n      ,\"?film wdt:P71 ?editor .\", \"# editor of the film\",\n      \"?resource wdt:P161 ?cinematographer ;\", \"# The Black Ghiandola\",\n      \"  wdt:P3459 ?editor ;\", \"# Twin Peaks (TV series)\",\n      \"  wdt:P2860 ?cinematographer ;\", \"# Lumière and Company\",\n      \"  wdt:P161 ?editor ;\", \"# Dune (film)\",\n      \"  wdt:P3459 ?cinematographer ;\", \"# Inland Empire\",\n      \"  wdt:P2860 ?editor .\", \"# Boat (TV series)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248067 ; wdt:P3395 ?cinematographer ; ?film wdt:P71 ?editor . ?resource wdt:P161 ?cinematographer ; wdt:P3459 ?editor ; wdt:P2860 ?cinematographer ; wdt:P161 ?editor ; wdt:P3459 ?cinematographer ; wdt:P2860 ?editor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?writer .\",\n      \"?film wdt:P61 ?editor .\",\n      \"?film wdt:P830 ?director .\",\n      \"?writer wdt:P26 ?person .\",\n      \"?person wdt:P49 ?spouse .\",\n      \"VALUES ?film { wd:Q175112 wd:Q175113 }\", \"@en # Vagabond and The Gleaners and I\",\n      \"?writer wdt:P106/wdt:P279* ?occupation .\",\n      \"?director wdt:P106/wdt:P279* ?occupation .\",\n      \"?editor wdt:P106/wdt:P279* ?occupation .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?writer . ?film wdt:P61 ?editor . ?film wdt:P830 ?director . ?writer wdt:P26 ?person . ?person wdt:P49 ?spouse . VALUES ?film { wd:Q175112 wd:Q175113 } @en ?writer wdt:P106/wdt:P279* ?occupation . ?director wdt:P106/wdt:P279* ?occupation . ?editor wdt:P106/wdt:P279* ?occupation . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114246280 ;\", \"># Assuming The Confession is a film, use its Wikidata ID or P31 property to identify it as a film.\",\n      \"wdt:P739 ?editor ;\",\n      \"wdt:P105 ?execProducer ;\",\n      \"wdt:P143 ?cinematographer .\",\n      \"?film wdt:P57 ?destiny ;\",\n      \"?film wdt:P58 ?waitingRoom ;\",\n      \"?film wdt:P59 ?thirdPage .\",\n      \"?editor wdt:P161 wd:Q20491 ;\", \"># Q20491 is the Wikidata item for 'star and writer'\",\n      \"?execProducer wdt:P161 wd:Q20491 ;\",\n      \"?cinematographer wdt:P161 wd:Q20491 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114246280 ; > wdt:P739 ?editor ; wdt:P105 ?execProducer ; wdt:P143 ?cinematographer . ?film wdt:P57 ?destiny ; ?film wdt:P58 ?waitingRoom ; ?film wdt:P59 ?thirdPage . ?editor wdt:P161 wd:Q20491 ; > ?execProducer wdt:P161 wd:Q20491 ; ?cinematographer wdt:P161 wd:Q20491 . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?edit ?write ?direct \",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"  wdt:P577 ?date. # Optional date, can be removed if not needed\",\n      \"?film wdt:P698 ?edit. # Film editor\",\n      \"?film wdt:P50 ?write. # Writer\",\n      \"?film wdt:P106 ?direct. # Director\",\n      \"VALUES ?film { wd:Q249372 wd:Q114672 wd:Q186022 wd:Q114674 } # Pay Day, Modern Times, The Floorwalker, Work\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?film ?edit ?write ?direct WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 ?date. ?film wdt:P698 ?edit. ?film wdt:P50 ?write. ?film wdt:P106 ?direct. VALUES ?film { wd:Q249372 wd:Q114672 wd:Q186022 wd:Q114674 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?executiveProducer ?editor\",\n    \"WHERE {\",\n      \"?film1 wdt:P3459 ?writer .\", \"# The Waiting Room writer\",\n      \"?film1 wdt:P8670 ?executiveProducer .\", \"# The Waiting Room executive producer\",\n      \"?film2 wdt:P3459 ?editor .\", \"# The Confession editor\",\n      \"?film2 wdt:P8670 ?executiveProducer .\", \"# The Confession executive producer\"\n    ,\n    \"FILTER(?writer = ?executiveProducer, ?editor = ?executiveProducer)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?writer ?executiveProducer ?editor WHERE { ?film1 wdt:P3459 ?writer . ?film1 wdt:P8670 ?executiveProducer . ?film2 wdt:P3459 ?editor . ?film2 wdt:P8670 ?executiveProducer . FILTER(?writer = ?executiveProducer, ?editor = ?executiveProducer) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P50/wdt:P2861 ?director .\", \"sparql\",\n    \"?film wdt:P51/wdt:P2861 ?writer .\", \"sparql\",\n    \"VALUES ?director { wd:Q149732 wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 }\", \"sparql\",\n    \"VALUES ?writer { wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 wd:Q116026 }\", \"sparql\",\n    \"} LIMIT 10\"\n  ]\n}\n", "normal_query": "SELECT ?film WHERE { ?film wdt:P50/wdt:P2861 ?director . sparql ?film wdt:P51/wdt:P2861 ?writer . sparql VALUES ?director { wd:Q149732 wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 } sparql VALUES ?writer { wd:Q116022 wd:Q116023 wd:Q116024 wd:Q116025 wd:Q116026 } sparql } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q5 .\" , \"># Check if the resource is a person or a subclass of person\",\n    \"  ?resource wdt:P161* \\\"The Waiting Room\\\"@en .\" , \"># The Waiting Room as a film\",\n    \"  ?resource wdt:P161* \\\"Destiny The Confession\\\"@en .\" , \"># Destiny The Confession as a film\",\n    \"  (?resource wdt:P161* wd:Q24382790) ||\" , \"># Executive Producer of a film\",\n    \"  (?resource wdt:P39* wd:Q24382790) .\" ,\"\\t# Holds the position of executive producer\",\n    \"  FILTER EXISTS { ?resource wdt:P161* \\\"The Waiting Room\\\"@en . }\" , \"># Ensure The Waiting Room is associated with the resource\",\n    \"  FILTER EXISTS { ?resource wdt:P161* \\\"Destiny The Confession\\\"@en . }\" , \"># Ensure Destiny The Confession is associated with the resource\",\n    \"  (?resource wdt:P180* wd:Q24379554) ||\" , \"># Cinematographer of a film\",\n    \"  (?resource wdt:P39* wd:Q24379554) .\" ,\"\\t# Holds the position of cinematographer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q5 . > ?resource wdt:P161* \"The Waiting Room\"@en . > ?resource wdt:P161* \"Destiny The Confession\"@en . > (?resource wdt:P161* wd:Q24382790) || > (?resource wdt:P39* wd:Q24382790) . FILTER EXISTS { ?resource wdt:P161* \"The Waiting Room\"@en . } > FILTER EXISTS { ?resource wdt:P161* \"Destiny The Confession\"@en . } > (?resource wdt:P180* wd:Q24379554) || > (?resource wdt:P39* wd:Q24379554) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?resource WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Film work\",\n    \"  ?film wdt:P577 ?date.\" , \"# Date of publication\",\n    \"  ?filmEditor wdt:P106 wd:Q11340.\" , \"# Person is a film editor\",\n    \"  ?filmEditor wdt:P26 ?spouse.\" , \"# Spouse of the film editor\",\n    \"  ?spouse wdt:P109* wd:Q7856.\" , \"# Spouse is an author (writer)\",\n    \"  ?work wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Work is a film\",\n    \"  ?spouse wdt:P330 ?work.\" , \"# Spouse wrote the work\",\n    \"  FILTER(?film = ?work)\" , \"# Ensure the same work for both conditions\",\n    \"  VALUES ?film { wd:Q123456789 wd:Q123456790 wd:Q123456791 wd:Q123456792 wd:Q123456793 }\" , \"# Replace with actual Wikidata IDs for the films\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31/wdt:P279* wd:Q11424806. ?film wdt:P577 ?date. ?filmEditor wdt:P106 wd:Q11340. ?filmEditor wdt:P26 ?spouse. ?spouse wdt:P109* wd:Q7856. ?work wdt:P31/wdt:P279* wd:Q11424806. ?spouse wdt:P330 ?work. FILTER(?film = ?work) VALUES ?film { wd:Q123456789 wd:Q123456790 wd:Q123456791 wd:Q123456792 wd:Q123456793 } } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248097 ;\", \"># Q114248097 is a placeholder for the film resource, replace with actual Wikidata ID if known.\",\n      \"   wdt:P577 ?date .\",\n      \"?director wdt:P31/wdt:P279* wd:Q165212 ;\", \"># Q165212 is the Wikidata ID for Female, replace with actual gender category if needed.\",\n      \"   wdt:P57 ?film ;\",\n      \"   wdt:P40 ?script .\",\n      \"?script wdt:P31 wd:Q114248098 ;\", \"># Q114248098 is a placeholder for the script resource, replace with actual Wikidata ID if known.\",\n      \"   wdt:P57 ?film ;\",\n      \"   wdt:P673 ?director .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?director WHERE { ?film wdt:P31 wd:Q114248097 ; > wdt:P577 ?date . ?director wdt:P31/wdt:P279* wd:Q165212 ; > wdt:P57 ?film ; wdt:P40 ?script . ?script wdt:P31 wd:Q114248098 ; > wdt:P57 ?film ; wdt:P673 ?director . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31/wdt:P279* wd:Q5 .\" ,\"%s\" ,\n      \"?person wdt:P50 wd:Q164882.\" ,\n      \"?person wdt:P73 wd:Q164882.\" ,\n      \"?person wdt:P161 wd:Q164882.\" ,\n      \"?movie1 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Day of the Dead\\\"@en .\" ,\n      \"?movie2 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Monkey Shines\\\"@en .\" ,\n      \"?movie3 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Dawn of the Dead\\\"@en .\" ,\n      \"?movie4 wdt:P345 ?person ;\",\n        \"wdt:P577 \\\"Survival of the Dead\\\"@en .\" ,\n      \"?movie1 wdt:P629* wd:Q164882.\" ,\n      \"?movie2 wdt:P629* wd:Q164882.\" ,\n      \"?movie3 wdt:P629* wd:Q164882.\" ,\n      \"?movie4 wdt:P629* wd:Q164882.\" ,\n      \"?person wdt:P50 wd:Q765466.\"\n    ,\n    \"}\"\n  ]\n}\n               \t \t\t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P31/wdt:P279* wd:Q5 . %s ?person wdt:P50 wd:Q164882. ?person wdt:P73 wd:Q164882. ?person wdt:P161 wd:Q164882. ?movie1 wdt:P345 ?person ; wdt:P577 \"Day of the Dead\"@en . ?movie2 wdt:P345 ?person ; wdt:P577 \"Monkey Shines\"@en . ?movie3 wdt:P345 ?person ; wdt:P577 \"Dawn of the Dead\"@en . ?movie4 wdt:P345 ?person ; wdt:P577 \"Survival of the Dead\"@en . ?movie1 wdt:P629* wd:Q164882. ?movie2 wdt:P629* wd:Q164882. ?movie3 wdt:P629* wd:Q164882. ?movie4 wdt:P629* wd:Q164882. ?person wdt:P50 wd:Q765466. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?movie ?director ?producer\",\n    \"WHERE {\",\n      \"?movie wdt:P345 ?director ;\", \"# P345 is used for director of a film\",\n      \"?movie wdt:P161 ?producer .\", \"# P161 is used for producer of a film\",\n      \"?movie wdt:P2860 'Police Story 2'@en ;\", \"# P2860 is the title property, use the specific titles here\",\n      \"   wdt:P2860 'Chinese Zodiac'@en ;\",\n      \"   wdt:P2860 'Police Story'@en ;\",\n      \"   wdt:P2860 'The Fearless Hyena'@en .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?movie ?director ?producer WHERE { ?movie wdt:P345 ?director ; ?movie wdt:P161 ?producer . ?movie wdt:P2860 'Police Story 2'@en ; wdt:P2860 'Chinese Zodiac'@en ; wdt:P2860 'Police Story'@en ; wdt:P2860 'The Fearless Hyena'@en . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108+ wd:Q5723694;\",\n      \"wdt:P108+ wd:Q1021899;\",\n      \"wdt:P108+ wd:Q15221899;.\",\n      \"FILTER EXISTS { ?person wdt:P108+ wd:Q36748 }\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?person WHERE { ?person wdt:P108+ wd:Q5723694; wdt:P108+ wd:Q1021899; wdt:P108+ wd:Q15221899;. FILTER EXISTS { ?person wdt:P108+ wd:Q36748 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1680196;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1343746;\",\n      \"?film wdt:P50/wdt:P279* wd:Q1136989;.\",\n      \"OPTIONAL { ?film wdt:P50 ?person. }\",\n      \"FILTER(?person IN (wd:Q105369, wd:Q456795, wd:Q102269))\",\n    \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?film wdt:P50/wdt:P279* wd:Q1680196; ?film wdt:P50/wdt:P279* wd:Q1343746; ?film wdt:P50/wdt:P279* wd:Q1136989;. OPTIONAL { ?film wdt:P50 ?person. } FILTER(?person IN (wd:Q105369, wd:Q456795, wd:Q102269)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?movie1 wdt:P345 ?person ;\", \"# Sin City\",\n      \"?movie2 wdt:P345 ?person ;\", \"# The Adventures of Sharkboy and Lavagirl in 3-D\",\n      \"?series wdt:P345 ?person .\", \"# From Dusk till Dawn: The Series\",\n      \"?person wdt:P106* wd:Q87929.\" ,\"\\n\" ,\"\\t# Person (wider class)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?movie1 wdt:P345 ?person ; ?movie2 wdt:P345 ?person ; ?series wdt:P345 ?person . ?person wdt:P106* wd:Q87929. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wd:T106825 ?director ;\",\n      \"?film2 wd:T106825 ?director ;\",\n      \"?film3 wd:T106825 ?director ;\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q11424 ;\", \"># Q11424 is the item for 'Film'\",\n      \"?film2 wdt:P31/wdt:P279* wd:Q11424 ;\",\n      \"?film3 wdt:P31/wdt:P279* wd:Q11424 ;\",\n      \"?director wdt:P31/wdt:P279* wd:Q865094 ;\", \"># Q865094 is the item for 'Film director'\",\n      \"?film1 wdt:P31/wdt:P279* wd:Q105390 ;\", \"># Q105390 is the item for 'Cinematographer'\",\n      \"?film1 wdt:P73 wd:Q168469 , wd:Q168470 , wd:Q226666 ;\", \"># Q168469, Q168470, and Q226666 are the items for 'This Night', 'Rio das Mortes', and 'Lili Marleen' respectively\",\n      \"?film2 wdt:P73 wd:Q226666 ;\", \"># Q226666 is the item for 'Whity'\",\n      \"?director wdt:P105 ?writer ;\",\n      \"?writer wdt:P31/wdt:P279* wd:Q840144 ;\", \"># Q840144 is the item for 'Novelist'\",\n      \"?film1 wdt:P43 ?editor ;\",\n      \"?editor wdt:P31/wdt:P279* wd:Q16572221 .\", \"># Q16572221 is the item for 'Film editor'\"\n    ,\n      \"VALUES ?director { wd:Q840144 }\",\n      \"VALUES ?writer { wd:Q840144 }\",\n      \"VALUES ?editor { wd:Q16572221 }\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"FILTER(?p IN (wdt:P31, wdt:P279))\" ,\n      \"}\"\n  ]\n}\n \t        \t\t\t\t\t  \t\t\t", "normal_query": "SELECT ?resource WHERE { ?film1 wd:T106825 ?director ; ?film2 wd:T106825 ?director ; ?film3 wd:T106825 ?director ; ?film1 wdt:P31/wdt:P279* wd:Q11424 ; > ?film2 wdt:P31/wdt:P279* wd:Q11424 ; ?film3 wdt:P31/wdt:P279* wd:Q11424 ; ?director wdt:P31/wdt:P279* wd:Q865094 ; > ?film1 wdt:P31/wdt:P279* wd:Q105390 ; > ?film1 wdt:P73 wd:Q168469 , wd:Q168470 , wd:Q226666 ; > ?film2 wdt:P73 wd:Q226666 ; > ?director wdt:P105 ?writer ; ?writer wdt:P31/wdt:P279* wd:Q840144 ; > ?film1 wdt:P43 ?editor ; ?editor wdt:P31/wdt:P279* wd:Q16572221 . > VALUES ?director { wd:Q840144 } VALUES ?writer { wd:Q840144 } VALUES ?editor { wd:Q16572221 } ?resource ?p ?o. FILTER(?p IN (wdt:P31, wdt:P279)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P345 ?cinematographer .\",\n      \"?film2 wdt:P345 ?cinematographer .\",\n      \"?film3 wdt:P345 ?cinematographer .\",\n      \"?film1 wdt:P678 ?director .\",\n      \"?film2 wdt:P678 ?director .\",\n      \"?film3 wdt:P678 ?director .\",\n      \"?film1 wdt:P50 ?writer .\",\n      \"?film2 wdt:P50 ?writer .\",\n      \"?film3 wdt:P50 ?writer .\",\n      \"VALUES ?cinematographer { wd:Q495612 }\",\n      \"VALUES ?director { wd:Q786255 }\",\n      \"VALUES ?writer { wd:Q1686872 }\",\n      \"?film1 wdt:P340 wd:Q1021899 .\",\n      \"?film2 wdt:P340 wd:Q1021899 .\",\n      \"?film3 wdt:P340 wd:Q1021899 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}\n\t\t\t \t \t\t\t\t\t\t     \t\t\t", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P345 ?cinematographer . ?film2 wdt:P345 ?cinematographer . ?film3 wdt:P345 ?cinematographer . ?film1 wdt:P678 ?director . ?film2 wdt:P678 ?director . ?film3 wdt:P678 ?director . ?film1 wdt:P50 ?writer . ?film2 wdt:P50 ?writer . ?film3 wdt:P50 ?writer . VALUES ?cinematographer { wd:Q495612 } VALUES ?director { wd:Q786255 } VALUES ?writer { wd:Q1686872 } ?film1 wdt:P340 wd:Q1021899 . ?film2 wdt:P340 wd:Q1021899 . ?film3 wdt:P340 wd:Q1021899 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if it's a film\",\n      \"  wdt:P577 \\\"1977-05-25T00:00:00Z\\\"^. # Release date of Star Wars: Episode IV – A New Hope\",\n      \"?film wdt:P345 ?person. # Person who wrote and executive produced the film\",\n      \"?film wdt:P161 ?writer. # Writer of the film\",\n      \"?film wdt:P285 ?director. # Director of the film\",\n      \"FILTER(?writer = ?person || ?director = ?person). # Ensure the person is either writer or director\",\n      \"?film wdt:P495 \\\"Look at Life\\\"@en. # Look at Life as a work by the person\",\n      \"?film wdt:P495 \\\"Anyone Lived in a Pretty How Town\\\"@en. # Anyone Lived in a Pretty How Town as a work by the person\",\n      \"?person wdt:P161 ?filmmaker. # Filmmaker associated with the person\",\n      \"FILTER(?filmmaker = ?person). # Ensure the person is also a filmmaker\",\n      \"?person wdt:P31 wd:Q5. # Person is human\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"1977-05-25T00:00:00Z\"^. ?film wdt:P345 ?person. ?film wdt:P161 ?writer. ?film wdt:P285 ?director. FILTER(?writer = ?person || ?director = ?person). ?film wdt:P495 \"Look at Life\"@en. ?film wdt:P495 \"Anyone Lived in a Pretty How Town\"@en. ?person wdt:P161 ?filmmaker. FILTER(?filmmaker = ?person). ?person wdt:P31 wd:Q5. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424; # Check if the resource is a film or subclass of film\",\n    \"         wdt:P50|wdt:P281|wdt:P69|wdt:P71 ?person .\", \"# Director, producer, writer, editor relationships\",\n    \"  FILTER(STRSTARTS(str(?person), str(wd:Q143914)) || STRSTARTS(str(?person), str(wd:Q208526)) || STRSTARTS(str(?person), str(wd:Q72622))) # Filter for Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; wdt:P50|wdt:P281|wdt:P69|wdt:P71 ?person . FILTER(STRSTARTS(str(?person), str(wd:Q143914)) || STRSTARTS(str(?person), str(wd:Q208526)) || STRSTARTS(str(?person), str(wd:Q72622))) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q86459.\" , \"# Check if the resource is a costume designer\",\n      \"?resource wdt:P50* wd:Q1122656.\" , \"# Xavier Dolan as author or editor\",\n      \"wd:Q1122656 wdt:P304 ?resource.\" , \"# Reverse relationship to check if Xavier Dolan wrote and edited the resource\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q86459. ?resource wdt:P50* wd:Q1122656. wd:Q1122656 wdt:P304 ?resource. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film ?producer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424;\",\n      \"?film wdt:P577 ?releaseDate.\",\n      \"?producer wdt:P106/wdt:P279* wd:Q87478.\", \"@en\",\n      \"?producer wdt:P3300 ?film.  # Produced\",\n      \"OPTIONAL { ?producer wdt:P4150 ?film. }  # Executed\",\n      \"OPTIONAL { ?producer wdt:P2964 ?film. }  # Edited\",\n      \"OPTIONAL { ?producer wdt:P7387 ?film. }  # Directed\",\n      \"?film rdfs:label ?title.\",\n      \"FILTER (lang(?title) = 'en').\",\n      \"VALUES ?title { 'Pietà' 'Moebius' 'Dream' }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film ?producer WHERE { ?film wdt:P31 wd:Q11424; ?film wdt:P577 ?releaseDate. ?producer wdt:P106/wdt:P279* wd:Q87478. @en ?producer wdt:P3300 ?film. OPTIONAL { ?producer wdt:P4150 ?film. } OPTIONAL { ?producer wdt:P2964 ?film. } OPTIONAL { ?producer wdt:P7387 ?film. } ?film rdfs:label ?title. FILTER (lang(?title) = 'en'). VALUES ?title { 'Pietà' 'Moebius' 'Dream' } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"?film wdt:P700 ?writer .\", \"# The writer of the film (Jens Jørgen Thorsen, Jørgen Leth, and Ole John)\",\n      \"?film wdt:P3301 ?director .\", \"# The director of the film (Jens Jørgen Thorsen, Jørgen Leth, and Ole John)\",\n      \"?film wdt:P700 ?writer; # Ensure the same writer is mentioned\",\n      \"FILTER(?writer = wd:Q24916853 || ?writer = wd:Q1146699 || ?writer = wd:Q1146699) .\", \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n      \"?film wdt:P700 ?director; # Ensure the same director is mentioned\",\n      \"FILTER(?director = wd:Q24916853 || ?director = wd:Q1146699 || ?director = wd:Q1146699) .\", \"# Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\"\n  ]\n}\n\t\t\t \t \t \t \t \t \t \t \t ", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424; ?film wdt:P700 ?writer . ?film wdt:P3301 ?director . ?film wdt:P700 ?writer; FILTER(?writer = wd:Q24916853 || ?writer = wd:Q1146699 || ?writer = wd:Q1146699) . ?film wdt:P700 ?director; FILTER(?director = wd:Q24916853 || ?director = wd:Q1146699 || ?director = wd:Q1146699) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31/wdt:P279* wd:Q11424 ;\", \"# Check if the resource is a film\",\n    \"         wdt:P50 ?director ;\", \"# Director by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"         wdt:P269 ?editor ;\", \"# Editor by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"         wdt:P57 (wd:Q10483111 / wd:Q10483112 / wd:Q10483113) .  # Writers by Jens Jørgen Thorsen, Jørgen Leth, and Ole John\",\n    \"}\",\n    \"ORDER BY ?film\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31/wdt:P279* wd:Q11424 ; wdt:P50 ?director ; wdt:P269 ?editor ; wdt:P57 (wd:Q10483111 / wd:Q10483112 / wd:Q10483113) . } ORDER BY ?film LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property ?value wd:Q6580079\\\"\",\n      \"FILTER(?property = wd:P628 || ?property = wd:Px407 || ?property = wd:Px193 || ?property = wd:Px106).\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424; ?property ?value wd:Q6580079\" FILTER(?property = wd:P628 || ?property = wd:Px407 || ?property = wd:Px193 || ?property = wd:Px106). SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property ?value wd:Q6580079\\\"\",\n      \"FILTER(?property IN (wdt:P69, wdt:P105, wdt:P1412, wdt:P2863))\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}\n\t\t\t        \t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424; ?property ?value wd:Q6580079\" FILTER(?property IN (wdt:P69, wdt:P105, wdt:P1412, wdt:P2863)) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P3459 ?executiveProducer .\",\n      \"?film wdt:P1627 ?director .\",\n      \"?film wdt:P8130 ?writer .\",\n      \"FILTER (regex(str(?executiveProducer), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?director), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?writer), \\\"David Zucker|Jim Abrahams|Jerry Zucker\\\", \\\"i\\\"))\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P3459 ?executiveProducer . ?film wdt:P1627 ?director . ?film wdt:P8130 ?writer . FILTER (regex(str(?executiveProducer), \"David Zucker|Jim Abrahams|Jerry Zucker\", \"i\")) FILTER (regex(str(?director), \"David Zucker|Jim Abrahams|Jerry Zucker\", \"i\")) FILTER (regex(str(?writer), \"David Zucker|Jim Abrahams|Jerry Zucker\", \"i\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q11424;\",\n      \"?property p:P570|p:P800|p:P106 ?statement .\",\n      \"?statement ps:P570|ps:P800|ps:P106 wd:Q13441 ;\",\n      \"   pq:P582 ?editor ;\",\n      \"   pq:P583 ?cinematographer ;\",\n      \"   pq:P93 ?director ;\",\n      \"   pq:P735 ?executiveProducer .\",\n      \"?film wdt:P648|wdt:P106 wd:Q13441 ;\",\n      \"   wdt:P2861 ?title .\",\n      \"FILTER (LANG(?title) = 'en')\",\n      \"VALUES ?title { \\\"Pietà\\\" }\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31/wdt:P279* wd:Q11424; ?property p:P570|p:P800|p:P106 ?statement . ?statement ps:P570|ps:P800|ps:P106 wd:Q13441 ; pq:P582 ?editor ; pq:P583 ?cinematographer ; pq:P93 ?director ; pq:P735 ?executiveProducer . ?film wdt:P648|wdt:P106 wd:Q13441 ; wdt:P2861 ?title . FILTER (LANG(?title) = 'en') VALUES ?title { \"Pietà\" } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 ?resource .\",\n      \"?film wdt:P61 ?resource .\",\n      \"?film wdt:P106 wd:Q134372 .\",\n      \"?film wdt:P182 ?person .\",\n      \"?person wdt:P26 \\\"Rainer Werner Fassbinder\\\"@en .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 ?resource . ?film wdt:P61 ?resource . ?film wdt:P106 wd:Q134372 . ?film wdt:P182 ?person . ?person wdt:P26 \"Rainer Werner Fassbinder\"@en . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P141 ?influence ;\",\n           \"wdt:P570 ?birth .\",\n      \"?marriage wdt:P36 ?person1 ;\",\n                \"wdt:P37 ?person2 ;\",\n                \"wdt:P570 ?marriageDate .\",\n      \"wdl:Q1489629 wdt:P580 ?schoolFoundDate .\",\n    \"FILTER(?actor IN (wd:Q12345, wd:Q67890)) # Replace with actual QIDs for Wolfgang Ambros and Jan-Mari Carlotti\",\n    \"FILTER(?person1 IN (wd:Q12345, wd:Q67890)) # Replace with actual QIDs for Carolyn Dennis and Sara Dylan\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}\n\t\t\t \t\t\t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?actor wdt:P141 ?influence ; wdt:P570 ?birth . ?marriage wdt:P36 ?person1 ; wdt:P37 ?person2 ; wdt:P570 ?marriageDate . wdl:Q1489629 wdt:P580 ?schoolFoundDate . FILTER(?actor IN (wd:Q12345, wd:Q67890)) FILTER(?person1 IN (wd:Q12345, wd:Q67890)) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P108 \\\"World Wide Web Consortium\\\";\",\n              \"wdt:P1425 \\\"Open Data Institute\\\";\",\n              \"wdt:P170 ?company1;\",\n              \"wdt:P171 ?company2.\",\n      \"?company1 rdfs:label \\\"Plessey\\\"@en.\",\n      \"?company2 rdfs:label \\\"CERN\\\"@en.\",\n      \"?person wdt:P594 ?start_date1.\",\n      \"?person wdt:P580 ?start_date2.\",\n      \"FILTER(?start_date1 < ?start_date2)\",\n      \"?person wdt:P39 ?job_title.\"\n    ,\n      \"OPTIONAL { ?person wdt:P106 ?occupation. }\",\n      \"FILTER NOT EXISTS { ?person wdt:P108 \\\"World Wide Web Consortium\\\"; wdt:P1425 \\\"Open Data Institute\\\"; wdt:P170 ?company3; wdt:P171 ?company4. ?company3 rdfs:label \\\"CERN\\\"@en. ?company4 rdfs:label \\\"School of Electronics and Computer Science, University of Southampton\\\"@en. }\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P108 \"World Wide Web Consortium\"; wdt:P1425 \"Open Data Institute\"; wdt:P170 ?company1; wdt:P171 ?company2. ?company1 rdfs:label \"Plessey\"@en. ?company2 rdfs:label \"CERN\"@en. ?person wdt:P594 ?start_date1. ?person wdt:P580 ?start_date2. FILTER(?start_date1 < ?start_date2) ?person wdt:P39 ?job_title. OPTIONAL { ?person wdt:P106 ?occupation. } FILTER NOT EXISTS { ?person wdt:P108 \"World Wide Web Consortium\"; wdt:P1425 \"Open Data Institute\"; wdt:P170 ?company3; wdt:P171 ?company4. ?company3 rdfs:label \"CERN\"@en. ?company4 rdfs:label \"School of Electronics and Computer Science, University of Southampton\"@en. } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248090 ;\", \"># Q114248090 is a film, specifically Sin City: A Dame to Kill For\"\n      ]\n      }\n     \t\t\t\t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?person WHERE { ?film wdt:P31 wd:Q114248090 ; > LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?editor exec:director ?dreamAndMoebius .\",\n      \"?editor exec:executiveProducer ?dreamAndMoebius .\",\n      \"?editor wdt:P31 wd:Q5784962 .\", \"# Assuming editor is a person\"\n     ,\"?pietas exec:directed ?pietas .\",\n      \"?pietas exec:edited ?pietas .\",\n      \"?pietas exec:wrote ?pietas .\",\n      \"?pietas exec:executiveProduced ?pietas .\",\n      \"?pietas wdt:P31 wd:Q26759840 .\", \"# Assuming Pietà is a TV series\"\n     ,\"?dreamAndMoebius wdt:P31 wd:Q26759840 .\" ,\"\\n\" ,\"\\n\",\n      \"?resource ?p ?o.\"\n    ,\n    \"}\"\n  ]\n}\n                 \t \t", "normal_query": "SELECT ?resource WHERE { ?editor exec:director ?dreamAndMoebius . ?editor exec:executiveProducer ?dreamAndMoebius . ?editor wdt:P31 wd:Q5784962 . ?pietas exec:directed ?pietas . ?pietas exec:edited ?pietas . ?pietas exec:wrote ?pietas . ?pietas exec:executiveProduced ?pietas . ?pietas wdt:P31 wd:Q26759840 . ?dreamAndMoebius wdt:P31 wd:Q26759840 . ?resource ?p ?o. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?film1 ?film2 ?film3\",\n    \"WHERE {\",\n      \"?producer wdt:P175 wd:Q864990.\" , \"# Film producer\",\n      \"?producer wdt:P171* [wdt:P161 wd:Q864990; wdt:P31/wdt:P279* wd:Q11424].\", \"# Founded organizations\",\n      \"VALUES ?organizations { wd:Q864990 wd:Q1542121 }.\", \"# D.W. Griffith Productions, United Artists Corporation, David W. Griffith Corp.\",\n      \"?producer wdt:P31/wdt:P279* wd:Q11424.\" , \"# Is a film producer\",\n      \"?film1 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote The Brahma Diamond\",\n      \"?film2 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote His Lost Love\",\n      \"?film3 wdt:P57 ?producer; wdt:P161 wd:Q80505.\" , \"# Directed and wrote The Birth of a Nation\",\n      \"VALUES ?films { wd:Q80505 wd:Q80506 wd:Q80507 }\" ,\"# The Brahma Diamond, His Lost Love, The Birth of a Nation\"\n    ,\n      \"FILTER(?film1 != ?film2 && ?film2 != ?film3 && ?film1 != ?film3)\" , \"# Ensure each film is unique\"\n    ,\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\" ,\"# Label service for English labels\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?producer ?film1 ?film2 ?film3 WHERE { ?producer wdt:P175 wd:Q864990. ?producer wdt:P171* [wdt:P161 wd:Q864990; wdt:P31/wdt:P279* wd:Q11424]. VALUES ?organizations { wd:Q864990 wd:Q1542121 }. ?producer wdt:P31/wdt:P279* wd:Q11424. ?film1 wdt:P57 ?producer; wdt:P161 wd:Q80505. ?film2 wdt:P57 ?producer; wdt:P161 wd:Q80505. ?film3 wdt:P57 ?producer; wdt:P161 wd:Q80505. VALUES ?films { wd:Q80505 wd:Q80506 wd:Q80507 } FILTER(?film1 != ?film2 && ?film2 != ?film3 && ?film1 != ?film3) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248067 ;\", \"># Assuming Brecha and Primary! and In Your Absence are films, use appropriate Wikidata item identifier if known.\",\n      \"wdt:P577 ?date .\",\n      \"?film wdt:P50 ?producer .\",\n      \"?film wdt:P109 ?editor .\",\n      \"?film wdt:P648 ?composer .\",\n      \"?film wdt:P323 ?cinematographer .\",\n      \"?film wdt:P171 ?director .\",\n      \"OPTIONAL { ?editAndWrite wdt:P50 ?producer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P109 ?editor . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P648 ?composer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P323 ?cinematographer . }\",\n      \"OPTIONAL { ?editAndWrite wdt:P171 ?director . }\",\n      \"?editAndWrite wdt:P50 ?producer ;\",\n      \"wdt:P109 ?editor ;\",\n      \"wdt:P648 ?composer ;\",\n      \"wdt:P323 ?cinematographer ;\",\n      \"wdt:P171 ?director .\",\n      \"?resource ?p ?editAndWrite .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248067 ; > wdt:P577 ?date . ?film wdt:P50 ?producer . ?film wdt:P109 ?editor . ?film wdt:P648 ?composer . ?film wdt:P323 ?cinematographer . ?film wdt:P171 ?director . OPTIONAL { ?editAndWrite wdt:P50 ?producer . } OPTIONAL { ?editAndWrite wdt:P109 ?editor . } OPTIONAL { ?editAndWrite wdt:P648 ?composer . } OPTIONAL { ?editAndWrite wdt:P323 ?cinematographer . } OPTIONAL { ?editAndWrite wdt:P171 ?director . } ?editAndWrite wdt:P50 ?producer ; wdt:P109 ?editor ; wdt:P648 ?composer ; wdt:P323 ?cinematographer ; wdt:P171 ?director . ?resource ?p ?editAndWrite . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P17 wd:Q30; # American founder and employee of Sally Ride Science\",\n      \"?person wdt:P27 wd:Q851643; # Employee of Center for International Security and Cooperation\",\n      \"?person wdt:P108 wd:Q9282; # Employed by Stanford University\",\n      \"?person wdt:P108 wd:Q10283; # Employed by National Aeronautics and Space Administration (NASA)\",\n      \"?person wdt:P108 wd:Q46537; # Employed by University of California, San Diego\",\n      \"?person wdt:P735 wd:Q9282; # Founder of Sally Ride Science\",\n      \"FILTER(?person != wd:Q9282) # Exclude Sally Ride herself\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P17 wd:Q30; ?person wdt:P27 wd:Q851643; ?person wdt:P108 wd:Q9282; ?person wdt:P108 wd:Q10283; ?person wdt:P108 wd:Q46537; ?person wdt:P735 wd:Q9282; FILTER(?person != wd:Q9282) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31/wdt:P279* wd:Q11424;\", \"# Resource is a person or has a subclass of Person\",\n    \"    wdt:P106/wdt:P279* [\", \"# Occupation is one of the following\",\n    \"      (wdt:P1135|wdt:P188);\", \"# Cinematographer or Director\",\n    \"      FILTER(?occupation IN(wd:Q11340, wd:Q66279)) # Editor or Composer\",\n    \"    ] .\",\n    \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q11424; wdt:P106/wdt:P279* [ (wdt:P1135|wdt:P188); FILTER(?occupation IN(wd:Q11340, wd:Q66279)) ] . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31/wdt:P279* wd:Q168450.\" , \"# Check if the resource is a person or an organization\",\n      \"?resource wdt:P108 ?employment.\" , \"# Find employment relationships\",\n      \"(?employment wdt:P106 [wdt:P27 wd:Q139014];\" , \"# Nibariki, Ghibli Museum, and TMS Entertainment\",\n      \" ?employment wdt:P106 [wdt:P27 wd:Q586919];\" , \"# Shin-Ei Animation and Studio Ghibli\",\n      \" ?employment wdt:P106 [wdt:P27 wd:Q43223]).\" , \"# Tokuma Memorial Cultural Foundation for Animation\"\n      ,\n      \"?resource wdt:P58 ?work.\" , \"# Find the work related to Howl's Moving Castle\",\n      \"?work wdt:P648 wd:Q190176.\" ,\"# Howl's Moving Castle\"\n    ,\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31/wdt:P279* wd:Q168450. ?resource wdt:P108 ?employment. (?employment wdt:P106 [wdt:P27 wd:Q139014]; ?employment wdt:P106 [wdt:P27 wd:Q586919]; ?employment wdt:P106 [wdt:P27 wd:Q43223]). ?resource wdt:P58 ?work. ?work wdt:P648 wd:Q190176. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P3459 ?film .\", \"# P3459 is used for cinematographer of a film\",\n      \"?resource wdt:P50 ?writingWork .\", \"# P50 is used for writer of a work\",\n      \"?resource wdt:P161 ?directedFilm .\", \"# P161 is used for director of a film\",\n      \"?film wdt:P3459 \\\"Herbie\\\"@en .\", \"# Specific cinematography work\",\n      \"?writingWork wdt:P304 \\\"Anyone Lived in a Pretty How Town\\\"@en .\", \"# Specific writing work\",\n      \"?directedFilm wdt:P161 \\\"Star Wars: Episode IV – A New Hope\\\"@en .\", \"# Specific directed film\"\n    ,\n      \"FILTER(?resource = wd:Q7574)\" ,\"\\n\" ,\"\\t# Q7574 is the Wikidata ID for George Lucas, who directed Star Wars: Episode IV - A New Hope\"\n    ,\n      \"?resource wdt:P161 ?directedFilm .\", \"# Ensure the person directed the film as well\"\n    ,\n      \"VALUES ?resource { wd:Q7574 }\" ,\"\\n\" ,\"\\t# Limiting to George Lucas based on his known role in Star Wars\"\n    ,\n      \"?resource wdt:P31/wdt:P279* wd:Q11860\" ,\"\\t# Ensure the resource is a person\"\n    ,\n      \"}\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P3459 ?film . ?resource wdt:P50 ?writingWork . ?resource wdt:P161 ?directedFilm . ?film wdt:P3459 \"Herbie\"@en . ?writingWork wdt:P304 \"Anyone Lived in a Pretty How Town\"@en . ?directedFilm wdt:P161 \"Star Wars: Episode IV – A New Hope\"@en . FILTER(?resource = wd:Q7574) ?resource wdt:P161 ?directedFilm . VALUES ?resource { wd:Q7574 } ?resource wdt:P31/wdt:P279* wd:Q11860 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248056 ;\", \"# Rabbits and Six Men Getting Sick\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248057 .\", \"# Twin Peaks\",\n      \"?film wdt:P31/wdt:P279* wd:Q114248058 .\", \"# Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done\",\n      \"?person wdt:P31/wdt:P279* wd:Q114248060 ;\" , \"# Cinematographer, Director, Editor\",\n      \"wdt:P578 ?film. # Exec producer role\",\n    \"}\",\n    \"GROUP BY ?person\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?film wdt:P31/wdt:P279* wd:Q114248056 ; ?film wdt:P31/wdt:P279* wd:Q114248057 . ?film wdt:P31/wdt:P279* wd:Q114248058 . ?person wdt:P31/wdt:P279* wd:Q114248060 ; wdt:P578 ?film. } GROUP BY ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248090 ;\", \"# The Kid (film)\",\n      \"?film2 wdt:P31 wd:Q114248090 ;\", \"# The Floorwalker (film)\",\n      \"?film3 wdt:P31 wd:Q114248090 ;\", \"# A Woman (film)\",\n      \"?film4 wdt:P31 wd:Q114248090 .\", \"# Modern Times (film)\",\n      \"?director1 wdt:P161 ?film1 ;\",\n      \"?editor1 wdt:P162 ?film1 ;\",\n      \"?director2 wdt:P161 ?film2 ;\",\n      \"?editor2 wdt:P162 ?film2 ;\",\n      \"?director3 wdt:P161 ?film3 ;\",\n      \"?editor3 wdt:P162 ?film3 ;\",\n      \"?director4 wdt:P161 ?film4 ;\",\n      \"?editor4 wdt:P162 ?film4 ;\",\n      \"?director1 wdt:P50+ wd:Q98724 ;\", \"# Lita Grey (person)\",\n      \"?director2 wdt:P50+ wd:Q36242 ;\", \"# Mildred Harris (person)\",\n      \"?editor1 wdt:P50+ wd:Q98724 ;\",\n      \"?editor2 wdt:P50+ wd:Q36242 ;\",\n      \"?director3 wdt:P50+ wd:Q105391 ;\", \"# Oona O'Neill (person)\",\n      \"?director4 wdt:P50+ wd:Q105391 ;\",\n      \"?editor3 wdt:P50+ wd:Q105391 ;\",\n      \"?editor4 wdt:P50+ wd:Q105391 ;\",\n      \"VALUES ?resource { ?director1 ?editor1 ?director2 ?editor2 ?director3 ?editor3 ?director4 ?editor4 }\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q114248090 ; ?film2 wdt:P31 wd:Q114248090 ; ?film3 wdt:P31 wd:Q114248090 ; ?film4 wdt:P31 wd:Q114248090 . ?director1 wdt:P161 ?film1 ; ?editor1 wdt:P162 ?film1 ; ?director2 wdt:P161 ?film2 ; ?editor2 wdt:P162 ?film2 ; ?director3 wdt:P161 ?film3 ; ?editor3 wdt:P162 ?film3 ; ?director4 wdt:P161 ?film4 ; ?editor4 wdt:P162 ?film4 ; ?director1 wdt:P50+ wd:Q98724 ; ?director2 wdt:P50+ wd:Q36242 ; ?editor1 wdt:P50+ wd:Q98724 ; ?editor2 wdt:P50+ wd:Q36242 ; ?director3 wdt:P50+ wd:Q105391 ; ?director4 wdt:P50+ wd:Q105391 ; ?editor3 wdt:P50+ wd:Q105391 ; ?editor4 wdt:P50+ wd:Q105391 ; VALUES ?resource { ?director1 ?editor1 ?director2 ?editor2 ?director3 ?editor3 ?director4 ?editor4 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?work wdt:P50 ?person .\", \"# Written by\",\n      \"?work wdt:P2093 ?person .\", \"# Edited by (P2093 is the property for 'edited by')\",\n      \"?work wdt:P61 ?person .\", \"# Directed by\",\n      \"FILTER(?person = wd:Q7845)\" ,\"\\n# Charlie Chaplin's Wikidata ID\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?work wdt:P50 ?person . ?work wdt:P2093 ?person . ?work wdt:P61 ?person . FILTER(?person = wd:Q7845) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer ?acquirer1 ?acquirer2 ?acquirer3 ?acquirer4\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P361 ?acquirer1. # Acquired by Laurene Powell Jobs and Fidelity Investments\",\n      \"?distributorProducer wdt:P527 ?acquirer2. # Acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies\",\n      \"FILTER(?acquirer1 = wd:Q3046982 && ?acquirer2 = wd:Q11151996) # Laurene Powell Jobs and Fidelity Investments\",\n      \"?distributorProducer wdt:P527* wd:Q11151996. # Acquired by BlackRock, State Street Global Advisors, T. Rowe Price, and Capital Group Companies\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer ?acquirer1 ?acquirer2 ?acquirer3 ?acquirer4 WHERE { ?distributorProducer wdt:P361 ?acquirer1. ?distributorProducer wdt:P527 ?acquirer2. FILTER(?acquirer1 = wd:Q3046982 && ?acquirer2 = wd:Q11151996) ?distributorProducer wdt:P527* wd:Q11151996. } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P361 wd:Q249058.\" , \"># City Lights (film) - Q249058 in Wikidata\",\n      \"?resource wdt:P361 wd:Q249072.\" , \"># Modern Times (film) - Q249072 in Wikidata\",\n      \"?resource wdt:P577 ?date .\", \"># Ensure it's a person by checking for birth date\",\n      \"?resource wdt:P106/wdt:P279* wd:Q83199.\" , \"># Composer, editor, and director - Q83199 is the broad match for these roles in Wikidata\",\n      \"FILTER NOT EXISTS { ?resource wdt:P31/wdt:P279* wd:Q5 . }\" , \"># Ensure it's not a person but a resource (e.g., film) by excluding instances of human\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P361 wd:Q249058. > ?resource wdt:P361 wd:Q249072. > ?resource wdt:P577 ?date . > ?resource wdt:P106/wdt:P279* wd:Q83199. > FILTER NOT EXISTS { ?resource wdt:P31/wdt:P279* wd:Q5 . } > } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?film1 ?film2 ?influenceLars ?influenceAran\",\n    \"WHERE {\",\n      \"?director wdt:P3450 ?film1 ;\", \"# P3450 is used for 'Directed by'\",\n      \"?director wdt:P3450 ?film2 .\", \"# P3450 is used for 'Directed by'\",\n      \"?film1 wdt:P6789 \\\"There Will Be No Leave Today\\\"@en ;\", \"# P6789 is a hypothetical property, replace with actual property if known\",\n      \"?film2 wdt:P6789 \\\"The Killers\\\"@en .\", \"# P6789 is a hypothetical property, replace with actual property if known\",\n      \"?director wdt:P1054 ?influenceLars ;\", \"# P1054 is a hypothetical property for influence on Lars von Trier, replace with actual property if known\",\n      \"?director wdt:P1062 ?influenceAran .\", \"# P1062 is a hypothetical property for influence on Aran Cosentino, replace with actual property if known\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?director ?film1 ?film2 ?influenceLars ?influenceAran WHERE { ?director wdt:P3450 ?film1 ; ?director wdt:P3450 ?film2 . ?film1 wdt:P6789 \"There Will Be No Leave Today\"@en ; ?film2 wdt:P6789 \"The Killers\"@en . ?director wdt:P1054 ?influenceLars ; ?director wdt:P1062 ?influenceAran . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5 .\" ,\",  # Person is a human\",\n      \"?person wdt:P275 ?marriage1 .\", \"# The person married Oona O'Neill\",\n      \"?person wdt:P275 ?marriage2 .\", \"# The person married Lita Grey\",\n      \"?person wdt:P275 ?marriage3 .\", \"# The person married Mildred Harris\",\n      \"?person wdt:P106/wdt:P279* wd:Q84519 .\" ,\",  # The person is a film editor and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd\",\n      \"?person wdt:P39 wd:Q16609 .\" ,\",  # The person founded United Artists Corporation\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . , ?person wdt:P275 ?marriage1 . ?person wdt:P275 ?marriage2 . ?person wdt:P275 ?marriage3 . ?person wdt:P106/wdt:P279* wd:Q84519 . , ?person wdt:P39 wd:Q16609 . , } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the film is a movie\",\n      \"  wdt:P577 \\\"1988-01-01T00:00:00Z\\\"^^xsd:dateTime . # Example date, adjust as needed\",\n      \"?film wdt:P57 ?director; # Director of the film\",\n      \"?film wdt:P161 ?star; # Star of the film\",\n      \"?film wdt:P40 ?writer. # Writer of the film\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" } # Label in English\",\n    \"}\",\n    \"FILTER (regex(str(?film), 'Jane B\\\\. par Agn\\\\eses|The Beaches of Agn\\\\eses|The World of Jacques Demy', 'i')) # Filter by film titles\"\n  ]\n}\n\t\t\t \t        \t\t\t\t\t", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"1988-01-01T00:00:00Z\"^^xsd:dateTime . ?film wdt:P57 ?director; ?film wdt:P161 ?star; ?film wdt:P40 ?writer. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } FILTER (regex(str(?film), 'Jane B\\. par Agn\\eses|The Beaches of Agn\\eses|The World of Jacques Demy', 'i')) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P31/wdt:P279* wd:Q86450 ;\", \"# Distributor and producer of Mozart in the Jungle\",\n      \"  wdt:P1294 ?acquirer .\", \"# Acquired by The Vanguard Group and BlackRock\",\n      \"?acquirer p:P1294 ?statement .\",\n      \"?statement ps:P1294 ?distributorProducer ;\",\n      \"   pq:P580 ?acquisitionDate .\", \"# Acquisition date (optional, for context)\",\n      \"?resource wdt:P31/wdt:P279* wd:Q16649091 ;\" , \"# Related to Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks\",\n      \"  (wdt:P180|wdt:P154|wdt:P161|wdt:P132) ?resource .\" ,\"\\n# P180 - parent company of, P154 - subsidiary of, P161 - product of, P132 - domain name of\"\n    ,\n      \"FILTER(?distributorProducer != ?resource)\" ,\"\\n# Ensure we don't return the distributor/producer itself as a resource\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?distributorProducer wdt:P31/wdt:P279* wd:Q86450 ; wdt:P1294 ?acquirer . ?acquirer p:P1294 ?statement . ?statement ps:P1294 ?distributorProducer ; pq:P580 ?acquisitionDate . ?resource wdt:P31/wdt:P279* wd:Q16649091 ; (wdt:P180|wdt:P154|wdt:P161|wdt:P132) ?resource . FILTER(?distributorProducer != ?resource) } LIMIT 10", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P161 ?star ;\", \"# Star role\",\n    \"           wdt:P2790 ?editor ;\", \"# Editor role\",\n    \"           wdt:P3458 ?cinematographer . # Cinematographer role\",\n    \"  FILTER(?star = wd:Q1234567) .  # Replace with the actual Wikidata ID for Female Vampire\",\n    \"  ?resource wdt:P50 ?spanishWriter ;\", \"# Spanish writer role\",\n    \"           wdt:P3458 ?director .         # Director role\",\n    \"  FILTER(?spanishWriter = wd:Q789123) . # Replace with the actual Wikidata ID for 99 Women\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161 ?star ; wdt:P2790 ?editor ; wdt:P3458 ?cinematographer . FILTER(?star = wd:Q1234567) . ?resource wdt:P50 ?spanishWriter ; wdt:P3458 ?director . FILTER(?spanishWriter = wd:Q789123) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P175+ wd:Q960384 ;\", \"# Industrial Light & Magic and THX were founded by Lucasfilm\",\n      \"?resource wdt:P175+ wd:Q210448 .  # Jediism was founded by Mellody Hobson's spouse\",\n      \"wd:Q210448 wdt:P36 ?founder ;\", \"# Find the founder of Jediism\",\n      \"?founder wdt:P671 ?spouse ;\", \"# Find the spouse of the founder\",\n      \"?spouse wdt:P365 ?resource .  # Find the resource founded by Mellody Hobson's spouse\"\n    ,\n      \"FILTER(?resource != wd:Q960384)  # Exclude Lucasfilm as it is already mentioned in the first part\"\n    ,\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P175+ wd:Q960384 ; ?resource wdt:P175+ wd:Q210448 . wd:Q210448 wdt:P36 ?founder ; ?founder wdt:P671 ?spouse ; ?spouse wdt:P365 ?resource . FILTER(?resource != wd:Q960384) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424; # Check if the resource is a film\",\n      \"  wdt:P577 \\\"The Madness\\\"@en. # The title of the film\",\n      \"?film wdt:P688 ?cinematographer. # Cinematographer of the film\",\n      \"?film wdt:P161 ?star. # Star of the film\",\n      \"?film wdt:P3459 ?writer. # Writer of the film\",\n      \"?film wdt:P2860 ?director. # Director of the film\",\n      \"?film wdt:P739 ?producer. # Executive producer of the film\",\n      \"?film wdt:P710 ?editor. # Editor of the film\",\n      \"VALUES ?film { wd:Q12345 } # Replace with the actual Wikidata ID for The Madness if known\",\n      \"?resource ?p ?object. # Return all resources related to the film\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424; wdt:P577 \"The Madness\"@en. ?film wdt:P688 ?cinematographer. ?film wdt:P161 ?star. ?film wdt:P3459 ?writer. ?film wdt:P2860 ?director. ?film wdt:P739 ?producer. ?film wdt:P710 ?editor. VALUES ?film { wd:Q12345 } ?resource ?p ?object. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer ?cinematographer\",\n    \"WHERE {\",\n      \"?work wdt:P31/wdt:P279* wd:Q11424806.\" , \"# Check if the work is a film or TV show\",\n      \"?work wdt:P577 \\\"1971-01-01\\\"^^xsd:date.\" , \"# Example date, adjust as needed\",\n      \"?work wdt:P50 ?writer.\" , \"# Writer of the work\",\n      \"?work wdt:P323 ?cinematographer.\" , \"# Cinematographer of the work\",\n      \"FILTER(?work IN (wd:Q186947, wd:Q1027697, wd:Q1586692, wd:Q11424806))\" , \"# Replace with actual Wikidata IDs if known\"\n    ,\n      \"OPTIONAL { ?work wdt:P57 \" ,\"Herbie married a person and influenced Marcus Orelias and Lorne Lanning\" ,\". }\" , \"# Optional filter for the specific statement\"\n    ,\n    \"} LIMIT 100\"\n  ]\n}\n               \t\t", "normal_query": "SELECT ?writer ?cinematographer WHERE { ?work wdt:P31/wdt:P279* wd:Q11424806. ?work wdt:P577 \"1971-01-01\"^^xsd:date. ?work wdt:P50 ?writer. ?work wdt:P323 ?cinematographer. FILTER(?work IN (wd:Q186947, wd:Q1027697, wd:Q1586692, wd:Q11424806)) OPTIONAL { ?work wdt:P57 Herbie married a person and influenced Marcus Orelias and Lorne Lanning . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248709 ;\", \"># Q114248709 is a placeholder for the film resource (Uzak or Clouds of May)\",\n      \"?film wdt:P577 ?date .\", \"># Optional date, can be removed if not needed\",\n      \"?film wdt:P6379 ?cinematographer .\", \"># Cinematographer\",\n      \"?film wdt:P802 ?producer .\", \"># Producer (executive producer)\",\n      \"?film wdt:P1004 ?editor .\", \"># Editor\",\n      \"?film wdt:P57 ?writer .\", \"># Writer\",\n      \"?cinematographer wdt:P31 wd:Q966892 ;\", \"># Q966892 is the Wikidata item for Cinematographer\",\n      \"?producer wdt:P31 wd:Q40695 ;\", \"># Q40695 is the Wikidata item for Executive producer\",\n      \"?editor wdt:P31 wd:Q7682 ;\", \"># Q7682 is the Wikidata item for Editor\",\n      \"?writer wdt:P31 wd:Q114222072 ;\", \"># Q114222072 is a placeholder for Writer (Nuri Bilge Ceylan)\",\n      \"FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer)\" ,\"\\n\",\n      \"?trilogy wdt:P577 ?date ;\", \"># Optional date, can be removed if not needed\",\n      \"?trilogy wdt:P6379 ?cinematographer .\", \"># Cinematographer of the trilogy\",\n      \"?trilogy wdt:P802 ?producer .\", \"># Producer (executive producer) of the trilogy\",\n      \"?trilogy wdt:P1004 ?editor .\", \"># Editor of the trilogy\",\n      \"?trilogy wdt:P57 ?writer .\", \"># Writer of the trilogy\",\n      \"FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer)\" ,\"\\n\",\n      \"?film wdt:P161 ?trilogy.\" ,\"\\n\", \"># Film is part of the trilogy\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q114248709 ; > ?film wdt:P577 ?date . > ?film wdt:P6379 ?cinematographer . > ?film wdt:P802 ?producer . > ?film wdt:P1004 ?editor . > ?film wdt:P57 ?writer . > ?cinematographer wdt:P31 wd:Q966892 ; > ?producer wdt:P31 wd:Q40695 ; > ?editor wdt:P31 wd:Q7682 ; > ?writer wdt:P31 wd:Q114222072 ; > FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer) ?trilogy wdt:P577 ?date ; > ?trilogy wdt:P6379 ?cinematographer . > ?trilogy wdt:P802 ?producer . > ?trilogy wdt:P1004 ?editor . > ?trilogy wdt:P57 ?writer . > FILTER(?cinematographer = ?producer && ?producer = ?editor && ?editor = ?writer) ?film wdt:P161 ?trilogy. > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 wdt:P31 wd:Q114248769 ;\", \"# Vagabond, The Gleaners and I\",\n      \"?film1 wdt:P50 ?author .\",\n      \"?film1 wdt:P281* ?editor .\",\n      \"?film1 wdt:P577 ?date1 .\",\n      \"?film2 wdt:P31 wd:Q114248769 ;\", \"# Varda by Agnès\",\n      \"?film2 wdt:P50 ?author2 .\",\n      \"?film2 wdt:P281* ?editor2 .\",\n      \"?film2 wdt:P577 ?date2 .\",\n      \"?author wdt:P31 wd:Q5 ;\", \"# Author is a person\",\n      \"?author2 wdt:P31 wd:Q5 ;\", \"# Second author is also a person\",\n      \"FILTER(?author != ?author2) .\",\n      \"?author wdt:P740 ?jacquesDemy .\", \"# Author married Jacques Demy\",\n      \"?author2 wdt:P740 ?jacquesDemy .\", \"# Second author also married Jacques Demy\",\n      \"?film1 wdt:P577 ?date1 ;\",\n      \"?film2 wdt:P577 ?date2 ;\",\n      \"?jacquesDemy wdt:P31 wd:Q5 .\" ,\"\\n# Jacques Demy is a person\"\n    ,\n      \"VALUES ?resource { ?author ?author2 }\" ,\"\\n# Return the authors as resources\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q114248769 ; ?film1 wdt:P50 ?author . ?film1 wdt:P281* ?editor . ?film1 wdt:P577 ?date1 . ?film2 wdt:P31 wd:Q114248769 ; ?film2 wdt:P50 ?author2 . ?film2 wdt:P281* ?editor2 . ?film2 wdt:P577 ?date2 . ?author wdt:P31 wd:Q5 ; ?author2 wdt:P31 wd:Q5 ; FILTER(?author != ?author2) . ?author wdt:P740 ?jacquesDemy . ?author2 wdt:P740 ?jacquesDemy . ?film1 wdt:P577 ?date1 ; ?film2 wdt:P577 ?date2 ; ?jacquesDemy wdt:P31 wd:Q5 . VALUES ?resource { ?author ?author2 } } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424680.\" , \"# Film\",\n      \"?film wdt:P921 ?distributorProducer.\" , \"# Distributor and Producer\",\n      \"?film wdt:P276* wd:Q57754754.\" , \"# State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\",\n      \"?film wdt:P276* wd:Q11266.\" , \"# State Farm Insurance\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\",\n      \"?film wdt:P276* wd:Q11266.\" , \"# The Vanguard Group\",\n      \"FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)).\" , \"# Specific distributors and producers\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?film wdt:P31 wd:Q11424680. ?film wdt:P921 ?distributorProducer. ?film wdt:P276* wd:Q57754754. FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)). ?film wdt:P276* wd:Q11266. FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)). ?film wdt:P276* wd:Q11266. FILTER(?distributorProducer IN (wd:Q1038929, wd:Q11170, wd:Q6846, wd:Q11529)). } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q114248700 ;\", \"># Q114248700 is a placeholder for the class of films, you may need to use the exact property ID or label.\",\n      \"?film wdt:P577 ?releaseDate .\",\n      \"?film wdt:P161 ?director .\",\n      \"?film wdt:P639 ?producer .\",\n      \"?film wdt:P50 ?writer .\",\n      \"?film wdt:P161 \\\"Randolph Scott\\\"@en ;\",\n      \"?film wdt:P639 \\\"Miriam Hopkins\\\"@en ;\",\n      \"?film wdt:P577 \\\"Humphrey Bogart\\\"@en ;\",\n      \"?film wdt:P2860 \\\"Robert Buckner\\\"@en ;\",\n      \"?film wdt:P161 ?actor .\",\n      \"?film wdt:P161 \\\"Errol Flynn\\\"@en ;\",\n      \"?film wdt:P161 \\\"Paul Fix\\\"@en .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q114248700 ; > ?film wdt:P577 ?releaseDate . ?film wdt:P161 ?director . ?film wdt:P639 ?producer . ?film wdt:P50 ?writer . ?film wdt:P161 \"Randolph Scott\"@en ; ?film wdt:P639 \"Miriam Hopkins\"@en ; ?film wdt:P577 \"Humphrey Bogart\"@en ; ?film wdt:P2860 \"Robert Buckner\"@en ; ?film wdt:P161 ?actor . ?film wdt:P161 \"Errol Flynn\"@en ; ?film wdt:P161 \"Paul Fix\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q2790631 wdt:P4656 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2790631 wdt:P4656 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2168798 ; wdt:P1477 ?name . FILTER (STR(?name) = \\\"Bob Dylan\\\") }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q2168798 ; wdt:P1477 ?name . FILTER (STR(?name) = \"Bob Dylan\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE { wd:Q392 wdt:P106 wd:Q36834 . }\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q392 wdt:P106 wd:Q36834 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?s kg:9940 kg:5667 .\",\n\t\t    \t\t\"?s kg:9940 kg:1945 .\"\n\t\t    \t  ]\n}", "normal_query": "?s wdt:P106 wd:Q36834 . ?s wdt:P106 wd:Q392 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?entity wdt:P1433 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?entity wdt:P1433 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { ?entity wdt:P112 ?resource . ?resource wdt:P31 wd:Q5 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?entity wdt:P112 ?resource . ?resource wdt:P31 wd:Q5 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{\n \t\t\"query\" : [\n \t\t\"?human ?property ?foundResource.\"\n \t]\n}", "normal_query": "?human ?property ?foundResource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q2106974 wdt:P50 wd:Q3802 ; wdt:P1436 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2106974 wdt:P50 wd:Q3802 ; wdt:P1436 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE { \",\n    \"  wd:Q16597348 wdt:P1735 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q16597348 wdt:P1735 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1675940 p:P1362 ?statement . ?statement ps:P1362 wd:Q83620 . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1675940 p:P1362 ?statement . ?statement ps:P1362 wd:Q83620 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE { wd:Q21946 wdt:P22 ?parent . }\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q21946 wdt:P22 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47529 || ?resource wdt:P31 wd:Q571 ; wdt:P50 wd:Q42680 . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q47529 || ?resource wdt:P31 wd:Q571 ; wdt:P50 wd:Q42680 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE { wd:Q42 wdt:P58 ?work . }\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { wd:Q42 wdt:P58 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{\n \t    \t\t\"query\": [\n\t\t    \t\t\"?resource <http://example.org/wasWrittenBy> kg:7016 .\"\n\t\t    \t  ]\n}", "normal_query": "?resource <http://example.org//wasWrittenBy> wd:Q42 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wds: <http://www.wikidata.org/entity/statement/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wikibase: <http://wikiba.se/ontology#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q7856 wdt:P108 ?resource.\\n}\\n\"]\n}", "normal_query": "@prefix wd: wd: . @prefix wds: wds: . @prefix wdt: wdt: . @prefix wikibase: <http://wikiba.se//ontology> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\nwd:Q6847529 wdt:P50 ?resource.\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q6847529 wdt:P50 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?executiveProducer WHERE { wd:Q24986753 wdt:P108 ?executiveProducer . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?executiveProducer WHERE { wd:Q24986753 wdt:P108 ?executiveProducer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1234567 rdfs:label ?label FILTER (LANG(?label) = 'en') . ?work wdt:P50 ?composer . ?work wdt:P921 wd:Q1234567 . ?composer rdfs:label ?composerLabel FILTER (LANG(?composerLabel) = 'en') . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1234567 rdfs:label ?label FILTER (LANG(?label) = 'en') . ?work wdt:P50 ?composer . ?work wdt:P921 wd:Q1234567 . ?composer rdfs:label ?composerLabel FILTER (LANG(?composerLabel) = 'en') . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q1596870 wdt:P345 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1596870 wdt:P345 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?employee WHERE { wd:Q169475 wdt:P3208 ?employee . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?employee WHERE { wd:Q169475 wdt:P3208 ?employee . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { wd:Q2081647 wdt:P31 wd:Q593994 . wd:Q2081647 wdt:P178 ?composer }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q2081647 wdt:P31 wd:Q593994 . wd:Q2081647 wdt:P178 ?composer } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE {\"\n     \t\t,\"?work wdt:P31 wd:Q2498706 ;\"\n     \t, \"wdt:P177 ?composer .\"\n     \t, \"?composer wdt:P31 wd:Q2528636 .\"\n     \t, \"?work rdfs:label ?titleLabel .\"\n     \t, \"FILTER(LANG(?titleLabel) = 'es' && STR(?titleLabel) = 'Al Compás de tu Mentira')\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?work wdt:P31 wd:Q2498706 ; wdt:P177 ?composer . ?composer wdt:P31 wd:Q2528636 . ?work rdfs:label ?titleLabel . FILTER(LANG(?titleLabel) = 'es' && STR(?titleLabel) = 'Al Compás de tu Mentira') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource\\nWHERE {\\n  ?work wdt:P31 wd:Q2498926 ; # Instance of work\\n         wdt:P50 ?composerResource . # Creator (composer)\\n  ?composerResource wdt:P106 wd:Q725348 . # Occupation is cinematographer\\n}\\nLIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composerResource WHERE { ?work wdt:P31 wd:Q2498926 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1965083 wdt:P179 ?sequel .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1965083 wdt:P179 ?sequel . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?sequel WHERE { ?sequel wdt:P179 wd:Q208546 ; wdt:P136 wd:Q211915 . ?sequel wdt:P161 wd:Q180166 }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P179 wd:Q208546 ; wdt:P136 wd:Q211915 . ?sequel wdt:P161 wd:Q180166 } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\"\n \t\t  \t\t,\"?founder p:P31/ps:P31 wd:Q5 .\" ,\"\\n\"\n \t\t  \t\t,\"?founder wdt:P102 wd:Q648799 .\" ,\"\\n\"\n \t\t  \t\t,\"?parentChildRelationship wdt:P40 ?founder .\" ,\"\\n\"\n \t\t  \t\t,\"?parentChildRelationship wdt:P25 wd:Q23983159 .\"\n \t\t  \t\t,\"\\n\" ,\"\\t}\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { ?founder p:P31/ps:P31 wd:Q5 . ?founder wdt:P102 wd:Q648799 . ?parentChildRelationship wdt:P40 ?founder . ?parentChildRelationship wdt:P25 wd:Q23983159 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q502579 wdt:P31/wdt:P279* wd:Q5 . # Instance of human or subclass of human (Hitler's sibling)\\n  ?resource wdt:P31 wd:Q486586 . # Instance of Uniqa Insurance Group\\n  ?resource wdt:P102 wd:Q502579 . # Inception organization is Hitler's sibling\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q502579 wdt:P31/wdt:P279* wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?distributor WHERE {\\n  ?game wdt:P31 wd:Q28497 ;\\n        wdt:P360 wd:Q50150575 .\\n  ?game wdt:P123 ?distributor.\\n  ?employer wdt:P108 wd:Q110467 ;\\n            wdt:P108 ?distributor.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?distributor WHERE { ?game wdt:P31 wd:Q28497 ; wdt:P360 wd:Q50150575 . ?game wdt:P123 ?distributor. ?employer wdt:P108 wd:Q110467 ; wdt:P108 ?distributor. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE { wd:Q27916435 wdt:P108 ?employer . }\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q27916435 wdt:P108 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?costumeDesigner wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?costumeDesigner wdt:P26 ?spouse .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?spouse wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?spouse wdt:P39 wd:Q47084 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q47084 wdt:P361 wd:Q24116967 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?costumeDesigner wdt:P25 ?sibling . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P31 wd:Q5 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P39 wd:Q24116967 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?spouse = ?sibling)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P31 wd:Q5 . ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P31 wd:Q5 . ?spouse wdt:P39 wd:Q47084 . wd:Q47084 wdt:P361 wd:Q24116967 . OPTIONAL { ?costumeDesigner wdt:P25 ?sibling . } ?sibling wdt:P31 wd:Q5 . ?sibling wdt:P39 wd:Q24116967 . FILTER(?spouse = ?sibling) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { ?entity p:P31/ps:P31 wd:Q5 .\"\n \t\t      \t\t,\"?entity wdt:P26 ?spouse .\"\n \t\t      \t\t,\"?spouse p:P31/ps:P31 wd:Q5 .\"\n \t\t      \t\t,\"?spouse wdt:P856 ?website .\"\n \t\t      \t\t,\"FILTER(CONTAINS(LCASE(?website), \\\"clubjenna\\\")) .\"\n \t\t      \t\t,\"?entity wdt:P106 wd:Q73976 .\"\n \t\t      \t \t,\"}\"]\n} ", "normal_query": "SELECT ?resource WHERE { ?entity p:P31/ps:P31 wd:Q5 . ?entity wdt:P26 ?spouse . ?spouse p:P31/ps:P31 wd:Q5 . ?spouse wdt:P856 ?website . FILTER(CONTAINS(LCASE(?website), \"clubjenna\")) . ?entity wdt:P106 wd:Q73976 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q54 ; wdt:P57 wd:Q98052 . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q54 ; wdt:P57 wd:Q98052 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$prefixes\\nSELECT ?resource WHERE {\\nwd:Q123456789 wd:P50/wd:Q123456789 ; wikibase:wikiPageWikiLink ?resource .\\n}\", \"@vars\", \"nil\"]\n} ", "normal_query": "$prefixes SELECT ?resource WHERE { wd:Q123456789 wd:P50/wd:Q123456789 ; wikibase:wikiPageWikiLink ?resource . } @vars nil LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?parent WHERE { wd:Q26915473 wdt:P102 ?organisation . ?organisation wdt:P488 ?parent . ?parent wdk:Q590 . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q26915473 wdt:P102 ?organisation . ?organisation wdt:P488 ?parent . ?parent wdk:Q590 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \t\t\t\t\t\t\t\t\t  \t\"query\": [\"$label$(wd:Q123456789) WAS $label$(wd:Q987654321) SPOUSE OF ?person . ?person P31* wd:Q5 . ?person P27 wd:Q167 . ?person P106 wd:Q725283 . ?person P26 ?spouse . ?spouse wdt:P106 wd:Q725283 . ?spouse wdt:P27 wd:Q167 . ?spouse wdt:P26 wd:Q123456789 . SERVICE wikibase:label { bd:serviceParam wikibase:language \" ] }\n \t\t\t\t\t\t\t\t\t  \t\t", "normal_query": "$label$(wd:Q123456789) WAS $label$(wd:Q987654321) SPOUSE OF ?person . ?person P31* wd:Q5 . ?person P27 wd:Q167 . ?person P106 wd:Q725283 . ?person P26 ?spouse . ?spouse wdt:P106 wd:Q725283 . ?spouse wdt:P27 wd:Q167 . ?spouse wdt:P26 wd:Q123456789 . SERVICE wikibase:label { bd:serviceParam wikibase:language LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE { wd:Q28604 wdt:P108 ?employer . }\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q28604 wdt:P108 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t\t\"{ ?employer wdt:P108 wd:Q2526255; wdt:P112 wd:Q16. }\"\n     \t\t\t]\n}", "normal_query": "{ ?employer wdt:P108 wd:Q2526255; wdt:P112 wd:Q16. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{\",\n      \t\t\t\t\"?x kg:7565 ?y .\",\n        \t\t\t\t\"?y kg:5147 kg:5381 .\",\n        \t\t\t\t\"?z kg:8057 ?x .\",\n        \t\t\t\t\"?z kg:3288 ?w .\"\n      \t\t\t,\"}\",\n      \t\t\t\"?x\"\n      \t\t]\n}", "normal_query": "{ ?x wdt:P108 ?y . ?y wdt:P106 wd:Q2526255 . ?z wdt:P112 ?x . ?z wd:Q16 ?w . } ?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q470980 . # instance of musical work\\n?resource wdt:P50 wd:Q68426 . # written by Madonna\\n?resource wdt:P140 wd:Q68426 . # produced by Madonna\\n}\"\n]}\n      \t", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q470980 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q1744 wdt:P58 ?resource . wd:Q1744 wdt:P162 ?resource }\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1744 wdt:P58 ?resource . wd:Q1744 wdt:P162 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource <http://example.com/was_written_by> kg:5664 .\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource <http://example.com/produced_by> kg:5664 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\" ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource <http://example.com//was_written_by> wd:Q1744 . ?resource <http://example.com//produced_by> wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?employerResource WHERE {\\n  ?costumeDesigner wdt:P106 wd:Q73928 ;\\n                    wdt:P108 ?employerResource .\\n  ?employerResource wdt:P31 wd:Q146 ;\\n                     wdt:P169 wd:Q5354667 .\\n}\\nLIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?employerResource WHERE { ?costumeDesigner wdt:P106 wd:Q73928 ; wdt:P108 ?employerResource . ?employerResource wdt:P31 wd:Q146 ; wdt:P169 wd:Q5354667 . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t      \t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?costumeDesigner wdt:P31 wd:Q738489 ; wdt:P361 ?filmWork . ?sibling (wdt:P451|wdt:P40|wdt:P2600) ?costumeDesigner . ?sibling wdt:P26 ?spouse . ?spouse wdt:P22 wd:Q758963 }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?costumeDesigner wdt:P31 wd:Q738489 ; wdt:P361 ?filmWork . ?sibling (wdt:P451|wdt:P40|wdt:P2600) ?costumeDesigner . ?sibling wdt:P26 ?spouse . ?spouse wdt:P22 wd:Q758963 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?parentCompany WHERE {\"\n     \t\t,\"?abt wdt:P31 wd:Q5 .\"\n     \t, \"?abt rdfs:label ?name .\"\n     \t, \"FILTER(LANG(?name) = 'en') .\"\n     \t, \"FILTER(str(?name) = 'Christian Abt') .\"\n     \t, \"?employment wdt:P102 ?parentCompany .\"\n     \t, \"?employment wdt:P3487 ?abt .\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?parentCompany WHERE { ?abt wdt:P31 wd:Q5 . ?abt rdfs:label ?name . FILTER(LANG(?name) = 'en') . FILTER(str(?name) = 'Christian Abt') . ?employment wdt:P102 ?parentCompany . ?employment wdt:P3487 ?abt . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q103576982 wdt:P108 ?employer .\", \"># Assuming Claire Doutriaux's Wikidata ID is Q103576982, replace if incorrect or unknown\\n\",\n    \"  ?employer wdt:P414 wd:Q11426 .\", \"># P414 is 'instance of', and Q11426 is 'film distributor'\\n\",\n    \"}\"\n  ]\n}\n \t\t\t\t\t\t      \t   \t\t\t", "normal_query": "SELECT ?employer WHERE { wd:Q103576982 wdt:P108 ?employer . > ?employer wdt:P414 wd:Q11426 . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q2584976 wdt:P3081 ?resource.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q2584976 wdt:P3081 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdk:P1406 wd:Q28977 ; wdt:P26 wd:Q188069 . }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdk:P1406 wd:Q28977 ; wdt:P26 wd:Q188069 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?spouse ?sibling WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?entity wdt:P106 wd:Q834289 ;\", \"># This line is a placeholder for specifying the profession or role, might need adjustment based on available data\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wd:Q175399 wdt:P26 ?spouse .\", \"># Antiochus IV Epiphanes as subject with P26 (spouse) predicate\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wd:Q175399 wdt:P40 ?sibling .\", \"># Antiochus IV Epiphanes as subject with P40 (child) predicate, sibling inference needed\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\", \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "SELECT ?spouse ?sibling WHERE { ?entity wdt:P106 wd:Q834289 ; > wd:Q175399 wdt:P26 ?spouse . > wd:Q175399 wdt:P40 ?sibling . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  ?work wdt:P31 wd:Q178295; wdtn:P31/wdt:P279* wd:Q1144156;\",\n    \"        wdt:P177 ?producer; wdt:P178 ?distributor.\",\n    \"  ?country wdt:P31 wd:Q30; wdt:P17 ?work.\",\n    \"  SERVICE wikibase:mwapi {\",\n    \"    bd:serviceParam wikibase:endpoint \\\"www.wikidata.org\\\";\",\n    \"    bd:serviceParam wikibase:api \\\"EntitySearch\\\";\",\n    \"    bd:serviceParam mwapi:srsearch 'The Magic Flute instanceof:Q178295';\",\n    \"    ?work rdfs:label ?title.\",\n    \"  }\",\n    \"  FILTER(LANG(?title) = \\\"en\\\").\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { ?work wdt:P31 wd:Q178295; wdtn:P31/wdt:P279* wd:Q1144156; wdt:P177 ?producer; wdt:P178 ?distributor. ?country wdt:P31 wd:Q30; wdt:P17 ?work. SERVICE wikibase:mwapi { bd:serviceParam wikibase:endpoint \"www.wikidata.org\"; bd:serviceParam wikibase:api \"EntitySearch\"; bd:serviceParam mwapi:srsearch 'The Magic Flute instanceof:Q178295'; ?work rdfs:label ?title. } FILTER(LANG(?title) = \"en\"). } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P31 wd:Q5 .\", \"># person instance of human\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P102 wd:Q748699 .\", \"># organization is World Wide Fund for Nature\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P106 wd:Q82956 .\", \"># occupation is founder\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P3373 wd:Q166580 .\", \"># sibling of Prince Aschwin of Lippe-Biesterfeld\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . > ?resource wdt:P102 wd:Q748699 . > ?resource wdt:P106 wd:Q82956 . > ?resource wdt:P3373 wd:Q166580 . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P31 wd:Q5 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P106 wd:Q28389 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P1439 wd:Q73797 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P3373 ?person .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P1406 wd:Q24994 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource wdt:P31/wdt:P279* wd:Q186526 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?person = wd:Q24994)\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P106 wd:Q28389 . ?person wdt:P1439 wd:Q73797 . ?sibling wdt:P3373 ?person . ?sibling wdt:P1406 wd:Q24994 . ?resource wdt:P31/wdt:P279* wd:Q186526 . FILTER (?person = wd:Q24994) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label ?title. FILTER (LANG(?title) = 'en'). FILTER (?title = \\\"Drums of Love\\\"@en). ?film wdt:P987 ?producer. ?producer wdt:P172 wd:Q65066. }\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424. ?film rdfs:label ?title. FILTER (LANG(?title) = 'en'). FILTER (?title = \"Drums of Love\"@en). ?film wdt:P987 ?producer. ?producer wdt:P172 wd:Q65066. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work wdt:P50 wd:Q218436 ;\", \">// Written by (P50) to Vince Gilligan (Q218436)\"\n   \t,\"  ?work wdt:P997 wd:Q81166 .\", \">// Produced by (P997) to Bob Weinstein (Q81166)\"\n   \t,\"  ?resource schema:sameAs ?work .\",\n    \"}\"\n  ]\n  }\n  \t\t\t\t\t  \t \t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P50 wd:Q218436 ; >// Written by (P50) to Vince Gilligan (Q218436) ?work wdt:P997 wd:Q81166 . >// Produced by (P997) to Bob Weinstein (Q81166) ?resource schema:sameAs ?work . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?company wdt:P108 ?founder .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?founder wdt:P3373 wd:Q49652 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?richelieu wdt:P3373 wd:Q49652 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?richelieu wdt:P321 ?sibling .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?founder wdt:P361 ?sibling .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource ?p ?company .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?p != wikibase:Lexeme)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P108 ?founder . ?founder wdt:P3373 wd:Q49652 . ?richelieu wdt:P3373 wd:Q49652 . ?richelieu wdt:P321 ?sibling . ?founder wdt:P361 ?sibling . ?resource ?p ?company . FILTER (?p != wikibase:Lexeme) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\nwd:Q528169 wdt:P307 ?resource.\\n}\\nUNION\\n{\\nwd:Q528169 wdt:P498 ?resource.\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q528169 wdt:P307 ?resource. } UNION { wd:Q528169 wdt:P498 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P3967 wd:Q21188504 . ?resource wdt:P57 wd:Q21188504 . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P3967 wd:Q21188504 . ?resource wdt:P57 wd:Q21188504 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q475628; wdt:P17 wd:Q33; wdk:P106/wdt:P279* wd:Q11666. }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q475628; wdt:P17 wd:Q33; wdk:P106/wdt:P279* wd:Q11666. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"{ wd:Q106795 p:P32 P32/wdt:P1480 wd:Q106796 . } UNION\",\n \t\t  \t\t\"{ wd:Q106795 p:P26 P26/wdt:P1480 wd:Q106796 . } UNION\",\n \t\t  \t\t\"{ wd:Q106795 p:P35 P35/wdt:P1480 wd:Q106796 . }\",\n \t\t  \t\t\"?statement ps:P1480 ?resource. \",\n \t  \t\t\"}\"\n \t\t  ]\n}\n  \t\t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { { wd:Q106795 p:P32 P32/wdt:P1480 wd:Q106796 . } UNION { wd:Q106795 p:P26 P26/wdt:P1480 wd:Q106796 . } UNION { wd:Q106795 p:P35 P35/wdt:P1480 wd:Q106796 . } ?statement ps:P1480 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q190 . ?resource wdg:P106 wd:Q184999 . ?resource wdt:P26 wd:Q250299 . }\"\n \t\t \t  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P27 wd:Q190 . ?resource wdg:P106 wd:Q184999 . ?resource wdt:P26 wd:Q250299 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?sequel WHERE {\"\n     \t\t,\"?sequel wdt:P31 wd:Q59092; \"\n     \t,\"wdt:P179 wd:Q648896;\"\n     \t,\"wdt:P469 wd:Q25969.}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q59092; wdt:P179 wd:Q648896; wdt:P469 wd:Q25969.} LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?child ?parent\\nWHERE {\\n  ?acquisition p:P17 P17/wdt:P2063/wdt:P17 wd:Q49856 ;\\n              p:P17/pqv:P585+ ?date ;\\n              p:P17/psv:P17 ?child ;\\n              p:P17/pq:P17 wd:Q20316 .\\n  ?acquisition wdt:P17 ?parent .\\n  FILTER(?parent = wd:Q49856)\\n}\\nLIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?child ?parent WHERE { ?acquisition p:P17 P17/wdt:P2063/wdt:P17 wd:Q49856 ; p:P17/pqv:P585+ ?date ; p:P17/psv:P17 ?child ; p:P17/pq:P17 wd:Q20316 . ?acquisition wdt:P17 ?parent . FILTER(?parent = wd:Q49856) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q1698754 wdt:P31 wd:Q33025 ?resource.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1698754 wdt:P31 wd:Q33025 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?actor WHERE { \",\n    \"  ?actor wdt:P31 wd:Q5 ;\", \"# Assuming Q5 is Human, adjust if necessary\",\n    \"         wdt:P488 ?influencee .\", \"# P488 is influenced by\",\n    \"  ?influencee rdfs:label \\\"Pearl Jam\\\"@en.\",\n    \"  ?sibling wdt:P361|wdt:P452 ?artist.\", \"# P361 or P452 for sibling relation, adjust if necessary\",\n    \"  ?artist rdfs:label \\\"Astrid Young\\\"@en.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 ; wdt:P488 ?influencee . ?influencee rdfs:label \"Pearl Jam\"@en. ?sibling wdt:P361|wdt:P452 ?artist. ?artist rdfs:label \"Astrid Young\"@en. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q164537 .\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q119666 .\",\n      \"?resource wdt:P50/wd:Q76249839 wd:Q119667 .\",\n      \"?resource wdt:P31 wd:Q571 .\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50/wd:Q76249839 wd:Q164537 . ?resource wdt:P50/wd:Q76249839 wd:Q119666 . ?resource wdt:P50/wd:Q76249839 wd:Q119667 . ?resource wdt:P31 wd:Q571 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?costumeDesigner WHERE { \"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P31 wd:Q5 . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person rdfs:label \\\"Miguel Albaladejo\\\"@es. \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?person wdt:P32 wd:Q908276 . \" ,\"\\n\" ,\"\\t\" ,\"\\t\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P451 ?person . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P100 wd:Q100301 . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P729 ?costumeDesigner . \" ,\"\\n\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?sibling wdt:P50 wd:Q100301 . \" ,\"\\n\" ,\"\\t\" ,\"\\t\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"} \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "normal_query": "SELECT ?costumeDesigner WHERE { ?person wdt:P31 wd:Q5 . ?person rdfs:label \"Miguel Albaladejo\"@es. ?person wdt:P32 wd:Q908276 . ?sibling wdt:P451 ?person . ?sibling wdt:P100 wd:Q100301 . ?film wdt:P729 ?costumeDesigner . ?sibling wdt:P50 wd:Q100301 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE {\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P31 wd:Q5 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P21 wd:Q6581072 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P26 wd:Q94177 .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"wd:Q94177 wdt:P361 ?composer .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P1476 ?name .\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(LANG(?name) = 'sv')\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P26 wd:Q94177 . wd:Q94177 wdt:P361 ?composer . ?composer wdt:P1476 ?name . FILTER(LANG(?name) = 'sv') } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q123456789 p:P162 wd:Q987654323 . \"\n     \t, \"?statement ps:P162 wd:Q123456789 . \"\n     \t, \"?statement pq:P50 wd:Q1 (wd:Q2|wd:Q3) wd:Q4 . \"\n     \t, \"VALUES (wd:Q1 wd:Q2 wd:Q3 wd:Q4) {\"\n     \t\t,\"(wd:Q987654321 wd:Q987654322 wd:Q987654323 wd:Q987654324)\"\n     \t, \"}\"\n     \t, \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q123456789 p:P162 wd:Q987654323 . ?statement ps:P162 wd:Q123456789 . ?statement pq:P50 wd:Q1 (wd:Q2|wd:Q3) wd:Q4 . VALUES (wd:Q1 wd:Q2 wd:Q3 wd:Q4) { (wd:Q987654321 wd:Q987654322 wd:Q987654323 wd:Q987654324) } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?siblingSpouse WHERE {\"\n     \t\t,\"wd:Q100869 wdt:P26 ?siblingSpouse .\" ]\n     \t\t} ", "normal_query": "SELECT ?siblingSpouse WHERE { wd:Q100869 wdt:P26 ?siblingSpouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?author ?editor) {\",\n    \" ( wd:Q12345 wd:Q67890 ) # Replace with actual Wikidata IDs for Jens Jørgen Thorsen\",\n    \" ( wd:Q23456 wd:Q78901 ) # Replace with actual Wikidata IDs for Jørgen Leth\",\n    \" ( wd:Q34567 wd:Q89012 ) # Replace with actual Wikidata IDs for Ole John\",\n    \"}\",\n    \"?resource wdt:P50 ?author .\", \"># Written by\"\n   \t\t\t,\"?resource wdt:P31/wdt:P279* wd:Q44916 .\", \"# Instance of a written work\"\n\t\t\t\t,\"?resource wdt:P123 ?editor .\",\"># Edited by\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES (?author ?editor) { ( wd:Q12345 wd:Q67890 ) ( wd:Q23456 wd:Q78901 ) ( wd:Q34567 wd:Q89012 ) } ?resource wdt:P50 ?author . > ?resource wdt:P31/wdt:P279* wd:Q44916 . ?resource wdt:P123 ?editor . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q19064587 wdt:P50 ?author .\"\n     \t, \"?author rdfs:label ?authorLabel FILTER (LANG(?authorLabel) = 'da') .\"\n     \t, \"wd:Q19064587 wdt:P31 wd:Q577 .\"\n     \t, \"wd:Q19064587 wdt:P123 ?editor .\"\n     \t, \"?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'da') .\"\n     \t, \"FILTER (?author = wd:Q108466 || ?author = wd:Q190597 || ?author = wd:Q23919)\"\n     \t, \"FILTER (?editor = wd:Q108466 || ?editor = wd:Q190597 || ?editor = wd:Q23919)\"\n     \t, \"VALUES ?resource { ?author ?editor }\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q19064587 wdt:P50 ?author . ?author rdfs:label ?authorLabel FILTER (LANG(?authorLabel) = 'da') . wd:Q19064587 wdt:P31 wd:Q577 . wd:Q19064587 wdt:P123 ?editor . ?editor rdfs:label ?editorLabel FILTER (LANG(?editorLabel) = 'da') . FILTER (?author = wd:Q108466 || ?author = wd:Q190597 || ?author = wd:Q23919) FILTER (?editor = wd:Q108466 || ?editor = wd:Q190597 || ?editor = wd:Q23919) VALUES ?resource { ?author ?editor } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"wd:Q1694785 wdt:P31 wd:Q54.\" ]\n     \t}\n     \t\t\t\t\t      \t\t\t\t", "normal_query": "SELECT ?resource WHERE { wd:Q1694785 wdt:P31 wd:Q54. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ( ?producer1 ?producer2 ?producer3 ) { ( wd:Q76954 wd:Q80215 wd:Q21198 ) }\",\n    \"?work wdt:P178 ?producer1 .\", \"# involved in the production of\"\n   \t, \"?work wdt:P178 ?producer2 .\",\n   \t\"?work wdt:P178 ?producer3 .\",\n    \"OPTIONAL { ?work wdt:P279 wd:Q1460895 }\", \"# executive producer is a subclass of producer\"\n   \t, \"?work wdt:P178 ?executiveProducer .\",\n   \t\"?executiveProducer wdt:P31 wd:Q5 .\", \"# the executive producer is a person\"\n   \t, \"?executiveProducer rdfs:label ?epLabel .\",\n    \"FILTER (LANG(?epLabel) = 'en')\",\n    \"?resource wdt:P31 wd:Q571 .\", \"# instance of work\"\n   \t, \"?work wdt:P921 ?genre .\",\n   \t\"?genre rdfs:label ?genreLabel .\",\n    \"FILTER (LANG(?genreLabel) = 'en' && regex(str(?genreLabel),\\\"sitcom\\\", \\\"i\\\") )\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ( ?producer1 ?producer2 ?producer3 ) { ( wd:Q76954 wd:Q80215 wd:Q21198 ) } ?work wdt:P178 ?producer1 . ?work wdt:P178 ?producer2 . ?work wdt:P178 ?producer3 . OPTIONAL { ?work wdt:P279 wd:Q1460895 } ?work wdt:P178 ?executiveProducer . ?executiveProducer wdt:P31 wd:Q5 . ?executiveProducer rdfs:label ?epLabel . FILTER (LANG(?epLabel) = 'en') ?resource wdt:P31 wd:Q571 . ?work wdt:P921 ?genre . ?genre rdfs:label ?genreLabel . FILTER (LANG(?genreLabel) = 'en' && regex(str(?genreLabel),\"sitcom\", \"i\") ) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?siblingSpouseResource\\nWHERE {\\n  wd:Q106987 wdt:P31 wd:Q5 . # Ptolemy X Alexander I is a human\\n  wd:Q106987 wdt:P32 wd:Q106984 . # Ptolemy X Alexander I has sibling Ptolemy IX Lathyros\\n wd:Q106984 wdt:P451 ?siblingSpouseResource . # Ptolemy IX Lathyros is spouse of ?siblingSpouseResource\\n?siblingship wdt:P32 wd:Q106987 . # ?siblingSpouseResource has sibling Ptolemy X Alexander I\\n?siblingSpouseResource wdt:P25 wd:Q106984 . # ?siblingSpouseResource is spouse of Ptolemy IX Lathyros\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?siblingSpouseResource WHERE { wd:Q106987 wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE { wd:Q21195678 wdt:P31 wd:Q54 ; p:P57/pq:P108 ?creator . ?creator ps:P57 wd:Q2316788 . OPTIONAL { wd:Q21195678 wdt:P57 wd:Q2316788 } . FILTER(?resource = wd:Q2316788 || ?resource != wd:Q2316788) }\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q21195678 wdt:P31 wd:Q54 ; p:P57/pq:P108 ?creator . ?creator ps:P57 wd:Q2316788 . OPTIONAL { wd:Q21195678 wdt:P57 wd:Q2316788 } . FILTER(?resource = wd:Q2316788 || ?resource != wd:Q2316788) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P31 wd:Q1142470 .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film rdfs:label ?title .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(LANG(?title) = 'en') .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Tom at the Farm'))) } UNION\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Heartbeats'))) } UNION\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Laurence Anyways'))) }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P162 ?designer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P345 ?imdbId }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P106 wd:Q78979 . }\" ,\"\\t# Check if the designer is a film editor\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"OPTIONAL { ?designer wdt:P106 wd:Q75098 . }\" ,\"\\t# Check if the designer is an actor or star\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?resource <http://schema.org/name> ?name .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?resource = ?designer)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q1142470 . ?film rdfs:label ?title . FILTER(LANG(?title) = 'en') . { ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Tom at the Farm'))) } UNION { ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Heartbeats'))) } UNION { ?film rdfs:label ?title FILTER(CONTAINS(lcase(str(?title)), lcase('Laurence Anyways'))) } ?film wdt:P162 ?designer . OPTIONAL { ?designer wdt:P345 ?imdbId } OPTIONAL { ?designer wdt:P106 wd:Q78979 . } OPTIONAL { ?designer wdt:P106 wd:Q75098 . } ?resource schema:name ?name . FILTER(?resource = ?designer) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\", \"># Assuming the person is of type human (Q5)\"\n   \t,\"?resource wdt:P108 wd:Q952426 .\", \"># Organization related to film/TV production\"\n   \t,\"?work1 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work1 rdfs:label ?title1 .\",\n   \t\"FILTER(LANG(?title1) = 'en' && STR(?title1) = 'In the Park')\",\n   \t\"?work2 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work2 rdfs:label ?title2 .\",\n   \t\"FILTER(LANG(?title2) = 'en' && STR(?title2) = 'Shanghaied')\",\n   \t\"?work3 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work3 rdfs:label ?title3 .\",\n   \t\"FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Modern Times')\",\n   \t\"?work4 wdt:P57 ?resource .\", \"# The resource was a director or editor of the work\"\n   \t,\"?work4 rdfs:label ?title4 .\",\n   \t\"FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Professor')\",\n   \t\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . > ?resource wdt:P108 wd:Q952426 . > ?work1 wdt:P57 ?resource . ?work1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en' && STR(?title1) = 'In the Park') ?work2 wdt:P57 ?resource . ?work2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en' && STR(?title2) = 'Shanghaied') ?work3 wdt:P57 ?resource . ?work3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Modern Times') ?work4 wdt:P57 ?resource . ?work4 rdfs:label ?title4 . FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Professor') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\nwd:Q26954783 wdt:P100 ?work.\\nwdb:Q26954783 wdt:P100 ?work.\\nwd:Q26954784 wdt:P100 ?work.\\nwd:Q26954785 wdt:P100 ?work.\\nwd:Q26954786 wdt:P100 ?work.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?work WHERE { wd:Q26954783 wdt:P100 ?work. wdb:Q26954783 wdt:P100 ?work. wd:Q26954784 wdt:P100 ?work. wd:Q26954785 wdt:P100 ?work. wd:Q26954786 wdt:P100 ?work. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?film WHERE { wd:Q236159 ?p ?s . FILTER(?s = wd:Q236159) }\"\n \t\t \t\t ]\n} ", "normal_query": "SELECT ?film WHERE { wd:Q236159 ?p ?s . FILTER(?s = wd:Q236159) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?producer WHERE { wd:Q108362974 wdt:P57 ?producer . }\"\n \t \t    \t\t]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q108362974 wdt:P57 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?resource wdt:P31 wd:Q475698.\\nFILTER(?resource = wd:{{item}}).\\n{ ?resource wdt:P50 wd:Q253}. # Written by George Lucas\\n{ ?resource wdt:P148 wd:Q253}. # Executive produced by George Lucas\\n{ ?resource wdt:P169 wd:Q253}. # Produced by George Lucas\\n{ ?resource wdt:P70 wd:Q253}.  # Edited by George Lucas\\n}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q475698. FILTER(?resource = wd:{{item}}). { ?resource wdt:P50 wd:Q253}. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \"># person instance of human\"\n \t\t  \t\t,\"?resource wdk:P6870 ?work1 .\", \"># works written by or edited by the person (assuming a specific property for this relation)\"\n \t\t  \t\t,\"?work1 wdt:P361 wd:Q245964 .\", \"># instance of work \" ,\"%work title%\"\n \t\t  \t\t,\"?resource wdk:P6870 ?work2 .\",\n \t\t  \t\t\"?work2 wdt:P361 wd:Q245965 .\",\n \t\t  \t\t\"?resource wdk:P6870 ?work3 .\",\n \t\t  \t\t\"?work3 wdt:P361 wd:Q245966 .\",\n \t\t  \t\t\"?resource wdt:P106 wd:Q188488 .\" ,\"># occupation editor\"\n \t\t  \t\t,\"?resource wdk:P6870 ?journalWork .\", \"># works written by or edited by the person (assuming a specific property for this relation)\"\n \t\t  \t\t,\"?journalWork wdt:P361 wd:Q259456 .\" ,\"%Cahiers du cinéma%\"\n \t  \t\t,\"}\"\n \t\t  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . > ?resource wdk:P6870 ?work1 . > ?work1 wdt:P361 wd:Q245964 . > %work title% ?resource wdk:P6870 ?work2 . ?work2 wdt:P361 wd:Q245965 . ?resource wdk:P6870 ?work3 . ?work3 wdt:P361 wd:Q245966 . ?resource wdt:P106 wd:Q188488 . > ?resource wdk:P6870 ?journalWork . > ?journalWork wdt:P361 wd:Q259456 . %Cahiers du cinéma% } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?producer WHERE { wd:Q168459 ?productionProperty ?producer . FILTER(?producer = wd:Q273029 || ?producer = wd:Q179715 || ?producer = wd:Q179716 || ?producer = wd:Q273030) }\"\n \t\t \t\t\t]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q168459 ?productionProperty ?producer . FILTER(?producer = wd:Q273029 || ?producer = wd:Q179715 || ?producer = wd:Q179716 || ?producer = wd:Q273030) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE { wd:Q76590 ?p ?s . ?s ?q ?resource . FILTER(?q = wikibase:ExecutiveProducer || ?q = wd:Q1482374 || ?q = wd:Q134984 || ?q = wd:Q207536) }\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q76590 ?p ?s . ?s ?q ?resource . FILTER(?q = wikibase:ExecutiveProducer || ?q = wd:Q1482374 || ?q = wd:Q134984 || ?q = wd:Q207536) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?director ?editor ?writer) { (wd:Q1 wd:Q2 wd:Q3) }\",\n    \"?work wdt:P57 ?director ;\",\n    \"      wdt:P108 ?editor ;\",\n    \"      wdt:P86 ?writer .\",\n    \"?resource wdt:P1433 ?work .\", \"><!-- P1433 is an example property, the actual property should be used based on what 'directed', 'edited' and 'written' map to in Wikidata for a work/resource. Adjust accordingly. --!>                                 \"]\n  }\n                    ", "normal_query": "SELECT ?resource WHERE { VALUES (?director ?editor ?writer) { (wd:Q1 wd:Q2 wd:Q3) } ?work wdt:P57 ?director ; wdt:P108 ?editor ; wdt:P86 ?writer . ?resource wdt:P1433 ?work . ><!-- P1433 is an example property, the actual property should be used based on what 'directed', 'edited' and 'written' map to in Wikidata for a work/resource. Adjust accordingly. --!> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES ( ?director ?writer ?editor ) { ( wd:Q1 wd:Q2 wd:Q3 ) }\",\n    \"?work wdt:P57 ?director ;\",\n    \"wdt:P50 ?writer ;\",\n    \"wdt:P7 edit:position ?editor .\",\n    \"?resource wikibase:statements ?work .\",\n    \"}\"\n  ]\n}\n\t\t\t\t     \t\t\t\t\t      ", "normal_query": "SELECT ?resource WHERE { VALUES ( ?director ?writer ?editor ) { ( wd:Q1 wd:Q2 wd:Q3 ) } ?work wdt:P57 ?director ; wdt:P50 ?writer ; wdt:P7 edit:position ?editor . ?resource wikibase:statements ?work . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?resource WHERE {\", \"default-graph\", \"nil\"\n \t\t\t \t\t]} ", "normal_query": "SELECT ?resource WHERE { default-graph nil LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 ?director . # directed by\\n?film wdt:P98 ?cinematographer . # cinematography by\\n?person wdt:P108 ?film . # occupation position\\n?person wdt:P345 ?imdbID .\\nFILTER(?imdbID = \\\"tt0256457\\\"@en) # Six Men Getting Sick\\nFILTER(?imdbID = \\\"tt0495158\\\"@en) # Inland Empire\\nFILTER(?imdbID = \\\"tt0360183\\\"@en) # Darkened Room\\nFILTER(?imdbID = \\\"tt0276545\\\"@en) # Rabbits\\n?resource wdt:P106 wd:Q21198 . # occupation is film director\\n?resource wdt:P106 wd:Q725381 . # occupation is cinematographer\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?work WHERE { ?work wdt:P31 wd:Q1142429 ;\" ]\n \t \t\t\t\t} ", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q1142429 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t,\"wd:Q123456789 wdt:P31 wd:Q957747 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P108 wd:Q123 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q456 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q789 .\"\n \t\t\t\t,\"wd:Q123456789 wdt:P50 wd:Q1011 .\"\n \t\t\t\t,\"?resource wdt:P57 wd:Q123 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q456 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q789 .\"\n \t\t\t\t,\"?resource wdt:P1433 wd:Q1011 .\"\n \t\t  \t\t,\"}\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q123456789 wdt:P31 wd:Q957747 . wd:Q123456789 wdt:P108 wd:Q123 . wd:Q123456789 wdt:P50 wd:Q456 . wd:Q123456789 wdt:P50 wd:Q789 . wd:Q123456789 wdt:P50 wd:Q1011 . ?resource wdt:P57 wd:Q123 . ?resource wdt:P1433 wd:Q456 . ?resource wdt:P1433 wd:Q789 . ?resource wdt:P1433 wd:Q1011 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n      \"?work wdt:P1476 \\\"Grindhouse\\\"@en .\",\n      \"?work wdt:P57 ?director .\",\n      \"?director rdfs:label ?directorLabel .\",\n      \"FILTER(LANG(?directorLabel) = 'en') .\",\n      \"?work wdt:P50 ?author .\",\n      \"?author rdfs:label ?authorLabel .\",\n      \"FILTER(LANG(?authorLabel) = 'en') .\",\n      \"{?author rdfs:label \\\"Eli Roth\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Edgar Wright\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Rob Zombie\\\"@en}\",\n      \"UNION {?director rdfs:label \\\"Quentin Tarantino\\\"@en}\",\n      \"UNION {?author rdfs:label \\\"Robert Rodriguez\\\"@en}\"\n   \t,\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P1476 \"Grindhouse\"@en . ?work wdt:P57 ?director . ?director rdfs:label ?directorLabel . FILTER(LANG(?directorLabel) = 'en') . ?work wdt:P50 ?author . ?author rdfs:label ?authorLabel . FILTER(LANG(?authorLabel) = 'en') . {?author rdfs:label \"Eli Roth\"@en} UNION {?director rdfs:label \"Edgar Wright\"@en} UNION {?director rdfs:label \"Rob Zombie\"@en} UNION {?director rdfs:label \"Quentin Tarantino\"@en} UNION {?author rdfs:label \"Robert Rodriguez\"@en} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?film WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film (movie)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P57 wd:Q609582. \" ,\">// producer occupation\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film wdt:P50 ?producer. \" ,\">// created by\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"{ ?film wdk:P147 wd:Q350576 }\" ,\"\\nUNION { ?film wdk:P147 wd:Q289575 }\", \"\\nUNION { ?film wdk:P147 wd:Q289576 }\", \"\\nUNION { ?film wdk:P147 wd:Q303555 }\" ,\"\\n}\" ,\">// specific films\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. >// instance of film (movie) ?film wdt:P57 wd:Q609582. >// producer occupation ?film wdt:P50 ?producer. >// created by { ?film wdk:P147 wd:Q350576 } UNION { ?film wdk:P147 wd:Q289575 } UNION { ?film wdk:P147 wd:Q289576 } UNION { ?film wdk:P147 wd:Q303555 } } >// specific films } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q53987042 . # instance of work\\n?resource wdt:P57 ?director . # directed by\\n?resource wdt:P58 ?writer . # written by\\n?director wdt:P106 wd:Q11046 . # occupation is film director or television director\\nVALUES ?writer {wd:Q239265 wd:Q171975 wd:Q171976 wd:Q171978 wd:Q171979} # Peter Gould, George Mastras, Sam Catlin, Thomas Schnauz, Vince Gilligan\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q53987042 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\"\n     \t\t,\"?work wdt:P31 wd:Q1142459 ;\" ,\n     \t\t\"wdt:P57 wd:Ole_John ;\" ,\n     \t\t\"wdt:P140 wd:Jens_Jørgen_Thorsen ;\" ,\n     \t\t\"wdt:P170 wd:Jørgen_Leth .\"\n     \t,\"?work wdt:P364 ?script .\" ,\n     \t\t\"?script wdt:P57 wd:Ole_John .\"\n     \t,\"?work wdt:P128 ?edit .\" ,\n     \t\t\"?edit wdt:P57 wd:Jørgen_Leth .\"\n     \t,\"?resource wdt:P930 ?work .\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P31 wd:Q1142459 ; wdt:P57 wd:Ole_John ; wdt:P140 wd:Jens_Jørgen_Thorsen ; wdt:P170 wd:Jørgen_Leth . ?work wdt:P364 ?script . ?script wdt:P57 wd:Ole_John . ?work wdt:P128 ?edit . ?edit wdt:P57 wd:Jørgen_Leth . ?resource wdt:P930 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?resource WHERE {\",\n    \t\t\"  VALUES (?film1 ?film2 ?film3 ?film4) {\",\n    \t\t\"    (wd:Q27865 wd:Q109971 wd:Q27867 wd:Q110009)\",\n    \t\t\"  }\",\n    \t\t\"  ?person wdt:P345 ?film1 .\",\n    \t\t\"  ?person wdt:P1196 ?film2 .\",\n    \t\t\"  ?person wdt:P1196 ?film3 .\",\n    \t\t\"  ?person wdt:P1196 ?film4 .\",\n    \t\t\"  ?person wdt:P108 wd:Q7098 .\", \">// had the role of film editor\"\n    \t\t,\n    \t\t\"  ?person wdt:P279* wd:Q531 .\", \"// instance of person or subclass\"\n    \t\t,\n    \t\t\"  FILTER EXISTS {\",\n    \t\t\"    ?person wdt:P468 ?film1 .\",\n    \t\t\"    ?person wdt:P468 ?film2 .\",\n    \t\t\"    ?person wdt:P468 ?film3 .\",\n    \t\t\"    ?person wdt:P468 ?film4 .\",\n    \t\t\"  }\",\n    \t\t\"  FILTER EXISTS {\",\n    \t\t\"    ?person wdt:P57 ?film1 .\",\n    \t\t\"    ?person wdt:P57 ?film2 .\",\n    \t\t\"    ?person wdt:P57 ?film3 .\",\n    \t\t\"    ?person wdt:P57 ?film4 .\",\n    \t\t\"  }\",\n    \t\t\"  ?resource wikibase:directClaim ?statement1 .\",\n    \t\t\"}\"\n    \t]\n}\n    \t\t\t \t\t\t\t \t\t", "normal_query": "SELECT ?resource WHERE { VALUES (?film1 ?film2 ?film3 ?film4) { (wd:Q27865 wd:Q109971 wd:Q27867 wd:Q110009) } ?person wdt:P345 ?film1 . ?person wdt:P1196 ?film2 . ?person wdt:P1196 ?film3 . ?person wdt:P1196 ?film4 . ?person wdt:P108 wd:Q7098 . >// had the role of film editor ?person wdt:P279* wd:Q531 . // instance of person or subclass FILTER EXISTS { ?person wdt:P468 ?film1 . ?person wdt:P468 ?film2 . ?person wdt:P468 ?film3 . ?person wdt:P468 ?film4 . } FILTER EXISTS { ?person wdt:P57 ?film1 . ?person wdt:P57 ?film2 . ?person wdt:P57 ?film3 . ?person wdt:P57 ?film4 . } ?resource wikibase:directClaim ?statement1 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?author ?editor ?director WHERE {\"\n     \t\t,\"wd:Q123456789 schema:author ?author .\"\n     \t,\"wd:Q123456789 schema:editor ?editor .\"\n     \t,\"wd:Q123456789 schema:director ?director .\"\n     \t,\"?author wdt:P106 wd:Q728. \"\n     \t,\"?editor wdt:P106 wd:Q728. \"\n     \t,\"?director wdt:P106 wd:Q728. \"\n     \t,\"?author wdk:alias ?authorName .\"\n     \t,\"FILTER (LANG(?authorName) = 'en' && STR(?authorName) = 'Ole John').\"\n     \t,\"?editor wdk:alias ?editorName .\"\n     \t,\"FILTER (LANG(?editorName) = 'en' && STR(?editorName) = 'Jens Jørgen Thorsen').\"\n     \t,\"?director wdk:alias ?directorName .\"\n     \t,\"FILTER (LANG(?directorName) = 'en' && STR(?directorName) = 'Jørgen Leth').\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?author ?editor ?director WHERE { wd:Q123456789 schema:author ?author . wd:Q123456789 schema:editor ?editor . wd:Q123456789 schema:director ?director . ?author wdt:P106 wd:Q728. ?editor wdt:P106 wd:Q728. ?director wdt:P106 wd:Q728. ?author wdk:alias ?authorName . FILTER (LANG(?authorName) = 'en' && STR(?authorName) = 'Ole John'). ?editor wdk:alias ?editorName . FILTER (LANG(?editorName) = 'en' && STR(?editorName) = 'Jens Jørgen Thorsen'). ?director wdk:alias ?directorName . FILTER (LANG(?directorName) = 'en' && STR(?directorName) = 'Jørgen Leth'). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?writerCinematographer ?work1 ?work2 ?work3 ?starWars ?landBeforeTime\",\n  \t\t\"WHERE {\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work1 .\", \">// P467 is 'cinematography of' or similar, but needs to be adjusted based on the exact property used in Wikidata for writer and cinematographer roles.\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work2 .\",\n  \t\t\"  ?writerCinematographer wdt:P467 ?work3 .\",\n  \t\t\"  ?starWars wdt:P190 ?writerCinematographer .\", \">// P190 is 'executive producer of', but should be checked for correctness.\",\n  \t\t\"  ?landBeforeTime wdt:P190 ?writerCinematographer .\",\n  \t\t\"  ?work1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en' && STR(?title1) = 'Anyone Lived in a Pretty How Town')\",\n  \t\t\"  ?work2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en' && STR(?title2) = '1:42.08')\",\n  \t\t\"  ?work3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Look at Life')\",\n  \t\t\"  ?starWars wdt:P345 ?episodeIId . FILTER(STR(?episodeIId) = 'tt0120915')\", \">// Assuming the IMDb ID for Star Wars: Episode I – The Phantom Menace is used in Wikidata.\",\n  \t\t\"  ?landBeforeTime wdt:P345 ?landBeforeTimeId . FILTER(STR(?landBeforeTimeId) = 'tt0118867')\", \">// Assuming the IMDb ID for The Land Before Time is used in Wikidata.\"\n  \t\t\t,\"}\"\n]\n}", "normal_query": "SELECT ?writerCinematographer ?work1 ?work2 ?work3 ?starWars ?landBeforeTime WHERE { ?writerCinematographer wdt:P467 ?work1 . >// P467 is 'cinematography of' or similar, but needs to be adjusted based on the exact property used in Wikidata for writer and cinematographer roles. ?writerCinematographer wdt:P467 ?work2 . ?writerCinematographer wdt:P467 ?work3 . ?starWars wdt:P190 ?writerCinematographer . >// P190 is 'executive producer of', but should be checked for correctness. ?landBeforeTime wdt:P190 ?writerCinematographer . ?work1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en' && STR(?title1) = 'Anyone Lived in a Pretty How Town') ?work2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en' && STR(?title2) = '1:42.08') ?work3 rdfs:label ?title3 . FILTER(LANG(?title3) = 'en' && STR(?title3) = 'Look at Life') ?starWars wdt:P345 ?episodeIId . FILTER(STR(?episodeIId) = 'tt0120915') >// Assuming the IMDb ID for Star Wars: Episode I – The Phantom Menace is used in Wikidata. ?landBeforeTime wdt:P345 ?landBeforeTimeId . FILTER(STR(?landBeforeTimeId) = 'tt0118867') >// Assuming the IMDb ID for The Land Before Time is used in Wikidata. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?producer WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P31 wd:Q11424. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en').\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P57 wd:Q70986.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P169 wd:Q70986. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P108 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P279* wd:Q7345. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P169 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P57 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?producer wdt:P50 ?film1. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER(?title1 = 'Uzak'@en || ?title1 = 'Clouds of May'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?producer WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en'). ?film1 wdt:P57 wd:Q70986. ?producer wdt:P169 wd:Q70986. ?producer wdt:P108 ?film1. ?producer wdt:P279* wd:Q7345. ?producer wdt:P169 ?film1. ?producer wdt:P57 ?film1. ?producer wdt:P50 ?film1. FILTER(?title1 = 'Uzak'@en || ?title1 = 'Clouds of May'@en) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q264598 schema:schemaDirector ?director .\",\n    \"  ?director wdt:P106 wd:Q75848 .\",\n    \"  wd:Q264598 schema:creator ?writer .\",\n    \"  ?writer wdt:P106 wd:Q75848 .\",\n    \"  wd:Q264598 schema:producer ?producer .\",\n    \"  ?producer wdt:P106 wd:Q75848 .\",\n    \"  ?director wdt:P31 wd:Q5 .\",\n    \"  ?writer wdt:P31 wd:Q5 .\",\n    \"  ?producer wdt:P31 wd:Q5 .\",\n    \"  ?director wdt:P106 wd:Q75848 .\",\n    \"  ?writer wdt:P106 wd:Q75848 .\",\n    \"  ?producer wdt:P106 wd:Q75848 .\",\n    \"  FILTER(?director = wd:Q23915 || ?director = wd:Q23916 || ?director = wd:Q23917)\",\n    \"  FILTER(?writer = wd:Q23915 || ?writer = wd:Q23916 || ?writer = wd:Q23917)\",\n    \"  FILTER(?producer = wd:Q23915 || ?producer = wd:Q23916 || ?producer = wd:Q23917)\",\n    \"}\",\n    \"?resource wdt:P31 wd:Q5 .\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q264598 schema:schemaDirector ?director . ?director wdt:P106 wd:Q75848 . wd:Q264598 schema:creator ?writer . ?writer wdt:P106 wd:Q75848 . wd:Q264598 schema:producer ?producer . ?producer wdt:P106 wd:Q75848 . ?director wdt:P31 wd:Q5 . ?writer wdt:P31 wd:Q5 . ?producer wdt:P31 wd:Q5 . ?director wdt:P106 wd:Q75848 . ?writer wdt:P106 wd:Q75848 . ?producer wdt:P106 wd:Q75848 . FILTER(?director = wd:Q23915 || ?director = wd:Q23916 || ?director = wd:Q23917) FILTER(?writer = wd:Q23915 || ?writer = wd:Q23916 || ?writer = wd:Q23917) FILTER(?producer = wd:Q23915 || ?producer = wd:Q23916 || ?producer = wd:Q23917) } ?resource wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2609 wdt:P50 ?author .\",\n    \"  wd:Q2609 wdt:P162 ?executiveProducer .\",\n    \"  wd:Q2609 wdt:P748 ?director .\",\n    \"  ?resource (wdt:P50/wikibase:claim|wdt:P162/wikibase:claim|wdt:P748/wikibase:claim) wd:Jim_Abrahams|^wdt:P50/wikibase:claim/wd:David_Zucker|^wdt:P50/wikibase:claim/wd:Jerry_Zucker .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2609 wdt:P50 ?author . wd:Q2609 wdt:P162 ?executiveProducer . wd:Q2609 wdt:P748 ?director . ?resource (wdt:P50/wikibase:claim|wdt:P162/wikibase:claim|wdt:P748/wikibase:claim) wd:Jim_Abrahams|^wdt:P50/wikibase:claim/wd:David_Zucker|^wdt:P50/wikibase:claim/wd:Jerry_Zucker . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t\t\t \t\t\"SELECT ?person WHERE {\",\n \t\t\t \t\t\"?film1 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?person wdt:P1698 wd:Q504145 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P2773 wd:Q2119622 .\", \"@language:en\",\n \t\t\t \t\t\"?film2 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?film2 rdfs:label ?filmLabel .\", \"@language:en\",\n \t\t\t \t\t\"FILTER (LANG(?filmLabel) = 'en') .\", \"@language:en\",\n \t\t\t \t\t\"?filmLabel bif:contains '\\\"My Son, My Son, What Have Ye Done\\\"' .\", \"@language:en\",\n \t\t\t \t\t\"?film3 wdt:P31 wd:Q1142429 ;\", \"@language:en\",\n \t\t\t \t\t\"wdt:P179 ?person .\", \"@language:en\",\n \t\t\t \t\t\"?film3 rdfs:label ?filmLabel2 .\", \"@language:en\",\n \t\t\t \t\t\"FILTER (LANG(?filmLabel2) = 'en') .\", \"@language:en\",\n \t\t\t \t\t\"?filmLabel2 bif:contains '\\\"Surveillance\\\"' .\", \"@language:en\",\n \t\t\t \t\t\"}\"\n \t\t\t \t\t]\n} ", "normal_query": "SELECT ?person WHERE { ?film1 wdt:P31 wd:Q1142429 ; @language:en wdt:P179 ?person . @language:en ?person wdt:P1698 wd:Q504145 ; @language:en wdt:P2773 wd:Q2119622 . @language:en ?film2 wdt:P31 wd:Q1142429 ; @language:en wdt:P179 ?person . @language:en ?film2 rdfs:label ?filmLabel . @language:en FILTER (LANG(?filmLabel) = 'en') . @language:en ?filmLabel bif:contains '\"My Son, My Son, What Have Ye Done\"' . @language:en ?film3 wdt:P31 wd:Q1142429 ; @language:en wdt:P179 ?person . @language:en ?film3 rdfs:label ?filmLabel2 . @language:en FILTER (LANG(?filmLabel2) = 'en') . @language:en ?filmLabel2 bif:contains '\"Surveillance\"' . @language:en } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n?film wdt:P31 wd:Q11424 .\\nFILTER(?film in (wd:Q????, wd:Q????, wd:Q????, wd:Q????, wd:Q????)) .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . FILTER(?film in (wd:Q????, wd:Q????, wd:Q????, wd:Q????, wd:Q????)) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composer\\nWHERE {\\n\\t?film1 wdt:P345 \\\"Spy Kids 3-D:_Game_Over\\\" ; wdt:P750 ?composer.\\n\\t?film2 wdt:P345 ?sinFilm ; wdt:P57 wd:Qxxxxxx .\\n\\tFILTER(?sinFilm = \\\"Sin_City\\\"@en || ?sinFilm = \\\"Sin_City:_A_Dame_to_Kill_For\\\"@en)\\n\\twd:Qxxxxxx wdt:P169 ?composer.\\n\\t?film3 wdt:P345 \\\"The_Adventures_of_Sharkboy_and_Lavagirl_in_3-D\\\" ; wdt:P89 ?director .\\n\\twd:Qxxxxxx wdt:P161 ?director.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composer WHERE { ?film1 wdt:P345 \"Spy Kids 3-D:_Game_Over\" ; wdt:P750 ?composer. ?film2 wdt:P345 ?sinFilm ; wdt:P57 wd:Qxxxxxx . FILTER(?sinFilm = \"Sin_City\"@en || ?sinFilm = \"Sin_City:_A_Dame_to_Kill_For\"@en) wd:Qxxxxxx wdt:P169 ?composer. ?film3 wdt:P345 \"The_Adventures_of_Sharkboy_and_Lavagirl_in_3-D\" ; wdt:P89 ?director . wd:Qxxxxxx wdt:P161 ?director. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?composerResource \\nWHERE {\\n?composerResource wdt:P31 wd:Q5 ; # instance of human\\nwdt:P178 wd:Q241110 ; # composer of A Woman of Paris (movie)\\nwdt:P178 wd:Q69158 . # composer of Pay Day (movie)\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q134182 .} # not an editor or star of Modern Times\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q107965 .} # not a star of City Lights\\nFILTER NOT EXISTS {?composerResource wdt:P178 wd:Q113475 .} # not a part of The Essanay-Chaplin Revue of 1916\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?composerResource WHERE { ?composerResource wdt:P31 wd:Q5 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q688496. # directed by Jim Abrahams\",\n    \"  ?film wdt:P57 wd:Q688497. # directed by Jerry Zucker\",\n    \"  ?film wdt:P57 wd:Q688498. # directed by David Zucker\",\n    \"  ?film wdt:P162 wd:Q688496. # executive produced by Jim Abrahams\",\n    \"  ?film wdt:P162 wd:Q688497. # executive produced by Jerry Zucker\",\n    \"  ?film wdt:P162 wd:Q688498. # executive produced by David Zucker\",\n    \"  ?film wdt:P50 wd:Q688496. # written by Jim Abrahams\",\n    \"  ?film wdt:P50 wd:Q688497. # written by Jerry Zucker\",\n    \"  ?film wdt:P50 wd:Q688498. # written by David Zucker\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q688496. ?film wdt:P57 wd:Q688497. ?film wdt:P57 wd:Q688498. ?film wdt:P162 wd:Q688496. ?film wdt:P162 wd:Q688497. ?film wdt:P162 wd:Q688498. ?film wdt:P50 wd:Q688496. ?film wdt:P50 wd:Q688497. ?film wdt:P50 wd:Q688498. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?work WHERE {\",\n      \"?work wdt:P31 wd:Q11424. \",\n      \"?work wdt:P57 wd:Yūdai Yamaguchi. \",\n      \"?work wdt:P59 wd:Ernesto Díaz Espinoza. \",\n      \"?work wdt:P140 wd:Adrián García Bogliano. \",\n      \"?work wdt:P160 wd:Yoshihiro Nishimura. \"\n   \t,\"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P31 wd:Q11424. ?work wdt:P57 wd:Yūdai Yamaguchi. ?work wdt:P59 wd:Ernesto Díaz Espinoza. ?work wdt:P140 wd:Adrián García Bogliano. ?work wdt:P160 wd:Yoshihiro Nishimura. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n  ?film1 wdt:P31 wd:Q11424 . # instance of film\\n  ?film1 wdt:P57 wd:Q728 NAFTA . # editor\\n  ?film1 wdt:P91 wd:Q1602766 . # Pietà\\n  ?film2 wdt:P31 wd:Q11424 .\\n  ?film2 wdt:P57 wd:Q728 .\\n  ?film2 wdt:P91 wd:Q2415706 . # Dream\\n  ?film3 wdt:P31 wd:Q11424 .\\n  ?film3 wdt:P57 wd:Q728 .\\n  ?film3 wdt:P91 wd:Q1047797 . # Moebius\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?producer WHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P57 wd:Q60958 . # directed by (replace with executive producer if needed)\\n  ?film wdt:P58 wd:Q60958 . # written by (replace with appropriate property)\\n  ?film wdt:P127 wd:Q60958 . # produced by (replace with appropriate property)\\n\\n  ?producer wdt:P345 wd:Q60958 .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?producer WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 wdt:P31 wd:Q11424709 ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P179 ?writer ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P161 ?star ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P57 ?director ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P75 ?composer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film2 wdt:P31 wd:Q11424709 ;\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"wdt:P57 ?writer .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film1 rdfs:label ?film1Label , ?film1AltLabel .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (LANG(?film1Label) = 'en' || LANG(?film1AltLabel) = 'en')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?film1Label = 'Shoulder Arms'@en || ?film1AltLabel = 'Shoulder Arms'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?film2 rdfs:label ?film2Label , ?film2AltLabel .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (LANG(?film2Label) = 'en' || LANG(?film2AltLabel) = 'en')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"FILTER (?film2Label = 'The Floorwalker'@en || ?film2AltLabel = 'The Floorwalker'@en)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, \"?writer wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?star wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?director wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"?composer wdt:P1477 ?resource .\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q11424709 ; wdt:P179 ?writer ; wdt:P161 ?star ; wdt:P57 ?director ; wdt:P75 ?composer . ?film2 wdt:P31 wd:Q11424709 ; wdt:P57 ?writer . ?film1 rdfs:label ?film1Label , ?film1AltLabel . FILTER (LANG(?film1Label) = 'en' || LANG(?film1AltLabel) = 'en') FILTER (?film1Label = 'Shoulder Arms'@en || ?film1AltLabel = 'Shoulder Arms'@en) ?film2 rdfs:label ?film2Label , ?film2AltLabel . FILTER (LANG(?film2Label) = 'en' || LANG(?film2AltLabel) = 'en') FILTER (?film2Label = 'The Floorwalker'@en || ?film2AltLabel = 'The Floorwalker'@en) ?writer wdt:P1477 ?resource . ?star wdt:P1477 ?resource . ?director wdt:P1477 ?resource . ?composer wdt:P1477 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P169 wd:Q28750 . # cinematographer\\n  ?person wdt:P106 wd:Q1004092 . # occupation: cinematographer\\n  ?person wdt:P136 wd:Q241112 . # works for film genre\\n  ?film rdfs:label ?titleFilter .\\n  FILTER (LANG(?titleFilter) = 'en')\\n  FILTER (?titleFilter = \\\"Planet Terror\\\"@en || ?titleFilter = \\\"Sin City\\\"@en)\\n  ?person wdt:P135 wd:Q28750 . # star, writer, editor, cinematographer, director\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P3457 wd:Q2601189 ; # cinematographer of\\n           wdt:P161 wd:Q2601189 ; # starring in\\n           wdt:P57 wd:Q2601189 . # director of\\n  ?resource wdt:P3457 wd:Q25167 ; # cinematographer of\\n           wdt:P161 wd:Q25167 ; # starring in\\n           wdt:P57 wd:Q25167 . # director of\\n  ?resource wdt:P3457 wd:Q8906 ; # cinematographer of\\n           wdt:P161 wd:Q8906 ; # starring in\\n           wdt:P57 wd:Q8906 . # director of\\n  ?resource wdt:P3457 wd:Q2601190 ; # cinematographer of\\n           wdt:P161 wd:Q2601190 ; # starring in\\n           wdt:P57 wd:Q2601190 . # director of\\n  ?resource wdt:P3457 wd:Q28157 ; # cinematographer of\\n           wdt:P161 wd:Q28157 ; # starring in\\n           wdt:P57 wd:Q28157 . # director of\\n  ?resource wdt:P106 wd:Q1049366 ; # occupation editor\\n           wdt:P458 wd:Q1049366 . # executive producer\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P3457 wd:Q2601189 ; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?resource WHERE {\"\n\t\t    \t\t,\"?film wdt:P31 wd:Q1142402 .\"\n\t\t    \t\t,\"?film rdfs:label ?title .\"\n\t\t    \t\t,\"FILTER (LANG(?title) = 'en') .\"\n\t\t    \t\t,\"?film wdk:P910 ?cinematographer .\"\n\t\t    \t\t,\"?film wdk:P1275 ?editor .\"\n\t\t    \t\t,\"?cinematographer wdt:P31 wd:Q5 .\"\n\t\t    \t\t,\"?editor wdt:P31 wd:Q5 .\"\n\t\t    \t\t,\"?title bif:contains '\\\"Six Men Getting Sick\\\"' .\"\n\t\t    \t\t,\"?film rdfs:label ?otherFilmTitle .\"\n\t\t    \t\t,\"FILTER (LANG(?otherFilmTitle) = 'en') .\"\n\t\t    \t\t,\"VALUES ?otherFilmTitle { \\\"The Black Ghiandola\\\" \\\"Twin Peaks\\\" \\\"Lumière and Company\\\" \\\"Dune\\\" \\\"Inland Empire\\\" \\\"Boat\\\" }\"\n\t\t    \t\t,\"?cinematographer rdfs:label ?resource .\"\n\t\t    \t\t,\"FILTER (LANG(?resource) = 'en') .\"\n\t\t    \t\t,\"}\"\n\t\t \t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q1142402 . ?film rdfs:label ?title . FILTER (LANG(?title) = 'en') . ?film wdk:P910 ?cinematographer . ?film wdk:P1275 ?editor . ?cinematographer wdt:P31 wd:Q5 . ?editor wdt:P31 wd:Q5 . ?title bif:contains '\"Six Men Getting Sick\"' . ?film rdfs:label ?otherFilmTitle . FILTER (LANG(?otherFilmTitle) = 'en') . VALUES ?otherFilmTitle { \"The Black Ghiandola\" \"Twin Peaks\" \"Lumière and Company\" \"Dune\" \"Inland Empire\" \"Boat\" } ?cinematographer rdfs:label ?resource . FILTER (LANG(?resource) = 'en') . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P31 wd:Q5 . # instance of human\\n  ?resource wdt:P1480 wd:Q27963 . # influenced by Jacques Demy\\n  ?resource wdt:P1490 wd:Q27963 . # married to Jacques Demy\\n  ?resource wdt:P101 wd:Q15226 . # occupation writer\\n  ?resource wdt:P101 wd:Q897309 . # occupation editor\\n  ?resource wdt:P101 wd:Q748196 . # occupation director\\n  ?film1 wdt:P50 ?resource .\\n  ?film1 wdt:P345 \\\"Vagabond\\\"@en .\\n  ?film2 wdt:P50 ?resource .\\n  ?film2 wdt:P345 \\\"The_Gleaners_and_I\\\"@en .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q16034897 wdt:P50 ?author .\", \">// Assuming Q16034897 is The Confession's editor, executive producer, and cinematographer (replace with actual Wikidata ID if known) \",\n \t\t  \t\t\"?author wdt:P3288 wd:Q251192 .\", \">// P3288 is 'starred in', Q251192 is Destiny (replace with actual movie IDs)\",\n \t\t  \t\t\"?author wdt:P3288 wd:Q276407 .\", \">// Q276407 is The Waiting Room (replace with actual movie ID)\",\n \t\t  \t\t\"?author wdt:P3288 wd:Q251193 .\", \">// Q251193 is The Third Page (replace with actual movie IDs)\",\n \t\t  \t\t\"?author wdt:P465 wd:Q251192 .\", \">// P465 is 'script writer of', replace with correct property if needed\",\n \t\t  \t\t\"?author wdt:P465 wd:Q276407 .\",\n \t\t  \t\t\"?author wdt:P465 wd:Q251193 .\",\n \t\t  \t\t\"?resource ?property ?author .\"\n \t  \t\t,\"}\" ]\n} ", "normal_query": "SELECT ?resource WHERE { wd:Q16034897 wdt:P50 ?author . >// Assuming Q16034897 is The Confession's editor, executive producer, and cinematographer (replace with actual Wikidata ID if known) ?author wdt:P3288 wd:Q251192 . >// P3288 is 'starred in', Q251192 is Destiny (replace with actual movie IDs) ?author wdt:P3288 wd:Q276407 . >// Q276407 is The Waiting Room (replace with actual movie ID) ?author wdt:P3288 wd:Q251193 . >// Q251193 is The Third Page (replace with actual movie IDs) ?author wdt:P465 wd:Q251192 . >// P465 is 'script writer of', replace with correct property if needed ?author wdt:P465 wd:Q276407 . ?author wdt:P465 wd:Q251193 . ?resource ?property ?author . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?film WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n \t\t  \t\t\"?film wdt:P57 wd:Q70986. \", \">// directed by a film editor\",\n \t\t  \t\t\"{ ?film wdt:P410 wd:Q2515339 }\", \">// edited by the same person\",\n \t\t  \t\t\"UNION\",\n \t\t  \t\t\"{ ?film wdt:P58 wd:Q70986 }\", \">// written by the same person\",\n \t\t  \t\t\"?film rdfs:label ?title.\", \">// get title of film\",\n \t\t  \t\t\"FILTER (LANG(?title) = 'en').\", \">// filter for English titles\",\n \t\t  \t\t\"FILTER (?title = \\\"Pay Day\\\"@en || ?title = \\\"Modern Times\\\"@en || ?title = \\\"The Floorwalker\\\"@en || ?title = \\\"Work\\\"@en).\", \">// match the specific titles\",\n \t\t  \t\t\"} GROUP BY ?film ?title\"\n \t  \t\t]}\n    \t\t\t \t\t", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. >// instance of film ?film wdt:P57 wd:Q70986. >// directed by a film editor { ?film wdt:P410 wd:Q2515339 } >// edited by the same person UNION { ?film wdt:P58 wd:Q70986 } >// written by the same person ?film rdfs:label ?title. >// get title of film FILTER (LANG(?title) = 'en'). >// filter for English titles FILTER (?title = \"Pay Day\"@en || ?title = \"Modern Times\"@en || ?title = \"The Floorwalker\"@en || ?title = \"Work\"@en). >// match the specific titles } GROUP BY ?film ?title LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P465 wd:Q28790 ; # wrote The Waiting Room\\nwdt:P465 wd:Q28791 ; # executive produced The Waiting Room\\nwdt:P465 wd:Q28792 . # edited The Waiting Room\\n?resource wdt:P465 wd:Q28793 ; # executive produced Fate\\nwdt:P465 wd:Q28794 . # edited Fate\\n?resource wdt:P465 wd:Q28795 . # executive produced The Confession\\n?resource wdt:P465 wd:Q28796 . # edited The Confession\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\",\n    \"VALUES (?director ?writer) {\",\n    \" (wd:Q169450 wd:Q169450) # Jörn Donner\",\n    \" (wd:Q23875 wd:Q23875)   # Vilgot Sjöman\",\n    \" (wd:Q170699 wd:Q170699) # Hans Alfredson\",\n    \" (wd:Q46569 wd:Q46569)   # Gustaf Molander\",\n    \" (wd:Q22738 wd:Q22738)   # Ingmar Bergman\",\n    \"} \",\n    \"?film wdt:P31 wd:Q1142129 ;\", \"># instance of film\",\n    \"      wdt:P57 ?director .\", \"># directed by\"\n    ,\n    \"?film wdt:P50 ?writer .\", \"># written by\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { VALUES (?director ?writer) { (wd:Q169450 wd:Q169450) (wd:Q23875 wd:Q23875) (wd:Q170699 wd:Q170699) (wd:Q46569 wd:Q46569) (wd:Q22738 wd:Q22738) } ?film wdt:P31 wd:Q1142129 ; > wdt:P57 ?director . > ?film wdt:P50 ?writer . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?film wdt:P31 wd:Q11424. \", \"text}\",\n \t\t  \t\t\"?person wdt:P1698 ?film. \",\n \t\t  \t\t\"?person wdt:P108 ?organization. \",\n \t\t  \t\t\"?organization rdfs:label ?orgLabel. \",\n \t\t  \t\t\"FILTER(?orgLabel = \\\"The Waiting Room\\\"@en || ?orgLabel = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?person2 wdt:P57 ?film2. \",\n \t\t  \t\t\"?film2 rdfs:label ?film2Label. \",\n \t\t  \t\t\"FILTER(?film2Label = \\\"The Waiting Room\\\"@en || ?film2Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film3. \",\n \t\t  \t\t\"?film3 rdfs:label ?film3Label. \",\n \t\t  \t\t\"FILTER(?film3Label = \\\"The Waiting Room\\\"@en || ?film3Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film4. \",\n \t\t  \t\t\"?film4 rdfs:label ?film4Label. \",\n \t\t  \t\t\"FILTER(?film4Label = \\\"The Waiting Room\\\"@en || ?film4Label = \\\"Destiny The Confission\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film5. \",\n \t\t  \t\t\"?film5 rdfs:label ?film5Label. \",\n \t\t  \t\t\"FILTER(?film5Label = \\\"The Waiting Room\\\"@en || ?film5Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film6. \",\n \t\t  \t\t\"?film6 rdfs:label ?film6Label. \",\n \t\t  \t\t\"FILTER(?film6Label = \\\"The Waiting Room\\\"@en || ?film6Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film7. \",\n \t\t  \t\t\"?film7 rdfs:label ?film7Label. \",\n \t\t  \t\t\"FILTER(?film7Label = \\\"The Waiting Room\\\"@en || ?film7Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film8. \",\n \t\t  \t\t\"?film8 rdfs:label ?film8Label. \",\n \t\t  \t\t\"FILTER(?film8Label = \\\"The Waiting Room\\\"@en || ?film8Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film9. \",\n \t\t  \t\t\"?film9 rdfs:label ?film9Label. \",\n \t\t  \t\t\"FILTER(?film9Label = \\\"The Waiting Room\\\"@en || ?film9Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P1698 ?film10. \",\n \t\t  \t\t\"?film10 rdfs:label ?film10Label. \",\n \t\t  \t\t\"FILTER(?film10Label = \\\"The Waiting Room\\\"@en || ?film10Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film11. \",\n \t\t  \t\t\"?film11 rdfs:label ?film11Label. \",\n \t\t  \t\t\"FILTER(?film11Label = \\\"The Waiting Room\\\"@en || ?film11Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film12. \",\n \t\t  \t\t\"?film12 rdfs:label ?film12Label. \",\n \t\t  \t\t\"FILTER(?film12Label = \\\"The Waiting Room\\\"@en || ?film12Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film13. \",\n \t\t  \t\t\"?film13 rdfs:label ?film13Label. \",\n \t\t  \t\t\"FILTER(?film13Label = \\\"The Waiting Room\\\"@en || ?film13Label = \\\"Destiny The Confession\\\"@en). \",\n \t\t  \t\t\"?person wdt:P57 ?film14. \",\n \t\t  \t\t\"?film14 rdfs:label ?film14Label. \",\n \t\t  \t\t\"FILTER(?film14Label = \\\"The Waiting Room\\\"@en || ?film14Label = \\\"Destiny The Confession\\\"@en). \",\n", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?work WHERE {\\n?editor wdt:P26 ?spouse.\\n?spouse wdt:P31 wd:Q5.\\n?spouse wdt:P468 ?filmworks.\\n?filmworks wdt:P179 wd:Q107916.\\nFILTER(?work IN (wd:Q270595, wd:Q270593, wd:Q270594, wd:Q270596, wd:Q270597)).\\n?work wdt:P50 ?spouse.\\n}\"\n] }", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?work WHERE { ?editor wdt:P26 ?spouse. ?spouse wdt:P31 wd:Q5. ?spouse wdt:P468 ?filmworks. ?filmworks wdt:P179 wd:Q107916. FILTER(?work IN (wd:Q270595, wd:Q270593, wd:Q270594, wd:Q270596, wd:Q270597)). ?work wdt:P50 ?spouse. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?director WHERE {\",\n \t\t  \t\t\"?director wdt:P31 wd:Q5 .\", \"@comment 'subject is a human'\",\n \t\t  \t\t\"?director wdt:P27 wd:Q628542 .\", \"@comment 'gender is female'\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424 .\", \"@comment 'film1 is a film'\",\n \t\t  \t\t\"?film1 rdfs:label ?title1 .\", \"@comment 'get the title of film1'\",\n \t\t  \t\t\"FILTER(LANG(?title1) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title1), 'tag der freiheit'))\",\n \t\t  \t\t\"?director wdt:P488 ?film1 .\", \"@comment 'the director edited film1'\",\n \t\t  \t\t\"?director wdt:P57 ?film1 .\", \"@comment 'the director directed film1'\",\n \t\t  \t\t\"?director wdt:P50 ?film1 .\", \"@comment 'the director wrote film1'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424 .\", \"@comment 'film2 is a film'\",\n \t\t  \t\t\"?film2 rdfs:label ?title2 .\", \"@comment 'get the title of film2'\",\n \t\t  \t\t\"FILTER(LANG(?title2) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title2), 'olympia'))\",\n \t\t  \t\t\"?director wdt:P488 ?film2 .\", \"@comment 'the director edited film2'\",\n \t\t  \t\t\"?director wdt:P57 ?film2 .\", \"@comment 'the director directed film2'\",\n \t\t  \t\t\"?director wdt:P50 ?film2 .\", \"@comment 'the director wrote film2'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424 .\", \"@comment 'film3 is a film'\",\n \t\t  \t\t\"?film3 rdfs:label ?title3 .\", \"@comment 'get the title of film3'\",\n \t\t  \t\t\"FILTER(LANG(?title3) = 'en')\",\n \t\t  \t\t\"FILTER(CONTAINS(LCASE(?title3), 'triumph of the will'))\",\n \t\t  \t\t\"?director wdt:P488 ?film3 .\", \"@comment 'the director edited film3'\",\n \t\t  \t\t\"?director wdt:P57 ?film3 .\", \"@comment 'the director directed film3'\",\n \t\t  \t\t\"?director wdt:P50 ?film3 .\", \"@comment 'the director wrote film3'\", \"@warning 'P50 is typically for author, not writer'\",\n \t\t  \t\t\"}\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?director WHERE { ?director wdt:P31 wd:Q5 . @comment 'subject is a human' ?director wdt:P27 wd:Q628542 . @comment 'gender is female' ?film1 wdt:P31 wd:Q11424 . @comment 'film1 is a film' ?film1 rdfs:label ?title1 . @comment 'get the title of film1' FILTER(LANG(?title1) = 'en') FILTER(CONTAINS(LCASE(?title1), 'tag der freiheit')) ?director wdt:P488 ?film1 . @comment 'the director edited film1' ?director wdt:P57 ?film1 . @comment 'the director directed film1' ?director wdt:P50 ?film1 . @comment 'the director wrote film1' @warning 'P50 is typically for author, not writer' ?film2 wdt:P31 wd:Q11424 . @comment 'film2 is a film' ?film2 rdfs:label ?title2 . @comment 'get the title of film2' FILTER(LANG(?title2) = 'en') FILTER(CONTAINS(LCASE(?title2), 'olympia')) ?director wdt:P488 ?film2 . @comment 'the director edited film2' ?director wdt:P57 ?film2 . @comment 'the director directed film2' ?director wdt:P50 ?film2 . @comment 'the director wrote film2' @warning 'P50 is typically for author, not writer' ?film3 wdt:P31 wd:Q11424 . @comment 'film3 is a film' ?film3 rdfs:label ?title3 . @comment 'get the title of film3' FILTER(LANG(?title3) = 'en') FILTER(CONTAINS(LCASE(?title3), 'triumph of the will')) ?director wdt:P488 ?film3 . @comment 'the director edited film3' ?director wdt:P57 ?film3 . @comment 'the director directed film3' ?director wdt:P50 ?film3 . @comment 'the director wrote film3' @warning 'P50 is typically for author, not writer' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n \t\t  \t\t\"?resource wdk:P169 wd:Q2411087 .\", \">// editor of The Crazies (work ID)\"\n \t\t  \t\t]\n \t\t  \t\t}\n \t\t  \t\t\t\t\t\t\t\t\t  \t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdk:P169 wd:Q2411087 . >// editor of The Crazies (work ID) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q1786950 wdt:P161 ?director .\", \">// Assuming Q1786950 is the identifier for Jackie Chan or the relevant person in question, replace with actual Wikidata ID if different or unknown. \",\n \t\t  \t\t\"?director wdt:P345 wd:Q28666 .\", \">// Police Story 2\",\n \t\t  \t\t\"OPTIONAL { ?director wdt:P345 wd:Q1079555 } .\", \">// Chinese Zodiac (optional as it's not always a requirement in the question)\",\n \t\t  \t\t\"?director wdt:P345 wd:Q28665 .\", \">// Police Story\",\n \t\t  \t\t\"OPTIONAL { ?director wdt:P345 wd:Q1079556 } .\", \">// The Fearless Hyena (optional as it's not always a requirement in the question)\",\n \t\t  \t\t\"?director wdt:P58 wd:Q216956 .\", \">// 1911\"\n \t  \t\t,\"}\" ]\n} ", "normal_query": "SELECT ?resource WHERE { wd:Q1786950 wdt:P161 ?director . >// Assuming Q1786950 is the identifier for Jackie Chan or the relevant person in question, replace with actual Wikidata ID if different or unknown. ?director wdt:P345 wd:Q28666 . >// Police Story 2 OPTIONAL { ?director wdt:P345 wd:Q1079555 } . >// Chinese Zodiac (optional as it's not always a requirement in the question) ?director wdt:P345 wd:Q28665 . >// Police Story OPTIONAL { ?director wdt:P345 wd:Q1079556 } . >// The Fearless Hyena (optional as it's not always a requirement in the question) ?director wdt:P58 wd:Q216956 . >// 1911 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"wd:Q2608479 wdt:P108 ?founder; wdt:P1053 ?employee.\",\n   \t\t\t\"?founder wdt:P107 wd:Q7904; OPTIONAL{?founder wdk:P39 wd:Q16959}.\",\n   \t\t\t\"?employee wdt:P107 wd:Q7904; OPTIONAL{?employee wdk:P39 wd:Q16959}.\",\n   \t\t\t\"?founder wdt:P108 ?employerCERN; wdt:P1053 ?employerW3C.\",\n   \t\t\t\"?employerCERN wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\",\n   \t\t\t\"?employerW3C wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\",\n   \t\t\t\"?founder wdt:P108 ?employerUni; wdt:P1053 ?employerPlessey.\",\n   \t\t\t\"?employerUni wdt:P17 wd:Q24; wdt:P31 wd:Q1058896; wdt:P102 wd:Q85956.\",\n   \t\t\t\"?employerPlessey wdt:P17 wd:Q24; wdt:P31 wd:Q1058896.\"\n   \t\t\t,\"?resource ?property ?value\"\n   \t\t\t,\"}\"\n  \t\t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2608479 wdt:P108 ?founder; wdt:P1053 ?employee. ?founder wdt:P107 wd:Q7904; OPTIONAL{?founder wdk:P39 wd:Q16959}. ?employee wdt:P107 wd:Q7904; OPTIONAL{?employee wdk:P39 wd:Q16959}. ?founder wdt:P108 ?employerCERN; wdt:P1053 ?employerW3C. ?employerCERN wdt:P17 wd:Q24; wdt:P31 wd:Q1058896. ?employerW3C wdt:P17 wd:Q24; wdt:P31 wd:Q1058896. ?founder wdt:P108 ?employerUni; wdt:P1053 ?employerPlessey. ?employerUni wdt:P17 wd:Q24; wdt:P31 wd:Q1058896; wdt:P102 wd:Q85956. ?employerPlessey wdt:P17 wd:Q24; wdt:P31 wd:Q1058896. ?resource ?property ?value } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?film\\nWHERE {\\n  ?film wdt:P31 wd:Q11424 . # instance of film\\n  ?film wdt:P57 ?writerEditorProducerDirector1, ?writerEditorProducerDirector2, ?writerEditorProducerDirector3 .\\n  ?writerEditorProducerDirector1 wdt:P106 wd:Q188492 ; # occupation: screenwriter\\n                                 wdt:P106 wd:Q157476 ; # occupation: film editor\\n                                 wdt:P106 wd:Q31881 ; # occupation: film producer\\n                                 wdt:P106 wd:Q72539 . # occupation: film director\\n  ?writerEditorProducerDirector2 wdt:P106 wd:Q188492, wd:Q157476, wd:Q31881, wd:Q72539 .\\n  ?writerEditorProducerDirector3 wdt:P106 wd:Q188492, wd:Q157476, wd:Q31881, wd:Q72539 .\\n  ?writerEditorProducerDirector1 rdfs:label \\\"Jens Jørgen Thorsen\\\"@da .\\n  ?writerEditorProducerDirector2 rdfs:label \\\"Ole John\\\"@da .\\n  ?writerEditorProducerDirector3 rdfs:label \\\"Jørgen Leth\\\"@da .\\n}\\nLIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?film WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?person WHERE {\",\n    \t\t\"  ?film1 wdt:P31 wd:Q11424. \", \">// instance of film\",\n    \t\t\"  ?film1 rdfs:label ?title1. \",\n    \t\t\"  FILTER(LANG(?title1) = 'en'). \",\n    \t\t\"  FILTER(?title1 = 'Sin City'@en). \",\n    \t\t\"  ?person wdt:P57 ?film1. \", \">// director of film1\",\n    \t\t\"  ?person wdt:P162 ?film1. \", \">// executive producer of film1\",\n    \t\t\"  ?person wdt:P162 wd:Q4980369. \", \">// executive producer of From Dusk till Dawn: The Series\",\n    \t\t\"  ?film2 wdt:P31 wd:Q11424. \",\n    \t\t\"  ?film2 rdfs:label ?title2. \",\n    \t\t\"  FILTER(LANG(?title2) = 'en'). \",\n    \t\t\"  FILTER(?title2 = 'The Adventures of Sharkboy and Lavagirl in 3-D'@en). \",\n    \t\t\"  ?person wdt:P57 ?film2. \", \">// director of film2\",\n    \t\t\"  ?person wdt:P162 ?film2. \", \">// executive producer of film2\",\n    \t\t\"}\"\n    \t]\n}", "normal_query": "SELECT ?person WHERE { ?film1 wdt:P31 wd:Q11424. >// instance of film ?film1 rdfs:label ?title1. FILTER(LANG(?title1) = 'en'). FILTER(?title1 = 'Sin City'@en). ?person wdt:P57 ?film1. >// director of film1 ?person wdt:P162 ?film1. >// executive producer of film1 ?person wdt:P162 wd:Q4980369. >// executive producer of From Dusk till Dawn: The Series ?film2 wdt:P31 wd:Q11424. ?film2 rdfs:label ?title2. FILTER(LANG(?title2) = 'en'). FILTER(?title2 = 'The Adventures of Sharkboy and Lavagirl in 3-D'@en). ?person wdt:P57 ?film2. >// director of film2 ?person wdt:P162 ?film2. >// executive producer of film2 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\" wd:Q123456789 p:filmDirection ?statement1 .\", \">// Replace Q123456789 with the actual Wikidata ID of \" ,\"This Night\"\n \t\t  \t\t,\"?statement1 ps:p:filmDirection ?thisNightFilm .\",\n \t\t  \t\t\"?statement1 pq:P2093 ?directorWriterCinematographer .\", \">// P2093 is for 'position held', replace if needed with the correct property ID for director, cinematographer and writer roles in context of \" ,\"This Night\"\n \t\t  \t\t,\n \t\t  \t\t\"?directorWriterCinematographer wdt:P50 ?person .\", \">// P50 is for 'author' or 'creator', adjust as necessary to link person directly if needed differently for the role(s) involved.\"\n \t\t  \t\t,\n \t\t  \t\t\"?person p:filmDirection|p:scriptWriting|p:cinematography ?statement2 .\", \">// Adjust properties based on actual Wikidata property IDs for writing and cinematography roles\"\n \t\t  \t\t,\"?statement2 ps:(p:filmDirection|p:scriptWriting|p:cinematography) ?otherFilm .\",\n \t\t  \t\t\"?otherFilm wdt:P345 ?movieId .\", \">// P345 is 'IMDb ID', adjust if using other movie identifier\"\n \t\t  \t\t,\n \t\t  \t\t\"FILTER(?movieId = 'tt1234567'@en || ?movieId = 'tt2345678'@en || ?movieId = 'tt3456789'@en)\", \">// Replace with actual IMDb IDs for \" ,\"Rio das Mortes\", \"Lili Marleen\", \"Whity\"\n \t\t  \t\t,\n \t\t  \t\t\"?statement2 pq:P1077 ?role .\", \">// P1077 is 'type of creative work', adjust if needed to filter by specific roles like writing or editing\"\n \t\t  \t\t,\n \t\t  \t\t\"?person wdt:P50 ?resource .\" ,\"\\n\",\n \t\t  \t\t\"}\" ,\"\\n\"\n \t  \t\t]\n} ", "normal_query": "SELECT ?resource WHERE { wd:Q123456789 p:filmDirection ?statement1 . >// Replace Q123456789 with the actual Wikidata ID of This Night ?statement1 ps:p:filmDirection ?thisNightFilm . ?statement1 pq:P2093 ?directorWriterCinematographer . >// P2093 is for 'position held', replace if needed with the correct property ID for director, cinematographer and writer roles in context of This Night ?directorWriterCinematographer wdt:P50 ?person . >// P50 is for 'author' or 'creator', adjust as necessary to link person directly if needed differently for the role(s) involved. ?person p:filmDirection|p:scriptWriting|p:cinematography ?statement2 . >// Adjust properties based on actual Wikidata property IDs for writing and cinematography roles ?statement2 ps:(p:filmDirection|p:scriptWriting|p:cinematography) ?otherFilm . ?otherFilm wdt:P345 ?movieId . >// P345 is 'IMDb ID', adjust if using other movie identifier FILTER(?movieId = 'tt1234567'@en || ?movieId = 'tt2345678'@en || ?movieId = 'tt3456789'@en) >// Replace with actual IMDb IDs for Rio das Mortes Lili Marleen Whity ?statement2 pq:P1077 ?role . >// P1077 is 'type of creative work', adjust if needed to filter by specific roles like writing or editing ?person wdt:P50 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?work WHERE {\",\n \t\t  \t\t\"?person wdt:P31 wd:Q5 .\", \">// Human (instance of human)\",\n \t\t  \t\t\"?person wdt:P106 wd:Q725498 .\", \">// Occupation: Cinematographer\",\n \t\t  \t\t\"?film wdt:P345 \\\"Night_of_the_Living_Dead\\\"@en .\", \">// English title of the film \" ,\n \t\t  \t\t\"?film wdt:P57 ?person .\", \">// cinematographer of the film\",\n \t\t  \t\t\"?work wdt:P57 ?person .\", \">// person directed work\",\n \t\t  \t\t\"FILTER(?work != ?film)\", \">// exclude Night of the Living Dead itself\",\n \t\t  \t\t\"?work wdt:P1476 ?title.\", \">// title of the work in any language\",\n \t\t  \t\t\"?work wdt:P361 wd:Q2589077 .\", \">// instance of film, episode of television series or video\",\n \t\t  \t\t\"FILTER(?title = \\\"Martin\\\"@en || ?title = \\\"Season_of_the_Witch\\\"@en || ?title = \\\"The_Crazies\\\"@en)\", \">// filter for specific titles\"\n \t\t  \t\t,\"}\" ]\n} ", "normal_query": "SELECT ?work WHERE { ?person wdt:P31 wd:Q5 . >// Human (instance of human) ?person wdt:P106 wd:Q725498 . >// Occupation: Cinematographer ?film wdt:P345 \"Night_of_the_Living_Dead\"@en . >// English title of the film ?film wdt:P57 ?person . >// cinematographer of the film ?work wdt:P57 ?person . >// person directed work FILTER(?work != ?film) >// exclude Night of the Living Dead itself ?work wdt:P1476 ?title. >// title of the work in any language ?work wdt:P361 wd:Q2589077 . >// instance of film, episode of television series or video FILTER(?title = \"Martin\"@en || ?title = \"Season_of_the_Witch\"@en || ?title = \"The_Crazies\"@en) >// filter for specific titles } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?person WHERE {\",\n  \t\t\"  ?person wdt:P31 wd:Q5 .\", \"description>: Writer, Cinematographer, and Director}\",\n  \t\t\"  ?person p:P1086 [ ps:P1086 wd:Q247912 ; pq:P580 ?start ] .\",\n  \t\t\"  ?person wdt:P361 wd:Q247912 .\",\n  \t\t\"  ?film wdt:P57 ?person .\",\n  \t\t\"  ?film rdfs:label ?title FILTER(LANG(?title) = 'en')\",\n  \t\t\"  FILTER(CONTAINS(?title, 'Look at Life') || CONTAINS(?title, 'Anyone Lived in a Pretty How Town') || CONTAINS(?title, 'Filmmaker'))\",\n  \t\t\"  ?swFilm wdt:P57 ?person .\",\n  \t\t\"  ?swFilm rdfs:label ?starWarsTitle FILTER(LANG(?starWarsTitle) = 'en')\",\n  \t\t\"  FILTER(CONTAINS(?starWarsTitle, 'Star Wars Episode IV A New Hope'))\",\n  \t\t\"}\"\n \t]\n} ", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . description>: Writer, Cinematographer, and Director} ?person p:P1086 [ ps:P1086 wd:Q247912 ; pq:P580 ?start ] . ?person wdt:P361 wd:Q247912 . ?film wdt:P57 ?person . ?film rdfs:label ?title FILTER(LANG(?title) = 'en') FILTER(CONTAINS(?title, 'Look at Life') || CONTAINS(?title, 'Anyone Lived in a Pretty How Town') || CONTAINS(?title, 'Filmmaker')) ?swFilm wdt:P57 ?person . ?swFilm rdfs:label ?starWarsTitle FILTER(LANG(?starWarsTitle) = 'en') FILTER(CONTAINS(?starWarsTitle, 'Star Wars Episode IV A New Hope')) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q689066. # directed by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P116 wd:Q689066. # produced by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P58 wd:Q273455. # written by Jørgen Leth\",\n    \"  ?film wdt:P118 wd:Q273455. # edited by Ole John (assuming Ole John is the same as Jørgen Leth for lack of specific information)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q689066. ?film wdt:P116 wd:Q689066. ?film wdt:P58 wd:Q273455. ?film wdt:P118 wd:Q273455. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?costumeDesigner WHERE {\"\n     \t\t,\"?film wdt:P31 wd:Q11424. \"\n     \t, \"?film wdt:P57 wd:Q6890922. \"\n     \t, \"?film wdt:P169 wd:?costumeDesigner. \"\n     \t, \"?film wdt:P58 wd:Q6890922. \" ]}\n   \t\t\t\t\t\t\t       \t\t\t", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q6890922. ?film wdt:P169 wd:?costumeDesigner. ?film wdt:P58 wd:Q6890922. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . ?person wdt:P1698 ?film ; wdt:P50 ?author . ?author wdt:P108 ?producerOrg . ?producerOrg wdt:P31 wd:Q1730879 . ?film wdt:P57 ?director . ?film wdt:P244 ?title . FILTER(?title = 'Pietà'@en || ?title = 'Moebius'@en || ?title = 'Dream'@en) }\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . ?person wdt:P1698 ?film ; wdt:P50 ?author . ?author wdt:P108 ?producerOrg . ?producerOrg wdt:P31 wd:Q1730879 . ?film wdt:P57 ?director . ?film wdt:P244 ?title . FILTER(?title = 'Pietà'@en || ?title = 'Moebius'@en || ?title = 'Dream'@en) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?film WHERE {\"\n     \t,\"?film wdt:P31 wd:Q11424. \"\n     \t,\"?film wdt:P57 wd:Q688490. \" ,\"\\n\"\n     \t,\"?film wdt:P50 wd:Q688490. \" ,\"\\n\"\n     \t,\"?film wdt:P1433 wd:Q688490. \"\n   \t,\"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q688490. ?film wdt:P50 wd:Q688490. ?film wdt:P1433 wd:Q688490. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424. # instance of film\",\n    \"  ?film wdt:P57 wd:Q68906. # directed by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P110 wd:Q68906. # edited by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P58 wd:Q68906. # written by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P91 wd:Q68906. # produced by Jens Jørgen Thorsen\",\n    \"  ?film wdt:P57 wd:Q234169. # directed by Jørgen Leth\",\n    \"  ?film wdt:P110 wd:Q234169. # edited by Jørgen Leth\",\n    \"  ?film wdt:P58 wd:Q234169. # written by Jørgen Leth\",\n    \"  ?film wdt:P91 wd:Q234169. # produced by Jørgen Leth\",\n    \"  ?film wdt:P57 wd:Q68907. # directed by Ole John\",\n    \"  ?film wdt:P110 wd:Q68907. # edited by Ole John\",\n    \"  ?film wdt:P58 wd:Q68907. # written by Ole John\",\n    \"  ?film wdt:P91 wd:Q68907. # produced by Ole John\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q68906. ?film wdt:P110 wd:Q68906. ?film wdt:P58 wd:Q68906. ?film wdt:P91 wd:Q68906. ?film wdt:P57 wd:Q234169. ?film wdt:P110 wd:Q234169. ?film wdt:P58 wd:Q234169. ?film wdt:P91 wd:Q234169. ?film wdt:P57 wd:Q68907. ?film wdt:P110 wd:Q68907. ?film wdt:P58 wd:Q68907. ?film wdt:P91 wd:Q68907. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?role WHERE {\",\n    \"  wd:Q2586970 wdt:P1303 ?role .\",\n    \"  ?film wdt:P57 wd:Q2586970 .\",\n    \"  ?film wdt:P458|wdt:P140 wd:Q2586970 .\",\n    \"  ?film wdt:P58 wd:Q2586970 .\",\n    \"  FILTER(?film = wd:Q3655555 || ?film = wd:Q3655541 || ?film = wd:Q3655542) }\"\n  ]\n}", "normal_query": "SELECT ?role WHERE { wd:Q2586970 wdt:P1303 ?role . ?film wdt:P57 wd:Q2586970 . ?film wdt:P458|wdt:P140 wd:Q2586970 . ?film wdt:P58 wd:Q2586970 . FILTER(?film = wd:Q3655555 || ?film = wd:Q3655541 || ?film = wd:Q3655542) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?role WHERE {\\nwd:Q76142985 wdt:P3458 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P57 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P1104 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\\nUNION\\n{\\nwd:Q76142985 wdt:P729 ?role.\\n?role wdt:P106 wd:Q1084499.\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?role WHERE { wd:Q76142985 wdt:P3458 ?role. ?role wdt:P106 wd:Q1084499. } UNION { wd:Q76142985 wdt:P57 ?role. ?role wdt:P106 wd:Q1084499. } UNION { wd:Q76142985 wdt:P1104 ?role. ?role wdt:P106 wd:Q1084499. } UNION { wd:Q76142985 wdt:P729 ?role. ?role wdt:P106 wd:Q1084499. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film wdt:P3457 wd:Q2118690 ;\", \"># P3457 is 'executive producer', Q2118690 is David Zucker, Jim Abrahams and Jerry Zucker (group)\"\n   \t,\"  ?film wdt:P725 wd:Q2118690 .\", \"# P725 is 'director'\"\n   \t,\"  ?film wdt:P57 wd:Q2118690 .\", \"# P57 is 'author' or 'screenwriter'\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P3457 wd:Q2118690 ; > ?film wdt:P725 wd:Q2118690 . ?film wdt:P57 wd:Q2118690 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film rdfs:label \\\"Moebius\\\"@en .\\n?film wdt:P57 ?editorCinematographer . # editor or cinematographer\\n?editorCinematographer wdt:P50 wd:Q639681 . # person with ID Q639681 (Jean-Pierre Denys)\\n\\n?film2 wdt:P31 wd:Q11424 .\\n?film2 rdfs:label \\\"One on One\\\"@en .\\n?film2 wdt:P57 ?editorCinematographer .\\n\\n?film3 wdt:P31 wd:Q11424 .\\n?film3 rdfs:label \\\"Amen.\\\"@en .\\n?film3 wdt:P57 ?editorCinematographer .\\n\\n?work wdt:P50 wd:Q639681 . # work by Jean-Pierre Denys\\n?work wdt:P411 wd:Q245577 . # executive producer of Pietà\\n?work wdt:P57 wd:Q639681 . # director of Pietà\\n\\n?resource ?property ?value.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film wdt:P345 ?title.\\n  ?film wdt:P784 wd:Q21960. # edited by Rainer Werner Fassbinder\\n  ?film wdt:P1027 wd:Q21960. # directed by Rainer Werner Fassbinder\\n  ?film wdt:P1648 wd:Q21960. # starred Rainer Werner Fassbinder\\n  ?resource wdt:P57 ?film. # cinematographer of the film\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P345 ?title. ?film wdt:P784 wd:Q21960. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor ?influencee ?founder WHERE {\",\n    \"  ?actor wdt:P31 wd:Q5 ;\", \"# Assuming Q5 is Human, adjust if necessary\",\n    \"         wdt:P668 wd:Q??? .\", \"# Replace with actual Wikidata ID for influence relation\",\n    \"  wd:Q??? wdt:P274 ?actor .\", \"# Replace with actual IDs for Wolfgang Ambros and Jan-Mari Carlotti\",\n    \"  wd:Q??? wdt:P274 ?actor .\", \"# Replace with actual IDs for Carolyn Dennis and Sara Dylan\",\n    \"  wd:Q??? wdt:P102 ?founder .\", \"# Replace with actual ID for Alexandria Monroe High School\"\n   \t]}\n \t\t\t\t\t\t\t\t  \t\t", "normal_query": "SELECT ?actor ?influencee ?founder WHERE { ?actor wdt:P31 wd:Q5 ; wdt:P668 wd:Q??? . wd:Q??? wdt:P274 ?actor . wd:Q??? wdt:P274 ?actor . wd:Q??? wdt:P102 ?founder . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?person WHERE {\\n  ?person wdt:P39 wd:Q7014;           # Member of World Wide Web Consortium (Q7014)\\n           wdt:P39 wd:Q25686;            # Member of Open Data Institute (Q25686)\\n           wdt:P108 wd:Q11676;           # Employer Plessey (Q11676)\\n           wdt:P141 wd:Q3918;            # Employed by CERN (Q3918)\\n           wdt:P141 wd:Q25056.           # Employed by School of Electronics and Computer Science, University of Southampton (Q25056)\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?person WHERE { ?person wdt:P39 wd:Q7014; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t  \t \t  \t \t\t\"query\": [\n      \"SELECT ?resource WHERE {\"\n    ]\n}\n    \t\t \t\t \t  \t \t  \t ", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\" : [\n    \"SELECT ?role ?work WHERE {\",\n    \"  wd:Q187695 wdt:P3452 ?role ;\",\n    \"          wdt:P106/wikibase:directClaim ?statement .\",\n    \"  ?statement prov:wasDerivedFrom ?source .\",\n    \"  ?source pr:P3452 [ ps:P3452 wd:Q789 ] .\",\n    \"  OPTIONAL { wd:Q187695 wdt:P106/wikibase:directClaim ?editStatement .\",\n    \"             ?editStatement prov:wasDerivedFrom ?editSource .\",\n    \"             ?editSource pr:P106 [ ps:P106 wd:Q234516 ] }\",\n    \"  FILTER ( ?role = wd:Q789 || EXISTS { ?editStatement prov:wasDerivedFrom ?editSource } )\",\n    \"}\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}", "normal_query": "SELECT ?role ?work WHERE { wd:Q187695 wdt:P3452 ?role ; wdt:P106/wikibase:directClaim ?statement . ?statement prov:wasDerivedFrom ?source . ?source pr:P3452 [ ps:P3452 wd:Q789 ] . OPTIONAL { wd:Q187695 wdt:P106/wikibase:directClaim ?editStatement . ?editStatement prov:wasDerivedFrom ?editSource . ?editSource pr:P106 [ ps:P106 wd:Q234516 ] } FILTER ( ?role = wd:Q789 || EXISTS { ?editStatement prov:wasDerivedFrom ?editSource } ) } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?producer wdt:P102 wd:Q78546 ;\", \"@language:en .\", \">// Organization founded by the producer\",\n \t\t  \t\t\"?film wdt:P31 wd:Q1142419 ;\", \"@language:en .\", \">// Instance of film\",\n \t\t  \t\t\"?film wdt:P57 ?producer ;\", \"@language:en .\", \">// The producer directed the film\",\n \t\t  \t\t\"?film wdt:P50 ?producer ;\", \"@language:en .\", \">// The producer wrote the film\",\n \t\t  \t\t\"VALUES ?title { \\\"The Brahma Diamond\\\"@en \\\"His Lost Love\\\"@en \\\"The Birth of a Nation\\\"@en }\",\n \t\t  \t\t\"?film rdfs:label ?title .\",\n \t\t  \t\t\"?resource wdt:P1695 ?producer ;\", \"@language:en .\", \">// The producer is associated with the resource\",\n \t\t  \t\t\"}\"\n \t  \t\t]\n} ", "normal_query": "SELECT ?resource WHERE { ?producer wdt:P102 wd:Q78546 ; @language:en . >// Organization founded by the producer ?film wdt:P31 wd:Q1142419 ; @language:en . >// Instance of film ?film wdt:P57 ?producer ; @language:en . >// The producer directed the film ?film wdt:P50 ?producer ; @language:en . >// The producer wrote the film VALUES ?title { \"The Brahma Diamond\"@en \"His Lost Love\"@en \"The Birth of a Nation\"@en } ?film rdfs:label ?title . ?resource wdt:P1695 ?producer ; @language:en . >// The producer is associated with the resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P378 wd:Q123456 . # Replace Q123456 with the actual Wikidata ID of Brecha's executive producer, editor, composer, cinematographer, and director\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P378 wd:Q123456 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n    \t\t\"SELECT ?resource WHERE {\"\n    \t\t\t,\"?resource wdt:P31 wd:Q5 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q24976929 .\" ,\"%Sally Ride Science%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q180009 .\" ,\"%Center for International Security and Cooperation%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q34567 .\" ,\"%Stanford University%\"\n    \t\t\t,\"?resource wdt:P1412 wd:Q3358 .\" ,\"%National Aeronautics and Space Administration%\"\n    \t\t\t,\"?resource wdt:P108 wd:Q9067 .\" ,\"%University of California, San Diego%\"\n    \t\t\t,\"}\"\n]\n} ", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P108 wd:Q24976929 . %Sally Ride Science% ?resource wdt:P108 wd:Q180009 . %Center for International Security and Cooperation% ?resource wdt:P108 wd:Q34567 . %Stanford University% ?resource wdt:P1412 wd:Q3358 . %National Aeronautics and Space Administration% ?resource wdt:P108 wd:Q9067 . %University of California, San Diego% } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n{\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P108 wd:Q2498706 . # workplace\\n}\\nUNION\\n{\\n?resource wdt:P108 wd:Q2498706 . # workplace\\n?resource wdt:P361 wd:Q538886 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P179 wd:Q2498706 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P361 wd:Q538886 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P179 wd:Q2498706 . # part of\\n}\\nUNION\\n{\\n?film (wdt:P57|wdt:P162) ?resource . # director or producer\\n?film wdt:P31 wd:Q1142470 . # instance of film\\n?film wdt:P361 wd:Q538886 . # part of\\n}\\nSERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { { ?resource wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?resource WHERE {\"\n \t\t\t\t]\n \t \t\t\t}\n \t\t  \t\t\t\t\t\t\t\t\t  \t\t\t\t", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?item wdt:P31 wd:Q5 .\"\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t      \t\t\t", "normal_query": "?item wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?cinematographer ?director ?editor ?producer WHERE {\",\n \t  \t\t\"  ?film1 wdt:P31 wd:Q1142470 ;\", \"@\"\n \t  \t\t,\"    wdt:P57 wd:%cinematographer% ;\", \"@\"\n \t  \t\t,\"    wdt:P75 wd:%director% ;\", \"@\"\n \t  \t\t,\"    wdt:P1186 wd:%editor%.@\", \"@\"\n \t  \t\t,\"  ?film2 wdt:P31 wd:Q1142470 ;\", \"@\"\n \t  \t\t,\"    wdt:P98 wd:%producer%.@\", \"@\"\n \t  \t\t,\"}\", \"@\"\n \t  \t\t,\"FILTER(LANG(?title) = 'en').\", \"@\"\n \t  \t\t,\"VALUES ?film1 { wd:Q635524 wd:Q635527 }.\", \"@\"\n \t  \t\t,\"VALUES ?film2 { wd:Q189015 wd:Q189016 }.@\", \"@\"\n \t\t \t\t ]\n} ", "normal_query": "SELECT ?cinematographer ?director ?editor ?producer WHERE { ?film1 wdt:P31 wd:Q1142470 ; @ wdt:P57 wd:%cinematographer% ; @ wdt:P75 wd:%director% ; @ wdt:P1186 wd:%editor%.@ @ ?film2 wdt:P31 wd:Q1142470 ; @ wdt:P98 wd:%producer%.@ @ } @ FILTER(LANG(?title) = 'en'). @ VALUES ?film1 { wd:Q635524 wd:Q635527 }. @ VALUES ?film2 { wd:Q189015 wd:Q189016 }.@ @ LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource1 ?resource2 WHERE {\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en').\",\n \t\t  \t\t\"?film1 wdt:P57 ?director.\",\n \t\t  \t\t\"?film1 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film1 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film2 rdfs:label ?title2 FILTER(LANG(?title2) = 'en').\",\n \t\t  \t\t\"?film2 wdt:P57 ?director.\",\n \t\t  \t\t\"?film2 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film2 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film3 rdfs:label ?title3 FILTER(LANG(?title3) = 'en').\",\n \t\t  \t\t\"?film3 wdt:P57 ?director.\",\n \t\t  \t\t\"?film3 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film3 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?film4 wdt:P31 wd:Q11424. \",\n \t\t  \t\t\"?film4 rdfs:label ?title4 FILTER(LANG(?title4) = 'en').\",\n \t\t  \t\t\"?film4 wdt:P57 ?director.\",\n \t\t  \t\t\"?film4 wdt:P106 wd:Q1548729.\",\n \t\t  \t\t\"?film4 wdt:P136 wd:Q169196.\",\n \t\t  \t\t\"?director wdt:P107 wd:Q7092.\",\n \t\t  \t\t\"?director wdt:P1480 ?spouse1.\",\n \t\t  \t\t\"?spouse1 rdfs:label ?name1 FILTER(LANG(?name1) = 'en').\",\n \t\t  \t\t\"FILTER(?name1 = \\\"Lita Grey\\\"@en || ?name1 = \\\"Mildred Harris\\\"@en).\",\n \t\t  \t\t\"?director wdt:P1480 ?spouse2.\",\n \t\t  \t\t\"?spouse2 rdfs:label ?name2 FILTER(LANG(?name2) = 'en').\",\n \t\t  \t\t\"FILTER(?name2 = \\\"Oona O'Neill\\\"@en).\",\n \t\t  \t\t\"?resource1 wdt:P31 wd:Q5.\",\n \t\t  \t\t\"{?director wdt:P698 ?resource1} UNION {?spouse1 wdt:P698 ?resource1}\",\n \t\t  \t\t\"?resource2 wdt:P31 wd:Q5.\",\n \t\t  \t\t\"{?director wdt:P698 ?resource2} UNION {?spouse2 wdt:P698 ?resource2}\"\n \t\t  \t\t,\"}\" ]\n}", "normal_query": "SELECT ?resource1 ?resource2 WHERE { ?film1 wdt:P31 wd:Q11424. ?film1 rdfs:label ?title1 FILTER(LANG(?title1) = 'en'). ?film1 wdt:P57 ?director. ?film1 wdt:P106 wd:Q1548729. ?film1 wdt:P136 wd:Q169196. ?film2 wdt:P31 wd:Q11424. ?film2 rdfs:label ?title2 FILTER(LANG(?title2) = 'en'). ?film2 wdt:P57 ?director. ?film2 wdt:P106 wd:Q1548729. ?film2 wdt:P136 wd:Q169196. ?film3 wdt:P31 wd:Q11424. ?film3 rdfs:label ?title3 FILTER(LANG(?title3) = 'en'). ?film3 wdt:P57 ?director. ?film3 wdt:P106 wd:Q1548729. ?film3 wdt:P136 wd:Q169196. ?film4 wdt:P31 wd:Q11424. ?film4 rdfs:label ?title4 FILTER(LANG(?title4) = 'en'). ?film4 wdt:P57 ?director. ?film4 wdt:P106 wd:Q1548729. ?film4 wdt:P136 wd:Q169196. ?director wdt:P107 wd:Q7092. ?director wdt:P1480 ?spouse1. ?spouse1 rdfs:label ?name1 FILTER(LANG(?name1) = 'en'). FILTER(?name1 = \"Lita Grey\"@en || ?name1 = \"Mildred Harris\"@en). ?director wdt:P1480 ?spouse2. ?spouse2 rdfs:label ?name2 FILTER(LANG(?name2) = 'en'). FILTER(?name2 = \"Oona O'Neill\"@en). ?resource1 wdt:P31 wd:Q5. {?director wdt:P698 ?resource1} UNION {?spouse1 wdt:P698 ?resource1} ?resource2 wdt:P31 wd:Q5. {?director wdt:P698 ?resource2} UNION {?spouse2 wdt:P698 ?resource2} } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q89567 wdt:P136 ?resource1 . # written by\\n  wd:Q89567 wdt:P120 ?resource2 . # edited by\\n  wd:Q89567 wdt:P57 ?resource3 . # directed by\\n  ?resource (wdt:P21|wdt:P106) wd:Q6581097 .\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q89567 wdt:P136 ?resource1 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?acquiringCompany wdt:P127 ?companyAcquired .\", \">// P127 = \" ,\"%收购了\"\n \t\t  \t\t,\"?companyAcquired wdk:P50 wd:Q6384926 .\", \">// P50 = \" ,\"%创作人是\" , \"wdk:\" ,\"%wikibase:\"\n \t\t  \t\t,\"?companyAcquired wdt:P178 ?producerDistributor .\", \">// P178 = \" ,\"%制作公司\"\n \t\t  \t\t,\"?acquiringCompany wdt:P264 wd:Q3059666 .\", \">// P264 = \" ,\"%母公司是\" , \"wd:\" ,\"%wikidata:\"\n \t\t  \t\t,\"?acquiringCompany wdt:P264 wd:Q178966 .\",\n \t\t  \t\t\"?producerDistributor wdt:P31 wd:Q45220 .\", \">// P31 = \" ,\"%是\"\n \t\t  \t\t,\"?companyAcquired rdfs:label ?title .\", \">// rdfs:label = \" ,\"%标签\"\n \t\t  \t\t,\"FILTER (LANG(?title) = 'en')\",\n \t\t  \t\t\"?producerDistributor rdfs:label ?resource .\",\n \t\t  \t\t\"FILTER (LANG(?resource) = 'en')\",\n \t\t  \t\t\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?acquiringCompany wdt:P127 ?companyAcquired . >// P127 = %收购了 ?companyAcquired wdk:P50 wd:Q6384926 . >// P50 = %创作人是 wdk: %wikibase: ?companyAcquired wdt:P178 ?producerDistributor . >// P178 = %制作公司 ?acquiringCompany wdt:P264 wd:Q3059666 . >// P264 = %母公司是 wd: %wikidata: ?acquiringCompany wdt:P264 wd:Q178966 . ?producerDistributor wdt:P31 wd:Q45220 . >// P31 = %是 ?companyAcquired rdfs:label ?title . >// rdfs:label = %标签 FILTER (LANG(?title) = 'en') ?producerDistributor rdfs:label ?resource . FILTER (LANG(?resource) = 'en') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\" ?resource wdt:P31 wd:Q5 .\", \"># Assuming the person is of type human (Q5)\",\n  \t\t\" ?resource wdt:P108 wd:Q2499676 .\", \"># Composer role in City Lights and Modern Times\",\n  \t\t\" ?resource wdt:P108 wd:Q33999 .\", \"># Editor role in City Lights and Modern Times\",\n  \t\t\" ?resource wdt:P108 wd:Q2541769 .\", \"># Director role in City Lights and Modern Times\",\n  \t\t\" ?film1 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P57 ?film1 .\", \"># Directed the film\",\n  \t\t\" ?film1 rdfs:label ?title1 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title1) = 'en' && STR(?title1) = 'The Floorwalker') .\", \"># Filter for The Floorwalker in English\",\n  \t\t\" ?film2 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film2 .\", \"># Edited the film\",\n  \t\t\" ?film2 rdfs:label ?title2 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title2) = 'en' && STR(?title2) = 'His Musical Career') .\", \"># Filter for His Musical Career in English\",\n  \t\t\" ?film3 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film3 .\", \"># Edited the film\",\n  \t\t\" ?film3 rdfs:label ?title3 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title3) = 'en' && STR(?title3) = 'The Kid') .\", \"># Filter for The Kid in English\",\n  \t\t\" ?film4 wdt:P31 wd:Q11424 .\", \"># Film instance (Q11424)\",\n  \t\t\" ?resource wdt:P58 ?film4 .\", \"># Edited the film\",\n  \t\t\" ?film4 rdfs:label ?title4 .\", \"># Title of the film\",\n  \t\t\" FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Gold Rush') .\", \"># Filter for The Gold Rush in English\",\n  \t\t\"}\"\n  \t]\n}\n\t\t\t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . > ?resource wdt:P108 wd:Q2499676 . > ?resource wdt:P108 wd:Q33999 . > ?resource wdt:P108 wd:Q2541769 . > ?film1 wdt:P31 wd:Q11424 . > ?resource wdt:P57 ?film1 . > ?film1 rdfs:label ?title1 . > FILTER(LANG(?title1) = 'en' && STR(?title1) = 'The Floorwalker') . > ?film2 wdt:P31 wd:Q11424 . > ?resource wdt:P58 ?film2 . > ?film2 rdfs:label ?title2 . > FILTER(LANG(?title2) = 'en' && STR(?title2) = 'His Musical Career') . > ?film3 wdt:P31 wd:Q11424 . > ?resource wdt:P58 ?film3 . > ?film3 rdfs:label ?title3 . > FILTER(LANG(?title3) = 'en' && STR(?title3) = 'The Kid') . > ?film4 wdt:P31 wd:Q11424 . > ?resource wdt:P58 ?film4 . > ?film4 rdfs:label ?title4 . > FILTER(LANG(?title4) = 'en' && STR(?title4) = 'The Gold Rush') . > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?director WHERE {\\n  ?film1 wdt:P31 wd:Q11424 . # instance of film\\n  ?film1 wdt:P57 ?director . # directed by\\n  ?film1 rdfs:label ?titleFilm1 .\\n  FILTER (LANG(?titleFilm1) = 'en')\\n  FILTER (?titleFilm1 = \\\"There Will Be No Leave Today\\\")\\n  ?film2 wdt:P31 wd:Q11424 . # instance of film\\n  ?film2 wdt:P57 ?director . # directed by\\n  ?film2 rdfs:label ?titleFilm2 .\\n  FILTER (LANG(?titleFilm2) = 'en')\\n  FILTER (?titleFilm2 = \\\"The Killers\\\")\\n  ?director wdt:P345 wd:lmvtr . # Wikidata item for Lars von Trier\\n  ?director wdt:P1698 wd:qAranCosentinoItemID . # Replace with actual Aran Cosentino ID\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?director WHERE { ?film1 wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q498709 .\", \">// Married to Oona O'Neill (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q123456 .\", \">// Married to Lita Grey (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P26 wd:Q789012 .\", \">// Married to Mildred Harris (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q939 .\", \">// Influenced Federico Fellini\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q78601 .\", \">// Influenced Marcel Marceau (example ID, replace with actual Wikidata ID)\",\n \t\t  \t\t\"?resource wdt:P54 wd:Q23966 .\", \">// Influenced Harold Lloyd\",\n \t\t  \t\t\"?resource wdt:P102 wd:Q78901 .\", \">// Member of United Artists Corporation (example ID, replace with actual Wikidata ID)\",\n \t  \t\t\"}\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Instance of human ?resource wdt:P26 wd:Q498709 . >// Married to Oona O'Neill (example ID, replace with actual Wikidata ID) ?resource wdt:P26 wd:Q123456 . >// Married to Lita Grey (example ID, replace with actual Wikidata ID) ?resource wdt:P26 wd:Q789012 . >// Married to Mildred Harris (example ID, replace with actual Wikidata ID) ?resource wdt:P54 wd:Q939 . >// Influenced Federico Fellini ?resource wdt:P54 wd:Q78601 . >// Influenced Marcel Marceau (example ID, replace with actual Wikidata ID) ?resource wdt:P54 wd:Q23966 . >// Influenced Harold Lloyd ?resource wdt:P102 wd:Q78901 . >// Member of United Artists Corporation (example ID, replace with actual Wikidata ID) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?director ?star ?writer WHERE {\",\n \t\t  \t\t\"?film1 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?film2 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?film3 wdt:P31 wd:Q11424299 ;\",\n \t\t  \t\t\"wdt:P161 ?star ;\",\n \t\t  \t\t\"wdt:P57 ?director .\",\n \t\t  \t\t\"?writer wdt:P178 ?film1 .\",\n \t\t  \t\t\"?writer wdt:P178 ?film2 .\",\n \t\t  \t\t\"?writer wdt:P178 ?film3 .\",\n \t\t  \t\t\"?director wdt:P462 ?partner .\",\n \t\t  \t\t\"?partner rdfs:label ?partnerLabel .\",\n \t\t  \t\t\"FILTER (LANG(?partnerLabel) = 'en')\",\n \t\t  \t\t\"?film1 rdfs:label ?film1Label .\",\n \t\t  \t\t\"FILTER (?film1Label = 'Jane B. par Agnès V.')\",\n \t\t  \t\t\"?film2 rdfs:label ?film2Label .\",\n \t\t  \t\t\"FILTER (?film2Label = 'The Beaches of Agnès')\",\n \t\t  \t\t\"?film3 rdfs:label ?film3Label .\",\n \t\t  \t\t\"FILTER (?film3Label = 'The World of Jacques Demy')\",\n \t\t  \t\t\"?partner wdt:P462 wd:Q190578 .\", \">// Jacques Demy's Wikidata ID is Q190578\"\n \t  \t\t,\"?director rdfs:label ?directorLabel .\",\n \t  \t\t\"FILTER (LANG(?directorLabel) = 'en')\",\n \t  \t\t\"?star rdfs:label ?starLabel .\",\n \t  \t\t\"FILTER (LANG(?starLabel) = 'en')\",\n \t  \t\t\"?writer rdfs:label ?writerLabel .\",\n \t  \t\t\"FILTER (LANG(?writerLabel) = 'en')\",\n \t  \t\t\"}\"\n \t\t  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film1 wdt:P31 wd:Q11424299 ; wdt:P161 ?star ; wdt:P57 ?director . ?film2 wdt:P31 wd:Q11424299 ; wdt:P161 ?star ; wdt:P57 ?director . ?film3 wdt:P31 wd:Q11424299 ; wdt:P161 ?star ; wdt:P57 ?director . ?writer wdt:P178 ?film1 . ?writer wdt:P178 ?film2 . ?writer wdt:P178 ?film3 . ?director wdt:P462 ?partner . ?partner rdfs:label ?partnerLabel . FILTER (LANG(?partnerLabel) = 'en') ?film1 rdfs:label ?film1Label . FILTER (?film1Label = 'Jane B. par Agnès V.') ?film2 rdfs:label ?film2Label . FILTER (?film2Label = 'The Beaches of Agnès') ?film3 rdfs:label ?film3Label . FILTER (?film3Label = 'The World of Jacques Demy') ?partner wdt:P462 wd:Q190578 . >// Jacques Demy's Wikidata ID is Q190578 ?director rdfs:label ?directorLabel . FILTER (LANG(?directorLabel) = 'en') ?star rdfs:label ?starLabel . FILTER (LANG(?starLabel) = 'en') ?writer rdfs:label ?writerLabel . FILTER (LANG(?writerLabel) = 'en') } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?producer ?distributor WHERE {\",\n   \t\t \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film/TV series\"\n   \t\t \t\t,\"?film rdfs:label ?title . FILTER(LANG(?title) = 'en') .\", \">// get the English title\"\n   \t\t \t\t,\"FILTER(CONTAINS(lcase(str(?title)), lcase(\\\"mozart in the jungle\\\"))) .\", \">// filter for \" ]\n   \t\t \t\t\t}\n   \t\t \t\t\t\t \t\t\t \t\t\t \t", "normal_query": "SELECT ?producer ?distributor WHERE { ?film wdt:P31 wd:Q11424. >// instance of film/TV series ?film rdfs:label ?title . FILTER(LANG(?title) = 'en') . >// get the English title FILTER(CONTAINS(lcase(str(?title)), lcase(\"mozart in the jungle\"))) . >// filter for LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n  \t\t\"SELECT ?resource WHERE {\",\n  \t\t\"  VALUES ( ?film1 ?film2 ) { ( wd:Q123456 wd:Q789012 ) }\", \">// Replace Q123456 and Q789012 with actual film IDs for 'Female Vampire' and 'No label defined'\",\n  \t\t\"  VALUES ( ?role1 ?role2 ?role3 ) { ( wdt:P108 wd:Q836894 wdt:P161 wd:Q157861 wdt:P57 wd:Q7191 ) }\", \">// Replace with actual role IDs for 'star', 'editor', and 'cinematographer'\",\n  \t\t\"  ?resource wdt:P108 ?film1 .\",\n  \t\t\"  ?resource wdt:P161 ?film2 .\",\n  \t\t\"  ?resource wdt:P57 ?film3 .\", \">// Add this line if you want to check for cinematography role as well, assuming 'No label defined' is the third film\",\n  \t\t\"  VALUES ( ?writer_director_film1 ?writer_director_film2 ?writer_director_film3 ) { ( wd:Q987654 wd:Q123454 wd:Q678909 ) }\", \">// Replace with actual film IDs for '99 Women', 'No label defined', and 'The Blood of Fu Manchu'\",\n  \t\t\"  ?writer_director wdt:P54 ?writer_director_film1 .\",\n  \t\t\"  ?writer_director wdt:P729 ?writer_director_film2 .\",\n  \t\t\"  ?writer_director wdt:P57 ?writer_director_film3 .\",\n  \t\t\"  ?resource wdt:P106 wd:Q28384 .\", \">// Spanish writer and director\"\n  \t\t\t,\n  \t\t\"}\"\n   ]\n} ", "normal_query": "SELECT ?resource WHERE { VALUES ( ?film1 ?film2 ) { ( wd:Q123456 wd:Q789012 ) } >// Replace Q123456 and Q789012 with actual film IDs for 'Female Vampire' and 'No label defined' VALUES ( ?role1 ?role2 ?role3 ) { ( wdt:P108 wd:Q836894 wdt:P161 wd:Q157861 wdt:P57 wd:Q7191 ) } >// Replace with actual role IDs for 'star', 'editor', and 'cinematographer' ?resource wdt:P108 ?film1 . ?resource wdt:P161 ?film2 . ?resource wdt:P57 ?film3 . >// Add this line if you want to check for cinematography role as well, assuming 'No label defined' is the third film VALUES ( ?writer_director_film1 ?writer_director_film2 ?writer_director_film3 ) { ( wd:Q987654 wd:Q123454 wd:Q678909 ) } >// Replace with actual film IDs for '99 Women', 'No label defined', and 'The Blood of Fu Manchu' ?writer_director wdt:P54 ?writer_director_film1 . ?writer_director wdt:P729 ?writer_director_film2 . ?writer_director wdt:P57 ?writer_director_film3 . ?resource wdt:P106 wd:Q28384 . >// Spanish writer and director } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource\\nWHERE {\\n?resource wdt:P31 wd:Q5 . # instance of human\\n?resource wdt:P140 wd:Q627981 . # adheres to Jediism\\n?resource wdt:P148 wd:Q161183 . # founder of Lucasfilm\\n?resource wdt:P148 wd:Q503369 . # founder of LucasArts\\n?resource wdt:P26 ?spouse .\\n?spouse rdfs:label \\\"Mellody Hobson\\\"@en.\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?film1 wdt:P345 \"]} ", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film1 wdt:P345 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t    \t\t\"SELECT ?writerCinematographer WHERE {\",\n\t \t    \t\t\"?film1 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film2 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film3 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?film4 wdt:P31 wd:Q11424189 ;\",\n\t \t    \t\t\"wdt:P57 wd:?writerCinematographer .\",\n\t \t    \t\t\"?person wdt:P463 ?writerCinematographer .\",\n\t \t    \t\t\"?person wdt:P161 wd:Q201556 .\",\n\t \t    \t\t\"?marcus wdt:P98 ?writerCinematographer ;\",\n\t \t    \t\t\"wdt:P178 wd:Q45355 .\",\n\t \t    \t\t\"?lorne wdt:P98 ?writerCinematographer ;\",\n\t \t    \t\t\"wdt:P178 wd:Q201556 .\",\n\t \t    \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t \t    \t\t\"}\"\n\t \t\t]\n}", "normal_query": "SELECT ?writerCinematographer WHERE { ?film1 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film2 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film3 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?film4 wdt:P31 wd:Q11424189 ; wdt:P57 wd:?writerCinematographer . ?person wdt:P463 ?writerCinematographer . ?person wdt:P161 wd:Q201556 . ?marcus wdt:P98 ?writerCinematographer ; wdt:P178 wd:Q45355 . ?lorne wdt:P98 ?writerCinematographer ; wdt:P178 wd:Q201556 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t        \t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n?film wdt:P31 wd:Q11424 . # instance of film\\n?film wdt:P57 wd:Q68906 . # directed by\\n?film wdt:P917 wd:Q68906 . # executive produced by\\n?film wdt:P1196 wd:Q68906 . # edited by\\n?film wdt:P59 wd:Q68906 . # written by\\nwd:Q24357 wdt:P179 ?film . # part of trilogy\\nwd:Q68906 wdt:P106 wd:Q181978 . # occupation cinematographer\\n?resource ?property ?value .\\n}\\nLIMIT 1\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?film wdt:P31 wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\" wd:Q7615492 wdt:P31 wd:Q5 .\", \"description or a unique identifier for Vagabond\"\n \t\t  \t\t,\"wd:Q7615492 wdt:P50 ?director .\", \"film director who wrote and edited Vagabond\"\n \t\t  \t\t,\"?director wdt:P26 ?spouse .\", \"the spouse of the film director\"\n \t\t  \t\t,\"?spouse wdt:P50 wd:Q183794 .\", \"Jacques Demy's works\"\n \t\t  \t\t,\"?resource wdt:P1647 wd:Q7615492 .\" ,\"\\n}\",\n \t\t  \t\t\"ORDER BY ?resource\",\n \t\t  \t\t\"LIMIT 1\"\n \t  \t\t] }\n  \t\t\t\t \t\t\t\t\t\t\t\t\t\t\t  ", "normal_query": "SELECT ?resource WHERE { wd:Q7615492 wdt:P31 wd:Q5 . description or a unique identifier for Vagabond wd:Q7615492 wdt:P50 ?director . film director who wrote and edited Vagabond ?director wdt:P26 ?spouse . the spouse of the film director ?spouse wdt:P50 wd:Q183794 . Jacques Demy's works ?resource wdt:P1647 wd:Q7615492 . } ORDER BY ?resource LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\t\t\t\t\t\t\t\t\t  \t \"query\": [\n \t  \t\t\"SELECT ?resource WHERE {\",\n \t\t  \t\t\"?acquirer1 wdt:P452 ?company ; wdt:P176 ?distributorProducer .\",\n \t\t  \t\t\"?acquirer2 wdt:P452 ?company ; wdt:P176 ?distributorProducer .\",\n \t\t  \t\t\"?distributorProducer wdt:P31 wd:Q83601 ;\",\n \t\t  \t\t\"wdt:P176 ?film ;\",\n \t\t  \t\t\"wdt:P179 ?movie .\",\n \t\t  \t\t\"?film wdt:P1446 wd:Q256625 .\",\n \t\t  \t\t\"?acquirer1 wdt:P108 wd:Q316956 .\", \">// State Street Global Advisors (instance of organization, P108 property to instance of Q316956 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer2 wdt:P108 wd:Q316957 .\", \">// BlackRock (instance of organization, P108 property to instance of Q316957 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer3 wdt:P108 wd:Q316958 .\", \">// T. Rowe Price (instance of organization, P108 property to instance of Q316958 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer4 wdt:P108 wd:Q316959 .\", \">// Capital Group Companies (instance of organization, P108 property to instance of Q316959 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer5 wdt:P108 wd:Q317002 .\", \">// State Farm Insurance (instance of organization, P108 property to instance of Q317002 - insurance company) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer6 wdt:P108 wd:Q317003 .\", \">// The Vanguard Group (instance of organization, P108 property to instance of Q317003 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available\"\n \t\t  \t\t,\n \t\t  \t\t\"?acquirer1 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer2 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer3 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer4 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer5 wdt:P452 ?company .\",\n \t\t  \t\t\"?acquirer6 wdt:P452 ?company .\",\n \t\t  \t\t\"?distributorProducer wdt:P176 ?film .\",\n \t\t  \t\t\"?film wdt:P1446 wd:Q256625 .\", \">// Grand Canyon (instance of film, P1446 property to instance of Q256625 - specific film title \"]\n \t  \t\t}\n \t  \t\t\t\t \t\t\t\t\t\t\t\t\t  ", "normal_query": "SELECT ?resource WHERE { ?acquirer1 wdt:P452 ?company ; wdt:P176 ?distributorProducer . ?acquirer2 wdt:P452 ?company ; wdt:P176 ?distributorProducer . ?distributorProducer wdt:P31 wd:Q83601 ; wdt:P176 ?film ; wdt:P179 ?movie . ?film wdt:P1446 wd:Q256625 . ?acquirer1 wdt:P108 wd:Q316956 . >// State Street Global Advisors (instance of organization, P108 property to instance of Q316956 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available ?acquirer2 wdt:P108 wd:Q316957 . >// BlackRock (instance of organization, P108 property to instance of Q316957 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available ?acquirer3 wdt:P108 wd:Q316958 . >// T. Rowe Price (instance of organization, P108 property to instance of Q316958 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available ?acquirer4 wdt:P108 wd:Q316959 . >// Capital Group Companies (instance of organization, P108 property to instance of Q316959 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available ?acquirer5 wdt:P108 wd:Q317002 . >// State Farm Insurance (instance of organization, P108 property to instance of Q317002 - insurance company) OR use more direct identifier if available ?acquirer6 wdt:P108 wd:Q317003 . >// The Vanguard Group (instance of organization, P108 property to instance of Q317003 - financial institution with headquarters in the United States and a specific industry focus on asset management or investment services) OR use more direct identifier if available ?acquirer1 wdt:P452 ?company . ?acquirer2 wdt:P452 ?company . ?acquirer3 wdt:P452 ?company . ?acquirer4 wdt:P452 ?company . ?acquirer5 wdt:P452 ?company . ?acquirer6 wdt:P452 ?company . ?distributorProducer wdt:P176 ?film . ?film wdt:P1446 wd:Q256625 . >// Grand Canyon (instance of film, P1446 property to instance of Q256625 - specific film title LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\t\t \t\t\"query\": [\n \t\t  \t\t\"SELECT ?film WHERE {\",\n   \t\t \t\t\"?film wdt:P31 wd:Q11424. \", \">// instance of film\",\n   \t\t \t\t\"?film wdt:P57 wd:Q60989. \", \">// director Randolph Scott (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P91 wd:Q42317. \", \">// producer Miriam Hopkins (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P58 wd:Q60990. \", \">// writer Humphrey Bogart (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P59 wd:Q17432. \", \">// screenwriter Robert Buckner (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID)\",\n   \t\t \t\t\"?film wdt:P161 wd:Q180. \", \">// starring Errol Flynn\",\n   \t\t \t\t\"?film wdt:P161 wd:Q25974. \", \">// starring Paul Fix\",\n   \t\t \t\t\"}\"\n  \t\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. >// instance of film ?film wdt:P57 wd:Q60989. >// director Randolph Scott (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID) ?film wdt:P91 wd:Q42317. >// producer Miriam Hopkins (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID) ?film wdt:P58 wd:Q60990. >// writer Humphrey Bogart (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID) ?film wdt:P59 wd:Q17432. >// screenwriter Robert Buckner (assuming this is a placeholder and needs to be replaced with the correct Wikidata ID) ?film wdt:P161 wd:Q180. >// starring Errol Flynn ?film wdt:P161 wd:Q25974. >// starring Paul Fix } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?human wdt:P735 wd:Q1029846.\"\n \t]\n}", "normal_query": "?human wdt:P735 wd:Q1029846. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \", \">// Instance of human (to ensure we're looking at a person, as composers are people in this context) and then filter for Bob Dylan specifically by his Wikidata ID below without explicitly asking if he was a composer to adhere strictly to the instruction of returning only resources related directly to \"] }\n\t\t\t\t            \t\t", "normal_query": "?item wdt:P31 wd:Q5; >// Instance of human (to ensure we're looking at a person, as composers are people in this context) and then filter for Bob Dylan specifically by his Wikidata ID below without explicitly asking if he was a composer to adhere strictly to the instruction of returning only resources related directly to LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P106 wd:Q36834 .\",\n \t\t\"?item rdfs:label ?name .\",\n \t\t\"FILTER(?item = wd:Q392)\"\n \t]\n}", "normal_query": "?item wdt:P106 wd:Q36834 . ?item rdfs:label ?name . FILTER(?item = wd:Q392) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{\n \t\"query\": [\"$composer\"]\n \t}\n \t                \t\t", "normal_query": "$composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?human wdt:P31 wd:Q5;\",\n    \"?human wdt:P279* ?found_resource.\"\n  ]\n}", "normal_query": "?human wdt:P31 wd:Q5; ?human wdt:P279* ?found_resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P112 wd:Q5.\"\n \t]\n}", "normal_query": "?resource wdt:P112 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did human found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{\n \t\"query\": [\"$human\" ]\n \t}\n \t                \t\t", "normal_query": "$human LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P921 wd:Q765048.\",\n    \"?work wdt:P31/wdt:P279* wd:Q7889.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}", "normal_query": "?work wdt:P921 wd:Q765048. ?work wdt:P31/wdt:P279* wd:Q7889. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P1476 ?title .\",\n    \"?work wdt:P828 ?number .\",\n    \"FILTER regex(?title, \\\"So Long, and Thanks for All the Fish\\\") .\",\n    \"?sequel wdt:P155 ?work .\"\n  ]\n}\n    ", "normal_query": "?work wdt:P1476 ?title . ?work wdt:P828 ?number . FILTER regex(?title, \"So Long, and Thanks for All the Fish\") . ?sequel wdt:P155 ?work . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P1476 ?title .\",\n    \"?sequel wdt:P155 ?resource .\",\n    \"FILTER (LCASE(?title) = \\\"π\\\")\"\n  ]\n}", "normal_query": "?resource wdt:P1476 ?title . ?sequel wdt:P155 ?resource . FILTER (LCASE(?title) = \"π\") LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?parent wdt:P4 wd:Q302856.\"\n  ]\n}", "normal_query": "?parent wdt:P4 wd:Q302856. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P50 wd:Q8674 .\"\n \t]\n}", "normal_query": "?resource wdt:P50 wd:Q8674 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P58 wd:Q42 .\"\n \t]\n}", "normal_query": "?work wdt:P58 wd:Q42 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:7016 ?author .\"\n \t]\n}", "normal_query": "?resource wd:Q42 ?author . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P735 wd:Q102984652; # Given name Max\\n    wdt:P736 wd:Q102984653; # Surname Margules\\n    wdt:P108 ?employer.\\n  ?employer wdt:P17 wd:Q40. # Country Austria\"\n  ]\n}", "normal_query": "?person wdt:P735 wd:Q102984652; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q7685.\",\n    \"?work wdt:P50 ?author.\",\n    \"?author rdfs:label \\\"J. R. R. Tolkien\\\"@en.\"\n  ]\n}", "normal_query": "?work wdt:P800 wd:Q7685. ?work wdt:P50 ?author. ?author rdfs:label \"J. R. R. Tolkien\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424; \",\n    \"wdt:P161 ?actor;\",\n    \"schema:name \\\"A Good Day to Die Hard\\\"@en.\",\n    \"?actor wdt:P1579 ?role.\",\n    \"?role rdfs:label \\\"Bruce Willis\\\"@en.\"\n  ]\n}", "normal_query": "?movie wdt:P31 wd:Q11424; wdt:P161 ?actor; schema:name \"A Good Day to Die Hard\"@en. ?actor wdt:P1579 ?role. ?role rdfs:label \"Bruce Willis\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5 .\",\n    \"?resource wdt:P800 ?costume_designer .\",\n    \"?work wdt:P921 ?costume_designer .\",\n    \"?work rdfs:label 'White Diamond: A Personal Portrait of Kylie Minogue'@en .\"\n  ]\n}", "normal_query": "?resource wdt:P31 wd:Q5 . ?resource wdt:P800 ?costume_designer . ?work wdt:P921 ?costume_designer . ?work rdfs:label 'White Diamond: A Personal Portrait of Kylie Minogue'@en . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?olympia_cinematographer wdt:P31 wd:Q5; # Get human cinematographers of Olympia (assuming Olympia is a film or event with QID 'wd:Qxxxxx' which should be replaced accordingly) \\n\",\n \t\t\"wdt:P372 ?cinematography_work;\", \"># Assuming P372 connects person to their work, adjust property as necessary\\n\",\n \t\t\"?olympia_cinematographer wdt:P106 wd:Q154892.\" ,\"\\n\" ,\"# P154892 is the occupation of screenwriter. Adjust QID if needed.\"\n \t]\n}", "normal_query": "?olympia_cinematographer wdt:P31 wd:Q5; wdt:P372 ?cinematography_work; > ?olympia_cinematographer wdt:P106 wd:Q154892. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?erich_honecker wdt:P26 ?spouse .\",\n    \"?spouse wdt:P108 wd:Q497534\"\n  ]\n}", "normal_query": "?erich_honecker wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q497534 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q7208 .\",\n \t\t\"?item wdt:P577 ?date .\",\n \t\t\"FILTER(YEAR(?date) = 1999)\"\n \t]\n}", "normal_query": "?item wdt:P31 wd:Q7208 . ?item wdt:P577 ?date . FILTER(YEAR(?date) = 1999) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 ?work .\",\n \t\t\"?work rdfs:label \\\"Al Compás de tu Mentira\\\"@es .\",\n \t\t\"?composer wdt:P31 wd:Q5 .\",\n \t\t\"?composer wdt:P276 ?screenwritingActivity .\",\n \t\t\"?screenwritingActivity wdt:P279* wd:Q140852 .\"\n \t]\n}", "normal_query": "?composer wdt:P86 ?work . ?work rdfs:label \"Al Compás de tu Mentira\"@es . ?composer wdt:P31 wd:Q5 . ?composer wdt:P276 ?screenwritingActivity . ?screenwritingActivity wdt:P279* wd:Q140852 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q71024539; wdt:P31 wd:Q5.\",\n \t\t\"?cinematographer wdt:P31 wd:Q100880.\"\n \t]\n}", "normal_query": "?composer wdt:P86 wd:Q71024539; wdt:P31 wd:Q5. ?cinematographer wdt:P31 wd:Q100880. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?game wdt:P800 wd:Q25364;\", \">// Q25364 is Microsoft, P800 is distributor/developer of the game/software\\n\",\n    \"?game wdt:P179 ?sequelOfGame.\", \">// P179 indicates the sequel relationship\\n\",\n    \"?sequelOfGame rdfs:label \\\"Microsoft Flight Simulator 2004: A Century of Flight\\\"@en\" ,\n    \"FILTER (LANG(?sequelOfGame) = 'en')\",\n    \"{\",\n    \"  SELECT ?game WHERE {\",\n    \"    ?game wdt:P31 wd:Q7586; // Q7586 is video game\\n\",\n    \"    FILTER NOT EXISTS {?game wdt:P179 [] .} // Exclude games that are not sequels of another game\\n\",\n    \"} LIMIT 1\"\n    ,\n    \"?game\"\n  ]\n}\n  ", "normal_query": "?game wdt:P800 wd:Q25364; >// Q25364 is Microsoft, P800 is distributor/developer of the game/software ?game wdt:P179 ?sequelOfGame. >// P179 indicates the sequel relationship ?sequelOfGame rdfs:label \"Microsoft Flight Simulator 2004: A Century of Flight\"@en FILTER (LANG(?sequelOfGame) = 'en') { SELECT ?game WHERE { ?game wdt:P31 wd:Q7586; // Q7586 is video game FILTER NOT EXISTS {?game wdt:P179 [] .} // Exclude games that are not sequels of another game } LIMIT 1 ?game", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?sequel wdt:P161 wd:Q479025 . \" ,\n \t \"?sequel wdt:P863 wd:Q143556 . \"\n \t]\n}", "normal_query": "?sequel wdt:P161 wd:Q479025 . ?sequel wdt:P863 wd:Q143556 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?higherGroundFounder wdt:P31 wd:Q4830453; # Instance of organization (Higher Ground Productions) \\n\",\n \t\t\"wdt:P112 ?founderParent. # Has the parent\\n\",\n \t\t\"?maliaObamasParents wdt:P4母亲 wd:Q7609; # Malia Obama's mother is Michelle Obama\\n\",\n \t\t\"wdt:P3 wd:Q7589. # Malia Obama's father is Barack Obama\\n\",\n \t\t\"?founderParent wdt:P27 ?usCitizenship. # The founder parent holds US citizenship\\n\",\n \t\t\"?higherGroundFounder wdt:P141 wd:Q1621; # Legal form of Higher Ground Productions (LLC)\\n\",\n \t\t\"wdt:P856 ?website. # Website of the organization\\n\",\n \t\t\"?founderParent wdt:P735 wd:Q7589. # Given name of the founder parent is Barack Obama\\n\"\n \t]\n}", "normal_query": "?higherGroundFounder wdt:P31 wd:Q4830453; wdt:P112 ?founderParent. ?maliaObamasParents wdt:P4母亲 wd:Q7609; wdt:P3 wd:Q7589. ?founderParent wdt:P27 ?usCitizenship. ?higherGroundFounder wdt:P141 wd:Q1621; wdt:P856 ?website. ?founderParent wdt:P735 wd:Q7589. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?adolfHitlerSibling wdt:P413 ?uniqaInsuranceGroup .\",\n \t\t\"?adolfHitlerSibling wdt:P3373 wd:Q25807 .\"\n \t]\n}", "normal_query": "?adolfHitlerSibling wdt:P413 ?uniqaInsuranceGroup . ?adolfHitlerSibling wdt:P3373 wd:Q25807 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?drDreEmployer wdt:P108 ?employer.\",\n    \"?distributor wdt:P31 wd:Q4115189;\",\n                 \"wdt:P161 ?drDre;\",\n                 \"wdt:P176 ?distributor.\"\n  ]\n}\n    ", "normal_query": "?drDreEmployer wdt:P108 ?employer. ?distributor wdt:P31 wd:Q4115189; wdt:P161 ?drDre; wdt:P176 ?distributor. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?malia_obama wdt:P4_P31 wd:Q5; # Malia Obama is an instance of human\\n\",\n    \"wdt:P22 ?barack_obama; # Barack Obama is the father/mother of Malia Obama\\n\",\n    \"?barack_oboma wdt:P740 ?ben_labolt. # Ben LaBolt worked for Barack Obama\\n\",\n    \"?employer wdt:P14_P39 ?ben_labolt. # The employer has a position held by Ben LaBolt\\n\"\n  ]\n}\n    ", "normal_query": "?malia_obama wdt:P4_P31 wd:Q5; wdt:P22 ?barack_obama; ?barack_oboma wdt:P740 ?ben_labolt. ?employer wdt:P14_P39 ?ben_labolt. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P21 wd:Q6581072; \", \">// Assuming P21 is for gender and Q6581072 represents female, as costume designers can be of any gender but we need to specify one for the sake of example. This part might not directly apply unless we have a specific entity in mind or more context about the costume designer's identity beyond their role and spouse's sibling relation to Pierre Van Dormael (Q51892073). A more direct approach would be needed based on actual relations available in Wikidata for this scenario. However, for demonstration purposes, we'll focus on linking through relationships directly related to the question at hand without making assumptions about gender or specific identity of the costume designer beyond their role and relation to Pierre Van Dormael's sibling.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\", \">// P26 represents spouse relationship in Wikidata. This line links the costume designer with their spouse entity (?spouse variable).\",\n \t\t\"?spouse wdt:P3373 ?siblingOfPierreVanDormael.\", \">// Assuming P3373 is a sibling relation, which might not be accurate as of my last update (the correct property should be used based on the latest Wikidata schema for sibling relationships). This line links the spouse to Pierre Van Dormael's sibling (?siblingOfPierreVanDormael variable).\",\n \t\t\"?siblingOfPierreVanDormael wdt:P735 wd:Q51892073.\" ,\">// P735 represents child of relationship in Wikidata. This line links the sibling to Pierre Van Dormael (Q51892073). The property might need adjustment based on the actual relation between siblings and parents in the latest schema.\"\n \t\t,\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P21 wd:Q6581072; >// Assuming P21 is for gender and Q6581072 represents female, as costume designers can be of any gender but we need to specify one for the sake of example. This part might not directly apply unless we have a specific entity in mind or more context about the costume designer's identity beyond their role and spouse's sibling relation to Pierre Van Dormael (Q51892073). A more direct approach would be needed based on actual relations available in Wikidata for this scenario. However, for demonstration purposes, we'll focus on linking through relationships directly related to the question at hand without making assumptions about gender or specific identity of the costume designer beyond their role and relation to Pierre Van Dormael's sibling. ?costumeDesigner wdt:P26 ?spouse. >// P26 represents spouse relationship in Wikidata. This line links the costume designer with their spouse entity (?spouse variable). ?spouse wdt:P3373 ?siblingOfPierreVanDormael. >// Assuming P3373 is a sibling relation, which might not be accurate as of my last update (the correct property should be used based on the latest Wikidata schema for sibling relationships). This line links the spouse to Pierre Van Dormael's sibling (?siblingOfPierreVanDormael variable). ?siblingOfPierreVanDormael wdt:P735 wd:Q51892073. >// P735 represents child of relationship in Wikidata. This line links the sibling to Pierre Van Dormael (Q51892073). The property might need adjustment based on the actual relation between siblings and parents in the latest schema. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P31 wd:Q479658.\",\n \t\t\"?clubJennaFounder wdt:P31 wd:Q5.\",\n \t\t\"?costumeDesigner wdt:P26 ?clubJennaFounder.\",\n \t\t\"?clubJennaFounder wdt:P800 ?clubJenna.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?costumeDesigner wdt:P31 wd:Q479658. ?clubJennaFounder wdt:P31 wd:Q5. ?costumeDesigner wdt:P26 ?clubJennaFounder. ?clubJennaFounder wdt:P800 ?clubJenna. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P50 wd:Q14982 . # George Harrison is the author/writer of ?resource\\n\",\n \t \"?resource wdt:P57 wd:Q14982 .\" ,\"# George Harrison directed ?resource\"\n \t]\n}", "normal_query": "?resource wdt:P50 wd:Q14982 . ?resource wdt:P57 wd:Q14982 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q16934278 .\",\n \t\t\"?item wdt:P31/wdt:P279* wd:Q571.\",\n \t\t\"?item wdt:P31/wdt:P279* wd:Q1143514.\"\n \t]\n}", "normal_query": "?item wdt:P50 wd:Q16934278 . ?item wdt:P31/wdt:P279* wd:Q571. ?item wdt:P31/wdt:P279* wd:Q1143514. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P725 ?costume_designer; \",\n \t\t\"wdt:P22|wdt:P25 wd:Q168940. \"\n \t]\n}\n   \t \t  \t \t  \t \t  \t ", "normal_query": "?person wdt:P31 wd:Q5; wdt:P725 ?costume_designer; wdt:P22|wdt:P25 wd:Q168940. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?takenori wdt:P26 ?spouse .\",\n    \"?spouse wdt:P21 wd:Q6581072 ;\", \">// Assuming Q6581072 is for female, adjust if necessary based on Takenori Sentō's gender to correctly identify spouse gender in Wikidata context. For a more general query without assuming the gender of Takenori Sentō or their spouse, this line can be omitted or adjusted accordingly. \",\n    \"?spouse wdt:P31 wd:Q5 ;\", \">// Human check, adjust if necessary based on context or remove for broader results\",\n    \"?spouse wdt:P27 wd:Q17 ;\", \">// Japanese nationality check\",\n    \"?spouse wdt:P106 wd:Q148953\" , \">// Cinematographer occupation check\"\n  ]\n}", "normal_query": "?takenori wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 ; >// Assuming Q6581072 is for female, adjust if necessary based on Takenori Sentō's gender to correctly identify spouse gender in Wikidata context. For a more general query without assuming the gender of Takenori Sentō or their spouse, this line can be omitted or adjusted accordingly. ?spouse wdt:P31 wd:Q5 ; >// Human check, adjust if necessary based on context or remove for broader results ?spouse wdt:P27 wd:Q17 ; >// Japanese nationality check ?spouse wdt:P106 wd:Q148953 >// Cinematographer occupation check LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector wdt:P31 wd:Q20957846.\",\n \t\t\"?employer wdt:P108 ?filmDirector.\",\n \t\t\"?employer wdt:P17 wd:Q16.\",\n \t\t\"?employer wdt:P31/wdt:P279* ?resource.\"\n \t]\n}", "normal_query": "?filmDirector wdt:P31 wd:Q20957846. ?employer wdt:P108 ?filmDirector. ?employer wdt:P17 wd:Q16. ?employer wdt:P31/wdt:P279* ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{\n \t\"query\": [\n \t\t\"?employer wdt:P112 wd:Q16 .\",\n \t\t\"?filmDirector wdt:P108 ?employer .\",\n \t\t\"?filmDirector wdt:P106 wd:Q2526255\"\n \t]\n}", "normal_query": "?employer wdt:P112 wd:Q16 . ?filmDirector wdt:P108 ?employer . ?filmDirector wdt:P106 wd:Q2526255 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n \t\"query\": [\n \t\t\"?employer kg:8057 kg:3288 .\",\n \t\t\"?filmDirector kg:5147 kg:5381 .\",\n \t\t\"?filmDirector kg:7565 ?employer\"\n \t]\n}", "normal_query": "?employer wdt:P112 wd:Q16 . ?filmDirector wdt:P106 wd:Q2526255 . ?filmDirector wdt:P108 ?employer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource ?writtenBy ?madonna.\",\n \t \"?resource ?producedBy ?madonna.\",\n \t \"?madonna ?label \" ,\"Madonna\" ,\"@\" ,\"en\" ,\n \t \"{?resource ?instanceOf ?musicalWork.} UNION {?resource ?subclassOf ?musicalWork.}\",\n \t \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n \t]\n}\n   \t", "normal_query": "?resource ?writtenBy ?madonna. ?resource ?producedBy ?madonna. ?madonna ?label Madonna @ en {?resource ?instanceOf ?musicalWork.} UNION {?resource ?subclassOf ?musicalWork.} SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q1744 .\",\n \t\t\"?resource wdt:P162 wd:Q1744 .\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q1744 . ?resource wdt:P162 wd:Q1744 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4045 is producer\nkg:8920 is production company\nkg:5664 is Madonna\nkg:1984 is screenwriter\nkg:5664 is Madonna", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1984 kg:5664 .\",\n \t\t\"?resource kg:4045 kg:5664 .\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q1744 . ?resource wdt:P162 wd:Q1744 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P108 ?employer . \",\n \t\t\"?movie wdt:P54 P7293 . \", \">// Note: This part is illustrative and may not directly translate as Wikidata does not have a direct property for linking movies to their producers in this specific format. A more accurate query would require knowing the exact QID of the producer or additional information about how the data is structured on Wikidata for this movie specifically. However, for demonstration purposes, we're showing an illustrative structure. For \" ,\n \t\t\"?movie wdt:P162 ?employer . \", \">// linking a movie to its producers. This line assumes that there's a direct link from the movie to its producer which employs costume designers. In reality, this relationship might be more complex and require additional qualifiers or statements. \"\n \t\t,\n \t\t\"FILTER(?movie = wd:Q475260) .\" ,\n \t\t\"?employer ?p ?o .\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P108 ?employer . ?movie wdt:P54 P7293 . >// Note: This part is illustrative and may not directly translate as Wikidata does not have a direct property for linking movies to their producers in this specific format. A more accurate query would require knowing the exact QID of the producer or additional information about how the data is structured on Wikidata for this movie specifically. However, for demonstration purposes, we're showing an illustrative structure. For ?movie wdt:P162 ?employer . >// linking a movie to its producers. This line assumes that there's a direct link from the movie to its producer which employs costume designers. In reality, this relationship might be more complex and require additional qualifiers or statements. FILTER(?movie = wd:Q475260) . ?employer ?p ?o . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P40 ?sibling.\",\n \t\t\"?sibling wdt:P26 ?spouse.\",\n \t\t\"?spouse rdfs:label \\\"Nadia Cassini\\\"@en.\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P40 ?sibling. ?sibling wdt:P26 ?spouse. ?spouse rdfs:label \"Nadia Cassini\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P720 wd:Q1954836.\",\n    \"?company wdt:P108 ?person.\",\n    \"?parentCompany wdt:P749 ?company.\"\n  ]\n}", "normal_query": "?person wdt:P720 wd:Q1954836. ?company wdt:P108 ?person. ?parentCompany wdt:P749 ?company. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P735 wd:Q52489061; % Claire Doutriaux\\n\",\n \t\t\"wdt:P1001 ?employer. % employer of Claire Doutriaux\\n\",\n \t\t\"?employer wdt:P31 wd:Q3305213. % filter for film distributor\\n\"\n \t]\n}", "normal_query": "?person wdt:P735 wd:Q52489061; % Claire Doutriaux wdt:P1001 ?employer. % employer of Claire Doutriaux ?employer wdt:P31 wd:Q3305213. % filter for film distributor LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?magic_flute wdt:P31 wd:Q5047829.\",\n    \"?magic_flute p:P1411 ?producer_distributor_statement.\",\n    \"?producer_distributor_statement ps:P1411 ?producer_distributor.\",\n    \"?producer_distributor wdt:P17 wd:Q34.\"\n  ]\n}", "normal_query": "?magic_flute wdt:P31 wd:Q5047829. ?magic_flute p:P1411 ?producer_distributor_statement. ?producer_distributor_statement ps:P1411 ?producer_distributor. ?producer_distributor wdt:P17 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?mark_sylwan wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P106 wd:Q43958, wdt:P27 wd:Q34.\"\n \t]\n}", "normal_query": "?mark_sylwan wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q43958, wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?antiochusIV wdt:P31 wd:Q5; \",\n \t\t\"wdt:P1402 ?position; \",\n \t\t\"(wdt:P22|wdt:P25) ?spouseSibling. \",\n \t\t\"?spouseSibling wdt:P31 wd:Q5; \",\n \t\t\"(wdt:P22|wdt:P25) ?antiochus. \"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?antiochusIV wdt:P31 wd:Q5; wdt:P1402 ?position; (wdt:P22|wdt:P25) ?spouseSibling. ?spouseSibling wdt:P31 wd:Q5; (wdt:P22|wdt:P25) ?antiochus. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?sweden wdt:P31 wd:Q35274; \",\n    \"wdt:P1110 ?theMagicFlute;\",\n    \"?theMagicFlute wdt:P1968 ?distributorProducer.\",\n    \"{?distributorProducer wdt:P31/wdt:P279* wd:Q474205.} UNION\",\n    \"{?distributorProducer wdt:P31/wdt:P279* wd:Q11247568.}\"\n  ]\n}\n    ", "normal_query": "?sweden wdt:P31 wd:Q35274; wdt:P1110 ?theMagicFlute; ?theMagicFlute wdt:P1968 ?distributorProducer. {?distributorProducer wdt:P31/wdt:P279* wd:Q474205.} UNION {?distributorProducer wdt:P31/wdt:P279* wd:Q11247568.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?wwfFounder wdt:P31 wd:Q4830396; # Instance of founder of WWF (World Wide Fund for Nature) \\n\",\n \t\t\"wdt:P27 wd:Q55. # Nationality is Netherlands\\n\",\n \t\t\"?princeAschwin wdt:P40 ?wwfFounder. # ?wwfFounder is a sibling of Prince Aschwin of Lippe-Biesterfeld\\n\"\n \t]\n}", "normal_query": "?wwfFounder wdt:P31 wd:Q4830396; wdt:P27 wd:Q55. ?princeAschwin wdt:P40 ?wwfFounder. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?hoenessSibling wdt:P413 wd:Q29058 .\",\n \t\t\"?hoenessSibling wdt:P31 wd:Q5 ;\",\n \t\t\"wdt:P7 wdt:P463* wd:Q154229 ;\",\n \t\t\"wdt:P7 wdt:P27 wd:Q183\"\n \t]\n}", "normal_query": "?hoenessSibling wdt:P413 wd:Q29058 . ?hoenessSibling wdt:P31 wd:Q5 ; wdt:P7 wdt:P463* wd:Q154229 ; wdt:P7 wdt:P27 wd:Q183 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?distributor wdt:P31 wd:Q28640759;\",\n    \"wdt:P135 ?producer.\",\n    \"?producer wdt:P156 wd:Q42.\"\n  ]\n}", "normal_query": "?distributor wdt:P31 wd:Q28640759; wdt:P135 ?producer. ?producer wdt:P156 wd:Q42. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q1249867 .\",\n \t\t\"?item wdt:P135 wd:Q105897555 .\"\n \t]\n}\n    ", "normal_query": "?item wdt:P50 wd:Q1249867 . ?item wdt:P135 wd:Q105897555 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?company wdt:P1416 ?founder . \"\n \t\t,\"?founder wdt:P27 wd:Q142 .\" ,\"FILTER (?founder != wd:Q508395)\"\n \t ]\n }", "normal_query": "?company wdt:P1416 ?founder . ?founder wdt:P27 wd:Q142 . FILTER (?founder != wd:Q508395) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?workTitle wd:Q207913.\",\n    \"?work wdt:P86 ?producer.\",\n    \"?producer rdfs:label \\\"Stan Winston\\\"@en.\",\n    \"?song wdt:P50 wd:Q405.\",\n    \"?song wdt:P86 ?writer.\",\n    \"?writer rdfs:label \\\"Michael Jackson\\\"@en.\"\n  ]\n}", "normal_query": "?work ?workTitle wd:Q207913. ?work wdt:P86 ?producer. ?producer rdfs:label \"Stan Winston\"@en. ?song wdt:P50 wd:Q405. ?song wdt:P86 ?writer. ?writer rdfs:label \"Michael Jackson\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P179 wd:Q20643985; # executive producer is Steven Spielberg (Q20643985) in property P179 (executive producer of the work)\\n\",\n \t \"wdt:P58 wd:Q40705. # written by Chris Columbus (Q40705) in property P58 (author of the work)\"\n \t]\n}", "normal_query": "?resource wdt:P179 wd:Q20643985; wdt:P58 wd:Q40705. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?distributor wdt:P31 wd:Q28640759; # distributor is an instance of record label or music company (broadly interpreted for this context, as there's no specific type for distributors in Wikidata that would directly apply to operas without also including producers and other entities) \\n\",\n \t\t\"wdt:P178 ?producer. # the producer is the founder/creator\\n\",\n \t\t\"?producer wdt:P242 wd:Q34 . # the producer has a country of origin which is Sweden\\n\"\n \t]\n}", "normal_query": "?distributor wdt:P31 wd:Q28640759; wdt:P178 ?producer. ?producer wdt:P242 wd:Q34 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?henutmire wdt:P22 ?parent ;\",\n    \"wdt:P26 ?spouse ;\",\n    \"wdt:P3375 ?sibling .\",\n    \"{?parent wdt:P189 wd:Q56409675.} UNION\",\n    \"{?spouse wdt:P189 wd:Q56409675.} UNION\",\n    \"{?sibling wdt:P189 wd:Q56409675.}\"\n  ]\n}\n    ", "normal_query": "?henutmire wdt:P22 ?parent ; wdt:P26 ?spouse ; wdt:P3375 ?sibling . {?parent wdt:P189 wd:Q56409675.} UNION {?spouse wdt:P189 wd:Q56409675.} UNION {?sibling wdt:P189 wd:Q56409675.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Human (instance of human Q5) \\n\",\n \t\t\"?person wdt:P27 wd:Q16; \", \">// Canadian nationality (country of citizenship Q16 - Canada)\\n\",\n \t\t\"?person wdt:P40 wd:Q3985885; \", \">// Spouse is Jessica Drake (spouse/martial partner P40 - Jessica Drake Q3985885)\\n\",\n \t\t\"?person wdt:P106 wd:Q27823. \" , \">// Occupation as costume designer (occupation P106 - costume designer Q27823)\\n\"\n \t]\n}", "normal_query": "?person wdt:P31 wd:Q5; >// Human (instance of human Q5) ?person wdt:P27 wd:Q16; >// Canadian nationality (country of citizenship Q16 - Canada) ?person wdt:P40 wd:Q3985885; >// Spouse is Jessica Drake (spouse/martial partner P40 - Jessica Drake Q3985885) ?person wdt:P106 wd:Q27823. >// Occupation as costume designer (occupation P106 - costume designer Q27823) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?sequel wdt:P31 wd:Q11424; # instance of film\\n\",\n \t \"wdt:P800 ?productionCompany; # production company\\n\",\n \t \"wdt:P155 wd:Q767955. # sequel or prequel to Between Love and Hatred (Q767955)\\n\",\n \t \"?productionCompany rdfs:label \\\"Televisa\\\"@en.\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?sequel wdt:P31 wd:Q11424; wdt:P800 ?productionCompany; wdt:P155 wd:Q767955. ?productionCompany rdfs:label \"Televisa\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?verizon wdt:P1265 ?acquisition.\",\n \t\t\"?acquisition wdt:P31 wd:Q4830397.\",\n \t\t\"?acquisition wdt:P279* wd:Q4830397.\"\n \t]\n}", "normal_query": "?verizon wdt:P1265 ?acquisition. ?acquisition wdt:P31 wd:Q4830397. ?acquisition wdt:P279* wd:Q4830397. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?producer_or_distributor wdt:P31 wd:Q2540869 ;\",\n    \"wdt:P137 wd:Q7677 ;\", \">// Barbary Coast (film) Q7677 is produced by ?producer_or_distributor. This part might need adjustment based on exact relation between film and producer/distributor in Wikidata, but for simplicity, it's assumed to be a direct production link here as an example since the specific property isn't provided or commonly used directly this way in Wikidata for films and their producers/distributors without more context about the relationship type needed (e.g., P129 is for producer of work, but not specifically for film producers or distributors in a general sense that would link to Barbary Coast's production company directly by default without further exploration into specific instances or properties used for this historical context).\",\n    \"wdt:P57 wd:Q46803 ;\", \">// Mary Pickford (Q46803) is involved with ?producer_or_distributor somehow. Again, the property might need adjustment based on exact relation in Wikidata between a person and founding/being part of an organization.\",\n    \"wdt:P57 wd:Q12895 .\", \">// Charlie Chaplin (Q12895) is involved with ?producer_or_distributor somehow. Same note as above applies here too regarding the property used for this relation in Wikidata.\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?producer_or_distributor wdt:P31 wd:Q2540869 ; wdt:P137 wd:Q7677 ; >// Barbary Coast (film) Q7677 is produced by ?producer_or_distributor. This part might need adjustment based on exact relation between film and producer/distributor in Wikidata, but for simplicity, it's assumed to be a direct production link here as an example since the specific property isn't provided or commonly used directly this way in Wikidata for films and their producers/distributors without more context about the relationship type needed (e.g., P129 is for producer of work, but not specifically for film producers or distributors in a general sense that would link to Barbary Coast's production company directly by default without further exploration into specific instances or properties used for this historical context). wdt:P57 wd:Q46803 ; >// Mary Pickford (Q46803) is involved with ?producer_or_distributor somehow. Again, the property might need adjustment based on exact relation in Wikidata between a person and founding/being part of an organization. wdt:P57 wd:Q12895 . >// Charlie Chaplin (Q12895) is involved with ?producer_or_distributor somehow. Same note as above applies here too regarding the property used for this relation in Wikidata. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?pearl_jam wdt:P145 ?influence_actor.\",\n \t\t\"?astrid_young wdt:P3373 ?sibling.\",\n \t\t\"?sibling rdfs:label ?actor_name.\",\n \t\t\"?influence_actor wdt:P1302 ?astrid_young.\"\n \t]\n}", "normal_query": "?pearl_jam wdt:P145 ?influence_actor. ?astrid_young wdt:P3373 ?sibling. ?sibling rdfs:label ?actor_name. ?influence_actor wdt:P1302 ?astrid_young. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q104982763; # Jens Jørgen Thorsen as author/editor\",\n \t\t\"?item wdt:P50 wd:Q104982764; # Ole John as author/editor\",\n \t\t\"?item wdt:P50 wd:Q104982765.  # Jørgen Leth as author/editor\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?item wdt:P50 wd:Q104982763; ?item wdt:P50 wd:Q104982764; ?item wdt:P50 wd:Q104982765. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?miguel_albaladejo wdt:P1549 ?film.\",\n \t\t\"?costume_designer wdt:P31 wd:Q20763865;\",\n \t\t\"\\twdt:P106/wdt:P279* wd:Q158758;\",\n \t\t\"\\twdt:P1476 ?film;\",\n \t\t\"\\twdt:P414|wdt:P106 ?spanish_nationality.\",\n \t\t\"?spanish_nationality wdt:P31 wd:Q2980805.\"\n \t]\n}\n    ", "normal_query": "?miguel_albaladejo wdt:P1549 ?film. ?costume_designer wdt:P31 wd:Q20763865; wdt:P106/wdt:P279* wd:Q158758; wdt:P1476 ?film; wdt:P414|wdt:P106 ?spanish_nationality. ?spanish_nationality wdt:P31 wd:Q2980805. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \", \">// Instance of human (for person filter, though not strictly necessary for this specific query but good practice to ensure we're querying persons specifically if needed in broader context scenarios) \\n\",\n \t\t\"?person wdt:P21 wd:Q6581072; \", \">// Female gender\\n\",\n \t\t\"?person wdt:P39 wd:Q42334; \", \">// Composer occupation\\n\",\n \t\t\"?person wdt:P26 wd:Q42334. \" , \">// Spouse of Olof Palme (correcting the name to match the question's intent about Mattias Järvinen Palme, assuming it refers to a relation with Olof Palme as he is more widely known and has Wikidata entry Q42334)\\n\",\n \t\t\"?person wdt:P27 wd:Q34. \" , \">// Swedish nationality\\n\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}", "normal_query": "?person wdt:P31 wd:Q5; >// Instance of human (for person filter, though not strictly necessary for this specific query but good practice to ensure we're querying persons specifically if needed in broader context scenarios) ?person wdt:P21 wd:Q6581072; >// Female gender ?person wdt:P39 wd:Q42334; >// Composer occupation ?person wdt:P26 wd:Q42334. >// Spouse of Olof Palme (correcting the name to match the question's intent about Mattias Järvinen Palme, assuming it refers to a relation with Olof Palme as he is more widely known and has Wikidata entry Q42334) ?person wdt:P27 wd:Q34. >// Swedish nationality SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P1476 ?title .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"FILTER(?title = \\\"Stop for Bud\\\"@en) .\",\n    \"?film wdt:P50|wdt:P95|wdt:P161 ?person .\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Jens Jørgen Thorsen\\\"@en).}\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Ole John\\\"@en).}\",\n    \"{?person rdfs:label ?name. FILTER(?name = \\\"Jørgen Leth\\\"@en).}\"\n  ]\n}\n    ", "normal_query": "?film wdt:P1476 ?title . ?film wdt:P31 wd:Q11424 . FILTER(?title = \"Stop for Bud\"@en) . ?film wdt:P50|wdt:P95|wdt:P161 ?person . {?person rdfs:label ?name. FILTER(?name = \"Jens Jørgen Thorsen\"@en).} {?person rdfs:label ?name. FILTER(?name = \"Ole John\"@en).} {?person rdfs:label ?name. FILTER(?name = \"Jørgen Leth\"@en).} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?ptolemyIX wdt:P31 wd:Q5.\",\n    \"?ptolemyIX rdfs:label \\\"Ptolemy IX Lathyros\\\"@en.\",\n    \"?sibling wdt:P22 ?ptolemyIX.\",\n    \"?sibling wdt:P276 ?marriageToAntiochus.\",\n    \"?antiochus wdt:P31 wd:Q5.\",\n    \"?antiochus rdfs:label \\\"Antiochus IX Cyzicenus\\\"@en.\",\n    \"{?sibling wdt:P20 ?antiochus.} UNION {?sibling wdt:P26 ?antiochus.}\",\n    \"FILTER(?sibling != ?ptolemyIX)\"\n  ]\n}\n    ", "normal_query": "?ptolemyIX wdt:P31 wd:Q5. ?ptolemyIX rdfs:label \"Ptolemy IX Lathyros\"@en. ?sibling wdt:P22 ?ptolemyIX. ?sibling wdt:P276 ?marriageToAntiochus. ?antiochus wdt:P31 wd:Q5. ?antiochus rdfs:label \"Antiochus IX Cyzicenus\"@en. {?sibling wdt:P20 ?antiochus.} UNION {?sibling wdt:P26 ?antiochus.} FILTER(?sibling != ?ptolemyIX) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wdt:P50\",\n    \"?author\",\n    \".\",\n    \"?item\",\n    \"wdt:P425\",\n    \"?editor\",\n    \".\",\n    \"FILTER(?editor=wd:Q16937855||?editor=wd:Q16937856||?editor=wd:Q16937857)\",\n    \"{\",\n    \"?item\",\n    \"wdt:P31\",\n    \"/\",\n    \"wdt:P279*\",\n    \"wd:Q4739008\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"?item\",\n    \"wdt:P31\",\n    \"/\",\n    \"wdt:P279*\",\n    \"wd:Q571651\",\n    \"}\"\n  ]\n}", "normal_query": "?item wdt:P50 ?author . ?item wdt:P425 ?editor . FILTER(?editor=wd:Q16937855||?editor=wd:Q16937856||?editor=wd:Q16937857) { ?item wdt:P31 / wdt:P279* wd:Q4739008 } UNION { ?item wdt:P31 / wdt:P279* wd:Q571651 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 ?author.\",\n    \"?work wdt:P50 wd:Q123456789, wd:Q987654321, wd:Q112233445.\",\n    \"?work wdt:P31 wd:Q571450.\",\n    \"FILTER(?author = ?director)\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?work wdt:P800 ?author. ?work wdt:P50 wd:Q123456789, wd:Q987654321, wd:Q112233445. ?work wdt:P31 wd:Q571450. FILTER(?author = ?director) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P1476 ?title .\",\n    \"?film wdt:P31 wd:Q11424 .\",\n    \"FILTER(?title = \\\"Stop for Bud\\\"@en)\",\n    \"?film wdt:P50 ?author1 ;\",\n    \"wdt:P50 ?author2 ;\",\n    \"wdt:P50 ?author3 .\",\n    \"{?author1 rdfs:label ?name1. FILTER(LANG(?name1) = 'da' && (?name1 = \\\"Ole John\\\"@da || ?name1 = \\\"Jørgen Leth\\\"@da || ?name1 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"{?author2 rdfs:label ?name2. FILTER(LANG(?name2) = 'da' && (?name2 = \\\"Ole John\\\"@da || ?name2 = \\\"Jørgen Leth\\\"@da || ?name2 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"{?author3 rdfs:label ?name3. FILTER(LANG(?name3) = 'da' && (?name3 = \\\"Ole John\\\"@da || ?name3 = \\\"Jørgen Leth\\\"@da || ?name3 = \\\"Jens Jørgen Thorsen\\\"@da))}\",\n    \"FILTER(?author1 != ?author2 && ?author2 != ?author3 && ?author1 != ?author3)\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?film wdt:P1476 ?title . ?film wdt:P31 wd:Q11424 . FILTER(?title = \"Stop for Bud\"@en) ?film wdt:P50 ?author1 ; wdt:P50 ?author2 ; wdt:P50 ?author3 . {?author1 rdfs:label ?name1. FILTER(LANG(?name1) = 'da' && (?name1 = \"Ole John\"@da || ?name1 = \"Jørgen Leth\"@da || ?name1 = \"Jens Jørgen Thorsen\"@da))} {?author2 rdfs:label ?name2. FILTER(LANG(?name2) = 'da' && (?name2 = \"Ole John\"@da || ?name2 = \"Jørgen Leth\"@da || ?name2 = \"Jens Jørgen Thorsen\"@da))} {?author3 rdfs:label ?name3. FILTER(LANG(?name3) = 'da' && (?name3 = \"Ole John\"@da || ?name3 = \"Jørgen Leth\"@da || ?name3 = \"Jens Jørgen Thorsen\"@da))} FILTER(?author1 != ?author2 && ?author2 != ?author3 && ?author1 != ?author3) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P122 ?producer .\",\n \t\t\"?item wdt:P179 ?exec_producer .\",\n \t\t\"{?producer rdfs:label \\\"Sam Simon\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?producer rdfs:label \\\"James L. Brooks\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?producer rdfs:label \\\"Matt Groening\\\"@en.}\",\n \t\t\"?exec_producer rdfs:label ?execProducerName .\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?item wdt:P122 ?producer . ?item wdt:P179 ?exec_producer . {?producer rdfs:label \"Sam Simon\"@en.} UNION {?producer rdfs:label \"James L. Brooks\"@en.} UNION {?producer rdfs:label \"Matt Groening\"@en.} ?exec_producer rdfs:label ?execProducerName . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?ptolemyX wdt:P31 wd:Q5; wdt:P734 wd:Q203689.\",\n \t\t\"?ptolemyleftSibling wdt:P22 ?ptolemyX;\",\n \t\t\"wdt:P21 wd:Q6581072;\",\n \t\t\"wdt:P734 ?nameLeftSibling.\",\n \t\t\"?ptolemyIX wdt:P734 wd:Q203960; wdt:P22 ?ptolemyleftSibling.\",\n \t\t\"?ptolemyleftSibling wdt:P452 ?ptolemyIX.\"\n \t]\n}", "normal_query": "?ptolemyX wdt:P31 wd:Q5; wdt:P734 wd:Q203689. ?ptolemyleftSibling wdt:P22 ?ptolemyX; wdt:P21 wd:Q6581072; wdt:P734 ?nameLeftSibling. ?ptolemyIX wdt:P734 wd:Q203960; wdt:P22 ?ptolemyleftSibling. ?ptolemyleftSibling wdt:P452 ?ptolemyIX. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q5394836 ;\", \">// Identify that ?work is an instance of TV series (Breaking Bad in this case, but not directly specified to keep it general for the structure example) \\n\",\n    \"wdt:P577 ?productionDate ;\", \">// Production start date\\n\",\n    \"wdt:P50 ?author .\", \">// Author/Creator\\n\",\n    \"?author wdt:P31 wd:Q5 ;\", \">// The author is a human\\n\",\n    \"wdt:P2093 wd:Q76845 ;\", \">// Vince Gilligan (by ID)\\n\",\n    \"wdt:P2093 wd:Q5621355 .\" , \">// George Mastras (by ID), this structure assumes both are primary creators which might not be accurate for the roles of direction and writing separately.\\n\"\n  ]\n}", "normal_query": "?work wdt:P31 wd:Q5394836 ; >// Identify that ?work is an instance of TV series (Breaking Bad in this case, but not directly specified to keep it general for the structure example) wdt:P577 ?productionDate ; >// Production start date wdt:P50 ?author . >// Author/Creator ?author wdt:P31 wd:Q5 ; >// The author is a human wdt:P2093 wd:Q76845 ; >// Vince Gilligan (by ID) wdt:P2093 wd:Q5621355 . >// George Mastras (by ID), this structure assumes both are primary creators which might not be accurate for the roles of direction and writing separately. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?costumeDesigner wdt:P31 wd:Q483209.\",\n    \"?work1 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Tom at the Farm\\\"@en.\",\n    \"?work2 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Heartbeats\\\"@en.\",\n    \"?work3 wdt:P569 ?costumeDesigner; wdt:P1476 \\\"Laurence Anyways\\\"@en.\"\n  ]\n}", "normal_query": "?costumeDesigner wdt:P31 wd:Q483209. ?work1 wdt:P569 ?costumeDesigner; wdt:P1476 \"Tom at the Farm\"@en. ?work2 wdt:P569 ?costumeDesigner; wdt:P1476 \"Heartbeats\"@en. ?work3 wdt:P569 ?costumeDesigner; wdt:P1476 \"Laurence Anyways\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P166 ?work.\",\n    \"{?work wdt:P1476 \\\"In the Park\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"Shanghaied\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"Modern Times\\\"@en.}\",\n    \"UNION\",\n    \"{?work wdt:P1476 \\\"The Professor\\\"@en.}\",\n    \"?person wdt:P39 wd:Q208559.\",\n    \"?person wdt:P39 wd:Q15875315.\"\n  ]\n}\n    ", "normal_query": "?person wdt:P31 wd:Q5. ?person wdt:P166 ?work. {?work wdt:P1476 \"In the Park\"@en.} UNION {?work wdt:P1476 \"Shanghaied\"@en.} UNION {?work wdt:P1476 \"Modern Times\"@en.} UNION {?work wdt:P1476 \"The Professor\"@en.} ?person wdt:P39 wd:Q208559. ?person wdt:P39 wd:Q15875315. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?directed_by ?person .\",\n    \"?work ?edited_by ?person .\",\n    \"{?person ?label \\\"Eduardo Sánchez\\\"@en.}\",\n    \"{?person ?label \\\"Gareth Evans\\\"@en.}\",\n    \"{?person ?label \\\"Jason Eisener\\\"@en.}\",\n    \"{?person ?label \\\"Adam Wingard\\\"@en.}\"\n  ]\n}\n    ", "normal_query": "?work ?directed_by ?person . ?work ?edited_by ?person . {?person ?label \"Eduardo Sánchez\"@en.} {?person ?label \"Gareth Evans\"@en.} {?person ?label \"Jason Eisener\"@en.} {?person ?label \"Adam Wingard\"@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Alexandre Rockwell\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Quentin Tarantino\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Allison Anders\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Robert Rodriguez\\\".}\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?director. {?director wdt:P1559 \"Alexandre Rockwell\".} UNION {?director wdt:P1559 \"Quentin Tarantino\".} UNION {?director wdt:P1559 \"Allison Anders\".} UNION {?director wdt:P1559 \"Robert Rodriguez\".} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q11424; # Super Rhino is an instance of work (film, in this context)\\n\",\n    \"wdt:P57 ?directorProducer.\\n\", \"># Get the director/producer\\n\",\n    \"?directorProducer rdfs:label ?name .\\n\", \"># Get the name of the director/producer\\n\",\n    \"FILTER (?name IN ('Susie Essman', 'Malcolm McDowell', 'Clark Spencer', 'Miley Cyrus')) # Filter by names\\n\"\n  ]\n}", "normal_query": "?work wdt:P31 wd:Q11424; wdt:P57 ?directorProducer. > ?directorProducer rdfs:label ?name . > FILTER (?name IN ('Susie Essman', 'Malcolm McDowell', 'Clark Spencer', 'Miley Cyrus')) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P50 wd:Q147829 .\",\n \t\t\"?item wdt:P186 ?executive_produced_by .\",\n \t\t\"?item wdt:P161 ?produced_by .\",\n \t\t\"?item wdt:P750 ?edited_by .\"\n \t]\n}", "normal_query": "?item wdt:P50 wd:Q147829 . ?item wdt:P186 ?executive_produced_by . ?item wdt:P161 ?produced_by . ?item wdt:P750 ?edited_by . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work1 wdt:P856 wd:Q7604239; # Every Man for Himself (Q7604239) instance of creative work (P856, but using P856 as placeholder since the exact property is illustrative and might not exist in Wikidata structure directly related to works).\",\n \t\t\"?work2 wdt:P856 wd:Q10207; # Passion (film) (Q10207)\",\n \t\t\"?work3 wdt:P856 wd:Q49052. # Notre musique (Q49052)\",\n \t\t\"?person wdt:P921 ?work1;\",\n \t\t\"wdt:P921 ?work2;\",\n \t\t\"wdt:P921 ?work3.\",\n \t\t\"?person wdt:P1416 wd:Q7874. # employed by Cahiers du cinéma (Q7874)\"\n \t]\n}", "normal_query": "?work1 wdt:P856 wd:Q7604239; ?work2 wdt:P856 wd:Q10207; ?work3 wdt:P856 wd:Q49052. ?person wdt:P921 ?work1; wdt:P921 ?work2; wdt:P921 ?work3. ?person wdt:P1416 wd:Q7874. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P31 wd:Q54086729 ;\", \">// Assuming Q54086729 is for TV series or specific work category, adjust as necessary based on the actual Wikidata item for Laws of Attraction\",\n    \"wdt:P57 ?producer .\",\n    \"?producer wdt:P161 wd:Q30750 ;\", \">// Q30750 for Bob Yari, replace with correct IDs for each individual\",\n    \"wdt:P161 wd:Q42988 ;\", \">// Pierce Brosnan's ID\",\n    \"wdt:P161 wd:Q106871 ;\", \">// Toby Emmerich's ID\",\n    \"wdt:P161 wd:Q5523955 .\" , \">// Elie Samaha's ID\"\n  ]\n}", "normal_query": "?work wdt:P31 wd:Q54086729 ; >// Assuming Q54086729 is for TV series or specific work category, adjust as necessary based on the actual Wikidata item for Laws of Attraction wdt:P57 ?producer . ?producer wdt:P161 wd:Q30750 ; >// Q30750 for Bob Yari, replace with correct IDs for each individual wdt:P161 wd:Q42988 ; >// Pierce Brosnan's ID wdt:P161 wd:Q106871 ; >// Toby Emmerich's ID wdt:P161 wd:Q5523955 . >// Elie Samaha's ID LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?kurosawa.\",\n    \"?kurosawa rdfs:label \\\"Akira Kurosawa\\\"@en.\"\n  ]\n}", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?kurosawa. ?kurosawa rdfs:label \"Akira Kurosawa\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 ?director .\",\n \t\t\"?work wdt:P57 Jens_Jørgen_Thorsen .\",\n \t\t\"?work wdt:P57 Ole_John .\",\n \t\t\"?director rdfs:label \\\"Jørgen Leth\\\"@en .\",\n \t\t\"FILTER(?director != Jens_Jørgen_Thorsen && ?director != Ole_John)\",\n \t\t\"?work wdt:P31/wdt:P279* wd:Q11424 .\"\n \t]\n}", "normal_query": "?work wdt:P57 ?director . ?work wdt:P57 Jens_Jørgen_Thorsen . ?work wdt:P57 Ole_John . ?director rdfs:label \"Jørgen Leth\"@en . FILTER(?director != Jens_Jørgen_Thorsen && ?director != Ole_John) ?work wdt:P31/wdt:P279* wd:Q11424 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?directed_by ?director .\",\n \t\t\"?work ?written_by ?writer .\",\n \t\t\"?work ?edited_by ?editor .\",\n \t\t\"{?director (wdt:P1559|wdt:P2093) \\\"Ole John\\\".}\",\n \t\t\"{?writer (wdt:P1559|wdt:P2093) \\\"Jørgen Leth\\\".}\",\n \t\t\"{?editor (wdt:P1559|wdt:P2093) \\\"Jens Jørgen Thorsen\\\".}\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?work ?directed_by ?director . ?work ?written_by ?writer . ?work ?edited_by ?editor . {?director (wdt:P1559|wdt:P2093) \"Ole John\".} {?writer (wdt:P1559|wdt:P2093) \"Jørgen Leth\".} {?editor (wdt:P1559|wdt:P2093) \"Jens Jørgen Thorsen\".} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P800 ?film.\",\n    \"{?film wdt:P1476 \\\"The Whip and the Body\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Hatchet for the Honeymoon\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Danger: Diabolik\\\"@en.}\",\n    \"UNION\",\n    \"{?film wdt:P1476 \\\"Black Sunday\\\"@en.}\",\n    \"?person wdt:P31 wd:Q209589.\",\n    \"?person wdt:P106 wd:Q210405.\"\n  ]\n}\n    ", "normal_query": "?person wdt:P31 wd:Q5. ?person wdt:P800 ?film. {?film wdt:P1476 \"The Whip and the Body\"@en.} UNION {?film wdt:P1476 \"Hatchet for the Honeymoon\"@en.} UNION {?film wdt:P1476 \"Danger: Diabolik\"@en.} UNION {?film wdt:P1476 \"Black Sunday\"@en.} ?person wdt:P31 wd:Q209589. ?person wdt:P106 wd:Q210405. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?actor wdt:P31 wd:Q5.\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"wdt:P577 ?releaseDate;\",\n    \"rdfs:label ?titleLabel;\",\n    \"p:P161/ps:P161 ?actor;\",\n    \"p:P337/pq:P599 ?cinematographerRole;\",\n    \"p:P57/pq:P599 ?directorRole.\",\n    \"{?film wdt:P1477 \\\"Six Men Getting Sick\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Inland Empire\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Darkened Room\\\"@en.} UNION\",\n    \"{?film wdt:P1477 \\\"Rabbits\\\"@en.}\",\n    \"FILTER(?actor = ?cinematographerRole && ?actor = ?directorRole)\"\n  ]\n}\n   ", "normal_query": "?actor wdt:P31 wd:Q5. ?film wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; rdfs:label ?titleLabel; p:P161/ps:P161 ?actor; p:P337/pq:P599 ?cinematographerRole; p:P57/pq:P599 ?directorRole. {?film wdt:P1477 \"Six Men Getting Sick\"@en.} UNION {?film wdt:P1477 \"Inland Empire\"@en.} UNION {?film wdt:P1477 \"Darkened Room\"@en.} UNION {?film wdt:P1477 \"Rabbits\"@en.} FILTER(?actor = ?cinematographerRole && ?actor = ?directorRole) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P57 ?directors.\",\n \t\t\"?item wdt:P920 ?writers.\",\n \t\t\"?item wdt:P189 ?exec_producers.\",\n \t\t\"{?directors (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"UNION\",\n \t\t\"{?writers (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"UNION\",\n \t\t\"{?exec_producers (wdt:P31/wdt:P279*) wd:Q483246.}\",\n \t\t\"?directors rdfs:label ?directorName.\",\n \t\t\"?writers rdfs:label ?writerName.\",\n \t\t\"?exec_producers rdfs:label ?execProducerName.\",\n \t\t\"FILTER((?directorName = \\\"David Zucker\\\"@en || ?directorName = \\\"Jim Abrahams\\\"@en || ?directorName = \\\"Jerry Zucker\\\"@en) && (?writerName = \\\"David Zucker\\\"@en || ?writerName = \\\"Jim Abrahams\\\"@en || ?writerName = \\\"Jerry Zucker\\\"@en) && (?execProducerName = \\\"David Zucker\\\"@en || ?execProducerName = \\\"Jim Abrahams\\\"@en || ?execProducerName = \\\"Jerry Zucker\\\"@en))\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}", "normal_query": "?item wdt:P57 ?directors. ?item wdt:P920 ?writers. ?item wdt:P189 ?exec_producers. {?directors (wdt:P31/wdt:P279*) wd:Q483246.} UNION {?writers (wdt:P31/wdt:P279*) wd:Q483246.} UNION {?exec_producers (wdt:P31/wdt:P279*) wd:Q483246.} ?directors rdfs:label ?directorName. ?writers rdfs:label ?writerName. ?exec_producers rdfs:label ?execProducerName. FILTER((?directorName = \"David Zucker\"@en || ?directorName = \"Jim Abrahams\"@en || ?directorName = \"Jerry Zucker\"@en) && (?writerName = \"David Zucker\"@en || ?writerName = \"Jim Abrahams\"@en || ?writerName = \"Jerry Zucker\"@en) && (?execProducerName = \"David Zucker\"@en || ?execProducerName = \"Jim Abrahams\"@en || ?execProducerName = \"Jerry Zucker\"@en)) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P86 ?work.\",\n    \"{?work wdt:P57 ?item.} UNION\",\n    \"{?work wdt:P92 ?item.} UNION\",\n    \"{?work wdt:P58 ?item.}\",\n    \"FILTER(?item = wd:Q104315 || ?item = wd:Q166775 || ?item = wd:Q166776)\"\n  ]\n}\n    ", "normal_query": "?item wdt:P31 wd:Q5. ?item wdt:P86 ?work. {?work wdt:P57 ?item.} UNION {?work wdt:P92 ?item.} UNION {?work wdt:P58 ?item.} FILTER(?item = wd:Q104315 || ?item = wd:Q166775 || ?item = wd:Q166776) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 wd:Q761453; \", \">// P800 is for film series, Q761453 is Grindhouse (film series) as an example, but we need to find the specific work first which might be a movie or part of it. This line may require adjustment based on exact Wikidata structure for \"]} ", "normal_query": "?work wdt:P800 wd:Q761453; >// P800 is for film series, Q761453 is Grindhouse (film series) as an example, but we need to find the specific work first which might be a movie or part of it. This line may require adjustment based on exact Wikidata structure for LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmProducer wdt:P31 wd:Q5;\",\n      \"wdt:P106 wd:Q28794898;\",\n      \"p:P160/wdt:P2860 ?movie.\",\n    \"{?movie rdfs:label \\\"Katzelmacher\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"Lili Marleen\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"Whity\\\"@en.}\",\n    \"UNION\",\n    \"{?movie rdfs:label \\\"The Niklashausen Journey\\\"@en.}\"\n  ]\n}", "normal_query": "?filmProducer wdt:P31 wd:Q5; wdt:P106 wd:Q28794898; p:P160/wdt:P2860 ?movie. {?movie rdfs:label \"Katzelmacher\"@en.} UNION {?movie rdfs:label \"Lili Marleen\"@en.} UNION {?movie rdfs:label \"Whity\"@en.} UNION {?movie rdfs:label \"The Niklashausen Journey\"@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work ?directedBy ?director.\",\n    \"?work ?writtenBy ?writer.\",\n    \"{?director ?hasName \\\"Thomas Schnauz\\\".}\",\n    \"{?director ?hasName \\\"Peter Gould\\\".}\",\n    \"{?director ?hasName \\\"George Mastras\\\".}\",\n    \"{?director ?hasName \\\"Sam Catlin\\\".}\",\n    \"{?director ?hasName \\\"Vince Gilligan\\\".}\",\n    \"{?writer ?hasName \\\"Thomas Schnauz\\\".}\",\n    \"{?writer ?hasName \\\"Peter Gould\\\".}\",\n    \"{?writer ?hasName \\\"George Mastras\\\".}\",\n    \"{?writer ?hasName \\\"Sam Catlin\\\".}\",\n    \"{?writer ?hasName \\\"Vince Gilligan\\\".}\"\n  ]\n}\n   ", "normal_query": "?work ?directedBy ?director. ?work ?writtenBy ?writer. {?director ?hasName \"Thomas Schnauz\".} {?director ?hasName \"Peter Gould\".} {?director ?hasName \"George Mastras\".} {?director ?hasName \"Sam Catlin\".} {?director ?hasName \"Vince Gilligan\".} {?writer ?hasName \"Thomas Schnauz\".} {?writer ?hasName \"Peter Gould\".} {?writer ?hasName \"George Mastras\".} {?writer ?hasName \"Sam Catlin\".} {?writer ?hasName \"Vince Gilligan\".} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?directedBy ?director.\",\n \t\t\"?work ?writtenBy ?writer.\",\n \t\t\"?work ?editedBy ?editor.\",\n \t\t\"?director rdfs:label \\\"Ole John\\\"@en;\",\n \t\t\"?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en;\",\n \t\t\"?editor rdfs:label \\\"Jørgen Leth\\\"@en;\"\n \t]\n}", "normal_query": "?work ?directedBy ?director. ?work ?writtenBy ?writer. ?work ?editedBy ?editor. ?director rdfs:label \"Ole John\"@en; ?writer rdfs:label \"Jens Jørgen Thorsen\"@en; ?editor rdfs:label \"Jørgen Leth\"@en; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmEditor wdt:P31 wd:Q20758946 ;\",\n    \"wdt:P162 ?producer .\",\n    \"?producer wdt:P50|wdt:P178 ?author .\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode IV – A New Hope\\\"@en.}\",\n    \"UNION\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode I – The Phantom Menace\\\"@en.}\",\n    \"UNION\",\n    \"{?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \\\"Star Wars: Episode VI – Return of the Jedi\\\"@en.}\",\n    \"FILTER NOT EXISTS {?movie rdfs:label \\\"Star Whores\\\"@en}\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?filmEditor wdt:P31 wd:Q20758946 ; wdt:P162 ?producer . ?producer wdt:P50|wdt:P178 ?author . {?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \"Star Wars: Episode IV – A New Hope\"@en.} UNION {?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \"Star Wars: Episode I – The Phantom Menace\"@en.} UNION {?movie wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; wdt:P161 ?filmEditor; rdfs:label \"Star Wars: Episode VI – Return of the Jedi\"@en.} FILTER NOT EXISTS {?movie rdfs:label \"Star Whores\"@en} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?work wdt:P800 ?author.\",\n    \"?work wdt:P750 ?editor.\",\n    \"{?work wdt:P57 ?director1. FILTER(?director1 = wd:Q239644)}\",\n    \"{?work wdt:P57 ?director2. FILTER(?director2 = wd:Q809165)}\",\n    \"{?work wdt:P57 ?director3. FILTER(?director3 = wd:Q102570)}\",\n    \"FILTER(?author = ?editor)\",\n    \"?work rdfs:label ?titleLabel.\",\n    \"FILTER(LANG(?titleLabel) = 'en')\",\n    \"FILTER(CONTAINS(LCASE(?titleLabel), \\\"Stop for Bud\\\"))\"\n  ]\n}", "normal_query": "?work wdt:P800 ?author. ?work wdt:P750 ?editor. {?work wdt:P57 ?director1. FILTER(?director1 = wd:Q239644)} {?work wdt:P57 ?director2. FILTER(?director2 = wd:Q809165)} {?work wdt:P57 ?director3. FILTER(?director3 = wd:Q102570)} FILTER(?author = ?editor) ?work rdfs:label ?titleLabel. FILTER(LANG(?titleLabel) = 'en') FILTER(CONTAINS(LCASE(?titleLabel), \"Stop for Bud\")) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?resource wdt:P31 wd:Q5; # instance of human\\n\",\n \t \"wdt:P2860 ?work; # writer or cinematographer work\\n\",\n \t \"{?work wdt:P1476 \\\"Anyone Lived in a Pretty How Town\\\"@en.} UNION \\n\",\n \t \"{?work wdt:P1476 \\\"1:42.08\\\"@en.} UNION \\n\",\n \t \"{?work wdt:P1476 \\\"Look at Life\\\"@en.} UNION\\n\",\n \t \"?resource wdt:P162 wd:Q35956; # executive producer of Star Wars: Episode I – The Phantom Menace\\n\",\n \t \"?resource wdt:P162 wd:Q801547.\" ] }\n \t", "normal_query": "?resource wdt:P31 wd:Q5; wdt:P2860 ?work; {?work wdt:P1476 \"Anyone Lived in a Pretty How Town\"@en.} UNION {?work wdt:P1476 \"1:42.08\"@en.} UNION {?work wdt:P1476 \"Look at Life\"@en.} UNION ?resource wdt:P162 wd:Q35956; ?resource wdt:P162 wd:Q801547. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P577 ?release_date;\",\n    \"?film rdfs:label \\\"Uzak\\\"@en, \\\"Clouds of May\\\"@en;\",\n    \"?person wdt:P161 ?film;\",\n    \"?person wdt:P39 wd:Q10804256, wd:Q15756785, wd:Q209330, wd:Q160921;\",\n    \"FILTER(?film = wd:Q219407 || ?film = wd:Q219408)\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P577 ?release_date; ?film rdfs:label \"Uzak\"@en, \"Clouds of May\"@en; ?person wdt:P161 ?film; ?person wdt:P39 wd:Q10804256, wd:Q15756785, wd:Q209330, wd:Q160921; FILTER(?film = wd:Q219407 || ?film = wd:Q219408) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 ?directors.\",\n            \"{?movie wdt:P986 ?writers.} UNION\",\n            \"{?movie wdt:P57 ?writers.}\",\n            \"?execProducers p:P1289/ps:P1289 wd:Q304990.\",\n            \"FILTER (?directors = wd:Q100576 && ?directors = wd:Q100577 && ?directors = wd:Q100578)\",\n            \"FILTER (?writers = wd:Q100576 && ?writers = wd:Q100577 && ?writers = wd:Q100578)\"\n  ]\n}", "normal_query": "?movie wdt:P31 wd:Q11424; ?movie wdt:P57 ?directors. {?movie wdt:P986 ?writers.} UNION {?movie wdt:P57 ?writers.} ?execProducers p:P1289/ps:P1289 wd:Q304990. FILTER (?directors = wd:Q100576 && ?directors = wd:Q100577 && ?directors = wd:Q100578) FILTER (?writers = wd:Q100576 && ?writers = wd:Q100577 && ?writers = wd:Q100578) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 ?directors.\",\n            \"?movie p:P920/ps:P920 ?execProducers.\",\n            \"{?movie wdt:P920 ?writer.} UNION\",\n            \"{?movie wdt:P58 ?writer.}\",\n            \"FILTER (?directors = wd:Q147365 && ?directors = wd:Q147366 && ?directors = wd:Q147367)\",\n            \"?directors wdt:P1569 ?directorName.\",\n            \"?writer wdt:P1569 ?writerName.\",\n            \"?execProducers wdt:P1569 ?execProducerName.\"\n  ]\n}", "normal_query": "?movie wdt:P31 wd:Q11424; ?movie wdt:P57 ?directors. ?movie p:P920/ps:P920 ?execProducers. {?movie wdt:P920 ?writer.} UNION {?movie wdt:P58 ?writer.} FILTER (?directors = wd:Q147365 && ?directors = wd:Q147366 && ?directors = wd:Q147367) ?directors wdt:P1569 ?directorName. ?writer wdt:P1569 ?writerName. ?execProducers wdt:P1569 ?execProducerName. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q762495; \",\n \t\t\"wdt:P136 wd:Q743221; \",\n \t\t\"wdt:P175 ?work. \",\n \t\t\"?work wdt:P1476/wd:value \\\"My Son, My Son, What Have Ye Done?\\\"@en; \",\n \t\t\"wdt:P800 wd:Q762495. \"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 wd:Q762495; wdt:P136 wd:Q743221; wdt:P175 ?work. ?work wdt:P1476/wd:value \"My Son, My Son, What Have Ye Done?\"@en; wdt:P800 wd:Q762495. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film (wdt:P57|wdt:P50) ?director.\",\n    \"{?director rdfs:label 'Vilgot Sjöman'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Hans Alfredson'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Jörn Donner'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Gustaf Molander'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Ingmar Bergman'@en.}\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film (wdt:P57|wdt:P50) ?director. {?director rdfs:label 'Vilgot Sjöman'@en.} UNION {?director rdfs:label 'Hans Alfredson'@en.} UNION {?director rdfs:label 'Jörn Donner'@en.} UNION {?director rdfs:label 'Gustaf Molander'@en.} UNION {?director rdfs:label 'Ingmar Bergman'@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?composer (wdt:P86|wdt:P1574)/wd:Q2039|?director (wdt:P166|wdt:P3375) ?work . \\n\",\n \t \"?work wdt:P31 wd:Q729. \\n\",\n \t \"{?composer wdt:P86 wd:Q2039.} UNION {?composer wdt:P1574 wd:Q2039.} \\n\",\n \t \"{?director wdt:P166 ?movie.} UNION {?director wdt:P3375 ?movie.} \\n\",\n \t \"?movie (wdt:P1477|wdt:P161)/(wdt:P86|wdt:P1574) wd:Q2039 . \\n\",\n \t \"{?movie wdt:P1477 wd:Q2039.} UNION {?movie wdt:P161 wd:Q2039.} \\n\",\n \t \"FILTER(?work = wd:Q58302 OR ?work = wd:Q1906756 OR ?work = wd:Q47755) .\"\n \t]\n}\n  \t", "normal_query": "?composer (wdt:P86|wdt:P1574)/wd:Q2039|?director (wdt:P166|wdt:P3375) ?work . ?work wdt:P31 wd:Q729. {?composer wdt:P86 wd:Q2039.} UNION {?composer wdt:P1574 wd:Q2039.} {?director wdt:P166 ?movie.} UNION {?director wdt:P3375 ?movie.} ?movie (wdt:P1477|wdt:P161)/(wdt:P86|wdt:P1574) wd:Q2039 . {?movie wdt:P1477 wd:Q2039.} UNION {?movie wdt:P161 wd:Q2039.} FILTER(?work = wd:Q58302 OR ?work = wd:Q1906756 OR ?work = wd:Q47755) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?composer wdt:P800 wd:Q247530; \", \">// A Woman of Paris (film) composer is ?composer, Q247530 is the Wikidata ID for \" ,\"A Woman of Paris\"\n    ,\"wdt:P800 wd:Q196527.\", \">// Pay Day (film) composer is also ?composer, Q196527 is the Wikidata ID for \" ,\"Pay Day\"\n    ,\"?actor wdt:P31 wd:Q5; \", \">// ?actor is an instance of human (Q5 in Wikidata represents humans or people), and he/she was both editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916\"\n    ,\"wdt:P161 ?composer; \", \">// ?actor directed films where ?composer composed the music (P161 is for director of work, but here it's used to link actor with composer as a workaround since there isn't a direct property linking actors and composers in this context)\"\n    ,\"wdt:P106 wd:Q36182; \", \">// Occupation is editor (Q36182 represents Editor in Wikidata)\"\n    ,\"p:P109 ?starringStatement. \", \">// Starred in films\"\n    ,\"?starringStatement ps:P109/wdt:P31 wd:Q11424. \" ,\"\\n// The works he starred in are instances of film (Q11424 represents Film)\"\n    ,\"FILTER(?starringStatement ?starringValue = wd:Q7586) \", \">// Modern Times\"\n    ,\"UNION FILTER(?starringStatement ?starringValue = wd:Q30985)\", \">// City Lights\"\n    ,\"UNION FILTER(?starringStatement ?starringValue = wd:Q142955)\" ,\"\\n// The Essanay-Chaplin Revue of 1916\"\n  ]\n}\n   ", "normal_query": "?composer wdt:P800 wd:Q247530; >// A Woman of Paris (film) composer is ?composer, Q247530 is the Wikidata ID for A Woman of Paris wdt:P800 wd:Q196527. >// Pay Day (film) composer is also ?composer, Q196527 is the Wikidata ID for Pay Day ?actor wdt:P31 wd:Q5; >// ?actor is an instance of human (Q5 in Wikidata represents humans or people), and he/she was both editor and star of Modern Times, City Lights, and The Essanay-Chaplin Revue of 1916 wdt:P161 ?composer; >// ?actor directed films where ?composer composed the music (P161 is for director of work, but here it's used to link actor with composer as a workaround since there isn't a direct property linking actors and composers in this context) wdt:P106 wd:Q36182; >// Occupation is editor (Q36182 represents Editor in Wikidata) p:P109 ?starringStatement. >// Starred in films ?starringStatement ps:P109/wdt:P31 wd:Q11424. // The works he starred in are instances of film (Q11424 represents Film) FILTER(?starringStatement ?starringValue = wd:Q7586) >// Modern Times UNION FILTER(?starringStatement ?starringValue = wd:Q30985) >// City Lights UNION FILTER(?starringStatement ?starringValue = wd:Q142955) // The Essanay-Chaplin Revue of 1916 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P161 wd:Q2305489 ;\", \">// Jim Abrahams (Q2305489) is a creator of the film (?film) via P161 (creator) property. We need to add similar lines for Jerry Zucker and David Zucker, but first we identify the QIDs for them in Wikidata which are Q70065 and Q10023 respectively.\",\n    \"?film wdt:P161 wd:Q70065 ;\", \">// Jerry Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include Jerry Zucker as one of the creators.\"\n    ,\n    \"?film wdt:P161 wd:Q10023 .\" , \">// David Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include David Zucker as one of the creators.\"\n    ]\n}\n  ", "normal_query": "?film wdt:P161 wd:Q2305489 ; >// Jim Abrahams (Q2305489) is a creator of the film (?film) via P161 (creator) property. We need to add similar lines for Jerry Zucker and David Zucker, but first we identify the QIDs for them in Wikidata which are Q70065 and Q10023 respectively. ?film wdt:P161 wd:Q70065 ; >// Jerry Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include Jerry Zucker as one of the creators. ?film wdt:P161 wd:Q10023 . >// David Zucker is a creator of the film (?film) via P161 (creator) property. This line needs to be added to include David Zucker as one of the creators. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?work ?directedBy ?director .\",\n \t \"?work ?writtenBy ?writer .\",\n \t \"?work ?editedBy ?editor .\",\n \t \"VALUES (?director ?writer ?editor) {(wd:Q10483567 wd:Q10483567 wd:Q10483567) (wd:Q25906575 wd:Q25906575 wd:Q25906575) (wd:Q10483567 wd:Q25906575 wd:Q10483567)}\",\n \t \"?work a ?resource .\"\n \t]\n}", "normal_query": "?work ?directedBy ?director . ?work ?writtenBy ?writer . ?work ?editedBy ?editor . VALUES (?director ?writer ?editor) {(wd:Q10483567 wd:Q10483567 wd:Q10483567) (wd:Q25906575 wd:Q25906575 wd:Q25906575) (wd:Q10483567 wd:Q25906575 wd:Q10483567)} ?work a ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmEditor wdt:P31 wd:Q5.\",\n    \"?filmEditor p:P27 wd:Q480690.\",\n    \"{?filmEditor wdt:P50 wd:Q107904455.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107904455.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107904455.}\",\n    \"{?filmEditor wdt:P50 wd:Q107880455.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107880455.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107880455.}\",\n    \"{?filmEditor wdt:P50 wd:Q107904456.} union\",\n    \"{?filmEditor wdt:P162 wd:Q107904456.} union\",\n    \"{?filmEditor wdt:P361 wd:Q107904456.}\"\n  ]\n}\n   ", "normal_query": "?filmEditor wdt:P31 wd:Q5. ?filmEditor p:P27 wd:Q480690. {?filmEditor wdt:P50 wd:Q107904455.} union {?filmEditor wdt:P162 wd:Q107904455.} union {?filmEditor wdt:P361 wd:Q107904455.} {?filmEditor wdt:P50 wd:Q107880455.} union {?filmEditor wdt:P162 wd:Q107880455.} union {?filmEditor wdt:P361 wd:Q107880455.} {?filmEditor wdt:P50 wd:Q107904456.} union {?filmEditor wdt:P162 wd:Q107904456.} union {?filmEditor wdt:P361 wd:Q107904456.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?filmProducer wdt:P31 wd:Q208694 ;\",\n    \"wdt:P57 ?work .\",\n    \"{?work wdt:P1476 \\\"Fate\\\"@en .} UNION\",\n    \"{?work wdt:P1476 \\\"The Confession\\\"@en .} UNION\",\n    \"{?work wdt:P1476 \\\"The Waiting Room\\\"@en .}\",\n    \"?filmProducer p:P57 [pq:P921 ?work ;\",\n    \"ps:P57 wd:Q154308] .\"\n  ]\n}\n    ", "normal_query": "?filmProducer wdt:P31 wd:Q208694 ; wdt:P57 ?work . {?work wdt:P1476 \"Fate\"@en .} UNION {?work wdt:P1476 \"The Confession\"@en .} UNION {?work wdt:P1476 \"The Waiting Room\"@en .} ?filmProducer p:P57 [pq:P921 ?work ; ps:P57 wd:Q154308] . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?work ?workDirectorProperty ?director .\",\n \t\t\"?director wdt:P31 wd:Q5 .\", \">// Ensure director is a human being (instance of Q5 - Human entity in Wikidata) for more accurate results filtering by profession below if needed. However, this might not be necessary depending on the specificity of workDirectorProperty and the nature of works listed in the question which are likely to have human directors/editors/writers only anyway.\",\n \t\t\"?director wdt:P106 wd:Q36180 .\", \">// Occupation as writer (wd:Q36180 - Writer entity in Wikidata). Adjust this line if you need to specify editor or other roles more specifically, but the question seems to be asking for a person who was both a director and married Jacques Demy, so focusing on \"] }\n \t\t    \t\t\t", "normal_query": "?work ?workDirectorProperty ?director . ?director wdt:P31 wd:Q5 . >// Ensure director is a human being (instance of Q5 - Human entity in Wikidata) for more accurate results filtering by profession below if needed. However, this might not be necessary depending on the specificity of workDirectorProperty and the nature of works listed in the question which are likely to have human directors/editors/writers only anyway. ?director wdt:P106 wd:Q36180 . >// Occupation as writer (wd:Q36180 - Writer entity in Wikidata). Adjust this line if you need to specify editor or other roles more specifically, but the question seems to be asking for a person who was both a director and married Jacques Demy, so focusing on LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 wd:Q294736, wd:Q294737;\",\n \t\t\"wdt:P136 wd:Q294736.\",\n \t\t\"?item rdfs:label ?name. \"\n \t]\n}\n   \t\t\t\t\t \t  \t      \t", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 wd:Q294736, wd:Q294737; wdt:P136 wd:Q294736. ?item rdfs:label ?name. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P161 ?roleStatement.\",\n    \"?roleStatement ps:P161 wd:Q28204 .\",\n    \"{?cinematographer wdt:P161 wd:Q28204.} UNION\",\n    \"{?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \" ,\"\\\\\" ,\"Planet Terror\" ,\"\\\\\" ,\")} UNION\",\n    \"{?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \" ,\"\\\\\" ,\"Sin City\" ,\"\\\\\" ,\")}\",\n    \"?cinematographer wdt:P106/wdt:P279* wd:Q360854.\",\n    \"?cinematographer wdt:P106/wdt:P279* wd:Q1108239.\"\n  ]\n}", "normal_query": "?cinematographer wdt:P31 wd:Q5. ?cinematographer p:P161 ?roleStatement. ?roleStatement ps:P161 wd:Q28204 . {?cinematographer wdt:P161 wd:Q28204.} UNION {?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \\ Planet Terror \\ )} UNION {?film wdt:P31 wd:Q11424; wdt:P57 ?cinematographer; wdt:P1476 ?titleFilm. FILTER(?titleFilm = \\ Sin City \\ )} ?cinematographer wdt:P106/wdt:P279* wd:Q360854. ?cinematographer wdt:P106/wdt:P279* wd:Q1108239. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P106 wd:Q247894.\",\n    \"?work wdt:P31/wdt:P279* wd:Q11424;\",\n    \"wdt:P577 ?dateReleased;\",\n    \"wdt:P161 ?person;\",\n    \"rdfs:label ?titleLabel.\",\n    \"{\",\n      \"?work wdt:P161 ?person.\",\n      \"?work rdfs:label ?titleLabel.\",\n      \"FILTER(LANG(?titleLabel) = 'en').\",\n      \"FILTER(?titleLabel IN ('Contagion', 'Schizopolis', 'Ocean's Eleven', 'Full Frontal', 'Magic Mike XXL')).\",\n    \"}\",\n    \"{\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P577 ?dateReleasedMovie;\",\n      \"p:P160 [ ps:P160 ?person; pq:P2860 wd:Q186153 ].\",\n      \"?movie rdfs:label ?titleLabelMovie.\",\n      \"FILTER(LANG(?titleLabelMovie) = 'en').\",\n      \"FILTER(?titleLabelMovie IN ('Magic Mike XXL')).\"\n   ,\n    \"} UNION {\",\n      \"?movie wdt:P31/wdt:P279* wd:Q11424;\",\n      \"wdt:P577 ?dateReleasedMovie;\",\n      \"p:P361 [ ps:P361 ?person; pq:P2860 wd:Q186153 ].\",\n      \"?movie rdfs:label ?titleLabelMovie.\",\n      \"FILTER(LANG(?titleLabelMovie) = 'en').\",\n      \"FILTER(?titleLabelMovie IN ('Magic Mike XXL')).\"\n   ,\n    \"} \"\n  ]\n}", "normal_query": "?person wdt:P31 wd:Q5. ?person wdt:P106 wd:Q247894. ?work wdt:P31/wdt:P279* wd:Q11424; wdt:P577 ?dateReleased; wdt:P161 ?person; rdfs:label ?titleLabel. { ?work wdt:P161 ?person. ?work rdfs:label ?titleLabel. FILTER(LANG(?titleLabel) = 'en'). FILTER(?titleLabel IN ('Contagion', 'Schizopolis', 'Ocean's Eleven', 'Full Frontal', 'Magic Mike XXL')). } { ?movie wdt:P31/wdt:P279* wd:Q11424; wdt:P577 ?dateReleasedMovie; p:P160 [ ps:P160 ?person; pq:P2860 wd:Q186153 ]. ?movie rdfs:label ?titleLabelMovie. FILTER(LANG(?titleLabelMovie) = 'en'). FILTER(?titleLabelMovie IN ('Magic Mike XXL')). } UNION { ?movie wdt:P31/wdt:P279* wd:Q11424; wdt:P577 ?dateReleasedMovie; p:P361 [ ps:P361 ?person; pq:P2860 wd:Q186153 ]. ?movie rdfs:label ?titleLabelMovie. FILTER(LANG(?titleLabelMovie) = 'en'). FILTER(?titleLabelMovie IN ('Magic Mike XXL')). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; # The film is an instance of work of film (Q11424, movie or similar media franchise)\\n\",\n    \"wdt:P577 ?releaseDate; # Has a publication date\\n\",\n    \"rdfs:label \\\"Six Men Getting Sick\\\"@en; # Title in English\\n\",\n    \"?film wdt:P344 ?cinematographer. # Cinematographer of the film\\n\",\n    \"?film wdt:P125 ?editor. # Editor of the film\\n\",\n    \"{?cinematographer rdfs:label ?name.} UNION {?editor rdfs:label ?name.}\\n\",\n    \"FILTER(?name IN(\\\"The Black Ghiandola\\\", \\\"Twin Peaks\\\", \\\"Lumière and Company\\\", \\\"Dune\\\", \\\"Inland Empire\\\", \\\"Boat\\\")) # Filter for the names mentioned\\n\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t", "normal_query": "?film wdt:P31 wd:Q11424; wdt:P577 ?releaseDate; rdfs:label \"Six Men Getting Sick\"@en; ?film wdt:P344 ?cinematographer. ?film wdt:P125 ?editor. {?cinematographer rdfs:label ?name.} UNION {?editor rdfs:label ?name.} FILTER(?name IN(\"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", \"Boat\")) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?writer wdt:P31 wd:Q5.\",\n    \"?writer wdt:P27 wd:Q16.\",\n    \"?writer wdt:P921 wd:Q480381.\",\n    \"?writer wdt:P921 wd:Q105182.\",\n    \"wd:Q988 wdt:P800 ?writer.\"\n  ]\n}", "normal_query": "?writer wdt:P31 wd:Q5. ?writer wdt:P27 wd:Q16. ?writer wdt:P921 wd:Q480381. ?writer wdt:P921 wd:Q105182. wd:Q988 wdt:P800 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?confessionEditor wdt:P31 wd:Q5; # The Confession's editor is a human (instance of Q5 - Human) \\n\",\n \t\t\"wdt:P98 ?confession; # has the work 'The Confession' \\n\",\n \t\t\"wdt:P276 wd:Q40315; # and was an executive producer, cinematographer or editor\\n\",\n \t\t\"?destinyStar wdt:P31 wd:Q5; # The star of Destiny is a human (instance of Q5 - Human) \\n\",\n \t\t\"wdt:P161 ?destiny; # has the work 'Destiny' as an actor \\n\",\n \t\t\"wdt:P161 ?waitingRoom; # and also starred in 'The Waiting Room'\\n\",\n \t\t\"wdt:P161 ?thirdPage. # and also starred in 'The Third Page'\\n\"\n \t]\n}", "normal_query": "?confessionEditor wdt:P31 wd:Q5; wdt:P98 ?confession; wdt:P276 wd:Q40315; ?destinyStar wdt:P31 wd:Q5; wdt:P161 ?destiny; wdt:P161 ?waitingRoom; wdt:P161 ?thirdPage. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?filmLabel .\",\n    \"{?film wdt:P57 ?person.} UNION\",\n    \"{?film wdt:P98 ?person.} UNION\",\n    \"{?film wdt:P57 ?person.}\",\n    \"FILTER(?film = wd:Q1024360 || ?film = wd:Q22857 || ?film = wd:Q1024362 || ?film = wd:Q1024361)\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film rdfs:label ?filmLabel . {?film wdt:P57 ?person.} UNION {?film wdt:P98 ?person.} UNION {?film wdt:P57 ?person.} FILTER(?film = wd:Q1024360 || ?film = wd:Q22857 || ?film = wd:Q1024362 || ?film = wd:Q1024361) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?writer ?executiveProducer ?editor ?work1 ?work2 .\",\n \t\t\"wd:Q5 wdt:P31 wd:Q5 ;\",\n \t\t\"?writer wdt:P983 wd:Q7064255 , wd:Q7064256 ;\", \">// Assuming Q7064255 and Q7064256 are the Wikidata IDs for The Waiting Room and Fate respectively. This line needs to be adjusted based on actual Wikidata IDs of these works and the property used for writers, executive producers, editors in Wikidata. For simplicity, P983 is hypothetically used here as a placeholder for \"] }\n", "normal_query": "?writer ?executiveProducer ?editor ?work1 ?work2 . wd:Q5 wdt:P31 wd:Q5 ; ?writer wdt:P983 wd:Q7064255 , wd:Q7064256 ; >// Assuming Q7064255 and Q7064256 are the Wikidata IDs for The Waiting Room and Fate respectively. This line needs to be adjusted based on actual Wikidata IDs of these works and the property used for writers, executive producers, editors in Wikidata. For simplicity, P983 is hypothetically used here as a placeholder for LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?director wdt:P1559 \\\"Jörn Donner\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Vilgot Sjöman\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Hans Alfredson\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Gustaf Molander\\\".}\",\n    \"UNION\",\n    \"{?director wdt:P1559 \\\"Ingmar Bergman\\\".}\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?director. {?director wdt:P1559 \"Jörn Donner\".} UNION {?director wdt:P1559 \"Vilgot Sjöman\".} UNION {?director wdt:P1559 \"Hans Alfredson\".} UNION {?director wdt:P1559 \"Gustaf Molander\".} UNION {?director wdt:P1559 \"Ingmar Bergman\".} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item p:P50 ?statement.\",\n    \"?statement ps:P50 wd:Q7604289.\",\n    \"?item p:P98 ?statement2.\",\n    \"?statement2 ps:P98 wd:Q7604289.\",\n    \"?item p:P341 ?statement3.\",\n    \"?statement3 ps:P341 wd:Q7604289.\",\n    \"?item p:P599 ?statement4.\",\n    \"?statement4 ps:P599 wd:Q7604289.\",\n    \"{\",\n      \"?item wdt:P162 wd:Q7604289;\",\n      \"wdt:P355 wd:Q7604289.\",\n    \"} UNION {\",\n      \"?item wdt:P162 wd:Q7604289.\",\n    \"} UNION {\",\n      \"?item wdt:P355 wd:Q7604289.\",\n    \"}\"\n  ]\n}", "normal_query": "?item wdt:P31 wd:Q5. ?item p:P50 ?statement. ?statement ps:P50 wd:Q7604289. ?item p:P98 ?statement2. ?statement2 ps:P98 wd:Q7604289. ?item p:P341 ?statement3. ?statement3 ps:P341 wd:Q7604289. ?item p:P599 ?statement4. ?statement4 ps:P599 wd:Q7604289. { ?item wdt:P162 wd:Q7604289; wdt:P355 wd:Q7604289. } UNION { ?item wdt:P162 wd:Q7604289. } UNION { ?item wdt:P355 wd:Q7604289. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmEditorSpouse wdt:P286 ?work . \",\n \t\t\"?work rdfs:label ?titleLabelFilterLang . \",\n \t\t\"{?work rdfs:label 'The City Tramp'@en.} UNION {?work rdfs:label 'Katzelmacher'@en.} UNION {?work rdfs:label 'Why Does Herr R. Run Amok?'@en.} UNION {?work rdfs:label 'Whity'@en.} UNION {?work rdfs:label 'In a Year of 13 Moons'@en.}\",\n \t\t\"?filmEditorSpouse wdt:P286 ?work . \",\n \t\t\"?filmEditorSpouse wdt:P31 wd:Q5 . \"\n \t]\n}\n    ", "normal_query": "?filmEditorSpouse wdt:P286 ?work . ?work rdfs:label ?titleLabelFilterLang . {?work rdfs:label 'The City Tramp'@en.} UNION {?work rdfs:label 'Katzelmacher'@en.} UNION {?work rdfs:label 'Why Does Herr R. Run Amok?'@en.} UNION {?work rdfs:label 'Whity'@en.} UNION {?work rdfs:label 'In a Year of 13 Moons'@en.} ?filmEditorSpouse wdt:P286 ?work . ?filmEditorSpouse wdt:P31 wd:Q5 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P27 wd:Q183.\",\n    \"?item wdt:P39 wd:Q104652.\",\n    \"?item p:P800 ?statement.\",\n    \"?statement ps:P800 wd:Q210928.\",\n    \"?item p:P800 ?statement2.\",\n    \"?statement2 ps:P800 wd:Q739898.\",\n    \"?item p:P800 ?statement3.\",\n    \"?statement3 ps:P800 wd:Q56481.\"\n  ]\n}", "normal_query": "?item wdt:P31 wd:Q5. ?item wdt:P27 wd:Q183. ?item wdt:P39 wd:Q104652. ?item p:P800 ?statement. ?statement ps:P800 wd:Q210928. ?item p:P800 ?statement2. ?statement2 ps:P800 wd:Q739898. ?item p:P800 ?statement3. ?statement3 ps:P800 wd:Q56481. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P27 wd:Q16.\",\n    \"{?person wdt:P800 wd:Q940563.} UNION\",\n    \"{?person wdt:P800 wd:Q1051825.} UNION\",\n    \"{?person wdt:P800 wd:Q714765.} UNION\",\n    \"{?person wdt:P800 wd:Q398556.}\",\n    \"?person wdt:P110 ?work.\",\n    \"FILTER(?work = wd:Q214450)\"\n  ]\n}\n    ", "normal_query": "?person wdt:P31 wd:Q5. ?person wdt:P27 wd:Q16. {?person wdt:P800 wd:Q940563.} UNION {?person wdt:P800 wd:Q1051825.} UNION {?person wdt:P800 wd:Q714765.} UNION {?person wdt:P800 wd:Q398556.} ?person wdt:P110 ?work. FILTER(?work = wd:Q214450) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director wdt:P106 wd:Q28794.\",\n    \"?director p:P162/ps:P162 wd:Q101194.\",\n    \"{?director wdt:P162 wd:Q101194.} UNION\",\n    \"{?director wdt:P57 wd:Q389526.} UNION\",\n    \"{?director wdt:P57 wd:Q1134516.} UNION\",\n    \"{?director wdt:P57 wd:Q101194.} UNION\",\n    \"{?director wdt:P57 wd:Q802040.\"\n  ]\n}\n    ", "normal_query": "?director wdt:P31 wd:Q5. ?director wdt:P106 wd:Q28794. ?director p:P162/ps:P162 wd:Q101194. {?director wdt:P162 wd:Q101194.} UNION {?director wdt:P57 wd:Q389526.} UNION {?director wdt:P57 wd:Q1134516.} UNION {?director wdt:P57 wd:Q101194.} UNION {?director wdt:P57 wd:Q802040. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person p:P800 ?statement.\",\n    \"?statement ps:P800 wd:Q2674965.\",\n    \"{?person wdt:P108 wd:Q9304;} union\",\n    \"{?person wdt:P108 wd:Q10798416;} union\",\n    \"{?person wdt:P108 wd:Q200646;} union\",\n    \"{?person wdt:P108 wd:Q5305551.}\"\n  ]\n}", "normal_query": "?person wdt:P31 wd:Q5. ?person p:P800 ?statement. ?statement ps:P800 wd:Q2674965. {?person wdt:P108 wd:Q9304;} union {?person wdt:P108 wd:Q10798416;} union {?person wdt:P108 wd:Q200646;} union {?person wdt:P108 wd:Q5305551.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P50 wd:Q16934827, wd:Q16934828, wd:Q16934829.\",\n    \"?film wdt:P36 ?editingRole.\",\n    \"?film wdt:P161 ?productionRole.\",\n    \"?film wdt:P57 ?directionRole.\"\n  ]\n}", "normal_query": "?film wdt:P50 wd:Q16934827, wd:Q16934828, wd:Q16934829. ?film wdt:P36 ?editingRole. ?film wdt:P161 ?productionRole. ?film wdt:P57 ?directionRole. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?cinematography_work; \",\n \t\t\"wdt:P161 ?star; \",\n \t\t\"wdt:P36 ?editor; \",\n \t\t\"wdt:P57 ?director; \",\n \t\t\"wdt:P1294 wd:Q211408. \"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?resource wdt:P31 wd:Q5; wdt:P800 ?cinematography_work; wdt:P161 ?star; wdt:P36 ?editor; wdt:P57 ?director; wdt:P1294 wd:Q211408. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?thisNightDirector ?thisNightCinematographer ?thisNightWriter\",\n    \"WHERE {\",\n    \"  ?thisNight a wd:Q11424; wdt:P57 ?thisNightDirector; wdt:P344 ?thisNightCinematographer; wdt:P925 ?thisNightWriter.\",\n    \"  ?rioDasMortes wdt:P57 ?thisNightDirector; wdt:P364 wd:Q1088888.\",\n    \"  ?liliMarleen wdt:P57 ?thisNightDirector; wdt:P364 wd:Q292556.\",\n    \"  ?whity wdt:P57 ?thisNightDirector; wdt:P364 wd:Q100085.\",\n    \"}\"\n  ]\n}", "normal_query": "?thisNightDirector ?thisNightCinematographer ?thisNightWriter WHERE { ?thisNight a wd:Q11424; wdt:P57 ?thisNightDirector; wdt:P344 ?thisNightCinematographer; wdt:P925 ?thisNightWriter. ?rioDasMortes wdt:P57 ?thisNightDirector; wdt:P364 wd:Q1088888. ?liliMarleen wdt:P57 ?thisNightDirector; wdt:P364 wd:Q292556. ?whity wdt:P57 ?thisNightDirector; wdt:P364 wd:Q100085. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P3740 ?statement.\",\n    \"?statement ps:P3740 wd:Q296818.\",\n    \"?film1 wdt:P541 ?cinematographer.\",\n    \"FILTER(?film1 = wd:Q11273).\",\n    \"{?cinematographer p:P162 ?writeStatement. ?writeStatement ps:P162 wd:Q109558.} UNION {?cinematographer p:P161 ?directStatement. ?directStatement ps:P161 wd:Q109558.}\",\n    \"{?cinematographer p:P162 ?writeStatement2. ?writeStatement2 ps:P162 wd:Q743316.} UNION {?cinematographer p:P161 ?directStatement2. ?directStatement2 ps:P161 wd:Q743316.}\",\n    \"{?cinematographer p:P162 ?writeStatement3. ?writeStatement3 ps:P162 wd:Q805911.} UNION {?cinematographer p:P161 ?directStatement3. ?directStatement3 ps:P161 wd:Q805911.}\"\n  ]\n}\n    ", "normal_query": "?cinematographer wdt:P31 wd:Q5. ?cinematographer p:P3740 ?statement. ?statement ps:P3740 wd:Q296818. ?film1 wdt:P541 ?cinematographer. FILTER(?film1 = wd:Q11273). {?cinematographer p:P162 ?writeStatement. ?writeStatement ps:P162 wd:Q109558.} UNION {?cinematographer p:P161 ?directStatement. ?directStatement ps:P161 wd:Q109558.} {?cinematographer p:P162 ?writeStatement2. ?writeStatement2 ps:P162 wd:Q743316.} UNION {?cinematographer p:P161 ?directStatement2. ?directStatement2 ps:P161 wd:Q743316.} {?cinematographer p:P162 ?writeStatement3. ?writeStatement3 ps:P162 wd:Q805911.} UNION {?cinematographer p:P161 ?directStatement3. ?directStatement3 ps:P161 wd:Q805911.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?film_works; \",\n \t\t\"wdt:P136 wd:Q24978666; \",\n \t\t\"wdt:P800 wd:Q114483; \",\n \t\t\"wdt:P800 wd:Q519227; \",\n \t\t\"wdt:P800 wd:Q160541; \",\n \t\t\"wdt:P162 wd:Q73480. \"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 ?film_works; wdt:P136 wd:Q24978666; wdt:P800 wd:Q114483; wdt:P800 wd:Q519227; wdt:P800 wd:Q160541; wdt:P162 wd:Q73480. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"OPTIONAL { ?film wdt:P162 ?producer. }\",\n    \"OPTIONAL { ?film wdt:P921 ?writer. }\",\n    \"OPTIONAL { ?film wdt:P361 ?editor. }\",\n    \"{ ?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en. }\",\n    \"{ ?director rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Jørgen Leth\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Jørgen Leth\\\"@en. }\",\n    \"{ ?director rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?producer rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?writer rdfs:label \\\"Ole John\\\"@en. } UNION\",\n    \"{ ?editor rdfs:label \\\"Ole John\\\"@en. }\"\n  ]\n}\n   ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?director. OPTIONAL { ?film wdt:P162 ?producer. } OPTIONAL { ?film wdt:P921 ?writer. } OPTIONAL { ?film wdt:P361 ?editor. } { ?director rdfs:label \"Jens Jørgen Thorsen\"@en. } UNION { ?producer rdfs:label \"Jens Jørgen Thorsen\"@en. } UNION { ?writer rdfs:label \"Jens Jørgen Thorsen\"@en. } UNION { ?editor rdfs:label \"Jens Jørgen Thorsen\"@en. } { ?director rdfs:label \"Jørgen Leth\"@en. } UNION { ?producer rdfs:label \"Jørgen Leth\"@en. } UNION { ?writer rdfs:label \"Jørgen Leth\"@en. } UNION { ?editor rdfs:label \"Jørgen Leth\"@en. } { ?director rdfs:label \"Ole John\"@en. } UNION { ?producer rdfs:label \"Ole John\"@en. } UNION { ?writer rdfs:label \"Ole John\"@en. } UNION { ?editor rdfs:label \"Ole John\"@en. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424; \",\n    \"wdt:P57 ?designer; \",\n    \"wdt:P9810 ?editor.\",\n    \"?designer rdfs:label \\\"Xavier Dolan\\\"@en;\",\n    \"wdt:P106 wd:Q13481256.\",\n    \"?editor rdfs:label \\\"Xavier Dolan\\\"@en;\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; wdt:P57 ?designer; wdt:P9810 ?editor. ?designer rdfs:label \"Xavier Dolan\"@en; wdt:P106 wd:Q13481256. ?editor rdfs:label \"Xavier Dolan\"@en; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P50 ?author.\",\n    \"{?film wdt:P161 ?director.} UNION\",\n    \"{?film wdt:P57 ?director.}\",\n    \"{?film wdt:P92 ?editor.} UNION\",\n    \"{?film wdt:P143 ?editor.}\",\n    \"?author (wdt:P800|wdt:P162) ?film.\",\n    \"FILTER(?author = wd:Q5).\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P50 ?author. {?film wdt:P161 ?director.} UNION {?film wdt:P57 ?director.} {?film wdt:P92 ?editor.} UNION {?film wdt:P143 ?editor.} ?author (wdt:P800|wdt:P162) ?film. FILTER(?author = wd:Q5). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"{?film wdt:P57 wd:Q980665.} UNION\",\n    \"{?film wdt:P57 wd:Q1090066.} UNION\",\n    \"{?film wdt:P57 wd:Q2345462.}\",\n    \"?director (wdt:P31/wdt:P279*) wd:Q8503082.\",\n    \"FILTER (?director = wd:Q980665 || ?director = wd:Q1090066 || ?director = wd:Q2345462)\"\n  ]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?director. {?film wdt:P57 wd:Q980665.} UNION {?film wdt:P57 wd:Q1090066.} UNION {?film wdt:P57 wd:Q2345462.} ?director (wdt:P31/wdt:P279*) wd:Q8503082. FILTER (?director = wd:Q980665 || ?director = wd:Q1090066 || ?director = wd:Q2345462) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film wdt:P57 ?director.\",\n    \"?film wdt:P750 ?editor.\",\n    \"?film wdt:P921 ?writer.\",\n    \"?film wdt:P162 ?producer.\",\n    \"{?director rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?editor rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?editor rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?editor rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?writer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?writer rdfs:label \\\"Ole John\\\"@en.}\",\n    \"{?producer rdfs:label \\\"Jens Jørgen Thorsen\\\"@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label \\\"Jørgen Leth\\\"@en.}\",\n    \"UNION\",\n    \"{?producer rdfs:label \\\"Ole John\\\"@en.}\"\n  ]\n}\n   ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 ?director. ?film wdt:P750 ?editor. ?film wdt:P921 ?writer. ?film wdt:P162 ?producer. {?director rdfs:label \"Jens Jørgen Thorsen\"@en.} UNION {?director rdfs:label \"Jørgen Leth\"@en.} UNION {?director rdfs:label \"Ole John\"@en.} {?editor rdfs:label \"Jens Jørgen Thorsen\"@en.} UNION {?editor rdfs:label \"Jørgen Leth\"@en.} UNION {?editor rdfs:label \"Ole John\"@en.} {?writer rdfs:label \"Jens Jørgen Thorsen\"@en.} UNION {?writer rdfs:label \"Jørgen Leth\"@en.} UNION {?writer rdfs:label \"Ole John\"@en.} {?producer rdfs:label \"Jens Jørgen Thorsen\"@en.} UNION {?producer rdfs:label \"Jørgen Leth\"@en.} UNION {?producer rdfs:label \"Ole John\"@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5.\",\n    \"?emberDirector wdt:P85 wd:Q207649.\",\n    \"{?fate wdt:P57 ?emberDirector.}\",\n    \"{?theConfession wdt:P57 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P57 ?emberDirector.}\",\n    \"union\",\n    \"{?fate wdt:P162 ?emberDirector.}\",\n    \"{?theConfession wdt:P162 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P162 ?emberDirector.}\",\n    \"union\",\n    \"{?fate wdt:P58 ?emberDirector.}\",\n    \"{?theConfession wdt:P58 ?emberDirector.}\",\n    \"{?theWaitingRoom wdt:P58 ?emberDirector.}\",\n    \"?fate rdfs:label ?fateLabel filter (lang(?fateLabel) = \\\"en\\\").\",\n    \"?theConfession rdfs:label ?theConfessionLabel filter (lang(?theConfessionLabel) = \\\"en\\\").\",\n    \"?theWaitingRoom rdfs:label ?theWaitingRoomLabel filter (lang(?theWaitingRoomLabel) = \\\"en\\\").\"\n  ]\n}", "normal_query": "?emberDirector wdt:P31 wd:Q5. ?emberDirector wdt:P85 wd:Q207649. {?fate wdt:P57 ?emberDirector.} {?theConfession wdt:P57 ?emberDirector.} {?theWaitingRoom wdt:P57 ?emberDirector.} union {?fate wdt:P162 ?emberDirector.} {?theConfession wdt:P162 ?emberDirector.} {?theWaitingRoom wdt:P162 ?emberDirector.} union {?fate wdt:P58 ?emberDirector.} {?theConfession wdt:P58 ?emberDirector.} {?theWaitingRoom wdt:P58 ?emberDirector.} ?fate rdfs:label ?fateLabel filter (lang(?fateLabel) = \"en\"). ?theConfession rdfs:label ?theConfessionLabel filter (lang(?theConfessionLabel) = \"en\"). ?theWaitingRoom rdfs:label ?theWaitingRoomLabel filter (lang(?theWaitingRoomLabel) = \"en\"). LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?emberDirector wdt:P31 wd:Q5.\",\n    \"?emberDirector wdt:P85 wd:Q207649.\",\n    \"{?emberDirector p:P166/psn:P166 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P39/psn:P39 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P160/psn:P160 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\")}\",\n    \"union\",\n    \"{?emberDirector p:P57/psn:P57 ?work .\",\n    \"?work rdfs:label ?workLabel filter(lang(?workLabel) = \\\"en\\\").}\"\n  ]\n}\n   ", "normal_query": "?emberDirector wdt:P31 wd:Q5. ?emberDirector wdt:P85 wd:Q207649. {?emberDirector p:P166/psn:P166 ?work . ?work rdfs:label ?workLabel filter(lang(?workLabel) = \"en\")} union {?emberDirector p:P39/psn:P39 ?work . ?work rdfs:label ?workLabel filter(lang(?workLabel) = \"en\")} union {?emberDirector p:P160/psn:P160 ?work . ?work rdfs:label ?workLabel filter(lang(?workLabel) = \"en\")} union {?emberDirector p:P57/psn:P57 ?work . ?work rdfs:label ?workLabel filter(lang(?workLabel) = \"en\").} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P127 ?executive_produced_by; \",\n \t\t\"?film wdt:P57 ?directed_by; \",\n \t\t\"?film wdt:P58 ?written_by; \",\n \t\t\"{?written_by wdt:P1569 \\\"David Zucker\\\".}\",\n \t\t\"{?written_by wdt:P1569 \\\"Jim Abrahams\\\".}\",\n \t\t\"{?written_by wdt:P1569 \\\"Jerry Zucker\\\".}\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?film wdt:P127 ?executive_produced_by; ?film wdt:P57 ?directed_by; ?film wdt:P58 ?written_by; {?written_by wdt:P1569 \"David Zucker\".} {?written_by wdt:P1569 \"Jim Abrahams\".} {?written_by wdt:P1569 \"Jerry Zucker\".} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P800 ?film1.\",\n    \"?resource wdt:P800 ?film2.\",\n    \"?resource wdt:P800 ?film3.\",\n    \"?film1 rdfs:label \\\"Moebius\\\"@en.\",\n    \"?film2 rdfs:label \\\"One on One\\\"@en.\",\n    \"?film3 rdfs:label \\\"Amen.\\\"@en.\",\n    \"?resource wdt:P162 ?pietaproject.\",\n    \"?pietaproject rdfs:label \\\"Pietà\\\"@en.\"\n  ]\n}", "normal_query": "?resource wdt:P31 wd:Q5. ?resource wdt:P800 ?film1. ?resource wdt:P800 ?film2. ?resource wdt:P800 ?film3. ?film1 rdfs:label \"Moebius\"@en. ?film2 rdfs:label \"One on One\"@en. ?film3 rdfs:label \"Amen.\"@en. ?resource wdt:P162 ?pietaproject. ?pietaproject rdfs:label \"Pietà\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P374/wdt:P162 wd:Q9085;\",\n    \"?cinematographer wdt:P374/wdt:P57 wd:Q9085;\",\n    \"?cinematographer wdt:P374/wdt:P155 wd:Q9085.\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?cinematographer wdt:P374/wdt:P162 wd:Q9085; ?cinematographer wdt:P374/wdt:P57 wd:Q9085; ?cinematographer wdt:P374/wdt:P155 wd:Q9085. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n\t  \"?influencer wdt:P31 wd:Q5; # The influencer is an instance of human (actor in this context) \\n\",\n\t  \"wdt:P856 ?schoolFounder; # The school founder (Alexandria Monroe High School's founder)\\n\",\n\t  \"wdt:P740 wd:Q239156, wd:Q1025759. # Influenced Wolfgang Ambros and Jan-Mari Carlotti\\n\",\n\t  \"?schoolFounder wdt:P800 ?actor1; # The actor Carolyn Dennis is married to the school founder\\n\",\n\t  \"wdt:P800 ?actor2. # The actor Sara Dylan is also married to the school founder\\n\",\n\t  \"?actor1 rdfs:label ?name1; # Label for the first actor (Carolyn Dennis)\\n\",\n\t  \"wdt:P31 wd:Q5.\\n\", \"># The first actor is an instance of human\\n\",\n\t  \"?actor2 rdfs:label ?name2; # Label for the second actor (Sara Dylan)\\n\",\n\t  \"wdt:P31 wd:Q5. # The second actor is an instance of human\\n\"\n\t]\n}", "normal_query": "?influencer wdt:P31 wd:Q5; wdt:P856 ?schoolFounder; wdt:P740 wd:Q239156, wd:Q1025759. ?schoolFounder wdt:P800 ?actor1; wdt:P800 ?actor2. ?actor1 rdfs:label ?name1; wdt:P31 wd:Q5. > ?actor2 rdfs:label ?name2; wdt:P31 wd:Q5. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t", "normal_query": "$resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?cinematography_work; \",\n \t\t\"wdt:P161 ?star; \",\n \t\t\"wdt:P865 ?composer; \",\n \t\t\"wdt:P57 ?director_and_editor. \",\n \t\t\"?cinematography_work rdfs:label \\\"Planet Terror\\\"@en; \",\n \t\t\"wdt:P3449 wd:Q210576. \",\n \t\t\"?director_and_editor wdt:P800 wd:Q210576, wd:Q161557, wd:Q1078305.\"\n \t]\n}\n   \t\t\t\t\t  \t      \t \t", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 ?cinematography_work; wdt:P161 ?star; wdt:P865 ?composer; wdt:P57 ?director_and_editor. ?cinematography_work rdfs:label \"Planet Terror\"@en; wdt:P3449 wd:Q210576. ?director_and_editor wdt:P800 wd:Q210576, wd:Q161557, wd:Q1078305. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?pietaEditorAndProducer wdt:P31 wd:Q5.\",\n    \"?pietaEditorAndProducer p:P182/psn:P182 ?pietaWork.\",\n    \"FILTER(?pietaWork = wd:Q409675).\",\n    \"\",\n    \"?dreamAndMoebius wdt:P31 wd:Q11424.\",\n    \"?dreamAndMoebius rdfs:label \\\"Dream and Moebius\\\"@en.\",\n    \"\",\n    \"{?pietaEditorAndProducer p:P160/psn:P160 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P36/P36 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P58/P58 ?dreamAndMoebius.} UNION\",\n    \"{?pietaEditorAndProducer p:P127/P127 ?dreamAndMoebius.}\",\n    \"\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}\n   ", "normal_query": "?pietaEditorAndProducer wdt:P31 wd:Q5. ?pietaEditorAndProducer p:P182/psn:P182 ?pietaWork. FILTER(?pietaWork = wd:Q409675). ?dreamAndMoebius wdt:P31 wd:Q11424. ?dreamAndMoebius rdfs:label \"Dream and Moebius\"@en. {?pietaEditorAndProducer p:P160/psn:P160 ?dreamAndMoebius.} UNION {?pietaEditorAndProducer p:P36/P36 ?dreamAndMoebius.} UNION {?pietaEditorAndProducer p:P58/P58 ?dreamAndMoebius.} UNION {?pietaEditorAndProducer p:P127/P127 ?dreamAndMoebius.} SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?dwGriffithProductions, ?unitedArtistsCorporation, ?davidWGriffithCorp;\",\n \t\t\"wdt:P136 wd:Q247934;\",\n \t\t\"wdt:P57 ?theBrahmaDiamond, ?hisLostLove, ?theBirthOfANation.\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?filmProducer wdt:P31 wd:Q5; wdt:P800 ?dwGriffithProductions, ?unitedArtistsCorporation, ?davidWGriffithCorp; wdt:P136 wd:Q247934; wdt:P57 ?theBrahmaDiamond, ?hisLostLove, ?theBirthOfANation. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P861 wd:Q20794116.\",\n    \"?item wdt:P162 ?executive_producer.\",\n    \"?item wdt:P361 wd:Q20794116.\",\n    \"wd:Q20794116 wdt:P50 ?composer.\",\n    \"wd:Q20794116 wdt:P177 ?cinematographer.\",\n    \"?item wdt:P57 ?director.\",\n    \"{\",\n      \"?film1 wdt:P50 ?item;\",\n              \"wdt:P1476 wd:Q53883888.\",\n    \"}\",\n    \"{\",\n      \"?film2 wdt:P50 ?item;\",\n              \"wdt:P1476 wd:Q53900000.\",\n    \"}\"\n  ]\n}\n   ", "normal_query": "?item wdt:P31 wd:Q5. ?item wdt:P861 wd:Q20794116. ?item wdt:P162 ?executive_producer. ?item wdt:P361 wd:Q20794116. wd:Q20794116 wdt:P50 ?composer. wd:Q20794116 wdt:P177 ?cinematographer. ?item wdt:P57 ?director. { ?film1 wdt:P50 ?item; wdt:P1476 wd:Q53883888. } { ?film2 wdt:P50 ?item; wdt:P1476 wd:Q53900000. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P27 wd:Q30; \",\n \t\t\"wdt:P108 wd:Q496626; \",\n \t\t\"wdt:P108 wd:Q2343558; \",\n \t\t\"wdt:P108 wd:Q15847814; \",\n \t\t\"wdt:P108 wd:Q895072.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?person wdt:P31 wd:Q5; wdt:P27 wd:Q30; wdt:P108 wd:Q496626; wdt:P108 wd:Q2343558; wdt:P108 wd:Q15847814; wdt:P108 wd:Q895072. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person wdt:P106/wdt:P279* wd:Q1485341.\",\n    \"?work wdt:P921 ?person.\",\n    \"?work rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work wdt:P50 ?person.} UNION\",\n    \"{?work wdt:P161 ?person.} UNION\",\n    \"{?work wdt:P345 ?person.} UNION\",\n    \"{?work wdt:P859 ?person.}\",\n    \"?work2 rdfs:label \\\"Planet Terror\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work2 wdt:P50 ?person.} UNION\",\n    \"{?work2 wdt:P161 ?person.} UNION\",\n    \"{?work2 wdt:P345 ?person.} UNION\",\n    \"{?work2 wdt:P859 ?person.}\",\n    \"?work3 rdfs:label \\\"Sin City Once Upon a Time in Mexico\\\"@en;\",\n    \"wdt:P31 wd:Q56047362.\",\n    \"{?work3 wdt:P50 ?person.} UNION\",\n    \"{?work3 wdt:P161 ?person.} UNION\",\n    \"{?work3 wdt:P345 ?person.} UNION\",\n    \"{?work3 wdt:P859 ?person.}\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?person wdt:P31 wd:Q5. ?person wdt:P106/wdt:P279* wd:Q1485341. ?work wdt:P921 ?person. ?work rdfs:label \"The Adventures of Sharkboy and Lavagirl in 3-D\"@en; wdt:P31 wd:Q56047362. {?work wdt:P50 ?person.} UNION {?work wdt:P161 ?person.} UNION {?work wdt:P345 ?person.} UNION {?work wdt:P859 ?person.} ?work2 rdfs:label \"Planet Terror\"@en; wdt:P31 wd:Q56047362. {?work2 wdt:P50 ?person.} UNION {?work2 wdt:P161 ?person.} UNION {?work2 wdt:P345 ?person.} UNION {?work2 wdt:P859 ?person.} ?work3 rdfs:label \"Sin City Once Upon a Time in Mexico\"@en; wdt:P31 wd:Q56047362. {?work3 wdt:P50 ?person.} UNION {?work3 wdt:P161 ?person.} UNION {?work3 wdt:P345 ?person.} UNION {?work3 wdt:P859 ?person.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?execProducerWriter wdt:P31 wd:Q5 ;\",\n    \"wdt:P856 wd:Q50442795 ;\",\n    \"p:P1416/psn:P1416 ?companies .\",\n    \"{?companies wdt:P31/wdt:P279* wd:Q4830453.}\",\n    \"FILTER (?companies = wd:Q1025804 || ?companies = wd:Q1025805 || ?companies = wd:Q665457 || ?companies = wd:Q1025809 || ?companies = wd:Q1025803 || ?companies = wd:Q1025802)\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?execProducerWriter wdt:P31 wd:Q5 ; wdt:P856 wd:Q50442795 ; p:P1416/psn:P1416 ?companies . {?companies wdt:P31/wdt:P279* wd:Q4830453.} FILTER (?companies = wd:Q1025804 || ?companies = wd:Q1025805 || ?companies = wd:Q665457 || ?companies = wd:Q1025809 || ?companies = wd:Q1025803 || ?companies = wd:Q1025802) SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q5.\",\n    \"?resource wdt:P800 ?cinematographyWork .\",\n    \"FILTER (?cinematographyWork = wd:Q492675 || ?cinematographyWork = wd:Q105897555 || ?cinematographyWork = wd:Q103077575 || ?cinematographyWork = wd:Q105900075).\",\n    \"?resource wdt:P57 ?writtenWork .\",\n    \"FILTER (?writtenWork = wd:Q492675 || ?writtenWork = wd:Q105897555 || ?writtenWork = wd:Q103077575 || ?writtenWork = wd:Q105900075).\",\n    \"?resource wdt:P1629 wd:Q74148.\",\n    \"?resource wdt:P57 wd:Q74148.\"\n  ]\n}", "normal_query": "?resource wdt:P31 wd:Q5. ?resource wdt:P800 ?cinematographyWork . FILTER (?cinematographyWork = wd:Q492675 || ?cinematographyWork = wd:Q105897555 || ?cinematographyWork = wd:Q103077575 || ?cinematographyWork = wd:Q105900075). ?resource wdt:P57 ?writtenWork . FILTER (?writtenWork = wd:Q492675 || ?writtenWork = wd:Q105897555 || ?writtenWork = wd:Q103077575 || ?writtenWork = wd:Q105900075). ?resource wdt:P1629 wd:Q74148. ?resource wdt:P57 wd:Q74148. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P31 wd:Q5.\",\n    \"?cinematographer p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"?editor wdt:P31 wd:Q5.\",\n    \"?editor p:P102/ps:P102/wdt:P31 wd:Q28644796.\",\n    \"wd:Q1088799 wdt:P57 ?cinematographer;\",\n    \"wdt:P58 ?director;\",\n    \"wdt:P720 ?editor.\",\n    \"?film1 wdt:P58 ?director;\",\n    \"wdt:P361 wd:Q493819.\",\n    \"?film2 wdt:P58 ?director;\",\n    \"wdt:P361 wd:Q493819.\",\n    \"{?film1 wdt:P1476 \\\"Twin Peaks\\\".}\",\n    \"{?film2 wdt:P1476 \\\"Twin Peaks: Fire Walk with Me\\\".}\",\n    \"?film3 wdt:P58 ?director;\",\n    \"wdt:P1476 \\\"My Son, My Son, What Have Ye Done\\\".\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?cinematographer wdt:P31 wd:Q5. ?cinematographer p:P102/ps:P102/wdt:P31 wd:Q28644796. ?director wdt:P31 wd:Q5. ?director p:P102/ps:P102/wdt:P31 wd:Q28644796. ?editor wdt:P31 wd:Q5. ?editor p:P102/ps:P102/wdt:P31 wd:Q28644796. wd:Q1088799 wdt:P57 ?cinematographer; wdt:P58 ?director; wdt:P720 ?editor. ?film1 wdt:P58 ?director; wdt:P361 wd:Q493819. ?film2 wdt:P58 ?director; wdt:P361 wd:Q493819. {?film1 wdt:P1476 \"Twin Peaks\".} {?film2 wdt:P1476 \"Twin Peaks: Fire Walk with Me\".} ?film3 wdt:P58 ?director; wdt:P1476 \"My Son, My Son, What Have Ye Done\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P86 ?work1; \",\n \t\t\"wdt:P86 ?work2; \",\n \t\t\"wdt:P86 ?work3; \",\n \t\t\"wdt:P86 ?work4; \",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q190655 ];\",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q206151 ];\",\n \t\t\"wdt:P40 [ wdt:P735 wd:Q85005 ].\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?person wdt:P31 wd:Q5; wdt:P86 ?work1; wdt:P86 ?work2; wdt:P86 ?work3; wdt:P86 ?work4; wdt:P40 [ wdt:P735 wd:Q190655 ]; wdt:P40 [ wdt:P735 wd:Q206151 ]; wdt:P40 [ wdt:P735 wd:Q85005 ]. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5; \",\n    \"wdt:P800 ?work; \",\n    \"wdt:P2093 wd:Q46785; \",\n    \"wdt:P3210 wd:Q46785; \",\n    \"wdt:P57 ?director. \",\n    \"?work wdt:P50 ?item; \",\n    \"wdt:P425 wd:Q46785; \",\n    \"wdt:P710 ?editor. \",\n    \"{?editor wdt:P31 wd:Q5.} UNION {?director wdt:P31 wd:Q5.}\",\n    \"?item rdfs:label ?name.\",\n    \"FILTER(LANG(?name) = 'en')\",\n    \"FILTER(?work = wd:Q46785)\"\n  ]\n}\n    ", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 ?work; wdt:P2093 wd:Q46785; wdt:P3210 wd:Q46785; wdt:P57 ?director. ?work wdt:P50 ?item; wdt:P425 wd:Q46785; wdt:P710 ?editor. {?editor wdt:P31 wd:Q5.} UNION {?director wdt:P31 wd:Q5.} ?item rdfs:label ?name. FILTER(LANG(?name) = 'en') FILTER(?work = wd:Q46785) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?grandCanyonDistributor wdt:P31 wd:Q7584906 ;\",\n    \"wdt:P1411 ?acquisitionEvent .\",\n    \"?acquisitionEvent wdt:P1266 wd:Q50935576 , wd:Q10856589 , wd:Q205507 , wd:Q10856584 , wd:Q10856585 .\"\n  ]\n}\n    ", "normal_query": "?grandCanyonDistributor wdt:P31 wd:Q7584906 ; wdt:P1411 ?acquisitionEvent . ?acquisitionEvent wdt:P1266 wd:Q50935576 , wd:Q10856589 , wd:Q205507 , wd:Q10856584 , wd:Q10856585 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5; \",\n \t\t\"wdt:P800 ?film_works.\",\n \t\t\"{?film_works wdt:P31/wdt:P279* wd:Q1142422.} UNION {?film_works wdt:P31/wdt:P279* wd:Q5006568.}\",\n \t\t\"FILTER(?film_works = wd:Q181458 || ?film_works = wd:Q181460 || ?film_works = wd:Q181453 || ?film_works = wd:Q181457).\",\n \t\t\"?item wdt:P136 wd:Q29456.\"\n \t]\n}", "normal_query": "?item wdt:P31 wd:Q5; wdt:P800 ?film_works. {?film_works wdt:P31/wdt:P279* wd:Q1142422.} UNION {?film_works wdt:P31/wdt:P279* wd:Q5006568.} FILTER(?film_works = wd:Q181458 || ?film_works = wd:Q181460 || ?film_works = wd:Q181453 || ?film_works = wd:Q181457). ?item wdt:P136 wd:Q29456. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?director wdt:P31 wd:Q5.\",\n    \"?director wdt:P800 ?film1.\",\n    \"?film1 rdfs:label \\\"There Will Be No Leave Today\\\"@en.\",\n    \"?director wdt:P800 ?film2.\",\n    \"?film2 rdfs:label \\\"The Killers\\\"@en.\",\n    \"?director p:P161/ps:P161 wd:Q73295.\", \">// Lars von Trier influenced by director (assuming P161 is the property for influence, which might not be accurate and needs to be checked in Wikidata for exact property usage regarding influences in film industry context. Influence relations can vary widely and may require more specific properties or qualifiers depending on how they are recorded in Wikidata entries. For example, \"] }\n  ", "normal_query": "?director wdt:P31 wd:Q5. ?director wdt:P800 ?film1. ?film1 rdfs:label \"There Will Be No Leave Today\"@en. ?director wdt:P800 ?film2. ?film2 rdfs:label \"The Killers\"@en. ?director p:P161/ps:P161 wd:Q73295. >// Lars von Trier influenced by director (assuming P161 is the property for influence, which might not be accurate and needs to be checked in Wikidata for exact property usage regarding influences in film industry context. Influence relations can vary widely and may require more specific properties or qualifiers depending on how they are recorded in Wikidata entries. For example, LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5; \",\n \t\t\"wdt:P40 wd:Q2689768; \", \">// Oona O'Neill as child, not spouse, correcting for accurate representation in Wikidata structure might be needed based on actual data structure. Ideally, we would look for spouses but direct property for spouses may vary or require more specific qualifiers or statements to accurately represent the marriages mentioned without assuming a direct property exists that encompasses all three marriages specifically as stated in the question which could be complex due to timeframes and nature of relationships recorded in Wikidata entries. For simplicity, this example focuses on one relationship with Oona O'Neill as an indicative approach but does not fully encapsulate the full complexity of the original query's requirements accurately without further specific data exploration or correction for accurate representation based on actual Wikidata structure and properties used for such historical figures and their relationships. \",\n \t\t\"wdt:P800 wd:Q15764; \", \">// Influenced Federico Fellini (as an example, the query would need to be expanded to include all influences mentioned but for simplicity, one is shown here with the understanding that a full representation would require additional qualifiers or union of statements for each influence mentioned in the original question. The structure provided focuses on demonstrating inclusion of one such influence as indicative approach. \",\n \t\t\"wdt:P31/wdt:P279* wd:Q11424; \", \">// Film editor (classifying by occupation, this is a simplification and may require more specific qualifiers or statements based on actual Wikidata structure for accurate representation of the role as film editor. The property used here is indicative but might need adjustment based on how occupations are classified in Wikidata entries for historical figures. \",\n \t\t\"wdt:P1416 wd:Q579082.\" , \">// Founding member of United Artists (this assumes a direct property exists linking individuals to the founding of organizations which may require more specific qualifiers or statements based on actual data structure in Wikidata for accurate representation. The property used here is indicative but might need adjustment based on how such historical organizational roles are recorded in Wikidata entries. \",\n \t\t\"?person\"\n \t]\n }", "normal_query": "?person wdt:P31 wd:Q5; wdt:P40 wd:Q2689768; >// Oona O'Neill as child, not spouse, correcting for accurate representation in Wikidata structure might be needed based on actual data structure. Ideally, we would look for spouses but direct property for spouses may vary or require more specific qualifiers or statements to accurately represent the marriages mentioned without assuming a direct property exists that encompasses all three marriages specifically as stated in the question which could be complex due to timeframes and nature of relationships recorded in Wikidata entries. For simplicity, this example focuses on one relationship with Oona O'Neill as an indicative approach but does not fully encapsulate the full complexity of the original query's requirements accurately without further specific data exploration or correction for accurate representation based on actual Wikidata structure and properties used for such historical figures and their relationships. wdt:P800 wd:Q15764; >// Influenced Federico Fellini (as an example, the query would need to be expanded to include all influences mentioned but for simplicity, one is shown here with the understanding that a full representation would require additional qualifiers or union of statements for each influence mentioned in the original question. The structure provided focuses on demonstrating inclusion of one such influence as indicative approach. wdt:P31/wdt:P279* wd:Q11424; >// Film editor (classifying by occupation, this is a simplification and may require more specific qualifiers or statements based on actual Wikidata structure for accurate representation of the role as film editor. The property used here is indicative but might need adjustment based on how occupations are classified in Wikidata entries for historical figures. wdt:P1416 wd:Q579082. >// Founding member of United Artists (this assumes a direct property exists linking individuals to the founding of organizations which may require more specific qualifiers or statements based on actual data structure in Wikidata for accurate representation. The property used here is indicative but might need adjustment based on how such historical organizational roles are recorded in Wikidata entries. ?person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q208496 . \",\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q1601655 .\",\n \t\t\"?director ?star ?writer wdt:P1357 wd:Q1601657 .\",\n \t\t\"wdt:P26 ?spouse .\",\n \t\t\"{?spouse wdt:P856 wd:Q208496.} UNION {?spouse wdt:P862 wd:Q208496.}\",\n \t\t\"?director ?star ?writer ?spouse.\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?director ?star ?writer wdt:P1357 wd:Q208496 . ?director ?star ?writer wdt:P1357 wd:Q1601655 . ?director ?star ?writer wdt:P1357 wd:Q1601657 . wdt:P26 ?spouse . {?spouse wdt:P856 wd:Q208496.} UNION {?spouse wdt:P862 wd:Q208496.} ?director ?star ?writer ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?company wdt:P31 wd:Q4830453 ;\", \">// Instance of company/distributor/producer\\n\",\n    \"?company wdt:P1756 ?acquirer .\", \">// Acquired by\\n\",\n    \"{?acquirer rdfs:label \\\"The Vanguard Group\\\"@en.} UNION {?acquirer rdfs:label \\\"BlackRock\\\"@en.}\", \">// The acquirers are either The Vanguard Group or BlackRock\\n\",\n    \"?company wdt:P1758 ?product .\", \">// Product or service\\n\",\n    \"{?product rdfs:label \\\"Amazon CloudFront\\\"@en.} UNION {?product rdfs:label \\\"Kindle\\\"@en.} UNION {?product rdfs:label \\\"AbeBooks\\\"@en.}\", \">// The products are Amazon CloudFront, Kindle, and AbeBooks\\n\",\n    \"FILTER NOT EXISTS { ?company wdt:P136 wd:Q507892 }\", \">// Exclude the condition related to Mozart in the Jungle as it seems misaligned with the acquisition context provided.\\n\"\n  ]\n}\n    ", "normal_query": "?company wdt:P31 wd:Q4830453 ; >// Instance of company/distributor/producer ?company wdt:P1756 ?acquirer . >// Acquired by {?acquirer rdfs:label \"The Vanguard Group\"@en.} UNION {?acquirer rdfs:label \"BlackRock\"@en.} >// The acquirers are either The Vanguard Group or BlackRock ?company wdt:P1758 ?product . >// Product or service {?product rdfs:label \"Amazon CloudFront\"@en.} UNION {?product rdfs:label \"Kindle\"@en.} UNION {?product rdfs:label \"AbeBooks\"@en.} >// The products are Amazon CloudFront, Kindle, and AbeBooks FILTER NOT EXISTS { ?company wdt:P136 wd:Q507892 } >// Exclude the condition related to Mozart in the Jungle as it seems misaligned with the acquisition context provided. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q1485889.\", \">// Star (occupation subclass of actor or performer, not exact match for star but closest available in Wikidata as of my last update in 2023 and may need adjustment based on the current structure of Wikidata entities and properties. For a more precise query, you might want to use wd:Q1650918 (for film actor) or another specific subclass of performer/actor that best fits your needs).\",\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q43282.\", \">// Editor (occupation subclass of editor, similar note as above for exact match)\"\n    ,\n    \"?item p:P106/psn:P106/wdt:P279* wd:Q1545612.\", \">// Cinematographer (occupation subclass of cinematographer, similar note as above for exact match)\"\n    ,\n    \"OPTIONAL { ?item wdt:P136 wd:Q80948. }\", \">// Genre is horror, which might be implied by the films mentioned but not directly stated in the question.\"\n    ,\n    \"?film1 wdt:P577 ?date1.\",\n    \"?film1 wdt:P161 ?item.\",\n    \"FILTER(?film1 = wd:Q208493 || ?film1 = wd:Q208494).\", \">// Female Vampire and No label defined, using Q-codes for the films. Note that 'No label defined' is not a real film title and should be replaced with the correct Wikidata item ID.\"\n    ,\n    \"?item wdt:P106 wd:Q36582.\", \">// Spanish writer (occupation)\"\n    ,\n    \"?film2 wdt:P577 ?date2.\",\n    \"?film2 wdt:P161 ?item.\",\n    \"FILTER(?film2 = wd:Q9458 || ?film2 = wd:Q208493 || ?film2 = wd:Q208494).\", \">// 99 Women, No label defined, and The Blood of Fu Manchu. Again, 'No label defined' should be replaced with the correct Wikidata item ID.\"\n    ,\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"es\\\". }\" ,\n    \"?item\"\n  ]\n}", "normal_query": "?item wdt:P31 wd:Q5. ?item p:P106/psn:P106/wdt:P279* wd:Q1485889. >// Star (occupation subclass of actor or performer, not exact match for star but closest available in Wikidata as of my last update in 2023 and may need adjustment based on the current structure of Wikidata entities and properties. For a more precise query, you might want to use wd:Q1650918 (for film actor) or another specific subclass of performer/actor that best fits your needs). ?item p:P106/psn:P106/wdt:P279* wd:Q43282. >// Editor (occupation subclass of editor, similar note as above for exact match) ?item p:P106/psn:P106/wdt:P279* wd:Q1545612. >// Cinematographer (occupation subclass of cinematographer, similar note as above for exact match) OPTIONAL { ?item wdt:P136 wd:Q80948. } >// Genre is horror, which might be implied by the films mentioned but not directly stated in the question. ?film1 wdt:P577 ?date1. ?film1 wdt:P161 ?item. FILTER(?film1 = wd:Q208493 || ?film1 = wd:Q208494). >// Female Vampire and No label defined, using Q-codes for the films. Note that 'No label defined' is not a real film title and should be replaced with the correct Wikidata item ID. ?item wdt:P106 wd:Q36582. >// Spanish writer (occupation) ?film2 wdt:P577 ?date2. ?film2 wdt:P161 ?item. FILTER(?film2 = wd:Q9458 || ?film2 = wd:Q208493 || ?film2 = wd:Q208494). >// 99 Women, No label defined, and The Blood of Fu Manchu. Again, 'No label defined' should be replaced with the correct Wikidata item ID. SERVICE wikibase:label { bd:serviceParam wikibase:language \"es\". } ?item LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?person wdt:P31 wd:Q5.\",\n    \"?person p:P86 wd:Q40722;\", \">// Industrial Light & Magic founder (Note: This part might need adjustment as George Lucas is the founder, not a cinematographer directly in this context. The query assumes a direct relation which may not be accurate in Wikidata structure for cinematographers specifically founding ILM and THX. Adjust according to actual relations available in Wikidata.)\",\n    \"?person p:P86 wd:Q107592;\", \">// THX founder (Similar note as above applies here too)\"\n    ,\"?person wdt:P2204 ?spouse.\",\n    \"?spouse rdfs:label 'Mellody Hobson'@en.\"\n  ]\n}", "normal_query": "?person wdt:P31 wd:Q5. ?person p:P86 wd:Q40722; >// Industrial Light & Magic founder (Note: This part might need adjustment as George Lucas is the founder, not a cinematographer directly in this context. The query assumes a direct relation which may not be accurate in Wikidata structure for cinematographers specifically founding ILM and THX. Adjust according to actual relations available in Wikidata.) ?person p:P86 wd:Q107592; >// THX founder (Similar note as above applies here too) ?person wdt:P2204 ?spouse. ?spouse rdfs:label 'Mellody Hobson'@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer ?cinematographerLabel .\",\n    \"wd:Q46905 wdt:P161 ?cinematographer .\", \">// Inception (Q46905) has cinematographer (?cinematographer as star and cinematographer of the movie Inception, this might need adjustment based on exact Wikidata structure for roles played by a person in a film project. The query assumes that there is a property linking movies to their cinematographers who are also stars, which may not be directly available in Wikidata without further refinement or additional properties being used to specify roles more precisely. Adjustments would depend on the actual data model of Wikidata for such relationships.//) .\",\n    \"wd:Q1067895 wdt:P161 ?cinematographer .\", \">// Game Over (Q1067895) has cinematographer (?cinematographer as star and cinematographer of the movie Game Over, similar adjustments may be needed here too.) .\",\n    \"wd:Q243055 wdt:P161 ?cinematographer .\", \">// Liberation (Q243055) has cinematographer (?cinematographer as star and cinematographer of the movie Liberation, similar adjustments may be needed here too.) .\",\n    \"?madness wdt:P57 ?cinematographer .\", \">// The Madness (replace with QID if known) has director/producer/editor (?cinematographer) .\",\n    \"wd:Q1067895 wdt:P31 wd:Q11424. \", \">// Ensure Game Over is a film.\",\n    \"wd:Q46905 wdt:P31 wd:Q11424. \", \">// Ensure Inception is a film.\",\n    \"wd:Q243055 wdt:P31 wd:Q11424. \", \">// Ensure Liberation is a film.\",\n    \"?cinematographer wdt:P31 wd:Q5 .\", \">// ?cinematographer is a human.\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n  ]\n}", "normal_query": "?cinematographer ?cinematographerLabel . wd:Q46905 wdt:P161 ?cinematographer . >// Inception (Q46905) has cinematographer (?cinematographer as star and cinematographer of the movie Inception, this might need adjustment based on exact Wikidata structure for roles played by a person in a film project. The query assumes that there is a property linking movies to their cinematographers who are also stars, which may not be directly available in Wikidata without further refinement or additional properties being used to specify roles more precisely. Adjustments would depend on the actual data model of Wikidata for such relationships.//) . wd:Q1067895 wdt:P161 ?cinematographer . >// Game Over (Q1067895) has cinematographer (?cinematographer as star and cinematographer of the movie Game Over, similar adjustments may be needed here too.) . wd:Q243055 wdt:P161 ?cinematographer . >// Liberation (Q243055) has cinematographer (?cinematographer as star and cinematographer of the movie Liberation, similar adjustments may be needed here too.) . ?madness wdt:P57 ?cinematographer . >// The Madness (replace with QID if known) has director/producer/editor (?cinematographer) . wd:Q1067895 wdt:P31 wd:Q11424. >// Ensure Game Over is a film. wd:Q46905 wdt:P31 wd:Q11424. >// Ensure Inception is a film. wd:Q243055 wdt:P31 wd:Q11424. >// Ensure Liberation is a film. ?cinematographer wdt:P31 wd:Q5 . >// ?cinematographer is a human. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?writerCinematographer wdt:P800 wd:Q21947563; # The Emperor (film) writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q710095; # Anyone Lived in a Pretty How Town writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q21947563; # 1:42.08 (film) writer or cinematographer\\n\",\n \t \"wdt:P800 wd:Q1605076. # Herbie: Fully Loaded writer or cinematographer\\n\",\n \t \"?writerCinematographer wdt:P40 ?spouse. # married a person\\n\",\n \t \"?writerCinematographer wdt:P793 wd:Q281556. # influenced Marcus O'Reilly\\n\",\n \t \"?writerCinematographer wdt:P793 wd:Q15974810.\" ]}", "normal_query": "?writerCinematographer wdt:P800 wd:Q21947563; wdt:P800 wd:Q710095; wdt:P800 wd:Q21947563; wdt:P800 wd:Q1605076. ?writerCinematographer wdt:P40 ?spouse. ?writerCinematographer wdt:P793 wd:Q281556. ?writerCinematographer wdt:P793 wd:Q15974810. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P372 ?film.\",\n    \"?film wdt:P577 wd:Q189046.\", \">// Uzak's release date, used to identify the film as it might not have a direct relation with Nuri Bilge Ceylan in this context for simplicity sake. A more accurate query would require additional information or relations that directly link films to their director and cinematographer without ambiguity.\",\n    \"?film2 wdt:P577 wd:Q189043.\", \">// Clouds of May's release date, similar note as above applies here too.\"\n    ]\n}\n   ", "normal_query": "?cinematographer wdt:P372 ?film. ?film wdt:P577 wd:Q189046. >// Uzak's release date, used to identify the film as it might not have a direct relation with Nuri Bilge Ceylan in this context for simplicity sake. A more accurate query would require additional information or relations that directly link films to their director and cinematographer without ambiguity. ?film2 wdt:P577 wd:Q189043. >// Clouds of May's release date, similar note as above applies here too. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P800 wd:Q760425; \", \">// Vagabond (film) written by ?director, Q760425 is the Wikidata ID for \" , \"Vagabond\", \" \"\n \t\t,\"wdt:P800 wd:Q139552;\", \">// The Gleaners and I written by ?director, Q139552 is the Wikidata ID for \" , \"The Gleaners and I\", \" \"\n \t\t,\"wdt:P800 wd:Q60745986;\", \">// Varda by Agnès written by ?director, Q60745986 is the Wikidata ID for \" , \"Varda by Agnès\", \" \"\n \t\t,\"wdt:P1365 wd:Q219845.\" , \">// ?director edited by Jacques Demy, Q219845 is the Wikidata ID for Jacques Demy. P1365 represents 'editor of work'. However, this property might not be accurate for the intended relationship; it's used here as a placeholder for demonstration purposes. The correct properties should be identified based on the actual relationships in Wikidata. \"\n \t]\n}", "normal_query": "?director wdt:P800 wd:Q760425; >// Vagabond (film) written by ?director, Q760425 is the Wikidata ID for Vagabond wdt:P800 wd:Q139552; >// The Gleaners and I written by ?director, Q139552 is the Wikidata ID for The Gleaners and I wdt:P800 wd:Q60745986; >// Varda by Agnès written by ?director, Q60745986 is the Wikidata ID for Varda by Agnès wdt:P1365 wd:Q219845. >// ?director edited by Jacques Demy, Q219845 is the Wikidata ID for Jacques Demy. P1365 represents 'editor of work'. However, this property might not be accurate for the intended relationship; it's used here as a placeholder for demonstration purposes. The correct properties should be identified based on the actual relationships in Wikidata. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"?resource wdt:P31 wd:Q7204586.\",\n    \"?resource p:P1377 ?statement.\",\n    \"?statement ps:P1377 wd:Q196455.\",\n    \"?statement ps:P1377 wd:Q196456.\",\n    \"?statement ps:P1377 wd:Q208510.\",\n    \"?statement ps:P1377 wd:Q196457.\",\n    \"?resource p:P1377 ?statement2.\",\n    \"?statement2 ps:P1377 wd:Q196458.\",\n    \"?statement2 ps:P1377 wd:Q196459.\"\n  ]\n}", "normal_query": "?resource wdt:P31 wd:Q7204586. ?resource p:P1377 ?statement. ?statement ps:P1377 wd:Q196455. ?statement ps:P1377 wd:Q196456. ?statement ps:P1377 wd:Q208510. ?statement ps:P1377 wd:Q196457. ?resource p:P1377 ?statement2. ?statement2 ps:P1377 wd:Q196458. ?statement2 ps:P1377 wd:Q196459. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "direct", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t \"?film wdt:P31 wd:Q11424; # instance of film/movie\\n\",\n \t \"wdt:P57 ?director; # directed by\\n\",\n \t \"wdt:P162 ?producer; # produced by\\n\",\n \t \"wdt:P921 wd:Q508239; # written by Randolph Scott (Q508239)\\n\",\n \t \"wdt:P921 wd:Q479025; # written by Miriam Hopkins (Q479025)\\n\",\n \t \"wdt:P921 wd:Q46845; # written by Humphrey Bogart (Q46845)\\n\",\n \t \"wdt:P921 wd:Q435595; # written by Robert Buckner (Q435595)\\n\",\n \t \"wdt:P161 wd:Q47008; # starring Errol Flynn (Q47008)\\n\",\n \t \"wdt:P161 wd:Q203856. # starring Paul Fix (Q203856)\"\n \t]\n}", "normal_query": "?film wdt:P31 wd:Q11424; wdt:P57 ?director; wdt:P162 ?producer; wdt:P921 wd:Q508239; wdt:P921 wd:Q479025; wdt:P921 wd:Q46845; wdt:P921 wd:Q435595; wdt:P161 wd:Q47008; wdt:P161 wd:Q203856. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P735 wd:Q2069488 .\", \">// given name Hans\",\n    \"?resource wdt:P736 wd:Q188481 .\", \">// family name Ertl\",\n    \"OPTIONAL { ?resource wdt:P106 wd:Q211952 . }\", \">// occupation screenwriter\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdt:P735 wd:Q2069488 . >// given name Hans ?resource wdt:P736 wd:Q188481 . >// family name Ertl OPTIONAL { ?resource wdt:P106 wd:Q211952 . } >// occupation screenwriter } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?composer wdt:P106 wd:Q214917 .\", \">// occupation is composer\",\n    \"?composer rdfs:label 'Bob Dylan'@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . >// instance of human ?composer wdt:P106 wd:Q214917 . >// occupation is composer ?composer rdfs:label 'Bob Dylan'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Bob Dylan\nwdt:P106 is occupation\nwd:Q36834 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q392 wdt:P106 wd:Q36834 .\",\n    \"  BIND(wd:Q392 AS ?resource)\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q392 wdt:P106 wd:Q36834 . BIND(wd:Q392 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer Bob Dylan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1945 is Bob Dylan\nkg:9940 is occupation\nkg:5667 is composer", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1945 kg:9940 kg:5667 .\",\n    \"  kg:1945 rdfs:label ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q392 wdt:P106 wd:Q36834 . wd:Q392 rdfs:label ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P1785 ?discovery .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . ?resource wdt:P1785 ?discovery . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwd:Q5 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P112 wd:Q5 .\",\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did human found", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0709 is founded by\nkg:4923 is human", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0709 kg:4923 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P136 wd:Q208754 .\", \">// Andrei Tarkovsky's films (P136 is the property for 'genre' and Q208754 is 'film')\"\n    ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P136 wd:Q208754 . >// Andrei Tarkovsky's films (P136 is the property for 'genre' and Q208754 is 'film') LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q296475 wdt:P155 ?sequel .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q296475 wdt:P155 ?sequel . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q167 wdt:P179 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q167 wdt:P179 ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"wd:Q187243 wdt:P22 ?parent .\",\n    \"} UNION {\",\n    \"wd:Q187243 wdt:P25 ?parent .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q187243 wdt:P22 ?parent . } UNION { wd:Q187243 wdt:P25 ?parent . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?work WHERE {\",\n    \"?work wdt:P50 wd:Q42 .\",\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?work WHERE { ?work wdt:P50 wd:Q42 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q42 is Douglas Adams", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q42 wdt:P58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q42 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Douglas Adams", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8450 is screenwriter\nkg:7016 is Douglas Adams", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8450 kg:7016 .\",\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q42 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"?resource wdt:P108 wd:Q42679 .\", \">// Employed by Austria (assuming Q42679 is the correct ID for 'Austria' as an employer)\",\n    \"?resource rdfs:label ?label .\",\n    \"FILTER(LANG(?label) = 'en') .\",\n    \"FILTER(?resource = wd:Q12345678) .\" ,\"\\t// Replace Q12345678 with the actual Wikidata ID for Max Margules\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Ensure it's a person ?resource wdt:P108 wd:Q42679 . >// Employed by Austria (assuming Q42679 is the correct ID for 'Austria' as an employer) ?resource rdfs:label ?label . FILTER(LANG(?label) = 'en') . FILTER(?resource = wd:Q12345678) . // Replace Q12345678 with the actual Wikidata ID for Max Margules LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q57274860 .\", \">// Instance of literary work\",\n    \"?resource wdt:P50 wd:Q96 .\", \">// Author is J.R.R. Tolkien\",\n    \"?resource rdfs:label 'The Hobbit: An Unexpected Journey'@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q57274860 . >// Instance of literary work ?resource wdt:P50 wd:Q96 . >// Author is J.R.R. Tolkien ?resource rdfs:label 'The Hobbit: An Unexpected Journey'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P577 ?date .\", \">// Publication date\",\n    \"?resource wdt:P161 wd:Q289012 .\", \">// Starring Bruce Willis\",\n    \"?resource wdt:P725 wd:Q289012 .\", \">// Executive producer Bruce Willis\",\n    \"FILTER(?resource = wd:Q43718) .\", \">// A Good Day to Die Hard\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P577 ?date . >// Publication date ?resource wdt:P161 wd:Q289012 . >// Starring Bruce Willis ?resource wdt:P725 wd:Q289012 . >// Executive producer Bruce Willis FILTER(?resource = wd:Q43718) . >// A Good Day to Die Hard } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"wd:Q15639478 wdt:P108 ?costumeDesigner .\",\n    \"?costumeDesigner wdt:P106 wd:Q211756 .\",\n    \"} LIMIT 1\"\n  ]\n}\n \t\t\t\t\t\t\t", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q15639478 wdt:P108 ?costumeDesigner . ?costumeDesigner wdt:P106 wd:Q211756 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer WHERE {\",\n    \"?film wdt:P31 wd:Q2009654 .\", \">// Olympia (film)\",\n    \"?film wdt:P86 ?screenwriter .\",\n    \"?film wdt:P186 ?cinematographer .\",\n    \"FILTER(?cinematographer = ?screenwriter) .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { ?film wdt:P31 wd:Q2009654 . >// Olympia (film) ?film wdt:P86 ?screenwriter . ?film wdt:P186 ?cinematographer . FILTER(?cinematographer = ?screenwriter) . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P26 wd:Q174890 .\", \">// spouse of Erich Honecker\",\n    \"?person wdt:P102 wd:Q175115 .\", \">// member of Free German Youth\",\n    \"OPTIONAL { ?person wdt:P39 ?position . }\", \">// position held (if any)\",\n    \"FILTER EXISTS { ?person wdt:P108 wd:Q175115 . }\", \">// employed by Free German Youth\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . >// person is an instance of human ?person wdt:P26 wd:Q174890 . >// spouse of Erich Honecker ?person wdt:P102 wd:Q175115 . >// member of Free German Youth OPTIONAL { ?person wdt:P39 ?position . } >// position held (if any) FILTER EXISTS { ?person wdt:P108 wd:Q175115 . } >// employed by Free German Youth } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q210746 wdt:P178 ?composer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q210746 wdt:P178 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P1478 \\\"Al Compás de tu Mentira\\\" .\",\n    \"?work wdt:P86 ?composer .\",\n    \"?composer wdt:P106 wd:Q211953 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?work wdt:P1478 \"Al Compás de tu Mentira\" . ?work wdt:P86 ?composer . ?composer wdt:P106 wd:Q211953 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?work wdt:P1472 wd:Q568930 .\", \">// The Chess Players (Q568930)\",\n    \"?work wdt:P86 ?composer .\",\n    \"?composer wdt:P106 wd:Q19235 .\", \">// cinematographer (Q19235)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?work wdt:P1472 wd:Q568930 . >// The Chess Players (Q568930) ?work wdt:P86 ?composer . ?composer wdt:P106 wd:Q19235 . >// cinematographer (Q19235) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q168459 wdt:P179 ?series .\", \">// Microsoft Flight Simulator 2004 is part of a series\",\n    \"  ?sequel wdt:P179 ?series .\", \">// The sequel is also part of the same series\",\n    \"  ?sequel wdt:P31 wd:Q7397 .\", \">// The sequel is a video game\",\n    \"  ?sequel wdt:P577 ?date .\", \">// The sequel has a publication date\",\n    \"  FILTER(?date > \\\"2004-01-01T00:00:00Z\\\"^^xsd:dateTime) .\", \">// The sequel was released after 2004\",\n    \"} ORDER BY ?date LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q168459 wdt:P179 ?series . >// Microsoft Flight Simulator 2004 is part of a series ?sequel wdt:P179 ?series . >// The sequel is also part of the same series ?sequel wdt:P31 wd:Q7397 . >// The sequel is a video game ?sequel wdt:P577 ?date . >// The sequel has a publication date FILTER(?date > \"2004-01-01T00:00:00Z\"^^xsd:dateTime) . >// The sequel was released after 2004 } ORDER BY ?date LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q2487569 .\", \">// Instance of television series\",\n    \"?sequel wdt:P179 wd:Q105464 .\", \">// Part of Twin Peaks\",\n    \"?sequel wdt:P161 wd:Q2093872 .\", \">// Starring James Parks\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q2487569 . >// Instance of television series ?sequel wdt:P179 wd:Q105464 . >// Part of Twin Peaks ?sequel wdt:P161 wd:Q2093872 . >// Starring James Parks } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P27 wd:Q30 .\", \">// person is from the United States\",\n    \"?person wdt:P40 wd:Q6891511 .\", \">// person has child Malia Obama\",\n    \"?company wdt:P31 wd:Q783794 .\", \">// company is an instance of film production company\",\n    \"?company wdt:P17 wd:Q30 .\", \">// company is located in the United States\",\n    \"?company wdt:P112 ?person .\", \">// person is a founder of the company\",\n    \"?company wdt:P1813 'Higher Ground Productions'@en .\", \">// company name is Higher Ground Productions\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . >// person is an instance of human ?person wdt:P27 wd:Q30 . >// person is from the United States ?person wdt:P40 wd:Q6891511 . >// person has child Malia Obama ?company wdt:P31 wd:Q783794 . >// company is an instance of film production company ?company wdt:P17 wd:Q30 . >// company is located in the United States ?company wdt:P112 ?person . >// person is a founder of the company ?company wdt:P1813 'Higher Ground Productions'@en . >// company name is Higher Ground Productions } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q2637 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q4951718 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q2637 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q4951718 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q286479 wdt:P108 ?employer .\", \">// Dr. Dre's employer\",\n    \"  ?employer wdt:P361 wd:Q25094144 .\", \">// Animal Crossing: Pocket Camp distributor\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q286479 wdt:P108 ?employer . >// Dr. Dre's employer ?employer wdt:P361 wd:Q25094144 . >// Animal Crossing: Pocket Camp distributor } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"wd:Q3025498 wdt:P1039 wd:Q76 .\", \">// Malia Obama's parent (Barack Obama)\",\n    \"wd:Q76 wdt:P1963 ?person .\", \">// employer of Ben LaBolt\",\n    \"?person wdt:P108 ?employer .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q3025498 wdt:P1039 wd:Q76 . >// Malia Obama's parent (Barack Obama) wd:Q76 wdt:P1963 ?person . >// employer of Ben LaBolt ?person wdt:P108 ?employer . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesignerSpouse WHERE {\",\n    \"?costumeDesigner wdt:P26 ?costumeDesignerSpouse .\",\n    \"?pierreVanDormael wdt:P31 wd:Q5 ;\",\n    \"wdt:P2067 ?costumeDesignerSpouse .\",\n    \"FILTER(?pierreVanDormael = wd:Q1234567) .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t  \t \t \t \t", "normal_query": "SELECT ?costumeDesignerSpouse WHERE { ?costumeDesigner wdt:P26 ?costumeDesignerSpouse . ?pierreVanDormael wdt:P31 wd:Q5 ; wdt:P2067 ?costumeDesignerSpouse . FILTER(?pierreVanDormael = wd:Q1234567) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesignerSpouse WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q20647589 .\", \">// costume designer instance\",\n    \"?costumeDesigner wdt:P26 ?costumeDesignerSpouse .\", \">// spouse of the costume designer\",\n    \"?costumeDesignerSpouse wdt:P106 wd:Q18637441 .\", \">// occupation is founder\",\n    \"?costumeDesignerSpouse wdt:P108 wd:Q29576154 .\", \">// employed by or associated with ClubJenna\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesignerSpouse WHERE { ?costumeDesigner wdt:P31 wd:Q20647589 . >// costume designer instance ?costumeDesigner wdt:P26 ?costumeDesignerSpouse . >// spouse of the costume designer ?costumeDesignerSpouse wdt:P106 wd:Q18637441 . >// occupation is founder ?costumeDesignerSpouse wdt:P108 wd:Q29576154 . >// employed by or associated with ClubJenna } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q571 .\", \">// This line filters to get only instances of creative works\",\n    \"?resource wdt:P57 wd:Q9624 .\", \">// This line ensures the work was directed by George Harrison (wd:Q9624 is the Wikidata ID for George Harrison)\",\n    \"?resource wdt:P50 wd:Q9624 .\", \">// This line ensures the work was written by George Harrison\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571 . >// This line filters to get only instances of creative works ?resource wdt:P57 wd:Q9624 . >// This line ensures the work was directed by George Harrison (wd:Q9624 is the Wikidata ID for George Harrison) ?resource wdt:P50 wd:Q9624 . >// This line ensures the work was written by George Harrison } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q1879642 .\", \">// Anker Sørensen (assuming Q1879642 is the correct Wikidata ID for Anker Sørensen)\",\n    \"?resource wdt:P31 wd:Q13442814 .\", \">// instance of written work\",\n    \"}\",\n    \"LIMIT 50\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q1879642 . >// Anker Sørensen (assuming Q1879642 is the correct Wikidata ID for Anker Sørensen) ?resource wdt:P31 wd:Q13442814 . >// instance of written work } LIMIT 50", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  wd:Q123456 wdt:P1038 ?parent .\", \">// Q123456 is a placeholder for Nadja Weiss's Wikidata ID, which should be replaced with the actual ID.\",\n    \"  ?parent wdt:P27 wd:Q34 .\", \">// P27 is 'country of citizenship' and Q34 is Sweden.\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q123456 wdt:P1038 ?parent . >// Q123456 is a placeholder for Nadja Weiss's Wikidata ID, which should be replaced with the actual ID. ?parent wdt:P27 wd:Q34 . >// P27 is 'country of citizenship' and Q34 is Sweden. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q1054796 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P31 wd:Q5 ;\", \">// Ensure the spouse is a human\",\n    \"         wdt:P106 wd:Q228825 .\", \">// Ensure the spouse is a cinematographer\",\n    \"  OPTIONAL { ?spouse wdt:P27 wd:Q17 . }\", \">// Optionally check if the spouse is Japanese\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q1054796 wdt:P26 ?spouse . ?spouse wdt:P31 wd:Q5 ; >// Ensure the spouse is a human wdt:P106 wd:Q228825 . >// Ensure the spouse is a cinematographer OPTIONAL { ?spouse wdt:P27 wd:Q17 . } >// Optionally check if the spouse is Japanese } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  ?filmDirector wdt:P106 wd:Q2526255 ;\", \">// film director occupation\",\n    \"         wdt:P1416 ?employer .\", \">// employed by\",\n    \"  ?employer wdt:P17 wd:Q19 .\", \">// located in Canada\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P106 wd:Q2526255 ; >// film director occupation wdt:P1416 ?employer . >// employed by ?employer wdt:P17 wd:Q19 . >// located in Canada } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q16 is Canada\nwdt:P106 is occupation\nwd:Q2526255 is film director", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?filmDirector wdt:P106 wd:Q2526255 .\",\n \t\t\"?filmDirector wdt:P108 ?employer .\",\n \t\t\"?employer wdt:P112 wd:Q16 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?filmDirector wdt:P106 wd:Q2526255 . ?filmDirector wdt:P108 ?employer . ?employer wdt:P112 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What employer of a film director did Canada found", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7565 is employer\nkg:8057 is founded by\nkg:3288 is Canada\nkg:5147 is occupation\nkg:5381 is film director", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?employer kg:7565 ?filmDirector .\",\n \t\t\"?filmDirector kg:5147 kg:5381 .\",\n \t\t\"?employer kg:8057 kg:3288 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?employer wdt:P108 ?filmDirector . ?filmDirector wdt:P106 wd:Q2526255 . ?employer wdt:P112 wd:Q16 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q16287 .\", \">// Written by Madonna (wd:Q16287)\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of work (wd:Q11424) to narrow down\",\n    \"?resource wdt:P123 wd:Q16287 .\", \">// Produced by Madonna (wd:Q16287)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q16287 . >// Written by Madonna (wd:Q16287) ?resource wdt:P31 wd:Q11424 . >// Instance of work (wd:Q11424) to narrow down ?resource wdt:P123 wd:Q16287 . >// Produced by Madonna (wd:Q16287) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q1744 is Madonna\nwdt:P58 is screenwriter\nwd:Q1744 is Madonna", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q1744 .\",\n    \"?resource wdt:P162 wd:Q1744 .\",\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q1744 . ?resource wdt:P162 wd:Q1744 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q69423232 .\",\n      \"?resource wdt:P106 wd:Q103013 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q69423232 . ?resource wdt:P106 wd:Q103013 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:7910 kg:5262 ;\",\n           \"kg:9740 \\\"Hans Ertl\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7910 kg:5262 ; kg:9740 \"Hans Ertl\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q853 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q853 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:P1040 kg:0714.\",\n    \"?subject kg:is P1040 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?subject kg:P1040 kg:0714. ?subject kg:is P1040 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?book wdt:P155 wd:Q721 ;\",\n    \"   wdt:P155 ?resource .\",\n    \"FILTER(?resource != wd:Q721)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?book wdt:P155 wd:Q721 ; wdt:P155 ?resource . FILTER(?resource != wd:Q721) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book1 kg:isQ1042294 ?value1 ;\",\n    \"   kg:P155 ?book2 .\",\n    \"?book2 kg:isQ721 ?value2 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?book1 kg:isQ1042294 ?value1 ; kg:P155 ?book2 . ?book2 kg:isQ721 ?value2 . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q131539 wdt:P155 ?resource .\",\n      \"?resource wdt:P168 wd:Q168 .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q131539 wdt:P155 ?resource . ?resource wdt:P168 wd:Q168 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?subject kg:1888 ?resource .\",\n    \"?subject kg:4953 kg:5573 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?subject kg:1888 ?resource . ?subject kg:4953 kg:5573 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q260 wdt:P40 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q260 wdt:P40 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?child kg:P40 ?parent .\",\n    \"?parent kg:P355 kg:2110 .\",\n    \"?parent kg:P31 kg:7406 .\",\n    \"}\",\n    \"VALUES ?child { kg:4300 }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?child kg:P40 ?parent . ?parent kg:P355 kg:2110 . ?parent kg:P31 kg:7406 . } VALUES ?child { kg:4300 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q79070 wdt:P108 ?resource.\",\n      \"?resource wdt:P31 wd:Q40.\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 ?resource. ?resource wdt:P31 wd:Q40. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3135 ?employment.\",\n    \"?employment kg:4741 Q79070.\",\n    \"?employment kg:4661 Q40.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3135 ?employment. ?employment kg:4741 Q79070. ?employment kg:4661 Q40. } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q80379 wdt:P58 ?resource.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:7109 ?author .\",\n    \"?author kg:5079 \\\"J. R. R. Tolkien\\\"@en .\",\n    \"?resource kg:7976 \\\"written by\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7109 ?author . ?author kg:5079 \"J. R. R. Tolkien\"@en . ?resource kg:7976 \"written by\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie wdt:P1431 wd:Q72276 ;\",\n             \"wdt:P577 \\\"2013-05-16T00:00:00Z\\\"^.\",\n      \"wd:Q2680 wdt:P1431 ?movie.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P1431 wd:Q72276 ; wdt:P577 \"2013-05-16T00:00:00Z\"^. wd:Q2680 wdt:P1431 ?movie. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:7729 ?producer .\",\n    \"?movie kg:0000 \\\"Was A Good Day to Die Hard\\\" .\",\n    \"?producer kg:8619 \\\"Bruce Willis\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:7729 ?producer . ?movie kg:0000 \"Was A Good Day to Die Hard\" . ?producer kg:8619 \"Bruce Willis\" . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P106 wd:Q2733930 ;\",\n    \"wdt:P2515 wd:Q36834 .\",\n    \"}\",\n    \"VALUES ?resource {}\"\n  ]\n}\n        \t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P106 wd:Q2733930 ; wdt:P2515 wd:Q36834 . } VALUES ?resource {} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:8685 kg:8803 ;\", \"# The resource is a composer\",\n    \"   kg:7624 kg:5300.          # White Diamond: A Personal Portrait of Kylie Minogue's costume designer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8685 kg:8803 ; kg:7624 kg:5300. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q158069 ;\",\n                  \"wdt:P344 wd:Q69423232 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q158069 ; wdt:P344 wd:Q69423232 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P106 ?cinematographer .\",\n    \"?resource kg:P344 ?screenwriter .\",\n    \"?cinematographer kg:Q69423232 kg:3749 .\",\n    \"?screenwriter kg:Q69423232 kg:3749 .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106 ?cinematographer . ?resource kg:P344 ?screenwriter . ?cinematographer kg:Q69423232 kg:3749 . ?screenwriter kg:Q69423232 kg:3749 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"wd:Q76845 wdt:P108 ?spouse.\",\n      \"?spouse wdt:P26 wd:Q2607.\",\n      \"FILTER EXISTS { ?spouse wdt:P108* wd:Q2607 }\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q76845 wdt:P108 ?spouse. ?spouse wdt:P26 wd:Q2607. FILTER EXISTS { ?spouse wdt:P108* wd:Q2607 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:P108 kg:5635 ;\", \"># Erich Honecker's spouse\",\n    \"?person kg:P26 kg:0885 .\", \"># Free German Youth's employee\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:P108 kg:5635 ; > ?person kg:P26 kg:0885 . > } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P31 wd:Q36834 ;\", \"># Q36834 represents 'CreativeWork' which could be a musical composition or album like '1999'\",\n      \"?resource wdt:P106* wd:Q208824 .#\" ,\"%dP106* wd:Q208824 indicates that the resource is produced by a composer\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q36834 ; > ?resource wdt:P106* wd:Q208824 . %dP106* wd:Q208824 indicates that the resource is produced by a composer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P106 kg:8864 ;\", \"sparql\",\n    \"   kg:P272 \\\"1999\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106 kg:8864 ; sparql kg:P272 \"1999\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q577126 ;\",\n    \"?resource wdt:P86 wd:Q69423232 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q577126 ; ?resource wdt:P86 wd:Q69423232 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P106/kg:3969 kg:7339 ;\", \"># Check if the resource is a composer of Al Compás de tu Mentira\",\n    \"?resource kg:P86/kg:3068 kg:0549 .      #\" ,\"Check if the resource is a screenwriter\"\n    \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106/kg:3969 kg:7339 ; > ?resource kg:P86/kg:3068 kg:0549 . Check if the resource is a screenwriter } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q222344 ;\", \"># Check if the resource is a composer of The Chess Players (Q76582)\",\n      \"  wdt:P86 wd:Q76582 .  # Check if it was also a cinematographer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q222344 ; > wdt:P86 wd:Q76582 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:P106* kg:7704. # The composer who composed 'The Chess Players'\",\n    \"?film kg:P86 ?composer.   # The film that has the composer as a cinematographer\",\n    \"?film kg:7704 kg:1865.     # 'The Chess Players' film resource\",\n    \"FILTER NOT EXISTS {\",\n    \"?composer kg:P106* kg:6267 } # Ensure it's not a cinematographer but a composer only\",\n    \"}\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?composer kg:P106* kg:7704. ?film kg:P86 ?composer. ?film kg:7704 kg:1865. FILTER NOT EXISTS { ?composer kg:P106* kg:6267 } } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?game wdt:P750 wd:Q2283 ;\",\n           \"wdt:P155 ?sequel .\",\n      \"?sequel wdt:P750 wd:Q4348691 .\",\n      \"?resource wdt:P750 ?sequel .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game wdt:P750 wd:Q2283 ; wdt:P155 ?sequel . ?sequel wdt:P750 wd:Q4348691 . ?resource wdt:P750 ?sequel . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?game kg:P750 ?sequel .\",\n    \"?sequel kg:P155 \\\"Microsoft Flight Simulator 2004: A Century of Flight\\\"@en .\",\n    \"?game kg:P4348691 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?game kg:P750 ?sequel . ?sequel kg:P155 \"Microsoft Flight Simulator 2004: A Century of Flight\"@en . ?game kg:P4348691 ?resource . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?work wdt:P161 wd:Q967797 ;\", \"># The work is a sequel to Twin Peaks (Q2085)\",\n      \"?work wdt:P155 ?actor .\", \"># The work has an actor\",\n      \"?actor wdt:P215 'James Parks'@en .\", \"># The actor's name is James Parks\"\n   ,\"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P161 wd:Q967797 ; > ?work wdt:P155 ?actor . > ?actor wdt:P215 'James Parks'@en . > } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:P155 ?sequel.\",\n    \"?sequel kg:P2085 \\\"Twin Peaks\\\".\",\n    \"?sequel kg:P161 ?person.\",\n    \"?person kg:Q967797 ?jamesParks.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:P155 ?sequel. ?sequel kg:P2085 \"Twin Peaks\". ?sequel kg:P161 ?person. ?person kg:Q967797 ?jamesParks. } LIMIT 1", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?production wdt:P355 wd:Q81950264 ;\",\n                   \"wdt:P112 ?parent.\",\n      \"?parent wdt:P40 wd:Q15070044.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?production wdt:P355 wd:Q81950264 ; wdt:P112 ?parent. ?parent wdt:P40 wd:Q15070044. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?founder kg:2362 ?production .\",\n    \"?production kg:6446 ?founderParent .\",\n    \"?founderParent kg:9431 <http://example.org/Q8195044> .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?founder kg:2362 ?production . ?production kg:6446 ?founderParent . ?founderParent kg:9431 <http://example.org//Q8195044> . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?s wdt:P108 wd:Q1022419 ;\",\n         \"wdt:P3373 ?resource .\",\n      \"wd:Q352 wdt:P108 wd:Q1022419 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?s wdt:P108 wd:Q1022419 ; wdt:P3373 ?resource . wd:Q352 wdt:P108 wd:Q1022419 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sister kg:P108 ?employee .\",\n    \"?employee kg:P3373 ?uniqaInsuranceGroup .\",\n    \"?uniqaInsuranceGroup kg:Q352 \\\"Uniqa Insurance Group\\\"@en .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?sister kg:P108 ?employee . ?employee kg:P3373 ?uniqaInsuranceGroup . ?uniqaInsuranceGroup kg:Q352 \"Uniqa Insurance Group\"@en . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?employer wdt:P108 wd:Q6078 ;\",\n               \"wdt:P750 ?distributor .\",\n      \"?game wdt:P750 ?employer ;\",\n               \"wdt:P42310881 wd:Q42310881 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?employer wdt:P108 wd:Q6078 ; wdt:P750 ?distributor . ?game wdt:P750 ?employer ; wdt:P42310881 wd:Q42310881 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9526 ?employer .\",\n      \"?resource kg:2903 kg:5020 .\",\n      \"?employer kg:2310 \\\"Animal Crossing: Pocket Camp\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9526 ?employer . ?resource kg:2903 kg:5020 . ?employer kg:2310 \"Animal Crossing: Pocket Camp\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"wd:Q103941992 wdt:P40 wd:Q15070044 ;\",\n      \"wdt:P108 ?employer.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q103941992 wdt:P40 wd:Q15070044 ; wdt:P108 ?employer. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person kg:3071 ?employer .\",\n      \"?person kg:1689 ?parent .\",\n      \"?parent kg:9336 kg:7766 .\",\n      \"?person rdf:type kg:4817 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:3071 ?employer . ?person kg:1689 ?parent . ?parent kg:9336 kg:7766 . ?person rdf:type kg:4817 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191 ;\",\n                   \"wdt:P26 ?spouse .\",\n      \"?spouse wdt:P3373 wd:Q730300 .\",\n      \"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P106 wd:Q1323191 ; wdt:P26 ?spouse . ?spouse wdt:P3373 wd:Q730300 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner kg:9513 ?spouse .\",\n      \"?spouse kg:4660 ?sibling .\",\n      \"?sibling kg:2674 wd:Q730300\",\n      \"?costumeDesigner a kg:5504.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner kg:9513 ?spouse . ?spouse kg:4660 ?sibling . ?sibling kg:2674 wd:Q730300 ?costumeDesigner a kg:5504. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1102919. \",\n      \"?person wdt:P112 wd:Q1323191. \",\n      \"?person wdt:P26 ?spouse. \",\n      \"?spouse wdt:P136 wd:Q1323191. \",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q1102919. ?person wdt:P112 wd:Q1323191. ?person wdt:P26 ?spouse. ?spouse wdt:P136 wd:Q1323191. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person kg:5767 ?costumeDesigner .\",\n      \"?person kg:9356 ?spouse .\",\n      \"?spouse kg:9700 ?clubJenna .\",\n      \"?costumeDesigner kg:106 ?spouse .\",\n      \"FILTER(?clubJenna = 'ClubJenna'^^<http://www.w3.org/2001/XMLSchema#string>)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:5767 ?costumeDesigner . ?person kg:9356 ?spouse . ?spouse kg:9700 ?clubJenna . ?costumeDesigner kg:106 ?spouse . FILTER(?clubJenna = 'ClubJenna'^^<http://www.w3.org/2001//XMLSchema> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P57 wd:Q2643 ;\",\n                  \"wdt:P58 wd:Q2643 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2643 ; wdt:P58 wd:Q2643 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P57 \\\"What was written and directed by George Harrison\\\".\",\n    \"?resource kg:P58 kg:8693.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P57 \"What was written and directed by George Harrison\". ?resource kg:P58 kg:8693. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1040 wd:Q24907 ;\",\n                  \"wdt:P58 wd:Q24907 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q24907 ; wdt:P58 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P58 kg:9130 ;\", \"># kg:9130 is Q24907, so this line links the resource to Anker Sørensen.\",\n    \"   kg:P1040 ?content .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P58 kg:9130 ; > kg:P1040 ?content . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 ;\",\n              \"wdt:P40 wd:Q4990261 ;\",\n              \"wdt:P27 wd:Q34 .\",\n      \"?parent wdt:P355 ?person .\",\n      \"?parent wdt:P355 wd:Q4990261 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q1323191 ; wdt:P40 wd:Q4990261 ; wdt:P27 wd:Q34 . ?parent wdt:P355 ?person . ?parent wdt:P355 wd:Q4990261 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P106 kg:8815 ;\", \"># Nadja Weiss's Swedish parent\",\n    \"kg:P40 kg:3398. # is a parent\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106 kg:8815 ; > kg:P40 kg:3398. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P26 wd:Q222344 ;\",\n              \"wdt:P106 wd:Q3514303 ;\",\n              \"wdt:P27 wd:Q17. \",\n      \"?spouse wdt:P26 ?person ;\",\n              \"wdt:P106 wd:Q3514303. \",\n      \"FILTER NOT EXISTS { ?spouse wdt:P27 wd:Q17. } # Ensure the spouse is not Japanese to disambiguate\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P26 wd:Q222344 ; wdt:P106 wd:Q3514303 ; wdt:P27 wd:Q17. ?spouse wdt:P26 ?person ; wdt:P106 wd:Q3514303. FILTER NOT EXISTS { ?spouse wdt:P27 wd:Q17. } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5209 kg:Q3514303 ;\", \"# Takenori Sentō's spouse\",\n      \"?resource kg:5652 kg:Q222344 .  # Japanese cinematographer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5209 kg:Q3514303 ; ?resource kg:5652 kg:Q222344 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner wdt:P106 wd:Q1323191 ;\",\n      \"   wdt:P108 ?employer .\",\n      \"?employer wdt:P272 wd:Q1141467 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P106 wd:Q1323191 ; wdt:P108 ?employer . ?employer wdt:P272 wd:Q1141467 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?costumeDesigner kg:2759 ?employer .\",\n      \"?employer kg:5383 ?production .\",\n      \"?production kg:0409 kg:1388 .\",\n      \"FILTER(?costumeDesigner = kg:3388)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner kg:2759 ?employer . ?employer kg:5383 ?production . ?production kg:0409 kg:1388 . FILTER(?costumeDesigner = kg:3388) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?s wdt:P106 wd:Q1323191. ;; s is a costume designer\",\n      \"?s wdt:P3373 ? sibling. ;; sibling of the costume designer\",\n      \"?sibling wdt:P26 wd:Q461354. ;; sibling is married to Nadia Cassini\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?s wdt:P106 wd:Q1323191. ;; s is a costume designer ?s wdt:P3373 ? sibling. ;; sibling of the costume designer ?sibling wdt:P26 wd:Q461354. ;; sibling is married to Nadia Cassini } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?sister kg:4040 ?costumeDesigner .\",\n      \"?costumeDesigner kg:3988 kg:5129 .\",\n      \"?spouse kg:7684 kg:3988 .\",\n      \"kg:5129 kg:3988 kg:7684 .\",\n      \"FILTER NOT EXISTS { ?sister kg:3988 ?spouse . }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?sister kg:4040 ?costumeDesigner . ?costumeDesigner kg:3988 kg:5129 . ?spouse kg:7684 kg:3988 . kg:5129 kg:3988 kg:7684 . FILTER NOT EXISTS { ?sister kg:3988 ?spouse . } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q67134 ;\",\n              \"wdt:P40 wd:Q4830453 .\",\n      \"?employer wdt:P108 ?company ;\",\n                \"wdt:P355 ?parentCompany .\",\n      \"?company wdt:P31 wd:Q67134 ;\",\n                 \"wdt:P40 ?person .\",\n      \"?parentCompany wdt:P31 wd:Q67134 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wdt:P31 wd:Q67134 ; wdt:P40 wd:Q4830453 . ?employer wdt:P108 ?company ; wdt:P355 ?parentCompany . ?company wdt:P31 wd:Q67134 ; wdt:P40 ?person . ?parentCompany wdt:P31 wd:Q67134 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?company kg:7139 ?parent .\", \"# P355 parent of\",\n    \"?company kg:0475 [kg:0342 ?employer ; kg:0569 ?christianAbt].\", \"# P31 company, P108 employer, P40 is Christian Abt\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company kg:7139 ?parent . ?company kg:0475 [kg:0342 ?employer ; kg:0569 ?christianAbt]. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n  \"query\": [\n    \"SELECT ?employer\",\n    \"WHERE {\",\n      \"?person wdt:P108 ?employer .\",\n      \"?film wdt:P750 ?person .\",\n      \"?employer wdt:P31 wd:Q11424\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { ?person wdt:P108 ?employer . ?film wdt:P750 ?person . ?employer wdt:P31 wd:Q11424 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:7435 ?employer .\",\n    \"?film kg:1977 ?employer .\",\n    \"?film kg:2298 ?distributor .\",\n    \"?person kg:6868 \\\"Claire Doutriaux\\\" .\",\n    \"?employer a kg:8161 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:7435 ?employer . ?film kg:1977 ?employer . ?film kg:2298 ?distributor . ?person kg:6868 \"Claire Doutriaux\" . ?employer a kg:8161 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?producerP wdt:P750 wd:Q34 ;\",\n                  \"wdt:P112 ?distributor. \",\n      \"?producerP wdt:P272 ?country. \",\n      \"FILTER(?country = wd:Q1651543) .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producerP wdt:P750 wd:Q34 ; wdt:P112 ?distributor. ?producerP wdt:P272 ?country. FILTER(?country = wd:Q1651543) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?producerAndDistributor kg:3121 ?resource .\",\n      \"?producerAndDistributor kg:7989 kg:8263 .\",\n      \"?producerAndDistributor kg:3140 kg:9250 .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producerAndDistributor kg:3121 ?resource . ?producerAndDistributor kg:7989 kg:8263 . ?producerAndDistributor kg:3140 kg:9250 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 ;\",\n             \"wdt:P27 wd:Q34 ;\",\n             \"wdt:P26 wd:Q6200573 .\",\n      \"FILTER EXISTS { ?person wdt:P106 wd:Q6200573 }\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q1323191 ; wdt:P27 wd:Q34 ; wdt:P26 wd:Q6200573 . FILTER EXISTS { ?person wdt:P106 wd:Q6200573 } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:P106* ?costumeDesigner .\",\n    \"?person kg:P26*/kg:P27* ?spouse .\",\n    \"?spouse kg:P34 ?swedishPerson .\",\n    \"?costumeDesigner kg:P5786 ?markSylwan .\",\n    \"FILTER(?markSylwan = kg:Q6200573)\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:P106* ?costumeDesigner . ?person kg:P26*/kg:P27* ?spouse . ?spouse kg:P34 ?swedishPerson . ?costumeDesigner kg:P5786 ?markSylwan . FILTER(?markSylwan = kg:Q6200573) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?spouseOrSibling wdt:P3373 wd:Q3356 ;\", \"># Replace with the correct property if needed for spouse or sibling relationship in Wikidata. P26 is used as a placeholder here.\",\n      \"?spouseOrSibling wdt:P26 ?husbandOrSpouse .\",\n      \"wd:Q2045778 wdt:P26 ?husbandOrSpouse .\", \"># Replace with the correct entity for Antiochus IV Epiphanes if needed. Q3356 is used as a placeholder here.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?spouseOrSibling wdt:P3373 wd:Q3356 ; > ?spouseOrSibling wdt:P26 ?husbandOrSpouse . wd:Q2045778 wdt:P26 ?husbandOrSpouse . > } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?spouseOrSibling kg:P3373 ?resource .\",\n      \"?resource a kg:Q2045778 .\",\n      \"?spouseOrSibling kg:P26 kg:Q3356\" ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?spouseOrSibling kg:P3373 ?resource . ?resource a kg:Q2045778 . ?spouseOrSibling kg:P26 kg:Q3356 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?resource wdt:P750 wd:Q34 ;\",\n               \"wdt:P272 ?distributorProducer .\",\n      \"?resource wdt:P112 wd:Q1651543 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?resource wdt:P750 wd:Q34 ; wdt:P272 ?distributorProducer . ?resource wdt:P112 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?distributorProducer ?foundBy \",\n    \"{\",\n    \"?work kg:is Q1651543 ;\", \"# The Magic Flute\",\n    \"   kg:isProducedBy ?producer .\",\n    \"?producer kg:isDistributor ?distributorProducer .\",\n    \"?founder kg:isFoundedBy ?distributorProducer .\",\n    \"?founder kg:isQ34 ?foundBy .\", \"# Sweden\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer ?foundBy { ?work kg:is Q1651543 ; kg:isProducedBy ?producer . ?producer kg:isDistributor ?distributorProducer . ?founder kg:isFoundedBy ?distributorProducer . ?founder kg:isQ34 ?foundBy . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P112 wd:Q117892 ;\",\n    \"   wdt:P27 wd:Q29999 ;\",\n    \"   wdt:P3373 wd:Q2336212 .\"\n   ,\"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q117892 ; wdt:P27 wd:Q29999 ; wdt:P3373 wd:Q2336212 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:4469 kg:9596. \",\n      \"?resource kg:1026 kg:3660. \",\n      \"?resource kg:7833 kg:9334.\",\n      \"?founder kg:1026 kg:3660. \",\n      \"?founder kg:7833 kg:9334.\",\n      \"FILTER NOT EXISTS { ?resource kg:3373 ?otherPerson. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4469 kg:9596. ?resource kg:1026 kg:3660. ?resource kg:7833 kg:9334. ?founder kg:1026 kg:3660. ?founder kg:7833 kg:9334. FILTER NOT EXISTS { ?resource kg:3373 ?otherPerson. } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P27 wd:Q183 ;\",\n              \"wdt:P3373 wd:Q60414 .\",\n      \"?sibling wdt:P27 wd:Q183 ;\",\n              \"wdt:P108 ?person ;\",\n              \"wdt:P3373 wd:Q60414 .\",\n      \"FILTER NOT EXISTS { ?person wdt:P27 wd:Q60414 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P27 wd:Q183 ; wdt:P3373 wd:Q60414 . ?sibling wdt:P27 wd:Q183 ; wdt:P108 ?person ; wdt:P3373 wd:Q60414 . FILTER NOT EXISTS { ?person wdt:P27 wd:Q60414 } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:P3373 ?employment .\",\n    \"?person kg:P27 kg:8594 .\", \"># Dieter Hoeneß\",\n    \"?person kg:P108 ?sibling .\",\n    \"?sibling kg:P625 kg:1876 .\", \"# German nationality\"\n    ,\n    \"FILTER(?employment = kg:5481 || ?employment = kg:2961) # FC Bayern Munich's employee or related role\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:P3373 ?employment . ?person kg:P27 kg:8594 . > ?person kg:P108 ?sibling . ?sibling kg:P625 kg:1876 . FILTER(?employment = kg:5481 || ?employment = kg:2961) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?item wdt:P750 wd:Q3715556 ;\",\n         \"wdt:P272 ?distributorProducer .\",\n      \"?item wdt:P112 wd:Q882 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?item wdt:P750 wd:Q3715556 ; wdt:P272 ?distributorProducer . ?item wdt:P112 wd:Q882 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:6909 kg:7784 ;\", \"# Found by\",\n      \"         kg:3368 kg:4295 .\" ,\"\\n\" ,\"\\t# Distributor and Producer\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6909 kg:7784 ; kg:3368 kg:4295 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?work wdt:P162 wd:Q888311 ;\", \"# Vince Gilligan is the author of the work\",\n      \"?work wdt:P272 wd:Q4500 .  # Bob Weinstein is the producer of the work\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P162 wd:Q888311 ; ?work wdt:P272 wd:Q4500 . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P58 kg:8411 ;\", \"# Vince Gilligan is the author\",\n    \"   kg:P9666 kg:3400 .         # Bob Weinstein is the producer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P58 kg:8411 ; kg:P9666 kg:3400 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n  \"query\": [\n    \"SELECT ?company\",\n    \"WHERE {\",\n      \"?company wdt:P31 wd:Q4830453 ;\", \"># The company is a person (assuming the founder is a person)\",\n      \"wdt:P112 wd:Q1079409 ;\", \"># The founder of the company is Alphonse-Louis du Plessis de Richelieu\",\n      \"wdt:P3373 ?nationality .\", \"># The founder's nationality (French sibling relation)\",\n      \"?nationality wdt:P27 wd:Q142\" ,\"\\n# French nationality\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?company WHERE { ?company wdt:P31 wd:Q4830453 ; > wdt:P112 wd:Q1079409 ; > wdt:P3373 ?nationality . > ?nationality wdt:P27 wd:Q142 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?company kg:P31 ?entityType ;\",\n           \"kg:P112 ?founder .\",\n      \"?founder kg:P3373 ?sibling ;\",\n           \"kg:P27 kg:6013 .\", \"@prefix q: <http://example.org/q/>\",\n      \"FILTER(?sibling = q:Q4830453)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company kg:P31 ?entityType ; kg:P112 ?founder . ?founder kg:P3373 ?sibling ; kg:P27 kg:6013 . @prefix q: <http://example.org/q//> FILTER(?sibling = q:Q4830453) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P162 wd:Q320211 ;\",\n    \"   wdt:P272 wd:Q44477.\",\n    \"}\",\n    \"FILTER EXISTS {\",\n    \"?resource wdt:P58 wd:Q2831.\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162 wd:Q320211 ; wdt:P272 wd:Q44477. } FILTER EXISTS { ?resource wdt:P58 wd:Q2831. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?entity kg:4760/Q44477 ?resource .\",\n      \"?resource kg:7187/P162 ?stanWinston .\",\n      \"?resource kg:3913/P272 ?michaelJackson .\",\n      \"?entity kg:4411/Q320211 \\\"Ghosts\\\" .\",\n      \"?entity kg:4994/P58 ?michaelJackson .\",\n      \"?entity kg:9933/Q2831 \\\"Michael Jackson\\\"\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?entity kg:4760/Q44477 ?resource . ?resource kg:7187/P162 ?stanWinston . ?resource kg:3913/P272 ?michaelJackson . ?entity kg:4411/Q320211 \"Ghosts\" . ?entity kg:4994/P58 ?michaelJackson . ?entity kg:9933/Q2831 \"Michael Jackson\" } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource wdt:P1431 wd:Q8877 ;\",\n\t\t\t\t\"wdt:P58 wd:Q75079.\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q8877 ; wdt:P58 wd:Q75079. } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:P1431 kg:9429 ;\", \"# Steven Spielberg as executive producer\",\n    \"   kg:P58 kg:9692 .         # Chris Columbus as writer\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:P1431 kg:9429 ; kg:P58 kg:9692 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n      \"?distributorProducer wdt:P750 wd:Q34 ;\",\n      \"   wdt:P272 wd:Q1651543 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?distributorProducer wdt:P750 wd:Q34 ; wdt:P272 wd:Q1651543 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3114 ?production;\",\n           \"kg:5876 ?founder. \",\n      \"?founder kg:272 \\\"Sweden\\\".\",\n      \"?production kg:112 \\\"The Magic Flute\\\".\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3114 ?production; kg:5876 ?founder. ?founder kg:272 \"Sweden\". ?production kg:112 \"The Magic Flute\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?person1 ?person2\",\n    \"WHERE {\",\n      \"?person1 wdt:P26 wd:Q443473. \",\n      \"(?person1 wdt:P40/wdt:P355|wdt:P3373) ?relation ?person2. \",\n      \"?person2 wdt:P26 wd:Q443473. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person1 ?person2 WHERE { ?person1 wdt:P26 wd:Q443473. (?person1 wdt:P40/wdt:P355|wdt:P3373) ?relation ?person2. ?person2 wdt:P26 wd:Q443473. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:P40*/kg:P26* kg:0479.\", \"default graph {\",\n    \"?person1 kg:P355*/kg:P26* kg:0479.\",\n    \"?person2 kg:P3373*/kg:P26* kg:0479.\",\n    \"}\",\n    \"FILTER(?person != ?person1 && ?person != ?person2 && ?person1 != ?person2)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:P40*/kg:P26* kg:0479. default graph { ?person1 kg:P355*/kg:P26* kg:0479. ?person2 kg:P3373*/kg:P26* kg:0479. } FILTER(?person != ?person1 && ?person != ?person2 && ?person1 != ?person2) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P106 wd:Q1323191 ;\",\n             \"wdt:P21 wd:Q6581097 ;\",\n             \"wdt:P27 wd:Q16 ;\",\n             \"wdt:P26 ?spouse .\",\n      \"?spouse wdt:P21 wd:Q6581097 ;\",\n             \"wdt:P106 wd:Q233128 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q1323191 ; wdt:P21 wd:Q6581097 ; wdt:P27 wd:Q16 ; wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 ; wdt:P106 wd:Q233128 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"?resource kg:P9486 kg:Q6581097 ;\", \"># Jessica Drake's spouse (female)\",\n    \"   kg:P7839 kg:Q16 ;\", \"># Canadian male\",\n    \"   kg:P26 ?resource .\", \"># Spouse of the person\",\n    \"   ?resource kg:P3944 kg:7081 .\" ,\"\\n\" ,\"\\n\" ,\"# Filter to ensure it's a male spouse\",\n    \"FILTER(?resource = kg:Q233128)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P9486 kg:Q6581097 ; > kg:P7839 kg:Q16 ; > kg:P26 ?resource . > ?resource kg:P3944 kg:7081 . FILTER(?resource = kg:Q233128) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P750 wd:Q47099 ;\",\n\t\t\"   wdt:P162 ?sequel .\",\n\t\t\"?sequel wdt:P272 wd:Q115945 ;\",\n\t\t\"   wdt:P155 ?producer .\",\n\t\t\"?producer wdt:P750 wd:Q115945 .\",\n\t\t\"FILTER(?work != ?sequel)\",\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P750 wd:Q47099 ; wdt:P162 ?sequel . ?sequel wdt:P272 wd:Q115945 ; wdt:P155 ?producer . ?producer wdt:P750 wd:Q115945 . FILTER(?work != ?sequel) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:P162 ?sequel.\",\n    \"?sequel kg:P272 ?productionCompany.\",\n    \"?productionCompany kg:Q47099 \\\"Televisa\\\" .\",\n    \"?sequel kg:P750 ?originalMovie.\",\n    \"?originalMovie kg:Q115945 \\\"Between Love and Hatred\\\" .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:P162 ?sequel. ?sequel kg:P272 ?productionCompany. ?productionCompany kg:Q47099 \"Televisa\" . ?sequel kg:P750 ?originalMovie. ?originalMovie kg:Q115945 \"Between Love and Hatred\" . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n      \"?child wdt:P127* wd:Q467752 ;\",\n           \"wdt:P31 wd:Q4830453 .\",\n      \"?parent wdt:P355 ?child ;\",\n             \"wdt:P31 wd:Q4830453 .\",\n    \"}\",\n    \"ORDER BY ?child\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?child wdt:P127* wd:Q467752 ; wdt:P31 wd:Q4830453 . ?parent wdt:P355 ?child ; wdt:P31 wd:Q4830453 . } ORDER BY ?child LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n  \"query\": [\n    \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\n    \"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\",\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?child ?parent\",\n    \"WHERE {\",\n    \"?child kg:P355*/kg:P40* kg:6878.  # Child of Verizon\",\n    \"?parent kg:P31 kg:9373.           # Parent company\",\n    \"?child kg:P127 ?parent.          # Child and parent relationship\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?child kg:P355*/kg:P40* kg:6878. ?parent kg:P31 kg:9373. ?child kg:P127 ?parent. } LIMIT 10", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?producer wdt:P750 wd:Q882 ;\",\n               \"wdt:P272 wd:Q104109 .\",\n      \"?distributor wdt:P112 wd:Q882 ;\",\n                   \"wdt:P112 wd:Q104109 .\",\n      \"VALUES ?producer { wd:Q524849 }\",\n      \"VALUES ?distributor { wd:Q524849 }\",\n      \"?producer wdt:P31/wdt:P279* ?resource ;\",\n               \"wdt:P112 wd:Q882 .\",\n      \"?distributor wdt:P31/wdt:P279* ?resource ;\",\n                   \"wdt:P112 wd:Q104109 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producer wdt:P750 wd:Q882 ; wdt:P272 wd:Q104109 . ?distributor wdt:P112 wd:Q882 ; wdt:P112 wd:Q104109 . VALUES ?producer { wd:Q524849 } VALUES ?distributor { wd:Q524849 } ?producer wdt:P31/wdt:P279* ?resource ; wdt:P112 wd:Q882 . ?distributor wdt:P31/wdt:P279* ?resource ; wdt:P112 wd:Q104109 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?producerAndDistributor kg:8410 ?resource .\",\n      \"?producerAndDistributor kg:7881 [ kg:2817 kg:7296 ] .\",\n      \"?producerAndDistributor kg:4956 [ kg:8180 kg:8410 ]\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producerAndDistributor kg:8410 ?resource . ?producerAndDistributor kg:7881 [ kg:2817 kg:7296 ] . ?producerAndDistributor kg:4956 [ kg:8180 kg:8410 ] } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor wdt:P106 wd:Q33999 ;\",\n           \"wdt:P737/wdt:P3373 wd:Q4811453 .\",\n      \"?influence wdt:P737 ?actor ;\",\n           \"wdt:P3373 wd:Q142701 .\",\n      \"?sibling wdt:P737 wd:Q4811453 ;\",\n           \"wdt:P3373 ?influence .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?actor wdt:P106 wd:Q33999 ; wdt:P737/wdt:P3373 wd:Q4811453 . ?influence wdt:P737 ?actor ; wdt:P3373 wd:Q142701 . ?sibling wdt:P737 wd:Q4811453 ; wdt:P3373 ?influence . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor kg:0538 ?influence.\",\n      \"?influence kg:9972 [ kg:7006 \\\"Astrid Young's sibling\\\" ].\",\n      \"?actor kg:1929 [ kg:5606 \\\"Pearl Jam\\\"; kg:5938 [ kg:3373 ?sibling ] ].\",\n      \"?sibling kg:5606 \\\"Astrid Young\\\".\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?actor kg:0538 ?influence. ?influence kg:9972 [ kg:7006 \"Astrid Young's sibling\" ]. ?actor kg:1929 [ kg:5606 \"Pearl Jam\"; kg:5938 [ kg:3373 ?sibling ] ]. ?sibling kg:5606 \"Astrid Young\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1040 wd:Q562108 ;\",\n\t\t\"wdt:P1040 wd:Q1687239 ;\",\n\t\t\"wdt:P1040 wd:Q35979475 .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:3870 \\\"Jens Jørgen Thorsen\\\" ;\",\n    \"            kg:3255 \\\"Ole John\\\" ;\",\n    \"            kg:0406 \\\"Jørgen Leth\\\" .\",\n    \"}\",\n    \"FILTER EXISTS { ?resource a ?type }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3870 \"Jens Jørgen Thorsen\" ; kg:3255 \"Ole John\" ; kg:0406 \"Jørgen Leth\" . } FILTER EXISTS { ?resource a ?type } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P31 wd:Q5.\" , \"# Person is a human\",\n      \"?person wdt:P27 wd:Q3083718.\" , \"# The person is from Spain\",\n      \"?person wdt:P3373 ?sibling.\" , \"# The person has a sibling\",\n      \"?sibling wdt:P31 wd:Q5.\" , \"# The sibling is a human\",\n      \"?sibling wdt:P27 wd:Q3083718.\" , \"# The sibling is from Spain\",\n      \"?sibling wdt:P2515 ?costumeDesigner.\" , \"# The sibling's costume designer is Miguel Albaladejo\",\n      \"FILTER(?person != ?costumeDesigner)\" , \"# Ensure the person and their costume designer are not the same\"\n    ,\n    \"VALUES ?person { wd:Q3083718 }\" , \"# Replace with the specific individual if known, otherwise use a variable\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P31 wd:Q5. ?person wdt:P27 wd:Q3083718. ?person wdt:P3373 ?sibling. ?sibling wdt:P31 wd:Q5. ?sibling wdt:P27 wd:Q3083718. ?sibling wdt:P2515 ?costumeDesigner. FILTER(?person != ?costumeDesigner) VALUES ?person { wd:Q3083718 } } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3867 kg:5093 ;\", \"# Miguel Albaladejo's Spanish sibling\",\n      \"   kg:2748 [kg:8474 ?costume_designer] .\" ,\"# The costume designer of a film\"\n    ,\n      \"?costume_designer kg:5014 kg:8721.\" ,\"# The costume designer is a person\"\n    ,\n      \"FILTER(?resource != ?costume_designer)\" ,\"# Ensure the resource and the costume designer are different entities\"\n    ,\n      \"?resource rdfs:label ?label .\",\n      \"?costume_designer rdfs:label ?costume_label .\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource skos:prefLabel ?sp_label .\",\n        \"?costume_designer skos:prefLabel ?costume_sp_label .\"\n      ,\"}\"\n    ,\n      \"FILTER(LANG(?label) = 'en' && LANG(?sp_label) = 'en')\"\n    ,\n      \"BIND(STR(?label) AS ?resource_label)\",\n      \"BIND(STR(?costume_label) AS ?costume_designer_label)\"\n    ,\n      \"VALUES ?resource { kg:5093 }\" ,\"# Assuming the resource is known to be Miguel Albaladejo\"\n    ,\"}\",\n    \"ORDER BY ASC(?label)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3867 kg:5093 ; kg:2748 [kg:8474 ?costume_designer] . ?costume_designer kg:5014 kg:8721. FILTER(?resource != ?costume_designer) ?resource rdfs:label ?label . ?costume_designer rdfs:label ?costume_label . SERVICE <http://dbpedia.org//sparql> { ?resource skos:prefLabel ?sp_label . ?costume_designer skos:prefLabel ?costume_sp_label . } FILTER(LANG(?label) = 'en' && LANG(?sp_label) = 'en') BIND(STR(?label) AS ?resource_label) BIND(STR(?costume_label) AS ?costume_designer_label) VALUES ?resource { kg:5093 } } ORDER BY ASC(?label) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q36834 ;\", \"># P106 is the property for occupation, and Q36834 represents a composer.\",\n      \"   wdt:P27 wd:Q6581072 ;\", \"># P27 is the property for country of citizenship, and Q6581072 represents Sweden.\",\n      \"   wdt:P21 ?gender ;\", \"># P21 is the property for sex or gender. We need to filter by female here.\",\n      \"   wdt:P26 wd:Q96203723.\" ,\"\\n# P26 is the property for spouse, and Q96203723 represents Mattias Järvinen Palme.\"\n    ,\n      \"FILTER(?gender = wd:Q34).\" ,\"\\n# Q34 in Wikidata represents female.\"\n    ,\n      \"?resource rdfs:label ?label FILTER(LANG(?label) = 'en').\" ,\"\\n# Filter to get the English label of the resource if needed.\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q36834 ; > wdt:P27 wd:Q6581072 ; > wdt:P21 ?gender ; > wdt:P26 wd:Q96203723. FILTER(?gender = wd:Q34). ?resource rdfs:label ?label FILTER(LANG(?label) = 'en'). } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5568 ?composer .\",\n      \"?composer kg:3144 ?isSpouse .\",\n      \"?isSpouse kg:8756 \\\"female\\\" .\",\n      \"?isSpouse kg:2252 kg:3259 .\", \"># Note: Q34 is the Swedish national entity, so kg:2252 should be Q34 instead of kg:3259 which seems to be a duplicate entry. kg:3276 and kg:0594 are likely placeholders or duplicates and can be ignored for this query.\"\n     ,\n      \"?composer kg:8271 ?matthias .\",\n      \"?matthias kg:2252 kg:3276\" ,\"\\n# Note: Q96203723 is repeated, so it's likely a duplicate and can be ignored for this query.\"\n    ,\n      \"?composer kg:8756 ?gender .\",\n      \"FILTER(?gender = \\\"female\\\"^^<http://www.w3.org/2001/XMLSchema#string>)\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5568 ?composer . ?composer kg:3144 ?isSpouse . ?isSpouse kg:8756 \"female\" . ?isSpouse kg:2252 kg:3259 . > ?composer kg:8271 ?matthias . ?matthias kg:2252 kg:3276 ?composer kg:8756 ?gender . FILTER(?gender = \"female\"^^<http://www.w3.org/2001//XMLSchema> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1040 wd:Q20729551 ;\",\n                  \"wdt:P162 wd:Q562108 ;\",\n                  \"wdt:P272 wd:Q1687239.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q20729551 ; wdt:P162 wd:Q562108 ; wdt:P272 wd:Q1687239. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?video kg:9246 ?productionPerson ;\",\n    \"   kg:7250 \\\"Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\\\" .\",\n    \"?productionPerson a kg:3644 .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?video kg:9246 ?productionPerson ; kg:7250 \"Was Stop for Bud produced and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth\" . ?productionPerson a kg:3644 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person wdt:P21 wd:Q6581072 ;\", \"# Female sibling\",\n      \"?person wdt:P3373 wd:Q3340 .\", \"# Spouse of Ptolemy IX Lathyros\",\n      \"?marriage wdt:P26 ?person ;\", \"# Marriage relation\",\n      \"wd:Q296446 wdt:P26/wdt:P570 ?marriage.\" ,\"\\n# Antiochus IX Cyzicenus as the spouse\"\n    ,\n      \"VALUES ?person { wd:Q3340 }\" ,\"\\n# Ensure we are querying about the correct person\"\n    ,\n      \"?resource ?p ?o.\"\n    ,\n      \"FILTER(?p != wdt:P21 && ?p != wdt:P3373)\" ,\"\\n# Return only other resources related to the marriage\"\n    ,\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P21 wd:Q6581072 ; ?person wdt:P3373 wd:Q3340 . ?marriage wdt:P26 ?person ; wd:Q296446 wdt:P26/wdt:P570 ?marriage. VALUES ?person { wd:Q3340 } ?resource ?p ?o. FILTER(?p != wdt:P21 && ?p != wdt:P3373) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person kg:P21 ?sibling .\",\n      \"?person kg:P3373 ?spouse .\",\n      \"?spouse kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26* ?king .\",\n      \"?king rdfs:label \\\"Antiochus IX Cyzicenus\\\"@en .\",\n      \"FILTER EXISTS { ?person kg:P3373 ?sibling }\",\n      \"VALUES ?sibling { kg:5862 }\", \"# Female sibling of Ptolemy IX Lathyros\",\n      \"VALUES ?king { kg:1012 }\" ,\"\\n# Antiochus IX Cyzicenus\"\n    ,\n      \"?resource ?p ?o .\"\n    ,\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:P21 ?sibling . ?person kg:P3373 ?spouse . ?spouse kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26* ?king . ?king rdfs:label \"Antiochus IX Cyzicenus\"@en . FILTER EXISTS { ?person kg:P3373 ?sibling } VALUES ?sibling { kg:5862 } VALUES ?king { kg:1012 } ?resource ?p ?o . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P1040 wd:Q562108 ;\",\n    \"   wdt:P1040 wd:Q1687239 ;\",\n    \"   wdt:P1040 wd:Q35979475 .\",\n    \"?work wdt:P58 ?resource.\"\n   \t]}\n \t  \t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?work wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . ?work wdt:P58 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P1040 kg:5943 ;\",\n    \"   kg:P1040 kg:6763 ;\",\n    \"   kg:P1040 kg:9719 ;\",\n    \"   kg:P58 kg:6908 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1040 kg:5943 ; kg:P1040 kg:6763 ; kg:P1040 kg:9719 ; kg:P58 kg:6908 . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?work wdt:P1040 wd:Q20729551 ;\",\n    \"   wdt:P58 ?editor .\",\n    \"VALUES ?editor { wd:Q562108 wd:Q1687239 wd:Q35979475 }\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P1040 wd:Q20729551 ; wdt:P58 ?editor . VALUES ?editor { wd:Q562108 wd:Q1687239 wd:Q35979475 } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?book kg:6826 ?title ;\", \"# The book resource and its title\",\n    \"   kg:2004 ?authorship ;\", \"# Authorship of the book\",\n    \"   kg:7959 ?edition .\", \"# Edition information (not directly used in this query)\",\n    \"?authorship kg:6699 ?person ;\", \"# The person who wrote or edited the book\",\n    \"           kg:7434 \\\"Jens Jørgen Thorsen\\\"@en ;\", \"# Jens Jørgen Thorsen\",\n    \"           kg:7434 \\\"Jørgen Leth\\\"@en ;\" ,\"# Jørgen Leth\",\n    \"           kg:7434 \\\"Ole John\\\"@en . # Ole John\",\n    \"?person kg:2004 ?role .\", \"# The role of the person (author or editor)\",\n    \"FILTER(?role IN(\\\"writer\\\", \\\"editor\\\"))\",\n    \"?resource ?predicate ?object .\", \"# Return all resources involved\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?book kg:6826 ?title ; kg:2004 ?authorship ; kg:7959 ?edition . ?authorship kg:6699 ?person ; kg:7434 \"Jens Jørgen Thorsen\"@en ; kg:7434 \"Jørgen Leth\"@en ; kg:7434 \"Ole John\"@en . ?person kg:2004 ?role . FILTER(?role IN(\"writer\", \"editor\")) ?resource ?predicate ?object . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P1040 wd:Q20729551 ;\",\n                  \"wdt:P162 wd:Q562108 ;\",\n                  \"wdt:P272 wd:Q1687239.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q20729551 ; wdt:P162 wd:Q562108 ; wdt:P272 wd:Q1687239. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:8791 \\\"Was Stop for Bud\\\" ;\",\n    \"   kg:8452 ?production , ?editing .\",\n    \"?production kg:1522 \\\"Ole John\\\" .\",\n    \"?editing kg:1522 \\\"Jørgen Leth\\\" .\",\n    \"?coEditing kg:1522 \\\"Jens Jørgen Thorsen\\\" ;\",\n    \"   kg:4646 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:8791 \"Was Stop for Bud\" ; kg:8452 ?production , ?editing . ?production kg:1522 \"Ole John\" . ?editing kg:1522 \"Jørgen Leth\" . ?coEditing kg:1522 \"Jens Jørgen Thorsen\" ; kg:4646 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P1431 wd:Q43994 ;\",\n\t\t\"   wdt:P1431 wd:Q95125 ;\",\n\t\t\"   wdt:P1431 wd:Q365090 .\",\n\t\t\"?work wdt:P162 ?resource ;\",\n\t\t\"   wdt:P272 ?resource .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P1431 wd:Q43994 ; wdt:P1431 wd:Q95125 ; wdt:P1431 wd:Q365090 . ?work wdt:P162 ?resource ; wdt:P272 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P1431* [kg:P1348 kg:0211, kg:1033, kg:2822].\",\n    \"?resource kg:P162* [kg:P1348 kg:0318, kg:1348, kg:8925].\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P1431* [kg:P1348 kg:0211, kg:1033, kg:2822]. ?resource kg:P162* [kg:P1348 kg:0318, kg:1348, kg:8925]. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P21 wd:Q6581072 ;\", \"# Female sibling of Ptolemy X Alexander I\",\n      \"?resource wdt:P3373 wd:Q3345 .\", \"# Sibling of Ptolemy IX Lathyros\",\n      \"?resource wdt:P3373 wd:Q3340.\" ,\"\\n\" ,\"\\t# Spouse of Ptolemy IX Lathyros\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P21 wd:Q6581072 ; ?resource wdt:P3373 wd:Q3345 . ?resource wdt:P3373 wd:Q3340. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:7620/kg:P3373 kg:3742 ;\", \"># Ptolemy IX Lathyros had sibling relation with Ptolemy X Alexander I\",\n      \"?resource kg:0080/kg:P21 ?spouse.\" ,\"\\n# The resource (female sibling) is also a spouse of Ptolemy IX Lathyros\"\n    ,\n    \"FILTER(?resource != kg:4916)\" ,\"\\n# Exclude Ptolemy IX Lathyros himself\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7620/kg:P3373 kg:3742 ; > ?resource kg:0080/kg:P21 ?spouse. FILTER(?resource != kg:4916) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?show wdt:P57 wd:Q1079 ;\",\n    \"   wdt:P162 wd:Q4500 ;\",\n    \"   wdt:P272 wd:Q5542223.\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?show wdt:P57 wd:Q1079 ; wdt:P162 wd:Q4500 ; wdt:P272 wd:Q5542223. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:7159 \\\"Breaking Bad\\\" ;\",\n    \"   kg:3033 ?producer ;\",\n    \"   kg:6250 ?director ;\",\n    \"   kg:8022 ?writer .\",\n    \"\",\n    \"?producer kg:0037 \\\"Vince Gilligan\\\" ;\",\n    \"?director kg:0037 \\\"George Mastras\\\" ;\",\n    \"?writer kg:0037 \\\"Vince Gilligan\\\" .\",\n    \"\",\n    \"VALUES ?producer { Q5542223 }\",\n    \"VALUES ?director { Q4500 }\",\n    \"VALUES ?writer { Q1079 }\",\n    \"\",\n    \"BIND(?producer AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?show kg:7159 \"Breaking Bad\" ; kg:3033 ?producer ; kg:6250 ?director ; kg:8022 ?writer . ?producer kg:0037 \"Vince Gilligan\" ; ?director kg:0037 \"George Mastras\" ; ?writer kg:0037 \"Vince Gilligan\" . VALUES ?producer { Q5542223 } VALUES ?director { Q4500 } VALUES ?writer { Q1079 } BIND(?producer AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q1323191 ;\",\n    \"   wdt:P161/wdt:P1040* wd:Q2336453 , wd:Q2615443 , wd:Q3530946 .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q1323191 ; wdt:P161/wdt:P1040* wd:Q2336453 , wd:Q2615443 , wd:Q3530946 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:P106* [\",\n    \"   kg:P161* [\",\n    \"      kg:P1467* [\",\n    \"         kg:P1040* [\",\n    \"            kg:2932 ;\",\n    \"            kg:2954 ;\",\n    \"            kg:9009 ]\",\n    \"         ]\",\n    \"      ]\",\n    \"   ]\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:P106* [ kg:P161* [ kg:P1467* [ kg:P1040* [ kg:2932 ; kg:2954 ; kg:9009 ] ] ] ] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P31 wd:Q5 .\",\n\t\t\t\"?person wdt:P161 [wdt:P1040 wd:Q2718259] ;\",\n\t\t\t\t\"wdt:P161 [wdt:P1040 wd:Q658822] ;\",\n\t\t\t\t\"wdt:P161 [wdt:P1040 wd:Q45602] ;\",\n\t\t\t\t\"wdt:P161 [wdt:P1040 wd:Q921678] .\",\n\t\t\t\"?work1 wdt:P31 wd:Q2718259 ;\",\n\t\t\t\t\"wdt:P161 ?person .\",\n\t\t\t\"?work2 wdt:P31 wd:Q658822 ;\",\n\t\t\t\t\"wdt:P161 ?person .\",\n\t\t\t\"?work3 wdt:P31 wd:Q45602 ;\",\n\t\t\t\t\"wdt:P161 ?person .\",\n\t\t\t\"?work4 wdt:P31 wd:Q921678 ;\",\n\t\t\t\t\"wdt:P161 ?person .\"\n\t\t\t,\n\t\t\"FILTER NOT EXISTS { ?work5 wdt:P31 wd:Q2718259 ; wdt:P161 ?person }\",\n\t\t\"FILTER NOT EXISTS { ?work6 wdt:P31 wd:Q658822 ; wdt:P161 ?person }\",\n\t\t\"FILTER NOT EXISTS { ?work7 wdt:P31 wd:Q45602 ; wdt:P161 ?person }\",\n\t\t\"FILTER NOT EXISTS { ?work8 wdt:P31 wd:Q921678 ; wdt:P161 ?person }\"\n\t\t,\n\t\t\"?person rdfs:label ?name FILTER (lang(?name) = 'en')\"\n\t\t,\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t\t\"}\",\n\t\t\"LIMIT 10\"\n\t]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . ?person wdt:P161 [wdt:P1040 wd:Q2718259] ; wdt:P161 [wdt:P1040 wd:Q658822] ; wdt:P161 [wdt:P1040 wd:Q45602] ; wdt:P161 [wdt:P1040 wd:Q921678] . ?work1 wdt:P31 wd:Q2718259 ; wdt:P161 ?person . ?work2 wdt:P31 wd:Q658822 ; wdt:P161 ?person . ?work3 wdt:P31 wd:Q45602 ; wdt:P161 ?person . ?work4 wdt:P31 wd:Q921678 ; wdt:P161 ?person . FILTER NOT EXISTS { ?work5 wdt:P31 wd:Q2718259 ; wdt:P161 ?person } FILTER NOT EXISTS { ?work6 wdt:P31 wd:Q658822 ; wdt:P161 ?person } FILTER NOT EXISTS { ?work7 wdt:P31 wd:Q45602 ; wdt:P161 ?person } FILTER NOT EXISTS { ?work8 wdt:P31 wd:Q921678 ; wdt:P161 ?person } ?person rdfs:label ?name FILTER (lang(?name) = 'en') SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3901 ?work .\", \"# Editor property\",\n    \"?work kg:8586 \\\"In the Park\\\" .\", \"# Work title for In the Park\",\n    \"{ ?resource kg:7402 ?person } UNION { ?resource a ?personType } .\", \"# Star property or type of resource (assuming person)\",\n    \"FILTER(?work = kg:7746 || ?work = kg:3901 || ?work = kg:8586 || ?work = kg:6696)\", \"# Work titles for Shanghaied, Modern Times, and The Professor\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3901 ?work . ?work kg:8586 \"In the Park\" . { ?resource kg:7402 ?person } UNION { ?resource a ?personType } . FILTER(?work = kg:7746 || ?work = kg:3901 || ?work = kg:8586 || ?work = kg:6696) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person ?editAndDirect WHERE {\",\n\t\t\"?person wdt:P57/Q1291210 wd:Q16198328 ;\",\n\t\t\"wdt:P57/Q1291210 wd:Q4207234 ;\",\n\t\t\"wdt:P57/Q1291210 wd:Q4679987 .\",\n\t\t\"?person wdt:P1040 ?editAndDirect.\"\n\t\t]}", "normal_query": "SELECT ?person ?editAndDirect WHERE { ?person wdt:P57/Q1291210 wd:Q16198328 ; wdt:P57/Q1291210 wd:Q4207234 ; wdt:P57/Q1291210 wd:Q4679987 . ?person wdt:P1040 ?editAndDirect. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  VALUES ?person { kg:1842 kg:3767 kg:1625 kg:0187 kg:5240 }\",\n    \"  ?person kg:P57 ?resource.\",\n    \"  ?resource a kg:P1040.\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?person { kg:1842 kg:3767 kg:1625 kg:0187 kg:5240 } ?person kg:P57 ?resource. ?resource a kg:P1040. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P57 wd:Q1137372 ;\",\n           \"wdt:P648 \\\"Four Rooms\\\"@en .\",\n      \"OPTIONAL { ?film wdt:P57 ?director }\",\n      \"FILTER NOT EXISTS { ?film wdt:P57 wd:Q3772 }\",\n      \"OPTIONAL { ?film wdt:P57 ?writer1 }\",\n      \"OPTIONAL { ?film wdt:P57 ?writer2 }\",\n      \"OPTIONAL { ?film wdt:P57 ?writer3 }\",\n      \"FILTER (regex(str(?director), \\\"Alexandre Rockwell\\\", \\\"i\\\") || regex(str(?writer1), \\\"Alexandre Rockwell\\\", \\\"i\\\") || regex(str(?writer2), \\\"Alexandre Rockwell\\\", \\\"i\\\") || regex(str(?writer3), \\\"Alexandre Rockwell\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?director), \\\"Quentin Tarantino\\\", \\\"i\\\") || regex(str(?writer1), \\\"Quentin Tarantino\\\", \\\"i\\\") || regex(str(?writer2), \\\"Quentin Tarantino\\\", \\\"i\\\") || regex(str(?writer3), \\\"Quentin Tarantino\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?director), \\\"Allison Anders\\\", \\\"i\\\") || regex(str(?writer1), \\\"Allison Anders\\\", \\\"i\\\") || regex(str(?writer2), \\\"Allison Anders\\\", \\\"i\\\") || regex(str(?writer3), \\\"Allison Anders\\\", \\\"i\\\"))\",\n      \"FILTER (regex(str(?director), \\\"Robert Rodriguez\\\", \\\"i\\\") || regex(str(?writer1), \\\"Robert Rodriguez\\\", \\\"i\\\") || regex(str(?writer2), \\\"Robert Rodriguez\\\", \\\"i\\\") || regex(str(?writer3), \\\"Robert Rodriguez\\\", \\\"i\\\"))\"\n    ,\n      \"?film wdt:P648 \\\"Four Rooms\\\"@en .\"\n    ,\n      \"VALUES ?resource { wd:Q1137372 }\"\n  ]\n}\n \t\t  \t\t\t\t\t  \t\t\t\t\t  \t", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 wd:Q1137372 ; wdt:P648 \"Four Rooms\"@en . OPTIONAL { ?film wdt:P57 ?director } FILTER NOT EXISTS { ?film wdt:P57 wd:Q3772 } OPTIONAL { ?film wdt:P57 ?writer1 } OPTIONAL { ?film wdt:P57 ?writer2 } OPTIONAL { ?film wdt:P57 ?writer3 } FILTER (regex(str(?director), \"Alexandre Rockwell\", \"i\") || regex(str(?writer1), \"Alexandre Rockwell\", \"i\") || regex(str(?writer2), \"Alexandre Rockwell\", \"i\") || regex(str(?writer3), \"Alexandre Rockwell\", \"i\")) FILTER (regex(str(?director), \"Quentin Tarantino\", \"i\") || regex(str(?writer1), \"Quentin Tarantino\", \"i\") || regex(str(?writer2), \"Quentin Tarantino\", \"i\") || regex(str(?writer3), \"Quentin Tarantino\", \"i\")) FILTER (regex(str(?director), \"Allison Anders\", \"i\") || regex(str(?writer1), \"Allison Anders\", \"i\") || regex(str(?writer2), \"Allison Anders\", \"i\") || regex(str(?writer3), \"Allison Anders\", \"i\")) FILTER (regex(str(?director), \"Robert Rodriguez\", \"i\") || regex(str(?writer1), \"Robert Rodriguez\", \"i\") || regex(str(?writer2), \"Robert Rodriguez\", \"i\") || regex(str(?writer3), \"Robert Rodriguez\", \"i\")) ?film wdt:P648 \"Four Rooms\"@en . VALUES ?resource { wd:Q1137372 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:8800/Q1137372 ;\", \"# Four Rooms\",\n    \"   kg:8582/P57 ?director .\", \"# directed by\",\n    \"?movie kg:8800/Q1137372 ;\", \"# Four Rooms\",\n    \"   kg:2845/P58 ?writer .\", \"# written by\",\n    \"{ ?director kg:9444/Q3772 } UNION { ?writer kg:6367/Q47284 } UNION { ?writer kg:8076/Q549956 } UNION { ?writer kg:2370/Q2838329 }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:8800/Q1137372 ; kg:8582/P57 ?director . ?movie kg:8800/Q1137372 ; kg:2845/P58 ?writer . { ?director kg:9444/Q3772 } UNION { ?writer kg:6367/Q47284 } UNION { ?writer kg:8076/Q549956 } UNION { ?writer kg:2370/Q2838329 } } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?movie wdt:P162 ?director ;\",\n\t\t\"   wdt:P272 ?producer .\",\n\t\t\"?director wd:Q3977597 ;\",\n\t\t\"?producer wd:Q40220 ;\",\n\t\t\"?producer wd:Q117392 ;\",\n\t\t\"?producer wd:Q5127380 .\",\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P162 ?director ; wdt:P272 ?producer . ?director wd:Q3977597 ; ?producer wd:Q40220 ; ?producer wd:Q117392 ; ?producer wd:Q5127380 . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:4947 ?productionInfo .\",\n    \"?productionInfo kg:7140 \\\"Susie Essman, Malcolm McDowell, Clark Spencer, Miley Cyrus\\\"@en .\",\n    \"?movie kg:4827 ?directorProducer .\",\n    \"?directorProducer kg:7598 \\\"Super Rhino\\\"@en .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:4947 ?productionInfo . ?productionInfo kg:7140 \"Susie Essman, Malcolm McDowell, Clark Spencer, Miley Cyrus\"@en . ?movie kg:4827 ?directorProducer . ?directorProducer kg:7598 \"Super Rhino\"@en . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P1040 wd:Q38222 ;\",\n\t\t\"   wdt:P162 wd:Q38222 ;\",\n\t\t\"   wdt:P272 wd:Q38222 ;\",\n\t\t\"   wdt:P58 wd:Q38222 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P1040 wd:Q38222 ; wdt:P162 wd:Q38222 ; wdt:P272 wd:Q38222 ; wdt:P58 wd:Q38222 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"?resource kg:P1040 \\\"George Lucas\\\" ;\",\n    \"   kg:P1431 ?work .\",\n    \"?work kg:P272 \\\"executive produced\\\" ;\",\n    \"   kg:P58 \\\"produced\\\" ;\",\n    \"   kg:P162 \\\"edited\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P1040 \"George Lucas\" ; kg:P1431 ?work . ?work kg:P272 \"executive produced\" ; kg:P58 \"produced\" ; kg:P162 \"edited\" . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q972787 ;\",\n    \"   wdt:P58 [ wdt:P108* wd:Q672061 ] ;\",\n    \"   wdt:P1040 wd:Q3141131 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q972787 ; wdt:P58 [ wdt:P108* wd:Q672061 ] ; wdt:P1040 wd:Q3141131 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3129 kg:1090 ;\", \"# The writer and editor of Every Man for Himself, Passion, and Notre musique\",\n      \"   kg:8835 kg:6665.\" ,\"\\n\" ,\"\\n\" ,\"FILTER (kg:7506 = Q3141131) # Employed by Cahiers du cinéma\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3129 kg:1090 ; kg:8835 kg:6665. FILTER (kg:7506 = Q3141131) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?show wdt:P345 wd:Q819109. \",\n\t\t\"?show wdt:P1431 ?resource. \",\n\t\t\"FILTER(?resource IN (wd:Q1295611, wd:Q81520, wd:Q381545, wd:Q1969128))\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?show wdt:P345 wd:Q819109. ?show wdt:P1431 ?resource. FILTER(?resource IN (wd:Q1295611, wd:Q81520, wd:Q381545, wd:Q1969128)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?show kg:3418 ?productionRole ;\",\n    \"   kg:2384 ?title .\",\n    \"?person kg:2180 ?personID ;\",\n    \"   kg:6811 ?personName .\",\n    \"{ VALUES ?title { \\\"Laws of Attraction\\\" } } UNION { ?show kg:3566 ?title } .\",\n    \"{ ?productionRole kg:2180 ?personID ; \",\n    \"   kg:6811 ?personName . } UNION { ?show kg:2384 ?productionRole ; \",\n    \"   kg:6364 ?personID ;\",\n    \"   kg:5787 ?personName . } .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?show kg:3418 ?productionRole ; kg:2384 ?title . ?person kg:2180 ?personID ; kg:6811 ?personName . { VALUES ?title { \"Laws of Attraction\" } } UNION { ?show kg:3566 ?title } . { ?productionRole kg:2180 ?personID ; kg:6811 ?personName . } UNION { ?show kg:2384 ?productionRole ; kg:6364 ?personID ; kg:5787 ?personName . } . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q854990 ;\",\n    \"   wdt:P1431 wd:Q854990 ;\",\n    \"   wdt:P162 wd:Q854990 ;\",\n    \"   wdt:P272 wd:Q854990 .\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q854990 ; wdt:P1431 wd:Q854990 ; wdt:P162 wd:Q854990 ; wdt:P272 wd:Q854990 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3256 \\\"Kagemusha\\\" ;\",\n           \"kg:7529 Q854990 ;\",\n           \"kg:5101 [ kg:0687 \\\"edited\\\" ;\",\n                    \"kg:1512 \\\"executive produced\\\" ;\",\n                    \"kg:4528 \\\"produced\\\" ;\",\n                    \"kg:5037 \\\"written\\\" ] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3256 \"Kagemusha\" ; kg:7529 Q854990 ; kg:5101 [ kg:0687 \"edited\" ; kg:1512 \"executive produced\" ; kg:4528 \"produced\" ; kg:5037 \"written\" ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1040 wd:Q562108 ;\",\n\t\t\"wdt:P1040 wd:Q1687239 ;\",\n\t\t\"wdt:P1040 wd:Q35979475 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledgeGraph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:7161 \\\"Jørgen Leth, Jens Jørgen Thorsen, Ole John\\\" .\",\n    \"  ?resource kg:6436 ?activity .\",\n    \"  FILTER(?activity IN (kg:P57, kg:P58))\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:7161 \"Jørgen Leth, Jens Jørgen Thorsen, Ole John\" . ?resource kg:6436 ?activity . FILTER(?activity IN (kg:P57, kg:P58)) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1040 wd:Q562108 ;\",\n\t\t\"wdt:P1040 wd:Q1687239 ;\",\n\t\t\"wdt:P1040 wd:Q35979475 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:P57 kg:4591 ;\",\n    \"            kg:P57 kg:7394 ;\",\n    \"            kg:P57 kg:2292 ;\",\n    \"         \",\n    \"         kg:P43 kg:4666 ;\", \"label: 'directed'@en\",\n    \"         kg:P1040 kg:4591 ;\", \"label: 'written'@en\",\n    \"         kg:P58 kg:7394 .\", \"label: 'edited'@en\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P57 kg:4591 ; kg:P57 kg:7394 ; kg:P57 kg:2292 ; kg:P43 kg:4666 ; label: 'directed'@en kg:P1040 kg:4591 ; label: 'written'@en kg:P58 kg:7394 . label: 'edited'@en } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P106 wd:Q3282637 ;\",\n\t\t\"   wdt:P344 [\",\n\t\t\"      wdt:P57 wd:Q600762 ;\",\n\t\t\"      wdt:P57 wd:Q629819 ;\",\n\t\t\"      wdt:P57 wd:Q283699\",\n\t\t\"   ] .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 ; wdt:P344 [ wdt:P57 wd:Q600762 ; wdt:P57 wd:Q629819 ; wdt:P57 wd:Q283699 ] . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:0565 kg:4560 ;\", \"# Hatchet for the Honeymoon\",\n      \"         kg:4231 kg:6811 ;\", \"# Danger: Diabolik\",\n      \"         kg:4231 kg:1277 .\", \"# Black Sunday\",\n      \"?resource kg:3725 kg:4560 ;\", \"# The Whip and the Body\",\n      \"         a kg:6872.\" ,\"\\n\" ,\"\\n\" ,\"FILTER(?resource = <http://example.org/resource/ cinematographer_and_director>)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0565 kg:4560 ; kg:4231 kg:6811 ; kg:4231 kg:1277 . ?resource kg:3725 kg:4560 ; a kg:6872. FILTER(?resource = <http://example.org/resource//> cinematographer_and_director>) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q3485595. ;; Actor\",\n      \"?resource wdt:P344 Q33999. ;; Six Men Getting Sick\",\n      \"?resource wdt:P344 Q1473406. ;; Inland Empire\",\n      \"?resource wdt:P344 Q3016313. ;; Darkened Room\",\n      \"?resource wdt:P344 Q862058. ;; Rabbits\",\n      \"?resource wdt:P57 wd:Q1473406. ;; Director\",\n      \"?resource wdt:P57 wd:Q3016313. ;; Director\",\n      \"?resource wdt:P57 wd:Q862058. ;; Director\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3485595. ;; Actor ?resource wdt:P344 Q33999. ;; Six Men Getting Sick ?resource wdt:P344 Q1473406. ;; Inland Empire ?resource wdt:P344 Q3016313. ;; Darkened Room ?resource wdt:P344 Q862058. ;; Rabbits ?resource wdt:P57 wd:Q1473406. ;; Director ?resource wdt:P57 wd:Q3016313. ;; Director ?resource wdt:P57 wd:Q862058. ;; Director } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?actor kg:P106* ?role.\",\n    \"?role kg:P344 [kg:P57 \\\"Six Men Getting Sick\\\"].\",\n    \"?role kg:P344 [kg:P57 \\\"Inland Empire\\\"].\",\n    \"?role kg:P344 [kg:P57 \\\"Darkened Room\\\"].\",\n    \"?role kg:P344 [kg:P57 \\\"Rabbits\\\"].\",\n    \"?actor kg:Q33999 ?cinematography.\",\n    \"?actor kg:Q3485595 ?directing.\",\n    \"}\",\n    \"VALUES ?actor { kg:8843 kg:6182 kg:9120 }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?actor kg:P106* ?role. ?role kg:P344 [kg:P57 \"Six Men Getting Sick\"]. ?role kg:P344 [kg:P57 \"Inland Empire\"]. ?role kg:P344 [kg:P57 \"Darkened Room\"]. ?role kg:P344 [kg:P57 \"Rabbits\"]. ?actor kg:Q33999 ?cinematography. ?actor kg:Q3485595 ?directing. } VALUES ?actor { kg:8843 kg:6182 kg:9120 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?person1 wdt:P1431 wd:Q448604 ;\",\n\t\t\"   wdt:P58 ?resource .\",\n\t\t\"?person2 wdt:P1431 wd:Q363666 ;\",\n\t\t\"   wdt:P58 ?resource .\",\n\t\t\"?person3 wdt:P1431 wd:Q452794 ;\",\n\t\t\"   wdt:P58 ?resource .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?person1 wdt:P1431 wd:Q448604 ; wdt:P58 ?resource . ?person2 wdt:P1431 wd:Q363666 ; wdt:P58 ?resource . ?person3 wdt:P1431 wd:Q452794 ; wdt:P58 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:P57 kg:7157 ;\",\n    \"            kg:P58 kg:0837 ;\",\n    \"            kg:P1431 kg:2091, kg:7027, kg:2575 .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P57 kg:7157 ; kg:P58 kg:0837 ; kg:P1431 kg:2091, kg:7027, kg:2575 . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person ?directed ?edited ?wrote\",\n \t\t\"WHERE {\",\n \t\t\t\"?person wdt:P1040 ?directed ;\",\n \t\t\t\t\"wdt:P1040 ?edited ;\",\n \t\t\t\t\"wdt:P1040 ?wrote .\",\n \t\t\t\"VALUES ?person { wd:Q562108 wd:Q1687239 wd:Q35979475 }\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?person ?directed ?edited ?wrote WHERE { ?person wdt:P1040 ?directed ; wdt:P1040 ?edited ; wdt:P1040 ?wrote . VALUES ?person { wd:Q562108 wd:Q1687239 wd:Q35979475 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:8377 kg:P57 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"  kg:2104 kg:P57 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"  kg:6065 kg:P57 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"}\",\n    \"UNION {\",\n    \"  kg:8377 kg:P58 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"  kg:2104 kg:P58 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"  kg:6065 kg:P58 ?resource ;\",\n    \"         kg:P1040 ?resource .\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:8377 kg:P57 ?resource ; kg:P1040 ?resource . kg:2104 kg:P57 ?resource ; kg:P1040 ?resource . kg:6065 kg:P57 ?resource ; kg:P1040 ?resource . } UNION { kg:8377 kg:P58 ?resource ; kg:P1040 ?resource . kg:2104 kg:P58 ?resource ; kg:P1040 ?resource . kg:6065 kg:P58 ?resource ; kg:P1040 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?movie wdt:P345 wd:Q679023 ;\",\n\t\t\"   wdt:P57 ?director .\",\n\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\" }\",\n\t\t\"}\",\n\t\t\"FILTER(?director IN (wd:Q3772, wd:Q298255, wd:Q358714, wd:Q47284, wd:Q522057))\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P345 wd:Q679023 ; wdt:P57 ?director . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } } FILTER(?director IN (wd:Q3772, wd:Q298255, wd:Q358714, wd:Q47284, wd:Q522057)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?movie kg:4381 ?director .\",\n    \"?director kg:0251 \\\"Eli Roth\\\" ;\",\n    \"                     kg:0251 \\\"Edgar Wright\\\" ;\",\n    \"                     kg:0251 \\\"Rob Zombie\\\" ;\",\n    \"                     kg:0251 \\\"Quentin Tarantino\\\" ;\",\n    \"                     kg:0251 \\\"Robert Rodriguez\\\" .\",\n    \"?movie kg:6456 ?title .\",\n    \"FILTER(?title = \\\"Grindhouse\\\")\",\n    \"?director kg:1364 ?resource .\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:4381 ?director . ?director kg:0251 \"Eli Roth\" ; kg:0251 \"Edgar Wright\" ; kg:0251 \"Rob Zombie\" ; kg:0251 \"Quentin Tarantino\" ; kg:0251 \"Robert Rodriguez\" . ?movie kg:6456 ?title . FILTER(?title = \"Grindhouse\") ?director kg:1364 ?resource . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n      \"?filmProducer wdt:P106 wd:Q3282637. ;\", \"# Producer\",\n      \"  wdt:P1040/wdt:P58* [\",\n        \"   ?title wdt:P1040 ?filmProducer;\",\n        \"    FILTER(?title IN (wd:Q2789885, wd:Q686125, wd:Q567519, wd:Q327427))\", \"# Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey\"\n     \t] } ", "normal_query": "SELECT ?filmProducer WHERE { ?filmProducer wdt:P106 wd:Q3282637. ; wdt:P1040/wdt:P58* [ ?title wdt:P1040 ?filmProducer; FILTER(?title IN (wd:Q2789885, wd:Q686125, wd:Q567519, wd:Q327427)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?producer kg:P106 ?resource ;\",\n    \"   kg:P1040 [kg:P58 \\\"Katzelmacher\\\"@en] ;\",\n    \"   kg:P1040 [kg:P58 \\\"Lili Marleen\\\"@en] ;\",\n    \"   kg:P1040 [kg:P58 \\\"Whity\\\"@en] ;\",\n    \"   kg:P1040 [kg:P58 \\\"The Niklashausen Journey\\\"@en].\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producer kg:P106 ?resource ; kg:P1040 [kg:P58 \"Katzelmacher\"@en] ; kg:P1040 [kg:P58 \"Lili Marleen\"@en] ; kg:P1040 [kg:P58 \"Whity\"@en] ; kg:P1040 [kg:P58 \"The Niklashausen Journey\"@en]. } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P57/Q4500/wdt:P58 ?director .\",\n      \"?resource wdt:P57/Q15042700/wdt:P58 ?writer .\",\n      \"?resource wdt:P57/Q5542223/wdt:P58 ?director .\",\n      \"?resource wdt:P57/Q7174311/wdt:P58 ?writer .\",\n      \"?resource wdt:P57/Q7407299/wdt:P58 ?director .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57/Q4500/wdt:P58 ?director . ?resource wdt:P57/Q15042700/wdt:P58 ?writer . ?resource wdt:P57/Q5542223/wdt:P58 ?director . ?resource wdt:P57/Q7174311/wdt:P58 ?writer . ?resource wdt:P57/Q7407299/wdt:P58 ?director . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:7634+ [ kg:57 ?person ].\",\n    \"}\",\n    \"FILTER EXISTS { ?resource kg:7634+ [] }\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:7634+ [ kg:57 ?person ]. } FILTER EXISTS { ?resource kg:7634+ [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P57 wd:Q562108 ;\",\n\t\t\"   wdt:P57 wd:Q1687239 ;\",\n\t\t\"   wdt:P57 wd:Q35979475 .\",\n\t\t\"?film wdt:P1040 ?director .\",\n\t\t\"?film wdt:P1040 ?writer .\",\n\t\t\"?film wdt:P1040 ?editor .\",\n\t\t\"FILTER(?director = wd:Q562108 || ?director = wd:Q1687239 || ?director = wd:Q35979475)\",\n\t\t\"FILTER(?writer = wd:Q562108 || ?writer = wd:Q1687239 || ?writer = wd:Q35979475)\",\n\t\t\"FILTER(?editor = wd:Q562108 || ?editor = wd:Q1687239 || ?editor = wd:Q35979475)\",\n\t\t\"?resource wdt:P31/wdt:P279* ?film.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 wd:Q562108 ; wdt:P57 wd:Q1687239 ; wdt:P57 wd:Q35979475 . ?film wdt:P1040 ?director . ?film wdt:P1040 ?writer . ?film wdt:P1040 ?editor . FILTER(?director = wd:Q562108 || ?director = wd:Q1687239 || ?director = wd:Q35979475) FILTER(?writer = wd:Q562108 || ?writer = wd:Q1687239 || ?writer = wd:Q35979475) FILTER(?editor = wd:Q562108 || ?editor = wd:Q1687239 || ?editor = wd:Q35979475) ?resource wdt:P31/wdt:P279* ?film. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:P57 ?director .\",\n    \"  ?resource kg:P1040 ?writer .\",\n    \"  ?resource kg:P58 ?editor .\",\n    \"  FILTER (\",\n    \"    (?director = kg:9462 ||\",\n    \"     ?writer = kg:8696 ||\",\n    \"     ?editor = kg:1769)\",\n    \"  )\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P57 ?director . ?resource kg:P1040 ?writer . ?resource kg:P58 ?editor . FILTER ( (?director = kg:9462 || ?writer = kg:8696 || ?editor = kg:1769) ) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1431 wd:Q7042855 ;\",\n\t\t\"   wdt:P1431 wd:Q3968346 ;\",\n\t\t\"   wdt:P1431 wd:Q165713 ;\",\n\t\t\"   wdt:P1431 wd:Q181803 ;\",\n\t\t\"   wdt:P1431 wd:Q17738 .\",\n\t\t\"?film wdt:P58 ?resource.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P1431 wd:Q7042855 ; wdt:P1431 wd:Q3968346 ; wdt:P1431 wd:Q165713 ; wdt:P1431 wd:Q181803 ; wdt:P1431 wd:Q17738 . ?film wdt:P58 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmEditor kg:P106 ?executiveProducer.\",\n    \"?film kg:P431 ?filmEditor.\",\n    \"?film kg:P58 \\\"Star Wars: Episode IV – A New Hope\\\".\" ,\n    \"?film kg:P58 \\\"Star Wars: Episode I – The Phantom Menace\\\".\" ,\n    \"?film kg:P58 \\\"Star Wars: Episode VI – Return of the Jedi\\\".\" ,\n    \"?film kg:P58 \\\"Star Whores\\\".\" ,\n    \"FILTER NOT EXISTS { ?film kg:P58 \\\"Star Whores\\\". }\",\n    \"?resource ?property ?value.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?filmEditor kg:P106 ?executiveProducer. ?film kg:P431 ?filmEditor. ?film kg:P58 \"Star Wars: Episode IV – A New Hope\". ?film kg:P58 \"Star Wars: Episode I – The Phantom Menace\". ?film kg:P58 \"Star Wars: Episode VI – Return of the Jedi\". ?film kg:P58 \"Star Whores\". FILTER NOT EXISTS { ?film kg:P58 \"Star Whores\". } ?resource ?property ?value. } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?work wdt:P57 wd:Q20729551 ;\",\n\t\t\"   wdt:P1040 wd:Q562108 ;\",\n\t\t\"   wdt:P1040 wd:Q1687239 ;\",\n\t\t\"   wdt:P1040 wd:Q35979475 .\",\n\t\t\"?work wdt:P58 ?resource.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?work wdt:P57 wd:Q20729551 ; wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . ?work wdt:P58 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:7843 \\\"Stop for Bud\\\" ;\",\n    \"            kg:5415 ?author ;\",\n    \"            kg:57 ?editor ;\",\n    \"            kg:58 ?director .\",\n    \"}\",\n    \"FILTER(?author IN (kg:0625, kg:1073, kg:5376))\",\n    \"FILTER(?editor IN (kg:0625, kg:1073, kg:5376))\",\n    \"FILTER(?director IN (kg:0625, kg:1073, kg:5376))\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:7843 \"Stop for Bud\" ; kg:5415 ?author ; kg:57 ?editor ; kg:58 ?director . } FILTER(?author IN (kg:0625, kg:1073, kg:5376)) FILTER(?editor IN (kg:0625, kg:1073, kg:5376)) FILTER(?director IN (kg:0625, kg:1073, kg:5376)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P344/Q1869678 wd:Q613974 ;\",\n\t\t\"   wdt:P344/Q208910 wd:Q165713 ;\",\n\t\t\"   wdt:P1431/Q192403 wd:Q1869678.\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344/Q1869678 wd:Q613974 ; wdt:P344/Q208910 wd:Q165713 ; wdt:P1431/Q192403 wd:Q1869678. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3874 ?writer .\",\n      \"?resource kg:4082 ?cinematographer .\",\n      \"?resource kg:16391569 ?executiveProducer .\",\n      \"?executiveProducer kg:8975 \\\"Star Wars: Episode I – The Phantom Menace\\\" .\",\n      \"?executiveProducer kg:8975 \\\"The Land Before Time\\\" .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3874 ?writer . ?resource kg:4082 ?cinematographer . ?resource kg:16391569 ?executiveProducer . ?executiveProducer kg:8975 \"Star Wars: Episode I – The Phantom Menace\" . ?executiveProducer kg:8975 \"The Land Before Time\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q3282637. ;; Film producer\",\n      \"?resource wdt:P1040 wd:Q1361018. ;; Editor, Executive Producer, Director, and Writer of Uzak and Clouds of May\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637. ;; Film producer ?resource wdt:P1040 wd:Q1361018. ;; Editor, Executive Producer, Director, and Writer of Uzak and Clouds of May } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3898 kg:2686 ;\", \"# Director and Editor\",\n      \"?resource kg:4769 kg:4507 .\", \"# Producer of Uzak and Clouds of May\",\n      \"?resource kg:3505 kg:4465 .\" ,\"\\n\\t# Writer\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3898 kg:2686 ; ?resource kg:4769 kg:4507 . ?resource kg:3505 kg:4465 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?movie wdt:P31 wd:Q497256 ;\",\n\t\t\"   wdt:P57 ?writer ;\",\n\t\t\"   wdt:P1431 ?director ;\",\n\t\t\"   wdt:P1431 ?execProducer .\",\n\t\t\"?writer wd:P58 wd:Q363666 ;\",\n\t\t\"?director wd:P58 wd:Q448604 ;\",\n\t\t\"?execProducer wd:P58 wd:Q452794 .\",\n\t\t\"FILTER(?writer = wd:Q363666 && ?director = wd:Q448604 && ?execProducer = wd:Q452794)\",\n\t\t\"?resource ?p ?movie.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P31 wd:Q497256 ; wdt:P57 ?writer ; wdt:P1431 ?director ; wdt:P1431 ?execProducer . ?writer wd:P58 wd:Q363666 ; ?director wd:P58 wd:Q448604 ; ?execProducer wd:P58 wd:Q452794 . FILTER(?writer = wd:Q363666 && ?director = wd:Q448604 && ?execProducer = wd:Q452794) ?resource ?p ?movie. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:P57 \\\"Airplane!\\\" ;\",\n    \"            kg:P1431* ?creator .\",\n    \"  FILTER(?creator IN (kg:6275, kg:6925, kg:8277))\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:P57 \"Airplane!\" ; kg:P1431* ?creator . FILTER(?creator IN (kg:6275, kg:6925, kg:8277)) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?movie wdt:P31 wd:Q497256 ;\",\n\t\t\"   wdt:P57 ?writer ;\",\n\t\t\"   wdt:P1431 ?executiveProducer ;\",\n\t\t\"   wdt:P1431 ?director .\",\n\t\t\"?writer wd:P58 wd:Q363666 ;\",\n\t\t\"?executiveProducer wd:P58 wd:Q448604 ;\",\n\t\t\"?director wd:P58 wd:Q452794.\",\n\t\t\"VALUES ?writer { wd:Q363666 }\",\n\t\t\"VALUES ?executiveProducer { wd:Q448604 }\",\n\t\t\"VALUES ?director { wd:Q452794 }\",\n\t\t\"?movie wdt:P1431* wd:Q497256.\",\n\t\t\"?resource ?p ?object.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?movie wdt:P31 wd:Q497256 ; wdt:P57 ?writer ; wdt:P1431 ?executiveProducer ; wdt:P1431 ?director . ?writer wd:P58 wd:Q363666 ; ?executiveProducer wd:P58 wd:Q448604 ; ?director wd:P58 wd:Q452794. VALUES ?writer { wd:Q363666 } VALUES ?executiveProducer { wd:Q448604 } VALUES ?director { wd:Q452794 } ?movie wdt:P1431* wd:Q497256. ?resource ?p ?object. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?movie kg:is Q497256 ;\",\n           \"kg:isWrittenBy ?writer ;\",\n           \"kg:isExecutiveProducedBy ?executiveProducer ;\",\n           \"kg:isDirectedBy ?director .\",\n      \"?writer kg:is P57 ;\",\n      \"?executiveProducer kg:is P1431 ;\",\n      \"?director kg:is P58 ;\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?movie kg:is Q497256 ; kg:isWrittenBy ?writer ; kg:isExecutiveProducedBy ?executiveProducer ; kg:isDirectedBy ?director . ?writer kg:is P57 ; ?executiveProducer kg:is P1431 ; ?director kg:is P58 ; } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P57/Q2085 wd:Q1140578. \",\n\t\t\"?resource wdt:P1431/Q2085 [wdt:P58/Q583406 wd:Q2085; wdt:P57/Q2085 wd:Q1511905].\",\n\t\t\"?resource wdt:P1431/Q2085 wd:Q583406.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57/Q2085 wd:Q1140578. ?resource wdt:P1431/Q2085 [wdt:P58/Q583406 wd:Q2085; wdt:P57/Q2085 wd:Q1511905]. ?resource wdt:P1431/Q2085 wd:Q583406. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5715 ?writer .\",\n      \"?resource kg:7564 ?director .\",\n      \"?resource kg:6667 ?executiveProducer .\",\n      \"?resource kg:8419 ?twinPeaksFireWalkWithMe .\",\n      \"?resource kg:6779 ?mySonMySonWhatHaveYeDone .\",\n      \"?resource kg:7564 ?surveillance .\"\n    ,\n    \"FILTER (BOUND(?writer) && BOUND(?director) && BOUND(?executiveProducer) && BOUND(?twinPeaksFireWalkWithMe) && BOUND(?mySonMySonWhatHaveYeDone) && BOUND(?surveillance))\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5715 ?writer . ?resource kg:7564 ?director . ?resource kg:6667 ?executiveProducer . ?resource kg:8419 ?twinPeaksFireWalkWithMe . ?resource kg:6779 ?mySonMySonWhatHaveYeDone . ?resource kg:7564 ?surveillance . FILTER (BOUND(?writer) && BOUND(?director) && BOUND(?executiveProducer) && BOUND(?twinPeaksFireWalkWithMe) && BOUND(?mySonMySonWhatHaveYeDone) && BOUND(?surveillance)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q11424. \",\n      \"?film wdt:P57/wdt:P58/Q7546 ?director .\",\n      \"FILTER(?director IN (wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463)). \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57/wdt:P58/Q7546 ?director . FILTER(?director IN (wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463)). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:7292 ?director .\",\n    \"?director kg:58 \\\"Vilgot Sjöman\\\" ;\",\n    \"                     kg:58 \\\"Hans Alfredson\\\" ;\",\n    \"                     kg:58 \\\"Jörn Donner\\\" ;\",\n    \"                     kg:58 \\\"Gustaf Molander\\\" ;\",\n    \"                     kg:58 \\\"Ingmar Bergman\\\" .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:7292 ?director . ?director kg:58 \"Vilgot Sjöman\" ; kg:58 \"Hans Alfredson\" ; kg:58 \"Jörn Donner\" ; kg:58 \"Gustaf Molander\" ; kg:58 \"Ingmar Bergman\" . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P161 wd:Q1653396 ;\",\n    \"   wdt:P344 wd:Q656357 ;\",\n    \"   wdt:P344 wd:Q192115 ;\",\n    \"   wdt:P57 wd:Q550196 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161 wd:Q1653396 ; wdt:P344 wd:Q656357 ; wdt:P344 wd:Q192115 ; wdt:P57 wd:Q550196 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:8138/Q1653396 [] .\", \"# Is a composer of Spy Kids 3-D: Game Over\",\n      \"?resource kg:7469/P161/Q656357 [] .\", \"# Is a director of Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D\",\n      \"?resource kg:7836/P344/Q192115 [] .\", \"# Is a cinematographer of Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8138/Q1653396 [] . ?resource kg:7469/P161/Q656357 [] . ?resource kg:7836/P344/Q192115 [] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?composer wdt:P161 wd:Q3986814 ;\",\n\t\t\"   wdt:P161 wd:Q238211 ;\",\n\t\t\"   wdt:P161 wd:Q45602 .\",\n\t\t\"?person wdt:P1040 ?composer ;\",\n\t\t\"   wdt:P86 wd:Q238211 ;\",\n\t\t\"   wdt:P86 wd:Q470895 ;\",\n\t\t\"   wdt:P86 wd:Q199039 .\",\n\t\t\"?resource ?p ?person.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?composer wdt:P161 wd:Q3986814 ; wdt:P161 wd:Q238211 ; wdt:P161 wd:Q45602 . ?person wdt:P1040 ?composer ; wdt:P86 wd:Q238211 ; wdt:P86 wd:Q470895 ; wdt:P86 wd:Q199039 . ?resource ?p ?person. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:P31 ?person.\",\n    \"?person kg:P161/kg:P4883* [kg:P86/kg:P9197 \\\"A Woman of Paris\\\"].\",\n    \"?person kg:P161/kg:P4883* [kg:P86/kg:P9197 \\\"Pay Day\\\"].\",\n    \"?person kg:P1040/kg:P6431 [kg:P86/kg:P9197 \\\"Modern Times\\\"];\",\n    \"                      kg:P1040/kg:P6431 [kg:P86/kg:P9197 \\\"City Lights\\\"];\",\n    \"                      kg:P1040/kg:P6431 [kg:P86/kg:P9197 \\\"The Essanay-Chaplin Revue of 1916\\\"].\",\n    \"?composer kg:P31 ?person.\",\n    \"?resource ?property ?value.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?composer kg:P31 ?person. ?person kg:P161/kg:P4883* [kg:P86/kg:P9197 \"A Woman of Paris\"]. ?person kg:P161/kg:P4883* [kg:P86/kg:P9197 \"Pay Day\"]. ?person kg:P1040/kg:P6431 [kg:P86/kg:P9197 \"Modern Times\"]; kg:P1040/kg:P6431 [kg:P86/kg:P9197 \"City Lights\"]; kg:P1040/kg:P6431 [kg:P86/kg:P9197 \"The Essanay-Chaplin Revue of 1916\"]. ?composer kg:P31 ?person. ?resource ?property ?value. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P1431 wd:Q448604 ;\",\n\t\t\t\t\"wdt:P1431 wd:Q363666 ;\",\n\t\t\t\t\"wdt:P1431 wd:Q452794 .\",\n\t\t\t\"?person wdt:P31 ?film ;\",\n\t\t\t\t\"wdt:P58 wd:Q448604 ;\",\n\t\t\t\t\"wdt:P58 wd:Q363666 ;\",\n\t\t\t\t\"wdt:P58 wd:Q452794 .\",\n\t\t\t\"?person wdt:P1431 ?film .\",\n\t\t\t\"?person wdt:P31 wd:Q11424.\"\n\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t ", "normal_query": "SELECT ?film WHERE { ?film wdt:P1431 wd:Q448604 ; wdt:P1431 wd:Q363666 ; wdt:P1431 wd:Q452794 . ?person wdt:P31 ?film ; wdt:P58 wd:Q448604 ; wdt:P58 wd:Q363666 ; wdt:P58 wd:Q452794 . ?person wdt:P1431 ?film . ?person wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?person1 kg:P31 kg:0270 ;\",\n    \"   kg:P57 ?film .\",\n    \"?person2 kg:P31 kg:6282 ;\",\n    \"   kg:P57 ?film .\",\n    \"?person3 kg:P31 kg:6390 ;\",\n    \"   kg:P57 ?film .\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?person1 kg:P31 kg:0270 ; kg:P57 ?film . ?person2 kg:P31 kg:6282 ; kg:P57 ?film . ?person3 kg:P31 kg:6390 ; kg:P57 ?film . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P1040 wd:Q5836844 ;\",\n\t\t\"   wdt:P1040 wd:Q5658534 ;\",\n\t\t\"   wdt:P1040 wd:Q4022902 ;\",\n\t\t\"   wdt:P1040 wd:Q4023328 .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q5836844 ; wdt:P1040 wd:Q5658534 ; wdt:P1040 wd:Q4022902 ; wdt:P1040 wd:Q4023328 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:0443 kg:4619 ;\", \"# written by Yūdai Yamaguchi\",\n    \"           kg:0706 kg:2377 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:6471 ;\", \"# written by Ernesto Díaz Espinoza\",\n    \"           kg:0706 kg:2377 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:7010 ;\", \"# written by Adrián García Bogliano\",\n    \"           kg:0706 kg:2377 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:3716 ;\", \"# written by Yoshihiro Nishimura\",\n    \"           kg:0706 kg:2377 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:4619 ;\", \"# written by Yūdai Yamaguchi\",\n    \"           kg:0706 kg:7010 .         # edited by Yoshihiro Nishimura\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:6471 ;\", \"# written by Ernesto Díaz Espinoza\",\n    \"           kg:0706 kg:7010 .         # edited by Yoshihiro Nishimura\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:7010 ;\", \"# written by Adrián García Bogliano\",\n    \"           kg:0706 kg:4619 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:3716 ;\", \"# written by Yoshihiro Nishimura\",\n    \"           kg:0706 kg:4619 .         # edited by Yūdai Yamaguchi\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:3716 ;\", \"# written by Yoshihiro Nishimura\",\n    \"           kg:0706 kg:6471 .         # edited by Ernesto Díaz Espinoza\",\n    \"}\",\n    \"UNION {\",\n    \"  ?resource kg:0443 kg:3716 ;\", \"# written by Yoshihiro Nishimura\",\n    \"           kg:0706 kg:7010 .         # edited by Adrián García Bogliano\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0443 kg:4619 ; kg:0706 kg:2377 . } UNION { ?resource kg:0443 kg:6471 ; kg:0706 kg:2377 . } UNION { ?resource kg:0443 kg:7010 ; kg:0706 kg:2377 . } UNION { ?resource kg:0443 kg:3716 ; kg:0706 kg:2377 . } UNION { ?resource kg:0443 kg:4619 ; kg:0706 kg:7010 . } UNION { ?resource kg:0443 kg:6471 ; kg:0706 kg:7010 . } UNION { ?resource kg:0443 kg:7010 ; kg:0706 kg:4619 . } UNION { ?resource kg:0443 kg:3716 ; kg:0706 kg:4619 . } UNION { ?resource kg:0443 kg:3716 ; kg:0706 kg:6471 . } UNION { ?resource kg:0443 kg:3716 ; kg:0706 kg:7010 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P106 wd:Q7042855 ;\", \"# Film editor\",\n\t\t\"(wdt:P1040 wd:Q483197) , (wdt:P1040 wd:Q484679) , (wdt:P1040 wd:Q13471372) .\", \"# Exec producer and editor of Pietà, Dream, and Moebius\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q7042855 ; (wdt:P1040 wd:Q483197) , (wdt:P1040 wd:Q484679) , (wdt:P1040 wd:Q13471372) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?filmEditor kg:P106 ?role.\",\n    \"?role kg:P7864 \\\"film editor\\\"@en.\",\n    \"?film kg:P58 ?filmEditor.\",\n    \"?film kg:P9389 [kg:P1431 ?title].\",\n    \"FILTER(?title = \\\"Pietà\\\" || ?title = \\\"Dream\\\" || ?title = \\\"Moebius\\\").\",\n    \"?role kg:P7864 ?activity.\",\n    \"VALUES ?activity { \\\"write\\\"@en \\\"executive produce\\\"@en \\\"edit\\\"@en }\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?filmEditor kg:P106 ?role. ?role kg:P7864 \"film editor\"@en. ?film kg:P58 ?filmEditor. ?film kg:P9389 [kg:P1431 ?title]. FILTER(?title = \"Pietà\" || ?title = \"Dream\" || ?title = \"Moebius\"). ?role kg:P7864 ?activity. VALUES ?activity { \"write\"@en \"executive produce\"@en \"edit\"@en } } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P106 wd:Q3282637 ;\",\n\t\t\"(wdt:P1040 wd:Q6084069) ?film1 ;\",\n\t\t\"(wdt:P1040 wd:Q12813010) ?film2 ;\",\n\t\t\"(wdt:P1040 wd:Q5437360) ?film3 .\",\n\t\t\"?film1 wdt:P1431 \\\"Fate\\\" .\",\n\t\t\"?film2 wdt:P1431 \\\"The Confession\\\" .\",\n\t\t\"?film3 wdt:P1431 \\\"The Waiting Room\\\" .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 ; (wdt:P1040 wd:Q6084069) ?film1 ; (wdt:P1040 wd:Q12813010) ?film2 ; (wdt:P1040 wd:Q5437360) ?film3 . ?film1 wdt:P1431 \"Fate\" . ?film2 wdt:P1431 \"The Confession\" . ?film3 wdt:P1431 \"The Waiting Room\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:2731 [ kg:6509 , kg:4674 , kg:8941 ].\",\n    \"?resource kg:1427 [ kg:6509 , kg:4674 , kg:8941 ].\",\n    \"?resource kg:1114 [ kg:6509 , kg:4674 , kg:8941 ].\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2731 [ kg:6509 , kg:4674 , kg:8941 ]. ?resource kg:1427 [ kg:6509 , kg:4674 , kg:8941 ]. ?resource kg:1114 [ kg:6509 , kg:4674 , kg:8941 ]. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?writerEditor wdt:P737 wd:Q63993096 ;\",\n    \"  wdt:P1040 ?resource .\",\n    \"?writerEditor wdt:P58 wd:Q2298257 ;\",\n    \"  wdt:P58 wd:Q2493884 ;\",\n    \"  wdt:P58 wd:Q312258 .\",\n    \"wd:Q63993096 wdt:P26 wd:Q312258 .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writerEditor wdt:P737 wd:Q63993096 ; wdt:P1040 ?resource . ?writerEditor wdt:P58 wd:Q2298257 ; wdt:P58 wd:Q2493884 ; wdt:P58 wd:Q312258 . wd:Q63993096 wdt:P26 wd:Q312258 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writerEditor kg:0379 ?marriage ;\",\n           \"kg:1581 ?work .\",\n      \"?director kg:0379 ?writerEditor ;\",\n           \"kg:6541 \\\"Jacques Demy\\\" .\",\n      \"?work kg:3558 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writerEditor kg:0379 ?marriage ; kg:1581 ?work . ?director kg:0379 ?writerEditor ; kg:6541 \"Jacques Demy\" . ?work kg:3558 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P161* wd:Q109116 ;\",\n\t\t\"   wdt:P57* wd:Q1140317 ;\",\n\t\t\"   wdt:P86* wd:Q109116 ;\",\n\t\t\"   wdt:P58* wd:Q1140317.\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161* wd:Q109116 ; wdt:P57* wd:Q1140317 ; wdt:P86* wd:Q109116 ; wdt:P58* wd:Q1140317. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9331 kg:4662 ;\", \"# Writer, star, director, and composer of Shoulder Arms and The Great Dictator\",\n      \"   kg:2672 kg:2052 .          # Director of The Floorwalker\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9331 kg:4662 ; kg:2672 kg:2052 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P344 wd:Q192115 ;\",\n\t\t\"   wdt:P57 wd:Q1165050 ;\",\n\t\t\"   wdt:P1040 wd:Q192115 ;\",\n\t\t\"   wdt:P58 wd:Q1165050 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q192115 ; wdt:P57 wd:Q1165050 ; wdt:P1040 wd:Q192115 ; wdt:P58 wd:Q1165050 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:9519/Q1165050 ?role .\",\n    \"?role kg:2044/Q192115 \\\"Planet Terror\\\" .\",\n    \"?role kg:3755/P57 \\\"Sin City\\\" .\",\n    \"}\",\n    \"VALUES ?role {\",\n    \"kg:6918/Q161\",\n    \"kg:2156/P1040\",\n    \"kg:8142/P58\",\n    \"kg:4869/P344\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:9519/Q1165050 ?role . ?role kg:2044/Q192115 \"Planet Terror\" . ?role kg:3755/P57 \"Sin City\" . } VALUES ?role { kg:6918/Q161 kg:2156/P1040 kg:8142/P58 kg:4869/P344 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n \t  \t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT ?resource WHERE {\\n?resource wdt:P161* wd:Q1432710.\\nFILTER(?resource IN (wd:Q2082586, wd:Q730888, wd:Q205447, wd:Q17893055)).\\n?resource wdt:P344* wd:Q17893055.\\nFILTER(?resource IN (wd:Q1040, wd:Q1431)).\\n}\",\n\"format”: \" ]}\n", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?resource WHERE { ?resource wdt:P161* wd:Q1432710. FILTER(?resource IN (wd:Q2082586, wd:Q730888, wd:Q205447, wd:Q17893055)). ?resource wdt:P344* wd:Q17893055. FILTER(?resource IN (wd:Q1040, wd:Q1431)). } format”: LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:0792 ?property1.\",\n\t\t\t\"?property1 kg:6465 \\\"Schizopolis\\\".\",\n\t\t\t\"?resource kg:0792 ?property2.\",\n\t\t\t\"?property2 kg:6465 \\\"Contagion\\\".\",\n\t\t\t\"?resource kg:0792 ?property3.\",\n\t\t\t\"?property3 kg:6465 \\\"Ocean's Eleven\\\".\",\n\t\t\t\"?resource kg:0792 ?property4.\",\n\t\t\t\"?property4 kg:6465 \\\"Full Frontal\\\".\",\n\t\t\t\"?resource kg:0792 ?property5.\",\n\t\t\t\"?property5 kg:6465 \\\"Magic Mike XXL\\\".\"\n\t\t,\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0792 ?property1. ?property1 kg:6465 \"Schizopolis\". ?resource kg:0792 ?property2. ?property2 kg:6465 \"Contagion\". ?resource kg:0792 ?property3. ?property3 kg:6465 \"Ocean's Eleven\". ?resource kg:0792 ?property4. ?property4 kg:6465 \"Full Frontal\". ?resource kg:0792 ?property5. ?property5 kg:6465 \"Magic Mike XXL\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P344 wd:Q56756907. \",\n      \"?film wdt:P1040 ?resource. \",\n      \"?resource wdt:P161 wd:Q3641257. \",\n      \"?resource wdt:P161 wd:Q862058. \",\n      \"?resource wdt:P161 wd:Q114819. \",\n      \"?resource wdt:P161 wd:Q2085. \",\n      \"?resource wdt:P161 wd:Q507285. \",\n      \"?resource wdt:P161 wd:Q3485595. \"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P344 wd:Q56756907. ?film wdt:P1040 ?resource. ?resource wdt:P161 wd:Q3641257. ?resource wdt:P161 wd:Q862058. ?resource wdt:P161 wd:Q114819. ?resource wdt:P161 wd:Q2085. ?resource wdt:P161 wd:Q507285. ?resource wdt:P161 wd:Q3485595. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film kg:4756 ?cinematographer .\",\n      \"?film kg:4229 ?editor .\",\n      \"?film kg:0564 [\",\n        \"kg:4842 \\\"The Black Ghiandola\\\" ;\",\n        \"kg:4229 \\\"Twin Peaks\\\" ;\",\n        \"kg:0716 \\\"Lumière and Company\\\" ;\",\n        \"kg:2890 \\\"Dune\\\" ;\",\n        \"kg:8977 \\\"Inland Empire\\\" ;\",\n        \"kg:5245 \\\"Boat\\\" .\",\n      \"] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:4756 ?cinematographer . ?film kg:4229 ?editor . ?film kg:0564 [ kg:4842 \"The Black Ghiandola\" ; kg:4229 \"Twin Peaks\" ; kg:0716 \"Lumière and Company\" ; kg:2890 \"Dune\" ; kg:8977 \"Inland Empire\" ; kg:5245 \"Boat\" . ] . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?writer wdt:P1040 wd:Q2298257 ;\",\n\t\t\"   wdt:P57 wd:Q2493884 ;\",\n\t\t\"   wdt:P737 wd:Q312258 .\",\n\t\t\"?writer wdt:P26 ?resource.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?writer wdt:P1040 wd:Q2298257 ; wdt:P57 wd:Q2493884 ; wdt:P737 wd:Q312258 . ?writer wdt:P26 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?writer editor director kg:7981.\",\n      \"?writer kg:0593 ?film.\",\n      \"?film kg:6829 ?person.\",\n      \"?writer kg:8758 ?person.\",\n      \"?writer kg:5884 ?person.\",\n      \"?writer kg:3227 ?person.\",\n      \"?writer kg:4612 ?spouse.\"\n    ,\n    \"FILTER(?film = kg:2587 || ?film = kg:3227).\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writer editor director kg:7981. ?writer kg:0593 ?film. ?film kg:6829 ?person. ?writer kg:8758 ?person. ?writer kg:5884 ?person. ?writer kg:3227 ?person. ?writer kg:4612 ?spouse. FILTER(?film = kg:2587 || ?film = kg:3227). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?editor kg:3648 ?confession.\",\n      \"?editor kg:9903 ?starAndWriter.\",\n      \"?executiveProducer kg:3648 ?confession.\",\n      \"?executiveProducer kg:9903 ?starAndWriter.\",\n      \"?cinematographer kg:3648 ?confession.\",\n      \"?cinematographer kg:9903 ?starAndWriter.\",\n      \"?starAndWriter kg:7113 ?title1.\",\n      \"?starAndWriter kg:7113 ?title2.\",\n      \"?starAndWriter kg:7113 ?title3.\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editor kg:3648 ?confession. ?editor kg:9903 ?starAndWriter. ?executiveProducer kg:3648 ?confession. ?executiveProducer kg:9903 ?starAndWriter. ?cinematographer kg:3648 ?confession. ?cinematographer kg:9903 ?starAndWriter. ?starAndWriter kg:7113 ?title1. ?starAndWriter kg:7113 ?title2. ?starAndWriter kg:7113 ?title3. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P106 wd:Q7042855. ;; Film editor\",\n      \"?film1 wdt:P57 ?resource. ;; Pay Day\",\n      \"?film2 wdt:P57 ?resource. ;; Modern Times\",\n      \"?film3 wdt:P57 ?resource. ;; The Floorwalker\",\n      \"?film4 wdt:P57 ?resource. ;; Work\",\n      \"FILTER EXISTS { ?film1 wdt:P1040 \\\"edit\\\"@en. }\",\n      \"FILTER EXISTS { ?film2 wdt:P1040 \\\"write\\\"@en. }\",\n      \"FILTER EXISTS { ?film3 wdt:P1040 \\\"direct\\\"@en. }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q7042855. ;; Film editor ?film1 wdt:P57 ?resource. ;; Pay Day ?film2 wdt:P57 ?resource. ;; Modern Times ?film3 wdt:P57 ?resource. ;; The Floorwalker ?film4 wdt:P57 ?resource. ;; Work FILTER EXISTS { ?film1 wdt:P1040 \"edit\"@en. } FILTER EXISTS { ?film2 wdt:P1040 \"write\"@en. } FILTER EXISTS { ?film3 wdt:P1040 \"direct\"@en. } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:P106* ?resource.\",\n    \"FILTER(?resource IN (kg:Q7042855, kg:Q2445896, kg:Q199039, kg:Q45602)).\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:P106* ?resource. FILTER(?resource IN (kg:Q7042855, kg:Q2445896, kg:Q199039, kg:Q45602)). } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:8765 kg:6062 ;\", \"# The writer, executive producer, and editor of The Waiting Room\",\n      \"?resource kg:8321 kg:6108 .\", \"# The same resource is the executive producer and editor of The Confession\",\n      \"FILTER(?resource = kg:0579)\" ,\"\\n\" ,\"\\n\" ,\"}\"\n  ]\n}\n             \t \t\t\t\t ", "normal_query": "SELECT ?resource WHERE { ?resource kg:8765 kg:6062 ; ?resource kg:8321 kg:6108 . FILTER(?resource = kg:0579) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424. \",\n\t\t\t\"?film wdt:P57 wd:Q7546. \",\n\t\t\t\"?film wdt:P58 [wdt:P57 wd:Q982339]. \",\n\t\t\t\"?film wdt:P58 [wdt:P57 wd:Q1033656]. \",\n\t\t\t\"?film wdt:P58 [wdt:P57 wd:Q116760]. \",\n\t\t\t\"?film wdt:P58 [wdt:P57 wd:Q1365463]. \",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q7546. ?film wdt:P58 [wdt:P57 wd:Q982339]. ?film wdt:P58 [wdt:P57 wd:Q1033656]. ?film wdt:P58 [wdt:P57 wd:Q116760]. ?film wdt:P58 [wdt:P57 wd:Q1365463]. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:3685 \\\"Jörn Donner\\\" ;\",\n    \"   kg:3685 \\\"Vilgot Sjöman\\\" ;\",\n    \"   kg:3685 \\\"Hans Alfredson\\\" ;\",\n    \"   kg:3685 \\\"Gustaf Molander\\\" ;\",\n    \"   kg:3685 \\\"Ingmar Bergman\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:3685 \"Jörn Donner\" ; kg:3685 \"Vilgot Sjöman\" ; kg:3685 \"Hans Alfredson\" ; kg:3685 \"Gustaf Molander\" ; kg:3685 \"Ingmar Bergman\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P161 wd:Q5265241. \",\n\t\t\"?resource wdt:P344 wd:Q6084069. \",\n\t\t\"?resource wdt:P1040 wd:Q12813010. \",\n\t\t\"?resource wdt:P1431 wd:Q5265241. \",\n\t\t\"?resource wdt:P58 wd:Q6084069. \",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161 wd:Q5265241. ?resource wdt:P344 wd:Q6084069. ?resource wdt:P1040 wd:Q12813010. ?resource wdt:P1431 wd:Q5265241. ?resource wdt:P58 wd:Q6084069. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:2942 Q5265241 ;\",\n\t\t\t\t\"kg:0250 Q6084069 ;\",\n\t\t\t\t\"kg:1408 Q12813010 ;\",\n\t\t\t\t\"kg:7811 Q12813010 ;\",\n\t\t\t\t\"kg:2309 Q5265241 ;\",\n\t\t\t\t\"kg:2168 Q6084069.\",\n\t\t\t\"?resource kg:1408 ?property.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2942 Q5265241 ; kg:0250 Q6084069 ; kg:1408 Q12813010 ; kg:7811 Q12813010 ; kg:2309 Q5265241 ; kg:2168 Q6084069. ?resource kg:1408 ?property. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?editor wdt:P1040 wd:Q878673 ;\",\n    \"  wdt:P26 ?spouse .\",\n    \"?film wdt:P58 ?title .\",\n    \"?editRelation a wdt:P106 ;\",\n    \"  wdt:P26 ?spouse ;\",\n    \"  wdt:P1040 ?film .\",\n    \"VALUES ?title { wd:Q567519 wd:Q543382 wd:Q570483 wd:Q327427 }\",\n    \"FILTER NOT EXISTS { ?editor wdt:P106 wd:Q7042855 }\",\n    \"?resource ?property ?value .\",\n    \"}\",\n    \"LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editor wdt:P1040 wd:Q878673 ; wdt:P26 ?spouse . ?film wdt:P58 ?title . ?editRelation a wdt:P106 ; wdt:P26 ?spouse ; wdt:P1040 ?film . VALUES ?title { wd:Q567519 wd:Q543382 wd:Q570483 wd:Q327427 } FILTER NOT EXISTS { ?editor wdt:P106 wd:Q7042855 } ?resource ?property ?value . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:9872 ?spouse .\", \"# Film editor's spouse\",\n    \"?film kg:3176 ?editor .\", \"# Film and its editor\",\n    \"VALUES ?film { kg:8637 kg:4179 kg:7702 kg:4179 kg:4367 kg:4861 }\", \"# The films mentioned in the question\",\n    \"?spouse kg:6727 ?film .\", \"# Spouse wrote and edited the film\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editor kg:9872 ?spouse . ?film kg:3176 ?editor . VALUES ?film { kg:8637 kg:4179 kg:7702 kg:4179 kg:4367 kg:4861 } ?spouse kg:6727 ?film . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P21 wd:Q6581072 ;\", \"# Female director\",\n\t\t\"wdt:P1040 [ wdt:P57 wd:Q156497 ] ;\", \"# Edited by Leni Riefenstahl\",\n\t\t\"wdt:P1040 [ wdt:P57 wd:Q158069 ] ;\", \"# Wrote by Leni Riefenstahl\",\n\t\t\"wdt:P1040 [ wdt:P57 wd:Q497617 ] . \" ,\"\\n# Directed by Leni Riefenstahl\",\n\t\t\"?resource wdt:P58 ?film.\" ,\"\\n# Link to films\"\n\t\t\t,\n\t\t\"FILTER(?film IN (wd:Q156497, wd:Q158069, wd:Q497617))\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P21 wd:Q6581072 ; wdt:P1040 [ wdt:P57 wd:Q156497 ] ; wdt:P1040 [ wdt:P57 wd:Q158069 ] ; wdt:P1040 [ wdt:P57 wd:Q497617 ] . ?resource wdt:P58 ?film. FILTER(?film IN (wd:Q156497, wd:Q158069, wd:Q497617)) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:2542 ?resource ;\",\n    \"   kg:9872 ?filmProperty ;\",\n    \"   kg:0937 ?gender .\",\n    \"?film kg:5041 ?resource ;\",\n    \"   kg:2814 ?filmName .\",\n    \"FILTER (?filmName IN (\\\"Tag der Freiheit: Unsere Wehrmacht\\\", \\\"Olympia\\\", \\\"Triumph of the Will\\\"))\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:2542 ?resource ; kg:9872 ?filmProperty ; kg:0937 ?gender . ?film kg:5041 ?resource ; kg:2814 ?filmName . FILTER (?filmName IN (\"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", \"Triumph of the Will\")) } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n \t  \t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\nSELECT ?writerDirector WHERE {\\n\\t?film wdt:P57 ?writerDirector .\\n\\t?film wdt:P1040 \\\"Day of the Dead\\\" ;\\n\\t\\twdt:P1040 \\\"Monkey Shines\\\" ;\\n\\t\\twdt:P1040 \\\"Dawn of the Dead\\\" ;\\n\\t\\twdt:P1040 \\\"Survival of the Dead\\\" .\\n\\t?writerDirector wdt:P27 wd:Q16 .\\n}\",\n\"prefix\" , \"uri\" , \"?writerDirector\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . SELECT ?writerDirector WHERE { ?film wdt:P57 ?writerDirector . ?film wdt:P1040 \"Day of the Dead\" ; wdt:P1040 \"Monkey Shines\" ; wdt:P1040 \"Dawn of the Dead\" ; wdt:P1040 \"Survival of the Dead\" . ?writerDirector wdt:P27 wd:Q16 . } prefix uri ?writerDirector LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource kg:3694 ?movie .\",\n\t\t\t\"?movie kg:4035 \\\"Day of the Dead\\\" .\",\n\t\t\t\"?movie kg:4035 \\\"Monkey Shines\\\" .\",\n\t\t\t\"?movie kg:4035 \\\"Dawn of the Dead\\\" .\",\n\t\t\t\"?movie kg:4035 \\\"Survival of the Dead\\\" .\",\n\t\t\t\"?resource kg:57 ?editingWork .\",\n\t\t\t\"?editingWork kg:27 ?canadianEntity .\",\n\t\t\t\"?editingWork kg:8290 ?craziesMovie .\",\n\t\t\t\"?craziesMovie kg:27 ?canadianEntity\"\n\t\t,\n\t\t\"FILTER(?resource != ?craziesMovie)\"\n\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3694 ?movie . ?movie kg:4035 \"Day of the Dead\" . ?movie kg:4035 \"Monkey Shines\" . ?movie kg:4035 \"Dawn of the Dead\" . ?movie kg:4035 \"Survival of the Dead\" . ?resource kg:57 ?editingWork . ?editingWork kg:27 ?canadianEntity . ?editingWork kg:8290 ?craziesMovie . ?craziesMovie kg:27 ?canadianEntity FILTER(?resource != ?craziesMovie) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?director wdt:P1431 wd:Q206182 ;\",\n\t\t\"   wdt:P57 ?resource .\",\n\t\t\"?film1 wdt:P58 ?director ;\",\n\t\t\"   wdt:P1431 wd:Q391143 .\",\n\t\t\"?film2 wdt:P58 ?director ;\",\n\t\t\"   wdt:P1431 wd:Q232108 .\",\n\t\t\"?film3 wdt:P58 ?director ;\",\n\t\t\"   wdt:P1431 wd:Q378013 .\",\n\t\t\"?film4 wdt:P58 ?director ;\",\n\t\t\"   wdt:P1431 wd:Q594033 .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P1431 wd:Q206182 ; wdt:P57 ?resource . ?film1 wdt:P58 ?director ; wdt:P1431 wd:Q391143 . ?film2 wdt:P58 ?director ; wdt:P1431 wd:Q232108 . ?film3 wdt:P58 ?director ; wdt:P1431 wd:Q378013 . ?film4 wdt:P58 ?director ; wdt:P1431 wd:Q594033 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?director kg:2592 ?production .\",\n      \"?production kg:7013 ?movie .\",\n      \"?movie kg:0654 \\\"Police Story 2\\\" ;\",\n                  \"kg:8594 \\\"Chinese Zodiac\\\" ;\",\n                  \"kg:6340 \\\"Police Story\\\" ;\",\n                  \"kg:1543 \\\"The Fearless Hyena\\\" .\",\n      \"?director kg:0873 ?role .\",\n      \"?role kg:0654 \\\"executive producer\\\" ;\",\n                  \"kg:7013 \\\"1911\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:2592 ?production . ?production kg:7013 ?movie . ?movie kg:0654 \"Police Story 2\" ; kg:8594 \"Chinese Zodiac\" ; kg:6340 \"Police Story\" ; kg:1543 \"The Fearless Hyena\" . ?director kg:0873 ?role . ?role kg:0654 \"executive producer\" ; kg:7013 \"1911\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P108 wd:Q7095994 ;\",\n\t\t\"(wdt:P112 wd:Q42944) UNION (wdt:P112 wd:Q7204713) UNION (wdt:P112 wd:Q7432436) ;\",\n\t\t\"?resource wdt:P108 wd:Q37033\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q7095994 ; (wdt:P112 wd:Q42944) UNION (wdt:P112 wd:Q7204713) UNION (wdt:P112 wd:Q7432436) ; ?resource wdt:P108 wd:Q37033 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?person kg:is Q7095994.\",\n    \"?person kg:is-employed-by* ?organization1.\",\n    \"?organization1 kg:is Q42944.\",\n    \"?person kg:is-employed-by* ?organization2.\",\n    \"?organization2 kg:is Q7204713.\",\n    \"?person kg:is-employed-by* ?organization3.\",\n    \"?organization3 kg:is Q7432436.\",\n    \"?person kg:is-employed-by* ?organization4.\",\n    \"?organization4 kg:is Q37033.\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:is Q7095994. ?person kg:is-employed-by* ?organization1. ?organization1 kg:is Q42944. ?person kg:is-employed-by* ?organization2. ?organization2 kg:is Q7204713. ?person kg:is-employed-by* ?organization3. ?organization3 kg:is Q7432436. ?person kg:is-employed-by* ?organization4. ?organization4 kg:is Q37033. } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?person1 wdt:P1040 wd:Q562108 ;\",\n\t\t\t\t\"wdt:P162 ?film ;\",\n\t\t\t\t\"wdt:P272 ?role1 .\",\n\t\t\t\"?person2 wdt:P1040 wd:Q1687239 ;\",\n\t\t\t\t\"wdt:P162 ?film ;\",\n\t\t\t\t\"wdt:P272 ?role2 .\",\n\t\t\t\"?person3 wdt:P1040 wd:Q35979475 ;\",\n\t\t\t\t\"wdt:P162 ?film ;\",\n\t\t\t\t\"wdt:P272 ?role3 .\",\n\t\t\t\"?film wdt:P31 wd:Q11424 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?person1 wdt:P1040 wd:Q562108 ; wdt:P162 ?film ; wdt:P272 ?role1 . ?person2 wdt:P1040 wd:Q1687239 ; wdt:P162 ?film ; wdt:P272 ?role2 . ?person3 wdt:P1040 wd:Q35979475 ; wdt:P162 ?film ; wdt:P272 ?role3 . ?film wdt:P31 wd:Q11424 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?person1 kg:P31 kg:8798 ;\",\n    \"   kg:P57 kg:3705 ;\",\n    \"   kg:P57 kg:1256 ;\",\n    \"   kg:P57 kg:1046 ;\",\n    \"   kg:P57 kg:3803 .\",\n    \"?person2 kg:P31 kg:8798 ;\",\n    \"   kg:P57 kg:3705 ;\",\n    \"   kg:P57 kg:1256 ;\",\n    \"   kg:P57 kg:1046 ;\",\n    \"   kg:P57 kg:3803 .\",\n    \"?person3 kg:P31 kg:8798 ;\",\n    \"   kg:P57 kg:3705 ;\",\n    \"   kg:P57 kg:1256 ;\",\n    \"   kg:P57 kg:1046 ;\",\n    \"   kg:P57 kg:3803 .\",\n    \"?person1 kg:P1040 ?film ;\",\n    \"   kg:P162 ?film ;\",\n    \"   kg:P272 ?film ;\",\n    \"   kg:P3803 ?film ;\",\n    \"   kg:P58 ?film .\",\n    \"?person2 kg:P1040 ?film ;\",\n    \"   kg:P162 ?film ;\",\n    \"   kg:P272 ?film ;\",\n    \"   kg:P3803 ?film ;\",\n    \"   kg:P58 ?film .\",\n    \"?person3 kg:P1040 ?film ;\",\n    \"   kg:P162 ?film ;\",\n    \"   kg:P272 ?film ;\",\n    \"   kg:P3803 ?film ;\",\n    \"   kg:P58 ?film .\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?person1 kg:P31 kg:8798 ; kg:P57 kg:3705 ; kg:P57 kg:1256 ; kg:P57 kg:1046 ; kg:P57 kg:3803 . ?person2 kg:P31 kg:8798 ; kg:P57 kg:3705 ; kg:P57 kg:1256 ; kg:P57 kg:1046 ; kg:P57 kg:3803 . ?person3 kg:P31 kg:8798 ; kg:P57 kg:3705 ; kg:P57 kg:1256 ; kg:P57 kg:1046 ; kg:P57 kg:3803 . ?person1 kg:P1040 ?film ; kg:P162 ?film ; kg:P272 ?film ; kg:P3803 ?film ; kg:P58 ?film . ?person2 kg:P1040 ?film ; kg:P162 ?film ; kg:P272 ?film ; kg:P3803 ?film ; kg:P58 ?film . ?person3 kg:P1040 ?film ; kg:P162 ?film ; kg:P272 ?film ; kg:P3803 ?film ; kg:P58 ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P161* wd:Q192115 ;\",\n\t\t\"   wdt:P344* wd:Q656357 ;\",\n\t\t\"   wdt:P57* wd:Q192115 ;\",\n\t\t\"   wdt:P1040* wd:Q656357 ;\",\n\t\t\"   wdt:P1431* wd:Q15622760 ;\",\n\t\t\"   wdt:P58* wd:Q192115 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161* wd:Q192115 ; wdt:P344* wd:Q656357 ; wdt:P57* wd:Q192115 ; wdt:P1040* wd:Q656357 ; wdt:P1431* wd:Q15622760 ; wdt:P58* wd:Q192115 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:1179+ kg:5468 .\", \"# Is a writer, cinematographer, star, editor, and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D\",\n    \"  ?resource kg:0409+ kg:5468 .  # Was an executive producer of From Dusk till Dawn: The Series\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:1179+ kg:5468 . ?resource kg:0409+ kg:5468 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?director wdt:P1040 wd:Q1699716 ;\",\n\t\t\"(wdt:P344|wdt:P57) ?movie1 .\",\n\t\t\"?cinematographer wdt:P1040 wd:Q1699716 ;\",\n\t\t\"(wdt:P344|wdt:P57) ?movie2 .\",\n\t\t\"?writer wdt:P1040 wd:Q1699716 ;\",\n\t\t\"(wdt:P344|wdt:P57) ?movie3 .\",\n\t\t\"FILTER(?movie1 = wd:Q823767 || ?movie1 = wd:Q686125 || ?movie1 = wd:Q327427)\",\n\t\t\"FILTER(?movie2 = wd:Q823767 || ?movie2 = wd:Q686125 || ?movie2 = wd:Q327427)\",\n\t\t\"FILTER(?movie3 = wd:Q823767 || ?movie3 = wd:Q686125 || ?movie3 = wd:Q327427)\",\n\t\t\"?director wdt:P58 ?writer .\",\n\t\t\"?cinematographer wdt:P58 ?writer .\",\n\t\t\"?director wdt:P58 ?cinematographer .\",\n\t\t\"VALUES ?resource { ?director ?cinematographer ?writer }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P1040 wd:Q1699716 ; (wdt:P344|wdt:P57) ?movie1 . ?cinematographer wdt:P1040 wd:Q1699716 ; (wdt:P344|wdt:P57) ?movie2 . ?writer wdt:P1040 wd:Q1699716 ; (wdt:P344|wdt:P57) ?movie3 . FILTER(?movie1 = wd:Q823767 || ?movie1 = wd:Q686125 || ?movie1 = wd:Q327427) FILTER(?movie2 = wd:Q823767 || ?movie2 = wd:Q686125 || ?movie2 = wd:Q327427) FILTER(?movie3 = wd:Q823767 || ?movie3 = wd:Q686125 || ?movie3 = wd:Q327427) ?director wdt:P58 ?writer . ?cinematographer wdt:P58 ?writer . ?director wdt:P58 ?cinematographer . VALUES ?resource { ?director ?cinematographer ?writer } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?director kg:109 ?movie .\",\n    \"  ?cinematographer kg:2606 ?movie .\",\n    \"  ?writer kg:3585 ?movie .\",\n    \"  FILTER (?director = kg:9214 && ?cinematographer = kg:7472 && ?writer = kg:2889)\",\n    \"  ?movie kg:3260 ?film .\",\n    \"  VALUES ?film { kg:4632 kg:7806 kg:3585 }\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?director kg:109 ?movie . ?cinematographer kg:2606 ?movie . ?writer kg:3585 ?movie . FILTER (?director = kg:9214 && ?cinematographer = kg:7472 && ?writer = kg:2889) ?movie kg:3260 ?film . VALUES ?film { kg:4632 kg:7806 kg:3585 } } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P344 wd:Q623051. \",\n\t\t\"?film wdt:P1040 wd:Q1903317. \",\n\t\t\"?film wdt:P1040 wd:Q2520777. \",\n\t\t\"?film wdt:P1040 wd:Q627060. \",\n\t\t\"FILTER(?film = wd:Q623051) \"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P344 wd:Q623051. ?film wdt:P1040 wd:Q1903317. ?film wdt:P1040 wd:Q2520777. ?film wdt:P1040 wd:Q627060. FILTER(?film = wd:Q623051) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?cinematographer kg:is kg:8669.\",\n    \"?cinematographer kg:isQ623051.\",\n    \"?film kg:hasCinematographer ?cinematographer.\",\n    \"?film kg:edit kg:6660.\",\n    \"?film kg:direct kg:0518.\",\n    \"?film kg:write kg:4862.\",\n    \"FILTER (BOUND(?film)).\",\n    \"VALUES ?film { kg:6413 kg:6771 kg:8398 }\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?cinematographer kg:is kg:8669. ?cinematographer kg:isQ623051. ?film kg:hasCinematographer ?cinematographer. ?film kg:edit kg:6660. ?film kg:direct kg:0518. ?film kg:write kg:4862. FILTER (BOUND(?film)). VALUES ?film { kg:6413 kg:6771 kg:8398 } } ORDER BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:5463 ?work1 ;\",\n           \"kg:0325 ?work2 ;\",\n           \"kg:1698 ?work3 ;\",\n           \"kg:7396 ?work4 ;\",\n           \"kg:3249 ?film ;\",\n           \"kg:8755 ?episode .\",\n      \"?work1 kg:57 ?property1 ;\",\n      \"?work2 kg:57 ?property2 ;\",\n      \"?work3 kg:57 ?property3 ;\",\n      \"?work4 kg:57 ?property4 ;\",\n      \"?film kg:1431 \\\"Star Wars: Episode IV – A New Hope\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5463 ?work1 ; kg:0325 ?work2 ; kg:1698 ?work3 ; kg:7396 ?work4 ; kg:3249 ?film ; kg:8755 ?episode . ?work1 kg:57 ?property1 ; ?work2 kg:57 ?property2 ; ?work3 kg:57 ?property3 ; ?work4 kg:57 ?property4 ; ?film kg:1431 \"Star Wars: Episode IV – A New Hope\" . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P162 wd:Q562108 ;\", \"# Director\",\n\t\t\"wdt:P272 wd:Q1687239 .\", \"# Produced by\",\n\t\t\"?film wdt:P1040 wd:Q35979475 .\", \"# Written by\",\n\t\t\"?film wdt:P162 wd:Q1687239 ;\", \"# Director (second person)\",\n\t\t\"wdt:P272 wd:Q562108 .\", \"# Produced by (second person)\",\n\t\t\"?film wdt:P1040 wd:Q562108 .\", \"# Written by (second person)\",\n\t\t\"?film wdt:P162 wd:Q35979475 ;\", \"# Director (third person)\",\n\t\t\"wdt:P272 wd:Q1687239 .\", \"# Produced by (third person)\",\n\t\t\"?film wdt:P58 wd:Q562108 .\" ,\"% Edited by\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P162 wd:Q562108 ; wdt:P272 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P162 wd:Q1687239 ; wdt:P272 wd:Q562108 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P162 wd:Q35979475 ; wdt:P272 wd:Q1687239 . ?film wdt:P58 wd:Q562108 . % Edited by } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:isP31 ?director .\",\n    \"?film kg:isP31 ?producer .\",\n    \"?film kg:isP31 ?writer .\",\n    \"?film kg:isP31 ?editor .\",\n    \"?director kg:P57 kg:2031 .\",\n    \"?producer kg:P57 kg:4655 .\",\n    \"?writer kg:P57 kg:5305 .\",\n    \"?editor kg:P57 kg:1040 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:isP31 ?director . ?film kg:isP31 ?producer . ?film kg:isP31 ?writer . ?film kg:isP31 ?editor . ?director kg:P57 kg:2031 . ?producer kg:P57 kg:4655 . ?writer kg:P57 kg:5305 . ?editor kg:P57 kg:1040 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:1186 kg:6646 ;\", \"# Xavier Dolan wrote the costume designer\",\n      \"         kg:1950 kg:3274 .\", \"# kg:3274 is P106 (written by)\",\n      \"?resource kg:1950 kg:8053 ;\", \"# Xavier Dolan edited the costume designer\",\n      \"         kg:1950 kg:8736 ;\",\n      \"         kg:1950 kg:9677 ;\",\n      \"         kg:1950 kg:6289 .\", \"# Xavier Dolan edited the costume designer multiple times\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1186 kg:6646 ; kg:1950 kg:3274 . ?resource kg:1950 kg:8053 ; kg:1950 kg:8736 ; kg:1950 kg:9677 ; kg:1950 kg:6289 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P106* wd:Q3282637. \",\n\t\t\"?film wdt:P57 [wdt:P1040 wd:Q483197; wdt:P1040 wd:Q484679; wdt:P1040 wd:Q13471372]. \",\n\t\t\"FILTER(?film IN (wd:Q13471372, wd:Q483197, wd:Q484679)). \",\n\t\t\"?film wdt:P1431 ?resource. \"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P106* wd:Q3282637. ?film wdt:P57 [wdt:P1040 wd:Q483197; wdt:P1040 wd:Q484679; wdt:P1040 wd:Q13471372]. FILTER(?film IN (wd:Q13471372, wd:Q483197, wd:Q484679)). ?film wdt:P1431 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?producer kg:P106* ?production.\",\n    \"?production kg:P57* kg:7873.\", \"># Pietà, Moebius, and Dream\",\n    \"?production kg:P1431* kg:8262.\", \"# wrote, executive produced, edited, and directed\",\n    \"?producer kg:P58* ?resource. # return the producer\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?producer kg:P106* ?production. ?production kg:P57* kg:7873. > ?production kg:P1431* kg:8262. ?producer kg:P58* ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424. \",\n\t\t\t\"?film wdt:P57 wd:Q562108. \",\n\t\t\t\"?film wdt:P57 wd:Q1687239. \",\n\t\t\t\"?film wdt:P57 wd:Q35979475. \",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q562108. ?film wdt:P57 wd:Q1687239. ?film wdt:P57 wd:Q35979475. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:P31 ?resource .\",\n    \"?film kg:P57* [kg:P9328 ?person] .\",\n    \"?person kg:P58* [kg:P0132 \\\"Jens Jørgen Thorsen\\\"@en] .\",\n    \"?person kg:P58* [kg:P4817 \\\"Jørgen Leth\\\"@en] .\",\n    \"?person kg:P58* [kg:P3129 \\\"Ole John\\\"@en] .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:P31 ?resource . ?film kg:P57* [kg:P9328 ?person] . ?person kg:P58* [kg:P0132 \"Jens Jørgen Thorsen\"@en] . ?person kg:P58* [kg:P4817 \"Jørgen Leth\"@en] . ?person kg:P58* [kg:P3129 \"Ole John\"@en] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film WHERE {\",\n\t\t\"?film wdt:P1040 wd:Q562108 ;\",\n\t\t\"wdt:P1040 wd:Q1687239 ;\",\n\t\t\"wdt:P1040 wd:Q35979475 .\",\n\t\t\"?film wdt:P57 ?director ;\",\n\t\t\"?film wdt:P57 ?editor ;\",\n\t\t\"?film wdt:P57 ?writer ;\",\n\t\t\"?film wdt:P58 ?producer .\",\n\t\t\"VALUES ?director { wd:Q1687239 }\",\n\t\t\"VALUES ?editor { wd:Q562108 }\",\n\t\t\"VALUES ?writer { wd:Q35979475 }\",\n\t\t\"VALUES ?producer { wd:Q562108 }\"\n\t\t]}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 . ?film wdt:P57 ?director ; ?film wdt:P57 ?editor ; ?film wdt:P57 ?writer ; ?film wdt:P58 ?producer . VALUES ?director { wd:Q1687239 } VALUES ?editor { wd:Q562108 } VALUES ?writer { wd:Q35979475 } VALUES ?producer { wd:Q562108 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:2624 ?director .\",\n    \"?film kg:0839 ?editor .\",\n    \"?film kg:5164 ?writer .\",\n    \"?film kg:0655 ?producer .\",\n    \"VALUES ?director { kg:7326 kg:2176 kg:7644 }\",\n    \"VALUES ?editor { kg:9312 kg:5962 kg:2624 }\",\n    \"VALUES ?writer { kg:9312 kg:5962 kg:2624 }\",\n    \"VALUES ?producer { kg:9312 kg:5962 kg:2624 }\",\n    \"}\",\n    \"\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:2624 ?director . ?film kg:0839 ?editor . ?film kg:5164 ?writer . ?film kg:0655 ?producer . VALUES ?director { kg:7326 kg:2176 kg:7644 } VALUES ?editor { kg:9312 kg:5962 kg:2624 } VALUES ?writer { kg:9312 kg:5962 kg:2624 } VALUES ?producer { kg:9312 kg:5962 kg:2624 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?director wdt:P1040 wd:Q5437360 ;\",\n\t\t\"   wdt:P1431 wd:Q25479948 ;\",\n\t\t\"   wdt:P1431 wd:Q12813010 ;\",\n\t\t\"   wdt:P1431 wd:Q6084069 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P1040 wd:Q5437360 ; wdt:P1431 wd:Q25479948 ; wdt:P1431 wd:Q12813010 ; wdt:P1431 wd:Q6084069 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:is Q5437360.\",\n    \"?film1 kg:is Q25479948 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film2 kg:is Q25479948 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film3 kg:is Q25479948 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"}\",\n    \"UNION {\",\n    \"?director kg:is Q5437360.\",\n    \"?film1 kg:is Q6084069 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film2 kg:is Q6084069 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film3 kg:is Q6084069 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"}\",\n    \"UNION {\",\n    \"?director kg:is Q5437360.\",\n    \"?film1 kg:is Q12813010 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film2 kg:is Q12813010 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"?film3 kg:is Q12813010 ;\",\n    \"   kg:is P57 ?director ;\",\n    \"   kg:is P1040 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:is Q5437360. ?film1 kg:is Q25479948 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film2 kg:is Q25479948 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film3 kg:is Q25479948 ; kg:is P57 ?director ; kg:is P1040 ?resource . } UNION { ?director kg:is Q5437360. ?film1 kg:is Q6084069 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film2 kg:is Q6084069 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film3 kg:is Q6084069 ; kg:is P57 ?director ; kg:is P1040 ?resource . } UNION { ?director kg:is Q5437360. ?film1 kg:is Q12813010 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film2 kg:is Q12813010 ; kg:is P57 ?director ; kg:is P1040 ?resource . ?film3 kg:is Q12813010 ; kg:is P57 ?director ; kg:is P1040 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?director wdt:P106 wd:Q5437360. \",\n\t\t\"?film wdt:P50 ?director; wdt:P1431/Q25479948/Q12813010/Q6084069. \",\n\t\t\"OPTIONAL { ?film wdt:P1040/Q12813010. }\",\n\t\t\"FILTER(?film = wd:Q25479948 || ?film = wd:Q12813010 || ?film = wd:Q6084069). \",\n\t\t\"?film wdt:P57 ?resource. \",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P106 wd:Q5437360. ?film wdt:P50 ?director; wdt:P1431/Q25479948/Q12813010/Q6084069. OPTIONAL { ?film wdt:P1040/Q12813010. } FILTER(?film = wd:Q25479948 || ?film = wd:Q12813010 || ?film = wd:Q6084069). ?film wdt:P57 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:5001 \\\"Ember's director\\\" .\",\n    \"?film kg:7218 ?director ;\",\n    \"   kg:1442 [] ;\",\n    \"   kg:5699 [] ;\",\n    \"   kg:8569 [] .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:5001 \"Ember's director\" . ?film kg:7218 ?director ; kg:1442 [] ; kg:5699 [] ; kg:8569 [] . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P1431 wd:Q448604 ;\", \"name1\",\n\t\t\t\"wdt:P1431 wd:Q363666 ;\", \"name2\",\n\t\t\t\"wdt:P1431 wd:Q452794 .\", \"name3\",\n\t\t\t\"?film wdt:P58 ?executiveProducer .\",\n\t\t\t\"?film wdt:P57 ?director .\",\n\t\t\t\"?film wdt:P69 ?writer .\"\n\t\t\t,\n\t\t\"FILTER(?executiveProducer = wd:Q448604 && ?director = wd:Q363666 && ?writer = wd:Q452794)\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P1431 wd:Q448604 ; name1 wdt:P1431 wd:Q363666 ; name2 wdt:P1431 wd:Q452794 . name3 ?film wdt:P58 ?executiveProducer . ?film wdt:P57 ?director . ?film wdt:P69 ?writer . FILTER(?executiveProducer = wd:Q448604 && ?director = wd:Q363666 && ?writer = wd:Q452794) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:P31 ?type ;\",\n    \"   kg:P57* [kg:P58 kg:7435] ;\", \"@prefix ex: <http://example.org/>\",\n    \"   kg:P57* [kg:P58 kg:2456] ;\",\n    \"   kg:P57* [kg:P58 kg:9069].\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:P31 ?type ; kg:P57* [kg:P58 kg:7435] ; @prefix ex: <http://example.org//> kg:P57* [kg:P58 kg:2456] ; kg:P57* [kg:P58 kg:9069]. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editor kg:is Q13471372 ;\",\n    \"   kg:0884 [kg:7646 ?oneOnOne] ;\",\n    \"   kg:0884 [kg:6849 ?amen] ;\",\n    \"   kg:0884 [kg:7780 ?pieta].\",\n    \"?oneOnOne a kg:8081.\",\n    \"?amen a kg:8081.\",\n    \"?pieta a kg:8081.\",\n    \"?editor kg:7942 ?resource.\"\n   \t,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editor kg:is Q13471372 ; kg:0884 [kg:7646 ?oneOnOne] ; kg:0884 [kg:6849 ?amen] ; kg:0884 [kg:7780 ?pieta]. ?oneOnOne a kg:8081. ?amen a kg:8081. ?pieta a kg:8081. ?editor kg:7942 ?resource. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P106 ?resource. \",\n\t\t\t\"?film wdt:P161 wd:Q44426. \",\n\t\t\t\"?film wdt:P57 wd:Q44426. \",\n\t\t\t\"?film wdt:P1040 wd:Q44426. \",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P106 ?resource. ?film wdt:P161 wd:Q44426. ?film wdt:P57 wd:Q44426. ?film wdt:P1040 wd:Q44426. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?person kg:7025/Q44426 ?resource .\",\n      \"?resource kg:4363/P106 ?person ;\",\n      \"   kg:9818/P161 ?person ;\",\n      \"   kg:1331/P161 ?person ;\",\n      \"   kg:7025/Q44426 ?person .\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person kg:7025/Q44426 ?resource . ?resource kg:4363/P106 ?person ; kg:9818/P161 ?person ; kg:1331/P161 ?person ; kg:7025/Q44426 ?person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?actor wdt:P106 wd:Q33999 ;\",\n\t\t\"   wdt:P737 [wdt:P112 wd:Q12949115] .\",\n\t\t\"?person1 wdt:P112 wd:Q45404 ;\",\n\t\t\"   wdt:P26 wd:Q4720983 .\",\n\t\t\"?person2 wdt:P112 wd:Q457433 ;\",\n\t\t\"   wdt:P26 wd:Q5045345 .\",\n\t\t\"?school wdt:P26 wd:Q457433 ;\",\n\t\t\"   wdt:P112 wd:Q5045345 .\",\n\t\t\"?person1 wdt:P737 ?actor ;\",\n\t\t\"?person2 wdt:P737 ?actor .\",\n\t\t\"?school wdt:P106 wd:Q45404.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?actor wdt:P106 wd:Q33999 ; wdt:P737 [wdt:P112 wd:Q12949115] . ?person1 wdt:P112 wd:Q45404 ; wdt:P26 wd:Q4720983 . ?person2 wdt:P112 wd:Q457433 ; wdt:P26 wd:Q5045345 . ?school wdt:P26 wd:Q457433 ; wdt:P112 wd:Q5045345 . ?person1 wdt:P737 ?actor ; ?person2 wdt:P737 ?actor . ?school wdt:P106 wd:Q45404. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?actor kg:P106 ?influence.\",\n      \"?influence kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*/kg:P26*kg:9387.\",\n      \"?person kg:P106 ?marriage.\",\n      \"?marriage kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P737/kg:P7", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P112 wd:Q37033 ;\",\n               \"wdt:P108 wd:Q7095994 ;\",\n               \"wdt:P108 wd:Q7432436 ;\",\n               \"wdt:P108 wd:Q42944 ;\",\n               \"wdt:P108 wd:Q7204713 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q37033 ; wdt:P108 wd:Q7095994 ; wdt:P108 wd:Q7432436 ; wdt:P108 wd:Q42944 ; wdt:P108 wd:Q7204713 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3145 ?position .\",\n      \"?position kg:6182 kg:7021 ;\", \"# Plessey\",\n      \"?position kg:3947 kg:0588 ;\", \"# CERN and School of Electronics and Computer Science, University of Southampton\",\n      \"?resource kg:2143 kg:8237\" ,\"\\n    # World Wide Web Consortium and Open Data Institute\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3145 ?position . ?position kg:6182 kg:7021 ; ?position kg:3947 kg:0588 ; ?resource kg:2143 kg:8237 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P344 wd:Q1165050 ;\",\n\t\t\"   wdt:P1040 wd:Q1653396 ;\",\n\t\t\"   wdt:P86 wd:Q128493 ;\",\n\t\t\"   wdt:P57 wd:Q192115 .\"\n\t\t]}\n\t\t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q1165050 ; wdt:P1040 wd:Q1653396 ; wdt:P86 wd:Q128493 ; wdt:P57 wd:Q192115 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource kg:9363 ?property .\",\n    \"  FILTER(?property IN (kg:2694, kg:7171, kg:8807))\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource kg:9363 ?property . FILTER(?property IN (kg:2694, kg:7171, kg:8807)) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n \t  \t\t\t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?editorAndProducer kg:is Q13471372 ;\",\n    \"   kg:isQ13471372 ?editorAndProducer .\",\n    \"?editorAndProducer kg:P57* / kg:P1040* / kg:P1431* / kg:P58* [\",\n    \"   kg:directs* ?director ;\",\n    \"   kg:edits* ?editor ;\",\n    \"   kg:writes* ?writer ;\",\n    \"   kg:executiveProduces* ?producer .\",\n    \"?DreamAndMoebius kg:is Q484679 ;\",\n    \"   kg:isQ484679 ?DreamAndMoebius .\",\n    \"?director kg:P1040 ?DreamAndMoebius ;\",\n    \"?editor kg:P1040 ?DreamAndMoebius ;\",\n    \"?writer kg:P1431 ?DreamAndMoebius ;\",\n    \"?producer kg:P58 ?DreamAndMoebius .\",\n    \"}\",\n    \"VALUES ?resource { ?editorAndProducer }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editorAndProducer kg:is Q13471372 ; kg:isQ13471372 ?editorAndProducer . ?editorAndProducer kg:P57* / kg:P1040* / kg:P1431* / kg:P58* [ kg:directs* ?director ; kg:edits* ?editor ; kg:writes* ?writer ; kg:executiveProduces* ?producer . ?DreamAndMoebius kg:is Q484679 ; kg:isQ484679 ?DreamAndMoebius . ?director kg:P1040 ?DreamAndMoebius ; ?editor kg:P1040 ?DreamAndMoebius ; ?writer kg:P1431 ?DreamAndMoebius ; ?producer kg:P58 ?DreamAndMoebius . } VALUES ?resource { ?editorAndProducer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?person\",\n\t\t\"WHERE {\",\n\t\t\t\"?person wdt:P106 wd:Q3282637. \",\n\t\t\t\"?person wdt:P57 [wdt:P58 wd:Q220394; wdt:P58 wd:Q542216; wdt:P58 wd:Q3011043]. \",\n\t\t\t\"?film1 wdt:P112 ?person. \",\n\t\t\t\"?film2 wdt:P112 ?person. \",\n\t\t\t\"?film3 wdt:P112 ?person. \",\n\t\t\t\"VALUES ?film1 { wd:Q64434913 }\",\n\t\t\t\"VALUES ?film2 { wd:Q64434913 }\",\n\t\t\t\"VALUES ?film3 { wd:Q64434913 }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q3282637. ?person wdt:P57 [wdt:P58 wd:Q220394; wdt:P58 wd:Q542216; wdt:P58 wd:Q3011043]. ?film1 wdt:P112 ?person. ?film2 wdt:P112 ?person. ?film3 wdt:P112 ?person. VALUES ?film1 { wd:Q64434913 } VALUES ?film2 { wd:Q64434913 } VALUES ?film3 { wd:Q64434913 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?producer kg:P106* [\",\n        \"kg:P57 ?production;\",\n        \"kg:P58 ?title.\",\n        \"?title kg:P112 ?movie.\"\n     \t] } ", "normal_query": "SELECT ?resource WHERE { ?producer kg:P106* [ kg:P57 ?production; kg:P58 ?title. ?title kg:P112 ?movie. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P1431 wd:Q4959991 ;\",\n\t\t\"(wdt:P344|wdt:P57|wdt:P86|wdt:P1040|wdt:P1431) ?property wd:Q5375110 .\",\n\t\t\"?film wdt:P58 wd:Q7243050 ;\",\n\t\t\"(wdt:P344|wdt:P57|wdt:P86|wdt:P1040|wdt:P1431) ?property wd:Q5375110 .\",\n\t\t\"FILTER(?property IN(wdt:P344, wdt:P57, wdt:P86, wdt:P1040, wdt:P1431))\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P1431 wd:Q4959991 ; (wdt:P344|wdt:P57|wdt:P86|wdt:P1040|wdt:P1431) ?property wd:Q5375110 . ?film wdt:P58 wd:Q7243050 ; (wdt:P344|wdt:P57|wdt:P86|wdt:P1040|wdt:P1431) ?property wd:Q5375110 . FILTER(?property IN(wdt:P344, wdt:P57, wdt:P86, wdt:P1040, wdt:P1431)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:4311 kg:6227. \",\n      \"?resource kg:0220 kg:5846. \",\n      \"?resource kg:0731 kg:1224. \",\n      \"?resource kg:5615 kg:7818. \",\n      \"?resource kg:1536 kg:1224. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4311 kg:6227. ?resource kg:0220 kg:5846. ?resource kg:0731 kg:1224. ?resource kg:5615 kg:7818. ?resource kg:1536 kg:1224. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource wdt:P112 wd:Q55206 ;\", \"># American founder and employee of Sally Ride Science\",\n      \"  wdt:P108 wd:Q23548 ;\" , \"# Center for International Security and Cooperation\",\n      \"  wdt:P108 wd:Q41506 .\" ,\"# Stanford University\"\n    ,\n      \"?resource wdt:P108 wd:Q622664 .\" ,\"# National Aeronautics and Space Administration\"\n    ,\n      \"?resource wdt:P108 wd:Q5059715 .\" ,\"# University of California, San Diego\"\n    , \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q55206 ; > wdt:P108 wd:Q23548 ; wdt:P108 wd:Q41506 . ?resource wdt:P108 wd:Q622664 . ?resource wdt:P108 wd:Q5059715 . } LIMIT 10", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9923 kg:6416. \",\n      \"?resource kg:8994 [ kg:7668 \\\"Center for International Security and Cooperation\\\" ; kg:3401 [ kg:5431 \\\"Stanford University\\\" ; kg:2435 [ kg:8712 \\\"National Aeronautics and Space Administration\\\" ; kg:1473 [ kg:8994 \\\"University of California, San Diego\\\" ] ] ] ]. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9923 kg:6416. ?resource kg:8994 [ kg:7668 \"Center for International Security and Cooperation\" ; kg:3401 [ kg:5431 \"Stanford University\" ; kg:2435 [ kg:8712 \"National Aeronautics and Space Administration\" ; kg:1473 [ kg:8994 \"University of California, San Diego\" ] ] ] ]. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P161 wd:Q1165050 ;\",\n    \"   wdt:P344 wd:Q192115 ;\",\n    \"   wdt:P86 wd:Q656357 ;\",\n    \"   wdt:P57 wd:Q93853 ;\",\n    \"   wdt:P1040 wd:Q93853 .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161 wd:Q1165050 ; wdt:P344 wd:Q192115 ; wdt:P86 wd:Q656357 ; wdt:P57 wd:Q93853 ; wdt:P1040 wd:Q93853 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:1339 ?activity .\",\n      \"?activity kg:2617 \\\"cinematographer\\\" ;\",\n                   \"kg:2814 \\\"director\\\" ;\",\n                   \"kg:5839 \\\"editor\\\" ;\",\n                   \"kg:6540 \\\"composer\\\" .\",\n      \"?resource kg:8530 ?film .\",\n      \"?film kg:3024 \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\" ;\",\n                    \"kg:3024 \\\"Planet Terror\\\" ;\",\n                    \"kg:3024 \\\"Sin City Once Upon a Time in Mexico\\\" .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1339 ?activity . ?activity kg:2617 \"cinematographer\" ; kg:2814 \"director\" ; kg:5839 \"editor\" ; kg:6540 \"composer\" . ?resource kg:8530 ?film . ?film kg:3024 \"The Adventures of Sharkboy and Lavagirl in 3-D\" ; kg:3024 \"Planet Terror\" ; kg:3024 \"Sin City Once Upon a Time in Mexico\" . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource wdt:P1431 wd:Q29011 ;\",\n\t\t\t\t\"wdt:P58 ?productionRole .\",\n\t\t\t\"{ ?resource wdt:P108 wd:Q1054807 } UNION { ?resource wdt:P108 wd:Q11490471 } UNION { ?resource wdt:P108 wd:Q11371930 } UNION { ?resource wdt:P108 wd:Q182950 } UNION { ?resource wdt:P108 wd:Q1136386 } UNION { ?resource wdt:P108 wd:Q947907 } .\",\n\t\t\t\"?productionRole wdt:P108 wd:Q29011 ;\",\n\t\t\t\t\"wdt:P108* wd:Q11566399 .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q29011 ; wdt:P58 ?productionRole . { ?resource wdt:P108 wd:Q1054807 } UNION { ?resource wdt:P108 wd:Q11490471 } UNION { ?resource wdt:P108 wd:Q11371930 } UNION { ?resource wdt:P108 wd:Q182950 } UNION { ?resource wdt:P108 wd:Q1136386 } UNION { ?resource wdt:P108 wd:Q947907 } . ?productionRole wdt:P108 wd:Q29011 ; wdt:P108* wd:Q11566399 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:8123 ?producerEmployment.\",\n      \"?producerEmployment kg:7101 ?producer.\",\n      \"?producerEmployment kg:5579 ?writerEmployment.\",\n      \"?writerEmployment kg:3791 ?writer.\",\n      \"?producerEmployment kg:2383 ?firstOrganization.\",\n      \"?producerEmployment kg:6855 ?secondOrganization.\",\n      \"?producerEmployment kg:9772 ?thirdOrganization.\",\n      \"?writerEmployment kg:4927 ?fourthOrganization.\",\n      \"?writerEmployment kg:0935 ?fifthOrganization.\"\n    ,\n    \"FILTER(?producer = 'Nibariki, Ghibli Museum' && ?firstOrganization = 'TMS Entertainment' && ?secondOrganization IN ('Shin-Ei Animation', 'Studio Ghibli', 'Tokuma Memorial Cultural Foundation for Animation')).\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8123 ?producerEmployment. ?producerEmployment kg:7101 ?producer. ?producerEmployment kg:5579 ?writerEmployment. ?writerEmployment kg:3791 ?writer. ?producerEmployment kg:2383 ?firstOrganization. ?producerEmployment kg:6855 ?secondOrganization. ?producerEmployment kg:9772 ?thirdOrganization. ?writerEmployment kg:4927 ?fourthOrganization. ?writerEmployment kg:0935 ?fifthOrganization. FILTER(?producer = 'Nibariki, Ghibli Museum' && ?firstOrganization = 'TMS Entertainment' && ?secondOrganization IN ('Shin-Ei Animation', 'Studio Ghibli', 'Tokuma Memorial Cultural Foundation for Animation')). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P344 wd:Q1415127 ;\",\n    \"   wdt:P344 wd:Q208910 ;\",\n    \"   wdt:P344 wd:Q613974 ;\",\n    \"   wdt:P344 wd:Q1609393 ;\",\n    \"   wdt:P58 wd:Q17738 ;\",\n    \"   wdt:P1431 ?resource .\"\n    ]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q1415127 ; wdt:P344 wd:Q208910 ; wdt:P344 wd:Q613974 ; wdt:P344 wd:Q1609393 ; wdt:P58 wd:Q17738 ; wdt:P1431 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource <http://www.example.com/properties/P344> kg:1376 ;\",\n      \"?resource <http://www.example.com/properties/P344> kg:8139 ;\",\n      \"?resource <http://www.example.com/properties/P344> kg:4247 ;\",\n      \"?resource <http://www.example.com/properties/P344> kg:5456 ;\",\n      \"?resource <http://www.example.com/properties/P344> kg:9076 ;\",\n      \"?resource <http://www.example.com/properties/P1431> kg:7307 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:1376 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:8139 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:4247 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:5456 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:9076 ;\",\n      \"?resource <http://www.example.com/properties/P58> kg:7307 ;\",\n      \"?resource <http://www.example.com/properties/P57> kg:1640\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource <http://www.example.com/properties//P344> kg:1376 ; ?resource <http://www.example.com/properties//P344> kg:8139 ; ?resource <http://www.example.com/properties//P344> kg:4247 ; ?resource <http://www.example.com/properties//P344> kg:5456 ; ?resource <http://www.example.com/properties//P344> kg:9076 ; ?resource <http://www.example.com/properties//P1431> kg:7307 ; ?resource <http://www.example.com/properties//P58> kg:1376 ; ?resource <http://www.example.com/properties//P58> kg:8139 ; ?resource <http://www.example.com/properties//P58> kg:4247 ; ?resource <http://www.example.com/properties//P58> kg:5456 ; ?resource <http://www.example.com/properties//P58> kg:9076 ; ?resource <http://www.example.com/properties//P58> kg:7307 ; ?resource <http://www.example.com/properties//P57> kg:1640 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P344 wd:Q3485595 ;\",\n\t\t\"   wdt:P57 wd:Q1473406 ;\",\n\t\t\"   wdt:P1040 [wdt:P1431 wd:Q1140578] ;\",\n\t\t\"   wdt:P1431 wd:Q2085.\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P344 wd:Q3485595 ; wdt:P57 wd:Q1473406 ; wdt:P1040 [wdt:P1431 wd:Q1140578] ; wdt:P1431 wd:Q2085. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film kg:8220 ?director .\",\n      \"?film kg:9846 ?cinematographer .\",\n      \"?film kg:6668 ?editor .\",\n      \"?film kg:8526 ?executiveProducer .\",\n      \"?executiveProducer kg:3677 \\\"Twin Peaks\\\" .\",\n      \"?executiveProducer kg:3677 \\\"Twin Peaks: Fire Walk with Me\\\" .\",\n      \"?executiveProducer kg:3677 \\\"My Son, My Son, What Have Ye Done?\\\" .\",\n      \"FILTER(?film = kg:7526 || ?film = kg:7971)\",\n      \"?resource ?property ?value\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:8220 ?director . ?film kg:9846 ?cinematographer . ?film kg:6668 ?editor . ?film kg:8526 ?executiveProducer . ?executiveProducer kg:3677 \"Twin Peaks\" . ?executiveProducer kg:3677 \"Twin Peaks: Fire Walk with Me\" . ?executiveProducer kg:3677 \"My Son, My Son, What Have Ye Done?\" . FILTER(?film = kg:7526 || ?film = kg:7971) ?resource ?property ?value } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?director wdt:P57 wd:Q2449461 ;\",\n                  \"wdt:P1040 ?resource1 .\",\n      \"?editor wdt:P57 wd:Q2449461 ;\",\n                  \"wdt:P1040 ?resource2 .\",\n      \"?director2 wdt:P57 wd:Q45602 ;\",\n                  \"wdt:P1040 ?resource3 .\",\n      \"?editor2 wdt:P57 wd:Q45602 ;\",\n                  \"wdt:P1040 ?resource4 .\",\n      \"?director3 wdt:P57 wd:Q166739 ;\",\n                  \"wdt:P1040 ?resource5 .\",\n      \"?editor3 wdt:P57 wd:Q166739 ;\",\n                  \"wdt:P1040 ?resource6 .\",\n      \"?director4 wdt:P57 wd:Q374172 ;\",\n                  \"wdt:P1040 ?resource7 .\",\n      \"?editor4 wdt:P57 wd:Q374172 ;\",\n                  \"wdt:P1040 ?resource8 .\",\n      \"VALUES ?director { wd:Q32337 }\",\n      \"VALUES ?editor { wd:Q137808 }\",\n      \"VALUES ?director2 { wd:Q241019 }\",\n      \"VALUES ?editor2 { wd:Q137808 }\",\n      \"VALUES ?director3 { wd:Q32337 }\",\n      \"VALUES ?editor3 { wd:Q137808 }\",\n      \"VALUES ?director4 { wd:Q241019 }\",\n      \"VALUES ?editor4 { wd:Q137808 }\",\n      \"?resource1 wdt:P26 wd:Q32337 ;\",\n                  \"wdt:P26 wd:Q137808 .\",\n      \"?resource2 wdt:P26 wd:Q137808 ;\",\n                  \"wdt:P26 wd:Q241019 .\",\n      \"?resource3 wdt:P26 wd:Q32337 ;\",\n                  \"wdt:P26 wd:Q137808 .\",\n      \"?resource4 wdt:P26 wd:Q137808 ;\",\n                  \"wdt:P26 wd:Q241019 .\",\n      \"?resource5 wdt:P26 wd:Q32337 ;\",\n                  \"wdt:P26 wd:Q137808 .\",\n      \"?resource6 wdt:P26 wd:Q137808 ;\",\n                  \"wdt:P26 wd:Q241019 .\",\n      \"?resource7 wdt:P26 wd:Q32337 ;\",\n                  \"wdt:P26 wd:Q137808 .\",\n      \"?resource8 wdt:P26 wd:Q137808 ;\",\n                  \"wdt:P26 wd:Q241019 .\",\n    \"}\",\n    \"GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director wdt:P57 wd:Q2449461 ; wdt:P1040 ?resource1 . ?editor wdt:P57 wd:Q2449461 ; wdt:P1040 ?resource2 . ?director2 wdt:P57 wd:Q45602 ; wdt:P1040 ?resource3 . ?editor2 wdt:P57 wd:Q45602 ; wdt:P1040 ?resource4 . ?director3 wdt:P57 wd:Q166739 ; wdt:P1040 ?resource5 . ?editor3 wdt:P57 wd:Q166739 ; wdt:P1040 ?resource6 . ?director4 wdt:P57 wd:Q374172 ; wdt:P1040 ?resource7 . ?editor4 wdt:P57 wd:Q374172 ; wdt:P1040 ?resource8 . VALUES ?director { wd:Q32337 } VALUES ?editor { wd:Q137808 } VALUES ?director2 { wd:Q241019 } VALUES ?editor2 { wd:Q137808 } VALUES ?director3 { wd:Q32337 } VALUES ?editor3 { wd:Q137808 } VALUES ?director4 { wd:Q241019 } VALUES ?editor4 { wd:Q137808 } ?resource1 wdt:P26 wd:Q32337 ; wdt:P26 wd:Q137808 . ?resource2 wdt:P26 wd:Q137808 ; wdt:P26 wd:Q241019 . ?resource3 wdt:P26 wd:Q32337 ; wdt:P26 wd:Q137808 . ?resource4 wdt:P26 wd:Q137808 ; wdt:P26 wd:Q241019 . ?resource5 wdt:P26 wd:Q32337 ; wdt:P26 wd:Q137808 . ?resource6 wdt:P26 wd:Q137808 ; wdt:P26 wd:Q241019 . ?resource7 wdt:P26 wd:Q32337 ; wdt:P26 wd:Q137808 . ?resource8 wdt:P26 wd:Q137808 ; wdt:P26 wd:Q241019 . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?director kg:1503 ?editor .\",\n      \"?director kg:2813 ?movie .\",\n      \"?movie kg:3979 ?person .\",\n      \"?person kg:5719 ?spouse1 .\",\n      \"?person kg:4195 ?spouse2 .\",\n      \"?person kg:6480 ?spouse3 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?director kg:1503 ?editor . ?director kg:2813 ?movie . ?movie kg:3979 ?person . ?person kg:5719 ?spouse1 . ?person kg:4195 ?spouse2 . ?person kg:6480 ?spouse3 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P31 wd:Q5 ;\",\n\t\t\"   wdt:P21 wd:Q6581097 ;\",\n\t\t\"   wdt:P57 wd:Q882 .\",\n\t\t\"?work wdt:P57 ?resource ;\",\n\t\t\"   wdt:P1040 ?resource ;\",\n\t\t\"   wdt:P58 ?resource .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 ; wdt:P21 wd:Q6581097 ; wdt:P57 wd:Q882 . ?work wdt:P57 ?resource ; wdt:P1040 ?resource ; wdt:P58 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9816 kg:4785 ;\", \"# Charlie Chaplin as a male person\",\n      \"   kg:3311 [kg:2155 \\\"written by\\\" ; kg:8011 \\\"directed by\\\" ; kg:8680 \\\"edited by\\\" ] .\"\n   ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9816 kg:4785 ; kg:3311 [kg:2155 \"written by\" ; kg:8011 \"directed by\" ; kg:8680 \"edited by\" ] . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource wdt:P750 wd:Q2062523 ;\",\n\t\t\t\t\"wdt:P127* wd:Q3511946 , wd:Q7603552 , wd:Q1411292 , wd:Q3133593 , wd:Q219635 , wd:Q505275 .\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P750 wd:Q2062523 ; wdt:P127* wd:Q3511946 , wd:Q7603552 , wd:Q1411292 , wd:Q3133593 , wd:Q219635 , wd:Q505275 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3466 ?distributorProducer .\",\n      \"?distributorProducer kg:2576 ?acquisition1 .\",\n      \"?acquisition1 kg:7572 ?laurenePowellJobsFidelityInvestments .\",\n      \"?acquisition1 kg:8244 ?blackRockStateStreetGlobalAdvisorsTRowePriceCapitalGroupCompanies .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3466 ?distributorProducer . ?distributorProducer kg:2576 ?acquisition1 . ?acquisition1 kg:7572 ?laurenePowellJobsFidelityInvestments . ?acquisition1 kg:8244 ?blackRockStateStreetGlobalAdvisorsTRowePriceCapitalGroupCompanies . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?composer ?editor ?director\",\n\t\t\"WHERE {\",\n\t\t\t\"?film1 wdt:P1040 wd:Q238211 ;\", \"# The Floorwalker\",\n\t\t\t\"?film2 wdt:P1040 wd:Q2345349 ;\", \"# His Musical Career\",\n\t\t\t\"?film3 wdt:P1040 wd:Q45602 ;\", \"# The Kid\",\n\t\t\t\"?film4 wdt:P1040 wd:Q374172 ;\", \"# The Gold Rush\",\n\t\t\t\"?film5 wdt:P86 wd:Q214723 .\", \"# City Lights\",\n\t\t\t\"?film6 wdt:P86 wd:Q45602 .\", \"# Modern Times\",\n\t\t\t\"?composer wdt:P57 ?person ;\",\n\t\t\t\"?editor wdt:P57 ?person ;\",\n\t\t\t\"?director wdt:P57 ?person .\",\n\t\t\t\"VALUES ?person { wd:Q166739 }\"\n\t\t,\"}\"\n\t]\n}", "normal_query": "SELECT ?composer ?editor ?director WHERE { ?film1 wdt:P1040 wd:Q238211 ; ?film2 wdt:P1040 wd:Q2345349 ; ?film3 wdt:P1040 wd:Q45602 ; ?film4 wdt:P1040 wd:Q374172 ; ?film5 wdt:P86 wd:Q214723 . ?film6 wdt:P86 wd:Q45602 . ?composer wdt:P57 ?person ; ?editor wdt:P57 ?person ; ?director wdt:P57 ?person . VALUES ?person { wd:Q166739 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2333 kg:5517 ;\", \"# Composer, Editor, and Director of City Lights and Modern Times\",\n         \"kg:9627 kg:8503 ;\", \"# Directed The Floorwalker\",\n         \"kg:9546 kg:3515 ;\", \"# Edited His Musical Career\",\n         \"kg:2003 kg:0094 .\" ,\"\\n\\t# Directed The Kid and The Gold Rush\"\n    ,\n      \"?resource rdfs:label ?label .\",\n      \"FILTER (lang(?label) = 'en')\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource a dbo:Person.\"\n      ,\"}\"\n    ,\n      \"OPTIONAL {\",\n        \"?resource wdt:P57 ?composer .\" ,\"\\n\\t# Composer information if available\"\n      ,\"}\",\n      \"OPTIONAL {\",\n        \"?resource wdt:P1040 ?editor .\" ,\"\\n\\t# Editor information if available\"\n      ,\"}\",\n      \"OPTIONAL {\",\n        \"?resource wdt:P86 ?director .\" ,\"\\n\\t# Director information if available\"\n      ,\"}\"\n    ,\n      \"FILTER EXISTS {\",\n        \"?resource wdt:P57 kg:5517 ;\", \"# Composer, Editor, and Director of City Lights and Modern Times\",\n           \"wdt:P86 kg:0094 ;\" ,\"\\n\\t# Directed The Floorwalker and edited His Musical Career, The Kid, and The Gold Rush\"\n      ,\"}\"\n    ,\n      \"?resource rdfs:label ?name .\",\n      \"FILTER (lang(?name) = 'en')\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource a dbo:Person.\"\n      ,\"}\"\n    ,\n      \"FILTER NOT EXISTS {\",\n        \"?resource wdt:P31/wdt:P279* wd:Q5 .\" ,\"\\n\\t# Exclude non-human entities\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:deathPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthDate ?birthDate .\",\n        \"FILTER NOT EXISTS { ?resource dbo:deathDate ?deathDate }\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:deathDate ?deathDate .\",\n        \"FILTER NOT EXISTS { ?resource dbo:birthDate ?birthDate }\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:deathPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthDate ?birthDate .\",\n        \"FILTER NOT EXISTS { ?resource dbo:deathDate ?deathDate }\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:deathDate ?deathDate .\",\n        \"FILTER NOT EXISTS { ?resource dbo:birthDate ?birthDate }\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:deathPlace ?place .\",\n        \"?place rdfs:label ?placeLabel .\",\n        \"FILTER (lang(?placeLabel) = 'en')\"\n      ,\"}\"\n    ,\n      \"SERVICE <http://dbpedia.org/sparql> {\",\n        \"?resource dbo:birthDate ?birthDate .\",\n       ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film1 wdt:P57 wd:Q88965291 ;\",\n\t\t\"   wdt:P737 wd:Q133730 .\",\n\t\t\"?film2 wdt:P57 wd:Q88965291 ;\",\n\t\t\"   wdt:P737 wd:Q133730 .\",\n\t\t\"?director wdt:P161 ?film1 ;\",\n\t\t\"          wdt:P161 ?film2 .\",\n\t\t\"?director wdt:P737 wd:Q1970252 ;\",\n\t\t\"          wdt:P57 wd:Q3017093 .\",\n\t\t\"?influence1 wdt:P737 wd:Q88965291 ;\",\n\t\t\"           wdt:P57 wd:Q133730 .\",\n\t\t\"?influence2 wdt:P737 wd:Q88965291 ;\",\n\t\t\"           wdt:P57 wd:Q133730 .\",\n\t\t\"?influence1 wdt:P737 ?director .\",\n\t\t\"?influence2 wdt:P737 ?director .\",\n\t\t\"?resource ?p ?v.\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P57 wd:Q88965291 ; wdt:P737 wd:Q133730 . ?film2 wdt:P57 wd:Q88965291 ; wdt:P737 wd:Q133730 . ?director wdt:P161 ?film1 ; wdt:P161 ?film2 . ?director wdt:P737 wd:Q1970252 ; wdt:P57 wd:Q3017093 . ?influence1 wdt:P737 wd:Q88965291 ; wdt:P57 wd:Q133730 . ?influence2 wdt:P737 wd:Q88965291 ; wdt:P57 wd:Q133730 . ?influence1 wdt:P737 ?director . ?influence2 wdt:P737 ?director . ?resource ?p ?v. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film1 kg:7838 ?director1 .\",\n      \"?film2 kg:7838 ?director1 .\",\n      \"?film1 kg:4919 \\\"There Will Be No Leave Today\\\" .\",\n      \"?film2 kg:4919 \\\"The Killers\\\" .\",\n      \"?director1 kg:3435 ?person1 .\",\n      \"?person1 kg:737 ?influencedLars .\",\n      \"?person1 kg:737 ?influencedAran .\",\n      \"?influencedLars kg:9388 ?film3 .\",\n      \"?influencedAran kg:9388 ?film4 .\",\n      \"VALUES ?film3 { kg:1056 }\",\n      \"VALUES ?film4 { kg:1056 }\",\n      \"?resource ?property ?value\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 kg:7838 ?director1 . ?film2 kg:7838 ?director1 . ?film1 kg:4919 \"There Will Be No Leave Today\" . ?film2 kg:4919 \"The Killers\" . ?director1 kg:3435 ?person1 . ?person1 kg:737 ?influencedLars . ?person1 kg:737 ?influencedAran . ?influencedLars kg:9388 ?film3 . ?influencedAran kg:9388 ?film4 . VALUES ?film3 { kg:1056 } VALUES ?film4 { kg:1056 } ?resource ?property ?value } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?person wdt:P106 wd:Q7042855 ;\",\n\t\t\"   wdt:P737/wdt:P112* (wd:Q104340 / wd:Q157191 / wd:Q219400) ;\",\n\t\t\"   wdt:P26 (wd:Q241019 / wd:Q32337 / wd:Q137808).\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P106 wd:Q7042855 ; wdt:P737/wdt:P112* (wd:Q104340 / wd:Q157191 / wd:Q219400) ; wdt:P26 (wd:Q241019 / wd:Q32337 / wd:Q137808). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?editor kg:0887 ?spouse .\",\n      \"?editor kg:4096 \\\"United Artists Corporation\\\" .\",\n      \"?editor kg:5797 ?fellini .\",\n      \"?editor kg:8926 ?marceau .\",\n      \"?editor kg:6495 ?haroldLloyd .\",\n      \"VALUES ?spouse { kg:3790 kg:2780 kg:5107 }\",\n      \"FILTER(?fellini = kg:5797 && ?marceau = kg:8926 && ?haroldLloyd = kg:6495)\",\n      \"?editor rdfs:label ?editorName .\",\n      \"VALUES ?resource { ?editor }\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?editor kg:0887 ?spouse . ?editor kg:4096 \"United Artists Corporation\" . ?editor kg:5797 ?fellini . ?editor kg:8926 ?marceau . ?editor kg:6495 ?haroldLloyd . VALUES ?spouse { kg:3790 kg:2780 kg:5107 } FILTER(?fellini = kg:5797 && ?marceau = kg:8926 && ?haroldLloyd = kg:6495) ?editor rdfs:label ?editorName . VALUES ?resource { ?editor } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film wdt:P31 wd:Q312258 ;\", \"# Film instance of Q312258 (movie)\",\n      \"  wdt:P57 ?director ;\", \"# Director of the film\",\n      \"  wdt:P58 ?writer .\", \"# Writer of the film\",\n      \"?film wdt:P737 ?star .\", \"# Star of the film\",\n      \"?director wdt:P26* wd:Q2709504 ;\", \"# Director is married to Q2709504\",\n      \"?writer wdt:P26* wd:Q3204825 ;\", \"# Writer influenced by Q3204825\",\n      \"?star wdt:P26* wd:Q3161846\" ,\"# Star was influenced by Q3161846\"\n    ,\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film wdt:P31 wd:Q312258 ; wdt:P57 ?director ; wdt:P58 ?writer . ?film wdt:P737 ?star . ?director wdt:P26* wd:Q2709504 ; ?writer wdt:P26* wd:Q3204825 ; ?star wdt:P26* wd:Q3161846 } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer\",\n    \"WHERE {\",\n      \"?film kg:3768 ?star ;\",\n        \"kg:5044 ?director ;\",\n        \"kg:7352 ?writer .\",\n      \"?director kg:1025 ?person ;\",\n        \"kg:9335 ?influencedPerson ;\",\n        \"kg:0549 ?influencedByPerson .\",\n      \"?person kg:8954 ?influenced .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film kg:3768 ?star ; kg:5044 ?director ; kg:7352 ?writer . ?director kg:1025 ?person ; kg:9335 ?influencedPerson ; kg:0549 ?influencedByPerson . ?person kg:8954 ?influenced . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?distributorProducer wdt:P750 wd:Q17070012 ;\",\n\t\t\"   wdt:P127* wd:Q849363, wd:Q219635, wd:Q65073147, wd:Q318128, wd:Q136469, wd:Q1628791 ;\",\n\t\t\"   wdt:P272 ?resource.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?distributorProducer wdt:P750 wd:Q17070012 ; wdt:P127* wd:Q849363, wd:Q219635, wd:Q65073147, wd:Q318128, wd:Q136469, wd:Q1628791 ; wdt:P272 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:7869 ?distributorProducer .\",\n      \"?distributorProducer kg:9429 ?vanguardBlackRock .\",\n      \"?vanguardBlackRock kg:6391 ?amazonCloudFront .\",\n      \"?amazonCloudFront kg:1153 ?amazonDotAmazon .\",\n      \"?amazonDotAmazon kg:8446 ?amazonKindle .\",\n      \"?amazonKindle kg:5185 ?abeBooks\"\n    ,\n      \"FILTER(?resource != ?distributorProducer && ?resource != ?vanguardBlackRock && ?resource != ?amazonCloudFront && ?resource != ?amazonDotAmazon && ?resource != ?amazonKindle && ?resource != ?abeBooks)\"\n    ,\n      \"?resource a ?type .\"\n    ,\n      \"VALUES ?type { kg:9760 }\"\n    ,\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7869 ?distributorProducer . ?distributorProducer kg:9429 ?vanguardBlackRock . ?vanguardBlackRock kg:6391 ?amazonCloudFront . ?amazonCloudFront kg:1153 ?amazonDotAmazon . ?amazonDotAmazon kg:8446 ?amazonKindle . ?amazonKindle kg:5185 ?abeBooks FILTER(?resource != ?distributorProducer && ?resource != ?vanguardBlackRock && ?resource != ?amazonCloudFront && ?resource != ?amazonDotAmazon && ?resource != ?amazonKindle && ?resource != ?abeBooks) ?resource a ?type . VALUES ?type { kg:9760 } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?resource wdt:P161* wd:Q4004365 ;\",\n\t\t\"   wdt:P344* wd:Q3207690 ;\",\n\t\t\"   wdt:P57* wd:Q3633009 ;\",\n\t\t\"   wdt:P1040* wd:Q289021 ;\",\n\t\t\"   wdt:P1040* wd:Q463946 ;\",\n\t\t\"   wdt:P58 ?work ;\",\n\t\t\"?work wdt:P27 wd:Q29.\"\n\t\t\t,\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161* wd:Q4004365 ; wdt:P344* wd:Q3207690 ; wdt:P57* wd:Q3633009 ; wdt:P1040* wd:Q289021 ; wdt:P1040* wd:Q463946 ; wdt:P58 ?work ; ?work wdt:P27 wd:Q29. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:9178 ?property1.\",\n      \"?resource kg:3229 ?property2.\",\n      \"?property1 kg:6030 \\\"Female Vampire\\\".\",\n      \"?property2 kg:3045 \\\"The Blood of Fu Manchu\\\".\",\n      \"OPTIONAL { ?resource kg:8940 ?property3. ?property3 kg:0939 \\\"No label defined\\\". }\",\n      \"OPTIONAL { ?resource kg:1754 ?country. ?country kg:0418 \\\"Spain\\\". }\",\n      \"?resource kg:9187 ?property4.\",\n      \"?property4 kg:3229 \\\"99 Women\\\".\"\n    ,\n      \"?resource kg:6030 \\\"No label defined\\\".\"\n    ,\n      \"?resource kg:3045 \\\"The Blood of Fu Manchu\\\".\"\n    ,\n      \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9178 ?property1. ?resource kg:3229 ?property2. ?property1 kg:6030 \"Female Vampire\". ?property2 kg:3045 \"The Blood of Fu Manchu\". OPTIONAL { ?resource kg:8940 ?property3. ?property3 kg:0939 \"No label defined\". } OPTIONAL { ?resource kg:1754 ?country. ?country kg:0418 \"Spain\". } ?resource kg:9187 ?property4. ?property4 kg:3229 \"99 Women\". ?resource kg:6030 \"No label defined\". ?resource kg:3045 \"The Blood of Fu Manchu\". } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q222344 ;\", \"# Is a cinematographer\",\n    \"wdt:P112 wd:Q216611 .\", \"# Founded by Industrial Light & Magic and THX\",\n    \"wdt:P112 wd:Q242446 ;\", \"# Founded by Jediism, Lucasfilm, and LucasArts\",\n    \"wd:Q6813152 wdt:P26 ?spouse .\", \"# Mellody Hobson's spouse\",\n    \"?resource wdt:P112 ?spouse\"\n   \t]}\n \t\t\t\t\t\t\t\t\t\t  \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q222344 ; wdt:P112 wd:Q216611 . wdt:P112 wd:Q242446 ; wd:Q6813152 wdt:P26 ?spouse . ?resource wdt:P112 ?spouse LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:2039 kg:2511 ;\", \"# Industrial Light & Magic founded by\",\n      \"         kg:4287 kg:0403 ;\", \"# Jediism founded by\",\n      \"         kg:5448 ;\", \"# Lucasfilm founded by\",\n      \"         kg:7772 ;\" ,\"# LucasArts founded by\",\n      \"         kg:3386.\" ,\"# Mellody Hobson's spouse\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2039 kg:2511 ; kg:4287 kg:0403 ; kg:5448 ; kg:7772 ; kg:3386. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n \t      \t\t\t\"query\": []}", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"?resource kg:9445 wd:Q85520081 ;\", \"# Is cinematographer and star of Inception, Game Over, and Liberation\",\n \t\t\"   kg:8425 wd:Q96054985 .          # Wrote The Madness\",\n \t\t\"?resource kg:6722 wd:Q87778273 ;\", \"# Directed The Madness\",\n \t\t\"   kg:1857 wd:Q85532437 ;\", \"# Executive produced The Madness\",\n \t\t\"   kg:0779 wd:Q85532437 .         # Edited The Madness\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9445 wd:Q85520081 ; kg:8425 wd:Q96054985 . ?resource kg:6722 wd:Q87778273 ; kg:1857 wd:Q85532437 ; kg:0779 wd:Q85532437 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?writer wdt:P344 wd:Q1609393 ;\",\n    \"   wdt:P344 wd:Q2411065 ;\",\n    \"   wdt:P344 wd:Q208910 ;\",\n    \"   wdt:P344 wd:Q613974 ;\",\n    \"   wdt:P58 ?resource .\",\n    \"?cinematographer wdt:P344 wd:Q1609393 ;\",\n    \"   wdt:P344 wd:Q2411065 ;\",\n    \"   wdt:P344 wd:Q208910 ;\",\n    \"   wdt:P344 wd:Q613974 ;\",\n    \"   wdt:P58 ?resource .\",\n    \"?writer wdt:P737 wd:Q52306598 ;\",\n    \"   wdt:P737 wd:Q717378 ;\",\n    \"   wdt:P26 wd:Q5 .\",\n    \"?cinematographer wdt:P737 wd:Q52306598 ;\",\n    \"   wdt:P737 wd:Q717378 ;\",\n    \"   wdt:P26 wd:Q5 .\"\n    ,\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?writer wdt:P344 wd:Q1609393 ; wdt:P344 wd:Q2411065 ; wdt:P344 wd:Q208910 ; wdt:P344 wd:Q613974 ; wdt:P58 ?resource . ?cinematographer wdt:P344 wd:Q1609393 ; wdt:P344 wd:Q2411065 ; wdt:P344 wd:Q208910 ; wdt:P344 wd:Q613974 ; wdt:P58 ?resource . ?writer wdt:P737 wd:Q52306598 ; wdt:P737 wd:Q717378 ; wdt:P26 wd:Q5 . ?cinematographer wdt:P737 wd:Q52306598 ; wdt:P737 wd:Q717378 ; wdt:P26 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/knowledge_graph/>\",\n    \"\",\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?writerAndCinematographer kg:0611 ?person .\",\n    \"  FILTER(?person IN (kg:9012, kg:8427, kg:0352, kg:3655, kg:8850))\",\n    \"  ?work kg:7578 ?writerAndCinematographer .\",\n    \"  ?work kg:7316 ?title .\",\n    \"  FILTER(?title IN ('The Emperor', 'Anyone Lived in a Pretty How Town', '1:42.08', 'Herbie'))\",\n    \"  ?person kg:7316 ?influencedPerson .\",\n    \"  FILTER(?influencedPerson IN (kg:6555, kg:6397))\",\n    \"}\",\n    \"ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?writerAndCinematographer kg:0611 ?person . FILTER(?person IN (kg:9012, kg:8427, kg:0352, kg:3655, kg:8850)) ?work kg:7578 ?writerAndCinematographer . ?work kg:7316 ?title . FILTER(?title IN ('The Emperor', 'Anyone Lived in a Pretty How Town', '1:42.08', 'Herbie')) ?person kg:7316 ?influencedPerson . FILTER(?influencedPerson IN (kg:6555, kg:6397)) } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource WHERE {\",\n\t\t\"?film wdt:P106 wd:Q222344 ;\",\n\t\t\"   wdt:P57 wd:Q18609037 ;\",\n\t\t\"   wdt:P57 wd:Q1361018 ;\",\n\t\t\"   wdt:P57 wd:Q2086445 ;\",\n\t\t\"   wdt:P1040 wd:Q1361018 .\",\n\t\t\"?trilogy wdt:P106 wd:Q1361018 ;\",\n\t\t\"   wdt:P58 ?film .\",\n\t\t\"?resource ?property ?value.\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P106 wd:Q222344 ; wdt:P57 wd:Q18609037 ; wdt:P57 wd:Q1361018 ; wdt:P57 wd:Q2086445 ; wdt:P1040 wd:Q1361018 . ?trilogy wdt:P106 wd:Q1361018 ; wdt:P58 ?film . ?resource ?property ?value. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:4939 ?director .\",\n      \"?director kg:7860 kg:3690 .\",\n      \"?resource kg:2405 ?cinematographer .\",\n      \"?cinematographer kg:5926 kg:3690 .\",\n      \"?resource kg:5354 ?producer .\",\n      \"?producer kg:5926 kg:3690 .\",\n      \"?resource kg:4444 ?editor .\",\n      \"?editor kg:5926 kg:3690 .\",\n      \"?resource kg:4444 ?writer .\",\n      \"?writer kg:5926 kg:3690 .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4939 ?director . ?director kg:7860 kg:3690 . ?resource kg:2405 ?cinematographer . ?cinematographer kg:5926 kg:3690 . ?resource kg:5354 ?producer . ?producer kg:5926 kg:3690 . ?resource kg:4444 ?editor . ?editor kg:5926 kg:3690 . ?resource kg:4444 ?writer . ?writer kg:5926 kg:3690 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?film wdt:P106 wd:Q2526255 ;\", \"# Check if the film is a movie directed by a director\",\n      \"  wdt:P1040 wd:Q63993096 ;\", \"# The film was written by Agnès Varda and Jacques Demy\",\n      \"  wdt:P1040 wd:Q2493884 .\", \"# The film was edited by Jacques Demy\",\n      \"?director wdt:P106 wd:Q2298257 ;\", \"# Check if the director is a film director\",\n      \"  wdt:P26 ?birth .\", \"# Get the birth date of the director (optional)\",\n      \"FILTER EXISTS { ?film wdt:P58 ?director }\" ,\"\\n# Ensure the director directed the film\",\n      \"?marriage wdt:P737 ?director ;\", \"# Check if there is a marriage involving the director\",\n      \"  wdt:P26 ?spouse .\", \"# Get the spouse of the director (optional)\",\n      \"FILTER EXISTS { ?film wdt:P58 wd:Q312258 }\" ,\"\\n# Ensure the film was directed by the same director as in the first part\",\n      \"?influence wdt:P737 ?director ;\", \"# Check if there is an influence involving the director\",\n      \"  wdt:P26 ?influenced .\", \"# Get the person influenced (optional)\",\n      \"FILTER EXISTS { ?film wdt:P58 wd:Q312258 }\" ,\"\\n# Ensure the film was directed by the same director as in the first part\",\n      \"?resource ?property ?value .\" ,\"\\n# Return any resource, property, and value related to the query\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P106 wd:Q2526255 ; wdt:P1040 wd:Q63993096 ; wdt:P1040 wd:Q2493884 . ?director wdt:P106 wd:Q2298257 ; wdt:P26 ?birth . FILTER EXISTS { ?film wdt:P58 ?director } ?marriage wdt:P737 ?director ; wdt:P26 ?spouse . FILTER EXISTS { ?film wdt:P58 wd:Q312258 } ?influence wdt:P737 ?director ; wdt:P26 ?influenced . FILTER EXISTS { ?film wdt:P58 wd:Q312258 } ?resource ?property ?value . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?filmDirector kg:4129 ?film1 .\",\n      \"?filmDirector kg:4129 ?film2 .\",\n      \"?film1 kg:8697 \\\"Vagabond\\\" .\",\n      \"?film2 kg:8697 \\\"The Gleaners and I\\\" .\",\n      \"?film1 kg:5639 ?marriage .\",\n      \"?film2 kg:5639 ?influence .\",\n      \"?filmDirector kg:0316 ?jacquesDemy .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?filmDirector kg:4129 ?film1 . ?filmDirector kg:4129 ?film2 . ?film1 kg:8697 \"Vagabond\" . ?film2 kg:8697 \"The Gleaners and I\" . ?film1 kg:5639 ?marriage . ?film2 kg:5639 ?influence . ?filmDirector kg:0316 ?jacquesDemy . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?resource\",\n\t\t\"WHERE {\",\n\t\t\t\"?resource wdt:P750 wd:Q2062523 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q3511946 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q7603552 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q2007336 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q219635 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q505275 ;\",\n\t\t\t\t\"(wdt:P127/wdt:P272)* wd:Q849363 .\"\n\t\t]}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P750 wd:Q2062523 ; (wdt:P127/wdt:P272)* wd:Q3511946 ; (wdt:P127/wdt:P272)* wd:Q7603552 ; (wdt:P127/wdt:P272)* wd:Q2007336 ; (wdt:P127/wdt:P272)* wd:Q219635 ; (wdt:P127/wdt:P272)* wd:Q505275 ; (wdt:P127/wdt:P272)* wd:Q849363 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n      \"?resource kg:3944 ?distributorProducer .\",\n      \"?distributorProducer kg:2147 [ kg:9566 \\\"State Street Global Advisors\\\" ; kg:3261 \\\"BlackRock\\\" ; kg:3199 \\\"T. Rowe Price\\\" ; kg:4291 \\\"Capital Group Companies\\\" ] .\",\n      \"?resource kg:3944 ?insuranceCompany .\",\n      \"?insuranceCompany kg:1622 [ kg:6334 \\\"State Farm Insurance\\\" ; kg:4156 \\\"The Vanguard Group\\\" ] .\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3944 ?distributorProducer . ?distributorProducer kg:2147 [ kg:9566 \"State Street Global Advisors\" ; kg:3261 \"BlackRock\" ; kg:3199 \"T. Rowe Price\" ; kg:4291 \"Capital Group Companies\" ] . ?resource kg:3944 ?insuranceCompany . ?insuranceCompany kg:1622 [ kg:6334 \"State Farm Insurance\" ; kg:4156 \"The Vanguard Group\" ] . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n \t\"query\": [\n\t\t\"SELECT ?film\",\n\t\t\"WHERE {\",\n\t\t\t\"?film wdt:P31 wd:Q11424. \",\n\t\t\t\"?film wdt:P57 wd:Q16390. \",\n\t\t\t\"?film wdt:P57 wd:Q295984. \",\n\t\t\t\"?film wdt:P57 wd:Q4420093. \",\n\t\t\t\"?film wdt:P57 wd:Q242477. \",\n\t\t\t\"?film wdt:P162 wd:Q93188. \",\n\t\t\t\"?film wdt:P162 wd:Q744357. \",\n\t\t\t\"?film wdt:P58 wd:Q16390. \",\n\t\t\t\"?film wdt:P58 wd:Q295984. \",\n\t\t\t\"?film wdt:P58 wd:Q4420093. \",\n\t\t\t\"?film wdt:P58 wd:Q242477. \",\n\t\t\t\"FILTER NOT EXISTS { ?film wdt:P161 ?star. }\",\n\t\t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\",\n\t\t\"}\"\n\t]\n}", "normal_query": "SELECT ?film WHERE { ?film wdt:P31 wd:Q11424. ?film wdt:P57 wd:Q16390. ?film wdt:P57 wd:Q295984. ?film wdt:P57 wd:Q4420093. ?film wdt:P57 wd:Q242477. ?film wdt:P162 wd:Q93188. ?film wdt:P162 wd:Q744357. ?film wdt:P58 wd:Q16390. ?film wdt:P58 wd:Q295984. ?film wdt:P58 wd:Q4420093. ?film wdt:P58 wd:Q242477. FILTER NOT EXISTS { ?film wdt:P161 ?star. } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:latest", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n      \"?film kg:5442 \\\"Randolph Scott\\\" ;\", \"# Director property\",\n      \"         kg:7895 \\\"Miriam Hopkins\\\" ;\", \"# Producer property\",\n      \"         kg:7648 \\\"Humphrey Bogart\\\" ;\", \"# Writer property\",\n      \"         kg:6011 \\\"Robert Buckner\\\" ;\", \"# Writer property\",\n      \"         kg:1716 \\\"Errol Flynn\\\" ;\", \"# Star property\",\n      \"         kg:2669 \\\"Paul Fix\\\" .\", \"# Star property\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film kg:5442 \"Randolph Scott\" ; kg:7895 \"Miriam Hopkins\" ; kg:7648 \"Humphrey Bogart\" ; kg:6011 \"Robert Buckner\" ; kg:1716 \"Errol Flynn\" ; kg:2669 \"Paul Fix\" . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:5262 kg:7910 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:5262 kg:7910 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:Q853 P1040 ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q853 P1040 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n      \"SELECT ?resource WHERE { wd:Q721 wdt:P155 ?resource. }\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q721 wdt:P155 ?resource. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:1291 kg:1047 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:1291 kg:1047 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\" : [\n    \"SELECT ?sequel WHERE { wd:Q131593 wdt:P155 ?sequel . }\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q131593 wdt:P155 ?sequel . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:4953 kg:1888 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:4953 kg:1888 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . }\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\" : [\n    \"SELECT ?parent WHERE { kg:2110 <http://www.wikidata.org/prop/P40> ?parent . }\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { kg:2110 p:P40 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q79070 wdt:P108 wd:Q40. }\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 wd:Q40. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\"@prefix kg:<http://rdf.freebase.com/ns/>.\\n\\nSELECT ?resource WHERE {\\n<http://rdf.freebase.com/ns/kg:79070> kg:3135 ?resource.\\n?resource kg:4661 kg:40.\\n}\"\n] }", "normal_query": "@prefix kg:<http://rdf.freebase.com/ns/>. SELECT ?resource WHERE { <http://rdf.freebase.com/ns//kg:79070> kg:3135 ?resource. ?resource kg:4661 kg:40. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n  \t\t\"SELECT ?author WHERE { wd:Q80379 wdt:P58 ?author . }\"\n  \t]\n}", "normal_query": "SELECT ?author WHERE { wd:Q80379 wdt:P58 ?author . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?resource WHERE { kg:7109 kg:7976 ?resource . }\"\n \t\t \t\t ]\n}", "normal_query": "SELECT ?resource WHERE { kg:7109 kg:7976 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?x wdt:P1431 wd:Q72276 . \"\n     \t ]\n}", "normal_query": "?x wdt:P1431 wd:Q72276 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:0000 kg:7729 ?resource . ?resource kg:8619 \\\"A Good Day to Die Hard\\\"^^<http://www.w3.org/2001/XMLSchema#string> }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:0000 kg:7729 ?resource . ?resource kg:8619 \"A Good Day to Die Hard\"^^<http://www.w3.org/2001//XMLSchema> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n     \t\t\"?x ?p wd:Q2733930 .\"\n      ]\n} ", "normal_query": "?x ?p wd:Q2733930 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?x1}\",\n     \t\t\"{?x0 <http://schema.org/name> 'White Diamond: A Personal Portrait'}\",\n     \t\t\"{?x0 <http://purl.org/dc/terms/creator> ?x2}\",\n     \t\t\"{?x2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://data.dbpedia.org/resource/Kylie_Minogue>}\",\n     \t\t\"{?x0 <http://schema.org/contributor> ?x3}\",\n     \t\t\"{?x3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:7624}\",\n     \t\t\"{?x3 <http://data.viaf.org/viaf/terms#viafID> ?x4}\",\n     \t\t\"{?x4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:8685}\",\n     \t\t\"{?x4 <http://data.viaf.org/viaf/terms#viafID> ?x5}\",\n     \t\t\"{?x5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:8803}\"\n     \t]\n}", "normal_query": "{?x0 <http://www.w3.org/1999/02//22-rdf-syntax-ns> {?x0 schema:name 'White Diamond: A Personal Portrait'} {?x0 dct:creator ?x2} {?x2 <http://www.w3.org/1999/02//22-rdf-syntax-ns> {?x0 schema:contributor ?x3} {?x3 <http://www.w3.org/1999/02//22-rdf-syntax-ns> {?x3 <http://data.viaf.org/viaf//terms> {?x4 <http://www.w3.org/1999/02//22-rdf-syntax-ns> {?x4 <http://data.viaf.org/viaf//terms> {?x5 <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?x wdt:P106 wd:Q69423232 .\",\n    \t\t\"?x wdt:P344 wd:Q158069 .\"\n    \t]\n}", "normal_query": "?x wdt:P106 wd:Q69423232 . ?x wdt:P344 wd:Q158069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"{?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?x1}\",\n     \t\t\"{kg:3749 <http://schema.org/directorOf> ?x0}\",\n     \t\t\"{?x0 <http://purl.org/dc/terms/creator> ?x2}\",\n     \t\t\"{?x2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> kg:6944}\"\n \t]\n}", "normal_query": "{?x0 <http://www.w3.org/1999/02//22-rdf-syntax-ns> {kg:3749 schema:directorOf ?x0} {?x0 dct:creator ?x2} {?x2 <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?wife wdt:P26 wd:Q76845 . \"\n  \t\t]\n  \t\t}\n  \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "?wife wdt:P26 wd:Q76845 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n \t\"query\" : [\n  \t\t\"SELECT ?resource WHERE { kg:0885 P26 ?resource . }\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:0885 P26 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?composer . }\"\n \t]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q208824 wdt:P162 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { kg:1999 P272 ?composer . }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?composer WHERE { kg:1999 P272 ?composer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?composer wdt:P106 wd:Q577126 ; wdt:P86 wd:Q69423232 .\"\n     \t\t ]\n}", "normal_query": "?composer wdt:P106 wd:Q577126 ; wdt:P86 wd:Q69423232 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { kg:7339 <http://www.wikidata.org/prop/P106> ?resource . }\"\n   ]\n}", "normal_query": "SELECT ?resource WHERE { kg:7339 p:P106 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?composer wdt:P106 wd:Q222344 ; wdt:P86 wd:Q76582 . \"\n  \t ]\n}", "normal_query": "?composer wdt:P106 wd:Q222344 ; wdt:P86 wd:Q76582 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t\t\"SELECT ?composerCinematographer WHERE { kg:7704 p:P106/ps:P106* ?composerCinematographer . ?composerCinematographer a <http://schema.org/Cinematographer> }\"\n \t\t \t  ]\n}", "normal_query": "SELECT ?composerCinematographer WHERE { kg:7704 p:P106/ps:P106* ?composerCinematographer . ?composerCinematographer a schema:Cinematographer } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?sequel wdt:P750 wd:Q2283 ; wdt:P155 wd:Q4348691 .\"\n     \t\t ]\n}", "normal_query": "?sequel wdt:P750 wd:Q2283 ; wdt:P155 wd:Q4348691 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:9554 P155 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:9554 P155 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t \"?sequel wdt:P155 wd:Q2085 .\"\n  \t\t]\n  \t\t}\n  \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "?sequel wdt:P155 wd:Q2085 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"?x kg:P161 kg:7081 .\",\n     \t\t\"?x kg:P155 kg:5276 .\"\n \t\t \t  ]\n}", "normal_query": "?x kg:P161 kg:7081 . ?x kg:P155 kg:5276 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?x ?p ?o\"\n  \t\t]\n  \t\t}\n  \t\t\t\t\t\t\t      \t\t \t\t", "normal_query": "?x ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8874 kg:5208/kg:3621?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:8874 kg:5208/kg:3621?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?s wdt:P108 wd:Q1022419 .\",\n  \t \"?s wdt:P3373 ?t .\",\n  \t \"?t wdt:P352 wd:Q352 .\"\n \t]\n}", "normal_query": "?s wdt:P108 wd:Q1022419 . ?s wdt:P3373 ?t . ?t wdt:P352 wd:Q352 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:6467 kg:9040 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:6467 kg:9040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?employerOfDrDre wdt:P108 wd:Q6078 ; wdt:P750 ?distributorOfACPC . ?distributorOfACPC wdt:P42310881 wd:Q42310881 .\"\n \t]\n}", "normal_query": "?employerOfDrDre wdt:P108 wd:Q6078 ; wdt:P750 ?distributorOfACPC . ?distributorOfACPC wdt:P42310881 wd:Q42310881 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n \t\"query\" : [\n  \t\t\"SELECT ?employer WHERE { kg:5020 kg:9526 ?employer . }\"\n  \t]\n}", "normal_query": "SELECT ?employer WHERE { kg:5020 kg:9526 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q15070044 wdt:P40 ?parent . ?parent wdt:P355 ?employer . ?employer wdt:P108 wd:Q103941992 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q15070044 wdt:P40 ?parent . ?parent wdt:P355 ?employer . ?employer wdt:P108 wd:Q103941992 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:4817 kg:3071 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:4817 kg:3071 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q730300 wdt:P26 ?spouse . ?spouse wdt:P351 wd:Q1323191 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q730300 wdt:P26 ?spouse . ?spouse wdt:P351 wd:Q1323191 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n \t\t\"query\": [\n  \t\t\"{?x ?y kg:2674}\",\n  \t\t\"?x kg:4660 ?z\",\n  \t\t\"?z kg:5504 kg:0002\"\n  \t]\n}", "normal_query": "{?x ?y kg:2674} ?x kg:4660 ?z ?z kg:5504 kg:0002 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t \"?x ?p ?o\"\n  \t\t]\n  \t\t}\n  \t\t\t\t\t\t\t      \t\t \t\t", "normal_query": "?x ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"{?x kg:9700 kg:3343}\",\n      \t\t\"?x kg:9356 kg:0522\"\n      \t]\n}", "normal_query": "{?x kg:9700 kg:3343} ?x kg:9356 kg:0522 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:8693 <http://schema.org/director> ?resource . kg:8693 <http://schema.org/writer> ?resource }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:8693 schema:director ?resource . kg:8693 schema:writer ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource wdt:P1040 wd:Q24907 .\",\n    \"  ?resource wdt:P58 wd:Q24907 .\",\n    \"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q24907 . ?resource wdt:P58 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:9130 <http://purl.org/dc/elements/1.1/contributor> ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:9130 <http://purl.org/dc/elements/1.1//contributor> ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?parent wdt:P106 wd:Q1323191 .\"\n    \t\t, \"?parent wdt:P40 ?child .\"\n    \t\t, \"?child wdt:P355 \\\"Nadja Weiss\\\"@en .\"\n    \t\t, \"?parent wdt:P27 wd:Q34 .\"\n  \t\t]\n\t\t \t\t} ", "normal_query": "?parent wdt:P106 wd:Q1323191 . ?parent wdt:P40 ?child . ?child wdt:P355 \"Nadja Weiss\"@en . ?parent wdt:P27 wd:Q34 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?parent WHERE { kg:8815 p:P355/ps:P355 ?person . ?person wdt:P106 wd:Q1323191 . ?person wdt:P27 wd:Q34 . ?person wdt:P40 ?parent }\"\n \t]\n}", "normal_query": "SELECT ?parent WHERE { kg:8815 p:P355/ps:P355 ?person . ?person wdt:P106 wd:Q1323191 . ?person wdt:P27 wd:Q34 . ?person wdt:P40 ?parent } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\t \t  \"query\": [\n     \"?spouse wdt:P26 wd:Q3514303 .\",\n     \"?spouse wdt:P106 wd:Q222344 .\",\n     \"?spouse wdt:P27 wd:Q17 .\"\n ]\n} ", "normal_query": "?spouse wdt:P26 wd:Q3514303 . ?spouse wdt:P106 wd:Q222344 . ?spouse wdt:P27 wd:Q17 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8757 P26 ?resource . ?resource P106 kg:5000 . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:8757 P26 ?resource . ?resource P106 kg:5000 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?x\"\n    \t]\n    \t}\n    \t\t\t\t\t\t      \t\t \t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:0409 kg:5383 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:0409 kg:5383 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?x\"\n    \t]\n    \t}\n    \t\t\t\t\t\t      \t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:3988 <http://schema.org/sibling> ?resource1 . ?resource1 <http://schema.org/spouse> kg:5129 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:3988 schema:sibling ?resource1 . ?resource1 schema:spouse kg:5129 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?employer . ?employer wdt:P31 wd:Q4830453 . ?employer wdt:P355 ?parentCompany }\"\n \t]\n}", "normal_query": "SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?employer . ?employer wdt:P31 wd:Q4830453 . ?employer wdt:P355 ?parentCompany } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n \t\t\"query\" : [\n  \t\t\"SELECT ?parentCompany WHERE { kg:1897 kg:0342 ?employer . ?employer kg:7139 kg:8023 }\"\n  \t]\n}", "normal_query": "SELECT ?parentCompany WHERE { kg:1897 kg:0342 ?employer . ?employer kg:7139 kg:8023 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P31 wd:Q11424. }\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q1094792 wdt:P108 ?employer . ?employer wdt:P31 wd:Q11424. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?employer WHERE { kg:8161 kg:7435 ?employer . }\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { kg:8161 kg:7435 ?employer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?x\"\n  \t\t]\n  \t\t}\n  \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \"query\": [\n  \t\t\"SELECT ?resource WHERE { kg:9250 kg:3121 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:9250 kg:3121 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { wd:Q6200573 wdt:P106 ?occupation . wd:Q6200573 wdt:P27 wd:Q34 . wd:Q6200573 wdt:P26 ?spouse }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q6200573 wdt:P106 ?occupation . wd:Q6200573 wdt:P27 wd:Q34 . wd:Q6200573 wdt:P26 ?spouse } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:3313 <http://schema.org/spouse> ?resource . ?resource <http://schema.org/nationality> kg:5786 . ?resource <http://schema.org/profession> kg:0061 }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { kg:3313 schema:spouse ?resource . ?resource schema:nationality kg:5786 . ?resource schema:profession kg:0061 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?spouse ?sibling WHERE {\",\n \t\t\" wd:Q2045778 wdt:P3373 ?reign .\",\n \t\t\" ?ruler wdt:P26 ?spouse .\",\n \t\t\" ?ruler wdt:P451 ?sibling .\",\n \t\t\" FILTER(?ruler = wd:Q2045778) }\"\n \t]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { wd:Q2045778 wdt:P3373 ?reign . ?ruler wdt:P26 ?spouse . ?ruler wdt:P451 ?sibling . FILTER(?ruler = wd:Q2045778) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:5747 ?p ?resource . FILTER(?p = <http://www.wikidata.org/prop/direct/P26> || ?p = <http://www.wikidata.org/prop/direct/P3373>) }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:5747 ?p ?resource . FILTER(?p = wdt:P26 || ?p = wdt:P3373) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?producer ?distributor WHERE {\",\n    \"  wd:Q1651543 wdt:P112 ?producer .\",\n    \"  wd:Q1651543 wdt:P750 ?distributor .\",\n    \"  wd:Q1651543 wdt:P272 wd:Q34 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { wd:Q1651543 wdt:P112 ?producer . wd:Q1651543 wdt:P750 ?distributor . wd:Q1651543 wdt:P272 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer ?distributor WHERE { kg:8236 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Movie> . kg:8236 <http://purl.org/dc/terms/creator> ?producer . kg:8236 <http://dbpedia.org/property/distributor> ?distributor }\"\n \t]\n}", "normal_query": "SELECT ?producer ?distributor WHERE { kg:8236 <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n  \t\t\"?resource wdt:P3373 wd:Q29999 .\",\n  \t\t\"?resource wdt:P112 ?founder .\",\n  \t\t\"?founder wdt:P27 wd:Q2336212\"\n  \t]\n}", "normal_query": "?resource wdt:P3373 wd:Q29999 . ?resource wdt:P112 ?founder . ?founder wdt:P27 wd:Q2336212 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:9596 kg:4469 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:9596 kg:4469 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { ?resource wdt:P108 wd:Q15789 . ?resource wdt:P3373 wd:Q60414 . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q15789 . ?resource wdt:P3373 wd:Q60414 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE { kg:1876 <http://schema.org/sibling> ?resource . ?resource <http://schema.org/worksFor> kg:2961 }\"\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { kg:1876 schema:sibling ?resource . ?resource schema:worksFor kg:2961 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer WHERE { wd:Q3715556 wdt:P112 ?producer . ?producer wdt:P272 wd:Q882 }\"\n \t]\n}", "normal_query": "SELECT ?producer WHERE { wd:Q3715556 wdt:P112 ?producer . ?producer wdt:P272 wd:Q882 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer WHERE { kg:3368 <http://www.wikidata.org/prop/P112> ?producer . }\",\n \t\t\"SELECT ?distributor WHERE { kg:3368 <http://www.wikidata.org/prop/P750> ?distributor . }\"\n \t]\n}", "normal_query": "SELECT ?producer WHERE { kg:3368 <http://www.wikidata.org/prop/P112> ?producer . } SELECT ?distributor WHERE { kg:3368 p:P750 ?distributor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n     \"SELECT ?resource WHERE {\"\n     ]\n \t \t\t \t      \t \t\t \t}\n \t \t\t \t      \t \t\t\t", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:8411 P272 ?resource . kg:8411 P58 kg:3400 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:8411 P272 ?resource . kg:8411 P58 kg:3400 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { wd:Q1079409 wdt:P112 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1079409 wdt:P112 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:1827 <http://www.wikidata.org/prop/P3373> ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:1827 p:P3373 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?producer ?writer WHERE { wd:Q320211 wdt:P162 ?producer . wd:Q320211 wdt:P58 ?writer }\"\n    \t]\n}", "normal_query": "SELECT ?producer ?writer WHERE { wd:Q320211 wdt:P162 ?producer . wd:Q320211 wdt:P58 ?writer } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n \t\t\t \t\t\"query\": [\n  \t                \t\"?s kg:3913 kg:4411 ; kg:4994 kg:4760 .\"\n  \t\t\t\t\t ]\n}", "normal_query": "?s kg:3913 kg:4411 ; kg:4994 kg:4760 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?x\"\n    \t]\n    \t}\n    \t\t\t\t\t\t      \t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:6047 P1431 ?resource . kg:9429 P58 ?resource }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:6047 P1431 ?resource . kg:9429 P58 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { wd:Q1651543 wdt:P112 ?resource . ?resource wdt:P750 wd:Q34 }\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1651543 wdt:P112 ?resource . ?resource wdt:P750 wd:Q34 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?producer WHERE { kg:9202 kg:5876 ?producer . ?producer kg:3114 kg:6890 }\"\n \t]\n}", "normal_query": "SELECT ?producer WHERE { kg:9202 kg:5876 ?producer . ?producer kg:3114 kg:6890 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"  wd:Q210535 wdt:P40 ?parent .\",\n \t\t\"  wd:Q210535 wdt:P26 ?spouse .\",\n \t\t\"  wd:Q210535 wdt:P355 ?sibling .\",\n \t\t\"  ?parent wdt:P26 wd:Q443473 .\",\n \t\t\"  ?spouse wdt:P26 wd:Q443473 .\",\n \t\t\"  ?sibling wdt:P26 wd:Q443473 .\",\n \t\t\"  VALUES ?resource { ?parent ?spouse ?sibling }\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q210535 wdt:P40 ?parent . wd:Q210535 wdt:P26 ?spouse . wd:Q210535 wdt:P355 ?sibling . ?parent wdt:P26 wd:Q443473 . ?spouse wdt:P26 wd:Q443473 . ?sibling wdt:P26 wd:Q443473 . VALUES ?resource { ?parent ?spouse ?sibling } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"{ kg:0479 P40 ?parent . ?parent P26 kg:0220 }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ kg:0479 P355 ?spouse . ?spouse P26 kg:0220 }\",\n \t\t\t\"UNION\",\n \t\t\t\"{ kg:0479 P3373 ?sibling . ?sibling P26 kg:0220 }\"\n \t\t]}\n \t", "normal_query": "SELECT ?resource WHERE { { kg:0479 P40 ?parent . ?parent P26 kg:0220 } UNION { kg:0479 P355 ?spouse . ?spouse P26 kg:0220 } UNION { kg:0479 P3373 ?sibling . ?sibling P26 kg:0220 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\t \t  \"query\": [\n     \"?x ?p ?o\"\n ]\n}\n   \t\t\t\t \t  \t\t \t  \t\t ", "normal_query": "?x ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n \t\t\"query\" : [\n \t\t\"SELECT ?resource WHERE { kg:7081 P26 ?spouse . ?spouse P21 kg:9486 . ?spouse P106 kg:5053 . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:7081 P26 ?spouse . ?spouse P21 kg:9486 . ?spouse P106 kg:5053 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n     \"SELECT ?resource WHERE { ?resource wdt:P155 wd:Q115945 . ?resource wdt:P162 wd:Q47099 }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P155 wd:Q115945 . ?resource wdt:P162 wd:Q47099 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:2408 <http://schema.org/director> ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:2408 schema:director ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?child ?parent WHERE {\",\n \t\t\"  wd:Q467752 wdt:P355 ?child .\",\n \t\t\"  ?child wdt:P40 ?parent .\",\n \t\t\"  ?parent wdt:P127 wd:Q4830453 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?child ?parent WHERE { wd:Q467752 wdt:P355 ?child . ?child wdt:P40 ?parent . ?parent wdt:P127 wd:Q4830453 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n \t\t\"query\": [\n  \t\t\"SELECT ?child ?parent WHERE { kg:4917 ?p ?child . kg:4917 ?q ?parent . }\"\n  \t]\n}", "normal_query": "SELECT ?child ?parent WHERE { kg:4917 ?p ?child . kg:4917 ?q ?parent . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n    \t\t\"?x wdt:P750 ?y .\",\n    \t\t\"?x wdt:P272 ?z .\",\n    \t\t\"?y wdt:P112 wd:Q882 .\",\n    \t\t\"?z wdt:P112 wd:Q104109 .\"\n    \t]\n}", "normal_query": "?x wdt:P750 ?y . ?x wdt:P272 ?z . ?y wdt:P112 wd:Q882 . ?z wdt:P112 wd:Q104109 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n \t\t\t \t\t\"query\": [\n \t  \t        \t\t\"SELECT ?resource WHERE { kg:2817 kg:8180 ?resource . }\"\n \t \t \t\t\t ]\n}", "normal_query": "SELECT ?resource WHERE { kg:2817 kg:8180 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q4811453 wdt:P737 ?actor .\",\n    \"?actor wdt:P3373 wd:Q142701 .\",\n    \"?actor wdt:P106 wd:Q33999 .\",\n    \"?resource wdt:P3373 wd:Q4811453 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q4811453 wdt:P737 ?actor . ?actor wdt:P3373 wd:Q142701 . ?actor wdt:P106 wd:Q33999 . ?resource wdt:P3373 wd:Q4811453 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE { kg:1929 ?property ?resource . }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:1929 ?property ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource wdt:P1040 wd:Q562108 .\",\n    \"  ?resource wdt:P1040 wd:Q1687239 .\",\n    \"  ?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?resource wdt:P58 wd:Q562108 .\",\n    \"  ?resource wdt:P58 wd:Q1687239 .\",\n    \"  ?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"]\n}", "normal_query": "SELECT ?resource { ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } UNION { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource <http://schema.org/contributor> <http://example/kg/4288>. \",\n    \"  ?resource <http://schema.org/contributor> <http://example/kg/7573>. \",\n    \"  ?resource <http://schema.org/contributor> <http://example/kg/3255>. \",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource schema:contributor <http://example/kg//4288>. ?resource schema:contributor <http://example/kg//7573>. ?resource schema:contributor <http://example/kg//3255>. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": []}\n    \t\t\t \t\t\t\t \t\t\t\t \t\t", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\" : [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?costumeDesignerResource WHERE { kg:5093 p:P2515 ?statement . ?statement ps:P2515 ?costumeDesignerResource }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?costumeDesignerResource WHERE { kg:5093 p:P2515 ?statement . ?statement ps:P2515 ?costumeDesignerResource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\" : [\n    \"SELECT ?composer WHERE {\",\n    \"  ?composer wdt:P106 wd:Q36834 .\", \"# P106 (occupation) is Q36834 (Composer)\",\n    \"  ?composer wdt:P21 wd:Q6581072 .\", \"# P21 (gender) is Q6581072 (female)\",\n    \"  ?composer wdt:P26 wd:Q96203723 .\", \"# P26 (spouse) is Q96203723 (Mattias Järvinen Palme)\",\n    \"  ?composer wdt:P27 wd:Q34 .\", \"# P27 (country of citizenship) is Q34 (Sweden)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . ?composer wdt:P21 wd:Q6581072 . ?composer wdt:P26 wd:Q96203723 . ?composer wdt:P27 wd:Q34 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?composer WHERE { kg:8271 p:P26 ?statement1 . ?statement1 ps:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 . ?spouse wdt:P27 wd:Q34 . ?spouse wdt:P106 wd:Q36834 }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?composer WHERE { kg:8271 p:P26 ?statement1 . ?statement1 ps:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 . ?spouse wdt:P27 wd:Q34 . ?spouse wdt:P106 wd:Q36834 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q20729551 wdt:P162 ?editor1 ; wdt:P162 ?editor2 ; wdt:P162 ?editor3 .\",\n    \"  ?editor1 wikibase:occupation wd:Q562108 .\",\n    \"  ?editor2 wikibase:occupation wd:Q562108 .\",\n    \"  ?editor3 wikibase:occupation wd:Q562108 .\",\n    \"  ?editor1 rdfs:label ?label1 FILTER (LANG(?label1) = 'da') && STR(?label1) = 'Jens Jørgen Thorsen' .\",\n    \"  ?editor2 rdfs:label ?label2 FILTER (LANG(?label2) = 'da') && STR(?label2) = 'Ole John' .\",\n    \"  ?editor3 rdfs:label ?label3 FILTER (LANG(?label3) = 'da') && STR(?label3) = 'Jørgen Leth' .\",\n    \"}\",\n    \"MINUS { wd:Q20729551 wdt:P272 [] }\", \"><!-- Assuming P272 is the property for indicating that a claim does not exist, adjust as necessary. This line aims to exclude results where Stop for Bud has an associated production company or similar entity which would contradict the query's intent of focusing on editors only. However, this part might need adjustment based on actual Wikidata schema and requirements. --><br>\",\n    \"BIND(wd:Q20729551 AS ?resource)\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q20729551 wdt:P162 ?editor1 ; wdt:P162 ?editor2 ; wdt:P162 ?editor3 . ?editor1 wikibase:occupation wd:Q562108 . ?editor2 wikibase:occupation wd:Q562108 . ?editor3 wikibase:occupation wd:Q562108 . ?editor1 rdfs:label ?label1 FILTER (LANG(?label1) = 'da') && STR(?label1) = 'Jens Jørgen Thorsen' . ?editor2 rdfs:label ?label2 FILTER (LANG(?label2) = 'da') && STR(?label2) = 'Ole John' . ?editor3 rdfs:label ?label3 FILTER (LANG(?label3) = 'da') && STR(?label3) = 'Jørgen Leth' . } MINUS { wd:Q20729551 wdt:P272 [] } ><!-- Assuming P272 is the property for indicating that a claim does not exist, adjust as necessary. This line aims to exclude results where Stop for Bud has an associated production company or similar entity which would contradict the query's intent of focusing on editors only. However, this part might need adjustment based on actual Wikidata schema and requirements. --><br> BIND(wd:Q20729551 AS ?resource) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5777 kg:8715 ?resource .\",\n    \"  FILTER(?resource = kg:3644 || ?resource = kg:2981 || ?resource = kg:2285)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:5777 kg:8715 ?resource . FILTER(?resource = kg:3644 || ?resource = kg:2981 || ?resource = kg:2285) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?spouse WHERE { wd:Q296446 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 . ?spouse wdt:P3373 wd:Q3340 }\"\n    \t]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q296446 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581072 . ?spouse wdt:P3373 wd:Q3340 } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:5862 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Woman>; <http://purl.org/vocab/vann/preferredNamespaceUriPrefix> ?preferredNamespaceUriPrefix; <http://xmlns.com/foaf/0.1/spouse> ?resource . kg:3719 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Male>; <http://purl.org/vocab/vann/preferredNamespaceUriPrefix> ?preferredNamespaceUriPrefix; <http://xmlns.com/foaf/0.1/sibling> kg:5862 . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:5862 <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  { ?resource wdt:P58 wd:Q562108 . }\",\n    \"  UNION\",\n    \"  { ?resource wdt:P58 wd:Q1687239 . }\",\n    \"  UNION\",\n    \"  { ?resource wdt:P58 wd:Q35979475 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { { ?resource wdt:P58 wd:Q562108 . } UNION { ?resource wdt:P58 wd:Q1687239 . } UNION { ?resource wdt:P58 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource <http://purl.org/dc/elements/1.1/creator> <http://example.org/kg/5943> .\",\n    \"  ?resource <http://purl.org/dc/elements/1.1/editor> <http://example.org/kg/6763> .\",\n    \"  ?resource <http://purl.org/dc/elements/1.1/editor> <http://example.org/kg/9719> .\",\n    \"  ?resource <http://purl.org/dc/elements/1.1/editor> <http://example.org/kg/4762> .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource <http://purl.org/dc/elements/1.1//creator> <http://example.org/kg//5943> . ?resource <http://purl.org/dc/elements/1.1//editor> <http://example.org/kg//6763> . ?resource <http://purl.org/dc/elements/1.1//editor> <http://example.org/kg//9719> . ?resource <http://purl.org/dc/elements/1.1//editor> <http://example.org/kg//4762> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q20729551 wdt:P1040 ?work .\",\n    \"  ?work wdt:P58 (wd:Q562108 wd:Q1687239 wd:Q35979475) .\",\n    \"  FILTER(?resource = ?work)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q20729551 wdt:P1040 ?work . ?work wdt:P58 (wd:Q562108 wd:Q1687239 wd:Q35979475) . FILTER(?resource = ?work) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q20729551 <http://schema.org/author> ?resource .\",\n    \"  kg:Q20729551 <http://schema.org/editor> ?resource .\",\n    \"  FILTER(?resource = kg:Q562108 || ?resource = kg:Q1687239 || ?resource = kg:Q35979475)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q20729551 schema:author ?resource . kg:Q20729551 schema:editor ?resource . FILTER(?resource = kg:Q562108 || ?resource = kg:Q1687239 || ?resource = kg:Q35979475) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q20729551 wdt:P162 ?person1 .\",\n    \"  wd:Q20729551 wdt:P162 ?person2 .\",\n    \"  wd:Q20729551 wdt:P162 ?person3 .\",\n    \"  ?person1 wikibase:occupation wd:Q562108 .\",\n    \"  ?person2 wikibase:occupation wd:Q562108 .\",\n    \"  ?person3 wikibase:occupation wd:Q562108 .\",\n    \"  ?person1 rdfs:label 'Ole John'@en .\",\n    \"  ?person2 rdfs:label 'Jørgen Leth'@en .\",\n    \"  ?person3 rdfs:label 'Jens Jørgen Thorsen'@da .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q20729551 wdt:P272 ?person1 .\",\n    \"  wd:Q20729551 wdt:P272 ?person2 .\",\n    \"  wd:Q20729551 wdt:P272 ?person3 .\",\n    \"  ?person1 wikibase:occupation wd:Q562108 .\",\n    \"  ?person2 wikibase:occupation wd:Q562108 .\",\n    \"  ?person3 wikibase:occupation wd:Q562108 .\",\n    \"  ?person1 rdfs:label 'Ole John'@en .\",\n    \"  ?person2 rdfs:label 'Jørgen Leth'@en .\",\n    \"  ?person3 rdfs:label 'Jens Jørgen Thorsen'@da .\",\n    \"}\",\n    \"BIND(wd:Q20729551 AS ?resource)\",\n    \"]\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q20729551 wdt:P162 ?person1 . wd:Q20729551 wdt:P162 ?person2 . wd:Q20729551 wdt:P162 ?person3 . ?person1 wikibase:occupation wd:Q562108 . ?person2 wikibase:occupation wd:Q562108 . ?person3 wikibase:occupation wd:Q562108 . ?person1 rdfs:label 'Ole John'@en . ?person2 rdfs:label 'Jørgen Leth'@en . ?person3 rdfs:label 'Jens Jørgen Thorsen'@da . } UNION { wd:Q20729551 wdt:P272 ?person1 . wd:Q20729551 wdt:P272 ?person2 . wd:Q20729551 wdt:P272 ?person3 . ?person1 wikibase:occupation wd:Q562108 . ?person2 wikibase:occupation wd:Q562108 . ?person3 wikibase:occupation wd:Q562108 . ?person1 rdfs:label 'Ole John'@en . ?person2 rdfs:label 'Jørgen Leth'@en . ?person3 rdfs:label 'Jens Jørgen Thorsen'@da . } BIND(wd:Q20729551 AS ?resource) ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4646 <http://schema.org/director> ?director .\",\n    \"  ?director <http://xmlns.com/foaf/0.1/name> \\\"Ole John\\\"@en .\",\n    \"  kg:4646 <http://schema.org/writer> ?writer .\",\n    \"  ?writer <http://xmlns.com/foaf/0.1/name> \\\"Jørgen Leth\\\"@en .\",\n    \"  kg:4646 <http://schema.org/editor> ?editor .\",\n    \"  ?editor <http://xmlns.com/foaf/0.1/name> \\\"Jens Jørgen Thorsen\\\"@en .\",\n    \"  ?resource <http://schema.org/about> kg:4646 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:4646 schema:director ?director . ?director <http://xmlns.com/foaf/0.1//name> \"Ole John\"@en . kg:4646 schema:writer ?writer . ?writer <http://xmlns.com/foaf/0.1//name> \"Jørgen Leth\"@en . kg:4646 schema:editor ?editor . ?editor <http://xmlns.com/foaf/0.1//name> \"Jens Jørgen Thorsen\"@en . ?resource schema:about kg:4646 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource wdt:P162/wdt:P1431* wd:Q43994 .\",\n    \"  ?resource wdt:P162/wdt:P1431* wd:Q95125 .\",\n    \"  ?resource wdt:P162/wdt:P1431* wd:Q365090 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource wdt:P162/wdt:P1431* wd:Q43994 . ?resource wdt:P162/wdt:P1431* wd:Q95125 . ?resource wdt:P162/wdt:P1431* wd:Q365090 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work p:P1431|p:P162|p:P272 [ ps:(p:P1431|p:P162|p:P272) ?person; pq:P1431|pq:P162|pq:P272 ?role ] .\",\n    \"  VALUES ?person { kg:0211 kg:8925 kg:2822 }\",\n    \"  FILTER(?role = <http://schema.org/creator> || ?role = <http://schema.org/executiveProducer>)\",\n    \"  ?work rdfs:label ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work p:P1431|p:P162|p:P272 [ ps:(p:P1431|p:P162|p:P272) ?person; pq:P1431|pq:P162|pq:P272 ?role ] . VALUES ?person { kg:0211 kg:8925 kg:2822 } FILTER(?role = schema:creator || ?role = schema:executiveProducer) ?work rdfs:label ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\t\t \t\t\t\t \t\t\t\t \t\t\t \t\"query\": [\n     \t \"?s wdt:P21 wd:Q6581072 . \"\n  \t\t] }\n\t\t\t\t \t\t\t\t \t\t\t\t \t\t\t \t", "normal_query": "?s wdt:P21 wd:Q6581072 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n  \"query\": [\n    \"SELECT ?siblingSpouse WHERE {\",\n    \"  kg:8383 P21 kg:7620 .\", \">// Ptolemy X Alexander I has sibling Ptolemy IX Lathyros\",\n    \"  kg:7620 P3373 ?siblingSpouse .\", \">// Ptolemy IX Lathyros is spouse of ?siblingSpouse\",\n    \"  ?siblingSpouse a Q6581072 .\", \">// ?siblingSpouse is female sibling\"\n   \t]}\n \t\t\t            ", "normal_query": "SELECT ?siblingSpouse WHERE { kg:8383 P21 kg:7620 . >// Ptolemy X Alexander I has sibling Ptolemy IX Lathyros kg:7620 P3373 ?siblingSpouse . >// Ptolemy IX Lathyros is spouse of ?siblingSpouse ?siblingSpouse a Q6581072 . >// ?siblingSpouse is female sibling LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q5542223 wdt:P162 ?producer .\",\n    \"  wd:Q5542223 wdt:P57 ?director .\",\n    \"  wd:Q5542223 wdt:P58 ?writer .\",\n    \"  FILTER(?producer = wd:Q1079 || ?producer = wd:Q4500)\",\n    \"  FILTER(?director = wd:Q1079 || ?director = wd:Q4500)\",\n    \"  FILTER(?writer = wd:Q1079 || ?writer = wd:Q4500)\",\n    \"  ?resource (wdt:P31/wdt:P279*) wd:Q1079 .\",\n    \"}\",\n    \"MINUS {\",\n    \"  ?resource wdt:P162 ?otherProducer .\",\n    \"  FILTER(?otherProducer != wd:Q1079 && ?otherProducer != wd:Q4500)\",\n    \"}\",\n    \"MINUS {\",\n    \"  ?resource wdt:P57 ?otherDirector .\",\n    \"  FILTER(?otherDirector != wd:Q1079 && ?otherDirector != wd:Q4500)\",\n    \"}\",\n    \"MINUS {\",\n    \"  ?resource wdt:P58 ?otherWriter .\",\n    \"  FILTER(?otherWriter != wd:Q1079 && ?otherWriter != wd:Q4500)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q5542223 wdt:P162 ?producer . wd:Q5542223 wdt:P57 ?director . wd:Q5542223 wdt:P58 ?writer . FILTER(?producer = wd:Q1079 || ?producer = wd:Q4500) FILTER(?director = wd:Q1079 || ?director = wd:Q4500) FILTER(?writer = wd:Q1079 || ?writer = wd:Q4500) ?resource (wdt:P31/wdt:P279*) wd:Q1079 . } MINUS { ?resource wdt:P162 ?otherProducer . FILTER(?otherProducer != wd:Q1079 && ?otherProducer != wd:Q4500) } MINUS { ?resource wdt:P57 ?otherDirector . FILTER(?otherDirector != wd:Q1079 && ?otherDirector != wd:Q4500) } MINUS { ?resource wdt:P58 ?otherWriter . FILTER(?otherWriter != wd:Q1079 && ?otherWriter != wd:Q4500) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6250 kg:5045 ?resource .\", \">// :6250 (Breaking Bad) has the property P57 (director/producer/writer) with object ?resource\"\n   \t]}\n \t", "normal_query": "SELECT ?resource WHERE { kg:6250 kg:5045 ?resource . >// :6250 (Breaking Bad) has the property P57 (director/producer/writer) with object ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t\t\t  \t\t \t\t\t", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:2932 P1040 ?film .\",\n    \"  ?film P161 kg:2303 .\",\n    \"  kg:2954 P1040 ?film2 .\",\n    \"  ?film2 P161 kg:2303 .\",\n    \"  kg:9009 P1040 ?film3 .\",\n    \"  ?film3 P161 kg:2303 .\",\n    \"  kg:2303 P106 kg:0094 .\",\n    \"  kg:2303 P106 kg:2932 .\",\n    \"  kg:2303 P106 kg:9009 .\",\n    \"  ?resource ?property kg:2303 .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:2932 P1040 ?film . ?film P161 kg:2303 . kg:2954 P1040 ?film2 . ?film2 P161 kg:2303 . kg:9009 P1040 ?film3 . ?film3 P161 kg:2303 . kg:2303 P106 kg:0094 . kg:2303 P106 kg:2932 . kg:2303 P106 kg:9009 . ?resource ?property kg:2303 . } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource wdt:P31 wd:Q5 .\",\n    \"  ?resource wdt:P1040 wd:Q2718259 .\",\n    \"  ?resource wdt:P1040 wd:Q658822 .\",\n    \"  ?resource wdt:P1040 wd:Q45602 .\",\n    \"  ?resource wdt:P1040 wd:Q921678 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { ?resource wdt:P31 wd:Q5 . ?resource wdt:P1040 wd:Q2718259 . ?resource wdt:P1040 wd:Q658822 . ?resource wdt:P1040 wd:Q45602 . ?resource wdt:P1040 wd:Q921678 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 rdfs:label \\\"In the Park\\\"@en .\",\n    \"  ?film2 rdfs:label \\\"Shanghaied\\\"@en .\",\n    \"  ?film3 rdfs:label \\\"Modern Times\\\"@en .\",\n    \"  ?film4 rdfs:label \\\"The Professor\\\"@en .\",\n    \"  ?person kg:P161 ?film1 ; kg:P161 ?film2 ; kg:P161 ?film3 ; kg:P161 ?film4 .\",\n    \"  ?person rdf:type kg:Q5 .\",\n    \"  ?resource owl:sameAs ?person .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"In the Park\"@en . ?film2 rdfs:label \"Shanghaied\"@en . ?film3 rdfs:label \"Modern Times\"@en . ?film4 rdfs:label \"The Professor\"@en . ?person kg:P161 ?film1 ; kg:P161 ?film2 ; kg:P161 ?film3 ; kg:P161 ?film4 . ?person rdf:type kg:Q5 . ?resource owl:sameAs ?person . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  { wd:Q1291210 wdt:P57 ?resource . } UNION\",\n    \"  { wd:Q16198328 wdt:P57 ?resource . } UNION\",\n    \"  { wd:Q4207234 wdt:P57 ?resource . } UNION\",\n    \"  { wd:Q4679987 wdt:P57 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { { wd:Q1291210 wdt:P57 ?resource . } UNION { wd:Q16198328 wdt:P57 ?resource . } UNION { wd:Q4207234 wdt:P57 ?resource . } UNION { wd:Q4679987 wdt:P57 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?director) { (wd:Q1291210) (wd:Q4207234) (wd:Q16198328) (wd:Q4679987) }\",\n    \"?director p:P57 ?statement .\",\n    \"?statement ps:P57 ?film .\",\n    \"?statement pq:P1040 wd:Q1842 .\",\n    \"?film wdt:P31 wd:Q1142469 .\",\n    \"VALUES (?resource) { (?director) (?film) }\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES (?director) { (wd:Q1291210) (wd:Q4207234) (wd:Q16198328) (wd:Q4679987) } ?director p:P57 ?statement . ?statement ps:P57 ?film . ?statement pq:P1040 wd:Q1842 . ?film wdt:P31 wd:Q1142469 . VALUES (?resource) { (?director) (?film) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?director WHERE {\",\n    \"VALUES ?person { wd:Q3772 wd:Q47284 wd:Q549956 wd:Q2838329 }\",\n    \"?film wdt:P57 ?person ;\",\n    \"wdt:P31 wd:Q1137372 .\",\n    \"} GROUP BY ?director\"\n  ]\n}\n\t\t\t\t\t\t      \t\t\t\t  \t\t", "normal_query": "SELECT ?director WHERE { VALUES ?person { wd:Q3772 wd:Q47284 wd:Q549956 wd:Q2838329 } ?film wdt:P57 ?person ; wdt:P31 wd:Q1137372 . } GROUP BY ?director LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  { kg:8800 kg:8582 kg:9444 . }\",\n    \"  UNION\",\n    \"  { kg:8800 kg:8582 kg:6367 . }\",\n    \"  UNION\",\n    \"  { kg:8800 kg:8582 kg:8076 . }\",\n    \"  UNION\",\n    \"  { kg:8800 kg:2845 kg:2370 . }\",\n    \"}\",\n    \"?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:8800 kg:8582 kg:9444 . } UNION { kg:8800 kg:8582 kg:6367 . } UNION { kg:8800 kg:8582 kg:8076 . } UNION { kg:8800 kg:2845 kg:2370 . } } ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q3977597 wdt:P57 ?director .\",\n    \"  wd:Q3977597 wdt:P162 ?producer .\",\n    \"  FILTER(?director = wd:Q4235 || ?director = wd:Q40220 || ?director = wd:Q117392 || ?director = wd:Q5127380)\",\n    \"  FILTER(?producer = wd:Q4235 || ?producer = wd:Q40220 || ?producer = wd:Q117392 || ?producer = wd:Q5127380)\",\n    \"  ?resource (wdt:P57|wdt:P162) wd:Q3977597 .\",\n    \"}\"\n  ]\n}\n\t\t\t\t\t\t\t      \t\t\t\t", "normal_query": "SELECT ?resource { wd:Q3977597 wdt:P57 ?director . wd:Q3977597 wdt:P162 ?producer . FILTER(?director = wd:Q4235 || ?director = wd:Q40220 || ?director = wd:Q117392 || ?director = wd:Q5127380) FILTER(?producer = wd:Q4235 || ?producer = wd:Q40220 || ?producer = wd:Q117392 || ?producer = wd:Q5127380) ?resource (wdt:P57|wdt:P162) wd:Q3977597 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9597 <http://www.wikidata.org/prop/P57> ?person1 .\",\n    \"  kg:9597 <http://www.wikidata.org/prop/P57> ?person2 .\",\n    \"  kg:9597 <http://www.wikidata.org/prop/P57> ?person3 .\",\n    \"  kg:9597 <http://www.wikidata.org/prop/P57> ?person4 .\",\n    \"  ?person1 <http://www.wikidata.org/prop/Q3977597> wd:Q4235 .\",\n    \"  ?person2 <http://www.wikidata.org/prop/Q3977597> wd:Q40220 .\",\n    \"  ?person3 <http://www.wikidata.org/prop/Q3977597> wd:Q117392 .\",\n    \"  ?person4 <http://www.wikidata.org/prop/Q3977597> wd:Q5127380 .\",\n    \"}\",\n    \"?resource = kg:9597\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:9597 p:P57 ?person1 . kg:9597 p:P57 ?person2 . kg:9597 p:P57 ?person3 . kg:9597 p:P57 ?person4 . ?person1 p:Q3977597 wd:Q4235 . ?person2 p:Q3977597 wd:Q40220 . ?person3 p:Q3977597 wd:Q117392 . ?person4 p:Q3977597 wd:Q5127380 . } ?resource = kg:9597 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n    \t\t\"SELECT ?resource\",\n    \t\t\"WHERE {\",\n    \t\t\"  ?resource wdt:P1040 wd:Q38222 .\", \">// Written by George Lucas (assuming Q38222 is the identifier for George Lucas, adjust if necessary)\",\n    \t\t\"  ?resource wdt:P1431 wd:Q38222 .\", \">// Executive produced by George Lucas\",\n    \t\t\"  ?resource wdt:P162 wd:Q38222 .\", \">// Produced by George Lucas\",\n    \t\t\"  ?resource wdt:P58 wd:Q38222 .\", \">// Edited by George Lucas\",\n    \t\t\"}\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q38222 . >// Written by George Lucas (assuming Q38222 is the identifier for George Lucas, adjust if necessary) ?resource wdt:P1431 wd:Q38222 . >// Executive produced by George Lucas ?resource wdt:P162 wd:Q38222 . >// Produced by George Lucas ?resource wdt:P58 wd:Q38222 . >// Edited by George Lucas } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\"@prefix : {<http://rdf.freebase.com/ns/>}. \\n\\nSELECT ?x0 WHERE { \\n?x1 :film.film.directed_by_main_crew ?x2 . \\n?x1 :common.topic.alias ?x3 . \\n?x1 :film.film.executive_producer ?x4 . \\n?x1 :film.film.produced_by ?x5 . \\n?x1 :film.film.edited_by ?x6 . \\n?x2 :person.person.name \\\"George Lucas\\\"@en . \\n?x4 :person.person.name \\\"George Lucas\\\"@en . \\n?x5 :person.person.name \\\"George Lucas\\\"@en . \\n?x6 :person.person.name \\\"George Lucas\\\"@en . \\n}\"]\n}", "normal_query": "@prefix : {<http://rdf.freebase.com/ns/>}. SELECT ?x0 WHERE { ?x1 :film.film.directed_by_main_crew ?x2 . ?x1 :common.topic.alias ?x3 . ?x1 :film.film.executive_producer ?x4 . ?x1 :film.film.produced_by ?x5 . ?x1 :film.film.edited_by ?x6 . ?x2 :person.person.name \"George Lucas\"@en . ?x4 :person.person.name \"George Lucas\"@en . ?x5 :person.person.name \"George Lucas\"@en . ?x6 :person.person.name \"George Lucas\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n \t\t\t \t    \t\t\t\t\t\t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE {\"\n     \t\t\t,\"?resource wdt:P58 wd:Q972787 .\"\n     \t\t,\"?resource wdt:P58 wd:Q672061 .\"\n     \t\t,\"?resource wdt:P58 wd:Q3141131 .\"\n     \t\t,\"?resource wdt:P108 wd:Q909176 .\"\n     \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q972787 . ?resource wdt:P58 wd:Q672061 . ?resource wdt:P58 wd:Q3141131 . ?resource wdt:P108 wd:Q909176 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work1 wdt:P1040 wd:Q972787 .\",\n    \"  ?work2 wdt:P1040 wd:Q672061 .\",\n    \"  ?work3 wdt:P1040 wd:Q3141131 .\",\n    \"  ?person wdt:P58 ?work1 , ?work2 , ?work3 .\",\n    \"  ?person wdt:P108 wd:Q909176 .\",\n    \"  ?resource <http://schema.org/about> ?person .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work1 wdt:P1040 wd:Q972787 . ?work2 wdt:P1040 wd:Q672061 . ?work3 wdt:P1040 wd:Q3141131 . ?person wdt:P58 ?work1 , ?work2 , ?work3 . ?person wdt:P108 wd:Q909176 . ?resource schema:about ?person . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n \t\t\t \t      \t\t\t\"query\": []} ", "normal_query": null, "valid_query": false, "error": "Cannot extract query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  kg:6811 <http://schema.org/director> ?movie .\",\n    \"?movie <http://schema.org/producer> ?producer.\",\n    \"?producer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Organization> | ?producer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person>.\",\n    \"}\",\n    \"VALUES (?producer) {\",\n    \"( kg:2180 ) ( kg:5787 ) ( kg:6364 ) ( kg:1759 )\",\n    \"}\"]\n}", "normal_query": "SELECT ?producer WHERE { kg:6811 schema:director ?movie . ?movie schema:producer ?producer. ?producer <http://www.w3.org/1999/02//22-rdf-syntax-ns> } VALUES (?producer) { ( kg:2180 ) ( kg:5787 ) ( kg:6364 ) ( kg:1759 ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n    \t\t\"?x\"\n    \t] }\n    \t\t\t\t\t\t      \t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE { kg:4528 kg:0687 ?resource . }\",\n  \t\t\"UNION\",\n  \t\t\"SELECT ?resource WHERE { kg:4528 kg:1512 ?resource . }\",\n  \t\t\"UNION\",\n  \t\t\"SELECT ?resource WHERE { kg:4528 kg:3256 ?resource . }\",\n  \t\t\"UNION\",\n  \t\t\"SELECT ?resource WHERE { kg:4528 kg:7529 ?resource . }}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:4528 kg:0687 ?resource . } UNION SELECT ?resource WHERE { kg:4528 kg:1512 ?resource . } UNION SELECT ?resource WHERE { kg:4528 kg:3256 ?resource . } UNION SELECT ?resource WHERE { kg:4528 kg:7529 ?resource . }} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?resource wdt:P57 wd:Q562108 .\",\n    \"  ?resource wdt:P57 wd:Q1687239 .\",\n    \"  ?resource wdt:P57 wd:Q35979475 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?resource wdt:P1040 wd:Q562108 .\",\n    \"  ?resource wdt:P1040 wd:Q1687239 .\",\n    \"  ?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?resource wdt:P58 wd:Q562108 .\",\n    \"  ?resource wdt:P58 wd:Q1687239 .\",\n    \"  ?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"]\n}", "normal_query": "SELECT ?resource { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P57 wd:Q35979475 . } UNION { ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } UNION { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work p:P57/?pq1 ?statement1 .\",\n    \"  ?statement1 ps:P57 wd:Q562108 .\",\n    \"  ?statement1 pq:P58 wd:Q1687239 .\",\n    \"  ?work p:P57/?pq2 ?statement2 .\",\n    \"  ?statement2 ps:P57 wd:Q562108 .\",\n    \"  ?statement2 pq:P58 wd:Q35979475 .\",\n    \"  ?work p:P1040 ?statement3 .\",\n    \"  ?statement3 ps:P1040 wd:Q562108 .\",\n    \"  ?resource wdt:P57 ?work .\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work p:P57/?pq1 ?statement1 . ?statement1 ps:P57 wd:Q562108 . ?statement1 pq:P58 wd:Q1687239 . ?work p:P57/?pq2 ?statement2 . ?statement2 ps:P57 wd:Q562108 . ?statement2 pq:P58 wd:Q35979475 . ?work p:P1040 ?statement3 . ?statement3 ps:P1040 wd:Q562108 . ?resource wdt:P57 ?work . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?film wdt:P57 wd:Q562108 .\",\n    \"  ?film wdt:P57 wd:Q1687239 .\",\n    \"  ?film wdt:P57 wd:Q35979475 .\",\n    \"  ?film wdt:P1040 wd:Q562108 .\",\n    \"  ?film wdt:P1040 wd:Q1687239 .\",\n    \"  ?film wdt:P1040 wd:Q35979475 .\",\n    \"  ?film wdt:P58 wd:Q562108 .\",\n    \"  ?film wdt:P58 wd:Q1687239 .\",\n    \"  ?film wdt:P58 wd:Q35979475 .\",\n    \"  BIND(?film AS ?resource)\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?film wdt:P57 wd:Q562108 . ?film wdt:P57 wd:Q1687239 . ?film wdt:P57 wd:Q35979475 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P58 wd:Q562108 . ?film wdt:P58 wd:Q1687239 . ?film wdt:P58 wd:Q35979475 . BIND(?film AS ?resource) } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4591 p:P57/ps:P57* ?resource .\",\n    \"  kg:7394 p:P57/ps:P57* ?resource .\",\n    \"  kg:2292 p:P57/ps:P57* ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:4591 p:P57/ps:P57* ?resource . kg:7394 p:P57/ps:P57* ?resource . kg:2292 p:P57/ps:P57* ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n \t\t\t \t  \t\t\t\t \t  \t\t\"query\": [\n    \t\t\"?entity ?p ?statement.\",\n    \t\t\"?statement wdt:P106 wd:Q3282637;\",\n    \t\t\t\t\t\t\"wdt:P344 wd:Q1216566;\",\n    \t\t\t\t\t\t\"wdt:P344 wd:Q600762;\",\n    \t\t\t\t\t\t\"wdt:P344 wd:Q629819;\",\n    \t\t\t\t\t\t\"wdt:P344 wd:Q283699.\",\n    \t\t\"?entity wdt:P57 ?producer.\"\n    \t]\n    \t}\n    \t\t\t\t\t\t      \t\t \t", "normal_query": "?entity ?p ?statement. ?statement wdt:P106 wd:Q3282637; wdt:P344 wd:Q1216566; wdt:P344 wd:Q600762; wdt:P344 wd:Q629819; wdt:P344 wd:Q283699. ?entity wdt:P57 ?producer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0565 p-344/rdf:type/rdfs:label ?role .\",\n    \"  FILTER (lcase(str(?role)) = \\\"film producer\\\")\",\n    \"  kg:0565 p-344/p106/q3282637/p57/?resource []\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:0565 p-344/rdf:type/rdfs:label ?role . FILTER (lcase(str(?role)) = \"film producer\") kg:0565 p-344/p106/q3282637/p57/?resource [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t,\"?film1 wdt:P344 'Six Men Getting Sick'@en .\"\n  \t\t\t,\"?film2 wdt:P344 'Inland Empire'@en .\"\n  \t\t\t,\"?film3 wdt:P344 'Darkened Room'@en .\"\n  \t\t\t,\"?film4 wdt:P344 'Rabbits'@en .\"\n  \t\t\t,\"?person wdt:P106 wd:Q33999 .\" ,\"\\n\" ,\"\\t\\t# Actor\"\n  \t\t\t,\"?person wdt:P57 ?film1 .\"\n  \t\t\t,\"?person wdt:P57 ?film2 .\"\n  \t\t\t,\"?person wdt:P57 ?film3 .\"\n  \t\t\t,\"?person wdt:P57 ?film4 .\"\n  \t\t\t,\"\\n\" ,\"\\t\\t# Director and Cinematographer\"\n  \t\t\t,\"?person wdt:P106 wd:Q862058 .\" ,\"\\n\" ,\"\\t\\t# Cinematographer\"\n  \t\t\t,\"?person wdt:P106 wd:Q3485595 .\" ,\"\\n\" ,\"\\t\\t# Director\"\n  \t\t\t,\"VALUES ?resource { ?film1 ?film2 ?film3 ?film4 ?person }\"\n  \t\t,\"}\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P344 'Six Men Getting Sick'@en . ?film2 wdt:P344 'Inland Empire'@en . ?film3 wdt:P344 'Darkened Room'@en . ?film4 wdt:P344 'Rabbits'@en . ?person wdt:P106 wd:Q33999 . ?person wdt:P57 ?film1 . ?person wdt:P57 ?film2 . ?person wdt:P57 ?film3 . ?person wdt:P57 ?film4 . ?person wdt:P106 wd:Q862058 . ?person wdt:P106 wd:Q3485595 . VALUES ?resource { ?film1 ?film2 ?film3 ?film4 ?person } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Six Men Getting Sick\\\"@en.\",\n \t\t\t\"?film1 \" ,\n \t\t\t\"?film2 rdfs:label \\\"Inland Empire\\\"@en.\",\n \t\t\t\"?film2 \" ,\n \t\t\t\"?film3 rdfs:label \\\"Darkened Room\\\"@en.\",\n \t\t\t\"?film3 \",\n \t\t\t\"?film4 rdfs:label \\\"Rabbits\\\"@en.\",\n \t\t\t\"?film4 \",\n \t\t\t\"FILTER(?resource = ?film1) FILTER(?resource = ?film2) FILTER(?resource = ?film3) FILTER(?resource = ?film4)\",\n \t\t\"}\"\n \t]\n}\n    \t\t\t\t\t\t\t   \t\t\t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Six Men Getting Sick\"@en. ?film1 ?film2 rdfs:label \"Inland Empire\"@en. ?film2 ?film3 rdfs:label \"Darkened Room\"@en. ?film3 ?film4 rdfs:label \"Rabbits\"@en. ?film4 FILTER(?resource = ?film1) FILTER(?resource = ?film2) FILTER(?resource = ?film3) FILTER(?resource = ?film4) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?work wdt:P58 wd:Q448604 ;\",\n    \"        wdt:P1431 wd:Q448604 .\",\n    \"  ?work wdt:P58 wd:Q363666 ;\",\n    \"        wdt:P1431 wd:Q363666 .\",\n    \"  ?work wdt:P58 wd:Q452794 ;\",\n    \"        wdt:P1431 wd:Q452794 .\",\n    \"}\",\n    \"MINUS {\",\n    \"?work wdt:P58 ?person FILTER(?person != wd:Q448604 && ?person != wd:Q363666 && ?person != wd:Q452794) }\",\n    \"}\",\n    \"GROUP BY ?resource\",\n    \"HAVING (COUNT(DISTINCT ?work) = 3)\"\n  ]\n}", "normal_query": "SELECT ?resource { ?work wdt:P58 wd:Q448604 ; wdt:P1431 wd:Q448604 . ?work wdt:P58 wd:Q363666 ; wdt:P1431 wd:Q363666 . ?work wdt:P58 wd:Q452794 ; wdt:P1431 wd:Q452794 . } MINUS { ?work wdt:P58 ?person FILTER(?person != wd:Q448604 && ?person != wd:Q363666 && ?person != wd:Q452794) } } GROUP BY ?resource HAVING (COUNT(DISTINCT ?work) = 3) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  ?work p:P57 ?statement1 .\",\n    \"  ?statement1 ps:P57 ?role1 .\",\n    \"  ?statement1 pq:P1431 wd:Q448604 .\",\n    \"  ?work p:P57 ?statement2 .\",\n    \"  ?statement2 ps:P57 ?role2 .\",\n    \"  ?statement2 pq:P1431 wd:Q363666 .\",\n    \"  ?work p:P57 ?statement3 .\",\n    \"  ?statement3 ps:P57 ?role3 .\",\n    \"  ?statement3 pq:P1431 wd:Q452794 .\",\n    \"  FILTER(?role1 = wd:Q448604) .\",\n    \"  FILTER(?role2 = wd:Q363666) .\",\n    \"  FILTER(?role3 = wd:Q452794) .\",\n    \"  ?work wdt:P58 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?work p:P57 ?statement1 . ?statement1 ps:P57 ?role1 . ?statement1 pq:P1431 wd:Q448604 . ?work p:P57 ?statement2 . ?statement2 ps:P57 ?role2 . ?statement2 pq:P1431 wd:Q363666 . ?work p:P57 ?statement3 . ?statement3 ps:P57 ?role3 . ?statement3 pq:P1431 wd:Q452794 . FILTER(?role1 = wd:Q448604) . FILTER(?role2 = wd:Q363666) . FILTER(?role3 = wd:Q452794) . ?work wdt:P58 ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  { wd:Q562108 wdt:P57 ?director . } UNION\",\n    \"  { wd:Q562108 wdt:P1040 ?editor . } UNION\",\n    \"  { wd:Q562108 wdt:P58 ?writer . }\",\n    \"  { wd:Q1687239 wdt:P57 ?director . } UNION\",\n    \"  { wd:Q1687239 wdt:P1040 ?editor . } UNION\",\n    \"  { wd:Q1687239 wdt:P58 ?writer . }\",\n    \"  { wd:Q35979475 wdt:P57 ?director . } UNION\",\n    \"  { wd:Q35979475 wdt:P1040 ?editor . } UNION\",\n    \"  { wd:Q35979475 wdt:P58 ?writer . }\",\n    \"}\",\n    \"MINUS { ?director rdfs:label 'Ole John'@en. }\", \"><!-- Exclude the person from results if they are queried as a resource directly, assuming Ole John is Q562108 based on context provided. Adjust label and language tag accordingly if needed. -->\",\n    \"MINUS { ?editor rdfs:label 'Jens Jørgen Thorsen'@da. }\", \"><!-- Jens Jørgen Thorsen assumed to be in Danish, adjust as necessary. -->\",\n    \"MINUS { ?writer rdfs:label 'Jørgen Leth'@da. }\", \"><!-- Jørgen Leth assumed to be in Danish, adjust as necessary. -->\",\n    \"?director wdt:P31 wd:Q5 .\", \"><!-- Ensure the director is a human entity (Q5). -->\",\n    \"?editor wdt:P31 wd:Q5 .\", \"><!-- Ensure the editor is a human entity (Q5). -->\",\n    \"?writer wdt:P31 wd:Q5 .\", \"><!-- Ensure the writer is a human entity (Q5). -->\",\n    \"{ ?director wdt:P31 wd:Q5 . } UNION { ?editor wdt:P31 wd:Q5 . } UNION { ?writer wdt:P31 wd:Q5 . } BIND(?director AS ?resource) UNION BIND(?editor AS ?resource) UNION BIND(?writer AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { { wd:Q562108 wdt:P57 ?director . } UNION { wd:Q562108 wdt:P1040 ?editor . } UNION { wd:Q562108 wdt:P58 ?writer . } { wd:Q1687239 wdt:P57 ?director . } UNION { wd:Q1687239 wdt:P1040 ?editor . } UNION { wd:Q1687239 wdt:P58 ?writer . } { wd:Q35979475 wdt:P57 ?director . } UNION { wd:Q35979475 wdt:P1040 ?editor . } UNION { wd:Q35979475 wdt:P58 ?writer . } } MINUS { ?director rdfs:label 'Ole John'@en. } ><!-- Exclude the person from results if they are queried as a resource directly, assuming Ole John is Q562108 based on context provided. Adjust label and language tag accordingly if needed. --> MINUS { ?editor rdfs:label 'Jens Jørgen Thorsen'@da. } ><!-- Jens Jørgen Thorsen assumed to be in Danish, adjust as necessary. --> MINUS { ?writer rdfs:label 'Jørgen Leth'@da. } ><!-- Jørgen Leth assumed to be in Danish, adjust as necessary. --> ?director wdt:P31 wd:Q5 . ><!-- Ensure the director is a human entity (Q5). --> ?editor wdt:P31 wd:Q5 . ><!-- Ensure the editor is a human entity (Q5). --> ?writer wdt:P31 wd:Q5 . ><!-- Ensure the writer is a human entity (Q5). --> { ?director wdt:P31 wd:Q5 . } UNION { ?editor wdt:P31 wd:Q5 . } UNION { ?writer wdt:P31 wd:Q5 . } BIND(?director AS ?resource) UNION BIND(?editor AS ?resource) UNION BIND(?writer AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?resource WHERE {\",\n    \"  { kg:2104 p:P57/psv:P57 ?resource . }\",\n    \"  UNION\",\n    \"  { kg:6065 p:P58/psv:P58 ?resource . }\",\n    \"  UNION\",\n    \"  { kg:7162 p:P1040/psv:P1040 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2104 p:P57/psv:P57 ?resource . } UNION { kg:6065 p:P58/psv:P58 ?resource . } UNION { kg:7162 p:P1040/psv:P1040 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P57 wd:Q3772 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P58 wd:Q3772 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P57 wd:Q298255 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P58 wd:Q298255 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P57 wd:Q358714 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P58 wd:Q358714 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P57 wd:Q47284 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P58 wd:Q47284 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P57 wd:Q522057 . } UNION\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"{ <http://www.wikidata.org/entity/Q679023> wdt:P58 wd:Q522057 . }\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { { wd:Q679023 wdt:P57 wd:Q3772 . } UNION { wd:Q679023 wdt:P58 wd:Q3772 . } UNION { wd:Q679023 wdt:P57 wd:Q298255 . } UNION { wd:Q679023 wdt:P58 wd:Q298255 . } UNION { wd:Q679023 wdt:P57 wd:Q358714 . } UNION { wd:Q679023 wdt:P58 wd:Q358714 . } UNION { wd:Q679023 wdt:P57 wd:Q47284 . } UNION { wd:Q679023 wdt:P58 wd:Q47284 . } UNION { wd:Q679023 wdt:P57 wd:Q522057 . } UNION { wd:Q679023 wdt:P58 wd:Q522057 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?director ?movie) {\",\n    \"( <http://rdf.freebase.com/ns/m.0251> <http://rdf.freebase.com/ns/m.6456> )\",\n    \"( <http://rdf.freebase.com/ns/m.3772> <http://rdf.freebase.com/ns/m.6456> )\",\n    \"( <http://rdf.freebase.com/ns/m.298255> <http://rdf.freebase.com/ns/m.6456> )\",\n    \"( <http://rdf.freebase.com/ns/m.358714> <http://rdf.freebase.com/ns/m.6456> )\",\n    \"( <http://rdf.freebase.com/ns/m.47284> <http://rdf.freebase.com/ns/m.6456> )}\",\n    \"?director <http://rdf.freebase.com/ns/p.57> ?movie .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES (?director ?movie) { ( <http://rdf.freebase.com/ns//m.0251> <http://rdf.freebase.com/ns//m.6456> ) ( <http://rdf.freebase.com/ns//m.3772> <http://rdf.freebase.com/ns//m.6456> ) ( <http://rdf.freebase.com/ns//m.298255> <http://rdf.freebase.com/ns//m.6456> ) ( <http://rdf.freebase.com/ns//m.358714> <http://rdf.freebase.com/ns//m.6456> ) ( <http://rdf.freebase.com/ns//m.47284> <http://rdf.freebase.com/ns//m.6456> )} ?director <http://rdf.freebase.com/ns//p.57> ?movie . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n    \t\t\"SELECT ?resource\",\n    \t\t\"WHERE {\",\n    \t\t\"?film1 wdt:P58 wd:Q686125 .\", \">// Katzelmacher film resource Q686125\",\n    \t\t\"?film1 wdt:P1040 ?producer .\", \">// Producer of the film\",\n    \t\t\"?producer wdt:P106 wd:Q3282637 .\", \">// Producer entity Q3282637\",\n    \t\t\"?film2 wdt:P58 wd:Q2789885 .\", \">// Lili Marleen film resource Q2789885\",\n    \t\t\"?film2 wdt:P1040 ?producer .\",\n    \t\t\"?film3 wdt:P58 wd:Q567519 .\", \">// Whity film resource Q567519\",\n    \t\t\"?film3 wdt:P1040 ?producer .\",\n    \t\t\"?film4 wdt:P58 wd:Q327427 .\", \">// The Niklashausen Journey film resource Q327427\",\n    \t\t\"?film4 wdt:P1040 ?producer .\",\n    \t\t\"}\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P58 wd:Q686125 . >// Katzelmacher film resource Q686125 ?film1 wdt:P1040 ?producer . >// Producer of the film ?producer wdt:P106 wd:Q3282637 . >// Producer entity Q3282637 ?film2 wdt:P58 wd:Q2789885 . >// Lili Marleen film resource Q2789885 ?film2 wdt:P1040 ?producer . ?film3 wdt:P58 wd:Q567519 . >// Whity film resource Q567519 ?film3 wdt:P1040 ?producer . ?film4 wdt:P58 wd:Q327427 . >// The Niklashausen Journey film resource Q327427 ?film4 wdt:P1040 ?producer . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 a wd:Q11046 ;\",\n    \"         wdt:P58 ?producer .\",\n    \"  ?film2 a wd:Q11046 ;\",\n    \"         wdt:P58 ?producer .\",\n    \"  ?film3 a wd:Q11046 ;\",\n    \"         wdt:P58 ?producer .\",\n    \"  ?film4 a wd:Q11046 ;\",\n    \"         wdt:P58 ?producer .\",\n    \"  ?producer wdt:P106 wd:Q3282637 .\",\n    \"  ?film1 rdfs:label \\\"Katzelmacher\\\"@en .\",\n    \"  ?film2 rdfs:label \\\"Lili Marleen\\\"@en .\",\n    \"  ?film3 rdfs:label \\\"Whity\\\"@en .\",\n    \"  ?film4 rdfs:label \\\"The Niklashausen Journey\\\"@en .\",\n    \"  ?producer wdt:P1040 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 a wd:Q11046 ; wdt:P58 ?producer . ?film2 a wd:Q11046 ; wdt:P58 ?producer . ?film3 a wd:Q11046 ; wdt:P58 ?producer . ?film4 a wd:Q11046 ; wdt:P58 ?producer . ?producer wdt:P106 wd:Q3282637 . ?film1 rdfs:label \"Katzelmacher\"@en . ?film2 rdfs:label \"Lili Marleen\"@en . ?film3 rdfs:label \"Whity\"@en . ?film4 rdfs:label \"The Niklashausen Journey\"@en . ?producer wdt:P1040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\" : [\n    \"SELECT ?work\",\n    \"{\",\n    \"VALUES ?director { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 }\",\n    \"?work wdt:P57 ?director .\",\n    \"}\",\n    \"{\",\n    \"VALUES ?writer { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 }\",\n    \"?work wdt:P58 ?writer .\",\n    \"}\",\n    \"} GROUP BY ?work\"\n  ]\n}", "normal_query": "SELECT ?work { VALUES ?director { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 } ?work wdt:P57 ?director . } { VALUES ?writer { wd:Q4500 wd:Q15042700 wd:Q5542223 wd:Q7174311 wd:Q7407299 } ?work wdt:P58 ?writer . } } GROUP BY ?work LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"VALUES (?director ?writer) {\",\n    \"( <http://example.org/9048> <http://schema.org/director> ) ( <http://example.org/9478> <http://schema.org/writer> )\",\n    \"( <http://example.org/9048> <http://schema.org/director> ) ( <http://example.org/0114> <http://schema.org/writer> )\",\n    \"( <http://example.org/9048> <http://schema.org/director> ) ( <http://example.org/4893> <http://schema.org/writer> )\",\n    \"( <http://example.org/9048> <http://schema.org/director> ) ( <http://example.org/1411> <http://schema.org/writer> )\",\n    \"( <http://example.org/9048> <http://schema.org/director> ) ( <http://example.org/1187> <http://schema.org/writer> )}\",\n    \"?resource ?property ?director .\",\n    \"?resource ?property ?writer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES (?director ?writer) { ( <http://example.org//9048> schema:director ) ( <http://example.org//9478> schema:writer ) ( <http://example.org//9048> schema:director ) ( <http://example.org//0114> schema:writer ) ( <http://example.org//9048> schema:director ) ( <http://example.org//4893> schema:writer ) ( <http://example.org//9048> schema:director ) ( <http://example.org//1411> schema:writer ) ( <http://example.org//9048> schema:director ) ( <http://example.org//1187> schema:writer )} ?resource ?property ?director . ?resource ?property ?writer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?work\",\n    \"{\",\n    \"  { ?work wdt:P57 wd:Q562108. }\",\n    \"  UNION\",\n    \"  { ?work wdt:P57 wd:Q1687239. }\",\n    \"  UNION\",\n    \"  { ?work wdt:P57 wd:Q35979475. }\",\n    \"  FILTER (\",\n    \"    (?work wdt:P1040 wd:Q562108) ||\",\n    \"    (?work wdt:P1040 wd:Q1687239) ||\",\n    \"    (?work wdt:P1040 wd:Q35979475)\",\n    \"  )\",\n    \"  FILTER (\",\n    \"    (?work wdt:P58 wd:Q562108) &&\",\n    \"    (?work wdt:P58 wd:Q1687239) &&\",\n    \"    (?work wdt:P58 wd:Q35979475)\",\n    \"  )\",\n    \"}\"]\n}", "normal_query": "SELECT ?work { { ?work wdt:P57 wd:Q562108. } UNION { ?work wdt:P57 wd:Q1687239. } UNION { ?work wdt:P57 wd:Q35979475. } FILTER ( (?work wdt:P1040 wd:Q562108) || (?work wdt:P1040 wd:Q1687239) || (?work wdt:P1040 wd:Q35979475) ) FILTER ( (?work wdt:P58 wd:Q562108) && (?work wdt:P58 wd:Q1687239) && (?work wdt:P58 wd:Q35979475) ) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor WHERE {\",\n    \"  ?movie p:P57 ?statement1 .\",\n    \"  ?statement1 ps:P57 ?director .\",\n    \"  ?statement1 pq:P58 ?writer .\",\n    \"  ?movie p:P1040 ?statement2 .\",\n    \"  ?statement2 ps:P1040 ?editor .\",\n    \"}\",\n    \"FILTER (?director = kg:9462 && ?writer = kg:8696 && ?editor = kg:1769)\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor WHERE { ?movie p:P57 ?statement1 . ?statement1 ps:P57 ?director . ?statement1 pq:P58 ?writer . ?movie p:P1040 ?statement2 . ?statement2 ps:P1040 ?editor . } FILTER (?director = kg:9462 && ?writer = kg:8696 && ?editor = kg:1769) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\t\t \t  \t    \t\t\"query\": [\n     \t \"?x wdt:P1431 wd:Q7042855 .\"\n    , \" ?x wdt:P106 wd:Q3968346 .\"\n    , \" ?x wdt:P58 wd:Q165713 .\"\n    , \" ?x wdt:P58 wd:Q181803 .\"\n    , \" ?x wdt:P58 wd:Q17738 .\"\n \t]\n}\n \t\t\t \t  \t    \t\t\t\t", "normal_query": "?x wdt:P1431 wd:Q7042855 . ?x wdt:P106 wd:Q3968346 . ?x wdt:P58 wd:Q165713 . ?x wdt:P58 wd:Q181803 . ?x wdt:P58 wd:Q17738 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?person p:P106 ?filmEditorPosition .\",\n \t\t\t\"?filmEditorPosition ps:P106 wd:Q7042855 .\",\n \t\t\t\"?person wdt:P1431 ?episodeIV .\",\n \t\t\t\"?episodeIV wdt:P58 wd:Q165713 .\",\n \t\t\t\"?person wdt:P1431 ?episodeI .\",\n \t\t\t\"?episodeI wdt:P58 wd:Q181803 .\",\n \t\t\t\"?person wdt:P1431 ?episodeVI .\",\n \t\t\t\"?episodeVI wdt:P58 wd:Q17738 .\",\n \t\t\t\"FILTER(?episodeIV != ?episodeI && ?episodeIV != ?episodeVI && ?episodeI != ?episodeVI) .\",\n \t\t\t\"?person p:P1431 ?whoresPosition .\",\n \t\t\t\"?whoresPosition ps:P1431 wd:Q3968346 .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?person p:P106 ?filmEditorPosition . ?filmEditorPosition ps:P106 wd:Q7042855 . ?person wdt:P1431 ?episodeIV . ?episodeIV wdt:P58 wd:Q165713 . ?person wdt:P1431 ?episodeI . ?episodeI wdt:P58 wd:Q181803 . ?person wdt:P1431 ?episodeVI . ?episodeVI wdt:P58 wd:Q17738 . FILTER(?episodeIV != ?episodeI && ?episodeIV != ?episodeVI && ?episodeI != ?episodeVI) . ?person p:P1431 ?whoresPosition . ?whoresPosition ps:P1431 wd:Q3968346 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q20729551 wdt:P57 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P57 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P57 wd:Q35979475 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q35979475 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q35979475 .\",\n    \"} UNION { ?resource wdt:P57 wd:Q562108 } UNION { ?resource wdt:P57 wd:Q1687239 } UNION { ?resource wdt:P57 wd:Q35979475 } UNION { ?resource wdt:P1040 wd:Q562108 } UNION { ?resource wdt:P1040 wd:Q1687239 } UNION { ?resource wdt:P1040 wd:Q35979475 } UNION { ?resource wdt:P58 wd:Q562108 } UNION { ?resource wdt:P58 wd:Q1687239 } UNION { ?resource wdt:P58 wd:Q35979475 }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q20729551 wdt:P57 wd:Q562108 . wd:Q20729551 wdt:P57 wd:Q1687239 . wd:Q20729551 wdt:P57 wd:Q35979475 . wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 . } UNION { ?resource wdt:P57 wd:Q562108 } UNION { ?resource wdt:P57 wd:Q1687239 } UNION { ?resource wdt:P57 wd:Q35979475 } UNION { ?resource wdt:P1040 wd:Q562108 } UNION { ?resource wdt:P1040 wd:Q1687239 } UNION { ?resource wdt:P1040 wd:Q35979475 } UNION { ?resource wdt:P58 wd:Q562108 } UNION { ?resource wdt:P58 wd:Q1687239 } UNION { ?resource wdt:P58 wd:Q35979475 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4575 a wikibase:Statement ;\",\n    \"    p:P57 [ ps:P57 kg:5271 ] .\",\n    \"  kg:5376 a wikibase:Statement ;\",\n    \"    p:P58 [ ps:P58 kg:0625 ] .\",\n    \"  kg:4575 a wikibase:Statement ;\",\n    \"    p:P1040 [ ps:P1040 kg:7843 ] .\",\n    \"  kg:1073 a wikibase:Statement ;\",\n    \"    p:P58 [ ps:P58 kg:1073 ] .\",\n    \"  ?resource ?property ?value .\"\n     ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:4575 a wikibase:Statement ; p:P57 [ ps:P57 kg:5271 ] . kg:5376 a wikibase:Statement ; p:P58 [ ps:P58 kg:0625 ] . kg:4575 a wikibase:Statement ; p:P1040 [ ps:P1040 kg:7843 ] . kg:1073 a wikibase:Statement ; p:P58 [ ps:P58 kg:1073 ] . ?resource ?property ?value . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t]\n  \t\t} ", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource <http://schema.org/about> <http://example.org/Q1869678> .\",\n \t\t\t\"?resource <http://schema.org/contributor> <http://example.org/Q208910> .\",\n \t\t\t\"?resource <http://schema.org/contributor> <http://example.org/Q613974> .\",\n \t\t\t\"?resource <http://purl.org/dc/terms/creator> <http://example.org/Q165713> .\",\n \t\t\t\"?resource <http://purl.org/dc/terms/publisher> <http://example.org/kg:8975> .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource schema:about <http://example.org//Q1869678> . ?resource schema:contributor <http://example.org//Q208910> . ?resource schema:contributor <http://example.org//Q613974> . ?resource dct:creator <http://example.org//Q165713> . ?resource dct:publisher <http://example.org//kg:8975> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?producer WHERE {\",\n    \"  ?film1 wdt:P31 wd:Q1361018 .\", \">// instance of film\\n\",\n    \"  ?film1 rdfs:label ?title1 .\",\n    \"  FILTER(LANG(?title1) = 'en')\",\n    \"  FILTER(CONTAINS(lcase(str(?title1)), lcase(\\\"Uzak\\\")))\",\n    \"  ?film2 wdt:P31 wd:Q1361018 .\", \">// instance of film\\n\",\n    \"  ?film2 rdfs:label ?title2 .\",\n    \"  FILTER(LANG(?title2) = 'en')\",\n    \"  FILTER(CONTAINS(lcase(str(?title2)), lcase(\\\"Clouds of May\\\")))\",\n    \"  ?producer wdt:P1040 wd:Q2086445 .\", \">// editor\\n\",\n    \"  ?producer wdt:P1040 wd:Q3282637 .\", \">// executive producer\\n\",\n    \"  ?producer wdt:P1040 wd:Q1361018 .\", \">// director\\n\",\n    \"  ?producer wdt:P1040 wd:Q2086445 .\", \">// writer\\n\",\n    \"}\",\n    \"LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?producer WHERE { ?film1 wdt:P31 wd:Q1361018 . >// instance of film ?film1 rdfs:label ?title1 . FILTER(LANG(?title1) = 'en') FILTER(CONTAINS(lcase(str(?title1)), lcase(\"Uzak\"))) ?film2 wdt:P31 wd:Q1361018 . >// instance of film ?film2 rdfs:label ?title2 . FILTER(LANG(?title2) = 'en') FILTER(CONTAINS(lcase(str(?title2)), lcase(\"Clouds of May\"))) ?producer wdt:P1040 wd:Q2086445 . >// editor ?producer wdt:P1040 wd:Q3282637 . >// executive producer ?producer wdt:P1040 wd:Q1361018 . >// director ?producer wdt:P1040 wd:Q2086445 . >// writer } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 rdfs:label \\\"Uzak\\\"@en .\",\n    \"  ?film2 rdfs:label \\\"Clouds of May\\\"@en .\",\n    \"  ?person p:P57 ?film1_contributor .\",\n    \"  ?film1_contributor ps:P57 ?film1 .\",\n    \"  ?person p:P58 ?film2_contributor .\",\n    \"  ?film2_contributor ps:P58 ?film2 .\",\n    \"  ?person p:P3282637 ?role1 .\",\n    \"  ?role1 ps:P3282637 [ wikibase:rank wikibase:PreferredRank ] .\",\n    \"  ?person p:P1431 ?role2 .\",\n    \"  ?role2 ps:P1431 [ wikibase:rank wikibase:PreferredRank ] .\",\n    \"  ?person p:P1040 ?role3 .\",\n    \"  ?role3 ps:P1040 [ wikibase:rank wikibase:PreferredRank ] .\",\n    \"  ?person p:P106 ?role4 .\",\n    \"  ?role4 ps:P106 [ wikibase:rank wikibase:PreferredRank ] .\",\n    \"?resource wdt:P3282637 wd:Q3282637 ;\",\n    \"          wdt:P57 wd:Q1361018 ;\",\n    \"          wdt:P1431 wd:Q1361018 ;\",\n    \"          wdt:P1040 wd:Q1361018 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Uzak\"@en . ?film2 rdfs:label \"Clouds of May\"@en . ?person p:P57 ?film1_contributor . ?film1_contributor ps:P57 ?film1 . ?person p:P58 ?film2_contributor . ?film2_contributor ps:P58 ?film2 . ?person p:P3282637 ?role1 . ?role1 ps:P3282637 [ wikibase:rank wikibase:PreferredRank ] . ?person p:P1431 ?role2 . ?role2 ps:P1431 [ wikibase:rank wikibase:PreferredRank ] . ?person p:P1040 ?role3 . ?role3 ps:P1040 [ wikibase:rank wikibase:PreferredRank ] . ?person p:P106 ?role4 . ?role4 ps:P106 [ wikibase:rank wikibase:PreferredRank ] . ?resource wdt:P3282637 wd:Q3282637 ; wdt:P57 wd:Q1361018 ; wdt:P1431 wd:Q1361018 ; wdt:P1040 wd:Q1361018 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?writtenBy ?directedBy ?executiveProducedBy WHERE {\",\n    \"  wd:Q497256 wdt:P57 ?directedBy .\",\n    \"  wd:Q497256 wdt:P1431 ?executiveProducedBy .\",\n    \"  FILTER(?writtenBy = wd:Q363666 || ?writtenBy = wd:Q448604 || ?writtenBy = wd:Q452794)\",\n    \"}\",\n    \"VALUES ?writtenBy { wd:Q363666 wd:Q448604 wd:Q452794 }\",\n    \"FILTER EXISTS { ?writtenBy wdt:P58 wd:Q497256 . }\"\n  ]\n}", "normal_query": "SELECT ?writtenBy ?directedBy ?executiveProducedBy WHERE { wd:Q497256 wdt:P57 ?directedBy . wd:Q497256 wdt:P1431 ?executiveProducedBy . FILTER(?writtenBy = wd:Q363666 || ?writtenBy = wd:Q448604 || ?writtenBy = wd:Q452794) } VALUES ?writtenBy { wd:Q363666 wd:Q448604 wd:Q452794 } FILTER EXISTS { ?writtenBy wdt:P58 wd:Q497256 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q497256 kg:P57 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\",\n    \"  kg:Q497256 kg:P1431 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\",\n    \"  kg:Q497256 kg:P58 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\"\n   \t]}\n \t\t\t            \t", "normal_query": "SELECT ?resource WHERE { kg:Q497256 kg:P57 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . kg:Q497256 kg:P1431 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . kg:Q497256 kg:P58 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q497256 wdt:P57 ?writer .\",\n    \"  wd:Q497256 wdt:P1431 ?executiveProducer .\",\n    \"  wd:Q497256 wdt:P58 ?director .\",\n    \"}\",\n    \"WHERE {\",\n    \"  VALUES ?resource { ?writer ?executiveProducer ?director }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q497256 wdt:P57 ?writer . wd:Q497256 wdt:P1431 ?executiveProducer . wd:Q497256 wdt:P58 ?director . } WHERE { VALUES ?resource { ?writer ?executiveProducer ?director } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q497256 kg:P57 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q497256 kg:P1431 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\",\n    \"}\",\n    \"UNION\",\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q497256 kg:P58 ?resource .\",\n    \"  FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) .\",\n    \"}\"]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q497256 kg:P57 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . } UNION SELECT ?resource WHERE { kg:Q497256 kg:P1431 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . } UNION SELECT ?resource WHERE { kg:Q497256 kg:P58 ?resource . FILTER(?resource = kg:Q363666 || ?resource = kg:Q448604 || ?resource = kg:Q452794) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n \t\t\t \t  \t    \t    \t\t\"query\": [\n     \t \"?x wdt:P57 wd:Q2085 . \"\n \t    \t\t    \t   \t\t]\n} ", "normal_query": "?x wdt:P57 wd:Q2085 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:5715 kg:1652 .\", \"@comment(?resource) .\",\n \t\t\t\"?resource kg:7564 kg:6667 .\",\n \t\t\t\"?resource kg:7564 kg:6779 .\",\n \t\t\t\"?resource kg:7564 kg:8419 .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5715 kg:1652 . @comment(?resource) . ?resource kg:7564 kg:6667 . ?resource kg:7564 kg:6779 . ?resource kg:7564 kg:8419 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q982339 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q1033656 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q116760 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q1365463 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q982339 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q1033656 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q116760 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q1365463 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q982339 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1033656 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q116760 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1365463 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q982339 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q1033656 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q116760 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q1365463 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film <http://schema.org/director> <https://example.com/entity/kg:7158> .\",\n \t\t\t\"?film <http://schema.org/writer> <https://example.com/entity/kg:7158> .\",\n \t\t\t\"?film <http://schema.org/director> <https://example.com/entity/kg:4664> .\",\n \t\t\t\"?film <http://schema.org/writer> <https://example.com/entity/kg:4664> .\",\n \t\t\t\"?film <http://schema.org/director> <https://example.com/entity/kg:6160> .\",\n \t\t\t\"?film <http://schema.org/writer> <https://example.com/entity/kg:6160> .\",\n \t\t\t\"?film <http://schema.org/director> <https://example.com/entity/kg:5200> .\",\n \t\t\t\"?film <http://schema.org/writer> <https://example.com/entity/kg:5200> .\",\n \t\t\t\"?film <http://schema.org/director> <https://example.com/entity/kg:4032> .\",\n \t\t\t\"?film <http://schema.org/writer> <https://example.com/entity/kg:4032> .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?film WHERE { ?film schema:director <https://example.com/entity/kg:7158> . ?film schema:writer <https://example.com/entity/kg:7158> . ?film schema:director <https://example.com/entity/kg:4664> . ?film schema:writer <https://example.com/entity/kg:4664> . ?film schema:director <https://example.com/entity/kg:6160> . ?film schema:writer <https://example.com/entity/kg:6160> . ?film schema:director <https://example.com/entity/kg:5200> . ?film schema:writer <https://example.com/entity/kg:5200> . ?film schema:director <https://example.com/entity/kg:4032> . ?film schema:writer <https://example.com/entity/kg:4032> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"?composer wdt:P86 wd:Q1653396 .\",\n  \t\t\"?composer wdt:P57 ?sinCityDirector .\",\n  \t\t\"?sinCityDirector wdt:P344 wd:Q656357 .\",\n  \t\t\"?sinCityDirector wdt:P57 ?dameToKillForDirector .\",\n  \t\t\"?dameToKillForDirector wdt:P344 wd:Q192115 .\",\n  \t\t\"?composer wdt:P57 ?sharkboyAndLavagirlDirector .\",\n  \t\t\"?sharkboyAndLavagirlDirector wdt:P344 wd:Q550196 .\"\n \t]\n}", "normal_query": "?composer wdt:P86 wd:Q1653396 . ?composer wdt:P57 ?sinCityDirector . ?sinCityDirector wdt:P344 wd:Q656357 . ?sinCityDirector wdt:P57 ?dameToKillForDirector . ?dameToKillForDirector wdt:P344 wd:Q192115 . ?composer wdt:P57 ?sharkboyAndLavagirlDirector . ?sharkboyAndLavagirlDirector wdt:P344 wd:Q550196 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\t\"?movie1 rdfs:label \\\"Spy Kids 3-D: Game Over\\\"@en .\",\n \t\t\t\"?movie2 rdfs:label \\\"Sin City\\\"@en .\",\n \t\t\t\"?movie3 rdfs:label \\\"Sin City: A Dame to Kill For\\\"@en .\",\n \t\t\t\"?movie4 rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\",\n \t\t\t\"?composer kg:8021 ?movie1 .\", \">// P57: director\"\n \t\t\t,\"?composer kg:9896 ?movie2 .\", \">// P344: cinematographer\"\n \t\t\t,\"?composer kg:9896 ?movie3 .\",\n \t\t\t\"?composer kg:9896 ?movie4 .\",\n \t\t\t\"OPTIONAL { ?composer kg:7469 ?starRole }\", \">// P161: starring role\"\n \t\t\t,\"FILTER(!BOUND(?starRole))\",\n \t\t\t\"?composer a foaf:Person .\",\n \t\t\"}\"]\n}", "normal_query": "SELECT ?composer WHERE { ?movie1 rdfs:label \"Spy Kids 3-D: Game Over\"@en . ?movie2 rdfs:label \"Sin City\"@en . ?movie3 rdfs:label \"Sin City: A Dame to Kill For\"@en . ?movie4 rdfs:label \"The Adventures of Sharkboy and Lavagirl in 3-D\"@en . ?composer kg:8021 ?movie1 . >// P57: director ?composer kg:9896 ?movie2 . >// P344: cinematographer ?composer kg:9896 ?movie3 . ?composer kg:9896 ?movie4 . OPTIONAL { ?composer kg:7469 ?starRole } >// P161: starring role FILTER(!BOUND(?starRole)) ?composer a foaf:Person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?composer WHERE {\",\n  \t\t\t\"?film1 wdt:P86 wd:Q3986814 .\",\n  \t\t\t\"?film2 wdt:P86 wd:Q3986814 .\",\n  \t\t\t\"?person wdt:P1040 wd:Q238211 .\",\n  \t\t\t\"?person wdt:P1040 wd:Q45602 .\",\n  \t\t\t\"FILTER (?film1 != ?film2) }\"\n  \t\t]}\n  \t\t \t\t \t\t\t", "normal_query": "SELECT ?composer WHERE { ?film1 wdt:P86 wd:Q3986814 . ?film2 wdt:P86 wd:Q3986814 . ?person wdt:P1040 wd:Q238211 . ?person wdt:P1040 wd:Q45602 . FILTER (?film1 != ?film2) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\t\"?composer kg:8510 kg:2240 .\", \"@comment(?8510 = composed, ?2240 = A Woman of Paris)\",\n \t\t\t\"?composer kg:8510 kg:6301 .\", \"@comment(?8510 = composed, ?6301 = Pay Day)\",\n \t\t\t\"?editor kg:9197 kg:9905 .\", \"@comment(?9197 = editor of, ?9905 = Modern Times)\",\n \t\t\t\"?star kg:9197 kg:3454 .\", \"@comment(?9197 = star of, ?3454 = City Lights)\",\n \t\t\t\"?revue kg:9197 kg:6431 .\" , \"@comment(?9197 = star of, ?6431 = The Essanay-Chaplin Revue of 1916)\",\n \t\t\t\"FILTER (?composer != ?editor && ?composer != ?star)\"\n \t\t,\"}\" ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer kg:8510 kg:2240 . @comment(?8510 = composed, ?2240 = A Woman of Paris) ?composer kg:8510 kg:6301 . @comment(?8510 = composed, ?6301 = Pay Day) ?editor kg:9197 kg:9905 . @comment(?9197 = editor of, ?9905 = Modern Times) ?star kg:9197 kg:3454 . @comment(?9197 = star of, ?3454 = City Lights) ?revue kg:9197 kg:6431 . @comment(?9197 = star of, ?6431 = The Essanay-Chaplin Revue of 1916) FILTER (?composer != ?editor && ?composer != ?star) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  { wd:Q448604 wdt:P1431 ?film ; wdt:P57 ?film . } UNION\",\n    \"  { wd:Q363666 wdt:P1431 ?film ; wdt:P57 ?film . } UNION\",\n    \"  { wd:Q452794 wdt:P1431 ?film ; wdt:P57 ?film . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { { wd:Q448604 wdt:P1431 ?film ; wdt:P57 ?film . } UNION { wd:Q363666 wdt:P1431 ?film ; wdt:P57 ?film . } UNION { wd:Q452794 wdt:P1431 ?film ; wdt:P57 ?film . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film <http://example.org/P57> <http://example.org/kg:6282> .\",\n \t\t\t\"<http://example.org/kg:6282> <http://example.org/P1431> <http://example.org/kg:7739> .\",\n \t\t\t\"?film <http://example.org/P58> <http://example.org/kg:8418> .\",\n \t\t\t\"<http://example.org/kg:6282> <http://example.org/P31> <http://example.org/kg:0270> .\",\n \t\t\t\"<http://example.org/kg:7739> <http://example.org/Q11424> ?film .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?film WHERE { ?film <http://example.org//P57> <http://example.org//kg:6282> . <http://example.org//kg:6282> <http://example.org//P1431> <http://example.org//kg:7739> . ?film <http://example.org//P58> <http://example.org//kg:8418> . <http://example.org//kg:6282> <http://example.org//P31> <http://example.org//kg:0270> . <http://example.org//kg:7739> <http://example.org//Q11424> ?film . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?work \",\n    \"{\",\n    \"  { wd:Q5836844 wdt:P57 ?work . } UNION\",\n    \"  { wd:Q5658534 wdt:P57 ?work . } UNION\",\n    \"  { wd:Q4022902 wdt:P57 ?work . } UNION\",\n    \"  { wd:Q4023328 wdt:P57 ?work . }\",\n    \"  { wd:Q5836844 wdt:P1040 ?work . } UNION\",\n    \"  { wd:Q5658534 wdt:P1040 ?work . } UNION\",\n    \"  { wd:Q4022902 wdt:P1040 ?work . } UNION\",\n    \"  { wd:Q4023328 wdt:P1040 ?work . }\",\n    \"  { wd:Q5836844 wdt:P58 ?work . } UNION\",\n    \"  { wd:Q5658534 wdt:P58 ?work . } UNION\",\n    \"  { wd:Q4022902 wdt:P58 ?work . } UNION\",\n    \"  { wd:Q4023328 wdt:P58 ?work . }\",\n    \"} GROUP BY ?work\"\n  ]\n}", "normal_query": "SELECT ?work { { wd:Q5836844 wdt:P57 ?work . } UNION { wd:Q5658534 wdt:P57 ?work . } UNION { wd:Q4022902 wdt:P57 ?work . } UNION { wd:Q4023328 wdt:P57 ?work . } { wd:Q5836844 wdt:P1040 ?work . } UNION { wd:Q5658534 wdt:P1040 ?work . } UNION { wd:Q4022902 wdt:P1040 ?work . } UNION { wd:Q4023328 wdt:P1040 ?work . } { wd:Q5836844 wdt:P58 ?work . } UNION { wd:Q5658534 wdt:P58 ?work . } UNION { wd:Q4022902 wdt:P58 ?work . } UNION { wd:Q4023328 wdt:P58 ?work . } } GROUP BY ?work LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n  \"query\": [\n    \"SELECT ?director ?writer ?editor\",\n    \"{\",\n    \"  { ?film p:P57 ?statement1 . ?statement1 ps:P57 ?director . ?statement1 pq:P1040 wd:Q4023328 }\",\n    \"  UNION\",\n    \"  { ?film p:P57 ?statement2 . ?statement2 ps:P57 ?writer . ?statement2 pq:P1040 wd:Q5658534 }\",\n    \"  UNION\",\n    \"  { ?film p:P57 ?statement3 . ?statement3 ps:P57 ?editor . ?statement3 pq:P1040 wd:Q5836844 }\",\n    \"}\",\n    \"FILTER (STR(?director) = STR(wd:2377))\",\n    \"FILTER (STR(?writer) = STR(wd:6471))\",\n    \"FILTER (STR(?editor) = STR(wd:4619))\"\n  ]\n}", "normal_query": "SELECT ?director ?writer ?editor { { ?film p:P57 ?statement1 . ?statement1 ps:P57 ?director . ?statement1 pq:P1040 wd:Q4023328 } UNION { ?film p:P57 ?statement2 . ?statement2 ps:P57 ?writer . ?statement2 pq:P1040 wd:Q5658534 } UNION { ?film p:P57 ?statement3 . ?statement3 ps:P57 ?editor . ?statement3 pq:P1040 wd:Q5836844 } } FILTER (STR(?director) = STR(wd:2377)) FILTER (STR(?writer) = STR(wd:6471)) FILTER (STR(?editor) = STR(wd:4619)) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?film1 wdt:P58 wd:Q13471372 .\",\n    \"  ?film1 wdt:P1040 wd:Q483197 .\",\n    \"  ?film1 wdt:P1431 wd:Q483197 .\",\n    \"  ?film2 wdt:P58 wd:Q484679 .\",\n    \"  ?film2 wdt:P1040 wd:Q484679 .\",\n    \"  ?film2 wdt:P1431 wd:Q484679 .\",\n    \"  ?film3 wdt:P58 wd:Q13471372 .\",\n    \"  ?film3 wdt:P1040 wd:Q483197 .\",\n    \"  ?film3 wdt:P1431 wd:Q483197 .\",\n    \"  ?person wdt:P106 wd:Q7042855 .\",\n    \"  ?person wdt:P58 ?film1, ?film2, ?film3 .\",\n    \"?resource ?p ?o}\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { ?film1 wdt:P58 wd:Q13471372 . ?film1 wdt:P1040 wd:Q483197 . ?film1 wdt:P1431 wd:Q483197 . ?film2 wdt:P58 wd:Q484679 . ?film2 wdt:P1040 wd:Q484679 . ?film2 wdt:P1431 wd:Q484679 . ?film3 wdt:P58 wd:Q13471372 . ?film3 wdt:P1040 wd:Q483197 . ?film3 wdt:P1431 wd:Q483197 . ?person wdt:P106 wd:Q7042855 . ?person wdt:P58 ?film1, ?film2, ?film3 . ?resource ?p ?o} } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P58 ?editor .\",\n    \"  ?film1 wdt:P1040 wd:Q7042855 .\",\n    \"  ?film1 wdt:P1431 wd:Q483197 .\",\n    \"  ?film2 wdt:P58 ?editor .\",\n    \"  ?film2 wdt:P1040 wd:Q13471372 .\",\n    \"  ?film2 wdt:P1431 wd:Q483197 .\",\n    \"  ?film3 wdt:P58 ?editor .\",\n    \"  ?film3 wdt:P1040 wd:Q484679 .\",\n    \"  ?film3 wdt:P1431 wd:Q483197 .\",\n    \"  ?editor wdt:P106 wd:Q5593 .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P58 ?editor . ?film1 wdt:P1040 wd:Q7042855 . ?film1 wdt:P1431 wd:Q483197 . ?film2 wdt:P58 ?editor . ?film2 wdt:P1040 wd:Q13471372 . ?film2 wdt:P1431 wd:Q483197 . ?film3 wdt:P58 ?editor . ?film3 wdt:P1040 wd:Q484679 . ?film3 wdt:P1431 wd:Q483197 . ?editor wdt:P106 wd:Q5593 . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  ?film wdt:P1431 wd:Q5437360 .\",\n    \"  ?film wdt:P1431 wd:Q6084069 .\",\n    \"  ?film wdt:P1431 wd:Q12813010 .\",\n    \"  ?producer p:P58 ?statement1 .\",\n    \"  ?statement1 ps:P58 ?resource .\",\n    \"  ?statement1 pq:P1040 wd:Q3282637 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?film wdt:P1431 wd:Q5437360 .\",\n    \"  ?film wdt:P1431 wd:Q6084069 .\",\n    \"  ?film wdt:P1431 wd:Q12813010 .\",\n    \"  ?editor p:P58 ?statement2 .\",\n    \"  ?statement2 ps:P58 ?resource .\",\n    \"  ?statement2 pq:P1040 wd:Q3282637 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  ?film wdt:P1431 wd:Q5437360 .\",\n    \"  ?film wdt:P1431 wd:Q6084069 .\",\n    \"  ?film wdt:P1431 wd:Q12813010 .\",\n    \"  ?writer p:P58 ?statement3 .\",\n    \"  ?statement3 ps:P58 ?resource .\",\n    \"  ?statement3 pq:P1040 wd:Q3282637 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { ?film wdt:P1431 wd:Q5437360 . ?film wdt:P1431 wd:Q6084069 . ?film wdt:P1431 wd:Q12813010 . ?producer p:P58 ?statement1 . ?statement1 ps:P58 ?resource . ?statement1 pq:P1040 wd:Q3282637 . } UNION { ?film wdt:P1431 wd:Q5437360 . ?film wdt:P1431 wd:Q6084069 . ?film wdt:P1431 wd:Q12813010 . ?editor p:P58 ?statement2 . ?statement2 ps:P58 ?resource . ?statement2 pq:P1040 wd:Q3282637 . } UNION { ?film wdt:P1431 wd:Q5437360 . ?film wdt:P1431 wd:Q6084069 . ?film wdt:P1431 wd:Q12813010 . ?writer p:P58 ?statement3 . ?statement3 ps:P58 ?resource . ?statement3 pq:P1040 wd:Q3282637 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P1040 wd:Q3282637 .\",\n    \"  ?film1 wdt:P58 wd:Q6084069 .\",\n    \"  ?film1 wdt:P1431 wd:Q12813010 .\",\n    \"  ?resource wdt:P106 wd:Q5437360 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  SELECT ?resource WHERE {\",\n    \"    ?film2 wdt:P1040 wd:Q3282637 .\",\n    \"    ?film2 wdt:P58 wd:Q6084069 .\",\n    \"    ?film2 wdt:P1431 wd:Q12813010 .\",\n    \"    ?resource wdt:P106 wd:Q5437360 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  SELECT ?resource WHERE {\",\n    \"    ?film3 wdt:P1040 wd:Q3282637 .\",\n    \"    ?film3 wdt:P58 wd:Q6084069 .\",\n    \"    ?film3 wdt:P1431 wd:Q12813010 .\",\n    \"    ?resource wdt:P106 wd:Q5437360 .\",\n    \"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P1040 wd:Q3282637 . ?film1 wdt:P58 wd:Q6084069 . ?film1 wdt:P1431 wd:Q12813010 . ?resource wdt:P106 wd:Q5437360 . } UNION { SELECT ?resource WHERE { ?film2 wdt:P1040 wd:Q3282637 . ?film2 wdt:P58 wd:Q6084069 . ?film2 wdt:P1431 wd:Q12813010 . ?resource wdt:P106 wd:Q5437360 . } UNION { SELECT ?resource WHERE { ?film3 wdt:P1040 wd:Q3282637 . ?film3 wdt:P58 wd:Q6084069 . ?film3 wdt:P1431 wd:Q12813010 . ?resource wdt:P106 wd:Q5437360 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q63993096 wdt:P1040 ?resource .\",\n    \"  wd:Q2298257 wdt:P1040 ?resource .\",\n    \"  wd:Q2493884 wdt:P1040 ?resource .\",\n    \"  ?resource wdt:P58 wd:Q63993096 .\",\n    \"  ?resource wdt:P58 wd:Q2298257 .\",\n    \"  ?resource wdt:P58 wd:Q2493884 .\",\n    \"  ?resource wdt:P737 wd:Q312258 .\",\n    \"}\",\n    \"MINUS { ?resource wdt:P26 wd:Q312258 }\"\n    ]\n}", "normal_query": "SELECT ?resource { wd:Q63993096 wdt:P1040 ?resource . wd:Q2298257 wdt:P1040 ?resource . wd:Q2493884 wdt:P1040 ?resource . ?resource wdt:P58 wd:Q63993096 . ?resource wdt:P58 wd:Q2298257 . ?resource wdt:P58 wd:Q2493884 . ?resource wdt:P737 wd:Q312258 . } MINUS { ?resource wdt:P26 wd:Q312258 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q63993096 kg:P737 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q63993096 kg:P737 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n    \t\t\"?x\"\n    \t] }\n    \t\t\t\t\t\t      \t\t\t\t", "normal_query": "?x LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?writer ?star ?director ?composer WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Shoulder Arms\\\"@en .\",\n \t\t\t\"?film2 rdfs:label \\\"The Great Dictator\\\"@en .\",\n \t\t\t\"?film3 rdfs:label \\\"The Floorwalker\\\"@en .\",\n \t\t\t\"?writer kg:5380 ?film1 ; kg:5380 ?film2 .\", \">// P58 for writer\"\n \t\t\t,\"?star kg:1821 ?film1 ; kg:1821 ?film2 .\", \">// P86 for star\"\n \t\t\t,\"?director kg:2672 ?film1 ; kg:2672 ?film3 .\", \">// P57 for director\"\n \t\t\t,\"?composer kg:9331 ?film1 ; kg:9331 ?film2 .\" ,\"\\t}\", \">// P161 for composer\"\n \t\t]}\n\t\t", "normal_query": "SELECT ?writer ?star ?director ?composer WHERE { ?film1 rdfs:label \"Shoulder Arms\"@en . ?film2 rdfs:label \"The Great Dictator\"@en . ?film3 rdfs:label \"The Floorwalker\"@en . ?writer kg:5380 ?film1 ; kg:5380 ?film2 . >// P58 for writer ?star kg:1821 ?film1 ; kg:1821 ?film2 . >// P86 for star ?director kg:2672 ?film1 ; kg:2672 ?film3 . >// P57 for director ?composer kg:9331 ?film1 ; kg:9331 ?film2 . } >// P161 for composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?role WHERE {\",\n    \"  wd:Q192115 wdt:P344 ?planet_terror .\",\n    \"  wd:Q1165050 wdt:P344 ?sin_city .\",\n    \"  ?planet_terror wdt:P57 ?director .\",\n    \"  ?sin_city wdt:P57 ?director .\",\n    \"  ?planet_terror wdt:P1040 ?writer .\",\n    \"  ?sin_city wdt:P1040 ?writer .\",\n    \"  ?planet_terror wdt:P58 ?cinematographer .\",\n    \"  ?sin_city wdt:P58 ?cinematographer .\",\n    \"  ?director wdt:P161 ?star .\",\n    \"  ?writer wdt:P161 ?star .\",\n    \"  ?cinematographer wdt:P161 ?star .\",\n    \"?role <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> wd:Q192115}\",\n    \"]\"\n  ]\n}", "normal_query": "SELECT ?role WHERE { wd:Q192115 wdt:P344 ?planet_terror . wd:Q1165050 wdt:P344 ?sin_city . ?planet_terror wdt:P57 ?director . ?sin_city wdt:P57 ?director . ?planet_terror wdt:P1040 ?writer . ?sin_city wdt:P1040 ?writer . ?planet_terror wdt:P58 ?cinematographer . ?sin_city wdt:P58 ?cinematographer . ?director wdt:P161 ?star . ?writer wdt:P161 ?star . ?cinematographer wdt:P161 ?star . ?role <http://www.w3.org/1999/02//22-rdf-syntax-ns> ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  { kg:2044 kg:3755 ?resource . }\", \"># director (P57) of Planet Terror and Sin City\"\n   \t,\"UNION\",\n    \"  { kg:2044 kg:8142 ?resource . }\", \"># cinematographer (P58) of Planet Terror and Sin City\"\n   \t,\"UNION\",\n    \"  { kg:2044 kg:9519 ?resource . }\", \"># writer (P344) of Planet Terror and Sin City\"\n   \t,\"UNION\",\n    \"  { kg:2044 kg:6918 ?resource . }\", \"># editor (P161) of Planet Terror and Sin City\"\n   \t,\"UNION\",\n    \"  { kg:2044 kg:2156 ?resource . }\" ,\"\\t># star (P1040) of Planet Terror and Sin City\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { { kg:2044 kg:3755 ?resource . } > UNION { kg:2044 kg:8142 ?resource . } > UNION { kg:2044 kg:9519 ?resource . } > UNION { kg:2044 kg:6918 ?resource . } > UNION { kg:2044 kg:2156 ?resource . } > } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  { wd:Q1432710 wdt:P161 ?film1 . }\",\n    \"  UNION\",\n    \"  { wd:Q2082586 wdt:P161 ?film2 . }\",\n    \"  UNION\",\n    \"  { wd:Q730888 wdt:P161 ?film3 . }\",\n    \"  UNION\",\n    \"  { wd:Q205447 wdt:P161 ?film4 . }\",\n    \"  UNION\",\n    \"  { wd:Q17893055 wdt:P344 ?film5 . }\",\n    \"  UNION\",\n    \"  { wd:Q17893055 wdt:P1040 ?resource . }\",\n    \"  UNION\",\n    \"  { wd:Q17893055 wdt:P1431 ?resource . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { { wd:Q1432710 wdt:P161 ?film1 . } UNION { wd:Q2082586 wdt:P161 ?film2 . } UNION { wd:Q730888 wdt:P161 ?film3 . } UNION { wd:Q205447 wdt:P161 ?film4 . } UNION { wd:Q17893055 wdt:P344 ?film5 . } UNION { wd:Q17893055 wdt:P1040 ?resource . } UNION { wd:Q17893055 wdt:P1431 ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film kg:0792 kg:8692 .\", \"@comment(?film = Contagion)\",\n \t\t\t\"?film kg:0792 kg:0268 .\", \"@comment(?film = Schizopolis)\",\n \t\t\t\"?film kg:0792 kg:8110 .\", \"@comment(?film = Ocean's Eleven)\",\n \t\t\t\"?film kg:0792 kg:8430 .\", \"@comment(?film = Full_Frontal)\",\n \t\t\t\"?mmxxl kg:5258 ?resource .\",\n \t\t\t\"?mmxxl kg:7135 kg:6465 .\" ,\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:0792 kg:8692 . @comment(?film = Contagion) ?film kg:0792 kg:0268 . @comment(?film = Schizopolis) ?film kg:0792 kg:8110 . @comment(?film = Ocean's Eleven) ?film kg:0792 kg:8430 . @comment(?film = Full_Frontal) ?mmxxl kg:5258 ?resource . ?mmxxl kg:7135 kg:6465 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \" wd:Q56756907 wdt:P161 ?resource .\",\n    \" wd:Q3641257 wdt:P161 ?resource .\",\n    \" wd:Q862058 wdt:P161 ?resource .\",\n    \" wd:Q114819 wdt:P161 ?resource .\",\n    \" wd:Q2085 wdt:P161 ?resource .\",\n    \" wd:Q507285 wdt:P161 ?resource .\",\n    \"}\",\n    \"MINUS { wd:Q3485595 wdt:P344 ?resource }\",\n    \"MINUS { wd:Q3485595 wdt:P1040 ?resource }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q56756907 wdt:P161 ?resource . wd:Q3641257 wdt:P161 ?resource . wd:Q862058 wdt:P161 ?resource . wd:Q114819 wdt:P161 ?resource . wd:Q2085 wdt:P161 ?resource . wd:Q507285 wdt:P161 ?resource . } MINUS { wd:Q3485595 wdt:P344 ?resource } MINUS { wd:Q3485595 wdt:P1040 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0716 kg:4229 ?resource .\",\n    \"  FILTER(?resource = kg:8977 || ?resource = kg:5245 || ?resource = kg:5876 || ?resource = kg:5162 || ?resource = kg:0564) \",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:0716 kg:4229 ?resource . FILTER(?resource = kg:8977 || ?resource = kg:5245 || ?resource = kg:5876 || ?resource = kg:5162 || ?resource = kg:0564) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q2298257 wdt:P58 ?resource .\",\n    \"  wd:Q2493884 wdt:P58 ?resource .\",\n    \"  wd:Q312258 wdt:P26 ?resource .\",\n    \"}\",\n    \"MINUS { ?resource rdfs:label ?exclude FILTER(CONTAINS(LCASE(?exclude), \\\"influence\\\")) }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q2298257 wdt:P58 ?resource . wd:Q2493884 wdt:P58 ?resource . wd:Q312258 wdt:P26 ?resource . } MINUS { ?resource rdfs:label ?exclude FILTER(CONTAINS(LCASE(?exclude), \"influence\")) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q2298257 kg:P462 ?resource .\",\n    \"?resource kg:P1040 <http://example.org/Vagabond> .\",\n    \"?resource kg:P1040 <http://example.org/The_Gleaners_and_I> .\",\n    \"  kg:Q312258 kg:P580 ?resource .\"\n   \t]}\n \t\t\t            \t", "normal_query": "SELECT ?resource WHERE { kg:Q2298257 kg:P462 ?resource . ?resource kg:P1040 <http://example.org//Vagabond> . ?resource kg:P1040 <http://example.org//The_Gleaners_and_I> . kg:Q312258 kg:P580 ?resource . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n \t\t\t \t    \t\t\t\t\t\t\t\"query\": [\n    \t\t\"SELECT ?resource WHERE {\"\n    \t\t\t,\"?confession wdt:P58 wd:Q12813010 .\"\n    \t\t\t, \"?destiny wdt:P161 ?starWriter .\"\n    \t\t\t, \"?waitingRoom wdt:P161 ?starWriter .\"\n    \t\t\t, \"?thirdPage wdt:P161 ?starWriter .\"\n    \t\t\t, \"?confession wdt:P344 ?editorProducerCinematographer .\"\n    \t\t\t, \"?destiny wdt:P1040 ?editorProducerCinematographer .\"\n    \t\t\t, \"?waitingRoom wdt:P1431 ?editorProducerCinematographer .\"\n    \t\t\t, \"?thirdPage wdt:P58 ?editorProducerCinematographer .\"\n    \t\t\t,\"?starWriter wdt:P161 ?destiny .\"\n    \t\t\t,\"?starWriter wdt:P161 ?waitingRoom .\"\n    \t\t\t,\"?starWriter wdt:P161 ?thirdPage .\"\n    \t\t,\"}\"\n    \t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?confession wdt:P58 wd:Q12813010 . ?destiny wdt:P161 ?starWriter . ?waitingRoom wdt:P161 ?starWriter . ?thirdPage wdt:P161 ?starWriter . ?confession wdt:P344 ?editorProducerCinematographer . ?destiny wdt:P1040 ?editorProducerCinematographer . ?waitingRoom wdt:P1431 ?editorProducerCinematographer . ?thirdPage wdt:P58 ?editorProducerCinematographer . ?starWriter wdt:P161 ?destiny . ?starWriter wdt:P161 ?waitingRoom . ?starWriter wdt:P161 ?thirdPage . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6672 kg:3648 ?resource .\",\n    \"  ?resource kg:9903 kg:7113 .\",\n    \"  ?resource kg:9892 kg:7898 .\",\n    \"  ?resource kg:9852 kg:9854 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:6672 kg:3648 ?resource . ?resource kg:9903 kg:7113 . ?resource kg:9892 kg:7898 . ?resource kg:9852 kg:9854 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?editor WHERE {\",\n    \"  wd:Q199039 wdt:P57 ?editor .\", \">// Pay Day (film) directed by ?editor\",\n    \"  wd:Q2445896 wdt:P57 ?editor .\", \">// Modern Times (film) directed by ?editor\",\n    \"  wd:Q166739 wdt:P57 ?editor .\", \">// The Floorwalker (film) directed by ?editor\",\n    \"  wd:Q45602 wdt:P57 ?editor .\", \">// Work (film) directed by ?editor\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?editor WHERE { wd:Q199039 wdt:P57 ?editor . >// Pay Day (film) directed by ?editor wd:Q2445896 wdt:P57 ?editor . >// Modern Times (film) directed by ?editor wd:Q166739 wdt:P57 ?editor . >// The Floorwalker (film) directed by ?editor wd:Q45602 wdt:P57 ?editor . >// Work (film) directed by ?editor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  { <http://rdf.freebase.com/ns/m.0361> <http://rdf.freebase.com/ns/p57> ?resource . }\",\n    \"  UNION\",\n    \"  { <http://rdf.freebase.com/ns/m.8176> <http://rdf.freebase.com/ns/p57> ?resource . }\",\n    \"  UNION\",\n    \"  { <http://rdf.freebase.com/ns/m.5149> <http://rdf.freebase.com/ns/p57> ?resource . }\",\n    \"  UNION\",\n    \"  { <http://rdf.freebase.com/ns/m.8960> <http://rdf.freebase.com/ns/p57> ?resource . }\"\n    ]}\n    ", "normal_query": "SELECT ?resource WHERE { { <http://rdf.freebase.com/ns//m.0361> <http://rdf.freebase.com/ns//p57> ?resource . } UNION { <http://rdf.freebase.com/ns//m.8176> <http://rdf.freebase.com/ns//p57> ?resource . } UNION { <http://rdf.freebase.com/ns//m.5149> <http://rdf.freebase.com/ns//p57> ?resource . } UNION { <http://rdf.freebase.com/ns//m.8960> <http://rdf.freebase.com/ns//p57> ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q5437360 wdt:P1040 wd:Q6084069 .\",\n    \"  wd:Q5437360 wdt:P1040 wd:Q12813010 .\",\n    \"  wd:Q5437360 wdt:P1431 wd:Q6084069 .\",\n    \"  wd:Q5437360 wdt:P1431 wd:Q12813010 .\",\n    \"  wd:Q5437360 wdt:P58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q5437360 wdt:P1040 wd:Q6084069 . wd:Q5437360 wdt:P1040 wd:Q12813010 . wd:Q5437360 wdt:P1431 wd:Q6084069 . wd:Q5437360 wdt:P1431 wd:Q12813010 . wd:Q5437360 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:0579 <http://schema.org/contributorRole> \\\"writer\\\" .\",\n    \"  kg:0579 <http://schema.org/contributorRole> \\\"executive producer\\\" .\",\n    \"  kg:0579 <http://schema.org/contributorRole> \\\"editor\\\" .\",\n    \"  kg:0579 <http://schema.org/workExample> kg:6062 .\",\n    \"  kg:0579 <http://schema.org/workExample> kg:6108 .\",\n    \"  kg:0579 <http://schema.org/contributorRole> \\\"executive producer\\\" .\",\n    \"  kg:0579 <http://schema.org/contributorRole> \\\"editor\\\" .\",\n    \"  kg:0579 <http://schema.org/workExample> kg:8321 .\",\n    \"  ?resource <http://schema.org/contributionToCollection> kg:8321 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:0579 schema:contributorRole \"writer\" . kg:0579 schema:contributorRole \"executive producer\" . kg:0579 schema:contributorRole \"editor\" . kg:0579 schema:workExample kg:6062 . kg:0579 schema:workExample kg:6108 . kg:0579 schema:contributorRole \"executive producer\" . kg:0579 schema:contributorRole \"editor\" . kg:0579 schema:workExample kg:8321 . ?resource schema:contributionToCollection kg:8321 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q7546 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q982339 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q1033656 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q116760 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q1365463 . }\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q7546 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q982339 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1033656 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q116760 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1365463 . } } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film <http://schema.org/director> <http://data.linkeddata.es/resource/persons/3964>. \",\n \t\t\t\"?film <http://schema.org/writer> <http://data.linkeddata.es/resource/persons/1055>. \",\n \t\t\t\"?film <http://schema.org/director> <http://data.linkeddata.es/resource/persons/7439>. \",\n \t\t\t\"?film <http://schema.org/writer> <http://data.linkeddata.es/resource/persons/0962>. \",\n \t\t\t\"?film <http://schema.org/director> <http://data.linkeddata.es/resource/persons/6787>. \",\n \t\t\t\"?film <http://schema.org/writer> <http://data.linkeddata.es/resource/persons/0694>. \",\n \t\t\t\"?film <http://schema.org/director> <http://data.linkeddata.es/resource/persons/3303>. \",\n \t\t\t\"?film <http://schema.org/writer> <http://data.linkeddata.es/resource/persons/5554>. \"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?film WHERE { ?film schema:director <http://data.linkeddata.es/resource/persons//3964>. ?film schema:writer <http://data.linkeddata.es/resource/persons//1055>. ?film schema:director <http://data.linkeddata.es/resource/persons//7439>. ?film schema:writer <http://data.linkeddata.es/resource/persons//0962>. ?film schema:director <http://data.linkeddata.es/resource/persons//6787>. ?film schema:writer <http://data.linkeddata.es/resource/persons//0694>. ?film schema:director <http://data.linkeddata.es/resource/persons//3303>. ?film schema:writer <http://data.linkeddata.es/resource/persons//5554>. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q5265241 wdt:P161 ?resource .\",\n    \"  wd:Q5265241 wdt:P344 ?resource .\",\n    \"  wd:Q5265241 wdt:P1040 ?resource .\",\n    \"  wd:Q6084069 wdt:P344 ?resource .\",\n    \"  wd:Q6084069 wdt:P1040 ?resource .\",\n    \"  wd:Q12813010 wdt:P1431 ?resource .\",\n    \"  wd:Q5265241 wdt:P58 ?resource .\",\n    \"  wd:Q6084069 wdt:P58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q5265241 wdt:P161 ?resource . wd:Q5265241 wdt:P344 ?resource . wd:Q5265241 wdt:P1040 ?resource . wd:Q6084069 wdt:P344 ?resource . wd:Q6084069 wdt:P1040 ?resource . wd:Q12813010 wdt:P1431 ?resource . wd:Q5265241 wdt:P58 ?resource . wd:Q6084069 wdt:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/2942> <http://rdf.freebase.com/ns/p161> ?resource . } UNION \",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/0250> <http://rdf.freebase.com/ns/p344> ?resource . } UNION \",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/4263> <http://rdf.freebase.com/ns/q6084069> ?resource . } UNION \",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/7811> <http://rdf.freebase.com/ns/p1040> ?resource . } UNION \",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/2309> <http://rdf.freebase.com/ns/p1431> ?resource . } UNION \",\n \t\t\t\"{ <http://rdf.freebase.com/ns/m/2168> <http://rdf.freebase.com/ns/p58> ?resource . }\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { { <http://rdf.freebase.com/ns/m//2942> <http://rdf.freebase.com/ns//p161> ?resource . } UNION { <http://rdf.freebase.com/ns/m//0250> <http://rdf.freebase.com/ns//p344> ?resource . } UNION { <http://rdf.freebase.com/ns/m//4263> <http://rdf.freebase.com/ns//q6084069> ?resource . } UNION { <http://rdf.freebase.com/ns/m//7811> <http://rdf.freebase.com/ns//p1040> ?resource . } UNION { <http://rdf.freebase.com/ns/m//2309> <http://rdf.freebase.com/ns//p1431> ?resource . } UNION { <http://rdf.freebase.com/ns/m//2168> <http://rdf.freebase.com/ns//p58> ?resource . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \" wd:Q327427 wdt:P1040 ?work1 .\",\n    \" wd:Q543382 wdt:P1040 ?work2 .\",\n    \" wd:Q567519 wdt:P1040 ?work3 .\",\n    \" wd:Q570483 wdt:P1040 ?work4 .\",\n    \" wd:Q878673 wdt:P1040 ?work5 .\",\n    \"?work1 wdt:P58 ?author .\",\n    \"?work2 wdt:P58 ?author .\",\n    \"?work3 wdt:P58 ?author .\",\n    \"?work4 wdt:P58 ?author .\",\n    \"?work5 wdt:P58 ?author .\",\n    \"?author wdt:P26 ?spouse .\",\n    \"?spouse wdt:P106 wd:Q7042855 .\",\n    \"}\",\n    \"GROUP BY ?resource\",\n    \"HAVING (COUNT(?work) = 5)\"\n    ]\n}", "normal_query": "SELECT ?resource { wd:Q327427 wdt:P1040 ?work1 . wd:Q543382 wdt:P1040 ?work2 . wd:Q567519 wdt:P1040 ?work3 . wd:Q570483 wdt:P1040 ?work4 . wd:Q878673 wdt:P1040 ?work5 . ?work1 wdt:P58 ?author . ?work2 wdt:P58 ?author . ?work3 wdt:P58 ?author . ?work4 wdt:P58 ?author . ?work5 wdt:P58 ?author . ?author wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q7042855 . } GROUP BY ?resource HAVING (COUNT(?work) = 5) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:8637 kg:9872 ?spouse .\",\n    \"  ?spouse kg:6727 kg:6831 .\",\n    \"  ?work kg:3176 ?spouse .\",\n    \"  FILTER(?work IN (kg:7702, kg:9166, kg:4367, kg:4861, kg:8637))\",\n    \"  ?resource kg:4179 ?work .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:8637 kg:9872 ?spouse . ?spouse kg:6727 kg:6831 . ?work kg:3176 ?spouse . FILTER(?work IN (kg:7702, kg:9166, kg:4367, kg:4861, kg:8637)) ?resource kg:4179 ?work . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n      \t\t\"?director wdt:P31 wd:Q5 .\"\n      \t\t\t, \"?director wdt:P21 wd:Q6581072 .\" ]\n    \t}\n   \t\t\t \t      \t\t\t\t\t\t", "normal_query": "?director wdt:P31 wd:Q5 . ?director wdt:P21 wd:Q6581072 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Tag der Freiheit: Unsere Wehrmacht\\\"@en.\",\n \t\t\t\"?film2 rdfs:label \\\"Olympia\\\"@en.\",\n \t\t\t\"?film3 rdfs:label \\\"Triumph of the Will\\\"@en.\",\n \t \t\t\"?director kg:0928 ?film1.\",\n \t\t\t\"?director kg:0928 ?film2.\",\n \t\t\t\"?director kg:0928 ?film3.\",\n \t\t\t\"?director kg:5041 ?film1.\",\n \t\t\t\"?director kg:5041 ?film2.\",\n \t\t\t\"?director kg:5041 ?film3.\",\n \t\t\t\"?director kg:2542 ?film1.\",\n \t\t\t\"?director kg:2542 ?film2.\",\n \t\t\t\"?director kg:2542 ?film3.\",\n \t\t\t\"?director rdf:type foaf:Person.\",\n \t\t\t\"?director foaf:gender <http://schema.org/Female>.\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?director WHERE { ?film1 rdfs:label \"Tag der Freiheit: Unsere Wehrmacht\"@en. ?film2 rdfs:label \"Olympia\"@en. ?film3 rdfs:label \"Triumph of the Will\"@en. ?director kg:0928 ?film1. ?director kg:0928 ?film2. ?director kg:0928 ?film3. ?director kg:5041 ?film1. ?director kg:5041 ?film2. ?director kg:5041 ?film3. ?director kg:2542 ?film1. ?director kg:2542 ?film2. ?director kg:2542 ?film3. ?director rdf:type foaf:Person. ?director foaf:gender schema:Female. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n      \t\t\"SELECT ?resource WHERE {\"\n      \t\t\t,\"?film1 wdt:P31 wd:Q11420. \"\n      \t\t\t,\"?film1 rdfs:label ?title1. FILTER(LANG(?title1) = 'en' && ?title1 = 'Day of the Dead').\"\n      \t\t\t,\"wd:Q1277329 wdt:P57 ?resource.\"\n      \t\t\t,\"?film2 wdt:P31 wd:Q11420. \"\n      \t\t\t,\"?film2 rdfs:label ?title2. FILTER(LANG(?title2) = 'en' && ?title2 = 'Monkey Shines').\"\n      \t\t\t,\"wd:Q219170 wdt:P57 ?resource.\"\n      \t\t\t,\"?film3 wdt:P31 wd:Q11420. \"\n      \t\t\t,\"?film3 rdfs:label ?title3. FILTER(LANG(?title3) = 'en' && ?title3 = 'Dawn of the Dead').\"\n      \t\t\t,\"wd:Q219155 wdt:P57 ?resource.\"\n      \t\t\t,\"?film4 wdt:P31 wd:Q11420. \"\n      \t\t\t,\"?film4 rdfs:label ?title4. FILTER(LANG(?title4) = 'en' && ?title4 = 'Survival of the Dead').\"\n      \t\t\t,\"wd:Q198557 wdt:P57 ?resource.\"\n      \t\t\t,\"?craziesFilm wdt:P31 wd:Q11420. \"\n      \t\t\t,\"?craziesFilm rdfs:label ?titleCrazies. FILTER(LANG(?titleCrazies) = 'en' && ?titleCrazies = 'The Crazies').\"\n      \t\t\t,\"?resource wdt:P58 ?craziesFilm.\"\n      \t\t\t,\"?resource wdt:P27 wd:Q16.\" ]}\n      \t\t \t      \t\t\t\t", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P31 wd:Q11420. ?film1 rdfs:label ?title1. FILTER(LANG(?title1) = 'en' && ?title1 = 'Day of the Dead'). wd:Q1277329 wdt:P57 ?resource. ?film2 wdt:P31 wd:Q11420. ?film2 rdfs:label ?title2. FILTER(LANG(?title2) = 'en' && ?title2 = 'Monkey Shines'). wd:Q219170 wdt:P57 ?resource. ?film3 wdt:P31 wd:Q11420. ?film3 rdfs:label ?title3. FILTER(LANG(?title3) = 'en' && ?title3 = 'Dawn of the Dead'). wd:Q219155 wdt:P57 ?resource. ?film4 wdt:P31 wd:Q11420. ?film4 rdfs:label ?title4. FILTER(LANG(?title4) = 'en' && ?title4 = 'Survival of the Dead'). wd:Q198557 wdt:P57 ?resource. ?craziesFilm wdt:P31 wd:Q11420. ?craziesFilm rdfs:label ?titleCrazies. FILTER(LANG(?titleCrazies) = 'en' && ?titleCrazies = 'The Crazies'). ?resource wdt:P58 ?craziesFilm. ?resource wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Day of the Dead\\\"@en .\",\n \t\t\t\"?film1 kg:3694 ?writer_director .\",\n \t\t\t\"?film2 rdfs:label \\\"Monkey Shines\\\"@en .\",\n \t\t\t\"?film2 kg:3694 ?writer_director .\",\n \t\t\t\"?film3 rdfs:label \\\"Dawn of the Dead\\\"@en .\",\n \t\t\t\"?film3 kg:3694 ?writer_director .\",\n \t\t\t\"?film4 rdfs:label \\\"Survival of the Dead\\\"@en .\",\n \t\t\t\"?film4 kg:3694 ?writer_director .\",\n \t\t\t\"?crazies rdfs:label \\\"The Crazies\\\"@en .\",\n \t\t\t\"?crazies kg:5370 ?country .\",\n \t\t\t\"?country rdfs:label \\\"Canada\\\"@en .\",\n \t\t\t\"?crazies kg:4035 ?writer_director .\",\n \t\t\t\"?writer_director rdf:type foaf:Person .\",\n \t\t\t\"?resource ?property ?writer_director\"\n \t\t,\"} LIMIT 1\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Day of the Dead\"@en . ?film1 kg:3694 ?writer_director . ?film2 rdfs:label \"Monkey Shines\"@en . ?film2 kg:3694 ?writer_director . ?film3 rdfs:label \"Dawn of the Dead\"@en . ?film3 kg:3694 ?writer_director . ?film4 rdfs:label \"Survival of the Dead\"@en . ?film4 kg:3694 ?writer_director . ?crazies rdfs:label \"The Crazies\"@en . ?crazies kg:5370 ?country . ?country rdfs:label \"Canada\"@en . ?crazies kg:4035 ?writer_director . ?writer_director rdf:type foaf:Person . ?resource ?property ?writer_director } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n    \t\t\"{?item wdt:P57 wd:Q206182 . ?item wdt:P1431 wd:Q206182 .}\",\n    \t\t\"{?item wdt:P57 wd:Q391143 . ?item wdt:P58 wd:Q391143 .}\",\n    \t\t\"{?item wdt:P57 wd:Q232108 . ?item wdt:P58 wd:Q232108 .}\",\n    \t\t\"{?item wdt:P57 wd:Q378013 . ?item wdt:P58 wd:Q378013 .}\",\n    \t\t\"{?item wdt:P57 wd:Q594033 . ?item wdt:P58 wd:Q594033 .}\"\n    \t]\n}", "normal_query": "{?item wdt:P57 wd:Q206182 . ?item wdt:P1431 wd:Q206182 .} {?item wdt:P57 wd:Q391143 . ?item wdt:P58 wd:Q391143 .} {?item wdt:P57 wd:Q232108 . ?item wdt:P58 wd:Q232108 .} {?item wdt:P57 wd:Q378013 . ?item wdt:P58 wd:Q378013 .} {?item wdt:P57 wd:Q594033 . ?item wdt:P58 wd:Q594033 .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Police Story 2\\\"@en.\",\n \t\t\t\"?film1 kg:0873 ?director.\",\n \t\t\t\"?film1 kg:7013 ?year.\",\n \t\t\t\"?film1 kg:2592 ?script.\",\n \t\t\t\"?director rdfs:label ?name.\",\n \t\t\t\"?director rdf:type foaf:Person.\",\n \t\t\t\"?director kg:5763 ?role.\",\n \t\t\t\"?role rdfs:label \\\"Executive producer\\\"@en.\",\n \t\t\t\"?year rdf:type xsd:gYear.\",\n \t\t\t\"?script rdf:type owl:NamedIndividual.\",\n \t\t\t\"?film2 rdfs:label \\\"Chinese Zodiac\\\"@en.\",\n \t\t\t\"?film2 kg:0873 ?director.\",\n \t\t\t\"?film2 kg:7013 ?year.\",\n \t\t\t\"?film2 kg:2592 ?script.\",\n \t\t\t\"?film3 rdfs:label \\\"Police Story\\\"@en.\",\n \t\t\t\"?film3 kg:0873 ?director.\",\n \t\t\t\"?film3 kg:7013 ?year.\",\n \t\t\t\"?film3 kg:2592 ?script.\",\n \t\t\t\"?film4 rdfs:label \\\"The Fearless Hyena\\\"@en.\",\n \t\t\t\"?film4 kg:0873 ?director.\",\n \t\t\t\"?film4 kg:7013 ?year.\",\n \t\t\t\"?film4 kg:2592 ?script.\",\n \t\t\t\"FILTER(?role = kg:6340 || ?role = kg:1543 || ?role = kg:0654 || ?role = kg:8594)\",\n \t\t\t\"?resource rdf:type foaf:Person.\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Police Story 2\"@en. ?film1 kg:0873 ?director. ?film1 kg:7013 ?year. ?film1 kg:2592 ?script. ?director rdfs:label ?name. ?director rdf:type foaf:Person. ?director kg:5763 ?role. ?role rdfs:label \"Executive producer\"@en. ?year rdf:type xsd:gYear. ?script rdf:type owl:NamedIndividual. ?film2 rdfs:label \"Chinese Zodiac\"@en. ?film2 kg:0873 ?director. ?film2 kg:7013 ?year. ?film2 kg:2592 ?script. ?film3 rdfs:label \"Police Story\"@en. ?film3 kg:0873 ?director. ?film3 kg:7013 ?year. ?film3 kg:2592 ?script. ?film4 rdfs:label \"The Fearless Hyena\"@en. ?film4 kg:0873 ?director. ?film4 kg:7013 ?year. ?film4 kg:2592 ?script. FILTER(?role = kg:6340 || ?role = kg:1543 || ?role = kg:0654 || ?role = kg:8594) ?resource rdf:type foaf:Person. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\"wd:Q7095994 wdt:P108 ?resource .\",\n  \t\t\"?resource (wdt:P108|wdt:P112)* wd:Q42944 .\",\n  \t\t\"?resource (wdt:P108|wdt:P112)* wd:Q7204713 .\",\n  \t\t\"?resource (wdt:P108|wdt:P112)* wd:Q7432436 .\",\n  \t\t\"?resource (wdt:P108|wdt:P112)* wd:Q37033 .\",\n  \t\t\"}\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q7095994 wdt:P108 ?resource . ?resource (wdt:P108|wdt:P112)* wd:Q42944 . ?resource (wdt:P108|wdt:P112)* wd:Q7204713 . ?resource (wdt:P108|wdt:P112)* wd:Q7432436 . ?resource (wdt:P108|wdt:P112)* wd:Q37033 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:0273 kg:4051 .\",\n \t\t\t\"?resource kg:9047 kg:1709 .\",\n \t\t\t\"?resource kg:9047 kg:3317 .\",\n \t\t\t\"?resource kg:9047 kg:4345 .\",\n \t\t\t\"?resource kg:9047 kg:6801 .\"\n \t\t,\"} \"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0273 kg:4051 . ?resource kg:9047 kg:1709 . ?resource kg:9047 kg:3317 . ?resource kg:9047 kg:4345 . ?resource kg:9047 kg:6801 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?film\",\n    \"{\",\n    \"  wd:Q562108 wdt:P57 ?film .\",\n    \"  wd:Q1687239 wdt:P57 ?film .\",\n    \"  wd:Q35979475 wdt:P57 ?film .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"  ?film wdt:P1040 wd:Q562108 .\",\n    \"  ?film wdt:P1040 wd:Q1687239 .\",\n    \"  ?film wdt:P1040 wd:Q35979475 .\",\n    \"  ?film wdt:P162 wd:Q562108 .\",\n    \"  ?film wdt:P162 wd:Q1687239 .\",\n    \"  ?film wdt:P162 wd:Q35979475 .\",\n    \"  ?film wdt:P272 wd:Q562108 .\",\n    \"  ?film wdt:P272 wd:Q1687239 .\",\n    \"  ?film wdt:P272 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { wd:Q562108 wdt:P57 ?film . wd:Q1687239 wdt:P57 ?film . wd:Q35979475 wdt:P57 ?film . ?film wdt:P31 wd:Q11424 . ?film wdt:P1040 wd:Q562108 . ?film wdt:P1040 wd:Q1687239 . ?film wdt:P1040 wd:Q35979475 . ?film wdt:P162 wd:Q562108 . ?film wdt:P162 wd:Q1687239 . ?film wdt:P162 wd:Q35979475 . ?film wdt:P272 wd:Q562108 . ?film wdt:P272 wd:Q1687239 . ?film wdt:P272 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  kg:8798 p1040 ?film .\",\n    \"  kg:3803 p1040 ?film .\",\n    \"  kg:7741 p1040 ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { kg:8798 p1040 ?film . kg:3803 p1040 ?film . kg:7741 p1040 ?film . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Sin City\\\"@en .\",\n \t\t\t\"?film2 rdfs:label \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\"@en .\",\n \t\t\t\"?drama rdfs:label \\\"From Dusk till Dawn: The Series\\\"@en .\",\n \t\t\t\"?person foaf:name ?name .\",\n \t\t\t\"?person roledirectorin ?film1 .\",\n \t\t\t\"?person rolecinematographerin ?film1 .\",\n \t\t\t\"?person rolescreenwriterof ?film1 .\",\n \t\t\t\"?person roleactorin ?film1 .\",\n \t\t\t\"?person roleeditorin ?film1 .\",\n \t\t\t\"?person roleexecutiveproducerof ?drama .\",\n \t\t\t\"FILTER(?film1 != ?film2)\"\n \t\t,\"?resource foaf:name ?name .\" ]}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Sin City\"@en . ?film2 rdfs:label \"The Adventures of Sharkboy and Lavagirl in 3-D\"@en . ?drama rdfs:label \"From Dusk till Dawn: The Series\"@en . ?person foaf:name ?name . ?person roledirectorin ?film1 . ?person rolecinematographerin ?film1 . ?person rolescreenwriterof ?film1 . ?person roleactorin ?film1 . ?person roleeditorin ?film1 . ?person roleexecutiveproducerof ?drama . FILTER(?film1 != ?film2) ?resource foaf:name ?name . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\t\"?work1 wdt:P57 wd:Q1699716 .\", \">// director of This Night is Q1699716 (assuming this is the correct ID for the director)\",\n  \t\t\t\"?work1 wdt:P58 wd:Q823767 .\", \">// cinematographer of This Night is Q823767 (assuming this is the correct ID for the cinematographer)\",\n  \t\t\t\"?work1 wdt:P1040 wd:Q686125 .\", \">// writer of This Night is Q686125 (assuming this is the correct ID for the writer)\",\n  \t\t\t\"wd:Q327427 wdt:P58 ?resource .\", \">// Lili Marleen has cinematographer as ?resource\",\n  \t\t\t\"wd:Q327427 wdt:P1040 ?resource .\", \">// Lili Marleen has writer as ?resource\",\n  \t\t\t\"wd:Q695787 wdt:P58 ?resource .\", \">// Rio das Mortes has cinematographer as ?resource (assuming Q695787 is the correct ID for Rio das Mortes)\",\n  \t\t\t\"wd:Q695787 wdt:P1040 ?resource .\", \">// Rio das Mortes has writer as ?resource\",\n  \t\t\t\"wd:Q239449 wdt:P58 ?resource .\", \">// Whity has cinematographer as ?resource (assuming Q239449 is the correct ID for Whity)\",\n  \t\t\t\"wd:Q239449 wdt:P1040 ?resource .\" ,\">// Whity has writer as ?resource\"\n  \t\t,\"}\" ]\n}", "normal_query": "SELECT ?resource WHERE { ?work1 wdt:P57 wd:Q1699716 . >// director of This Night is Q1699716 (assuming this is the correct ID for the director) ?work1 wdt:P58 wd:Q823767 . >// cinematographer of This Night is Q823767 (assuming this is the correct ID for the cinematographer) ?work1 wdt:P1040 wd:Q686125 . >// writer of This Night is Q686125 (assuming this is the correct ID for the writer) wd:Q327427 wdt:P58 ?resource . >// Lili Marleen has cinematographer as ?resource wd:Q327427 wdt:P1040 ?resource . >// Lili Marleen has writer as ?resource wd:Q695787 wdt:P58 ?resource . >// Rio das Mortes has cinematographer as ?resource (assuming Q695787 is the correct ID for Rio das Mortes) wd:Q695787 wdt:P1040 ?resource . >// Rio das Mortes has writer as ?resource wd:Q239449 wdt:P58 ?resource . >// Whity has cinematographer as ?resource (assuming Q239449 is the correct ID for Whity) wd:Q239449 wdt:P1040 ?resource . >// Whity has writer as ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:9214 (P57|P1040)* ?resource .\",\n    \"  ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q1699716 .\",\n    \"  ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q823767 .\",\n    \"  ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q327427 .\",\n    \"  ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q686125 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:9214 (P57|P1040)* ?resource . ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q1699716 . ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q823767 . ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q327427 . ?resource (P344|P58)*/(wdt:P361|wdt:P179|wdt:P57|wdt:P1040)* wd:Q686125 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n \t\t\t \t  \t\t\t\t\t\t\t\"query\": [\n    \t\t\"SELECT ?resource WHERE {\"\n    \t\t\t,\"?film1 wdt:P1040 wd:Q623051 .\"\n    \t\t\t,\"?film1 wdt:P57 ?director .\"\n    \t\t\t,\"?director wdt:P58 wd:Q1903317 .\"\n    \t\t\t,\"?film2 wdt:P1040 wd:Q627060 .\"\n    \t\t\t,\"?film2 wdt:P57 ?director .\"\n    \t\t\t,\"?film3 wdt:P1040 wd:Q2520777 .\"\n    \t\t\t,\"?film3 wdt:P57 ?director .\"\n    \t\t\t,\"?resource ?property ?value\"\n    \t\t,\"}\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P1040 wd:Q623051 . ?film1 wdt:P57 ?director . ?director wdt:P58 wd:Q1903317 . ?film2 wdt:P1040 wd:Q627060 . ?film2 wdt:P57 ?director . ?film3 wdt:P1040 wd:Q2520777 . ?film3 wdt:P57 ?director . ?resource ?property ?value } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 rdfs:label \\\"Night of the Living Dead\\\"@en.\",\n \t\t\t\"?film1 wdt:P58 ?americanCinematographer.\",\n \t\t\t\"?americanCinematographer wdt:P344 ?editWork.\",\n \t\t\t\"?editWork rdfs:label ?editFilmLabel.\",\n \t\t\t\"?americanCinematographer wdt:P57 ?directWork.\",\n \t\t\t\"?directWork rdfs:label ?directFilmLabel.\",\n \t\t\t\"?americanCinematographer wdt:P1040 ?writeWork.\",\n \t\t\t\"?writeWork rdfs:label ?writeFilmLabel.\",\n \t\t\t\"FILTER(?editFilmLabel = \\\"Martin\\\"@en || ?editFilmLabel = \\\"Season of the Witch\\\"@en || ?editFilmLabel = \\\"The Crazies\\\"@en)\",\n \t\t\t\"FILTER(?directFilmLabel = \\\"Martin\\\"@en || ?directFilmLabel = \\\"Season of the Witch\\\"@en || ?directFilmLabel = \\\"The Crazies\\\"@en)\",\n \t\t\t\"FILTER(?writeFilmLabel = \\\"Martin\\\"@en || ?writeFilmLabel = \\\"Season of the Witch\\\"@en || ?writeFilmLabel = \\\"The Crazies\\\"@en)\",\n \t\t\t\"?editWork wdt:P27 wd:Q30.\",\n \t\t\t\"?directWork wdt:P27 wd:Q30.\",\n \t\t\t\"?writeWork wdt:P27 wd:Q30.\"\n \t\t,\"}\",\n \t\"prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\",\n \t\"prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\n \t\"prefix wdt: <http://example.org/kg/>\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 rdfs:label \"Night of the Living Dead\"@en. ?film1 wdt:P58 ?americanCinematographer. ?americanCinematographer wdt:P344 ?editWork. ?editWork rdfs:label ?editFilmLabel. ?americanCinematographer wdt:P57 ?directWork. ?directWork rdfs:label ?directFilmLabel. ?americanCinematographer wdt:P1040 ?writeWork. ?writeWork rdfs:label ?writeFilmLabel. FILTER(?editFilmLabel = \"Martin\"@en || ?editFilmLabel = \"Season of the Witch\"@en || ?editFilmLabel = \"The Crazies\"@en) FILTER(?directFilmLabel = \"Martin\"@en || ?directFilmLabel = \"Season of the Witch\"@en || ?directFilmLabel = \"The Crazies\"@en) FILTER(?writeFilmLabel = \"Martin\"@en || ?writeFilmLabel = \"Season of the Witch\"@en || ?writeFilmLabel = \"The Crazies\"@en) ?editWork wdt:P27 wd:Q30. ?directWork wdt:P27 wd:Q30. ?writeWork wdt:P27 wd:Q30. } prefix rdfs: <http://www.w3.org/2000/01//rdf-schema> prefix rdf: <http://www.w3.org/1999/02//22-rdf-syntax-ns> prefix wdt: <http://example.org/kg//> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t \t\t\t\"query\": [\n  \t\t\"SELECT ?writer WHERE {\"\n  \t\t\t,\"?film wdt:P344 'Star_Wars_Episode_IV_A_New_Hope'@en .\"\n  \t\t\t,\"?film wdt:P57 ?director .\"\n  \t\t\t,\"?director wdt:P106 wd:Q1869678 .\" ]\n  \t\t\t\t}\n  \t\t\t\t\t\t \t      \t \t\t", "normal_query": "SELECT ?writer WHERE { ?film wdt:P344 'Star_Wars_Episode_IV_A_New_Hope'@en . ?film wdt:P57 ?director . ?director wdt:P106 wd:Q1869678 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P57> wd:Q613974 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P58> wd:Q1869678 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P1431> wd:Q17738 .\",\n \t\t\t\"FILTER(?resource != wd:Q613974 && ?resource != wd:Q1869678 && ?resource != wd:Q17738)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource p:P57 wd:Q613974 . ?resource p:P58 wd:Q1869678 . ?resource p:P1431 wd:Q17738 . FILTER(?resource != wd:Q613974 && ?resource != wd:Q1869678 && ?resource != wd:Q17738) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?film\",\n    \"{\",\n    \"  ?film wdt:P31 wd:Q11424 ;\", \"At least one of the following lines should be included for each role:\",\n    \"    wdt:P57 wd:Q562108 ;\", \">// Director\"\n    ,\n    \"    wdt:P57 wd:Q1687239 ;\", \">// Producer\"\n    ,\n    \"    wdt:P57 wd:Q35979475 ;\", \">// Writer\"\n    ,\n    \"    wdt:P1040 wd:Q562108 ;\", \">// Editor\"\n    ,\n    \"}\",\n    \"}\"\n  ]\n}\n \t\t\t\t\t\t      \t\t\t\t\t", "normal_query": "SELECT ?film { ?film wdt:P31 wd:Q11424 ; At least one of the following lines should be included for each role: wdt:P57 wd:Q562108 ; >// Director wdt:P57 wd:Q1687239 ; >// Producer wdt:P57 wd:Q35979475 ; >// Writer wdt:P1040 wd:Q562108 ; >// Editor } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film <http://schema.org/director> <http://example/kg/6701> .\",\n    \"  ?film <http://schema.org/producer> <http://example/kg/2031> .\",\n    \"  ?film <http://schema.org/writer> <http://example/kg/5305> .\",\n    \"  ?film <http://schema.org/editor> <http://example/kg/1040> .\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film schema:director <http://example/kg//6701> . ?film schema:producer <http://example/kg//2031> . ?film schema:writer <http://example/kg//5305> . ?film schema:editor <http://example/kg//1040> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\" : [\n    \"SELECT ?costumeDesigner\",\n    \"WHERE {\",\n    \"  wd:Q551861 wdt:P1040 ?work .\", \"@Repeating the same pattern for each work is inefficient, but based on the provided entities and properties:\",\n    \"  ?work wdt:P58 wd:Q3530946 .\",\n    \"  ?work wdt:P58 wd:Q19885882 .\",\n    \"  ?work wdt:P58 wd:Q19544249 .\",\n    \"  ?work wdt:P58 wd:Q2336453 .\",\n    \"  ?work wdt:P58 wd:Q2615443 .\",\n    \"}\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { wd:Q551861 wdt:P1040 ?work . @Repeating the same pattern for each work is inefficient, but based on the provided entities and properties: ?work wdt:P58 wd:Q3530946 . ?work wdt:P58 wd:Q19885882 . ?work wdt:P58 wd:Q19544249 . ?work wdt:P58 wd:Q2336453 . ?work wdt:P58 wd:Q2615443 . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:4747 kg:1950 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:4747 kg:1950 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  { ?film wdt:P1040 wd:Q3282637 ; wdt:P57 wd:Q483197 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P1431 wd:Q3282637 ; wdt:P57 wd:Q483197 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P58 wd:Q3282637 ; wdt:P57 wd:Q483197 . }\",\n    \"  ?resource (wdt:P1040|wdt:P1431|wdt:P58) wd:Q3282637 ;\",\n    \"            wdt:P57 wd:Q483197 ;\",\n    \"            wdt:P31 wd:Q13471372 .\",\n    \"}\",\n    \"FILTER (?resource = ?film)\"\n  ]\n}", "normal_query": "SELECT ?resource { { ?film wdt:P1040 wd:Q3282637 ; wdt:P57 wd:Q483197 . } UNION { ?film wdt:P1431 wd:Q3282637 ; wdt:P57 wd:Q483197 . } UNION { ?film wdt:P58 wd:Q3282637 ; wdt:P57 wd:Q483197 . } ?resource (wdt:P1040|wdt:P1431|wdt:P58) wd:Q3282637 ; wdt:P57 wd:Q483197 ; wdt:P31 wd:Q13471372 . } FILTER (?resource = ?film) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?film1 wdt:P1040 wd:Q483197 .\", \">// Pietà (assuming Q483197 represents Pietà in the KG)\",\n    \"  ?film2 wdt:P1040 wd:Q13471372 .\", \">// Moebius (assuming Q13471372 represents Moebius in the KG)\",\n    \"  ?film3 wdt:P1040 wd:Q484679 .\", \">// Dream (assuming Q484679 represents Dream in the KG)\",\n    \"  ?person p:P57 [ ps:P57 ?film1 ; pq:P106 wd:Q3282637 ] .\", \">// The person who is a film producer (P57) and has occupation as film producer (P106)\"\n   \t,\n    \"  ?person p:P57 [ ps:P57 ?film2 ; pq:P106 wd:Q3282637 ] .\",\n    \"  ?person p:P57 [ ps:P57 ?film3 ; pq:P106 wd:Q3282637 ] .\",\n    \"  ?person p:P58 [ ps:P58 ?film1 ] .\", \">// The person who is an executive producer (P58)\"\n   \t,\n    \"  ?person p:P58 [ ps:P58 ?film2 ] .\",\n    \"  ?person p:P58 [ ps:P58 ?film3 ] .\",\n    \"  ?person p:P1431 [ ps:P1431 ?film1 ] .\", \">// The person who is an editor (P1431)\"\n   \t,\n    \"  ?person p:P1431 [ ps:P1431 ?film2 ] .\",\n    \"  ?person p:P1431 [ ps:P1431 ?film3 ] .\",\n    \"  ?person p:P57 [ ps:P57 ?film1 ; pq:P106 wd:Q3282637 ] .\", \">// The person who is a director (P57)\"\n   \t,\n    \"  ?person p:P57 [ ps:P57 ?film2 ; pq:P106 wd:Q3282637 ] .\",\n    \"  ?person p:P57 [ ps:P57 ?film3 ; pq:P106 wd:Q3282637 ] .\",\n    \"  ?person wdt:P106 wd:Q3282637 .\", \">// The person has occupation as film producer (P106)\"\n   \t,\n    \"  ?person wdt:P57 ?film1 .\",\n    \"  ?person wdt:P57 ?film2 .\",\n    \"  ?person wdt:P57 ?film3 .\",\n    \"  ?person wdt:P58 ?film1 .\", \">// The person is an executive producer (P58)\"\n   \t,\n    \"  ?person wdt:P58 ?film2 .\",\n    \"  ?person wdt:P58 ?film3 .\",\n    \"  ?person wdt:P1431 ?film1 .\", \">// The person is an editor (P1431)\"\n   \t,\n    \"  ?person wdt:P1431 ?film2 .\",\n    \"  ?person wdt:P1431 ?film3 .\",\n    \"  ?person wdt:P57 ?film1 .\", \">// The person is a director (P57)\"\n   \t,\n    \"  ?person wdt:P57 ?film2 .\",\n    \"  ?person wdt:P57 ?film3 .\",\n    \"  BIND(?person AS ?resource) }\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P1040 wd:Q483197 . >// Pietà (assuming Q483197 represents Pietà in the KG) ?film2 wdt:P1040 wd:Q13471372 . >// Moebius (assuming Q13471372 represents Moebius in the KG) ?film3 wdt:P1040 wd:Q484679 . >// Dream (assuming Q484679 represents Dream in the KG) ?person p:P57 [ ps:P57 ?film1 ; pq:P106 wd:Q3282637 ] . >// The person who is a film producer (P57) and has occupation as film producer (P106) ?person p:P57 [ ps:P57 ?film2 ; pq:P106 wd:Q3282637 ] . ?person p:P57 [ ps:P57 ?film3 ; pq:P106 wd:Q3282637 ] . ?person p:P58 [ ps:P58 ?film1 ] . >// The person who is an executive producer (P58) ?person p:P58 [ ps:P58 ?film2 ] . ?person p:P58 [ ps:P58 ?film3 ] . ?person p:P1431 [ ps:P1431 ?film1 ] . >// The person who is an editor (P1431) ?person p:P1431 [ ps:P1431 ?film2 ] . ?person p:P1431 [ ps:P1431 ?film3 ] . ?person p:P57 [ ps:P57 ?film1 ; pq:P106 wd:Q3282637 ] . >// The person who is a director (P57) ?person p:P57 [ ps:P57 ?film2 ; pq:P106 wd:Q3282637 ] . ?person p:P57 [ ps:P57 ?film3 ; pq:P106 wd:Q3282637 ] . ?person wdt:P106 wd:Q3282637 . >// The person has occupation as film producer (P106) ?person wdt:P57 ?film1 . ?person wdt:P57 ?film2 . ?person wdt:P57 ?film3 . ?person wdt:P58 ?film1 . >// The person is an executive producer (P58) ?person wdt:P58 ?film2 . ?person wdt:P58 ?film3 . ?person wdt:P1431 ?film1 . >// The person is an editor (P1431) ?person wdt:P1431 ?film2 . ?person wdt:P1431 ?film3 . ?person wdt:P57 ?film1 . >// The person is a director (P57) ?person wdt:P57 ?film2 . ?person wdt:P57 ?film3 . BIND(?person AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q562108 ; \",\n    \"         wdt:P57 wd:Q562108 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q1687239 ; \",\n    \"         wdt:P57 wd:Q1687239 . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P58 wd:Q35979475 ; \",\n    \"         wdt:P57 wd:Q35979475 . }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q562108 ; wdt:P57 wd:Q562108 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q1687239 ; wdt:P57 wd:Q1687239 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q35979475 ; wdt:P57 wd:Q35979475 . } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film p:P58 ?editStatement .\",\n    \"  ?editStatement ps:P58 wd:Q562108 .\",\n    \"  ?film p:P1040 ?writeStatement .\",\n    \"  ?writeStatement ps:P1040 wd:Q35979475 .\",\n    \"  ?film p:P57 ?directStatement .\",\n    \"  ?directStatement ps:P57 wd:Q1687239 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film p:P58 ?editStatement . ?editStatement ps:P58 wd:Q562108 . ?film p:P1040 ?writeStatement . ?writeStatement ps:P1040 wd:Q35979475 . ?film p:P57 ?directStatement . ?directStatement ps:P57 wd:Q1687239 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\" : [\n    \"SELECT ?film\",\n    \"{\",\n    \"  { ?film wdt:P31 wd:Q11424 ; \",\n    \"         wdt:P57 wd:Q562108 ; \",\n    \"         wdt:P1040 wd:Q1687239 ; \",\n    \"         wdt:P162 wd:Q35979475 .\",\n    \"  } UNION { ?film wdt:P31 wd:Q11424 ; \",\n    \"              wdt:P57 wd:Q1687239 ; \",\n    \"              wdt:P1040 wd:Q562108 ; \",\n    \"              wdt:P162 wd:Q35979475 .\",\n    \"  } UNION { ?film wdt:P31 wd:Q11424 ; \",\n    \"              wdt:P57 wd:Q35979475 ; \",\n    \"              wdt:P1040 wd:Q562108 ; \",\n    \"              wdt:P162 wd:Q1687239 .\",\n    \"  } UNION { ?film wdt:P31 wd:Q11424 ; \",\n    \"              wdt:P57 wd:Q562108 ; \",\n    \"              wdt:P1040 wd:Q35979475 ; \",\n    \"              wdt:P162 wd:Q1687239 .\",\n    \"  } UNION { ?film wdt:P31 wd:Q11424 ; \",\n    \"              wdt:P57 wd:Q1687239 ; \",\n    \"              wdt:P1040 wd:Q35979475 ; \",\n    \"              wdt:P162 wd:Q562108 .\",\n    \"  } UNION { ?film wdt:P31 wd:Q11424 ; \",\n    \"              wdt:P57 wd:Q35979475 ; \",\n    \"              wdt:P1040 wd:Q1687239 ; \",\n    \"              wdt:P162 wd:Q562108 .\",\n    \"  }\",\n    \"}\",\n    \"]\"\n  ]\n}", "normal_query": "SELECT ?film { { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P162 wd:Q35979475 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q562108 ; wdt:P162 wd:Q35979475 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q562108 ; wdt:P162 wd:Q1687239 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q562108 ; wdt:P1040 wd:Q35979475 ; wdt:P162 wd:Q1687239 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q1687239 ; wdt:P1040 wd:Q35979475 ; wdt:P162 wd:Q562108 . } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q1687239 ; wdt:P162 wd:Q562108 . } } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  ?film <http://schema.org/director> <http://example/kg:2176> .\",\n    \"  ?film <http://schema.org/editor> <http://example/kg:7326> .\",\n    \"  ?film <http://schema.org/writer> <http://example/kg:5962> .\",\n    \"  ?film <http://schema.org/producer> <http://example/kg:0839> .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { ?film schema:director <http://example//kg:2176> . ?film schema:editor <http://example//kg:7326> . ?film schema:writer <http://example//kg:5962> . ?film schema:producer <http://example//kg:0839> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?role ?movie WHERE {\",\n    \"  wd:Q5437360 wdt:P1040 ?movie .\",\n    \"  ?movie wdt:P57 wd:Q5437360 .\",\n    \"  ?movie wdt:P1431 wd:Q5437360 .\",\n    \"  ?movie wdt:P58 wd:Q5437360 .\",\n    \"  VALUES ?movie { wd:Q25479948 wd:Q12813010 wd:Q6084069 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?role ?movie WHERE { wd:Q5437360 wdt:P1040 ?movie . ?movie wdt:P57 wd:Q5437360 . ?movie wdt:P1431 wd:Q5437360 . ?movie wdt:P58 wd:Q5437360 . VALUES ?movie { wd:Q25479948 wd:Q12813010 wd:Q6084069 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q5437360 kg:P57 ?director .\",\n    \"?director kg:P1040 ?work1 .\",\n    \"?work1 <http://schema.org/name> \\\"Fate\\\"@en .\",\n    \"?director kg:P1040 ?work2 .\",\n    \"?work2 <http://schema.org/name> \\\"The Confession\\\"@en .\",\n    \"?director kg:P1040 ?work3 .\",\n    \"?work3 <http://schema.org/name> \\\"The Waiting Room\\\"@en .\",\n    \"  ?resource ?property ?director .\",\n    \"}\",\n    \"LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q5437360 kg:P57 ?director . ?director kg:P1040 ?work1 . ?work1 schema:name \"Fate\"@en . ?director kg:P1040 ?work2 . ?work2 schema:name \"The Confession\"@en . ?director kg:P1040 ?work3 . ?work3 schema:name \"The Waiting Room\"@en . ?resource ?property ?director . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?role WHERE {\",\n    \"  wd:Q5437360 wdt:P1040 ?work1 .\",\n    \"  ?work1 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q25479948 wdt:P1040 ?work2 .\",\n    \"  ?work2 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q12813010 wdt:P1040 ?work3 .\",\n    \"  ?work3 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q6084069 wdt:P1040 ?work4 .\",\n    \"  ?work4 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q5437360 wdt:P1431 ?work5 .\",\n    \"  ?work5 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q25479948 wdt:P1431 ?work6 .\",\n    \"  ?work6 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q12813010 wdt:P1431 ?work7 .\",\n    \"  ?work7 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q6084069 wdt:P1431 ?work8 .\",\n    \"  ?work8 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q5437360 wdt:P58 ?work9 .\",\n    \"  ?work9 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q25479948 wdt:P58 ?work10 .\",\n    \"  ?work10 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q12813010 wdt:P58 ?work11 .\",\n    \"  ?work11 wdt:P57 wd:Q5437360 .\",\n    \"  wd:Q6084069 wdt:P58 ?work12 .\",\n    \"  ?work12 wdt:P57 wd:Q5437360 .\",\n    \"?role <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> wd:Q5437360 }\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t  \t\t\t\t\t", "normal_query": "SELECT ?role WHERE { wd:Q5437360 wdt:P1040 ?work1 . ?work1 wdt:P57 wd:Q5437360 . wd:Q25479948 wdt:P1040 ?work2 . ?work2 wdt:P57 wd:Q5437360 . wd:Q12813010 wdt:P1040 ?work3 . ?work3 wdt:P57 wd:Q5437360 . wd:Q6084069 wdt:P1040 ?work4 . ?work4 wdt:P57 wd:Q5437360 . wd:Q5437360 wdt:P1431 ?work5 . ?work5 wdt:P57 wd:Q5437360 . wd:Q25479948 wdt:P1431 ?work6 . ?work6 wdt:P57 wd:Q5437360 . wd:Q12813010 wdt:P1431 ?work7 . ?work7 wdt:P57 wd:Q5437360 . wd:Q6084069 wdt:P1431 ?work8 . ?work8 wdt:P57 wd:Q5437360 . wd:Q5437360 wdt:P58 ?work9 . ?work9 wdt:P57 wd:Q5437360 . wd:Q25479948 wdt:P58 ?work10 . ?work10 wdt:P57 wd:Q5437360 . wd:Q12813010 wdt:P58 ?work11 . ?work11 wdt:P57 wd:Q5437360 . wd:Q6084069 wdt:P58 ?work12 . ?work12 wdt:P57 wd:Q5437360 . ?role <http://www.w3.org/1999/02//22-rdf-syntax-ns> LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5001 kg:5542 ?director .\", \">// Ember's director as the subject and P57 (occupation) as predicate to find the person who directed Ember\"\n   \t,\"?director kg:0633 kg:6450 .\", \">// The director has a relation with Q25479948 (Fate, The Waiting Room, and The Confession)\"\n   \t,\"?director kg:1442 kg:8569 .\", \">// The director has the role of executive producer for Q12813010\"\n   \t,\"?director kg:7218 kg:5699 .\" ,\">// The director wrote Q6084069\"\n   \t,\"?director kg:5542 kg:5001 .\" ,\"\\n}// Return only resources.\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:5001 kg:5542 ?director . >// Ember's director as the subject and P57 (occupation) as predicate to find the person who directed Ember ?director kg:0633 kg:6450 . >// The director has a relation with Q25479948 (Fate, The Waiting Room, and The Confession) ?director kg:1442 kg:8569 . >// The director has the role of executive producer for Q12813010 ?director kg:7218 kg:5699 . >// The director wrote Q6084069 ?director kg:5542 kg:5001 . }// Return only resources. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"  ?film wdt:P58 wd:Q448604, wd:Q363666, wd:Q452794 .\",\n    \"  ?film wdt:P57 wd:Q448604, wd:Q363666, wd:Q452794 .\",\n    \"  ?film wdt:P1431 wd:Q448604, wd:Q363666, wd:Q452794 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film { ?film wdt:P31 wd:Q11424 . ?film wdt:P58 wd:Q448604, wd:Q363666, wd:Q452794 . ?film wdt:P57 wd:Q448604, wd:Q363666, wd:Q452794 . ?film wdt:P1431 wd:Q448604, wd:Q363666, wd:Q452794 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?film WHERE {\",\n \t\t\t\"?film <http://schema.org/director> <http://example/kg:7435> .\",\n \t\t\t\"?film <http://schema.org/producer> <http://example/kg:7435> .\",\n \t\t\t\"?film <http://schema.org/screenplayWriter> <http://example/kg:7435> .\",\n \t\t\t\"<http://example/kg:7435> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example/kg:Q363666> .\",\n \t\t\t\"<http://example/kg:7435> <http://schema.org/name> \\\"David Zucker\\\"@en .\",\n \t\t\t\"?film <http://schema.org/screenplayWriter> <http://example/kg:9069> .\",\n \t\t\t\"<http://example/kg:9069> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example/kg:Q452794> .\",\n \t\t\t\"<http://example/kg:9069> <http://schema.org/name> \\\"Jim Abrahams\\\"@en .\",\n \t\t\t\"?film <http://schema.org/screenplayWriter> <http://example/kg:5906> .\",\n \t\t\t\"<http://example/kg:5906> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example/kg:Q448604> .\",\n \t\t\t\"<http://example/kg:5906> <http://schema.org/name> \\\"Jerry Zucker\\\"@en .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?film WHERE { ?film schema:director <http://example//kg:7435> . ?film schema:producer <http://example//kg:7435> . ?film schema:screenplayWriter <http://example//kg:7435> . <http://example//kg:7435> <http://www.w3.org/1999/02//22-rdf-syntax-ns> <http://example//kg:7435> schema:name \"David Zucker\"@en . ?film schema:screenplayWriter <http://example//kg:9069> . <http://example//kg:9069> <http://www.w3.org/1999/02//22-rdf-syntax-ns> <http://example//kg:9069> schema:name \"Jim Abrahams\"@en . ?film schema:screenplayWriter <http://example//kg:5906> . <http://example//kg:5906> <http://www.w3.org/1999/02//22-rdf-syntax-ns> <http://example//kg:5906> schema:name \"Jerry Zucker\"@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q13471372 wdt:P57 ?editor .\",\n    \"  wd:Q462025 wdt:P57 ?editor .\",\n    \"  wd:Q17041657 wdt:P57 ?editor .\",\n    \"  ?film wdt:P57 ?director .\",\n    \"  ?film wdt:P344 wd:Q483197 .\",\n    \"  FILTER(?editor = ?director)\",\n    \"  ?resource wdt:P1040 ?film .\",\n    \"  ?resource wdt:P1431 ?film .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q13471372 wdt:P57 ?editor . wd:Q462025 wdt:P57 ?editor . wd:Q17041657 wdt:P57 ?editor . ?film wdt:P57 ?director . ?film wdt:P344 wd:Q483197 . FILTER(?editor = ?director) ?resource wdt:P1040 ?film . ?resource wdt:P1431 ?film . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q13471372 kg:P57 ?resource .\",\n    \"  ?resource kg:P1040 ?film .\",\n    \"  ?film kg:P1431 ?title .\",\n    \"  FILTER(?title = \\\"Pietà\\\")\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q13471372 kg:P57 ?resource . ?resource kg:P1040 ?film . ?film kg:P1431 ?title . FILTER(?title = \"Pietà\") } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n  \"query\" : [\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n    \"  wd:Q599423 wdt:P57 ?cinematographer .\",\n    \"  wd:Q543382 wdt:P1040 wd:Q44426 .\",\n    \"  wd:Q570483 wdt:P161 wd:Q44426 .\",\n    \"?cinematographer ?p wd:Q44426 }\"\n  ]\n}", "normal_query": "SELECT ?cinematographer WHERE { wd:Q599423 wdt:P57 ?cinematographer . wd:Q543382 wdt:P1040 wd:Q44426 . wd:Q570483 wdt:P161 wd:Q44426 . ?cinematographer ?p wd:Q44426 } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7025 kg:2181 ?resource .\", \"><!-- Rainer Werner Fassbinder was directed by the cinematographer --><!-- P2181 is 'directed by' in this context, but it's used here to represent the relationship between Fassbinder and the cinematographer as per the given entities and properties. The actual property might be different based on the knowledge graph schema. -->\",\n    \"  kg:7025 kg:3547 ?resource .\", \"><!-- Rainer Werner Fassbinder starred in works edited by the cinematographer --><!-- P3547 is used here to represent a relationship that combines 'starred' and 'edited by', but it's an interpretation based on the given entities. The actual property might be different. -->\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:7025 kg:2181 ?resource . ><!-- Rainer Werner Fassbinder was directed by the cinematographer --><!-- P2181 is 'directed by' in this context, but it's used here to represent the relationship between Fassbinder and the cinematographer as per the given entities and properties. The actual property might be different based on the knowledge graph schema. --> kg:7025 kg:3547 ?resource . ><!-- Rainer Werner Fassbinder starred in works edited by the cinematographer --><!-- P3547 is used here to represent a relationship that combines 'starred' and 'edited by', but it's an interpretation based on the given entities. The actual property might be different. --> } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q12949115 wdt:P737 ?influencedByActor .\\n  wd:Q45404 wdt:P737 ?influencedByActor .\\n  ?influencedByActor wdt:P106 wd:Q33999 .\\n  wd:Q457433 wdt:P26 ?marriedPerson .\\n  wd:Q5045345 wdt:P26 ?marriedPerson .\\n  ?resource (wdt:P112|wdt:P737) ?influencedByActor .\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q12949115 wdt:P737 ?influencedByActor . wd:Q45404 wdt:P737 ?influencedByActor . ?influencedByActor wdt:P106 wd:Q33999 . wd:Q457433 wdt:P26 ?marriedPerson . wd:Q5045345 wdt:P26 ?marriedPerson . ?resource (wdt:P112|wdt:P737) ?influencedByActor . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?actor1 p:P106 ?statement1 .\",\n \t\t\t\"?statement1 ps:P106 kg:7735 .\",\n \t\t\t\"?statement1 pq:P737 kg:9498 .\",\n \t\t\t\"?actor2 p:P106 ?statement2 .\",\n \t\t\t\"?statement2 ps:P106 kg:7735 .\",\n \t\t\t\"?statement2 pq:P737 kg:0243 .\",\n \t\t\t\"?person1 p:P106 ?statement3 .\",\n \t\t\t\"?statement3 ps:P106 kg:9387 .\",\n \t\t\t\"?statement3 pq:P737 kg:1227 .\",\n \t\t\t\"?person2 p:P106 ?statement4 .\",\n \t\t\t\"?statement4 ps:P106 kg:9387 .\",\n \t\t\t\"?statement4 pq:P737 kg:0185 .\",\n \t\t\t\"?school p:P106 ?statement5 .\",\n \t\t\t\"?statement5 ps:P106 kg:3150 .\",\n \t\t\t\"?statement5 pq:P737 kg:9987 .\",\n \t\t\t\"?person1 p:P26 ?marriageStatement1 .\",\n \t\t\t\"?marriageStatement1 ps:P26 kg:7263 .\",\n \t\t\t\"?marriageStatement1 pq:P737 kg:0260 .\",\n \t\t\t\"?person2 p:P26 ?marriageStatement2 .\",\n \t\t\t\"?marriageStatement2 ps:P26 kg:7263 .\",\n \t\t\t\"?marriageStatement2 pq:P737 kg:9987 .\",\n \t\t\t\"{?actor1 rdf:type foaf:Person} UNION {?actor2 rdf:type foaf:Person}\",\n \t\t\t\"OPTIONAL { ?school p:P106 ?founderStatement . }\",\n \t\t\t\"?founderStatement ps:P106 kg:3150 .\",\n \t\t\t\"?founderStatement pq:P737 kg:9498 .\",\n \t\t\t\"?resource rdf:type foaf:Person\"\n \t\t,\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?actor1 p:P106 ?statement1 . ?statement1 ps:P106 kg:7735 . ?statement1 pq:P737 kg:9498 . ?actor2 p:P106 ?statement2 . ?statement2 ps:P106 kg:7735 . ?statement2 pq:P737 kg:0243 . ?person1 p:P106 ?statement3 . ?statement3 ps:P106 kg:9387 . ?statement3 pq:P737 kg:1227 . ?person2 p:P106 ?statement4 . ?statement4 ps:P106 kg:9387 . ?statement4 pq:P737 kg:0185 . ?school p:P106 ?statement5 . ?statement5 ps:P106 kg:3150 . ?statement5 pq:P737 kg:9987 . ?person1 p:P26 ?marriageStatement1 . ?marriageStatement1 ps:P26 kg:7263 . ?marriageStatement1 pq:P737 kg:0260 . ?person2 p:P26 ?marriageStatement2 . ?marriageStatement2 ps:P26 kg:7263 . ?marriageStatement2 pq:P737 kg:9987 . {?actor1 rdf:type foaf:Person} UNION {?actor2 rdf:type foaf:Person} OPTIONAL { ?school p:P106 ?founderStatement . } ?founderStatement ps:P106 kg:3150 . ?founderStatement pq:P737 kg:9498 . ?resource rdf:type foaf:Person } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  ?resource wdt:P108 wd:Q37033 .\\n  ?resource wdt:P108 wd:Q7095994 .\\n  ?resource wdt:P108 wd:Q7432436 .\\n  ?resource wdt:P108 wd:Q42944 .\\n  ?resource wdt:P108 wd:Q7204713 .\\n}\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P108 wd:Q37033 . ?resource wdt:P108 wd:Q7095994 . ?resource wdt:P108 wd:Q7432436 . ?resource wdt:P108 wd:Q42944 . ?resource wdt:P108 wd:Q7204713 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource\",\n \t\t\"WHERE {\",\n \t\t\"?resource kg:3145 kg:6182 .\", \"># P108 works for, Q7432436 World Wide Web Consortium and Open Data Institute\",\n \t\t\"?resource kg:3145 kg:2143 .\", \"># P108 works for, Q37033 Plessey\",\n \t\t\"?resource kg:3145 kg:0588 .\", \"># P108 works for, Q7095994 CERN\",\n \t\t\"?resource kg:3145 kg:7021 .}\", \"># P108 works for, Q7204713 School of Electronics and Computer Science, University of Southampton\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3145 kg:6182 . > ?resource kg:3145 kg:2143 . > ?resource kg:3145 kg:0588 . > ?resource kg:3145 kg:7021 .} > LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n  \t\t\"SELECT ?resource WHERE {\"\n  \t\t\t]\n  \t\t\t}\n  \t\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film <http://schema.org/director> ?director .\",\n \t\t\t\"?film <http://schema.org/writer> ?writer .\",\n \t\t\t\"?film <http://schema.org/cinematographer> ?cinematographer .\",\n \t\t\t\"?film <http://schema.org/actor> ?star .\",\n \t\t\t\"?film <http://schema.org/composer> ?composer .\",\n \t\t\t\"?director <http://schema.org/name> \\\"Robert Rodriguez\\\"@en .\",\n \t\t\t\"?writer <http://schema.org/name> \\\"Quentin Tarantino\\\"@en .\",\n \t\t\t\"?cinematographer <http://schema.org/name> \\\"David S. Hagman\\\"@en .\",\n \t\t\t\"?star <http://schema.org/name> \\\"Rose McGowan\\\"@en .\",\n \t\t\t\"?composer <http://schema.org/name> \\\"Danny Elfman\\\"@en .\",\n \t\t\t\"?film <http://schema.org/alternateName> ?altTitle .\",\n \t\t\t\"FILTER (str(?altTitle) = 'Planet Terror')\",\n \t\t\t\"?editedFilm <http://schema.org/director> ?director .\",\n \t\t\t\"?editedFilm <http://schema.org/writer> ?writer .\",\n \t\t\t\"?editedFilm <http://schema.org/actor> ?star .\",\n \t\t\t\"?editedFilm <http://schema.org/composer> ?composer .\",\n \t\t\t\"?editedFilm <http://schema.org/name> ?filmName .\",\n \t\t\t\"FILTER (str(?filmName) = 'Sin City: A Dame to Kill For' || str(?filmName) = 'Machete' || str(?filmName) = 'Sin City')\",\n \t\t\t\"?resource <http://schema.org/director> ?director .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film schema:director ?director . ?film schema:writer ?writer . ?film schema:cinematographer ?cinematographer . ?film schema:actor ?star . ?film schema:composer ?composer . ?director schema:name \"Robert Rodriguez\"@en . ?writer schema:name \"Quentin Tarantino\"@en . ?cinematographer schema:name \"David S. Hagman\"@en . ?star schema:name \"Rose McGowan\"@en . ?composer schema:name \"Danny Elfman\"@en . ?film schema:alternateName ?altTitle . FILTER (str(?altTitle) = 'Planet Terror') ?editedFilm schema:director ?director . ?editedFilm schema:writer ?writer . ?editedFilm schema:actor ?star . ?editedFilm schema:composer ?composer . ?editedFilm schema:name ?filmName . FILTER (str(?filmName) = 'Sin City: A Dame to Kill For' || str(?filmName) = 'Machete' || str(?filmName) = 'Sin City') ?resource schema:director ?director . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q13471372 wdt:P57 ?editorProducer .\",\n    \"  ?editorProducer wdt:P1040 wd:Q483197 .\",\n    \"  ?editorProducer wdt:P1431 wd:Q484679 .\",\n    \"  ?editorProducer wdt:P58 wd:Q13471372 .\",\n    \"  ?resource ?property ?editorProducer .\",\n    \"}\",\n    \"MINUS { wd:Q13471372 ?p [] }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q13471372 wdt:P57 ?editorProducer . ?editorProducer wdt:P1040 wd:Q483197 . ?editorProducer wdt:P1431 wd:Q484679 . ?editorProducer wdt:P58 wd:Q13471372 . ?resource ?property ?editorProducer . } MINUS { wd:Q13471372 ?p [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:Q13471372 kg:P57 ?resource .\",\n    \"  kg:Q13471372 kg:P1040 ?resource .\",\n    \"  kg:Q13471372 kg:P1431 ?resource .\",\n    \"  kg:Q13471372 kg:P58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:Q13471372 kg:P57 ?resource . kg:Q13471372 kg:P1040 ?resource . kg:Q13471372 kg:P1431 ?resource . kg:Q13471372 kg:P58 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n \t\t\t \t  \t    \t\t\"query\": [\n      \t \"?producer wdt:P106 wd:Q3282637 .\"\n      \t, \"?producer wdt:P58 wd:Q219400 .\"\n      \t, \"?producer wdt:P58 wd:Q64434913 .\"\n      \t, \"?producer wdt:P58 wd:Q220394 .\"\n      \t, \"?film1 wdt:P57 ?producer .\"\n      \t, \"?film2 wdt:P57 ?producer .\"\n      \t, \"?film3 wdt:P57 ?producer .\"\n      \t, \"?film1 wdt:P112 wd:Q64434913 .\"\n      \t, \"?film2 wdt:P112 wd:Q220394 .\"\n      \t, \"?film3 wdt:P112 wd:Q219400 .\"\n      ]\n}", "normal_query": "?producer wdt:P106 wd:Q3282637 . ?producer wdt:P58 wd:Q219400 . ?producer wdt:P58 wd:Q64434913 . ?producer wdt:P58 wd:Q220394 . ?film1 wdt:P57 ?producer . ?film2 wdt:P57 ?producer . ?film3 wdt:P57 ?producer . ?film1 wdt:P112 wd:Q64434913 . ?film2 wdt:P112 wd:Q220394 . ?film3 wdt:P112 wd:Q219400 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 wdt:P58 wd:Q219400 .\",\n \t\t\t\"?film1 wdt:P57 ?director .\",\n \t\t\t\"?director wdt:P106 wd:Q3282637 .\",\n \t\t\t\"?director wdt:P112 wd:Q220394 .\",\n \t\t\t\"?director wdt:P112 wd:Q542216 .\",\n \t\t\t\"?director wdt:P112 wd:Q3011043 .\",\n \t\t\t\"?film2 wdt:P58 wd:Q64434913 .\",\n \t\t\t\"?film2 wdt:P57 ?director .\",\n \t\t\t\"?film3 wdt:P58 wd:Q220394 .\",\n \t\t\t\"?film3 wdt:P57 ?director\"\n \t\t,\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P58 wd:Q219400 . ?film1 wdt:P57 ?director . ?director wdt:P106 wd:Q3282637 . ?director wdt:P112 wd:Q220394 . ?director wdt:P112 wd:Q542216 . ?director wdt:P112 wd:Q3011043 . ?film2 wdt:P58 wd:Q64434913 . ?film2 wdt:P57 ?director . ?film3 wdt:P58 wd:Q220394 . ?film3 wdt:P57 ?director } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q4959991 wdt:P57 ?director .\",\n    \"  ?director wdt:P1040 ?works .\",\n    \"  ?works (wdt:P86|wdt:P58) wd:Q4959991 .\",\n    \"  FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050)\",\n    \"  ?resource wdt:P1431 wd:Q4959991 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q4959991 wdt:P86 ?editor .\",\n    \"  ?editor wdt:P1040 ?works .\",\n    \"  ?works (wdt:P57|wdt:P58) wd:Q4959991 .\",\n    \"  FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050)\",\n    \"  ?resource wdt:P1431 wd:Q4959991 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q4959991 wdt:P1431 ?composer .\",\n    \"  ?composer wdt:P1040 ?works .\",\n    \"  ?works (wdt:P57|wdt:P86) wd:Q4959991 .\",\n    \"  FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050)\",\n    \"  ?resource wdt:P1431 wd:Q4959991 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q4959991 wdt:P58 ?cinematographer .\",\n    \"  ?cinematographer wdt:P1040 ?works .\",\n    \"  ?works (wdt:P57|wdt:P86) wd:Q4959991 .\",\n    \"  FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050)\",\n    \"  ?resource wdt:P1431 wd:Q4959991 .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q4959991 wdt:P57 ?producer .\",\n    \"  ?producer wdt:P1040 ?works .\",\n    \"  ?works (wdt:P86|wdt:P58) wd:Q4959991 .\",\n    \"  FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050)\",\n    \"  ?resource wdt:P1431 wd:Q4959991 .\",\n    \"}\",\n    \"]\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q4959991 wdt:P57 ?director . ?director wdt:P1040 ?works . ?works (wdt:P86|wdt:P58) wd:Q4959991 . FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050) ?resource wdt:P1431 wd:Q4959991 . } UNION { wd:Q4959991 wdt:P86 ?editor . ?editor wdt:P1040 ?works . ?works (wdt:P57|wdt:P58) wd:Q4959991 . FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050) ?resource wdt:P1431 wd:Q4959991 . } UNION { wd:Q4959991 wdt:P1431 ?composer . ?composer wdt:P1040 ?works . ?works (wdt:P57|wdt:P86) wd:Q4959991 . FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050) ?resource wdt:P1431 wd:Q4959991 . } UNION { wd:Q4959991 wdt:P58 ?cinematographer . ?cinematographer wdt:P1040 ?works . ?works (wdt:P57|wdt:P86) wd:Q4959991 . FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050) ?resource wdt:P1431 wd:Q4959991 . } UNION { wd:Q4959991 wdt:P57 ?producer . ?producer wdt:P1040 ?works . ?works (wdt:P86|wdt:P58) wd:Q4959991 . FILTER(?works = wd:Q5375110 || ?works = wd:Q7243050) ?resource wdt:P1431 wd:Q4959991 . } ] LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:6227 kg:0220 ?resource .\", \"@comment: binds the director to a resource\",\n    \"  kg:6227 kg:1536 ?resource .\", \"@comment: binds the editor to a resource\",\n    \"  kg:6227 kg:5846 ?resource .\", \"@comment: binds the composer to a resource\",\n    \"  kg:6227 kg:7818 ?resource .\", \"@comment: binds the cinematographer to a resource\",\n    \"  kg:6227 kg:0731 ?resource .\" , \"@comment: binds the executive producer to a resource\"\n   \t]}\n   \t\t\t            \t", "normal_query": "SELECT ?resource WHERE { kg:6227 kg:0220 ?resource . @comment: binds the director to a resource kg:6227 kg:1536 ?resource . @comment: binds the editor to a resource kg:6227 kg:5846 ?resource . @comment: binds the composer to a resource kg:6227 kg:7818 ?resource . @comment: binds the cinematographer to a resource kg:6227 kg:0731 ?resource . @comment: binds the executive producer to a resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n \t\t\t \t      \t \t\t\t\t\"query\": [\n    \t\t\"SELECT ?resource WHERE {\"\n    \t\t\t,\"?resource wdt:P108 wd:Q55206 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q23548 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q41506 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q622664 .\"\n    \t\t\t,\"?resource wdt:P108 wd:Q5059715 .\"\n    \t\t\t,\"?resource wdt:P27 wd:Q30 .\"\n    \t\t,\"}\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P108 wd:Q55206 . ?resource wdt:P108 wd:Q23548 . ?resource wdt:P108 wd:Q41506 . ?resource wdt:P108 wd:Q622664 . ?resource wdt:P108 wd:Q5059715 . ?resource wdt:P27 wd:Q30 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  ?resource kg:8994 kg:1473 .\", \">// employed by Stanford University (Q23548)\"\n   \t,\"  ?resource kg:8994 kg:6416 .\", \">// American founder and employee of Sally Ride Science (Q55206)\"\n   \t,\"  ?resource kg:8994 kg:3401 .\", \">// employed by University of California, San Diego (Q41506)\"\n   \t,\"  ?resource kg:8994 kg:8712 .\", \">// employed by National Aeronautics and Space Administration (Q622664)\"\n   \t,\"  ?resource kg:8994 kg:2435 .\", \">// employed by Center for International Security and Cooperation (Q5059715)\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8994 kg:1473 . >// employed by Stanford University (Q23548) ?resource kg:8994 kg:6416 . >// American founder and employee of Sally Ride Science (Q55206) ?resource kg:8994 kg:3401 . >// employed by University of California, San Diego (Q41506) ?resource kg:8994 kg:8712 . >// employed by National Aeronautics and Space Administration (Q622664) ?resource kg:8994 kg:2435 . >// employed by Center for International Security and Cooperation (Q5059715) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n  \"query\" : [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q1165050 wdt:P1040 ?resource .\",\n    \"  wd:Q93853 wdt:P1040 ?resource .\",\n    \"  wd:Q192115 wdt:P1040 ?resource .\",\n    \"  wd:Q656357 wdt:P1040 ?resource .\",\n    \"  wd:Q1165050 wdt:P86 ?resource .\",\n    \"  wd:Q93853 wdt:P86 ?resource .\",\n    \"  wd:Q192115 wdt:P86 ?resource .\",\n    \"  wd:Q656357 wdt:P86 ?resource .\",\n    \"  wd:Q1165050 wdt:P58 ?resource .\",\n    \"  wd:Q93853 wdt:P58 ?resource .\",\n    \"  wd:Q192115 wdt:P58 ?resource .\",\n    \"  wd:Q656357 wdt:P58 ?resource .\",\n    \"}\",\n    \"MINUS { ?resource wdt:P344 [] }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q1165050 wdt:P1040 ?resource . wd:Q93853 wdt:P1040 ?resource . wd:Q192115 wdt:P1040 ?resource . wd:Q656357 wdt:P1040 ?resource . wd:Q1165050 wdt:P86 ?resource . wd:Q93853 wdt:P86 ?resource . wd:Q192115 wdt:P86 ?resource . wd:Q656357 wdt:P86 ?resource . wd:Q1165050 wdt:P58 ?resource . wd:Q93853 wdt:P58 ?resource . wd:Q192115 wdt:P58 ?resource . wd:Q656357 wdt:P58 ?resource . } MINUS { ?resource wdt:P344 [] } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?entity kg:2617 kg:4292 .\", \"@comment kg:2617 is the property representing 'starring', and kg:4292 represents Q1165050 which could be a specific entity.\",\n \t\t\t\"OPTIONAL {?entity kg:8530 kg:2814 .}\", \"@comment kg:8530 could represent directing, and kg:2814 is an example of a resource for it.\",\n \t\t\t\"OPTIONAL {?entity kg:9292 kg:3024 .}\", \"@comment kg:9292 could represent editing, and kg:3024 is an example of a resource for it.\",\n \t\t\t\"OPTIONAL {?entity kg:6540 kg:1991 .}\" ,\"@comment kg:6540 could represent composing music, and kg:1991 is an example of a resource for it.\"\n \t\t,\"?resource wdt:P31 wd:Q4167895 .\" ,\"@comment Filter to ensure the result is a person (instance of human).\"\n \t,\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?entity kg:2617 kg:4292 . @comment kg:2617 is the property representing 'starring', and kg:4292 represents Q1165050 which could be a specific entity. OPTIONAL {?entity kg:8530 kg:2814 .} @comment kg:8530 could represent directing, and kg:2814 is an example of a resource for it. OPTIONAL {?entity kg:9292 kg:3024 .} @comment kg:9292 could represent editing, and kg:3024 is an example of a resource for it. OPTIONAL {?entity kg:6540 kg:1991 .} @comment kg:6540 could represent composing music, and kg:1991 is an example of a resource for it. ?resource wdt:P31 wd:Q4167895 . @comment Filter to ensure the result is a person (instance of human). } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\t\"?person wdt:P58 wd:Q29011 .\", \"@comment: Howl's Moving Castle executive producer and writer\",\n  \t\t\t\"?person wdt:P108 ?organization .\",\n  \t\t\t\"?organization wdt:P1431 ?typeOfEmployment .\",\n  \t\t\t\"VALUES ?organization { wd:Q1054807 wd:Q11490471 wd:Q11371930 wd:Q182950 wd:Q1136386 wd:Q947907 }\",\n  \t\t\t\"VALUES ?typeOfEmployment { wd:Q29011 }\"\n  \t\t,\n  \t\t\"}\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P58 wd:Q29011 . @comment: Howl's Moving Castle executive producer and writer ?person wdt:P108 ?organization . ?organization wdt:P1431 ?typeOfEmployment . VALUES ?organization { wd:Q1054807 wd:Q11490471 wd:Q11371930 wd:Q182950 wd:Q1136386 wd:Q947907 } VALUES ?typeOfEmployment { wd:Q29011 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?entity kg:5579 kg:9147 .\", \"@comment kg:5579 is employed by\",\n \t\t\t\"?entity kg:8123 kg:3791 .\", \"@comment kg:8123 is executive producer and writer for\",\n \t\t\t\"kg:3791 rdf:type kg:0935 .\", \"@comment kg:0935 is Howl's Moving Castle\",\n \t\t\t\"?entity kg:5579 kg:2383 .\", \"@comment kg:2383 is Nibariki\",\n \t\t\t\"OPTIONAL {?entity kg:5579 kg:6855 .}\", \"@comment kg:6855 is Ghibli Museum\",\n \t\t\t\"OPTIONAL {?entity kg:5579 kg:6855 .}\", \"@comment kg:6855 is TMS Entertainment\",\n \t\t\t\"?entity kg:5579 kg:9772 .\", \"@comment kg:9772 is Shin-Ei Animation\",\n \t\t\t\"OPTIONAL {?entity kg:5579 kg:4927 .}\", \"@comment kg:4927 is Studio Ghibli\",\n \t\t\t\"?entity kg:5579 kg:9147 .\", \"@comment kg:9147 is Tokuma Memorial Cultural Foundation for Animation\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?entity kg:5579 kg:9147 . @comment kg:5579 is employed by ?entity kg:8123 kg:3791 . @comment kg:8123 is executive producer and writer for kg:3791 rdf:type kg:0935 . @comment kg:0935 is Howl's Moving Castle ?entity kg:5579 kg:2383 . @comment kg:2383 is Nibariki OPTIONAL {?entity kg:5579 kg:6855 .} @comment kg:6855 is Ghibli Museum OPTIONAL {?entity kg:5579 kg:6855 .} @comment kg:6855 is TMS Entertainment ?entity kg:5579 kg:9772 . @comment kg:9772 is Shin-Ei Animation OPTIONAL {?entity kg:5579 kg:4927 .} @comment kg:4927 is Studio Ghibli ?entity kg:5579 kg:9147 . @comment kg:9147 is Tokuma Memorial Cultural Foundation for Animation } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n  \t\t\"SELECT ?resource\",\n  \t\t\"WHERE {\",\n  \t\t\t\"?film wdt:P57 wd:Q1415127 .\", \">// cinematographer Q1415127 for the film\"\n  \t\t\t,\"?film wdt:P58 wd:Q1415127 .\", \">// writer Q1415127 for the film\"\n  \t\t\t,\"?film wdt:P57 wd:Q208910 .\", \">// cinematographer Q208910 for the film\"\n  \t\t\t,\"?film wdt:P58 wd:Q208910 .\", \">// writer Q208910 for the film\"\n  \t\t\t,\"?film wdt:P57 wd:Q613974 .\", \">// cinematographer Q613974 for the film\"\n  \t\t\t,\"?film wdt:P58 wd:Q613974 .\", \">// writer Q613974 for the film\"\n  \t\t\t,\"?film wdt:P57 wd:Q1609393 .\", \">// cinematographer Q1609393 for the film\"\n  \t\t\t,\"?film wdt:P58 wd:Q1609393 .\", \">// writer Q1609393 for the film\"\n  \t\t\t,\"wd:Q17738 wdt:P57 ?resource .\", \">// director of Star Wars Episode IV A New Hope (Q17738)\"\n  \t\t\t,\"wd:Q17738 wdt:P1431 ?resource .\", \"// writer of Star Wars Episode IV A New Hope\"\n  \t\t\t,\"wd:Q17738 wdt:P58 ?resource .\" ,\"\\t\\t// executive producer of Star Wars Episode IV A New Hope\"\n  \t\t,\"}\"\n  \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P57 wd:Q1415127 . >// cinematographer Q1415127 for the film ?film wdt:P58 wd:Q1415127 . >// writer Q1415127 for the film ?film wdt:P57 wd:Q208910 . >// cinematographer Q208910 for the film ?film wdt:P58 wd:Q208910 . >// writer Q208910 for the film ?film wdt:P57 wd:Q613974 . >// cinematographer Q613974 for the film ?film wdt:P58 wd:Q613974 . >// writer Q613974 for the film ?film wdt:P57 wd:Q1609393 . >// cinematographer Q1609393 for the film ?film wdt:P58 wd:Q1609393 . >// writer Q1609393 for the film wd:Q17738 wdt:P57 ?resource . >// director of Star Wars Episode IV A New Hope (Q17738) wd:Q17738 wdt:P1431 ?resource . // writer of Star Wars Episode IV A New Hope wd:Q17738 wdt:P58 ?resource . // executive producer of Star Wars Episode IV A New Hope } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film kg:1640 ?cinematographer .\",\n \t\t\t\"?film kg:7307 ?writer .\",\n \t\t\t\"?film kg:0804 ?director .\",\n \t\t\t\"?film kg:5456 ?producer .\",\n \t\t\t\"?film <http://schema.org/name> \\\"Star Wars: Episode IV – A New Hope\\\"@en.\",\n \t\t\t\"?cinematographer <http://schema.org/name> \\\"Gilbert Taylor\\\"@en.\",\n \t\t\t\"?writer <http://schema.org/name> \\\"George Lucas\\\"@en.\",\n \t\t\t\"?director <http://schema.org/name> \\\"George Lucas\\\"@en.\",\n \t\t\t\"?producer <http://schema.org/name> \\\"George Lucas\\\"@en.\",\n \t\t\t\"?cinematographer kg:5153 ?herbie .\",\n \t\t\t\"?herbie <http://schema.org/name> \\\"Herbie\\\"@en.\",\n \t\t\t\"?writer kg:5153 ?prettyHowTown .\",\n \t\t\t\"?prettyHowTown <http://schema.org/name> \\\"Anyone Lived in a Pretty How Town\\\"@en.\",\n \t\t\t\"?director kg:5153 ?filmmaker .\",\n \t\t\t\"?filmmaker <http://schema.org/name> \\\"Filmmaker\\\"@en.\",\n \t\t\t\"?producer kg:5153 ?timeCode .\",\n \t\t\t\"?timeCode <http://schema.org/name> \\\"1:42.08\\\"@en.\"\n \t\t,\"?film kg:1640 ?resource .\" ,\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:1640 ?cinematographer . ?film kg:7307 ?writer . ?film kg:0804 ?director . ?film kg:5456 ?producer . ?film schema:name \"Star Wars: Episode IV – A New Hope\"@en. ?cinematographer schema:name \"Gilbert Taylor\"@en. ?writer schema:name \"George Lucas\"@en. ?director schema:name \"George Lucas\"@en. ?producer schema:name \"George Lucas\"@en. ?cinematographer kg:5153 ?herbie . ?herbie schema:name \"Herbie\"@en. ?writer kg:5153 ?prettyHowTown . ?prettyHowTown schema:name \"Anyone Lived in a Pretty How Town\"@en. ?director kg:5153 ?filmmaker . ?filmmaker schema:name \"Filmmaker\"@en. ?producer kg:5153 ?timeCode . ?timeCode schema:name \"1:42.08\"@en. ?film kg:1640 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n \t\t\t \t    \t\t\t\t\t\t    \"query\": [\n \t  \t \"SELECT ?cinematographer ?director ?editor WHERE {\"\n \t, \"  {?film wdt:P364 wd:Q3485595.}\"\n \t, \"  {?film wdt:P364 wd:Q1473406.}\"\n \t, \"  {?film wdt:P57 ?director.}\"\n \t, \"  {?film wdt:P1040 ?cinematographer.}\"\n \t, \"  {?film wdt:P1431 ?editor.}\"\n \t, \"  {wd:Q2085 wdt:P1431 ?fireWalkWithMeEditor.}\"\n \t, \"  {wd:Q2085 wdt:P57 ?fireWalkWithMeDirector.}\"\n \t, \"  {wd:Q2085 wdt:P1040 ?fireWalkWithMeCinematographer.}\"\n \t, \"  {wd:Q1140578 wdt:P1431 ?mySonEditor.}\"\n \t, \"  {wd:Q1140578 wdt:P57 ?mySonDirector.}\"\n \t, \"  {wd:Q1140578 wdt:P1040 ?mySonCinematographer.}\"\n \t, \"  FILTER(?cinematographer = ?fireWalkWithMeCinematographer)\"\n \t, \"  FILTER(?director = ?fireWalkWithMeDirector)\"\n \t, \"  FILTER(?editor = ?fireWalkWithMeEditor)\"\n \t, \"  FILTER(?cinematographer = ?mySonCinematographer)\"\n \t, \"  FILTER(?director = ?mySonDirector)\"\n \t, \"  FILTER(?editor = ?mySonEditor)}\"\n \t]\n}", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { {?film wdt:P364 wd:Q3485595.} {?film wdt:P364 wd:Q1473406.} {?film wdt:P57 ?director.} {?film wdt:P1040 ?cinematographer.} {?film wdt:P1431 ?editor.} {wd:Q2085 wdt:P1431 ?fireWalkWithMeEditor.} {wd:Q2085 wdt:P57 ?fireWalkWithMeDirector.} {wd:Q2085 wdt:P1040 ?fireWalkWithMeCinematographer.} {wd:Q1140578 wdt:P1431 ?mySonEditor.} {wd:Q1140578 wdt:P57 ?mySonDirector.} {wd:Q1140578 wdt:P1040 ?mySonCinematographer.} FILTER(?cinematographer = ?fireWalkWithMeCinematographer) FILTER(?director = ?fireWalkWithMeDirector) FILTER(?editor = ?fireWalkWithMeEditor) FILTER(?cinematographer = ?mySonCinematographer) FILTER(?director = ?mySonDirector) FILTER(?editor = ?mySonEditor)} LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{\n  \"query\": [\n    \"SELECT ?cinematographer ?director ?editor WHERE {\",\n    \"  kg:Q3485595 kg:P57 ?director .\",\n    \"  kg:Q3485595 kg:P1040 ?editor .\",\n    \"  kg:Q1473406 kg:P57 ?director .\",\n    \"  kg:Q1473406 kg:P1040 ?editor .\",\n    \"  kg:Q1140578 kg:P1431 ?producer .\",\n    \"  kg:Q1511905 kg:P1431 ?producer .\",\n    \"  kg:Q2085 kg:P1431 ?producer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?cinematographer ?director ?editor WHERE { kg:Q3485595 kg:P57 ?director . kg:Q3485595 kg:P1040 ?editor . kg:Q1473406 kg:P57 ?director . kg:Q1473406 kg:P1040 ?editor . kg:Q1140578 kg:P1431 ?producer . kg:Q1511905 kg:P1431 ?producer . kg:Q2085 kg:P1431 ?producer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n \t\t\"query\": [\n \t\t\"SELECT ?directorEditor WHERE {\",\n \t\t\t\"?film1 wdt:P57 ?directorEditor .\",\n \t\t\t\"?film1 wdt:P1040 wd:Q2449461 .\",\n \t\t\t\"?film2 wdt:P57 ?directorEditor .\",\n \t\t\t\"?film2 wdt:P1040 wd:Q45602 .\",\n \t\t\t\"?film3 wdt:P57 ?directorEditor .\",\n \t\t\t\"?film3 wdt:P1040 wd:Q166739 .\",\n \t\t\t\"?film4 wdt:P57 ?directorEditor .\",\n \t\t\t\"?film4 wdt:P1040 wd:Q374172 .\",\n \t\t\t\"?directorEditor wdt:P26 wd:Q32337 .\",\n \t\t\t\"?directorEditor wdt:P26 wd:Q137808 .\",\n \t\t\t\"?directorEditor wdt:P26 wd:Q241019 .\"\n \t\t,\"}\"]\n}", "normal_query": "SELECT ?directorEditor WHERE { ?film1 wdt:P57 ?directorEditor . ?film1 wdt:P1040 wd:Q2449461 . ?film2 wdt:P57 ?directorEditor . ?film2 wdt:P1040 wd:Q45602 . ?film3 wdt:P57 ?directorEditor . ?film3 wdt:P1040 wd:Q166739 . ?film4 wdt:P57 ?directorEditor . ?film4 wdt:P1040 wd:Q374172 . ?directorEditor wdt:P26 wd:Q32337 . ?directorEditor wdt:P26 wd:Q137808 . ?directorEditor wdt:P26 wd:Q241019 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n  \"query\": [\n    \"SELECT ?directorEditor WHERE {\",\n    \"  { kg:1085 kg:1503 ?directorEditor . }\", \">// P57 (position held) for director/editor\",\n    \"  UNION\",\n    \"  { kg:7001 kg:1503 ?directorEditor . }\", \">// P57 (position held) for director/editor\",\n    \"  UNION\",\n    \"  { kg:2856 kg:1503 ?directorEditor . }\", \">// P57 (position held) for director/editor\",\n    \"  UNION\",\n    \"  { kg:8455 kg:1503 ?directorEditor . }\", \">// P57 (position held) for director/editor\",\n    \"  FILTER(?directorEditor = kg:2813)\", \">// P1040 (divorcee) for Lita Grey and Mildred Harris\",\n    \"}\",\n    \"VALUES ?spouse { kg:5719 kg:4195 kg:6480 }\", \">// Q32337 (Lita Grey), Q137808 (Mildred Harris), Q241019 (Oona O'Neill)\",\n    \"FILTER EXISTS {?directorEditor kg:3979 ?spouse . }\" ,\"\\n>// P26 (in partner/spouse) for marriage\"\n    ]}\n    \t\t\t\t\t\t\t   \t\t\t\t\t", "normal_query": "SELECT ?directorEditor WHERE { { kg:1085 kg:1503 ?directorEditor . } >// P57 (position held) for director/editor UNION { kg:7001 kg:1503 ?directorEditor . } >// P57 (position held) for director/editor UNION { kg:2856 kg:1503 ?directorEditor . } >// P57 (position held) for director/editor UNION { kg:8455 kg:1503 ?directorEditor . } >// P57 (position held) for director/editor FILTER(?directorEditor = kg:2813) >// P1040 (divorcee) for Lita Grey and Mildred Harris } VALUES ?spouse { kg:5719 kg:4195 kg:6480 } >// Q32337 (Lita Grey), Q137808 (Mildred Harris), Q241019 (Oona O'Neill) FILTER EXISTS {?directorEditor kg:3979 ?spouse . } >// P26 (in partner/spouse) for marriage LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\n \t\t\t \t\t\"query\": [\n  \t\t\"{?charlieChaplin wdt:P31 wd:Q5 . ?work1 wdt:P58 ?charlieChaplin . ?work2 wdt:P57 ?charlieChaplin . ?work3 wdt:P1040 ?charlieChaplin}\"\n  \t\t]\n}", "normal_query": "{?charlieChaplin wdt:P31 wd:Q5 . ?work1 wdt:P58 ?charlieChaplin . ?work2 wdt:P57 ?charlieChaplin . ?work3 wdt:P1040 ?charlieChaplin} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?entity kg:8680 kg:0701 .\", \"@comment kg:0701 corresponds to the male gender.\",\n \t\t\t\"?entity kg:3311 ?writtenBy .\", \"@comment kg:3311 is a property indicating who wrote something.\",\n \t\t\t\"?entity kg:2155 ?editedBy .\", \"@comment kg:2155 is a property indicating who edited something.\",\n \t\t\t\"?entity kg:8011 ?directedBy .\" , \"@comment kg:8011 is a property indicating who directed something.\",\n \t\t\t\"?writtenBy kg:9816 kg:1774 .\", \"@comment kg:9816 indicates the instance of a class, and kg:1774 corresponds to Q5 (human).\",\n \t\t\t\"?editedBy kg:9816 kg:1774 .\",\n \t\t\t\"?directedBy kg:9816 kg:1774 .\",\n \t\t\t\"?writtenBy kg:0701 kg:2393 .\" , \"@comment kg:0701 again indicates the gender, and kg:2393 corresponds to Charlie Chaplin.\",\n \t\t\t\"?editedBy kg:0701 kg:2393 .\",\n \t\t\t\"?directedBy kg:0701 kg:2393 .\"\n \t\t,\"}\" ]\n}", "normal_query": "SELECT ?resource WHERE { ?entity kg:8680 kg:0701 . @comment kg:0701 corresponds to the male gender. ?entity kg:3311 ?writtenBy . @comment kg:3311 is a property indicating who wrote something. ?entity kg:2155 ?editedBy . @comment kg:2155 is a property indicating who edited something. ?entity kg:8011 ?directedBy . @comment kg:8011 is a property indicating who directed something. ?writtenBy kg:9816 kg:1774 . @comment kg:9816 indicates the instance of a class, and kg:1774 corresponds to Q5 (human). ?editedBy kg:9816 kg:1774 . ?directedBy kg:9816 kg:1774 . ?writtenBy kg:0701 kg:2393 . @comment kg:0701 again indicates the gender, and kg:2393 corresponds to Charlie Chaplin. ?editedBy kg:0701 kg:2393 . ?directedBy kg:0701 kg:2393 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"SELECT ?resource WHERE { \"\n      \t\t\t,\"?x wdt:P750 wd:Q2062523 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q3511946 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q7603552 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q1411292 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q3133593 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q219635 .\"\n      \t\t\t,\"?x wdt:P127 wd:Q505275 .\"\n      \t\t\t,\"?resource ?p ?x . \"\n      \t\t,\"} \"\n       ]\n}", "normal_query": "SELECT ?resource WHERE { ?x wdt:P750 wd:Q2062523 . ?x wdt:P127 wd:Q3511946 . ?x wdt:P127 wd:Q7603552 . ?x wdt:P127 wd:Q1411292 . ?x wdt:P127 wd:Q3133593 . ?x wdt:P127 wd:Q219635 . ?x wdt:P127 wd:Q505275 . ?resource ?p ?x . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE { kg:5133 kg:2576 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:5133 kg:7572 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:8244 kg:3466 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:8940 kg:3466 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:6539 kg:3466 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:6221 kg:3466 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:8972 kg:3466 ?resource . }\",\n \t\t\"UNION\",\n \t\t\"SELECT ?resource WHERE { kg:5809 kg:3466 ?resource . }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:5133 kg:2576 ?resource . } UNION SELECT ?resource WHERE { kg:5133 kg:7572 ?resource . } UNION SELECT ?resource WHERE { kg:8244 kg:3466 ?resource . } UNION SELECT ?resource WHERE { kg:8940 kg:3466 ?resource . } UNION SELECT ?resource WHERE { kg:6539 kg:3466 ?resource . } UNION SELECT ?resource WHERE { kg:6221 kg:3466 ?resource . } UNION SELECT ?resource WHERE { kg:8972 kg:3466 ?resource . } UNION SELECT ?resource WHERE { kg:5809 kg:3466 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n \t\t\t \t      \t\t\t\t\t\t\t\"query\": [\n  \t\t\"SELECT ?composer_editor_director WHERE {\"\n  \t\t\t,\"?city_lights wdt:P57 wd:Q45602 .\"\n  \t\t\t,\"?modern_times wdt:P57 wd:Q45602 .\"\n  \t\t\t,\"wd:Q166739 wdt:P57 ?composer_editor_director .\"\n  \t\t\t,\"?floorwalker wdt:P57 ?composer_editor_director .\"\n  \t\t\t,\"wd:Q238211 wdt:P1040 ?composer_editor_director .\"\n  \t\t\t,\"wd:Q214723 wdt:P1040 ?composer_editor_directory .\"\n  \t\t\t,\"wd:Q374172 wdt:P1040 ?composer_editor_directory .\"\n  \t\t\t,\"?gold_rush wdt:P57 ?composer_editor_director .\"\n  \t\t\t,\"FILTER(?composer_editor_directory = ?composer_editor_director)\"\n  \t\t,\"}\" ]\n} ", "normal_query": "SELECT ?composer_editor_director WHERE { ?city_lights wdt:P57 wd:Q45602 . ?modern_times wdt:P57 wd:Q45602 . wd:Q166739 wdt:P57 ?composer_editor_director . ?floorwalker wdt:P57 ?composer_editor_director . wd:Q238211 wdt:P1040 ?composer_editor_director . wd:Q214723 wdt:P1040 ?composer_editor_directory . wd:Q374172 wdt:P1040 ?composer_editor_directory . ?gold_rush wdt:P57 ?composer_editor_director . FILTER(?composer_editor_directory = ?composer_editor_director) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\t\"?film1 <http://schema.org/director> <https://www.wikidata.org/wiki/Q45602> .\",\n \t\t\t\"?film2 <http://schema.org/director> <https://www.wikidata.org/wiki/Q45602> .\",\n \t\t\t\"?film3 <http://schema.org/editor> <https://www.wikidata.org/wiki/Q45602> .\",\n \t\t\t\"?film4 <http://schema.org/editor> <https://www.wikidata.org/wiki/Q45602> .\",\n \t\t\t\"?film5 <http://schema.org/editor> <https://www.wikidata.org/wiki/Q45602> .\",\n \t\t\t\"?composer <http://schema.org/wikidataId> <https://www.wikidata.org/wiki/Q45602> .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?composer WHERE { ?film1 schema:director <https://www.wikidata.org/wiki/Q45602> . ?film2 schema:director <https://www.wikidata.org/wiki/Q45602> . ?film3 schema:editor <https://www.wikidata.org/wiki/Q45602> . ?film4 schema:editor <https://www.wikidata.org/wiki/Q45602> . ?film5 schema:editor <https://www.wikidata.org/wiki/Q45602> . ?composer schema:wikidataId <https://www.wikidata.org/wiki/Q45602> . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\"@prefix wd: <http://www.wikidata.org/entity/> .\\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n\\nSELECT ?resource WHERE {\\n  wd:Q1970252 wdt:P57 ?director.\\n  ?film1 wdt:P57 ?director.\\n  ?film1 wdt:P161 wd:Q1970252.\\n  ?film2 wdt:P57 ?director.\\n  ?film2 wdt:P161 wd:Q3017093.\\n  ?influencee wdt:P737 ?director.\\n  VALUES ?influencee { wd:Q88965291 wd:Q133730 }\\n}\\n\"]\n}", "normal_query": "@prefix wd: <http://www.wikidata.org/entity/> . @prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q1970252 wdt:P57 ?director. ?film1 wdt:P57 ?director. ?film1 wdt:P161 wd:Q1970252. ?film2 wdt:P57 ?director. ?film2 wdt:P161 wd:Q3017093. ?influencee wdt:P737 ?director. VALUES ?influencee { wd:Q88965291 wd:Q133730 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 wdt:P57 wd:Q1970252 .\",\n \t\t\t\"?film1 wdt:P161 wd:Q1970252 .\",\n \t\t\t\"?film2 wdt:P57 wd:Q3017093 .\",\n \t\t\t\"?film2 wdt:P161 wd:Q3017093 .\",\n \t\t\t\"wd:Q88965291 wdt:P737 ?resource .\",\n \t\t\t\"wd:Q133730 wdt:P737 ?resource\"\n \t\t,\"}\" ]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P57 wd:Q1970252 . ?film1 wdt:P161 wd:Q1970252 . ?film2 wdt:P57 wd:Q3017093 . ?film2 wdt:P161 wd:Q3017093 . wd:Q88965291 wdt:P737 ?resource . wd:Q133730 wdt:P737 ?resource } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n \t\t\t \t  \t    \t\t\"query\": [\n  \t\t \t  \t    \t\t\"{ ?item wdt:P106 wd:Q7042855 ;\",\n  \t\t \t  \t    \t\t\"       wdt:P26 wd:Q241019 ;\",\n  \t\t \t  \t    \t\t\"       wdt:P26 wd:Q32337 ;\",\n  \t\t \t  \t    \t\t\"       wdt:P26 wd:Q137808 ;\",\n  \t\t \t  \t    \t\t\"       wdt:P112 wd:Q157191 . }\"\n  \t\t\t \t  \t    \t\t]\n}", "normal_query": "{ ?item wdt:P106 wd:Q7042855 ; wdt:P26 wd:Q241019 ; wdt:P26 wd:Q32337 ; wdt:P26 wd:Q137808 ; wdt:P112 wd:Q157191 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource <http://schema.org/influencedBy> <http://example/kg:Q104340>. \",\n \t\t\t\"?resource <http://schema.org/influencedBy> <http://example/kg:Q219400>. \",\n \t\t\t\"?resource <http://schema.org/influencedBy> <http://example/kg:Q7371>. \",\n \t\t\t\"?resource <http://schema.org/marriedTo> <http://example/kg:Q7042855>. \",\n \t\t\t\"?resource <http://schema.org/marriedTo> <http://example/kg:Q137808>. \",\n \t\t\t\"?resource <http://schema.org/marriedTo> <http://example/kg:Q32337>. \",\n \t\t\t\"?resource <http://schema.org/founded> <http://example/kg:Q241019>. \"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource schema:influencedBy <http://example//kg:Q104340>. ?resource schema:influencedBy <http://example//kg:Q219400>. ?resource schema:influencedBy <http://example//kg:Q7371>. ?resource schema:marriedTo <http://example//kg:Q7042855>. ?resource schema:marriedTo <http://example//kg:Q137808>. ?resource schema:marriedTo <http://example//kg:Q32337>. ?resource schema:founded <http://example//kg:Q241019>. } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?star ?writer WHERE {\",\n    \"  wd:Q2709504 wdt:P57 ?director .\", \">// Jane B. par Agnès V. director is Q2709504\",\n    \"  wd:Q3204825 wdt:P57 ?director .\", \">// The Beaches of Agnès director is Q3204825\",\n    \"  wd:Q3161846 wdt:P57 ?director .\", \">// The World of Jacques Demy director is Q3161846\",\n    \"  wd:Q2709504 wdt:P161 ?star .\", \">// Jane B. par Agnès V. star is Q2709504\",\n    \"  wd:Q3204825 wdt:P161 ?star .\", \">// The Beaches of Agnès star is Q3204825\",\n    \"  wd:Q3161846 wdt:P161 ?star .\", \">// The World of Jacques Demy star is Q3161846\",\n    \"  wd:Q2709504 wdt:P58 ?writer .\", \">// Jane B. par Agnès V. writer is Q2709504\",\n    \"  wd:Q3204825 wdt:P58 ?writer .\", \">// The Beaches of Agnès writer is Q3204825\",\n    \"  wd:Q3161846 wdt:P58 ?writer .\", \">// The World of Jacques Demy writer is Q3161846\",\n    \"  ?director wdt:P737 wd:Q312258 .\", \">// director married to Q312258 (Jacques Demy)\",\n    \"  ?star wdt:P737 wd:Q312258 .\", \">// star married to Q312258 (Jacques Demy)\",\n    \"  ?writer wdt:P737 wd:Q312258 .\", \">// writer married to Q312258 (Jacques Demy)\",\n    \"?director wdt:P26 wd:Q312258 .\", \">// director spouse is Q312258\",\n    \"}\",\n    \"ORDER BY ?director ?star ?writer\"\n  ]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { wd:Q2709504 wdt:P57 ?director . >// Jane B. par Agnès V. director is Q2709504 wd:Q3204825 wdt:P57 ?director . >// The Beaches of Agnès director is Q3204825 wd:Q3161846 wdt:P57 ?director . >// The World of Jacques Demy director is Q3161846 wd:Q2709504 wdt:P161 ?star . >// Jane B. par Agnès V. star is Q2709504 wd:Q3204825 wdt:P161 ?star . >// The Beaches of Agnès star is Q3204825 wd:Q3161846 wdt:P161 ?star . >// The World of Jacques Demy star is Q3161846 wd:Q2709504 wdt:P58 ?writer . >// Jane B. par Agnès V. writer is Q2709504 wd:Q3204825 wdt:P58 ?writer . >// The Beaches of Agnès writer is Q3204825 wd:Q3161846 wdt:P58 ?writer . >// The World of Jacques Demy writer is Q3161846 ?director wdt:P737 wd:Q312258 . >// director married to Q312258 (Jacques Demy) ?star wdt:P737 wd:Q312258 . >// star married to Q312258 (Jacques Demy) ?writer wdt:P737 wd:Q312258 . >// writer married to Q312258 (Jacques Demy) ?director wdt:P26 wd:Q312258 . >// director spouse is Q312258 } ORDER BY ?director ?star ?writer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?director ?star ?writer \",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 wdt:P57 ?director .\",\n \t\t\t\"?film1 wdt:P58 ?star .\",\n \t\t\t\"?film1 wdt:P161 ?writer .\",\n \t\t\t\"?film2 wdt:P57 ?director .\",\n \t\t\t\"?film2 wdt:P58 ?star .\",\n \t\t\t\"?film2 wdt:P161 ?writer .\",\n \t\t\t\"?film3 wdt:P57 ?director .\",\n \t\t\t\"?film3 wdt:P58 ?star .\",\n \t\t\t\"?film3 wdt:P161 ?writer .\",\n \t\t\t\"?director wdt:P26 ?spouse .\",\n \t\t\t\"?director wdt:P737 ?influencee .\",\n \t\t\t\"?influencee wdt:P737 ?director .\",\n \t\t\t\"?film1 <http://schema.org/name> \\\"Jane B. par Agnès V.\\\"@en.\",\n \t\t\t\"?film2 <http://schema.org/name> \\\"The Beaches of Agnès\\\"@en.\",\n \t\t\t\"?film3 <http://schema.org/name> \\\"The World of Jacques Demy\\\"@en.\",\n \t\t\t\"?spouse wdt:P57 ?director .\",\n \t\t\t\"?spouse wdt:P161 ?writer .\",\n \t\t\t\"?influencee wdt:P57 ?director .\",\n \t\t\t\"?influencee wdt:P161 ?writer .\",\n \t\t\t\"?film1 <http://schema.org/name> \\\"Jane B. par Agnès V.\\\"@en.\",\n \t\t\t\"?film2 <http://schema.org/name> \\\"The Beaches of Agnès\\\"@en.\",\n \t\t\t\"?film3 <http://schema.org/name> \\\"The World of Jacques Demy\\\"@en.\"\n \t\t,\"}\",\n \t\t\"LIMIT 1\"\n \t]\n}", "normal_query": "SELECT ?director ?star ?writer WHERE { ?film1 wdt:P57 ?director . ?film1 wdt:P58 ?star . ?film1 wdt:P161 ?writer . ?film2 wdt:P57 ?director . ?film2 wdt:P58 ?star . ?film2 wdt:P161 ?writer . ?film3 wdt:P57 ?director . ?film3 wdt:P58 ?star . ?film3 wdt:P161 ?writer . ?director wdt:P26 ?spouse . ?director wdt:P737 ?influencee . ?influencee wdt:P737 ?director . ?film1 schema:name \"Jane B. par Agnès V.\"@en. ?film2 schema:name \"The Beaches of Agnès\"@en. ?film3 schema:name \"The World of Jacques Demy\"@en. ?spouse wdt:P57 ?director . ?spouse wdt:P161 ?writer . ?influencee wdt:P57 ?director . ?influencee wdt:P161 ?writer . ?film1 schema:name \"Jane B. par Agnès V.\"@en. ?film2 schema:name \"The Beaches of Agnès\"@en. ?film3 schema:name \"The World of Jacques Demy\"@en. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n \t\t\t \t      \t\t\t\"query\": [\n       \t\t\"SELECT ?resource WHERE {\"\n       \t \t \t\t]\n} ", "normal_query": "SELECT ?resource WHERE { LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P127> wd:Q17070012 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q849363 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q219635 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q65073147 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q318128 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q136469 .\",\n \t\t\t\"?resource <http://www.wikidata.org/prop/P272> wd:Q1628791 .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource p:P127 wd:Q17070012 . ?resource p:P272 wd:Q849363 . ?resource p:P272 wd:Q219635 . ?resource p:P272 wd:Q65073147 . ?resource p:P272 wd:Q318128 . ?resource p:P272 wd:Q136469 . ?resource p:P272 wd:Q1628791 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT ?resource WHERE {\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P1040 wd:Q3633009 .\", \"># Female Vampire (assuming Q3633009 is the correct ID for this work)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P57 wd:Q289021 .\", \"# editor role (assuming Q289021 is the correct person ID)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?resource wdt:P57 wd:Q463946 .\", \"# cinematographer role (assuming Q463946 is the correct person ID)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"wd:Q3207690 wdt:P58 ?writerDirector .\", \"># Spanish writer and director of 99 Women, No label defined, and The Blood of Fu Manchu\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?writerDirector wdt:P1040 wd:Q3207690 .\", \"# works by the writer/director (assuming Q3207690 is correct ID for this collection of works)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"?writerDirector wdt:P27 wd:Q29 .\" ,\"\\t\\t# Spanish nationality (wd:Q29)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\"}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q3633009 . > ?resource wdt:P57 wd:Q289021 . ?resource wdt:P57 wd:Q463946 . wd:Q3207690 wdt:P58 ?writerDirector . > ?writerDirector wdt:P1040 wd:Q3207690 . ?writerDirector wdt:P27 wd:Q29 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{\n \t\"query\" : [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:8940 kg:0652 .\", \"@comment kg:8940 is P57, which could represent a role or position in the context of filmography.\",\n \t\t\t\"?resource kg:3045 kg:1754 .\", \"@comment kg:3045 is P58, possibly indicating nationality or origin.\",\n \t\t\t\"OPTIONAL {?resource kg:9187 kg:6030 }\", \"@comment Optional connection to other works or entities.\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8940 kg:0652 . @comment kg:8940 is P57, which could represent a role or position in the context of filmography. ?resource kg:3045 kg:1754 . @comment kg:3045 is P58, possibly indicating nationality or origin. OPTIONAL {?resource kg:9187 kg:6030 } @comment Optional connection to other works or entities. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n \t\t\t \t      \t\t\t\t\t \t\t\"query\": [\n      \t\t\"?x ?p ?o\"\n      \t]\n     \t}\n     \t\t\t\t\t\t      \t\t\t", "normal_query": "?x ?p ?o LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{\n \t\t\t \t\t\"query\": [\n     \t\t\"SELECT ?resource WHERE { kg:4287 <http://schema.org/founder> ?resource . }\"\n    \t]\n}", "normal_query": "SELECT ?resource WHERE { kg:4287 schema:founder ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q85520081 wdt:P57 ?cinematographer .\",\n    \"  wd:Q96054985 wdt:P57 ?cinematographer .\",\n    \"  wd:Q85532437 wdt:P57 ?cinematographer .\",\n    \"  ?film wdt:P161 ?star .\",\n    \"  ?film wdt:P57 ?cinematographer .\",\n    \"  ?madnessFilm wdt:P58 ?resource ;\",\n    \"              wdt:P344 ?scriptWriter ;\",\n    \"              wdt:P1040 ?director ;\",\n    \"              wdt:P1431 ?producer ;\",\n    \"              wdt:P57 ?editor .\",\n    \"}\",\n    \"MINUS { ?resource rdfs:label ?exclude }\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q85520081 wdt:P57 ?cinematographer . wd:Q96054985 wdt:P57 ?cinematographer . wd:Q85532437 wdt:P57 ?cinematographer . ?film wdt:P161 ?star . ?film wdt:P57 ?cinematographer . ?madnessFilm wdt:P58 ?resource ; wdt:P344 ?scriptWriter ; wdt:P1040 ?director ; wdt:P1431 ?producer ; wdt:P57 ?editor . } MINUS { ?resource rdfs:label ?exclude } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film <http://schema.org/name> \\\"The Madness\\\"@en .\",\n \t\t\t\"?person <http://schema.org/director> ?film .\",\n \t\t\t\"?person <http://schema.org/writer> ?film .\",\n \t\t\t\"?person <http://schema.org/producer> ?film .\",\n \t\t\t\"?person <http://purl.org/dc/terms/contributorRole> \\\"Editing\\\"@en .\",\n \t\t\t\"{?person <http://schema.org/cinematographerOf> <\" ,\n \t\t\t\"<http://example.com/entity/Q85520081> } UNION {?person <http://schema.org/starOf> <\",\n \t\t\t\"<http://example.com/entity/Q85520081> } UNION {?person <http://schema.org/cinematographerOf> <\", \"http://example.com/entity/Q96054985> } UNION {?person <http://schema.org/starOf> <\", \"http://example.com/entity/Q96054985> } UNION {?person <http://schema.org/cinematographerOf> <\", \"http://example.com/entity/Q85532437> } UNION {?person <http://schema.org/starOf> <\", \"http://example.com/entity/Q85532437> .\",\n \t\t\t\"?film <http://schema.org/creator> ?resource .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film schema:name \"The Madness\"@en . ?person schema:director ?film . ?person schema:writer ?film . ?person schema:producer ?film . ?person dct:contributorRole \"Editing\"@en . {?person schema:cinematographerOf < <http://example.com/entity//Q85520081> } UNION {?person schema:starOf < <http://example.com/entity//Q85520081> } UNION {?person schema:cinematographerOf < <http://example.com/entity//Q96054985> } UNION {?person schema:starOf < <http://example.com/entity//Q96054985> } UNION {?person schema:cinematographerOf < <http://example.com/entity//Q85532437> } UNION {?person schema:starOf < <http://example.com/entity//Q85532437> . ?film schema:creator ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?writerCinematographer WHERE {\",\n    \"  wd:Q1609393 wdt:P58 ?writerCinematographer .\",\n    \"  wd:Q2411065 wdt:P58 ?writerCinematographer .\",\n    \"  wd:Q208910 wdt:P58 ?writerCinematographer .\",\n    \"  wd:Q613974 wdt:P58 ?writerCinematographer .\",\n    \"  ?writerCinematographer wdt:P26 wd:Q52306598 .\",\n    \"  ?writerCinematographer wdt:P737 wd:Q717378 .\",\n    \"  ?writerCinematographer wdt:P31 wd:Q5 .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?writerCinematographer WHERE { wd:Q1609393 wdt:P58 ?writerCinematographer . wd:Q2411065 wdt:P58 ?writerCinematographer . wd:Q208910 wdt:P58 ?writerCinematographer . wd:Q613974 wdt:P58 ?writerCinematographer . ?writerCinematographer wdt:P26 wd:Q52306598 . ?writerCinematographer wdt:P737 wd:Q717378 . ?writerCinematographer wdt:P31 wd:Q5 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{\n  \"query\": [\n    \"SELECT ?writerCinematographer WHERE {\",\n    \"  ?film1 wdt:P58 ?writerCinematographer .\",\n    \"  ?film2 wdt:P58 ?writerCinematographer .\",\n    \"  ?film3 wdt:P58 ?writerCinematographer .\",\n    \"  ?film4 wdt:P58 ?writerCinematographer .\",\n    \"  ?writerCinematographer wdt:P737 wd:Q613974 .\", \">// Marcus Orelias\"\n   \t,\"?writerCinematographer wdt:P737 wd:Q208910 .\" ,\"\\t>// Lorne Lanning\",\n    \"}\",\n    \"VALUES ?film1 { wd:Q1609393 }\", \">// The Emperor\"\n   \t,\"VALUES ?film2 { wd:Q52306598 }\", \">// Anyone Lived in a Pretty How Town\"\n   \t,\"VALUES ?film3 { wd:Q717378 }\", \">// 1:42.08\"\n   \t,\"VALUES ?film4 { wd:Q2411065 }\" ,\"\\t>// Herbie\"\n    ]\n}", "normal_query": "SELECT ?writerCinematographer WHERE { ?film1 wdt:P58 ?writerCinematographer . ?film2 wdt:P58 ?writerCinematographer . ?film3 wdt:P58 ?writerCinematographer . ?film4 wdt:P58 ?writerCinematographer . ?writerCinematographer wdt:P737 wd:Q613974 . >// Marcus Orelias ?writerCinematographer wdt:P737 wd:Q208910 . >// Lorne Lanning } VALUES ?film1 { wd:Q1609393 } >// The Emperor VALUES ?film2 { wd:Q52306598 } >// Anyone Lived in a Pretty How Town VALUES ?film3 { wd:Q717378 } >// 1:42.08 VALUES ?film4 { wd:Q2411065 } >// Herbie LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource\",\n    \"{\",\n    \"  wd:Q1361018 wdt:P57 ?director .\",\n    \"  wd:Q2086445 wdt:P57 ?cinematographer .\",\n    \"  wd:Q1361018 wdt:P1040 ?writer .\",\n    \"  wd:Q2086445 wdt:P1431 ?editor .\",\n    \"  wd:Q1361018 wdt:P58 ?producer .\",\n    \"}\",\n    \"UNION\",\n    \"{\",\n    \"  wd:Q18609037 wdt:P57 ?director .\",\n    \"  wd:Q222344 wdt:P57 ?cinematographer .\",\n    \"  wd:Q18609037 wdt:P1040 ?writer .\",\n    \"  wd:Q222344 wdt:P1431 ?editor .\",\n    \"  wd:Q18609037 wdt:P58 ?producer .\",\n    \"}\",\n    \"FILTER(?director = wd:Q1361018 || ?director = wd:Q18609037)\",\n    \"FILTER(?cinematographer = wd:Q2086445 || ?cinematographer = wd:Q222344)\",\n    \"FILTER(?writer = wd:Q1361018 || ?writer = wd:Q18609037)\",\n    \"FILTER(?editor = wd:Q2086445 || ?editor = wd:Q222344)\",\n    \"FILTER(?producer = wd:Q1361018 || ?producer = wd:Q18609037)\",\n    \"?director wdt:P106 wd:Q222344 .\",\n    \"?cinematographer wdt:P106 wd:Q2086445 .\",\n    \"BIND(?director AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource { wd:Q1361018 wdt:P57 ?director . wd:Q2086445 wdt:P57 ?cinematographer . wd:Q1361018 wdt:P1040 ?writer . wd:Q2086445 wdt:P1431 ?editor . wd:Q1361018 wdt:P58 ?producer . } UNION { wd:Q18609037 wdt:P57 ?director . wd:Q222344 wdt:P57 ?cinematographer . wd:Q18609037 wdt:P1040 ?writer . wd:Q222344 wdt:P1431 ?editor . wd:Q18609037 wdt:P58 ?producer . } FILTER(?director = wd:Q1361018 || ?director = wd:Q18609037) FILTER(?cinematographer = wd:Q2086445 || ?cinematographer = wd:Q222344) FILTER(?writer = wd:Q1361018 || ?writer = wd:Q18609037) FILTER(?editor = wd:Q2086445 || ?editor = wd:Q222344) FILTER(?producer = wd:Q1361018 || ?producer = wd:Q18609037) ?director wdt:P106 wd:Q222344 . ?cinematographer wdt:P106 wd:Q2086445 . BIND(?director AS ?resource) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:7860 p1040 ?resource .\",\n    \"  kg:7860 p57 ?resource .\",\n    \"  kg:7860 p1431 ?resource .\",\n    \"  kg:7860 p58 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:7860 p1040 ?resource . kg:7860 p57 ?resource . kg:7860 p1431 ?resource . kg:7860 p58 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"SELECT ?director ?spouse WHERE {\",\n    \"  wd:Q63993096 wdt:P58 ?director .\", \">// Vagabond directed by ?director\",\n    \"  wd:Q2493884 wdt:P58 ?director .\", \">// The Gleaners and I directed by ?director\",\n    \"  wd:Q2298257 wdt:P58 ?director .\", \">// Varda by Agnès directed by ?director\",\n    \"?director wdt:P1040 wd:Q312258 .\", \">// ?director is a film director\",\n    \"?spouse wdt:P26 ?director .\", \">// ?spouse married to ?director\",\n    \"?spouse wdt:P737 wd:Q312258 .\", \">// Jacques Demy influenced by ?spouse\"\n   \t,\"}\"\n  ]\n}", "normal_query": "SELECT ?director ?spouse WHERE { wd:Q63993096 wdt:P58 ?director . >// Vagabond directed by ?director wd:Q2493884 wdt:P58 ?director . >// The Gleaners and I directed by ?director wd:Q2298257 wdt:P58 ?director . >// Varda by Agnès directed by ?director ?director wdt:P1040 wd:Q312258 . >// ?director is a film director ?spouse wdt:P26 ?director . >// ?spouse married to ?director ?spouse wdt:P737 wd:Q312258 . >// Jacques Demy influenced by ?spouse } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?film1 wdt:P58 ?director .\",\n \t\t\t\"?film2 wdt:P58 ?director .\",\n \t\t\t\"?film3 wdt:P58 ?director .\",\n \t\t\t\"?director wdt:P737 ?influencee .\",\n \t\t\t\"?director wdt:P26 ?spouse .\",\n \t\t\t\"?spouse wdt:P1040 ?influencee .\",\n \t\t\t\"OPTIONAL { ?film1 rdfs:label \\\"Vagabond\\\"@en. }\",\n \t\t\t\"OPTIONAL { ?film2 rdfs:label \\\"The Gleaners and I\\\"@en. }\",\n \t\t\t\"OPTIONAL { ?film3 rdfs:label \\\"Varda by Agnès\\\"@en. }\",\n \t\t\t\"?influencee wdt:P106 wd:Q312258 .\",\n \t\t\t\"?director wdt:P1040 ?spouse .\",\n \t\t\t\"FILTER(?resource = ?film1 || ?resource = ?film2 || ?resource = ?film3 || ?resource = ?influencee)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?film1 wdt:P58 ?director . ?film2 wdt:P58 ?director . ?film3 wdt:P58 ?director . ?director wdt:P737 ?influencee . ?director wdt:P26 ?spouse . ?spouse wdt:P1040 ?influencee . OPTIONAL { ?film1 rdfs:label \"Vagabond\"@en. } OPTIONAL { ?film2 rdfs:label \"The Gleaners and I\"@en. } OPTIONAL { ?film3 rdfs:label \"Varda by Agnès\"@en. } ?influencee wdt:P106 wd:Q312258 . ?director wdt:P1040 ?spouse . FILTER(?resource = ?film1 || ?resource = ?film2 || ?resource = ?film3 || ?resource = ?influencee) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n \t\t\t \t\t\"query\": [\n      \t\t\"SELECT ?resource WHERE {\",\n      \t\t\t\"?resource wdt:P127 wd:Q2062523 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q3511946 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q7603552 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q2007336 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q219635 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q505275 .\",\n      \t\t\t\"?resource wdt:P127 wd:Q849363 .\"\n      \t\t,\"}\"]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P127 wd:Q2062523 . ?resource wdt:P127 wd:Q3511946 . ?resource wdt:P127 wd:Q7603552 . ?resource wdt:P127 wd:Q2007336 . ?resource wdt:P127 wd:Q219635 . ?resource wdt:P127 wd:Q505275 . ?resource wdt:P127 wd:Q849363 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\t\"?resource kg:3944 kg:0968 .\",\n \t\t\t\"kg:0968 kg:2147 kg:3261 .\",\n \t\t\t\"kg:0968 kg:9566 kg:3199 .\",\n \t\t\t\"kg:0968 kg:9566 kg:4291 .\",\n \t\t\t\"kg:0968 kg:9566 kg:1622 .\",\n \t\t\t\"kg:0968 kg:9566 kg:6334 .\",\n \t\t\t\"kg:0968 kg:9566 kg:4156 .\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3944 kg:0968 . kg:0968 kg:2147 kg:3261 . kg:0968 kg:9566 kg:3199 . kg:0968 kg:9566 kg:4291 . kg:0968 kg:9566 kg:1622 . kg:0968 kg:9566 kg:6334 . kg:0968 kg:9566 kg:4156 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"{\",\n    \"  ?film wdt:P31 wd:Q11424 ;\", \"# Instance of film\",\n    \"        wdt:P58 wd:Q16390 ;\", \"# Written by Randolph Scott (assuming Q16390 is the correct ID)\",\n    \"        wdt:P57 wd:Q295984 ;\", \"# Directed by Miriam Hopkins (assuming Q295984 is the correct ID, likely incorrect but following pattern)\",\n    \"        wdt:P162 wd:Q4420093 ;\", \"# Produced by Humphrey Bogart (assuming Q4420093 is the correct ID, likely incorrect but following pattern)\",\n    \"        wdt:P58 wd:Q242477 .\", \"# Written by Robert Buckner (assuming Q242477 is the correct ID)\"\n    ,\n    \"  ?film wdt:P161 wd:Q93188 ;\", \"# Starring Errol Flynn\"\n    ,\n    \"  ?film wdt:P161 wd:Q744357 .\", \"# Starring Paul Fix\"\n    ,\n    \"}\"\n  ]\n}\n   \t\t\t\t      \t\t\t\t  \t", "normal_query": "SELECT ?film { ?film wdt:P31 wd:Q11424 ; wdt:P58 wd:Q16390 ; wdt:P57 wd:Q295984 ; wdt:P162 wd:Q4420093 ; wdt:P58 wd:Q242477 . ?film wdt:P161 wd:Q93188 ; ?film wdt:P161 wd:Q744357 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:14b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{\n  \"query\": [\n    \"SELECT ?film WHERE {\",\n    \"  kg:7320 p-p:P57/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"  kg:4532 p-p:P58/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"  kg:1933 p-p:P161/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"  kg:0291 p-p:P57/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"  kg:7895 p-p:P162/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"  kg:5442 p-p:P272/rdfs:domain/rdf:type/schema:CreativeWork ?film .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?film WHERE { kg:7320 p-p:P57/rdfs:domain/rdf:type/schema:CreativeWork ?film . kg:4532 p-p:P58/rdfs:domain/rdf:type/schema:CreativeWork ?film . kg:1933 p-p:P161/rdfs:domain/rdf:type/schema:CreativeWork ?film . kg:0291 p-p:P57/rdfs:domain/rdf:type/schema:CreativeWork ?film . kg:7895 p-p:P162/rdfs:domain/rdf:type/schema:CreativeWork ?film . kg:5442 p-p:P272/rdfs:domain/rdf:type/schema:CreativeWork ?film . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"?entity wdt:P106 wd:Q103013 .\",\n    \"FILTER(?entity = wd:Q69423232)\"\n  ]\n}", "normal_query": "?entity wdt:P106 wd:Q103013 . FILTER(?entity = wd:Q69423232) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n  \"query\": [\n    \"?person\",\n    \"kg:7910\",\n    \"kg:9740\"\n  ]\n}", "normal_query": "?person kg:7910 kg:9740 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"?resource wdt:P1040 wd:Q853 .\"\n  ]\n}", "normal_query": "?resource wdt:P1040 wd:Q853 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n  kg:0714 kg:5624 ?resource . \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0714 kg:5624 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  ?resource wdt:P155 wd:Q1042294.\\n}\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P155 wd:Q1042294. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1291 kg:1047 ?resource . FILTER(?resource = kg:9162) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:1291 kg:1047 ?resource . FILTER(?resource = kg:9162) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\n@prefix wd: <http://www.wikidata.org/entity/> .\\n\\nSELECT ?resource WHERE {\\n    ?sequel wdt:P155 wd:Q131593.\\n    FILTER (?sequel = wd:Q168)\\n}\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . @prefix wd: <http://www.wikidata.org/entity/> . SELECT ?resource WHERE { ?sequel wdt:P155 wd:Q131593. FILTER (?sequel = wd:Q168) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Π 's sequel san", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    kg:4953 kg:1888 ?resource . \\n    FILTER (STR(?resource) = \\\"Q168\\\") \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:4953 kg:1888 ?resource . FILTER (STR(?resource) = \"Q168\") } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n  \"query\": [\n    \"?parent wdt:P40 wd:Q260 .\"\n  ]\n}", "normal_query": "?parent wdt:P40 wd:Q260 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?parent \\nWHERE { \\n    kg:7406 kg:P40|kg:P355 ?parent . \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?parent WHERE { kg:7406 kg:P40|kg:P355 ?parent . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\": [\n    \"?person wdt:P108 ?employer .\",\n    \"?person wikibase:sense wd:Q79070 .\",\n    \"?employer wikibase:sense wd:Q40 .\"\n  ]\n}", "normal_query": "?person wdt:P108 ?employer . ?person wikibase:sense wd:Q79070 . ?employer wikibase:sense wd:Q40 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n  \"query\": [\n    \"?person wdt:P108 ?employer .\",\n    \"FILTER(?person = wd:Q79070)\",\n    \"FILTER(?employer = wd:Q40)\"\n  ]\n}", "normal_query": "?person wdt:P108 ?employer . FILTER(?person = wd:Q79070) FILTER(?employer = wd:Q40) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\": [\n    \"?movie wdt:P58 ?author.\",\n    \"?movie wd:Q80379.\",\n    \"?author wd:Q892.\"\n  ]\n}", "normal_query": "?movie wdt:P58 ?author. ?movie wd:Q80379. ?author wd:Q892. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:7109 kg:7976 ?resource . FILTER (?resource = kg:5079) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:7109 kg:7976 ?resource . FILTER (?resource = kg:5079) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"?movie wdt:P57 wd:Q72276 ;\",\n    \"wdt:P1431 ?executive_producer .\"\n  ]\n}", "normal_query": "?movie wdt:P57 wd:Q72276 ; wdt:P1431 ?executive_producer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0000 kg:7729 ?resource . FILTER (?resource = kg:8619) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0000 kg:7729 ?resource . FILTER (?resource = kg:8619) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"?resource wdt:P2515 wd:Q36834 ;\",\n    \"wdt:P106 wd:Q2733930 .\"\n  ]\n}", "normal_query": "?resource wdt:P2515 wd:Q36834 ; wdt:P106 wd:Q2733930 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n  ?resource kg:P2515 kg:8685 ; \\n            kg:P106 kg:7624 . \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P2515 kg:8685 ; kg:P106 kg:7624 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"?resource wdt:P344 wd:Q69423232 ;\",\n    \"wdt:P106 wd:Q158069 .\"\n  ]\n}", "normal_query": "?resource wdt:P344 wd:Q69423232 ; wdt:P106 wd:Q158069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{ \"query\": [\n    \"?resource kg:P344 kg:Q69423232 .\",\n    \"?resource kg:P106 kg:Q158069 .\"\n] }", "normal_query": "?resource kg:P344 kg:Q69423232 . ?resource kg:P106 kg:Q158069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n  \"query\": [\n    \"?spouse wdt:P26 wd:Q2607 .\",\n    \"?spouse wdt:P108 ?organization .\",\n    \"?organization wdt:P31 wd:Q76845 .\"\n  ]\n}\n    ", "normal_query": "?spouse wdt:P26 wd:Q2607 . ?spouse wdt:P108 ?organization . ?organization wdt:P31 wd:Q76845 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0885 kg:2718 ?spouse . ?spouse kg:5635 kg:1941 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:0885 kg:2718 ?spouse . ?spouse kg:5635 kg:1941 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P272 wd:Q36834;\",\n \t\t\"?item wdt:P162 ?composer.\",\n \t\t\"?composer wdt:P106 wd:Q208824.\"\n \t]\n}", "normal_query": "?item wdt:P272 wd:Q36834; ?item wdt:P162 ?composer. ?composer wdt:P106 wd:Q208824. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n  kg:7537 kg:8864 ?composer . \\n  ?composer kg:0295 kg:8026 . \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:7537 kg:8864 ?composer . ?composer kg:0295 kg:8026 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"?composer wdt:P86 wd:Q69423232 ;\",\n    \"wdt:P106 wd:Q577126 .\"\n] }", "normal_query": "?composer wdt:P86 wd:Q69423232 ; wdt:P106 wd:Q577126 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{ \"query\": [\n    \"?composer kg:3068 kg:7339 .\",\n    \"?composer kg:3969 kg:0549 .\"\n] }", "normal_query": "?composer kg:3068 kg:7339 . ?composer kg:3969 kg:0549 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"?composer wdt:P86 wd:Q222344 ;\",\n    \"wdt:P106 ?occupation .\",\n    \"?occupation wdt:P279* wd:Q76582 .\"\n] }", "normal_query": "?composer wdt:P86 wd:Q222344 ; wdt:P106 ?occupation . ?occupation wdt:P279* wd:Q76582 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    ?composer kg:P86 kg:7704 ; \\n              kg:P106 ?occupation . \\n    FILTER (?occupation = kg:5106 || ?occupation = kg:1865) \\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?composer kg:P86 kg:7704 ; kg:P106 ?occupation . FILTER (?occupation = kg:5106 || ?occupation = kg:1865) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q4348691; # sequel of Microsoft Flight Simulator 2004: A Century of Flight\\n\",\n \t\t\"wdt:P750 ?distributor. # distributed by\\n\",\n \t\t\"FILTER (?distributor = wd:Q2283) # Microsoft\\n\"\n \t]\n}", "normal_query": "?sequel wdt:P155 wd:Q4348691; wdt:P750 ?distributor. FILTER (?distributor = wd:Q2283) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2898 kg:0040 ?resource . FILTER (?resource = kg:9554) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2898 kg:0040 ?resource . FILTER (?resource = kg:9554) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{ \"query\": [\n    \"?sequel wdt:P161 wd:Q967797 ;\",\n    \"wdt:P155 wd:Q2085 .\"\n] }", "normal_query": "?sequel wdt:P161 wd:Q967797 ; wdt:P155 wd:Q2085 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?sequel kg:P155 kg:7081 ; kg:P161 kg:5276 }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?sequel kg:P155 kg:7081 ; kg:P161 kg:5276 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"?founder wdt:P112 wd:Q81950264 ;\",\n    \"wdt:P40 ?child .\",\n    \"?obama wdt:P355 wd:Q15070044 ;\",\n    \"wdt:P40 ?child .\"\n  ]\n}", "normal_query": "?founder wdt:P112 wd:Q81950264 ; wdt:P40 ?child . ?obama wdt:P355 wd:Q15070044 ; wdt:P40 ?child . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n  \"query\": [\n    \"?founder kg:5208 kg:3621 .\",\n    \"?parent kg:2362 kg:9431 .\",\n    \"FILTER (?founder = ?parent)\"\n  ]\n}", "normal_query": "?founder kg:5208 kg:3621 . ?parent kg:2362 kg:9431 . FILTER (?founder = ?parent) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P3373 wd:Q352 ;\",\n \t\t\"wdt:P108 ?employment .\",\n \t\t\"?employment rdfs:label \\\"Uniqa Insurance Group\\\"@en.\"\n \t]\n}", "normal_query": "?sibling wdt:P3373 wd:Q352 ; wdt:P108 ?employment . ?employment rdfs:label \"Uniqa Insurance Group\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:6535 kg:9040 ?sibling . ?sibling kg:5670 kg:6467 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:6535 kg:9040 ?sibling . ?sibling kg:5670 kg:6467 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\": [\n    \"?employer wdt:P108 wd:Q6078 ;\",\n    \"wdt:P750 wd:Q42310881 .\"\n  ]\n}", "normal_query": "?employer wdt:P108 wd:Q6078 ; wdt:P750 wd:Q42310881 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2903 kg:9526 ?employer . FILTER(?employer = kg:5020) kg:5020 kg:2310 ?resource . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2903 kg:9526 ?employer . FILTER(?employer = kg:5020) kg:5020 kg:2310 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n  \"query\": [\n    \"?malia_parent wdt:P40 wd:Q15070044 ;\",\n    \"?malia_parent wdt:P355 ?employer ;\",\n    \"?employer wdt:P108 wd:Q103941992 .\"\n  ]\n}", "normal_query": "?malia_parent wdt:P40 wd:Q15070044 ; ?malia_parent wdt:P355 ?employer ; ?employer wdt:P108 wd:Q103941992 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n \t\"query\": [\n \t\t\"?parent kg:1689 ?child .\",\n \t\t\"?child kg:4817 wd:Q15070044 .\",\n \t\t\"?employer kg:3071 ?parent .\",\n \t\t\"?employer kg:9336 wd:Q103941992 .\"\n \t]\n}", "normal_query": "?parent kg:1689 ?child . ?child kg:4817 wd:Q15070044 . ?employer kg:3071 ?parent . ?employer kg:9336 wd:Q103941992 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P3373 ?sibling.\",\n \t\t\"?sibling rdfs:label \\\"Pierre Van Dormael\\\"@en.\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P106 wd:Q1323191. ?costumeDesigner wdt:P26 ?spouse. ?spouse wdt:P3373 ?sibling. ?sibling rdfs:label \"Pierre Van Dormael\"@en. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:9513 kg:5504; \", \">// P106 (occupation) = Q1323191 (costume designer) for ?costumeDesigner variable binding. This line is to find the costume designers in the KG. However, this might not be accurate as Q1323191 does not directly correspond to \"] }\n   \t", "normal_query": "?costumeDesigner kg:9513 kg:5504; >// P106 (occupation) = Q1323191 (costume designer) for ?costumeDesigner variable binding. This line is to find the costume designers in the KG. However, this might not be accurate as Q1323191 does not directly correspond to LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1102919 .\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P112 wd:Q1323191 .\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P106 wd:Q1102919 . ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?costumeDesigner kg:9700 ?spouse . ?spouse kg:9356 kg:0522 . ?costumeDesigner kg:5767 kg:3343 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?costumeDesigner kg:9700 ?spouse . ?spouse kg:9356 kg:0522 . ?costumeDesigner kg:5767 kg:3343 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q2643 .\",\n \t\t\"?resource wdt:P58 wd:Q2643\"\n \t]\n}", "normal_query": "?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{ \"query\": [\n    \"?resource kg:P57 kg:8693 .\",\n    \"?resource kg:P58 kg:8693 .\"\n] }", "normal_query": "?resource kg:P57 kg:8693 . ?resource kg:P58 kg:8693 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q24907.\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q24907. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{ \"query\": [\n    \"?resource kg:3729 kg:9130 .\"\n] }", "normal_query": "?resource kg:3729 kg:9130 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q4990261;\",\n \t\t\"wdt:P27 wd:Q34;\",\n \t\t\"wdt:P106 wdt:Q1323191.\"\n \t]\n}", "normal_query": "?parent wdt:P40 wd:Q4990261; wdt:P27 wd:Q34; wdt:P106 wdt:Q1323191. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{ \"query\": [\n    \"?parent kg:8815 kg:4112 .\", \">// Nadja Weiss (Q4990261) as costume designer (Q1323191, P106) is not directly usable in this context. Instead, we focus on the parent's nationality and relation to Nadja Weiss indirectly through properties available. Here, we assume kg:8815 represents a property linking Nadja Weiss to her parents or family relations, which isn't explicitly defined but inferred for the sake of constructing a query based on provided entities and properties. The correct approach would require specific properties defining parent-child relationships and nationality directly linked to Nadja Weiss's Swedish parent in the knowledge graph schema, which are not fully provided here. Thus, this is an illustrative example under these constraints.\",\n    \"?parent kg:3398 kg:5057 .\" ] }", "normal_query": "?parent kg:8815 kg:4112 . >// Nadja Weiss (Q4990261) as costume designer (Q1323191, P106) is not directly usable in this context. Instead, we focus on the parent's nationality and relation to Nadja Weiss indirectly through properties available. Here, we assume kg:8815 represents a property linking Nadja Weiss to her parents or family relations, which isn't explicitly defined but inferred for the sake of constructing a query based on provided entities and properties. The correct approach would require specific properties defining parent-child relationships and nationality directly linked to Nadja Weiss's Swedish parent in the knowledge graph schema, which are not fully provided here. Thus, this is an illustrative example under these constraints. ?parent kg:3398 kg:5057 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"?spouse wdt:P26 wd:Q3514303 ;\",\n    \"wdt:P27 wd:Q17 ;\",\n    \"wdt:P106 wdt:Q222344 .\"\n  ]\n}\n", "normal_query": "?spouse wdt:P26 wd:Q3514303 ; wdt:P27 wd:Q17 ; wdt:P106 wdt:Q222344 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{ \"query\": [\n    \"?person kg:5652 ?spouse .\", \">// P26 represents spouse/spouses of the person in question, so we're looking for Takenori Sentō's spouse(s) here. The variable ?person will represent Takenori Sentō and ?spouse will represent his spouse(s). We need to replace \" ,\" with a new line for proper SPARQL syntax. Also, the entities provided don't directly give us information about Takenori Sentō or Japanese cinematographers, so we'll have to work within these constraints. The query below is constructed based on the given properties and entities but won't return meaningful results without additional context or data in the knowledge graph regarding Takenori Sentō and his spouse's profession. Therefore, this example focuses on structure rather than content accuracy with the provided information.\",\n    \"?spouse kg:1102 kg:8757 .\", \">// P106 represents occupation, so we're checking if the spouse has an occupation of a cinematographer (Q222344). However, this assumes that Q222344 is indeed \"] }\n    ", "normal_query": "?person kg:5652 ?spouse . >// P26 represents spouse/spouses of the person in question, so we're looking for Takenori Sentō's spouse(s) here. The variable ?person will represent Takenori Sentō and ?spouse will represent his spouse(s). We need to replace with a new line for proper SPARQL syntax. Also, the entities provided don't directly give us information about Takenori Sentō or Japanese cinematographers, so we'll have to work within these constraints. The query below is constructed based on the given properties and entities but won't return meaningful results without additional context or data in the knowledge graph regarding Takenori Sentō and his spouse's profession. Therefore, this example focuses on structure rather than content accuracy with the provided information. ?spouse kg:1102 kg:8757 . >// P106 represents occupation, so we're checking if the spouse has an occupation of a cinematographer (Q222344). However, this assumes that Q222344 is indeed LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P108 ?employer .\",\n \t\t\"?movie wdt:P57 ?costumeDesigner .\",\n \t\t\"?movie wdt:P1476 ?title .\",\n \t\t\"FILTER(?title = 'Joe's Bed-Stuy Barbershop: We Cut Heads') .\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P108 ?employer . ?movie wdt:P57 ?costumeDesigner . ?movie wdt:P1476 ?title . FILTER(?title = 'Joe's Bed-Stuy Barbershop: We Cut Heads') . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?costumeDesigner kg:P106 kg:1388. ?producer kg:P108 ?employer. ?movie kg:P272 ?producer. ?movie kg:Q1141467 \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en . FILTER EXISTS { ?costumeDesigner kg:Q1141467 ?movie . } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?costumeDesigner kg:P106 kg:1388. ?producer kg:P108 ?employer. ?movie kg:P272 ?producer. ?movie kg:Q1141467 \"Joe's Bed-Stuy Barbershop: We Cut Heads\"@en . FILTER EXISTS { ?costumeDesigner kg:Q1141467 ?movie . } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191.\",\n \t\t\"?sibling wdt:P3373 ?costumeDesigner.\",\n \t\t\"?sibling wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P3373 wd:Q461354.\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P106 wd:Q1323191. ?sibling wdt:P3373 ?costumeDesigner. ?sibling wdt:P26 ?spouse. ?spouse wdt:P3373 wd:Q461354. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner kg:4040 kg:3988 .\",\n \t\t\"?sibling kg:P3373 ?costumeDesigner .\",\n \t\t\"?sibling kg:7684 kg:5129 .\"\n \t]\n}", "normal_query": "?costumeDesigner kg:4040 kg:3988 . ?sibling kg:P3373 ?costumeDesigner . ?sibling kg:7684 kg:5129 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"?employer wdt:P108 ?company;\",\n              \"wdt:P31 wd:Q4830453.\",\n    \"?company wdt:P355 wd:Q67134.\"\n  ]\n}", "normal_query": "?employer wdt:P108 ?company; wdt:P31 wd:Q4830453. ?company wdt:P355 wd:Q67134. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{ \"query\": [\"@subject kg:0342 ?employer . ?employer kg:8023 ?parentCompany .\"] }", "normal_query": "@subject kg:0342 ?employer . ?employer kg:8023 ?parentCompany . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n \t\"query\": [\n \t\t\"?claire wdt:P31 wd:Q5;\",\n \t\t\"wdt:P108 ?employer.\",\n \t\t\"?film wdt:P750 ?employer;\"\n \t\t,\"wdt:P31 wd:Q11424.\"\n \t]\n }", "normal_query": "?claire wdt:P31 wd:Q5; wdt:P108 ?employer. ?film wdt:P750 ?employer; wdt:P31 wd:Q11424. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{ \"query\": [\n    \"?employer kg:7435 kg:8161 ;\", \">// P108 for employer of Claire Doutriaux (Q1094792) which is kg:8161 in the given mapping. The property P108 represents \" ,\"employer\" ,\".\"\n    ,\n    \"?employer kg:1977 ?film ;\", \">// P750 for distributor of a film, but since we are looking for employer who was also a distributor, we use this to link an entity that is both. The property P750 represents \" ,\"distributor\" ,\".\"\n    ,\n    \"?employer kg:2298 kg:6868 .\" , \">// P31 for instance of, and Q11424 (kg:6868) could represent a company or organization. The property P31 represents \" ,\"instance of\" ,\".\"\n] }", "normal_query": "?employer kg:7435 kg:8161 ; >// P108 for employer of Claire Doutriaux (Q1094792) which is kg:8161 in the given mapping. The property P108 represents employer . ?employer kg:1977 ?film ; >// P750 for distributor of a film, but since we are looking for employer who was also a distributor, we use this to link an entity that is both. The property P750 represents distributor . ?employer kg:2298 kg:6868 . >// P31 for instance of, and Q11424 (kg:6868) could represent a company or organization. The property P31 represents instance of . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"?producer wdt:P750 wd:Q1651543 ;\",\n    \"wdt:P112 ?swedish_founder .\"\n  ]\n}", "normal_query": "?producer wdt:P750 wd:Q1651543 ; wdt:P112 ?swedish_founder . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9250 kg:3121 ?producerDistributor . ?producerDistributor kg:7989 kg:8263 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:9250 kg:3121 ?producerDistributor . ?producerDistributor kg:7989 kg:8263 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n \t\"query\": [\n \t\t\"?mark_sylwan wdt:P26 ?spouse.\",\n \t\t\"?spouse wdt:P106 wd:Q1323191;\",\n \t\t\"wdt:P27 wd:Q34.\"\n \t]\n}", "normal_query": "?mark_sylwan wdt:P26 ?spouse. ?spouse wdt:P106 wd:Q1323191; wdt:P27 wd:Q34. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{ \"query\": [\"@subject kg:7184 kg:3313 . @subject kg:0399 kg:0061 . @subject kg:2954 kg:5786 .\"] }", "normal_query": "@subject kg:7184 kg:3313 . @subject kg:0399 kg:0061 . @subject kg:2954 kg:5786 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n \t\"query\": [\n \t\t\"?spouse_or_sibling wdt:P26 wd:Q2045778 .\",\n \t\t\"{?spouse_or_sibling wdt:P3373 wd:Q3356.} UNION {?spouse_or_sibling wdt:P3373 wd:Q2045778.}\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?spouse_or_sibling wdt:P26 wd:Q2045778 . {?spouse_or_sibling wdt:P3373 wd:Q3356.} UNION {?spouse_or_sibling wdt:P3373 wd:Q2045778.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n \t\"query\": [\n    \t\"?x (kg:5747/kg:0822|kg:5747/kg:5421) kg:3622.\"\n    ]\n}", "normal_query": "?x (kg:5747/kg:0822|kg:5747/kg:5421) kg:3622. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"?distributor wdt:P112 wd:Q34 ;\",\n    \"wdt:P750 wd:Q1651543 .\"\n  ]\n}", "normal_query": "?distributor wdt:P112 wd:Q34 ; wdt:P750 wd:Q1651543 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:8236 kg:2760 ?producer . kg:8236 kg:6570 ?distributor . FILTER (?producer = kg:2549 && ?distributor = kg:2549) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:8236 kg:2760 ?producer . kg:8236 kg:6570 ?distributor . FILTER (?producer = kg:2549 && ?distributor = kg:2549) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n  \"query\": [\n    \"?founder wdt:P3373 wd:Q117892 ;\",\n    \"wdt:P27 wd:Q29999 ;\",\n    \"wdt:P112 wd:Q2336212 .\"\n  ]\n}", "normal_query": "?founder wdt:P3373 wd:Q117892 ; wdt:P27 wd:Q29999 ; wdt:P112 wd:Q2336212 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1026 kg:9596 .\",\n \t\t\"?x kg:4469 ?siblingOfPrince .\",\n \t\t\"?siblingOfPrince kg:3660 kg:7833 .\"\n \t]\n}", "normal_query": "?x kg:1026 kg:9596 . ?x kg:4469 ?siblingOfPrince . ?siblingOfPrince kg:3660 kg:7833 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P27 wd:Q183 ;\",\n \t\t\"wdt:P3373 wd:Q60414 ;\",\n \t\t\"wdt:P108 wd:Q15789 .\"\n \t]\n}", "normal_query": "?sibling wdt:P27 wd:Q183 ; wdt:P3373 wd:Q60414 ; wdt:P108 wd:Q15789 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{ \"query\": [\"@subject kg:27 P27 . @subject kg:108 kg:4698 . FILTER regex(str(@subject), \\\"Dieter Hoeneß\\\")\"] }", "normal_query": "@subject kg:27 P27 . @subject kg:108 kg:4698 . FILTER regex(str(@subject), \"Dieter Hoeneß\") LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P750 wd:Q3715556; # Drums of Love (Q3715556) has the property distributor/producer (?resource)\"\n \t\t,\"?resource wdt:P112 wd:Q882\" ] }\n  \t", "normal_query": "?resource wdt:P750 wd:Q3715556; ?resource wdt:P112 wd:Q882 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{ \"query\": [\"SELECT ?resource WHERE { ?resource kg:6909 kg:7784 ; kg:0313 kg:3368 . }\"] }", "normal_query": "SELECT ?resource WHERE { ?resource kg:6909 kg:7784 ; kg:0313 kg:3368 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q888311 ;\",\n \t\t\"?resource wdt:P162 wd:Q4500 .\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q888311 ; ?resource wdt:P162 wd:Q4500 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:272 kg:9244 ; kg:162 kg:3400 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:272 kg:9244 ; kg:162 kg:3400 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P112 ?founder.\",\n \t\t\"?founder wdt:P735 wd:Q1079409;\",\n \t\t\"wdt:P27 wd:Q142.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?company wdt:P112 ?founder. ?founder wdt:P735 wd:Q1079409; wdt:P27 wd:Q142. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n \t\"query\": [\n \t\t\"?company wdt:P112 ?founder;\",\n \t\t\"?founder wdt:P7878 kg:6013;\",\n \t\t\"?founder wdt:P5080 ?sibling;\",\n \t\t\"?sibling wdt:P1827 kg:4343.\"\n \t]\n}", "normal_query": "?company wdt:P112 ?founder; ?founder wdt:P7878 kg:6013; ?founder wdt:P5080 ?sibling; ?sibling wdt:P1827 kg:4343. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  ?resource wdt:P31 wd:Q2831 ;\\n            wdt:P58 wd:Q44477 ;\\n            wdt:P162 wd:Q320211 .\\n}\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { ?resource wdt:P31 wd:Q2831 ; wdt:P58 wd:Q44477 ; wdt:P162 wd:Q320211 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:4760 kg:7187 ?resource ; kg:3913 kg:4411 . FILTER (?resource = kg:9933) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:4760 kg:7187 ?resource ; kg:3913 kg:4411 . FILTER (?resource = kg:9933) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{ \"query\": [\n    \"?resource wdt:P58 wd:Q75079 ;\",\n    \"wdt:P1431 wd:Q8877 .\"\n] }", "normal_query": "?resource wdt:P58 wd:Q75079 ; wdt:P1431 wd:Q8877 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:9429 kg:6047 ; kg:9283 kg:9692 }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:9429 kg:6047 ; kg:9283 kg:9692 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P112 wd:Q34;\",\n \t\t      \"wdt:P272 wd:Q1651543.\"\n \t]\n}", "normal_query": "?resource wdt:P112 wd:Q34; wdt:P272 wd:Q1651543. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n \t\"query\": [\n \t\t\"?distributor kg:3114 kg:6890 ;\",\n \t\t\"kg:5876 kg:9202 .\"\n \t]\n}", "normal_query": "?distributor kg:3114 kg:6890 ; kg:5876 kg:9202 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n \t\"query\": [\n \t\t\"?parent wdt:P40 wd:Q443473;\",\n \t\t\"?spouse wdt:P26 wd:Q443473;\",\n \t\t\"?sibling wdt:P3373 wd:Q443473.\",\n \t\t\"wd:Q210535 p:P26 ?statement.\",\n \t\t\"?statement ps:P26 ?spouse.\"\n \t]\n}\n  \t            \t \t \t", "normal_query": "?parent wdt:P40 wd:Q443473; ?spouse wdt:P26 wd:Q443473; ?sibling wdt:P3373 wd:Q443473. wd:Q210535 p:P26 ?statement. ?statement ps:P26 ?spouse. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"?parent wdt:P40 kg:0479 ;\",\n    \"wdt:P26 ?spouse .\",\n    \"?sibling wdt:P3373 kg:0479 ;\",\n    \"wdt:P26 ?spouse .\"\n  ]\n}", "normal_query": "?parent wdt:P40 kg:0479 ; wdt:P26 ?spouse . ?sibling wdt:P3373 kg:0479 ; wdt:P26 ?spouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q1323191; # occupation costume designer\",\n \t\t\"?person wdt:P21 wd:Q6581097; # gender male\",\n \t\t\"?person wdt:P27 wd:Q16; # country of citizenship Canada\"\n \t\t]\n }", "normal_query": "?person wdt:P106 wd:Q1323191; ?person wdt:P21 wd:Q6581097; ?person wdt:P27 wd:Q16; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?subject kg:P26 ?resource . ?resource kg:P106 kg:5053 ; kg:P21 kg:9486 ; kg:P27 kg:7839 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?subject kg:P26 ?resource . ?resource kg:P106 kg:5053 ; kg:P21 kg:9486 ; kg:P27 kg:7839 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n \t\"query\": [\n \t\t\"?sequel wdt:P155 wd:Q47099;\",\n \t\t\"?sequel wdt:P162 wd:Q115945.\"\n \t]\n}", "normal_query": "?sequel wdt:P155 wd:Q47099; ?sequel wdt:P162 wd:Q115945. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?sequel kg:P750 kg:2408 ; kg:P162 kg:8668 ; kg:P272 ?resource }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?sequel kg:P750 kg:2408 ; kg:P162 kg:8668 ; kg:P272 ?resource } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n \t\"query\": [\n \t\t\"?child wdt:P127 wd:Q467752 ;\",\n \t\t\"?parent wdt:P40 ?child .\"\n \t]\n}\n    ", "normal_query": "?child wdt:P127 wd:Q467752 ; ?parent wdt:P40 ?child . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{ \"query\": [\n    \"?company kg:1164 ?parent; # P749 represents parent company, so we use it to find the parent of a company acquired by Verizon (child and parent relationship as mentioned in the question) \\n\",\n    \"?company kg:355 kg:8291. # P355 represents acquirer, here we specify that Verizon (Q4830453) is the acquirer\"\n  ]\n}\n   ", "normal_query": "?company kg:1164 ?parent; ?company kg:355 kg:8291. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"?producer_or_distributor wdt:P750 wd:Q524849 ;\",\n    \"wdt:P112 wd:Q882 ;\",\n    \"wdt:P112 wd:Q104109 .\"\n  ]\n}\n  \t\t", "normal_query": "?producer_or_distributor wdt:P750 wd:Q524849 ; wdt:P112 wd:Q882 ; wdt:P112 wd:Q104109 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2817 kg:4956 ?producerDistributor . ?producerDistributor kg:8410 kg:7881 ; kg:8410 kg:7296 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:2817 kg:4956 ?producerDistributor . ?producerDistributor kg:8410 kg:7881 ; kg:8410 kg:7296 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n \t\"query\": [\n \t\t\"?influencer wdt:P106 wd:Q33999; # The influencer is an actor (P106: occupation, Q33999: actor) \\n\",\n \t\t\"wd:Q142701 wdt:P737 ?influencer; # Pearl Jam was influenced by the actor (P737: influenced by)\\n\",\n \t\t\"?sibling wdt:P3373 wd:Q4811453. # The sibling is related to Astrid Young (P3373: sibling, Q4811453: Astrid Young)\\n\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?influencer wdt:P106 wd:Q33999; wd:Q142701 wdt:P737 ?influencer; ?sibling wdt:P3373 wd:Q4811453. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5606 kg:9972 ?sibling . ?actor kg:0538 kg:5606 . ?actor kg:1929 kg:5938 . ?actor kg:P106 kg:7006 . ?sibling kg:P3373 ?resource . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5606 kg:9972 ?sibling . ?actor kg:0538 kg:5606 . ?actor kg:1929 kg:5938 . ?actor kg:P106 kg:7006 . ?sibling kg:P3373 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q562108 ;\",\n \t\t\"wdt:P58 wd:Q1687239 ;\",\n \t\t\"wdt:P58 wd:Q35979475 .\"\n \t]\n}\n   \t \t \t  \t   \t \t \t ", "normal_query": "?resource wdt:P58 wd:Q562108 ; wdt:P58 wd:Q1687239 ; wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"?resource\",\n    \"kg:P58\",\n    \"kg:4288\" ,\n    \";\",\n    \"?resource\",\n    \"kg:P58\",\n    \"kg:3255\" ,\n    \";\",\n    \"?resource\",\n    \"kg:P58\",\n    \"kg:0406\"\n  ]\n}", "normal_query": "?resource kg:P58 kg:4288 ; ?resource kg:P58 kg:3255 ; ?resource kg:P58 kg:0406 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P31 wd:Q5.\",\n \t\t\"?sibling wdt:P27 wd:Q29.\",\n \t\t\"?sibling rdfs:label \\\"Miguel Albaladejo\\\"@es.\",\n \t\t\"?film wdt:P3373 ?sibling.\",\n \t\t\"?costumeDesigner wdt:P2515 ?film.\"\n \t]\n}", "normal_query": "?sibling wdt:P31 wd:Q5. ?sibling wdt:P27 wd:Q29. ?sibling rdfs:label \"Miguel Albaladejo\"@es. ?film wdt:P3373 ?sibling. ?costumeDesigner wdt:P2515 ?film. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P3373 ?costumeDesigner . ?costumeDesigner kg:P2515 kg:5093 . ?costumeDesigner kg:P27 kg:8721 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P3373 ?costumeDesigner . ?costumeDesigner kg:P2515 kg:5093 . ?costumeDesigner kg:P27 kg:8721 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P106 wd:Q36834; \", \">// Occupation Composer (P106) (Q36834 - composer entity ID in Wikidata) is a property that indicates the person's occupation as a composer. The semicolon separates multiple properties of the same subject/resource, indicating that all these properties apply to the same resource (?resource). This part of the query identifies resources that are composers by checking if they have the property P106 with value Q36834 (composer in Wikidata terminology). It's a way to filter out only those entities from the knowledge graph which are classified as composers. The question mark before \"] }\n\t\t", "normal_query": "?resource wdt:P106 wd:Q36834; >// Occupation Composer (P106) (Q36834 - composer entity ID in Wikidata) is a property that indicates the person's occupation as a composer. The semicolon separates multiple properties of the same subject/resource, indicating that all these properties apply to the same resource (?resource). This part of the query identifies resources that are composers by checking if they have the property P106 with value Q36834 (composer in Wikidata terminology). It's a way to filter out only those entities from the knowledge graph which are classified as composers. The question mark before LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:8756 kg:8271;\",\n \t\t\"?composer kg:2252 kg:5568;\",\n \t\t\"?composer kg:0594 kg:3276.\"\n \t]\n }", "normal_query": "?composer kg:8756 kg:8271; ?composer kg:2252 kg:5568; ?composer kg:0594 kg:3276. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"?film wdt:P1040 wd:Q20729551 ;\",\n    \"      wdt:P162 wd:Q562108 ;\",\n    \"      wdt:P162 wd:Q1687239 ;\",\n    \"      wdt:P162 wd:Q35979475 .\"\n  ]\n}\n    ", "normal_query": "?film wdt:P1040 wd:Q20729551 ; wdt:P162 wd:Q562108 ; wdt:P162 wd:Q1687239 ; wdt:P162 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"?movie kg:9246|kg:7250 kg:5777, kg:3644, kg:2981, kg:2285 .\"\n  ]\n}", "normal_query": "?movie kg:9246|kg:7250 kg:5777, kg:3644, kg:2981, kg:2285 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"?femaleSiblingSpouse wdt:P21 wd:Q6581072 ;\",\n \t\t\"?femaleSiblingSpouse wdt:P26 wd:Q296446 ;\",\n \t\t\"?femaleSiblingSpouse wdt:P3373 wd:Q3340 .\"\n \t]\n}", "normal_query": "?femaleSiblingSpouse wdt:P21 wd:Q6581072 ; ?femaleSiblingSpouse wdt:P26 wd:Q296446 ; ?femaleSiblingSpouse wdt:P3373 wd:Q3340 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"?s\",\n \t\t\"wd:P31\",\n \t\t\"wd:Q5\"\n \t]\n}\n      ", "normal_query": "?s wd:P31 wd:Q5 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q562108 ;\",\n \t\t\"wdt:P58 wd:Q1687239 ;\",\n \t\t\"wdt:P58 wd:Q35979475 .\"\n \t]\n}\n    ", "normal_query": "?resource wdt:P58 wd:Q562108 ; wdt:P58 wd:Q1687239 ; wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\": [\n    \"?resource\",\n    \"kg:P58\",\n    \"kg:6763\" ,\n    \";\",\n    \"?resource\",\n    \"kg:P1040\",\n    \"kg:9719\" ,\n    \";\",\n    \"?resource\",\n    \"kg:P58\",\n    \"kg:4762\"\n  ]\n}", "normal_query": "?resource kg:P58 kg:6763 ; ?resource kg:P1040 kg:9719 ; ?resource kg:P58 kg:4762 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"?work wdt:P58 wd:Q562108;\",\n           \"wd:Q1687239;\",\n           \"wd:Q35979475.\",\n    \"?work wdt:P1040 wd:Q562108;\",\n           \"wd:Q1687239;\",\n           \"wd:Q35979475.\"\n  ]\n}\n   ", "normal_query": "?work wdt:P58 wd:Q562108; wd:Q1687239; wd:Q35979475. ?work wdt:P1040 wd:Q562108; wd:Q1687239; wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{ \"query\": [\n    \"?work kg:P1040 kg:Q20729551 ;\",\n    \"?work kg:P1040 kg:Q562108 ;\",\n    \"?work kg:P1040 kg:Q1687239 ;\",\n    \"?work kg:P58 kg:Q20729551 ;\",\n    \"?work kg:P58 kg:Q562108 ;\",\n    \"?work kg:P58 kg:Q1687239 .\"\n  ]\n}", "normal_query": "?work kg:P1040 kg:Q20729551 ; ?work kg:P1040 kg:Q562108 ; ?work kg:P1040 kg:Q1687239 ; ?work kg:P58 kg:Q20729551 ; ?work kg:P58 kg:Q562108 ; ?work kg:P58 kg:Q1687239 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"?film wdt:P1040 wd:Q20729551 ;\",\n    \"wdt:P162 wd:Q562108 ;\",\n    \"wdt:P162 wd:Q1687239 ;\",\n    \"wdt:P162 wd:Q35979475 .\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?film wdt:P1040 wd:Q20729551 ; wdt:P162 wd:Q562108 ; wdt:P162 wd:Q1687239 ; wdt:P162 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"?movie kg:8791 kg:4646 ;\",\n    \"?movie kg:8452 kg:0356 ;\",\n    \"?movie kg:8452 kg:4280 ;\",\n    \"?movie kg:8452 kg:9844\"\n  ]\n}\n", "normal_query": "?movie kg:8791 kg:4646 ; ?movie kg:8452 kg:0356 ; ?movie kg:8452 kg:4280 ; ?movie kg:8452 kg:9844 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P162 wd:Q43994;\",\n \t\t      \"wdt:P162 wd:Q95125;\",\n \t\t      \"wdt:P162 wd:Q365090.\"\n \t]\n }", "normal_query": "?resource wdt:P162 wd:Q43994; wdt:P162 wd:Q95125; wdt:P162 wd:Q365090. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"?resource\",\n    \"kg:1348\",\n    \"kg:0211\",\n    \"?resource\",\n    \"kg:0318\",\n    \"kg:8925\"\n  ]\n}", "normal_query": "?resource kg:1348 kg:0211 ?resource kg:0318 kg:8925 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"?sibling wdt:P21 wd:Q6581072; \", \">// P21 indicates gender, and Q6581072 represents female gender in Wikidata. This part of the query ensures we are looking for a female sibling. However, there seems to be an error in the provided properties as wdt:P3373 is listed twice without clear context or definition related to siblings or spouses. Assuming that P3373 might relate to familial relationships but given the options, I'll use available properties to construct the query focusing on gender and spouse relationship which are clearly defined by wdt:P21 and wdt:P26 respectively. Therefore, this part is constructed based on the provided information with a focus on gender specification only as direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.//\",\n \t\t\"?sibling wdt:P3373 wd:Q3340; \", \">// Assuming P3373 might be used to denote a sibling relationship, and Q3340 represents Ptolemy X Alexander I. This part of the query is constructed based on this assumption but note that direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.//\",\n \t\t\"?sibling wdt:P3373 wd:Q3345; \", \">// Assuming P3373 might be used to denote a sibling relationship, and Q3345 represents Ptolemy IX Lathyros. This part of the query is constructed based on this assumption but note that direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.//\",\n \t\t\"?sibling wdt:P26 wd:Q3345 .\" ,\">// P26 indicates spouse relationship and Q3345 represents Ptolemy IX Lathyros. This part of the query ensures we are looking for a female sibling who is also a spouse to Ptolemy IX Lathyros.//\"\n \t]\n }", "normal_query": "?sibling wdt:P21 wd:Q6581072; >// P21 indicates gender, and Q6581072 represents female gender in Wikidata. This part of the query ensures we are looking for a female sibling. However, there seems to be an error in the provided properties as wdt:P3373 is listed twice without clear context or definition related to siblings or spouses. Assuming that P3373 might relate to familial relationships but given the options, I'll use available properties to construct the query focusing on gender and spouse relationship which are clearly defined by wdt:P21 and wdt:P26 respectively. Therefore, this part is constructed based on the provided information with a focus on gender specification only as direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.// ?sibling wdt:P3373 wd:Q3340; >// Assuming P3373 might be used to denote a sibling relationship, and Q3340 represents Ptolemy X Alexander I. This part of the query is constructed based on this assumption but note that direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.// ?sibling wdt:P3373 wd:Q3345; >// Assuming P3373 might be used to denote a sibling relationship, and Q3345 represents Ptolemy IX Lathyros. This part of the query is constructed based on this assumption but note that direct sibling relation property isn't explicitly listed among given options except for inferring through familial context indirectly via spouse relation if applicable in the broader query structure below.// ?sibling wdt:P26 wd:Q3345 . >// P26 indicates spouse relationship and Q3345 represents Ptolemy IX Lathyros. This part of the query ensures we are looking for a female sibling who is also a spouse to Ptolemy IX Lathyros.// LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"?siblingOfPtolemyX kg:P21 kg:8383 ;\",\n \t\t\"?siblingOfPtolemyX kg:P3373 kg:5838 ;\",\n \t\t\"?siblingOfPtolemyX kg:P3373 kg:4916 ;\",\n \t\t\"kg:4916 kg:P26 ?siblingOfPtolemyX .\"\n \t]\n }", "normal_query": "?siblingOfPtolemyX kg:P21 kg:8383 ; ?siblingOfPtolemyX kg:P3373 kg:5838 ; ?siblingOfPtolemyX kg:P3373 kg:4916 ; kg:4916 kg:P26 ?siblingOfPtolemyX . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{ \"query\": [\n    \"?work wdt:P31 wd:Q5542223 ;\", \">// Identify that the subject (?work) is an instance of a TV series (wd:Q5542223, which represents 'TV series' in Wikidata). This line ensures we are looking at TV shows only. However, based on the provided properties and entities, there's no direct way to specify \"] }\n", "normal_query": "?work wdt:P31 wd:Q5542223 ; >// Identify that the subject (?work) is an instance of a TV series (wd:Q5542223, which represents 'TV series' in Wikidata). This line ensures we are looking at TV shows only. However, based on the provided properties and entities, there's no direct way to specify LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{ \"query\": [\n    \"?work kg:5045 kg:6250 ;\", \">// Directed by Vince Gilligan (P57, Q4500) and George Mastras (Q1079, assuming Q1079 is George Mastras as the mapping provided has duplicates and no clear indication for George Mastras' ID other than it being different from Vince Gilligan's Q4500 identifier. This might need correction based on accurate KG mappings not provided here. )\",\n    \"?work kg:3585 kg:6250 ;\", \">// Written by Vince Gilligan (P58, Q4500)\"\n    ] }", "normal_query": "?work kg:5045 kg:6250 ; >// Directed by Vince Gilligan (P57, Q4500) and George Mastras (Q1079, assuming Q1079 is George Mastras as the mapping provided has duplicates and no clear indication for George Mastras' ID other than it being different from Vince Gilligan's Q4500 identifier. This might need correction based on accurate KG mappings not provided here. ) ?work kg:3585 kg:6250 ; >// Written by Vince Gilligan (P58, Q4500) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n \t\"query\": [\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\",\n \t\t\"?film1 wdt:P161 ?costumeDesigner ; wdt:P1040 \\\"Tom at the Farm\\\"@en .\",\n \t\t\"?film2 wdt:P161 ?costumeDesigner ; wdt:P1040 \\\"Heartbeats\\\"@en .\",\n \t\t\"?film3 wdt:P161 ?costumeDesigner ; wdt:P1040 \\\"Laurence Anyways\\\"@en\"\n \t]\n}", "normal_query": "?costumeDesigner wdt:P106 wd:Q1323191 . ?film1 wdt:P161 ?costumeDesigner ; wdt:P1040 \"Tom at the Farm\"@en . ?film2 wdt:P161 ?costumeDesigner ; wdt:P1040 \"Heartbeats\"@en . ?film3 wdt:P161 ?costumeDesigner ; wdt:P1040 \"Laurence Anyways\"@en LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{ \"query\": [\n    \"?costumeDesigner kg:P106 kg:2303 .\",\n    \"?movie1 kg:P161 ?costumeDesigner ; kg:P1040 \\\"Tom at the Farm\\\" .\",\n    \"?movie2 kg:P161 ?costumeDesigner ; kg:P1040 \\\"Heartbeats\\\" .\",\n    \"?movie3 kg:P161 ?costumeDesigner ; kg:P1040 \\\"Laurence Anyways\\\" .\"\n  ]\n}\n   ", "normal_query": "?costumeDesigner kg:P106 kg:2303 . ?movie1 kg:P161 ?costumeDesigner ; kg:P1040 \"Tom at the Farm\" . ?movie2 kg:P161 ?costumeDesigner ; kg:P1040 \"Heartbeats\" . ?movie3 kg:P161 ?costumeDesigner ; kg:P1040 \"Laurence Anyways\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5.\",\n \t\t\"{?work1 wdt:P161 ?person. ?work1 wdt:P1040 \\\"In the Park\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?work2 wdt:P161 ?person. ?work2 wdt:P1040 \\\"Shanghaied\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?work3 wdt:P161 ?person. ?work3 wdt:P1040 \\\"Modern Times\\\"@en.}\",\n \t\t\"UNION\",\n \t\t\"{?work4 wdt:P161 ?person. ?work4 wdt:P1040 \\\"The Professor\\\"@en.}\"\n \t]\n}\n    ", "normal_query": "?person wdt:P31 wd:Q5. {?work1 wdt:P161 ?person. ?work1 wdt:P1040 \"In the Park\"@en.} UNION {?work2 wdt:P161 ?person. ?work2 wdt:P1040 \"Shanghaied\"@en.} UNION {?work3 wdt:P161 ?person. ?work3 wdt:P1040 \"Modern Times\"@en.} UNION {?work4 wdt:P161 ?person. ?work4 wdt:P1040 \"The Professor\"@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3901/kg:6275 ;\",\n \t\t\"?x kg:3901/kg:4400 ;\",\n \t\t\"?x kg:3901/kg:6696 ;\",\n \t\t\"?x kg:3901/kg:7746 .\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?x kg:3901/kg:6275 ; ?x kg:3901/kg:4400 ; ?x kg:3901/kg:6696 ; ?x kg:3901/kg:7746 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q1291210;\",\n \t\t\"       wdt:P57 wd:Q16198328;\",\n \t\t\"       wdt:P57 wd:Q4207234;\",\n \t\t\"       wdt:P57 wd:Q4679987.\"\n \t]\n }\n \t            \t \t  \t", "normal_query": "?work wdt:P57 wd:Q1291210; wdt:P57 wd:Q16198328; wdt:P57 wd:Q4207234; wdt:P57 wd:Q4679987. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{ \"query\": [\n    \"?resource kg:P57 kg:3767 .\",\n    \"?resource kg:P57 kg:1625 .\",\n    \"?resource kg:P57 kg:0187 .\",\n    \"?resource kg:P57 kg:5240 .\"\n  ]\n}", "normal_query": "?resource kg:P57 kg:3767 . ?resource kg:P57 kg:1625 . ?resource kg:P57 kg:0187 . ?resource kg:P57 kg:5240 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 wd:Q3772, wd:Q47284, wd:Q549956, wd:Q2838329;\",\n            \"?movie wdt:P58 wd:Q3772, wd:Q47284, wd:Q549956, wd:Q2838329.\"\n  ]\n}", "normal_query": "?movie wdt:P31 wd:Q11424; ?movie wdt:P57 wd:Q3772, wd:Q47284, wd:Q549956, wd:Q2838329; ?movie wdt:P58 wd:Q3772, wd:Q47284, wd:Q549956, wd:Q2838329. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"?movie kg:8582 ?director.\",\n    \"?movie kg:2845 ?writer.\"\n  ]\n}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "normal_query": "?movie kg:8582 ?director. ?movie kg:2845 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{ \"query\": [\n    \"?work wdt:P31 wd:Q11424;\",\n    \"?work rdfs:label \\\"Super Rhino\\\"@en;\",\n    \"{?work wdt:P57 wd:Q4235.} UNION\",\n    \"{?work wdt:P57 wd:Q40220.} UNION\",\n    \"{?work wdt:P57 wd:Q117392.} UNION\",\n    \"{?work wdt:P57 wd:Q5127380.}\",\n    \"{?work wdt:P162 wd:Q4235.} UNION\",\n    \"{?work wdt:P162 wd:Q40220.} UNION\",\n    \"{?work wdt:P162 wd:Q117392.} UNION\",\n    \"{?work wdt:P162 wd:Q5127380.}\"\n  ]\n}\n   ", "normal_query": "?work wdt:P31 wd:Q11424; ?work rdfs:label \"Super Rhino\"@en; {?work wdt:P57 wd:Q4235.} UNION {?work wdt:P57 wd:Q40220.} UNION {?work wdt:P57 wd:Q117392.} UNION {?work wdt:P57 wd:Q5127380.} {?work wdt:P162 wd:Q4235.} UNION {?work wdt:P162 wd:Q40220.} UNION {?work wdt:P162 wd:Q117392.} UNION {?work wdt:P162 wd:Q5127380.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"?movie kg:P272 kg:9597 .\",\n    \"?movie kg:P57 ?director .\",\n    \"{?director (kg:P162|kg:P57) kg:7140.} UNION\",\n    \"{?director (kg:P162|kg:P57) kg:7519.} UNION\",\n    \"{?director (kg:P162|kg:P57) kg:0436.} UNION\",\n    \"{?director (kg:P162|kg:P57) kg:6489.}\"\n  ]\n}\n   ", "normal_query": "?movie kg:P272 kg:9597 . ?movie kg:P57 ?director . {?director (kg:P162|kg:P57) kg:7140.} UNION {?director (kg:P162|kg:P57) kg:7519.} UNION {?director (kg:P162|kg:P57) kg:0436.} UNION {?director (kg:P162|kg:P57) kg:6489.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P58 wd:Q38222;\",\n \t\t      \"wdt:P162 wd:Q38222;\",\n \t\t      \"wdt:P1431 wd:Q38222;\",\n \t\t      \"wdt:P272 wd:Q38222.\"\n \t]\n}", "normal_query": "?resource wdt:P58 wd:Q38222; wdt:P162 wd:Q38222; wdt:P1431 wd:Q38222; wdt:P272 wd:Q38222. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:P1040 kg:Q38222; # written by George Lucas (assuming Q38222 represents George Lucas and P1040 represents the writer property) \",\n \t\t\"?resource kg:P162 kg:Q38222; # executive produced by George Lucas\",\n \t\t\"?resource kg:P58 kg:Q38222; # produced by George Lucas\",\n \t\t\"?resource kg:P272 kg:Q38222. # edited by George Lucas\"\n \t]\n }", "normal_query": "?resource kg:P1040 kg:Q38222; ?resource kg:P162 kg:Q38222; ?resource kg:P58 kg:Q38222; ?resource kg:P272 kg:Q38222. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P58 wd:Q972787;\",\n \t\t\"        wdt:P58 wd:Q672061;\",\n \t\t\"        wdt:P58 wd:Q3141131;\",\n \t\t\"        wdt:P108 wd:Q909176.\"\n \t]\n}", "normal_query": "?writer wdt:P58 wd:Q972787; wdt:P58 wd:Q672061; wdt:P58 wd:Q3141131; wdt:P108 wd:Q909176. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{ \"query\": [\n    \"?x kg:3129 kg:1090 .\",\n    \"?x kg:3129 kg:7506 .\",\n    \"?x kg:3129 kg:5091 .\",\n    \"?x kg:8835 kg:6665 .\"\n] }", "normal_query": "?x kg:3129 kg:1090 . ?x kg:3129 kg:7506 . ?x kg:3129 kg:5091 . ?x kg:8835 kg:6665 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{ \"query\": [\n    \"?work wdt:P31 wd:Q819109 ;\",\n    \"wdt:P57 ?producer .\",\n    \"{?producer wdt:P1431 wd:Q1295611.} union\",\n    \"{?producer wdt:P1431 wd:Q81520.} union\",\n    \"{?producer wdt:P1431 wd:Q381545.} union\",\n    \"{?producer wdt:P1431 wd:Q1969128.}\",\n    \"filter (exists {?work wdt:P162 ?executiveProducer .\",\n    \"?executiveProducer wdt:P1431 wd:Q1295611.} union\",\n    \"{?executiveProducer wdt:P1431 wd:Q81520.} union\",\n    \"{?executiveProducer wdt:P1431 wd:Q381545.} union\",\n    \"{?executiveProducer wdt:P1431 wd:Q1969128.})}\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?work wdt:P31 wd:Q819109 ; wdt:P57 ?producer . {?producer wdt:P1431 wd:Q1295611.} union {?producer wdt:P1431 wd:Q81520.} union {?producer wdt:P1431 wd:Q381545.} union {?producer wdt:P1431 wd:Q1969128.} filter (exists {?work wdt:P162 ?executiveProducer . ?executiveProducer wdt:P1431 wd:Q1295611.} union {?executiveProducer wdt:P1431 wd:Q81520.} union {?executiveProducer wdt:P1431 wd:Q381545.} union {?executiveProducer wdt:P1431 wd:Q1969128.})} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"?movie kg:P1431 kg:Q819109 ;\",\n    \"?movie kg:P162/kg:P272* kg:Q1295611 ;\",\n    \"?movie kg:P162/kg:P272* kg:Q81520 ;\",\n    \"?movie kg:P162/kg:P272* kg:Q381545 ;\",\n    \"?movie kg:P162/kg:P272* kg:Q1969128 .\"\n  ]\n}\n    ", "normal_query": "?movie kg:P1431 kg:Q819109 ; ?movie kg:P162/kg:P272* kg:Q1295611 ; ?movie kg:P162/kg:P272* kg:Q81520 ; ?movie kg:P162/kg:P272* kg:Q381545 ; ?movie kg:P162/kg:P272* kg:Q1969128 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"?film wdt:P31 wd:Q11424;\",\n    \"?film rdfs:label ?titleFilter.\",\n    \"FILTER (LANG(?titleFilter) = 'en').\",\n    \"FILTER (?titleFilter = 'Kagemusha'^^xsd:string).\",\n    \"{?film wdt:P58 wd:Q8006.} UNION\",\n    \"{?film wdt:P1431 wd:Q8006.} UNION\",\n    \"{?film wdt:P162 wd:Q8006.} UNION\",\n    \"{?film wdt:P272 wd:Q8006.}\"\n  ]\n}\n   ", "normal_query": "?film wdt:P31 wd:Q11424; ?film rdfs:label ?titleFilter. FILTER (LANG(?titleFilter) = 'en'). FILTER (?titleFilter = 'Kagemusha'^^xsd:string). {?film wdt:P58 wd:Q8006.} UNION {?film wdt:P1431 wd:Q8006.} UNION {?film wdt:P162 wd:Q8006.} UNION {?film wdt:P272 wd:Q8006.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5037 kg:1512 ?resource ; kg:3256 ?resource ; kg:7529 ?resource ; kg:5101 ?resource . FILTER (?resource = kg:4528) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { kg:5037 kg:1512 ?resource ; kg:3256 ?resource ; kg:7529 ?resource ; kg:5101 ?resource . FILTER (?resource = kg:4528) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q562108 ;\",\n \t\t\"?resource wdt:P57 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P57 wd:Q35979475 ;\",\n \t\t\"?resource wdt:P1040 wd:Q562108 ;\",\n \t\t\"?resource wdt:P1040 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P1040 wd:Q35979475 ;\",\n \t\t\"?resource wdt:P58 wd:Q562108 ;\",\n \t\t\"?resource wdt:P58 wd:Q1687239 ;\",\n \t\t\"?resource wdt:P58 wd:Q35979475 .\"\n \t]\n}\n    ", "normal_query": "?resource wdt:P57 wd:Q562108 ; ?resource wdt:P57 wd:Q1687239 ; ?resource wdt:P57 wd:Q35979475 ; ?resource wdt:P1040 wd:Q562108 ; ?resource wdt:P1040 wd:Q1687239 ; ?resource wdt:P1040 wd:Q35979475 ; ?resource wdt:P58 wd:Q562108 ; ?resource wdt:P58 wd:Q1687239 ; ?resource wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P57 kg:3211 ; kg:P57 kg:1867 ; kg:P57 kg:1654 . UNION { ?resource kg:P1040 kg:3211 ; kg:P1040 kg:1867 ; kg:P1040 kg:1654 } UNION { ?resource kg:P58 kg:3211 ; kg:P58 kg:1867 ; kg:P58 kg:1654 } }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P57 kg:3211 ; kg:P57 kg:1867 ; kg:P57 kg:1654 . UNION { ?resource kg:P1040 kg:3211 ; kg:P1040 kg:1867 ; kg:P1040 kg:1654 } UNION { ?resource kg:P58 kg:3211 ; kg:P58 kg:1867 ; kg:P58 kg:1654 } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P57 wd:Q562108 ;\",\n \t\t\"            wdt:P57 wd:Q1687239 ;\",\n \t\t\"            wdt:P57 wd:Q35979475 ;\",\n \t\t\"            wdt:P1040 wd:Q562108 ;\",\n \t\t\"            wdt:P1040 wd:Q1687239 ;\",\n \t\t\"            wdt:P1040 wd:Q35979475 ;\",\n \t\t\"            wdt:P58 wd:Q562108 ;\",\n \t\t\"            wdt:P58 wd:Q1687239 ;\",\n \t\t\"            wdt:P58 wd:Q35979475 .\"\n \t]\n }\n    ", "normal_query": "?resource wdt:P57 wd:Q562108 ; wdt:P57 wd:Q1687239 ; wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 ; wdt:P58 wd:Q1687239 ; wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{ \"query\": [\n    \"?resource\",\n    \"WHERE\",\n    \"{\",\n      \"?resource\",\n        \"<http://www.wikidata.org/prop/direct/P57>\",\n          \"<http://www.wikibase.org/entity/kg:4591> ;\",\n      \"?resource\",\n        \"<http://www.wikidata.org/prop/direct/P57>\",\n          \"<http://www.wikibase.org/entity/kg:7394> ;\",\n      \"?resource\",\n        \"<http://www.wikidata.org/prop/direct/P57>\",\n          \"<http://www.wikibase.org/entity/kg:2292> .\"\n    ,\n      \"{ ?resource <http://www.wikidata.org/prop/direct/P1040> ?value } UNION { ?resource <http://www.wikidata.org/prop/direct/P58> ?value }\",\n    \"}\"\n  ]\n}", "normal_query": "?resource WHERE { ?resource wdt:P57 <http://www.wikibase.org/entity//kg:4591> ; ?resource wdt:P57 <http://www.wikibase.org/entity//kg:7394> ; ?resource wdt:P57 <http://www.wikibase.org/entity//kg:2292> . { ?resource wdt:P1040 ?value } UNION { ?resource wdt:P58 ?value } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector wdt:P344 wd:Q3282637;\",\n \t\t\"?filmDirector wdt:P344 wd:Q1216566;\",\n \t\t\"?filmDirector wdt:P344 wd:Q600762;\",\n \t\t\"?filmDirector wdt:P344 wd:Q629819;\",\n \t\t\"?filmDirector wdt:P106 wd:Q283699.\",\n \t\t\"?filmDirector wdt:P57 ?producedFilm.\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?filmDirector wdt:P344 wd:Q3282637; ?filmDirector wdt:P344 wd:Q1216566; ?filmDirector wdt:P344 wd:Q600762; ?filmDirector wdt:P344 wd:Q629819; ?filmDirector wdt:P106 wd:Q283699. ?filmDirector wdt:P57 ?producedFilm. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P344 kg:0565. ?resource kg:P57 kg:4231. }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P344 kg:0565. ?resource kg:P57 kg:4231. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P106 wd:Q33999;\",\n \t\t\"?entity wdt:P344 wd:Q3485595;\",\n \t\t\"?entity wdt:P344 wd:Q1473406;\",\n \t\t\"?entity wdt:P344 wd:Q3016313;\",\n \t\t\"?entity wdt:P344 wd:Q862058.\"\n \t]\n }\n    ", "normal_query": "?entity wdt:P106 wd:Q33999; ?entity wdt:P344 wd:Q3485595; ?entity wdt:P344 wd:Q1473406; ?entity wdt:P344 wd:Q3016313; ?entity wdt:P344 wd:Q862058. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{ \"query\": [\n    \"?actor kg:P106 kg:5148 ;\",\n    \"?actor kg:P106 kg:9749 ;\",\n    \"?film kg:P344 ?actor ;\",\n    \"kg:8843 kg:P57 ?film ;\",\n    \"kg:6182 kg:P57 ?film ;\",\n    \"kg:9120 kg:P57 ?film .\"\n  ]\n}", "normal_query": "?actor kg:P106 kg:5148 ; ?actor kg:P106 kg:9749 ; ?film kg:P344 ?actor ; kg:8843 kg:P57 ?film ; kg:6182 kg:P57 ?film ; kg:9120 kg:P57 ?film . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P1431 wd:Q448604;\",\n \t\t\"?resource wdt:P1431 wd:Q363666;\",\n \t\t\"?resource wdt:P1431 wd:Q452794;\",\n \t\t\"?resource wdt:P57 wd:Q448604;\",\n \t\t\"?resource wdt:P57 wd:Q363666;\",\n \t\t\"?resource wdt:P57 wd:Q452794;\",\n \t\t\"?resource wdt:P58 wd:Q448604;\",\n \t\t\"?resource wdt:P58 wd:Q363666;\",\n \t\t\"?resource wdt:P58 wd:Q452794.\"\n \t]\n }\n    ", "normal_query": "?resource wdt:P1431 wd:Q448604; ?resource wdt:P1431 wd:Q363666; ?resource wdt:P1431 wd:Q452794; ?resource wdt:P57 wd:Q448604; ?resource wdt:P57 wd:Q363666; ?resource wdt:P57 wd:Q452794; ?resource wdt:P58 wd:Q448604; ?resource wdt:P58 wd:Q363666; ?resource wdt:P58 wd:Q452794. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{ \"query\": [\n    \"?resource kg:P1431 ?entity .\",\n    \"?resource kg:P57 kg:2091 ;\",\n    \"               kg:P57 kg:7027 ;\",\n    \"               kg:P57 kg:2575 .\"\n] }", "normal_query": "?resource kg:P1431 ?entity . ?resource kg:P57 kg:2091 ; kg:P57 kg:7027 ; kg:P57 kg:2575 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"?work wdt:P57 wd:Q562108 ;\",\n    \"?work wdt:P57 wd:Q1687239 ;\",\n    \"?work wdt:P57 wd:Q35979475 ;\",\n    \"OPTIONAL { ?work wdt:P1040 wd:Q562108 . }\",\n    \"OPTIONAL { ?work wdt:P1040 wd:Q1687239 . }\",\n    \"OPTIONAL { ?work wdt:P1040 wd:Q35979475 . }\",\n    \"OPTIONAL { ?work wdt:P58 wd:Q562108 . }\",\n    \"OPTIONAL { ?work wdt:P58 wd:Q1687239 . }\",\n    \"OPTIONAL { ?work wdt:P58 wd:Q35979475 . }}\"\n  ]\n}\n    ", "normal_query": "?work wdt:P57 wd:Q562108 ; ?work wdt:P57 wd:Q1687239 ; ?work wdt:P57 wd:Q35979475 ; OPTIONAL { ?work wdt:P1040 wd:Q562108 . } OPTIONAL { ?work wdt:P1040 wd:Q1687239 . } OPTIONAL { ?work wdt:P1040 wd:Q35979475 . } OPTIONAL { ?work wdt:P58 wd:Q562108 . } OPTIONAL { ?work wdt:P58 wd:Q1687239 . } OPTIONAL { ?work wdt:P58 wd:Q35979475 . }} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{ \"query\": [\n    \"?resource ?property kg:2104 .\",\n    \"VALUES ?property { kg:57 kg:1040 kg:58 }\"\n] }\n      ", "normal_query": "?resource ?property kg:2104 . VALUES ?property { kg:57 kg:1040 kg:58 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{ \"query\": [\"@prefix wdt: <http://www.wikidata.org/prop/direct/> .\\nSELECT ?resource WHERE {\\n  wd:Q679023 wdt:P57 ?resource ;\\n            wdt:P58 ?resource .\\n  VALUES (?resource) { (wd:Q3772) (wd:Q298255) (wd:Q358714) (wd:Q47284) (wd:Q522057) }\\n}\"] }", "normal_query": "@prefix wdt: <http://www.wikidata.org/prop/direct/> . SELECT ?resource WHERE { wd:Q679023 wdt:P57 ?resource ; wdt:P58 ?resource . VALUES (?resource) { (wd:Q3772) (wd:Q298255) (wd:Q358714) (wd:Q47284) (wd:Q522057) } } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"?movie kg:4381/kg:6456/(kg:1364|kg:6928|kg:2428|kg:5433|kg:3272) .\",\n    \"?movie kg:0251/kg:6456/(kg:1364|kg:6928|kg:2428|kg:5433|kg:3272) .\"\n  ]\n}", "normal_query": "?movie kg:4381/kg:6456/(kg:1364|kg:6928|kg:2428|kg:5433|kg:3272) . ?movie kg:0251/kg:6456/(kg:1364|kg:6928|kg:2428|kg:5433|kg:3272) . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P106 wd:Q3282637 .\",\n \t\t\"{?filmProducer wdt:P1040 wd:Q2789885.} UNION {?filmProducer wdt:P58 wd:Q2789885.}\",\n \t\t\"{?filmProducer wdt:P1040 wd:Q686125.} UNION {?filmProducer wdt:P58 wd:Q686125.}\",\n \t\t\"{?filmProducer wdt:P1040 wd:Q567519.} UNION {?filmProducer wdt:P58 wd:Q567519.}\",\n \t\t\"{?filmProducer wdt:P1040 wd:Q327427.} UNION {?filmProducer wdt:P58 wd:Q327427.}\"\n \t]\n}\n   ", "normal_query": "?filmProducer wdt:P106 wd:Q3282637 . {?filmProducer wdt:P1040 wd:Q2789885.} UNION {?filmProducer wdt:P58 wd:Q2789885.} {?filmProducer wdt:P1040 wd:Q686125.} UNION {?filmProducer wdt:P58 wd:Q686125.} {?filmProducer wdt:P1040 wd:Q567519.} UNION {?filmProducer wdt:P58 wd:Q567519.} {?filmProducer wdt:P1040 wd:Q327427.} UNION {?filmProducer wdt:P58 wd:Q327427.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{ \"query\": [\n    \"?filmProducer kg:P106 kg:Q3282637 .\",\n    \"?work1 kg:P58 ?filmProducer ; kg:P1040 \\\"Katzelmacher\\\" .\",\n    \"?work2 kg:P58 ?filmProducer ; kg:P1040 \\\"Lili Marleen\\\" .\",\n    \"?work3 kg:P58 ?filmProducer ; kg:P1040 \\\"Whity\\\" .\",\n    \"?work4 kg:P58 ?filmProducer ; kg:P1040 \\\"The Niklashausen Journey\\\" .\"\n  ]\n}", "normal_query": "?filmProducer kg:P106 kg:Q3282637 . ?work1 kg:P58 ?filmProducer ; kg:P1040 \"Katzelmacher\" . ?work2 kg:P58 ?filmProducer ; kg:P1040 \"Lili Marleen\" . ?work3 kg:P58 ?filmProducer ; kg:P1040 \"Whity\" . ?work4 kg:P58 ?filmProducer ; kg:P1040 \"The Niklashausen Journey\" . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q4500;\",\n \t\t\"       wdt:P57 wd:Q15042700;\",\n \t\t\"       wdt:P57 wd:Q5542223;\",\n \t\t\"       wdt:P57 wd:Q7174311;\",\n \t\t\"       wdt:P57 wd:Q7407299;\",\n \t\t\"       wdt:P58 wd:Q4500;\",\n \t\t\"       wdt:P58 wd:Q15042700;\",\n \t\t\"       wdt:P58 wd:Q5542223;\",\n \t\t\"       wdt:P58 wd:Q7174311;\",\n \t\t\"       wdt:P58 wd:Q7407299.\"\n \t]\n }\n    ", "normal_query": "?work wdt:P57 wd:Q4500; wdt:P57 wd:Q15042700; wdt:P57 wd:Q5542223; wdt:P57 wd:Q7174311; wdt:P57 wd:Q7407299; wdt:P58 wd:Q4500; wdt:P58 wd:Q15042700; wdt:P58 wd:Q5542223; wdt:P58 wd:Q7174311; wdt:P58 wd:Q7407299. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{ \"query\": [\n    \"?resource kg:P57 kg:9478;\",\n    \"?resource kg:P57 kg:0114;\",\n    \"?resource kg:P57 kg:4893;\",\n    \"?resource kg:P57 kg:1411;\",\n    \"?resource kg:P57 kg:1187;\",\n    \"?resource kg:P58 kg:9478;\",\n    \"?resource kg:P58 kg:0114;\",\n    \"?resource kg:P58 kg:4893;\",\n    \"?resource kg:P58 kg:1411;\",\n    \"?resource kg:P58 kg:1187.\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?resource kg:P57 kg:9478; ?resource kg:P57 kg:0114; ?resource kg:P57 kg:4893; ?resource kg:P57 kg:1411; ?resource kg:P57 kg:1187; ?resource kg:P58 kg:9478; ?resource kg:P58 kg:0114; ?resource kg:P58 kg:4893; ?resource kg:P58 kg:1411; ?resource kg:P58 kg:1187. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q562108;\",\n \t\t\"?work wdt:P57 wd:Q1687239;\",\n \t\t\"?work wdt:P57 wd:Q35979475;\",\n \t\t\"?work wdt:P1040 wd:Q562108;\",\n \t\t\"?work wdt:P1040 wd:Q1687239;\",\n \t\t\"?work wdt:P1040 wd:Q35979475;\",\n \t\t\"?work wdt:P58 wd:Q562108;\",\n \t\t\"?work wdt:P58 wd:Q1687239;\",\n \t\t\"?work wdt:P58 wd:Q35979475.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?work wdt:P57 wd:Q562108; ?work wdt:P57 wd:Q1687239; ?work wdt:P57 wd:Q35979475; ?work wdt:P1040 wd:Q562108; ?work wdt:P1040 wd:Q1687239; ?work wdt:P1040 wd:Q35979475; ?work wdt:P58 wd:Q562108; ?work wdt:P58 wd:Q1687239; ?work wdt:P58 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t", "normal_query": "$resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P106 wd:Q7042855 .\",\n \t\t\"{?filmEditor wdt:P1431 wd:Q165713.}\",\n \t\t\"{?filmEditor wdt:P1431 wd:Q181803.}\",\n \t\t\"{?filmEditor wdt:P1431 wd:Q17738.}\",\n \t\t\"{?filmEditor wdt:P58 wd:Q165713.}\",\n \t\t\"{?filmEditor wdt:P58 wd:Q181803.}\",\n \t\t\"{?filmEditor wdt:P58 wd:Q17738.}\"\n \t]\n}", "normal_query": "?filmEditor wdt:P106 wd:Q7042855 . {?filmEditor wdt:P1431 wd:Q165713.} {?filmEditor wdt:P1431 wd:Q181803.} {?filmEditor wdt:P1431 wd:Q17738.} {?filmEditor wdt:P58 wd:Q165713.} {?filmEditor wdt:P58 wd:Q181803.} {?filmEditor wdt:P58 wd:Q17738.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{ \"query\": [\"@person\"] }\n    \t\t\t\t\t\t   \t\t\t\t\t \t", "normal_query": "@person LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"?work wdt:P57 wd:Q562108 ;\",\n    \"?work wdt:P57 wd:Q1687239 ;\",\n    \"?work wdt:P57 wd:Q35979475 ;\",\n    \"?work wdt:P1040 wd:Q562108 ;\",\n    \"?work wdt:P1040 wd:Q1687239 ;\",\n    \"?work wdt:P1040 wd:Q35979475 ;\",\n    \"?work wdt:P58 wd:Q562108 ;\",\n    \"?work wdt:P58 wd:Q1687239 ;\",\n    \"?work wdt:P58 wd:Q35979475 .\"\n  ]\n}\n    ", "normal_query": "?work wdt:P57 wd:Q562108 ; ?work wdt:P57 wd:Q1687239 ; ?work wdt:P57 wd:Q35979475 ; ?work wdt:P1040 wd:Q562108 ; ?work wdt:P1040 wd:Q1687239 ; ?work wdt:P1040 wd:Q35979475 ; ?work wdt:P58 wd:Q562108 ; ?work wdt:P58 wd:Q1687239 ; ?work wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"?movie kg:5271 kg:5376 ;\", \">// Written by Jens Jørgen Thorsen (P57 -> Q562108) - Assuming P57 is for writer, but typically it's P59 or similar for writers in Wikidata context. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only.\"\n    ,\"?movie kg:5415 kg:0625 ;\", \">// Edited by Ole John (P58 -> Q1687239) - Assuming P58 is for editor, but typically it's P36 or similar. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only.\"\n    ,\"?movie kg:7843 kg:1073 .\" , \">// Directed by Jørgen Leth (P1040 -> Q35979475) - Assuming P1040 is for director, but typically it's P57 or similar. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only.\"\n  ]\n}", "normal_query": "?movie kg:5271 kg:5376 ; >// Written by Jens Jørgen Thorsen (P57 -> Q562108) - Assuming P57 is for writer, but typically it's P59 or similar for writers in Wikidata context. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only. ?movie kg:5415 kg:0625 ; >// Edited by Ole John (P58 -> Q1687239) - Assuming P58 is for editor, but typically it's P36 or similar. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only. ?movie kg:7843 kg:1073 . >// Directed by Jørgen Leth (P1040 -> Q35979475) - Assuming P1040 is for director, but typically it's P57 or similar. Please verify the property usage as per your KG schema if this differs from standard Wikidata properties used here for illustration purposes only. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 wd:Q1869678 ;\",\n \t\t\"?entity wdt:P344 wd:Q613974 ;\",\n \t\t\"?entity wdt:P344 wd:Q208910 ;\",\n \t\t\"?entity wdt:P58 wd:Q165713 ;\",\n \t\t\"?entity wdt:P58 wd:Q192403 .\"\n \t]\n}", "normal_query": "?entity wdt:P344 wd:Q1869678 ; ?entity wdt:P344 wd:Q613974 ; ?entity wdt:P344 wd:Q208910 ; ?entity wdt:P58 wd:Q165713 ; ?entity wdt:P58 wd:Q192403 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8975 kg:9326; # Star Wars: Episode I – The Phantom Menace was executive produced by ?x (P58 for executive producer, Q1869678 for the movie title in KG mapping provided) \",\n \t\t\"?x kg:8975 kg:4082; # The Land Before Time was also executive produced by ?x\",\n \t\t\"?x kg:1569 kg:3874; # ?x has the occupation of cinematographer (P1431 for occupation, Q344 for cinematographer in KG mapping provided) \",\n \t\t\"?x kg:1569 kg:0817. # And also an occupation as a writer (Q192403 for writer)\"\n \t]\n }\n    ", "normal_query": "?x kg:8975 kg:9326; ?x kg:8975 kg:4082; ?x kg:1569 kg:3874; ?x kg:1569 kg:0817. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P31 wd:Q5.\",\n \t\t\"?filmProducer wdt:P106 wd:Q3282637.\",\n \t\t\"?filmProducer wdt:P57 wd:Q1361018.\",\n \t\t\"?filmProducer wdt:P1431 wd:Q1361018.\",\n \t\t\"?filmProducer wdt:P58 wd:Q1361018.\",\n \t\t\"wd:Q2086445 wdt:P1040 ?filmProducer.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?filmProducer wdt:P31 wd:Q5. ?filmProducer wdt:P106 wd:Q3282637. ?filmProducer wdt:P57 wd:Q1361018. ?filmProducer wdt:P1431 wd:Q1361018. ?filmProducer wdt:P58 wd:Q1361018. wd:Q2086445 wdt:P1040 ?filmProducer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58", "response": "{ \"query\": [\n    \"?producer kg:P106 kg:Q3282637 .\",\n    \"?film kg:P57 ?producer .\",\n    \"{?film kg:P1431 kg:Q2086445.} UNION {?film kg:P58 kg:Q2086445.}\",\n    \"{?film kg:P1040 \\\"Uzak\\\"@en.} UNION {?film kg:P1040 \\\"Clouds of May\\\"@en.}\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?producer kg:P106 kg:Q3282637 . ?film kg:P57 ?producer . {?film kg:P1431 kg:Q2086445.} UNION {?film kg:P58 kg:Q2086445.} {?film kg:P1040 \"Uzak\"@en.} UNION {?film kg:P1040 \"Clouds of May\"@en.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 wd:Q363666, wd:Q448604, wd:Q452794;\",\n            \"?movie wdt:P58 wd:Q363666, wd:Q448604, wd:Q452794;\",\n            \"?movie wdt:P1431 wd:Q363666, wd:Q448604, wd:Q452794.\"\n  ]\n}\n    ", "normal_query": "?movie wdt:P31 wd:Q11424; ?movie wdt:P57 wd:Q363666, wd:Q448604, wd:Q452794; ?movie wdt:P58 wd:Q363666, wd:Q448604, wd:Q452794; ?movie wdt:P1431 wd:Q363666, wd:Q448604, wd:Q452794. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794", "response": "{\n  \"query\": [\n    \"?movie kg:5037 kg:6275 ;\", \">// Written by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P57 (writer) predicate is used for writers of the movie, but it's not clear if this property can be used for all roles. In a real-world scenario, specific properties for director and executive producer would be more appropriate, but with given options, we use writer as an example here to demonstrate the structure of SPARQL query based on provided entities and properties list which is limited in variety for roles like director or executive producer specifically. Adjust according to actual KG schema if different predicates are available for directors and executive producers.\",\n    \"?movie kg:6431 kg:6275 ;\", \">// Directed by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P1431 is used as an example for director role, adjust according to actual KG schema if different predicates are available specifically for directors.\",\n    \"?movie kg:2115 kg:6275 .\" ,\">// Executive produced by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P58 is used as an example for executive producer role, adjust according to actual KG schema if different predicates are available specifically for executive producers.\"\n  ]\n}\n    ", "normal_query": "?movie kg:5037 kg:6275 ; >// Written by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P57 (writer) predicate is used for writers of the movie, but it's not clear if this property can be used for all roles. In a real-world scenario, specific properties for director and executive producer would be more appropriate, but with given options, we use writer as an example here to demonstrate the structure of SPARQL query based on provided entities and properties list which is limited in variety for roles like director or executive producer specifically. Adjust according to actual KG schema if different predicates are available for directors and executive producers. ?movie kg:6431 kg:6275 ; >// Directed by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P1431 is used as an example for director role, adjust according to actual KG schema if different predicates are available specifically for directors. ?movie kg:2115 kg:6275 . >// Executive produced by Q363666 (Jim Abrahams), Q448604 (Jerry Zucker), Q452794 (David Zucker) - P58 is used as an example for executive producer role, adjust according to actual KG schema if different predicates are available specifically for executive producers. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"?movie wdt:P31 wd:Q11424;\",\n            \"?movie wdt:P57 wd:Q363666, wd:Q448604, wd:Q452794;\",\n            \"?movie wdt:P1431 wd:Q363666, wd:Q448604, wd:Q452794;\",\n            \"?movie wdt:P58 wd:Q363666, wd:Q448604, wd:Q452794.\"\n  ]\n}\n    ", "normal_query": "?movie wdt:P31 wd:Q11424; ?movie wdt:P57 wd:Q363666, wd:Q448604, wd:Q452794; ?movie wdt:P1431 wd:Q363666, wd:Q448604, wd:Q452794; ?movie wdt:P58 wd:Q363666, wd:Q448604, wd:Q452794. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794", "response": "{\n  \"query\": [\n    \"?movie kg:5898 kg:6386 ;\", \">// Written by David Zucker (Q363666) and Jerry Zucker (Q448604), P1431 for written by property, Q363666 and Q448604 are the entities for David Zucker and Jerry Zucker respectively. However, since Jim Abrahams is not listed in the provided mappings, we can only include those two names here based on the given information. The same applies to other roles below.\",\n    \"?movie kg:5898 kg:3382 ;\", \">// Written by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available.\",\n    \"?movie kg:6616 kg:6386 ;\", \">// Executive produced by David Zucker (Q363666) and Jerry Zucker (Q448604), P58 for executive producer property\",\n    \"?movie kg:6616 kg:3382 ;\", \">// Executive produced by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available.\",\n    \"?movie kg:4915 kg:6386 ;\", \">// Directed by David Zucker (Q363666) and Jerry Zucker (Q448604), P57 for director property\",\n    \"?movie kg:4915 kg:3382 .\" , \">// Directed by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available.\"\n  ]\n}\n    ", "normal_query": "?movie kg:5898 kg:6386 ; >// Written by David Zucker (Q363666) and Jerry Zucker (Q448604), P1431 for written by property, Q363666 and Q448604 are the entities for David Zucker and Jerry Zucker respectively. However, since Jim Abrahams is not listed in the provided mappings, we can only include those two names here based on the given information. The same applies to other roles below. ?movie kg:5898 kg:3382 ; >// Written by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available. ?movie kg:6616 kg:6386 ; >// Executive produced by David Zucker (Q363666) and Jerry Zucker (Q448604), P58 for executive producer property ?movie kg:6616 kg:3382 ; >// Executive produced by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available. ?movie kg:4915 kg:6386 ; >// Directed by David Zucker (Q363666) and Jerry Zucker (Q448604), P57 for director property ?movie kg:4915 kg:3382 . >// Directed by Q452794 (Jim Abrahams), but since Jim Abrahams is not listed in the provided mappings, this line might be incorrect based on given information. Adjust as necessary with correct mapping if available. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P31 wd:Q5.\",\n \t\t\"?entity wdt:P57 wd:Q2085;\",\n \t\t\"wdt:P57 wd:Q1140578;\",\n \t\t\"wdt:P1431 wd:Q583406;\",\n \t\t\"wdt:P1431 wd:Q1511905.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?entity wdt:P31 wd:Q5. ?entity wdt:P57 wd:Q2085; wdt:P57 wd:Q1140578; wdt:P1431 wd:Q583406; wdt:P1431 wd:Q1511905. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58", "response": "{ \"query\": [\"@subject kg:7564 kg:6667 . @subject kg:7564 kg:1652 . @subject kg:7564 kg:6779 . @subject kg:6807 kg:8419 .\"] }", "normal_query": "@subject kg:7564 kg:6667 . @subject kg:7564 kg:1652 . @subject kg:7564 kg:6779 . @subject kg:6807 kg:8419 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q7546;\",\n \t\t\"?film wdt:P57 wd:Q982339;\",\n \t\t\"?film wdt:P57 wd:Q1033656;\",\n \t\t\"?film wdt:P57 wd:Q116760;\",\n \t\t\"?film wdt:P57 wd:Q1365463;\",\n \t\t\"?film wdt:P58 wd:Q7546.\",\n \t\t\"?film wdt:P58 wd:Q982339.\",\n \t\t\"?film wdt:P58 wd:Q1033656.\",\n \t\t\"?film wdt:P58 wd:Q116760.\",\n \t\t\"?film wdt:P58 wd:Q1365463.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 wd:Q7546; ?film wdt:P57 wd:Q982339; ?film wdt:P57 wd:Q1033656; ?film wdt:P57 wd:Q116760; ?film wdt:P57 wd:Q1365463; ?film wdt:P58 wd:Q7546. ?film wdt:P58 wd:Q982339. ?film wdt:P58 wd:Q1033656. ?film wdt:P58 wd:Q116760. ?film wdt:P58 wd:Q1365463. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463", "response": "{\n \t\"query\": [\n \t\t\"?film kg:5200 kg:6160;\",\n \t\t\"?film kg:5200 kg:8025;\",\n \t\t\"?film kg:5200 kg:5061;\",\n \t\t\"?film kg:5200 kg:5212;\",\n \t\t\"?film kg:5200 kg:4032.\",\n \t\t\"?film kg:7292 ?property.\"\n \t]\n}\n   ", "normal_query": "?film kg:5200 kg:6160; ?film kg:5200 kg:8025; ?film kg:5200 kg:5061; ?film kg:5200 kg:5212; ?film kg:5200 kg:4032. ?film kg:7292 ?property. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86", "response": "{\n \t\"query\": [\n \t\t\"?composer wdt:P86 wd:Q1653396; # Composer of Spy Kids 3-D: Game Over (Q1653396) is ?composer\",\n \t\t\"?composer wdt:P344 wd:Q656357; # ?composer was a star in Sin City (Q656357)\",\n \t\t\"?composer wdt:P57 wd:Q656357; # ?composer directed Sin City (Q656357)\"\n \t\t,\n \t\t\"?composer wdt:P57 wd:Q192115; # ?composer directed Sin City: A Dame to Kill For (Q192115)\"\n \t\t,\n \t\t\"?composer wdt:P57 wd:Q550196\" ,\"?composer wdt:P344 wd:Q550196\" ,\"?composer wdt:P86 wd:Q550196\" ,\"wd:Q550196 wdt:P344 ?cinematographer\" ,\"FILTER(?cinematographer = ?composer)\" ,\"wd:Q550196 wdt:P57 wd:Q192115\"\n \t]\n }\n    ", "normal_query": "?composer wdt:P86 wd:Q1653396; ?composer wdt:P344 wd:Q656357; ?composer wdt:P57 wd:Q656357; ?composer wdt:P57 wd:Q192115; ?composer wdt:P57 wd:Q550196 ?composer wdt:P344 wd:Q550196 ?composer wdt:P86 wd:Q550196 wd:Q550196 wdt:P344 ?cinematographer FILTER(?cinematographer = ?composer) wd:Q550196 wdt:P57 wd:Q192115 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86", "response": "{\n \t\"query\": [\n \t\t\"?composer kg:8021 kg:8138 .\",\n \t\t\"?composer kg:7469 ?star .\",\n \t\t\"?movie1 kg:8021 kg:1324 ;\",\n \t\t\"kg:4876 ?composer ;\",\n \t\t\"kg:9896 ?director .\",\n \t\t\"?movie2 kg:8021 kg:7836 ;\",\n \t\t\"kg:4876 ?composer ;\",\n \t\t\"kg:9896 ?cinematographer .\"\n \t]\n}", "normal_query": "?composer kg:8021 kg:8138 . ?composer kg:7469 ?star . ?movie1 kg:8021 kg:1324 ; kg:4876 ?composer ; kg:9896 ?director . ?movie2 kg:8021 kg:7836 ; kg:4876 ?composer ; kg:9896 ?cinematographer . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86", "response": "{ \"query\": [\n    \"?resource wdt:P161 wd:Q3986814 ;\",\n    \"?resource wdt:P161 wd:Q238211 ;\",\n    \"?resource wdt:P161 wd:Q45602 ;\",\n    \"?resource wdt:P1040 wd:Q199039 ;\",\n    \"?resource wdt:P1040 wd:Q470895 .\"\n  ]\n}", "normal_query": "?resource wdt:P161 wd:Q3986814 ; ?resource wdt:P161 wd:Q238211 ; ?resource wdt:P161 wd:Q45602 ; ?resource wdt:P1040 wd:Q199039 ; ?resource wdt:P1040 wd:Q470895 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P86 kg:2240 ; kg:P161 ?composer . FILTER(?film IN (kg:3454, kg:9905)) . ?movie kg:P1040 kg:9197 ; kg:P86 ?resource . FILTER(?movie IN (kg:6301, kg:2240, kg:6301)) }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P86 kg:2240 ; kg:P161 ?composer . FILTER(?film IN (kg:3454, kg:9905)) . ?movie kg:P1040 kg:9197 ; kg:P86 ?resource . FILTER(?movie IN (kg:6301, kg:2240, kg:6301)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P57 wd:Q448604 .\",\n \t\t\"?film wdt:P57 wd:Q363666 .\",\n \t\t\"?film wdt:P57 wd:Q452794 .\",\n \t\t\"?film wdt:P1431 wd:Q448604 .\",\n \t\t\"?film wdt:P1431 wd:Q363666 .\",\n \t\t\"?film wdt:P1431 wd:Q452794 .\"\n \t]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q448604 . ?film wdt:P57 wd:Q363666 . ?film wdt:P57 wd:Q452794 . ?film wdt:P1431 wd:Q448604 . ?film wdt:P1431 wd:Q363666 . ?film wdt:P1431 wd:Q452794 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794", "response": "{ \"query\": [\n    \"?film kg:P31 kg:Q11424 .\",\n    \"?film kg:P57 | kg:P58 kg:6837 ;\", \">// Jim Abrahams, Jerry Zucker, and David Zucker as producers/directors/writers. Assuming Q448604 is the ID for these individuals combined or a placeholder for multiple IDs in this context which might not be accurate but used based on provided data points. In real scenarios, each individual would have their own unique identifier and roles (producer, director, writer) would be more specifically defined with different properties if available in the KG schema.\",\n    \"?film kg:P57 | kg:P58 kg:8970 ;\",\n    \"?film kg:P57 | kg:P58 kg:6390 .\"\n] }", "normal_query": "?film kg:P31 kg:Q11424 . ?film kg:P57 | kg:P58 kg:6837 ; >// Jim Abrahams, Jerry Zucker, and David Zucker as producers/directors/writers. Assuming Q448604 is the ID for these individuals combined or a placeholder for multiple IDs in this context which might not be accurate but used based on provided data points. In real scenarios, each individual would have their own unique identifier and roles (producer, director, writer) would be more specifically defined with different properties if available in the KG schema. ?film kg:P57 | kg:P58 kg:8970 ; ?film kg:P57 | kg:P58 kg:6390 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328", "response": "{\n \t\"query\": [\n \t\t\"?work wdt:P57 wd:Q5836844;\",\n \t\t\"?work wdt:P57 wd:Q5658534;\",\n \t\t\"?work wdt:P57 wd:Q4022902;\",\n \t\t\"?work wdt:P57 wd:Q4023328;\",\n \t\t\"?work wdt:P1040 wd:Q5836844;\",\n \t\t\"?work wdt:P1040 wd:Q5658534;\",\n \t\t\"?work wdt:P1040 wd:Q4022902;\",\n \t\t\"?work wdt:P1040 wd:Q4023328;\",\n \t\t\"?work wdt:P58 wd:Q5836844;\",\n \t\t\"?work wdt:P58 wd:Q5658534;\",\n \t\t\"?work wdt:P58 wd:Q4022902;\",\n \t\t\"?work wdt:P58 wd:Q4023328.\"\n \t]\n }\n    ", "normal_query": "?work wdt:P57 wd:Q5836844; ?work wdt:P57 wd:Q5658534; ?work wdt:P57 wd:Q4022902; ?work wdt:P57 wd:Q4023328; ?work wdt:P1040 wd:Q5836844; ?work wdt:P1040 wd:Q5658534; ?work wdt:P1040 wd:Q4022902; ?work wdt:P1040 wd:Q4023328; ?work wdt:P58 wd:Q5836844; ?work wdt:P58 wd:Q5658534; ?work wdt:P58 wd:Q4022902; ?work wdt:P58 wd:Q4023328. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328", "response": "{\n \t\"query\": [\"$resource\"]\n \t}\n \t", "normal_query": "$resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P106 wd:Q7042855 .\",\n \t\t\"?filmEditor wdt:P1040 wd:Q13471372 .\",\n \t\t\"?filmEditor wdt:P1040 wd:Q483197 .\",\n \t\t\"?filmEditor wdt:P1040 wd:Q484679 .\",\n \t\t\"{ ?filmEditor wdt:P58 wd:Q13471372. } UNION { ?filmEditor wdt:P1431 wd:Q13471372. } UNION { ?filmEditor wdt:P1040 wd:Q13471372. }\",\n \t\t\"{ ?filmEditor wdt:P58 wd:Q483197. } UNION { ?filmEditor wdt:P1431 wd:Q483197. } UNION { ?filmEditor wdt:P1040 wd:Q483197. }\",\n \t\t\"{ ?filmEditor wdt:P58 wd:Q484679. } UNION { ?filmEditor wdt:P1431 wd:Q484679. } UNION { ?filmEditor wdt:P1040 wd:Q484679. }\"\n \t]\n}\n  \t", "normal_query": "?filmEditor wdt:P106 wd:Q7042855 . ?filmEditor wdt:P1040 wd:Q13471372 . ?filmEditor wdt:P1040 wd:Q483197 . ?filmEditor wdt:P1040 wd:Q484679 . { ?filmEditor wdt:P58 wd:Q13471372. } UNION { ?filmEditor wdt:P1431 wd:Q13471372. } UNION { ?filmEditor wdt:P1040 wd:Q13471372. } { ?filmEditor wdt:P58 wd:Q483197. } UNION { ?filmEditor wdt:P1431 wd:Q483197. } UNION { ?filmEditor wdt:P1040 wd:Q483197. } { ?filmEditor wdt:P58 wd:Q484679. } UNION { ?filmEditor wdt:P1431 wd:Q484679. } UNION { ?filmEditor wdt:P1040 wd:Q484679. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n  { ?film kg:P106 kg:8747. }\\n  UNION\\n  { ?film kg:P1431 kg:5593. }\\n  UNION\\n  { ?film kg:P58 kg:1593. }\\n  FILTER(?film IN (kg:9389, kg:1101, kg:8630))\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { { ?film kg:P106 kg:8747. } UNION { ?film kg:P1431 kg:5593. } UNION { ?film kg:P58 kg:1593. } FILTER(?film IN (kg:9389, kg:1101, kg:8630)) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P106 wd:Q3282637 .\",\n \t\t\"?filmProducer wdt:P1431 wd:Q5437360 .\", \">// The Confession as written by the producer, assuming P1431 is for writing role and Q5437360 is \" ,\n \t\t\"?filmProducer wdt:P1431 wd:Q6084069 .\", \">// Fate as written by the producer, assuming P1431 is for writing role and Q6084069 is \",\n \t\t\"?filmProducer wdt:P1431 wd:Q12813010 .\", \">// The Waiting Room as written by the producer, assuming P1431 is for writing role and Q12813010 is \"\n \t\t,\n \t\t\"?filmProducer wdt:P58 wd:Q5437360 .\", \">// The Confession as edited by the producer, assuming P58 is for editing role and Q5437360 is \",\n \t\t\"?filmProducer wdt:P58 wd:Q6084069 .\", \">// Fate as edited by the producer, assuming P58 is for editing role and Q6084069 is \",\n \t\t\"?filmProducer wdt:P58 wd:Q12813010 .\" , \">// The Waiting Room as edited by the producer, assuming P58 is for editing role and Q12813010 is \"\n \t]\n}", "normal_query": "?filmProducer wdt:P106 wd:Q3282637 . ?filmProducer wdt:P1431 wd:Q5437360 . >// The Confession as written by the producer, assuming P1431 is for writing role and Q5437360 is ?filmProducer wdt:P1431 wd:Q6084069 . >// Fate as written by the producer, assuming P1431 is for writing role and Q6084069 is ?filmProducer wdt:P1431 wd:Q12813010 . >// The Waiting Room as written by the producer, assuming P1431 is for writing role and Q12813010 is ?filmProducer wdt:P58 wd:Q5437360 . >// The Confession as edited by the producer, assuming P58 is for editing role and Q5437360 is ?filmProducer wdt:P58 wd:Q6084069 . >// Fate as edited by the producer, assuming P58 is for editing role and Q6084069 is ?filmProducer wdt:P58 wd:Q12813010 . >// The Waiting Room as edited by the producer, assuming P58 is for editing role and Q12813010 is LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58", "response": "{ \"query\" : [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P106 kg:2731 ; kg:P1431 kg:8941 ; kg:P1431 kg:4674 ; kg:P1431 kg:6509 ; kg:P58 kg:2687 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P106 kg:2731 ; kg:P1431 kg:8941 ; kg:P1431 kg:4674 ; kg:P1431 kg:6509 ; kg:P58 kg:2687 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"?influencer wdt:P737 wd:Q312258.\",\n \t\t\"?work (wdt:P1040|wdt:P58) ?influencer;\",\n \t\t\"wdt:P31/wdt:P279* wd:Q63993096.\"\n \t]\n}", "normal_query": "?influencer wdt:P737 wd:Q312258. ?work (wdt:P1040|wdt:P58) ?influencer; wdt:P31/wdt:P279* wd:Q63993096. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258", "response": "{ \"query\": [\n    \"?x kg:0379 kg:1581 .\",\n    \"?x kg:0379 kg:1569 .\",\n    \"?x kg:0379 kg:8834 .\",\n    \"?x kg:5008 ?y .\",\n    \"?y kg:0109 kg:6541 .\"\n  ]\n}", "normal_query": "?x kg:0379 kg:1581 . ?x kg:0379 kg:1569 . ?x kg:0379 kg:8834 . ?x kg:5008 ?y . ?y kg:0109 kg:6541 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424; \",\n \t\t\"wdt:P161 ?actor; \",\n \t\t\"wdt:P57 ?director; \",\n \t\t\"wdt:P86 ?composer.\",\n \t\t\"{?film wdt:P1476 'The Floorwalker'.}\",\n \t\t\"{?film wdt:P161 wd:Q109116.}\",\n \t\t\"{?film wdt:P57 wd:Q109116.}\",\n \t\t\"{?film wdt:P86 wd:Q109116.}\"\n \t]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424; wdt:P161 ?actor; wdt:P57 ?director; wdt:P86 ?composer. {?film wdt:P1476 'The Floorwalker'.} {?film wdt:P161 wd:Q109116.} {?film wdt:P57 wd:Q109116.} {?film wdt:P86 wd:Q109116.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58", "response": "{ \"query\": [\n    \"?resource kg:1821 kg:4662 .\",\n    \"?resource kg:2672 kg:0717 .\",\n    \"?resource kg:9331 kg:2052 .\",\n    \"?resource kg:5380 ?composer\"\n  ]\n}", "normal_query": "?resource kg:1821 kg:4662 . ?resource kg:2672 kg:0717 . ?resource kg:9331 kg:2052 . ?resource kg:5380 ?composer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P344 wd:Q192115;\",\n \t\t\"wdt:P344 wd:Q1165050;\",\n \t\t\"wdt:P161 ?star;\",\n \t\t\"wdt:P57 ?writer;\",\n \t\t\"wdt:P1040 ?editor;\",\n \t\t\"wdt:P58 ?director.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?cinematographer wdt:P344 wd:Q192115; wdt:P344 wd:Q1165050; wdt:P161 ?star; wdt:P57 ?writer; wdt:P1040 ?editor; wdt:P58 ?director. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3755 kg:2044 .\",\n \t\t\"?x kg:3755 kg:4869 .\",\n \t\t\"?x kg:2156 ?y .\",\n \t\t\"{?y kg:9519 kg:2044.} UNION {?y kg:9519 kg:4869.}\",\n \t\t\"{?y kg:6918 kg:2044.} UNION {?y kg:6918 kg:4869.}\",\n \t\t\"{?y kg:8142 kg:2044.} UNION {?y kg:8142 kg:4869.}\"\n \t]\n}\n   ", "normal_query": "?x kg:3755 kg:2044 . ?x kg:3755 kg:4869 . ?x kg:2156 ?y . {?y kg:9519 kg:2044.} UNION {?y kg:9519 kg:4869.} {?y kg:6918 kg:2044.} UNION {?y kg:6918 kg:4869.} {?y kg:8142 kg:2044.} UNION {?y kg:8142 kg:4869.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P344 wd:Q1432710;\",\n \t\t\"?film wdt:P344 wd:Q2082586;\",\n \t\t\"?film wdt:P344 wd:Q730888;\",\n \t\t\"?film wdt:P344 wd:Q205447;\",\n \t\t\"?film wdt:P161 ?person.\",\n \t\t\"?person wdt:P1040 wd:Q17893055;\"\n \t\t,\n \t\t\"?person wdt:P1431 wd:Q17893055.\"\n \t]\n }\n    ", "normal_query": "?film wdt:P344 wd:Q1432710; ?film wdt:P344 wd:Q2082586; ?film wdt:P344 wd:Q730888; ?film wdt:P344 wd:Q205447; ?film wdt:P161 ?person. ?person wdt:P1040 wd:Q17893055; ?person wdt:P1431 wd:Q17893055. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:0792/kg:7298/kg:5258 ?movie .\",\n \t\t\"{?movie kg:0792/kg:7135 kg:6465.} UNION\",\n \t\t\"{?movie kg:0792/kg:7135 kg:8692.} UNION\",\n \t\t\"{?movie kg:0792/kg:7135 kg:0268.} UNION\",\n \t\t\"{?movie kg:0792/kg:7135 kg:8110.} UNION\",\n \t\t\"{?movie kg:0792/kg:7135 kg:8430.}\"\n \t]\n}\n   ", "normal_query": "?resource kg:0792/kg:7298/kg:5258 ?movie . {?movie kg:0792/kg:7135 kg:6465.} UNION {?movie kg:0792/kg:7135 kg:8692.} UNION {?movie kg:0792/kg:7135 kg:0268.} UNION {?movie kg:0792/kg:7135 kg:8110.} UNION {?movie kg:0792/kg:7135 kg:8430.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"?film wdt:P344 wd:Q3485595 ;\",\n    \"?film wdt:P161 ?person .\"\n  ]\n}\n    ", "normal_query": "?film wdt:P344 wd:Q3485595 ; ?film wdt:P161 ?person . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040", "response": "{\n \t\"query\": [\n \t\t\"?film kg:4229 ?person .\",\n \t\t\"{?film kg:4756 kg:5162.} UNION {?film kg:4756 kg:8977.} UNION {?film kg:4756 kg:0716.} UNION {?film kg:4756 kg:2890.} UNION {?film kg:4756 kg:5876.} UNION {?film kg:4756 kg:5245.}\",\n \t\t\"?person kg:0564 kg:4842.\"\n \t]\n}\n   ", "normal_query": "?film kg:4229 ?person . {?film kg:4756 kg:5162.} UNION {?film kg:4756 kg:8977.} UNION {?film kg:4756 kg:0716.} UNION {?film kg:4756 kg:2890.} UNION {?film kg:4756 kg:5876.} UNION {?film kg:4756 kg:5245.} ?person kg:0564 kg:4842. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n  \"query\": [\n    \"?influencedPerson wdt:P737 wd:Q312258 .\",\n    \"?influencedPerson wdt:P26 wd:Q312258 .\"\n  ]\n}", "normal_query": "?influencedPerson wdt:P737 wd:Q312258 . ?influencedPerson wdt:P26 wd:Q312258 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258", "response": "{ \"query\": [\n    \"?x a kg:3227 ;\",\n    \"kg:0593 kg:2587 ;\", \">// P57 for influenced by, Q2493884 for Jacques Demy as entity reference in the KG context provided but this is not accurate based on the given mappings. The correct property and object should be identified from the possible entities and properties list which seems to have some repetition and unclear mapping without a direct link to Jacques Demy or his influence and marriage details directly. However, following the instruction strictly with available data: kg:0593 is P57 (director of) and Q2493884 doesn't match any known entity for Jacques Demy in the provided list but assumed as a placeholder for demonstration purposes here. The same applies to other properties and entities used below which are placeholders based on the instruction's limitation.\",\n    \"kg:6829 kg:7981 ;\", \">// P1040 for work, Q2298257 is also assumed as a placeholder for Vagabond or The Gleaners and I in this context but not directly linked to the titles without further clarification on entity mappings.\",\n    \"kg:8758 kg:3227 ;\", \">// P58 for editor, Q312258 is assumed as a placeholder for the writer/editor/director role here based on the instruction's limitation and provided list which doesn't directly map to roles or titles without further clarification.\",\n    \"kg:4612 kg:2587 .\" ,\">// P26 for spouse, Q2493884 is assumed as a placeholder for Jacques Demy in this context but not directly linked to him without further clarification on entity mappings.\"\n] }", "normal_query": "?x a kg:3227 ; kg:0593 kg:2587 ; >// P57 for influenced by, Q2493884 for Jacques Demy as entity reference in the KG context provided but this is not accurate based on the given mappings. The correct property and object should be identified from the possible entities and properties list which seems to have some repetition and unclear mapping without a direct link to Jacques Demy or his influence and marriage details directly. However, following the instruction strictly with available data: kg:0593 is P57 (director of) and Q2493884 doesn't match any known entity for Jacques Demy in the provided list but assumed as a placeholder for demonstration purposes here. The same applies to other properties and entities used below which are placeholders based on the instruction's limitation. kg:6829 kg:7981 ; >// P1040 for work, Q2298257 is also assumed as a placeholder for Vagabond or The Gleaners and I in this context but not directly linked to the titles without further clarification on entity mappings. kg:8758 kg:3227 ; >// P58 for editor, Q312258 is assumed as a placeholder for the writer/editor/director role here based on the instruction's limitation and provided list which doesn't directly map to roles or titles without further clarification. kg:4612 kg:2587 . >// P26 for spouse, Q2493884 is assumed as a placeholder for Jacques Demy in this context but not directly linked to him without further clarification on entity mappings. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P344 wd:Q6084069;\",\n \t\t \"wdt:P161 wd:Q6099428;\",\n \t\t \"wdt:P161 wd:Q5265241.\",\n \t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}\n    ", "normal_query": "?resource wdt:P344 wd:Q6084069; wdt:P161 wd:Q6099428; wdt:P161 wd:Q5265241. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P58 kg:6084069 ; kg:P161 kg:6099428 , kg:5265241 ; kg:P344 kg:12813010 ; kg:P1431 kg:12813010 , kg:12813010 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P58 kg:6084069 ; kg:P161 kg:6099428 , kg:5265241 ; kg:P344 kg:12813010 ; kg:P1431 kg:12813010 , kg:12813010 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor wdt:P1040 wd:Q2445896 ;\", \">// Pay Day (work title) as a film editor's work, using property P1040 for works directed, written or produced by the subject. However, since we need to check if the same entity is also an editor and director, we should use properties that cover all roles: P57 (director), P58 (screenwriter), and P1040 (works). But given the provided properties, we'll focus on P1040 for simplicity as it can represent works in general which could include editing, writing, or directing depending on context. However, this simplification might not fully capture all roles accurately without additional context or properties that specifically denote each role separately. Thus, a more accurate query would require specific properties for each role (editor, writer, director), but with the given options, we'll use P1040 to represent works in general and assume it covers the roles mentioned in the question as best as possible within these constraints.\",\n \t\t\"?filmEditor wdt:P1040 wd:Q199039 ;\", \">// Modern Times (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties.\",\n \t\t\"?filmEditor wdt:P1040 wd:Q166739 ;\", \">// The Floorwalker (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties.\",\n \t\t\"?filmEditor wdt:P1040 wd:Q45602 .\" ,\">// Work (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties.\"\n \t]\n }\n    ", "normal_query": "?filmEditor wdt:P1040 wd:Q2445896 ; >// Pay Day (work title) as a film editor's work, using property P1040 for works directed, written or produced by the subject. However, since we need to check if the same entity is also an editor and director, we should use properties that cover all roles: P57 (director), P58 (screenwriter), and P1040 (works). But given the provided properties, we'll focus on P1040 for simplicity as it can represent works in general which could include editing, writing, or directing depending on context. However, this simplification might not fully capture all roles accurately without additional context or properties that specifically denote each role separately. Thus, a more accurate query would require specific properties for each role (editor, writer, director), but with the given options, we'll use P1040 to represent works in general and assume it covers the roles mentioned in the question as best as possible within these constraints. ?filmEditor wdt:P1040 wd:Q199039 ; >// Modern Times (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties. ?filmEditor wdt:P1040 wd:Q166739 ; >// The Floorwalker (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties. ?filmEditor wdt:P1040 wd:Q45602 . >// Work (work title) as a film editor's work using P1040 for works directed, written or produced by the subject. Again, this is an assumption based on provided properties. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58", "response": "{\n \t\"query\": [\"$filmEditor\"]\n \t}\n \t                \t\t", "normal_query": "$filmEditor LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?writer wdt:P1040 wd:Q5437360 ;\",\n \t\t\"?writer wdt:P1040 wd:Q6084069 ;\",\n \t\t\"?writer wdt:P1040 wd:Q12813010 ;\",\n \t\t\"?writer wdt:P1431 wd:Q5437360 ;\",\n \t\t\"?writer wdt:P1431 wd:Q6084069 ;\",\n \t\t\"?writer wdt:P1431 wd:Q12813010 .\"\n \t]\n}\n    ", "normal_query": "?writer wdt:P1040 wd:Q5437360 ; ?writer wdt:P1040 wd:Q6084069 ; ?writer wdt:P1040 wd:Q12813010 ; ?writer wdt:P1431 wd:Q5437360 ; ?writer wdt:P1431 wd:Q6084069 ; ?writer wdt:P1431 wd:Q12813010 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:8765 kg:0579 ; kg:8765 kg:6062 ; kg:8321 kg:6108 ; kg:5311 kg:0579 ; kg:5311 kg:6062 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:8765 kg:0579 ; kg:8765 kg:6062 ; kg:8321 kg:6108 ; kg:5311 kg:0579 ; kg:5311 kg:6062 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q7546, wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463;\",\n \t\t\"?film wdt:P58 wd:Q7546, wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463.\"\n \t]\n }\n    ", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 wd:Q7546, wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463; ?film wdt:P58 wd:Q7546, wd:Q982339, wd:Q1033656, wd:Q116760, wd:Q1365463. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463", "response": "{\n \t\"query\": [\n \t\t\"?film kg:3685/kg:0962/kg:6787/kg:0694/kg:3303/kg:5554 kg:7439 .\",\n \t\t\"?film kg:3685/kg:0962/kg:6787/kg:0694/kg:3303/kg:5554 kg:3685 .\"\n \t]\n}\n   ", "normal_query": "?film kg:3685/kg:0962/kg:6787/kg:0694/kg:3303/kg:5554 kg:7439 . ?film kg:3685/kg:0962/kg:6787/kg:0694/kg:3303/kg:5554 kg:3685 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P344 wd:Q5265241;\",\n \t\t\t\"wdt:P344 wd:Q6084069;\",\n \t\t\t\"wdt:P161 wd:Q12813010;\",\n \t\t\t\"wdt:P1040 wd:Q5265241;\",\n \t\t\t\"wdt:P1040 wd:Q6084069;\",\n \t\t\t\"wdt:P1431 wd:Q5265241;\",\n \t\t\t\"wdt:P58 wd:Q6084069.\"\n \t]\n }\n    ", "normal_query": "?resource wdt:P344 wd:Q5265241; wdt:P344 wd:Q6084069; wdt:P161 wd:Q12813010; wdt:P1040 wd:Q5265241; wdt:P1040 wd:Q6084069; wdt:P1431 wd:Q5265241; wdt:P58 wd:Q6084069. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:2168 kg:4263;\",\n \t\t\"?x kg:7811 kg:2942;\",\n \t\t\"?x kg:1408 kg:4489;\",\n \t\t\"?x kg:2309 kg:4263;\"\n \t]\n }", "normal_query": "?x kg:2168 kg:4263; ?x kg:7811 kg:2942; ?x kg:1408 kg:4489; ?x kg:2309 kg:4263; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855", "response": "{\n \t\"query\": [\n \t\t\"?filmEditor配偶 ?作品 .\",\n \t\t\"?作品 wdt:P58 wd:Q878673, wd:Q567519, wd:Q543382, wd:Q570483, wd:Q327427.\",\n \t\t\"?filmEditor配偶 wdt:P26 ?filmEditor .\",\n \t\t\"?filmEditor wdt:P106 wd:Q7042855.\"\n \t]\n}\n   ", "normal_query": "?filmEditor配偶 ?作品 . ?作品 wdt:P58 wd:Q878673, wd:Q567519, wd:Q543382, wd:Q570483, wd:Q327427. ?filmEditor配偶 wdt:P26 ?filmEditor . ?filmEditor wdt:P106 wd:Q7042855. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855", "response": "{ \"query\": [\n    \"?editor kg:9872 ?spouse .\",\n    \"?film kg:3176 ?author .\",\n    \"{?film kg:label 'The City Tramp' .} UNION {?film kg:label 'Katzelmacher' .} UNION {?film kg:label 'Why Does Herr R. Run Amok?' .} UNION {?film kg:label 'Whity' .} UNION {?film kg:label 'In a Year of 13 Moons' .}\",\n    \"?spouse kg:6727 kg:8637 .\",\n    \"?author ?p ?spouse .\"\n] }", "normal_query": "?editor kg:9872 ?spouse . ?film kg:3176 ?author . {?film kg:label 'The City Tramp' .} UNION {?film kg:label 'Katzelmacher' .} UNION {?film kg:label 'Why Does Herr R. Run Amok?' .} UNION {?film kg:label 'Whity' .} UNION {?film kg:label 'In a Year of 13 Moons' .} ?spouse kg:6727 kg:8637 . ?author ?p ?spouse . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P31 wd:Q5.\",\n \t\t\"?director wdt:P21 wd:Q6581072.\",\n \t\t\"{?director wdt:P57 wd:Q156497.}\",\n \t\t\"{?director wdt:P57 wd:Q158069.}\",\n \t\t\"{?director wdt:P57 wd:Q497617.}\",\n \t\t\"{?director wdt:P58 wd:Q156497.}\",\n \t\t\"{?director wdt:P58 wd:Q158069.}\",\n \t\t\"{?director wdt:P58 wd:Q497617.}\",\n \t\t\"{?director wdt:P1040 wd:Q156497.}\",\n \t\t\"{?director wdt:P1040 wd:Q158069.}\",\n \t\t\"{?director wdt:P1040 wd:Q497617.}\"\n \t]\n}\n    ", "normal_query": "?director wdt:P31 wd:Q5. ?director wdt:P21 wd:Q6581072. {?director wdt:P57 wd:Q156497.} {?director wdt:P57 wd:Q158069.} {?director wdt:P57 wd:Q497617.} {?director wdt:P58 wd:Q156497.} {?director wdt:P58 wd:Q158069.} {?director wdt:P58 wd:Q497617.} {?director wdt:P1040 wd:Q156497.} {?director wdt:P1040 wd:Q158069.} {?director wdt:P1040 wd:Q497617.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072", "response": "{\n \t\"query\": [\n \t\t\"?director kg:0937 kg:3015 .\",\n \t\t\"?director kg:5041 kg:0298 .\",\n \t\t\"?director kg:5041 kg:2814 .\",\n \t\t\"?director kg:5041 kg:9872 .\"\n \t]\n}", "normal_query": "?director kg:0937 kg:3015 . ?director kg:5041 kg:0298 . ?director kg:5041 kg:2814 . ?director kg:5041 kg:9872 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q1277329;\",\n \t\t\"?entity wdt:P57 wd:Q219170;\",\n \t\t\"?entity wdt:P57 wd:Q219155;\",\n \t\t\"?entity wdt:P57 wd:Q198557;\",\n \t\t\"?entity wdt:P1040 wd:Q627060;\",\n \t\t\"?entity wdt:P27 wd:Q16.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?entity wdt:P57 wd:Q1277329; ?entity wdt:P57 wd:Q219170; ?entity wdt:P57 wd:Q219155; ?entity wdt:P57 wd:Q198557; ?entity wdt:P1040 wd:Q627060; ?entity wdt:P27 wd:Q16. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16", "response": "{ \"query\": [\n    \"?resource\",\n    \"kg:3694\", \"?resource\",\n    \"kg:5370\", \"kg:7793\",\n    \"kg:3646\", \"kg:2009\"\n] }", "normal_query": "?resource kg:3694 ?resource kg:5370 kg:7793 kg:3646 kg:2009 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P31 wd:Q5.\",\n \t\t\"?item wdt:P57 wd:Q206182;\",\n \t\t\"wdt:P57 wd:Q391143;\",\n \t\t\"wdt:P57 wd:Q232108;\",\n \t\t\"wdt:P57 wd:Q378013.\",\n \t\t\"?item wdt:P58 wd:Q206182;\",\n \t\t\"wdt:P58 wd:Q391143;\",\n \t\t\"wdt:P58 wd:Q232108;\",\n \t\t\"wdt:P58 wd:Q378013.\"\n \t]\n}\n    ", "normal_query": "?item wdt:P31 wd:Q5. ?item wdt:P57 wd:Q206182; wdt:P57 wd:Q391143; wdt:P57 wd:Q232108; wdt:P57 wd:Q378013. ?item wdt:P58 wd:Q206182; wdt:P58 wd:Q391143; wdt:P58 wd:Q232108; wdt:P58 wd:Q378013. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58", "response": "{\n \t\"query\": [\n \t\t\"?director kg:2592 kg:5763 ;\",\n \t\t\"?director kg:0873/kg:7013* kg:0654, kg:8594, kg:6340, kg:1543 .\"\n \t]\n}", "normal_query": "?director kg:2592 kg:5763 ; ?director kg:0873/kg:7013* kg:0654, kg:8594, kg:6340, kg:1543 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P108 wd:Q42944; \",\n \t\t\"wdt:P108 wd:Q7204713; \",\n \t\t\"wdt:P108 wd:Q7432436; \",\n \t\t\"wdt:P108 wd:Q37033. \"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?resource wdt:P108 wd:Q42944; wdt:P108 wd:Q7204713; wdt:P108 wd:Q7432436; wdt:P108 wd:Q37033. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033", "response": "{\n \t\"query\": [\n \t\t\"?x kg:0273 kg:4051; # Employee of Open Data Institute (Q7095994, kg:4051) - P108 (kg:0273) indicates employment relationship. This line checks if ?x was employed by the Open Data Institute.\",\n \t\t\"?x kg:0273/kg:9047* kg:1709; # Employee of CERN (Q42944, kg:1709). The path expression here checks for any employment relationship (?x kg:0273) that leads to CERN (kg:1709), with the possibility of intermediate organizations (indicated by */kg:9047 which represents part of or has parts relationships).\",\n \t\t\"?x kg:0273/kg:9047* kg:3317; # Employee of World Wide Web Consortium (Q7204713, kg:3317). Similar to the previous line, this checks for any employment relationship leading to W3C.\",\n \t\t\"?x kg:0273/kg:9047* kg:4345; # Employee of School of Electronics and Computer Science, University of Southampton (Q7432436, kg:4345). This line checks for any employment relationship leading to the specified school.\",\n \t\t\"?x kg:0273/kg:9047* kg:6801 # Employee of Plessey (Q37033, kg:6801). This final line checks for any employment relationship leading to Plessey.\"\n \t]\n}", "normal_query": "?x kg:0273 kg:4051; ?x kg:0273/kg:9047* kg:1709; ?x kg:0273/kg:9047* kg:3317; ?x kg:0273/kg:9047* kg:4345; ?x kg:0273/kg:9047* kg:6801 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"{?film wdt:P57 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.}\",\n \t\t\"{?film wdt:P1040 wd:Q562108.} UNION {?film wdt:P1040 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q35979475.}\",\n \t\t\"{?film wdt:P162 wd:Q562108.} UNION {?film wdt:P162 wd:Q1687239.} UNION {?film wdt:P162 wd:Q35979475.}\",\n \t\t\"{?film wdt:P272 wd:Q562108.} UNION {?film wdt:P272 wd:Q1687239.} UNION {?film wdt:P272 wd:Q35979475.}\",\n \t\t\"{?film wdt:P58 wd:Q562108.} UNION {?film wdt:P58 wd:Q1687239.} UNION {?film wdt:P58 wd:Q35979475.}\"\n \t]\n}\n  \t", "normal_query": "?film wdt:P31 wd:Q11424 . {?film wdt:P57 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.} {?film wdt:P1040 wd:Q562108.} UNION {?film wdt:P1040 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q35979475.} {?film wdt:P162 wd:Q562108.} UNION {?film wdt:P162 wd:Q1687239.} UNION {?film wdt:P162 wd:Q35979475.} {?film wdt:P272 wd:Q562108.} UNION {?film wdt:P272 wd:Q1687239.} UNION {?film wdt:P272 wd:Q35979475.} {?film wdt:P58 wd:Q562108.} UNION {?film wdt:P58 wd:Q1687239.} UNION {?film wdt:P58 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film kg:1046 kg:3803;\",\n \t\t\"?film kg:1046 kg:7741;\",\n \t\t\"?film kg:1046 kg:3705;\",\n \t\t\"?film kg:1046 kg:8798;\"\n \t]\n }\n \t            \t \t  \t", "normal_query": "?film kg:1046 kg:3803; ?film kg:1046 kg:7741; ?film kg:1046 kg:3705; ?film kg:1046 kg:8798; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 wd:Q192115;\",\n \t\t\"?entity wdt:P344 wd:Q656357;\",\n \t\t\"?entity wdt:P57 wd:Q192115;\",\n \t\t\"?entity wdt:P57 wd:Q656357;\",\n \t\t\"?entity wdt:P1040 wd:Q192115;\",\n \t\t\"?entity wdt:P1040 wd:Q656357;\",\n \t\t\"?entity wdt:P58 wd:Q15622760.\"\n \t]\n }\n    ", "normal_query": "?entity wdt:P344 wd:Q192115; ?entity wdt:P344 wd:Q656357; ?entity wdt:P57 wd:Q192115; ?entity wdt:P57 wd:Q656357; ?entity wdt:P1040 wd:Q192115; ?entity wdt:P1040 wd:Q656357; ?entity wdt:P58 wd:Q15622760. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:1179 kg:4083;\",\n \t\t\"kg:1179 kg:5468;\",\n \t\t\"kg:2970 kg:4083;\",\n \t\t\"kg:3401 kg:5468;\",\n \t\t\"kg:0409 kg:4772;\",\n \t\t\"kg:0729 ?y.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?x kg:1179 kg:4083; kg:1179 kg:5468; kg:2970 kg:4083; kg:3401 kg:5468; kg:0409 kg:4772; kg:0729 ?y. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?thisNight wdt:P344 wd:Q1699716; # This Night has the ID Q1699716 in Wikidata, and we use property P344 to link films with their IDs in IMDB database. However, for simplicity, let's assume this is a direct identifier of the film in our query context. We are looking for the director, cinematographer, and writer of This Night.\"\n \t\t,\n \t\t\"?person (wdt:P57|wdt:P1040) ?thisNight; # P57 represents director, P1040 can represent both cinematographer and writer in some contexts. We are looking for a person who is either the director, cinematographer or writer of This Night.\"\n \t\t,\n \t\t\"?person wdt:P58 wd:Q823767; # Assuming P58 represents the relation between a person and their work (film), Q823767 is Rio das Mortes\"\n \t\t,\n \t\t\"?person wdt:P58 wd:Q686125; # Q686125 is Lili Marleen\"\n \t\t,\n \t\t\"?person wdt:P58 wd:Q327427\" ]}", "normal_query": "?thisNight wdt:P344 wd:Q1699716; ?person (wdt:P57|wdt:P1040) ?thisNight; ?person wdt:P58 wd:Q823767; ?person wdt:P58 wd:Q686125; ?person wdt:P58 wd:Q327427 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P57 ?person . ?film kg:P344 kg:9214 . ?rioFilm kg:P57 ?person . ?rioFilm kg:P344 kg:7806 . ?liliMarleenFilm kg:P57 ?person . ?liliMarleenFilm kg:P344 kg:4632 . ?whityFilm kg:P57 ?person . ?whityFilm kg:P344 kg:2889 . VALUES (?film ?rioFilm ?liliMarleenFilm ?whityFilm) { (kg:1699716 kg:823767 kg:686125 kg:327427) } FILTER(?film != ?rioFilm && ?film != ?liliMarleenFilm && ?film != ?whityFilm && ?rioFilm != ?liliMarleenFilm && ?rioFilm != ?whityFilm && ?liliMarleenFilm != ?whityFilm) . VALUES (?person) { (kg:3585 kg:3260) } . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P57 ?person . ?film kg:P344 kg:9214 . ?rioFilm kg:P57 ?person . ?rioFilm kg:P344 kg:7806 . ?liliMarleenFilm kg:P57 ?person . ?liliMarleenFilm kg:P344 kg:4632 . ?whityFilm kg:P57 ?person . ?whityFilm kg:P344 kg:2889 . VALUES (?film ?rioFilm ?liliMarleenFilm ?whityFilm) { (kg:1699716 kg:823767 kg:686125 kg:327427) } FILTER(?film != ?rioFilm && ?film != ?liliMarleenFilm && ?film != ?whityFilm && ?rioFilm != ?liliMarleenFilm && ?rioFilm != ?whityFilm && ?liliMarleenFilm != ?whityFilm) . VALUES (?person) { (kg:3585 kg:3260) } . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P1040 wd:Q623051; # cinematographer of Night of the Living Dead (Q623051) is ?cinematographer\",\n \t\t\"wdt:P27 wd:Q30; # and is American (Q30)\",\n \t\t\"wdt:P58 wd:Q1903317; # directed Martin (Q1903317)\"\n \t\t,\"wdt:P58 wd:Q627060; # directed Season of the Witch (Q627060)\"\n \t\t,\"wdt:P58 wd:Q2520777; # directed The Crazies (Q2520777)\"\n \t\t,\"wdt:P1040 wd:Q1903317; # wrote Martin (Q1903317)\"\n \t\t,\"wdt:P1040 wd:Q627060; # wrote Season of the Witch (Q627060)\"\n \t\t,\"wdt:P1040 wd:Q2520777\" ] }\n   \t", "normal_query": "?cinematographer wdt:P1040 wd:Q623051; wdt:P27 wd:Q30; wdt:P58 wd:Q1903317; wdt:P58 wd:Q627060; wdt:P58 wd:Q2520777; wdt:P1040 wd:Q1903317; wdt:P1040 wd:Q627060; wdt:P1040 wd:Q2520777 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer kg:4862 kg:8669 .\",\n \t\t\"?cinematographer kg:0089 kg:6413 .\",\n \t\t\"?cinematographer kg:0089 kg:6771 .\",\n \t\t\"?cinematographer kg:0089 kg:0518 .\",\n \t\t\"?cinematographer kg:7206 kg:6413 .\",\n \t\t\"?cinematographer kg:7206 kg:6771 .\",\n \t\t\"?cinematographer kg:7206 kg:0518 .\"\n \t]\n}", "normal_query": "?cinematographer kg:4862 kg:8669 . ?cinematographer kg:0089 kg:6413 . ?cinematographer kg:0089 kg:6771 . ?cinematographer kg:0089 kg:0518 . ?cinematographer kg:7206 kg:6413 . ?cinematographer kg:7206 kg:6771 . ?cinematographer kg:7206 kg:0518 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n \t\"query\": [\"$service wikibase://wb-sdk/sparql/query/service\",\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"  ?resource wdt:P344 wd:Q1869678 ;\", \">// Look at Life is Q1869678, P344 is the property for directed films or episodes of a film series by someone (directorship) and cinematography work on a film or episode of a film series by someone (cinematographer). However, since we don't have specific properties for all roles in the provided list, I'm using P344 as an example. In reality, you would need to use different properties for each role (writer, director, cinematographer) and possibly additional qualifiers or statements to specify these roles precisely on Wikidata.\",\n \t\t\"  ?resource wdt:P344 wd:Q613974 ;\", \">// Anyone Lived in a Pretty How Town is Q613974\",\n \t\t\"  ?resource wdt:P344 wd:Q1415127 .\", \">// Filmmaker (assuming this refers to a specific work) is Q1415127\",\n \t\t\"}\"\n \t]\n}\n  \t", "normal_query": "$service wikibase://wb-sdk/sparql/query/service SELECT ?resource WHERE { ?resource wdt:P344 wd:Q1869678 ; >// Look at Life is Q1869678, P344 is the property for directed films or episodes of a film series by someone (directorship) and cinematography work on a film or episode of a film series by someone (cinematographer). However, since we don't have specific properties for all roles in the provided list, I'm using P344 as an example. In reality, you would need to use different properties for each role (writer, director, cinematographer) and possibly additional qualifiers or statements to specify these roles precisely on Wikidata. ?resource wdt:P344 wd:Q613974 ; >// Anyone Lived in a Pretty How Town is Q613974 ?resource wdt:P344 wd:Q1415127 . >// Filmmaker (assuming this refers to a specific work) is Q1415127 } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1698 kg:5971;\",\n \t\t\"kg:1698 kg:0325;\",\n \t\t\"kg:1698 kg:7396;\",\n \t\t\"kg:3669 kg:3249.\"\n \t]\n }", "normal_query": "?resource kg:1698 kg:5971; kg:1698 kg:0325; kg:1698 kg:7396; kg:3669 kg:3249. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"{?film wdt:P57 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.}\",\n \t\t\"{?film wdt:P1040 wd:Q562108.} UNION {?film wdt:P1040 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q35979475.}\",\n \t\t\"{?film wdt:P162 wd:Q562108.} UNION {?film wdt:P162 wd:Q1687239.} UNION {?film wdt:P162 wd:Q35979475.}\",\n \t\t\"{?film wdt:P58 wd:Q562108.} UNION {?film wdt:P58 wd:Q1687239.} UNION {?film wdt:P58 wd:Q35979475.}\"\n \t]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424. {?film wdt:P57 wd:Q562108.} UNION {?film wdt:P57 wd:Q1687239.} UNION {?film wdt:P57 wd:Q35979475.} {?film wdt:P1040 wd:Q562108.} UNION {?film wdt:P1040 wd:Q1687239.} UNION {?film wdt:P1040 wd:Q35979475.} {?film wdt:P162 wd:Q562108.} UNION {?film wdt:P162 wd:Q1687239.} UNION {?film wdt:P162 wd:Q35979475.} {?film wdt:P58 wd:Q562108.} UNION {?film wdt:P58 wd:Q1687239.} UNION {?film wdt:P58 wd:Q35979475.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film kg:3520/kg:2031/kg:5305/kg:1040 kg:4655 .\",\n \t\t\"?film kg:8770/kg:4761/kg:1912 kg:5305 .\"\n \t]\n}\n   ", "normal_query": "?film kg:3520/kg:2031/kg:5305/kg:1040 kg:4655 . ?film kg:8770/kg:4761/kg:1912 kg:5305 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861", "response": "{\n  \"query\": [\n    \"?film wdt:P58 wd:Q551861.\",\n    \"?film wdt:P1040 wd:Q551861.\"\n  ]\n}", "normal_query": "?film wdt:P58 wd:Q551861. ?film wdt:P1040 wd:Q551861. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861", "response": "{\n  \"query\": [\n    \"?film kg:2196 kg:4747 .\",\n    \"?film kg:1950 ?costumeDesigner .\"\n  ]\n}", "normal_query": "?film kg:2196 kg:4747 . ?film kg:1950 ?costumeDesigner . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q3282637 .\",\n \t\t\"{?person wdt:P57 wd:Q13471372.}\",\n \t\t\"{?person wdt:P57 wd:Q483197.}\",\n \t\t\"{?person wdt:P57 wd:Q484679.}\",\n \t\t\"{?person wdt:P1040 wd:Q13471372.}\",\n \t\t\"{?person wdt:P1040 wd:Q483197.}\",\n \t\t\"{?person wdt:P1040 wd:Q484679.}\",\n \t\t\"{?person wdt:P1431 wd:Q13471372.}\",\n \t\t\"{?person wdt:P1431 wd:Q483197.}\",\n \t\t\"{?person wdt:P1431 wd:Q484679.}\",\n \t\t\"{?person wdt:P58 wd:Q13471372.}\",\n \t\t\"{?person wdt:P58 wd:Q483197.}\",\n \t\t\"{?person wdt:P58 wd:Q484679.}\"\n \t]\n}", "normal_query": "?person wdt:P106 wd:Q3282637 . {?person wdt:P57 wd:Q13471372.} {?person wdt:P57 wd:Q483197.} {?person wdt:P57 wd:Q484679.} {?person wdt:P1040 wd:Q13471372.} {?person wdt:P1040 wd:Q483197.} {?person wdt:P1040 wd:Q484679.} {?person wdt:P1431 wd:Q13471372.} {?person wdt:P1431 wd:Q483197.} {?person wdt:P1431 wd:Q484679.} {?person wdt:P58 wd:Q13471372.} {?person wdt:P58 wd:Q483197.} {?person wdt:P58 wd:Q484679.} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource \\nWHERE { \\n    ?resource kg:P106 kg:Q3282637 ; \\n               kg:P57 kg:Q483197 , kg:Q484679 , kg:Q13471372 ; \\n               kg:P1431 kg:Q483197 , kg:Q484679 , kg:Q13471372 ; \\n               kg:P58 kg:Q483197 , kg:Q484679 , kg:Q13471372 .\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P106 kg:Q3282637 ; kg:P57 kg:Q483197 , kg:Q484679 , kg:Q13471372 ; kg:P1431 kg:Q483197 , kg:Q484679 , kg:Q13471372 ; kg:P58 kg:Q483197 , kg:Q484679 , kg:Q13471372 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P57 wd:Q562108 ;\",\n \t\t\"       wdt:P57 wd:Q1687239 ;\",\n \t\t\"       wdt:P57 wd:Q35979475 ;\",\n \t\t\"       wdt:P1040 wd:Q562108 ;\",\n \t\t\"       wdt:P1040 wd:Q1687239 ;\",\n \t\t\"       wdt:P1040 wd:Q35979475 ;\",\n \t\t\"       wdt:P58 wd:Q562108 ;\",\n \t\t\"       wdt:P58 wd:Q1687239 ;\",\n \t\t\"       wdt:P58 wd:Q35979475 .\"\n \t]\n}\n   ", "normal_query": "?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q562108 ; wdt:P57 wd:Q1687239 ; wdt:P57 wd:Q35979475 ; wdt:P1040 wd:Q562108 ; wdt:P1040 wd:Q1687239 ; wdt:P1040 wd:Q35979475 ; wdt:P58 wd:Q562108 ; wdt:P58 wd:Q1687239 ; wdt:P58 wd:Q35979475 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475", "response": "{ \"query\": [\n    \"?film kg:P31 kg:2351 .\",\n    \"?film kg:P57 kg:0132 ;\", \">// Jens Jørgen Thorsen as director/writer/editor (assuming Q562108 is the correct entity for this person, but it's not explicitly stated in the provided list. This might need adjustment based on the actual KG structure and entities available for these persons. The same applies to the following two individuals mentioned below.)\",\n    \"?film kg:P57 kg:4817 ;\", \">// Jørgen Leth as director/writer/editor (assuming Q1687239 is correct)\",\n    \"?film kg:P57 kg:3129 .\" , \">// Ole John as director/writer/editor (assuming Q35979475 is correct)\"\n] }", "normal_query": "?film kg:P31 kg:2351 . ?film kg:P57 kg:0132 ; >// Jens Jørgen Thorsen as director/writer/editor (assuming Q562108 is the correct entity for this person, but it's not explicitly stated in the provided list. This might need adjustment based on the actual KG structure and entities available for these persons. The same applies to the following two individuals mentioned below.) ?film kg:P57 kg:4817 ; >// Jørgen Leth as director/writer/editor (assuming Q1687239 is correct) ?film kg:P57 kg:3129 . >// Ole John as director/writer/editor (assuming Q35979475 is correct) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424;\",\n \t\t\"?film wdt:P57 wd:Q562108;\",\n \t\t\"?film wdt:P57 wd:Q1687239;\",\n \t\t\"?film wdt:P57 wd:Q35979475;\",\n \t\t\"?film wdt:P1040 wd:Q562108;\",\n \t\t\"?film wdt:P1040 wd:Q1687239;\",\n \t\t\"?film wdt:P1040 wd:Q35979475;\",\n \t\t\"?film wdt:P162 wd:Q562108;\",\n \t\t\"?film wdt:P162 wd:Q1687239;\",\n \t\t\"?film wdt:P162 wd:Q35979475;\",\n \t\t\"?film wdt:P58 wd:Q562108;\",\n \t\t\"?film wdt:P58 wd:Q1687239;\",\n \t\t\"?film wdt:P58 wd:Q35979475.\"\n \t]\n}\n   \t            \t \t\t", "normal_query": "?film wdt:P31 wd:Q11424; ?film wdt:P57 wd:Q562108; ?film wdt:P57 wd:Q1687239; ?film wdt:P57 wd:Q35979475; ?film wdt:P1040 wd:Q562108; ?film wdt:P1040 wd:Q1687239; ?film wdt:P1040 wd:Q35979475; ?film wdt:P162 wd:Q562108; ?film wdt:P162 wd:Q1687239; ?film wdt:P162 wd:Q35979475; ?film wdt:P58 wd:Q562108; ?film wdt:P58 wd:Q1687239; ?film wdt:P58 wd:Q35979475. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P31 kg:2176 ; kg:7644/kg:5962/kg:5164/kg:0839/kg:0655 ?person . FILTER(?person IN(kg:562108, kg:1687239, kg:35979475)) . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P31 kg:2176 ; kg:7644/kg:5962/kg:5164/kg:0839/kg:0655 ?person . FILTER(?person IN(kg:562108, kg:1687239, kg:35979475)) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"?emdir wdt:P1040 wd:Q5437360 ;\",\n    \"wdt:P57 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 ;\",\n    \"wdt:P1431 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 ;\",\n    \"wdt:P58 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 .\"\n  ]\n}\n    ", "normal_query": "?emdir wdt:P1040 wd:Q5437360 ; wdt:P57 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 ; wdt:P1431 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 ; wdt:P58 wd:Q25479948 , wd:Q12813010 , wd:Q6084069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58", "response": "{\n  \"query\": [\n    \"?director kg:5181 kg:2825 .\",\n    \"?director kg:5181 kg:0200 .\",\n    \"?director kg:5181 kg:1740 .\",\n    \"{?director kg:4449 ?movie .} UNION\",\n    \"{?director kg:9367 ?movie .} UNION\",\n    \"{?director kg:4623 ?movie .} UNION\",\n    \"{?director kg:58 ?movie .}\"\n  ]\n}\n   ", "normal_query": "?director kg:5181 kg:2825 . ?director kg:5181 kg:0200 . ?director kg:5181 kg:1740 . {?director kg:4449 ?movie .} UNION {?director kg:9367 ?movie .} UNION {?director kg:4623 ?movie .} UNION {?director kg:58 ?movie .} LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"?director wdt:P57 wd:Q5437360 ;\",\n    \"wdt:P1040 wd:Q25479948 ;\",\n    \"wdt:P1431 wd:Q12813010 ;\",\n    \"wdt:P58 wd:Q6084069 .\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?director wdt:P57 wd:Q5437360 ; wdt:P1040 wd:Q25479948 ; wdt:P1431 wd:Q12813010 ; wdt:P58 wd:Q6084069 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58", "response": "{\n  \"query\": [\n    \"?director kg:5542 kg:5001 .\",\n    \"?director kg:0633 kg:8569 .\",\n    \"?director kg:0633 kg:5699 .\",\n    \"?director kg:1442 kg:8569 .\",\n    \"?director kg:1442 kg:5699 .\",\n    \"?director kg:7218 kg:8569 .\",\n    \"?director kg:7218 kg:5699 .\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?director kg:5542 kg:5001 . ?director kg:0633 kg:8569 . ?director kg:0633 kg:5699 . ?director kg:1442 kg:8569 . ?director kg:1442 kg:5699 . ?director kg:7218 kg:8569 . ?director kg:7218 kg:5699 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"?film wdt:P57 wd:Q448604 ;\",\n \t\t\"       wdt:P57 wd:Q363666 ;\",\n \t\t\"       wdt:P57 wd:Q452794 .\",\n \t\t\"?film wdt:P1431 wd:Q448604 ;\",\n \t\t\"       wdt:P1431 wd:Q363666 ;\",\n \t\t\"       wdt:P1431 wd:Q452794 .\",\n \t\t\"?film wdt:P58 wd:Q448604 ;\",\n \t\t\"       wdt:P58 wd:Q363666 ;\",\n \t\t\"       wdt:P58 wd:Q452794\"\n \t]\n}", "normal_query": "?film wdt:P31 wd:Q11424 . ?film wdt:P57 wd:Q448604 ; wdt:P57 wd:Q363666 ; wdt:P57 wd:Q452794 . ?film wdt:P1431 wd:Q448604 ; wdt:P1431 wd:Q363666 ; wdt:P1431 wd:Q452794 . ?film wdt:P58 wd:Q448604 ; wdt:P58 wd:Q363666 ; wdt:P58 wd:Q452794 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794", "response": "{\n \t\"query\": [\n \t\t\"?film kg:7435 kg:7538;\",\n \t\t\"?film kg:7435 kg:2456;\",\n \t\t\"?film kg:7435 kg:9069;\",\n \t\t\"?film kg:5906 kg:7538;\",\n \t\t\"?film kg:5906 kg:2456;\",\n \t\t\"?film kg:5906 kg:9069;\",\n \t\t\"?film kg:3304 kg:7538;\",\n \t\t\"?film kg:3304 kg:2456;\",\n \t\t\"?film kg:3304 kg:9069.\"\n \t]\n }\n \t            \t \t  \t", "normal_query": "?film kg:7435 kg:7538; ?film kg:7435 kg:2456; ?film kg:7435 kg:9069; ?film kg:5906 kg:7538; ?film kg:5906 kg:2456; ?film kg:5906 kg:9069; ?film kg:3304 kg:7538; ?film kg:3304 kg:2456; ?film kg:3304 kg:9069. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P57 wd:Q483197;\",\n \t\t\"?entity wdt:P1040 wd:Q13471372;\",\n \t\t\"?entity wdt:P1040 wd:Q462025;\",\n \t\t\"?entity wdt:P1040 wd:Q17041657;\"\n \t]\n }\n    ", "normal_query": "?entity wdt:P57 wd:Q483197; ?entity wdt:P1040 wd:Q13471372; ?entity wdt:P1040 wd:Q462025; ?entity wdt:P1040 wd:Q17041657; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:7942 kg:7108;\",\n \t\t\"              kg:7942 kg:7646;\",\n \t\t\"              kg:7942 kg:6849;\",\n \t\t\"              kg:7942 kg:7780;\",\n \t\t\"              kg:8081 ?film.\",\n \t\t\"?film kg:0403 \\\"Pietà\\\".\"\n \t]\n }", "normal_query": "?resource kg:7942 kg:7108; kg:7942 kg:7646; kg:7942 kg:6849; kg:7942 kg:7780; kg:8081 ?film. ?film kg:0403 \"Pietà\". LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426", "response": "{\n  \"query\": [\n    \"?cinematographer wdt:P1040 wd:Q44426 .\",\n    \"{ ?work wdt:P57 ?cinematographer . }\",\n    \"UNION { ?work wdt:P161 wd:Q44426 . }\"\n  ]\n}", "normal_query": "?cinematographer wdt:P1040 wd:Q44426 . { ?work wdt:P57 ?cinematographer . } UNION { ?work wdt:P161 wd:Q44426 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer kg:3540 ?fassbinder .\",\n \t\t\"?movie kg:2181 ?fassbinder .\",\n \t\t\"?movie kg:1331 ?cinematographer .\",\n \t\t\"?movie kg:57 ?director .\"\n \t]\n}\n   ", "normal_query": "?cinematographer kg:3540 ?fassbinder . ?movie kg:2181 ?fassbinder . ?movie kg:1331 ?cinematographer . ?movie kg:57 ?director . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345", "response": "{ \"query\": [\n    \"?influencer wdt:P106 wd:Q33999 ;\",\n    \"wdt:P112 wd:Q457433 ;\",\n    \"wdt:P112 wd:Q5045345 .\"\n  ]\n}\n  \t            \t \t  ", "normal_query": "?influencer wdt:P106 wd:Q33999 ; wdt:P112 wd:Q457433 ; wdt:P112 wd:Q5045345 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?influencer kg:P106 kg:9387 ; kg:P112 kg:0260 , kg:7263 . kg:7735 kg:P737 ?influencer . kg:0243 kg:P26 ?resource . kg:1227 kg:P26 ?resource . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?influencer kg:P106 kg:9387 ; kg:P112 kg:0260 , kg:7263 . kg:7735 kg:P737 ?influencer . kg:0243 kg:P26 ?resource . kg:1227 kg:P26 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P108 wd:Q37033;\",\n \t\t      \"wdt:P108 wd:Q7095994;\",\n \t\t      \"wdt:P108 wd:Q7432436;\",\n \t\t      \"wdt:P108 wd:Q42944;\"\n \t]\n}", "normal_query": "?resource wdt:P108 wd:Q37033; wdt:P108 wd:Q7095994; wdt:P108 wd:Q7432436; wdt:P108 wd:Q42944; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713", "response": "{\n \t\"query\": [\n \t\t\"?x a kg:2143;\",\n \t\t\"?x kg:3145 kg:6182, kg:3947, kg:0588, kg:7021.\"\n \t]\n}", "normal_query": "?x a kg:2143; ?x kg:3145 kg:6182, kg:3947, kg:0588, kg:7021. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 wd:Q1165050; # Planet Terror cinematographer, star, composer and writer is ?entity\",\n \t\t\"?entity wdt:P57 wd:Q1653396; # ?entity directed Sin City: A Dame to Kill For\",\n \t\t\"?entity wdt:P57 wd:Q192115; # ?entity directed Machete\",\n \t\t\"?entity wdt:P57 wd:Q128493\" ]}", "normal_query": "?entity wdt:P344 wd:Q1165050; ?entity wdt:P57 wd:Q1653396; ?entity wdt:P57 wd:Q192115; ?entity wdt:P57 wd:Q128493 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:9363 kg:4202;\",\n \t\t\"     kg:9363 kg:1096;\",\n \t\t\"     kg:9363 kg:6198;\",\n \t\t\"     kg:7171 kg:8061.\",\n \t\t\"?x kg:7027/kg:8807 ?resource.\"\n \t]\n}", "normal_query": "?x kg:9363 kg:4202; kg:9363 kg:1096; kg:9363 kg:6198; kg:7171 kg:8061. ?x kg:7027/kg:8807 ?resource. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58", "response": "{ \"query\": [\n    \"?editor_and_producer wdt:P1040 wd:Q13471372 ;\",\n    \"                     wdt:P1431 wd:Q484679 .\"\n] }", "normal_query": "?editor_and_producer wdt:P1040 wd:Q13471372 ; wdt:P1431 wd:Q484679 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58", "response": "{\n \t\"query\": [\n \t\t\"?editor kg:0456 kg:6634 .\",\n \t\t\"?editor kg:6898 ?role .\",\n \t\t\"?dream kg:4964 ?editor .\",\n \t\t\"?moebius kg:4964 ?editor .\",\n \t\t\"{?dream kg:0544 kg:8105.} UNION {?moebius kg:0544 kg:8105.}\",\n \t\t\"FILTER(?role = kg:4739 || ?role = kg:8105)\"\n \t]\n }", "normal_query": "?editor kg:0456 kg:6634 . ?editor kg:6898 ?role . ?dream kg:4964 ?editor . ?moebius kg:4964 ?editor . {?dream kg:0544 kg:8105.} UNION {?moebius kg:0544 kg:8105.} FILTER(?role = kg:4739 || ?role = kg:8105) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112", "response": "{\n \t\"query\": [\n \t\t\"?filmProducer wdt:P106 wd:Q3282637 .\",\n \t\t\"?filmProducer wdt:P112 wd:Q1857205 .\",\n \t\t\"?filmProducer wdt:P112 wd:Q220394 .\",\n \t\t\"?filmProducer wdt:P112 wd:Q542216 .\",\n \t\t\"?work1 wdt:P57 ?filmProducer ; wdt:P58 wd:Q3011043 .\",\n \t\t\"?work2 wdt:P57 ?filmProducer ; wdt:P58 wd:Q219400 .\",\n \t\t\"?work3 wdt:P57 ?filmProducer ; wdt:P58 wd:Q64434913 .\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?filmProducer wdt:P106 wd:Q3282637 . ?filmProducer wdt:P112 wd:Q1857205 . ?filmProducer wdt:P112 wd:Q220394 . ?filmProducer wdt:P112 wd:Q542216 . ?work1 wdt:P57 ?filmProducer ; wdt:P58 wd:Q3011043 . ?work2 wdt:P57 ?filmProducer ; wdt:P58 wd:Q219400 . ?work3 wdt:P57 ?filmProducer ; wdt:P58 wd:Q64434913 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112", "response": "{ \"query\": [\n    \"?producer kg:P112 kg:5136 .\", \">// Founded David W. Griffith Corp (assuming kg:5136 represents the company based on given properties/entities mapping, adjust as necessary for actual KG data) \"\n    , \"?producer kg:P106 kg:7295 .\" , \">// Is a film producer (Q3282637)\"\n    , \"{ ?movie1 kg:P57 ?producer . ?movie1 kg:P1476 'The Brahma Diamond' }\", \">// Directed and wrote The Brahma Diamond\"\n    , \"UNION { ?movie2 kg:P57 ?producer . ?movie2 kg:P1476 'His Lost Love' }\", \">// Directed and wrote His Lost Love\"\n    , \"UNION { ?movie3 kg:P57 ?producer . ?movie3 kg:P1476 'The Birth of a Nation' }\" , \">// Directed and wrote The Birth of a Nation\"\n]}\n    ", "normal_query": "?producer kg:P112 kg:5136 . >// Founded David W. Griffith Corp (assuming kg:5136 represents the company based on given properties/entities mapping, adjust as necessary for actual KG data) ?producer kg:P106 kg:7295 . >// Is a film producer (Q3282637) { ?movie1 kg:P57 ?producer . ?movie1 kg:P1476 'The Brahma Diamond' } >// Directed and wrote The Brahma Diamond UNION { ?movie2 kg:P57 ?producer . ?movie2 kg:P1476 'His Lost Love' } >// Directed and wrote His Lost Love UNION { ?movie3 kg:P57 ?producer . ?movie3 kg:P1476 'The Birth of a Nation' } >// Directed and wrote The Birth of a Nation LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P31 wd:Q5;\",\n \t\t\"?person wdt:P86 ?work;\",\n \t\t\"?work rdfs:label \\\"Brecha\\\"@en;\",\n \t\t\"?person wdt:P57 ?primary_work;\",\n \t\t\"?primary_work rdfs:label \\\"Primary!\\\"@en;\",\n \t\t\"?person wdt:P1431 ?absence_work;\",\n \t\t\"?absence_work rdfs:label \\\"In Your Absence\\\"@en;\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?person wdt:P31 wd:Q5; ?person wdt:P86 ?work; ?work rdfs:label \"Brecha\"@en; ?person wdt:P57 ?primary_work; ?primary_work rdfs:label \"Primary!\"@en; ?person wdt:P1431 ?absence_work; ?absence_work rdfs:label \"In Your Absence\"@en; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:1536 kg:5846 ;\", \">// director of Brecha (Q5375110) has property P58 (director) with value Q5375110 (Brecha film entity, assuming this is the correct entity for \"]\n\t\t}\n \t\t\t\t    \t\t\t\t    \t\t\t", "normal_query": "?resource kg:1536 kg:5846 ; >// director of Brecha (Q5375110) has property P58 (director) with value Q5375110 (Brecha film entity, assuming this is the correct entity for LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P108 wd:Q55206; \",\n \t\t\"wdt:P108 wd:Q55206;\",\n \t\t\"wdt:P108 wd:Q23548;\",\n \t\t\"wdt:P108 wd:Q41506;\",\n \t\t\"wdt:P108 wd:Q622664;\",\n \t\t\"wdt:P27 wd:Q30.\"\n \t]\n }\n   \t\t\t\t\t \t  \t      \t", "normal_query": "?person wdt:P108 wd:Q55206; wdt:P108 wd:Q55206; wdt:P108 wd:Q23548; wdt:P108 wd:Q41506; wdt:P108 wd:Q622664; wdt:P27 wd:Q30. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30", "response": "{\n \t\"query\": [\n \t\t\"?x\",\n \t\t\"(kg:8994/(kg:6416/kg:5431))\", \">// Employed by United States (P108/Q27/Q30) - to filter American employees, but the provided mapping does not directly support this exact path. Adjust as necessary based on actual KG structure and available mappings. This is a conceptual representation given the constraints of provided mappings which do not fully cover the question's requirements accurately without additional context or properties for nationality or organization names directly linked with their respective IDs in the provided list. Consider revisiting the mapping or expanding it to include more specific identifiers for organizations and nationality if this query structure doesn't yield expected results due to limitations in provided mappings.\",\n \t\t\"(kg:8994/kg:1473)\", \">// Employed by Stanford University (P108/Q23548) - Stanford University is represented as Q23548 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure.\",\n \t\t\"(kg:8994/kg:3401)\", \">// Employed by NASA (P108/Q41506) - National Aeronautics and Space Administration represented as Q41506 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure.\",\n \t\t\"(kg:8994/kg:8712)\", \">// Employed by UC San Diego (P108/Q622664) - University of California, San Diego represented as Q622664 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure.\",\n \t\t\"(kg:9923/kg:2435)\" ,\">// Founder and employee of Sally Ride Science (P112/Q5059715) - Adjust as necessary based on actual KG structure and available mappings. This assumes Q5059715 represents Sally Ride Science in the context provided by your knowledge graph's structure and properties.\"\n \t]\n}", "normal_query": "?x (kg:8994/(kg:6416/kg:5431)) >// Employed by United States (P108/Q27/Q30) - to filter American employees, but the provided mapping does not directly support this exact path. Adjust as necessary based on actual KG structure and available mappings. This is a conceptual representation given the constraints of provided mappings which do not fully cover the question's requirements accurately without additional context or properties for nationality or organization names directly linked with their respective IDs in the provided list. Consider revisiting the mapping or expanding it to include more specific identifiers for organizations and nationality if this query structure doesn't yield expected results due to limitations in provided mappings. (kg:8994/kg:1473) >// Employed by Stanford University (P108/Q23548) - Stanford University is represented as Q23548 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure. (kg:8994/kg:3401) >// Employed by NASA (P108/Q41506) - National Aeronautics and Space Administration represented as Q41506 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure. (kg:8994/kg:8712) >// Employed by UC San Diego (P108/Q622664) - University of California, San Diego represented as Q622664 here, adjust if the mapping changes or more specific property needed for employment is available in your KG structure. (kg:9923/kg:2435) >// Founder and employee of Sally Ride Science (P112/Q5059715) - Adjust as necessary based on actual KG structure and available mappings. This assumes Q5059715 represents Sally Ride Science in the context provided by your knowledge graph's structure and properties. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P1040 wd:Q1165050;\",\n \t\t\"?entity wdt:P1040 wd:Q192115;\",\n \t\t\"?entity wdt:P1040 wd:Q656357.\",\n \t\t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n }\n \t            \t \t  \t", "normal_query": "?entity wdt:P1040 wd:Q1165050; ?entity wdt:P1040 wd:Q192115; ?entity wdt:P1040 wd:Q656357. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:2617 kg:4292;\",\n \t\t\"?resource kg:2617 kg:3024;\",\n \t\t\"?resource kg:2617 kg:1991;\",\n \t\t\"?resource kg:8530 kg:2814;\"\n \t]\n }", "normal_query": "?resource kg:2617 kg:4292; ?resource kg:2617 kg:3024; ?resource kg:2617 kg:1991; ?resource kg:8530 kg:2814; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907", "response": "{\n  \"query\": [\n    \"?execProducerWriter wdt:P58 wd:Q29011 .\",\n    \"?execProducerWriter wdt:P108 wd:Q1054807 ;\",\n    \"?execProducerWriter wdt:P108 wd:Q11490471 ;\",\n    \"?execProducerWriter wdt:P108 wd:Q11371930 ;\",\n    \"?execProducerWriter wdt:P108 wd:Q182950 ;\",\n    \"?execProducerWriter wdt:P108 wd:Q1136386 ;\",\n    \"?execProducerWriter wdt:P108 wd:Q947907 .\"\n  ]\n}\n    ", "normal_query": "?execProducerWriter wdt:P58 wd:Q29011 . ?execProducerWriter wdt:P108 wd:Q1054807 ; ?execProducerWriter wdt:P108 wd:Q11490471 ; ?execProducerWriter wdt:P108 wd:Q11371930 ; ?execProducerWriter wdt:P108 wd:Q182950 ; ?execProducerWriter wdt:P108 wd:Q1136386 ; ?execProducerWriter wdt:P108 wd:Q947907 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907", "response": "{ \"query\": [\n    \"?x kg:5579 kg:9147 .\", \">// Howl's Moving Castle (Q29011) executive producer and writer (?x has P108 relation with Q29011, indicating employment in the context of this work) \"\n    ,\"?x kg:5579 kg:3791 .\" , \"// Nibariki (Q1054807)\"\n    , \"?x kg:5579 kg:2383 .\", \">// Ghibli Museum (Q11490471) \"\n    , \"?x kg:5579 kg:6855 .\" , \"// TMS Entertainment (Q11371930)\"\n    , \"?x kg:5579 kg:9772 .\", \">// Shin-Ei Animation (Q182950) \"\n    , \"?x kg:5579 kg:4927 .\" , \"// Studio Ghibli (Q1136386)\"\n    , \"?x kg:5579 kg:0935 .\" , \"// Tokuma Memorial Cultural Foundation for Animation (Q947907)\"\n]}\n    ", "normal_query": "?x kg:5579 kg:9147 . >// Howl's Moving Castle (Q29011) executive producer and writer (?x has P108 relation with Q29011, indicating employment in the context of this work) ?x kg:5579 kg:3791 . // Nibariki (Q1054807) ?x kg:5579 kg:2383 . >// Ghibli Museum (Q11490471) ?x kg:5579 kg:6855 . // TMS Entertainment (Q11371930) ?x kg:5579 kg:9772 . >// Shin-Ei Animation (Q182950) ?x kg:5579 kg:4927 . // Studio Ghibli (Q1136386) ?x kg:5579 kg:0935 . // Tokuma Memorial Cultural Foundation for Animation (Q947907) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P344 wd:Q1415127;\",\n \t\t\"?entity wdt:P344 wd:Q208910;\",\n \t\t\"?entity wdt:P344 wd:Q613974;\",\n \t\t\"?entity wdt:P344 wd:Q1609393;\",\n \t\t\"?entity wdt:P57 wd:Q17738;\",\n \t\t\"?entity wdt:P1431 wd:Q17738;\",\n \t\t\"?entity wdt:P58 wd:Q17738.\"\n \t]\n }\n    ", "normal_query": "?entity wdt:P344 wd:Q1415127; ?entity wdt:P344 wd:Q208910; ?entity wdt:P344 wd:Q613974; ?entity wdt:P344 wd:Q1609393; ?entity wdt:P57 wd:Q17738; ?entity wdt:P1431 wd:Q17738; ?entity wdt:P58 wd:Q17738. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P57 kg:Q1415127 ; kg:P57 kg:Q208910 ; kg:P57 kg:Q613974 ; kg:P57 kg:Q1609393 ; kg:P58 kg:Q17738 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P57 kg:Q1415127 ; kg:P57 kg:Q208910 ; kg:P57 kg:Q613974 ; kg:P57 kg:Q1609393 ; kg:P58 kg:Q17738 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431", "response": "{\n \t\"query\": [\"$service wikibase://wb-sdk/sparql/query/service\",\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P31 wd:Q5.\",\n \t\t\"?resource wdt:P57 wd:Q1473406.\",\n \t\t\"?resource wdt:P1040 wd:Q3485595.\",\n \t\t\"?resource wdt:P1431 wd:Q2085.\"\n \t\t]}", "normal_query": "$service wikibase://wb-sdk/sparql/query/service SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5. ?resource wdt:P57 wd:Q1473406. ?resource wdt:P1040 wd:Q3485595. ?resource wdt:P1431 wd:Q2085. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P1431 kg:Q1473406 ; kg:P1431 kg:Q2085 ; kg:P1431 kg:Q1140578 ; kg:P57 kg:Q3485595 ; kg:P1040 kg:Q1511905 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P1431 kg:Q1473406 ; kg:P1431 kg:Q2085 ; kg:P1431 kg:Q1140578 ; kg:P57 kg:Q3485595 ; kg:P1040 kg:Q1511905 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q2449461;\",\n \t\t\"wdt:P57 wd:Q45602;\",\n \t\t\"wdt:P57 wd:Q166739;\",\n \t\t\"wdt:P57 wd:Q374172.\",\n \t\t\"?director wdt:P1040 wd:Q32337;\",\n \t\t\"wdt:P1040 wd:Q137808.\",\n \t\t\"?director wdt:P26 wd:Q241019.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?director wdt:P57 wd:Q2449461; wdt:P57 wd:Q45602; wdt:P57 wd:Q166739; wdt:P57 wd:Q374172. ?director wdt:P1040 wd:Q32337; wdt:P1040 wd:Q137808. ?director wdt:P26 wd:Q241019. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019", "response": "{\n \t\"query\": [\n \t\t\"?director kg:1503 kg:1085, kg:7001, kg:2856, kg:8455;\",\n \t\t\"?director kg:3979 kg:5719, kg:4195;\",\n \t\t\"?director kg:3979 kg:6480;\"\n \t]\n}", "normal_query": "?director kg:1503 kg:1085, kg:7001, kg:2856, kg:8455; ?director kg:3979 kg:5719, kg:4195; ?director kg:3979 kg:6480; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097", "response": "{\n  \"query\": [\n    \"?item\",\n    \"wdt:P31\",\n    \"wd:Q5\"\n  ]\n  }\n  ", "normal_query": "?item wdt:P31 wd:Q5 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097", "response": "{\n  \"query\": [\n    \"?chaplin kg:8011 kg:0701 ;\",\n    \"?chaplin kg:3311 kg:0701 ;\",\n    \"?chaplin kg:2155 kg:0701 ;\",\n    \"?chaplin kg:9816 kg:1774 ;\",\n    \"?chaplin kg:8680 kg:2393 .\"\n  ]\n}\n    ", "normal_query": "?chaplin kg:8011 kg:0701 ; ?chaplin kg:3311 kg:0701 ; ?chaplin kg:2155 kg:0701 ; ?chaplin kg:9816 kg:1774 ; ?chaplin kg:8680 kg:2393 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P272 wd:Q2062523; # Grand Canyon (film) as subject of distribution and production activities by the resource entity in question. The property P272 indicates that the resource is involved in the distribution or production of a work, here specifically Q2062523 which refers to \" ,\n \t\t\"?resource wdt:P127 wd:Q3511946; # Acquired by Laurene Powell Jobs (wd:Q3511946) \",\n \t\t\"?resource wdt:P127 wd:Q7603552; # Acquired by Fidelity Investments (wd:Q7603552) \",\n \t\t\"?resource wdt:P127 wd:Q1411292; # Acquired by BlackRock (wd:Q1411292) \",\n \t\t\"?resource wdt:P127 wd:Q3133593; # Acquired by State Street Global Advisors (wd:Q3133593) \",\n \t\t\"?resource wdt:P127 wd:Q219635;  # Acquired by T. Rowe Price (wd:Q219635) \",\n \t\t\"?resource wdt:P127 wd:Q505275.\" ]}", "normal_query": "?resource wdt:P272 wd:Q2062523; ?resource wdt:P127 wd:Q3511946; ?resource wdt:P127 wd:Q7603552; ?resource wdt:P127 wd:Q1411292; ?resource wdt:P127 wd:Q3133593; ?resource wdt:P127 wd:Q219635; ?resource wdt:P127 wd:Q505275. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275", "response": "{\n \t\"query\": [\n \t\t\"?x kg:3466 kg:5133; # The entity is distributed and produced by Grand Canyon (Q2062523) which has the property P127 indicating it's a distributor or producer of something. This line connects the subject (?x) to the Grand Canyon production/distribution entity through the property that indicates distribution/production relation (P127).\",\n \t\t\"?x kg:3466/kg:8940,kg:5809,kg:6539,kg:6221,kg:8972; # The subject (?x) is acquired by the entities representing Laurene Powell Jobs (Q7603552), Fidelity Investments (Q1411292), BlackRock (Q3133593), State Street Global Advisors (Q219635), T. Rowe Price (Q505275) through the property that indicates acquisition relation (P127).\",\n \t\t\"?x kg:3466/kg:8244,kg:8940,kg:6539,kg:6221,kg:8972 # The subject (?x) is also acquired by the entities representing Laurene Powell Jobs (Q7603552), Fidelity Investments (Q1411292), BlackRock (Q3133593), State Street Global Advisors (Q219635), T. Rowe Price (Q505275) through the property that indicates acquisition relation (P127). This line is redundant but included to match the structure of the provided entities and properties.\"\n \t]\n }\n    ", "normal_query": "?x kg:3466 kg:5133; ?x kg:3466/kg:8940,kg:5809,kg:6539,kg:6221,kg:8972; ?x kg:3466/kg:8244,kg:8940,kg:6539,kg:6221,kg:8972 LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86", "response": "{\n \t\"query\": [\n \t\t\"?item wdt:P86 wd:Q45602;\",\n \t\t\"?item wdt:P57 wd:Q166739, wd:Q238211;\",\n \t\t\"?item wdt:P1040 wd:Q2345349, wd:Q214723, wd:Q374172.\"\n \t]\n }\n   \t            \t \t\t", "normal_query": "?item wdt:P86 wd:Q45602; ?item wdt:P57 wd:Q166739, wd:Q238211; ?item wdt:P1040 wd:Q2345349, wd:Q214723, wd:Q374172. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P57 ?resource . VALUES ?film { kg:5517 kg:1841 kg:0094 kg:9627 } . ?resource kg:P1040 kg:8503 . FILTER(?film = kg:5517 || ?film = kg:1841) . OPTIONAL { kg:0094 kg:P86 ?resource . } . OPTIONAL { kg:3515 kg:P86 ?resource . } . }}\" , \"resources\" ]}", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?film kg:P57 ?resource . VALUES ?film { kg:5517 kg:1841 kg:0094 kg:9627 } . ?resource kg:P1040 kg:8503 . FILTER(?film = kg:5517 || ?film = kg:1841) . OPTIONAL { kg:0094 kg:P86 ?resource . } . OPTIONAL { kg:3515 kg:P86 ?resource . } . }} resources LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P57 wd:Q88965291;\",\n \t\t\"wdt:P57 wd:Q133730.\",\n \t\t\"?director wdt:P737 wd:Q1970252;\",\n \t\t\"wdt:P737 wd:Q3017093.\"\n \t]\n}", "normal_query": "?director wdt:P57 wd:Q88965291; wdt:P57 wd:Q133730. ?director wdt:P737 wd:Q1970252; wdt:P737 wd:Q3017093. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737", "response": "{\n \t\"query\": [\n \t\t\"?filmDirector kg:7838 kg:9388 .\",\n \t\t\"?filmDirector kg:7838 kg:7353 .\",\n \t\t\"?filmDirector kg:4919 kg:1056 .\",\n \t\t\"?filmDirector kg:4919 kg:3435 .\"\n \t]\n}", "normal_query": "?filmDirector kg:7838 kg:9388 . ?filmDirector kg:7838 kg:7353 . ?filmDirector kg:4919 kg:1056 . ?filmDirector kg:4919 kg:3435 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808", "response": "{\n \t\"query\": [\n \t\t\"?person wdt:P106 wd:Q7042855; \", \">// film editor profession (P106) and instance of (Q7042855) for film editor role, but Q7042855 is not correct for a film editor. The correct one should be Q39155 which is not provided in the list so we will use P106 to filter profession instead of instance of (Q7042855). However, since it's not available, I'll proceed with what's given and assume this part needs correction based on actual data availability. For the sake of the exercise, let's continue with provided entities and properties focusing on relationships and marriages as per the question structure. \",\n \t\t\"?person wdt:P26 wd:Q104340; \", \">// married to Oona O'Neill (P26 for spouse relation and Q104340 for Oona O'Neill entity) \",\n \t\t\"?person wdt:P26 wd:Q157191; \", \">// married to Lita Grey (P26 for spouse relation and Q157191 for Lita Grey entity) \",\n \t\t\"?person wdt:P26 wd:Q219400; \" ,\">// married to Mildred Harris (P26 for spouse relation and Q219400 for Mildred Harris entity) \"\n \t\t]\n }\n \t\t    \t\t          \t", "normal_query": "?person wdt:P106 wd:Q7042855; >// film editor profession (P106) and instance of (Q7042855) for film editor role, but Q7042855 is not correct for a film editor. The correct one should be Q39155 which is not provided in the list so we will use P106 to filter profession instead of instance of (Q7042855). However, since it's not available, I'll proceed with what's given and assume this part needs correction based on actual data availability. For the sake of the exercise, let's continue with provided entities and properties focusing on relationships and marriages as per the question structure. ?person wdt:P26 wd:Q104340; >// married to Oona O'Neill (P26 for spouse relation and Q104340 for Oona O'Neill entity) ?person wdt:P26 wd:Q157191; >// married to Lita Grey (P26 for spouse relation and Q157191 for Lita Grey entity) ?person wdt:P26 wd:Q219400; >// married to Mildred Harris (P26 for spouse relation and Q219400 for Mildred Harris entity) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808", "response": "{ \"query\": [\n    \"?person kg:9515 kg:5797 .\",\n    \"?person kg:9515 kg:2787 .\",\n    \"?person kg:9515 kg:6495 .\",\n    \"?person kg:0599 kg:5107 .\",\n    \"?person kg:0599 kg:2787 .\",\n    \"?person kg:0599 kg:6495 .\",\n    \"?person kg:4096 kg:2780 .\"\n] }", "normal_query": "?person kg:9515 kg:5797 . ?person kg:9515 kg:2787 . ?person kg:9515 kg:6495 . ?person kg:0599 kg:5107 . ?person kg:0599 kg:2787 . ?person kg:0599 kg:6495 . ?person kg:4096 kg:2780 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P737 wd:Q312258;\",\n \t\t\"wdt:P161 ?star;\",\n \t\t\"wdt:P57 ?writer.\",\n \t\t\"{?director wdt:P58 wd:Q312258.} UNION\",\n \t\t\"{wd:Q312258 wdt:P58 ?director.}\",\n \t\t\"?movie1 wdt:P57 ?director;\",\n \t\t\"wdt:P161 ?star;\",\n \t\t\"wdt:P58 ?writer.\",\n \t\t\"?movie2 wdt:P57 ?director;\",\n \t\t\"wdt:P161 ?star;\",\n \t\t\"wdt:P58 ?writer.\",\n \t\t\"?movie3 wdt:P57 ?director;\",\n \t\t\"wdt:P161 ?star;\",\n \t\t\"wdt:P58 ?writer.\"\n \t]\n }\n \t            \t \t  \t", "normal_query": "?director wdt:P737 wd:Q312258; wdt:P161 ?star; wdt:P57 ?writer. {?director wdt:P58 wd:Q312258.} UNION {wd:Q312258 wdt:P58 ?director.} ?movie1 wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. ?movie2 wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. ?movie3 wdt:P57 ?director; wdt:P161 ?star; wdt:P58 ?writer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"?resource kg:5044 kg:7352;\",\n \t\t\"?resource kg:5044 kg:9335;\",\n \t\t\"?resource kg:5044 kg:0549;\",\n \t\t\"?resource kg:1025 kg:0156;\"\n \t]\n }", "normal_query": "?resource kg:5044 kg:7352; ?resource kg:5044 kg:9335; ?resource kg:5044 kg:0549; ?resource kg:1025 kg:0156; LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P127 wd:Q849363;\",\n \t\t      \"wdt:P127 wd:Q219635;\",\n \t\t      \"wdt:P127 wd:Q65073147;\",\n \t\t      \"wdt:P127 wd:Q318128;\",\n \t\t      \"wdt:P127 wd:Q136469;\",\n \t\t      \"wdt:P127 wd:Q1628791.\"\n \t]\n}", "normal_query": "?resource wdt:P127 wd:Q849363; wdt:P127 wd:Q219635; wdt:P127 wd:Q65073147; wdt:P127 wd:Q318128; wdt:P127 wd:Q136469; wdt:P127 wd:Q1628791. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> .\\nSELECT ?resource\\nWHERE {\\n    ?acquirer kg:P127 kg:Q17070012 .\\n    ?acquirer kg:P127 kg:Q849363 .\\n    ?acquirer kg:P127 kg:Q219635 .\\n    ?acquirer kg:P127 kg:Q65073147 .\\n    ?acquirer kg:P127 kg:Q318128 .\\n    ?acquirer kg:P127 kg:Q136469 .\\n    ?acquirer kg:P127 kg:Q1628791 .\\n    FILTER(?acquirer = kg:TheVanguardGroup || ?acquirer = kg:BlackRock)\\n}\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?acquirer kg:P127 kg:Q17070012 . ?acquirer kg:P127 kg:Q849363 . ?acquirer kg:P127 kg:Q219635 . ?acquirer kg:P127 kg:Q65073147 . ?acquirer kg:P127 kg:Q318128 . ?acquirer kg:P127 kg:Q136469 . ?acquirer kg:P127 kg:Q1628791 . FILTER(?acquirer = kg:TheVanguardGroup || ?acquirer = kg:BlackRock) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P1040 wd:Q4004365;\",\n \t\t\t\"wdt:P161 wd:Q3207690;\",\n \t\t\t\"wdt:P344 wd:Q3633009;\",\n \t\t\t\"wdt:P57 wd:Q289021;\",\n \t\t\t\"wdt:P58 wd:Q463946.\",\n \t\t\"?resource wdt:P27 wd:Q29.\"\n \t]\n}", "normal_query": "?resource wdt:P1040 wd:Q4004365; wdt:P161 wd:Q3207690; wdt:P344 wd:Q3633009; wdt:P57 wd:Q289021; wdt:P58 wd:Q463946. ?resource wdt:P27 wd:Q29. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29", "response": "{ \"query\": [\"@subject kg:3045 kg:0939 . @subject kg:8940 kg:6030 . @subject kg:0078 kg:9187 . @subject kg:3229 kg:1976 .\"] }", "normal_query": "@subject kg:3045 kg:0939 . @subject kg:8940 kg:6030 . @subject kg:0078 kg:9187 . @subject kg:3229 kg:1976 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152", "response": "{\n \t\"query\": [\n \t\t\"?entity wdt:P106 wd:Q222344; # occupation cinematographer\",\n \t\t\"?entity wdt:P112 wd:Q216611; # founder of Industrial Light & Magic\",\n \t\t\"?entity wdt:P112 wd:Q242446; # founder of THX\",\n \t\t\"?entity wdt:P112 wd:Q258945; # founder of Jediism\",\n \t\t\"?entity wdt:P112 wd:Q746676; # founder of Lucasfilm\",\n \t\t\"?entity wdt:P112 wd:Q1044630; # founder of LucasArts\",\n \t\t\"wd:Q6813152 wdt:P26 ?entity.\" ]}", "normal_query": "?entity wdt:P106 wd:Q222344; ?entity wdt:P112 wd:Q216611; ?entity wdt:P112 wd:Q242446; ?entity wdt:P112 wd:Q258945; ?entity wdt:P112 wd:Q746676; ?entity wdt:P112 wd:Q1044630; wd:Q6813152 wdt:P26 ?entity. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P106 kg:2511 ; kg:P112 kg:7772 , kg:3386 , kg:1255 . kg:5134 kg:P26 ?resource . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P106 kg:2511 ; kg:P112 kg:7772 , kg:3386 , kg:1255 . kg:5134 kg:P26 ?resource . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P161 wd:Q85520081;\",\n \t\t\"wdt:P161 wd:Q96054985;\",\n \t\t\"wdt:P161 wd:Q85532437;\",\n \t\t\"?cinematographer wdt:P344 ?work;\",\n \t\t\"?work wdt:P57 ?cinematographer;\",\n \t\t\"?work wdt:P1040 ?cinematographer;\",\n \t\t\"?work wdt:P1431 ?cinematographer;\",\n \t\t\"?work wdt:P58 ?cinematographer.\"\n \t]\n }\n    ", "normal_query": "?cinematographer wdt:P161 wd:Q85520081; wdt:P161 wd:Q96054985; wdt:P161 wd:Q85532437; ?cinematographer wdt:P344 ?work; ?work wdt:P57 ?cinematographer; ?work wdt:P1040 ?cinematographer; ?work wdt:P1431 ?cinematographer; ?work wdt:P58 ?cinematographer. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58", "response": "{\n \t\"query\": [\n \t\t\"?x kg:8425 kg:3761;\",\n \t\t\"     kg:8425 kg:4775;\",\n \t\t\"     kg:8425 kg:3942;\",\n \t\t\"     kg:0856 kg:1857;\",\n \t\t\"     kg:8621 kg:1857;\",\n \t\t\"     kg:6722 kg:1857;\",\n \t\t\"     kg:0779 kg:1857.\"\n \t]\n }", "normal_query": "?x kg:8425 kg:3761; kg:8425 kg:4775; kg:8425 kg:3942; kg:0856 kg:1857; kg:8621 kg:1857; kg:6722 kg:1857; kg:0779 kg:1857. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5", "response": "{\n \t\"query\": [\n \t\t\"?writer_cinematographer wdt:P344 wd:Q1609393 ;\",\n \t\t\"wdt:P344 wd:Q2411065 ;\",\n \t\t\"wdt:P344 wd:Q208910 ;\",\n \t\t\"wdt:P344 wd:Q613974 ;\",\n \t\t\"wdt:P58 ?spouse ;\",\n \t\t\"wdt:P737 wd:Q52306598 ;\",\n \t\t\"wdt:P737 wd:Q717378 .\"\n \t]\n}\n    ", "normal_query": "?writer_cinematographer wdt:P344 wd:Q1609393 ; wdt:P344 wd:Q2411065 ; wdt:P344 wd:Q208910 ; wdt:P344 wd:Q613974 ; wdt:P58 ?spouse ; wdt:P737 wd:Q52306598 ; wdt:P737 wd:Q717378 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5", "response": "{ \"query\": [\"@subject kg:0611 kg:9012 . @subject kg:0611 kg:0352 . @subject kg:0611 kg:3655 . @subject kg:0611 kg:8850 . @subject kg:7578 kg:6555 . @subject kg:7316 kg:3218 . @subject kg:6397 kg:8216 .\"] }", "normal_query": "@subject kg:0611 kg:9012 . @subject kg:0611 kg:0352 . @subject kg:0611 kg:3655 . @subject kg:0611 kg:8850 . @subject kg:7578 kg:6555 . @subject kg:7316 kg:3218 . @subject kg:6397 kg:8216 . LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58", "response": "{\n \t\"query\": [\n \t\t\"?cinematographer wdt:P1040 wd:Q1361018;\",\n \t\t\"wdt:P1040 wd:Q2086445;\",\n \t\t\"wdt:P57 wd:Q1361018;\",\n \t\t\"wdt:P57 wd:Q2086445;\",\n \t\t\"wdt:P1431 wd:Q1361018;\",\n \t\t\"wdt:P1431 wd:Q2086445;\",\n \t\t\"wdt:P58 wd:Q1361018;\",\n \t\t\"wdt:P58 wd:Q2086445.\",\n \t\"SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"en\\\". }\"\n \t]\n}", "normal_query": "?cinematographer wdt:P1040 wd:Q1361018; wdt:P1040 wd:Q2086445; wdt:P57 wd:Q1361018; wdt:P57 wd:Q2086445; wdt:P1431 wd:Q1361018; wdt:P1431 wd:Q2086445; wdt:P58 wd:Q1361018; wdt:P58 wd:Q2086445. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P1040 kg:Q2086445 ; kg:P57 kg:Q1361018 ; kg:P58 kg:Q1361018 ; kg:P1431 kg:Q1361018 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:P1040 kg:Q2086445 ; kg:P57 kg:Q1361018 ; kg:P58 kg:Q1361018 ; kg:P1431 kg:Q1361018 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258", "response": "{\n \t\"query\": [\n \t\t\"?director wdt:P106 wd:Q2526255.\",\n \t\t\"?director wdt:P1040 wd:Q63993096;\",\n \t\t\"wdt:P1040 wd:Q2298257;\",\n \t\t\"wdt:P1040 wd:Q2493884.\",\n \t\t\"?director wdt:P58 wd:Q312258;\",\n \t\t\"wdt:P737 wd:Q312258.\"\n \t]\n}\n  \t            \t \t  ", "normal_query": "?director wdt:P106 wd:Q2526255. ?director wdt:P1040 wd:Q63993096; wdt:P1040 wd:Q2298257; wdt:P1040 wd:Q2493884. ?director wdt:P58 wd:Q312258; wdt:P737 wd:Q312258. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258", "response": "{ \"query\": [\n    \"?director kg:P1040 kg:2133 .\", \">// Varda by Agnès directed by ?director (Q2298257 - Agnès Varda's filmography property, Q2133 - Varda by Agnès ID in the knowledge graph) \"\n    ,\n    \"?director kg:P1040 kg:1567 .\", \">// The Gleaners and I directed by ?director (Q2493884 - The Gleaners and I film ID)\"\n    ,\n    \"?director kg:P1040 kg:9798 .\", \">// Vagabond directed by ?director (Q63993096 - Vagabond film ID)\"\n    ,\n    \"?director kg:P58 ?editor .\", \">// The editor of the films is ?editor\"\n    ,\n    \"?director kg:P26 ?spouse .\" , \">// ?director married to ?spouse\"\n    ,\n    \"?spouse kg:Q312258 kg:0316 .\" , \">// ?spouse influenced Jacques Demy (Q312258 - influence property, Q0316 - Jacques Demy ID)\"\n    ,\n    \"FILTER(?director = kg:6269)\" , \">// Filter to ensure the director is Agnès Varda (Q2526255 - Agnès Varda's ID)\"\n    ,\n    \"{?editor}\", \">// Return only resources\"\n    ,\n    \"{?spouse}\" , \">// Return only resources\"\n]}\n  ", "normal_query": "?director kg:P1040 kg:2133 . >// Varda by Agnès directed by ?director (Q2298257 - Agnès Varda's filmography property, Q2133 - Varda by Agnès ID in the knowledge graph) ?director kg:P1040 kg:1567 . >// The Gleaners and I directed by ?director (Q2493884 - The Gleaners and I film ID) ?director kg:P1040 kg:9798 . >// Vagabond directed by ?director (Q63993096 - Vagabond film ID) ?director kg:P58 ?editor . >// The editor of the films is ?editor ?director kg:P26 ?spouse . >// ?director married to ?spouse ?spouse kg:Q312258 kg:0316 . >// ?spouse influenced Jacques Demy (Q312258 - influence property, Q0316 - Jacques Demy ID) FILTER(?director = kg:6269) >// Filter to ensure the director is Agnès Varda (Q2526255 - Agnès Varda's ID) {?editor} >// Return only resources {?spouse} >// Return only resources LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363", "response": "{\n \t\"query\": [\n \t\t\"?resource wdt:P272 wd:Q2062523; # distributor and producer of Grand Canyon (assuming Q2062523 represents the entity related to Grand Canyon's distribution/production) \",\n \t\t\"wdt:P127 wd:Q3511946, wd:Q7603552, wd:Q2007336, wd:Q219635; # acquired by State Street Global Advisors, BlackRock, T. Rowe Price, and Capital Group Companies\",\n \t\t\"wdt:P127 wd:Q849363, wd:Q505275.\" ]}", "normal_query": "?resource wdt:P272 wd:Q2062523; wdt:P127 wd:Q3511946, wd:Q7603552, wd:Q2007336, wd:Q219635; wdt:P127 wd:Q849363, wd:Q505275. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363", "response": "{ \"query\": [\"@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:3944 kg:0968 ; kg:3944 kg:3261 ; kg:3944 kg:3199 ; kg:3944 kg:4291 ; kg:3944 kg:1622 ; kg:3944 kg:6334 . }\"] }", "normal_query": "@prefix kg: <http://example.org/kg/> . SELECT ?resource WHERE { ?resource kg:3944 kg:0968 ; kg:3944 kg:3261 ; kg:3944 kg:3199 ; kg:3944 kg:4291 ; kg:3944 kg:1622 ; kg:3944 kg:6334 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "NER", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477", "response": "{\n \t\"query\": [\n \t\t\"?film wdt:P31 wd:Q11424.\",\n \t\t\"?film wdt:P57 ?director.\",\n \t\t\"?film wdt:P162 wd:Q16390.\",\n \t\t\"?film wdt:P162 wd:Q295984.\",\n \t\t\"?film wdt:P162 wd:Q4420093.\",\n \t\t\"?film wdt:P162 wd:Q242477.\",\n \t\t\"?film wdt:P161 wd:Q93188.\",\n \t\t\"?film wdt:P161 wd:Q744357.\"\n \t]\n}\n    ", "normal_query": "?film wdt:P31 wd:Q11424. ?film wdt:P57 ?director. ?film wdt:P162 wd:Q16390. ?film wdt:P162 wd:Q295984. ?film wdt:P162 wd:Q4420093. ?film wdt:P162 wd:Q242477. ?film wdt:P161 wd:Q93188. ?film wdt:P161 wd:Q744357. LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "qwen2.5:32b", "process": "masked", "prompt": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477", "response": "{ \"query\": [\n    \"?film kg:P31 kg:7320 .\",\n    \"?film kg:P57 kg:5032 ;\", \">// Directed by Randolph Scott (assuming the ID represents him, as there's no direct mapping provided for names to IDs in the given properties and entities list which is unusual but we'll proceed with this assumption based on the available data structure) \",\n    \"?film kg:P162 kg:7895 ;\", \">// Produced by Miriam Hopkins (assuming the ID represents her)\",\n    \"?film kg:P162 kg:1907 ;\", \">// Written by Humphrey Bogart (assuming the ID represents him)\",\n    \"?film kg:P162 kg:1933 ;\", \">// Written by Robert Buckner (assuming the ID represents him)\",\n    \"?film kg:P161 kg:2669 ;\", \">// Starring Errol Flynn (assuming the ID represents him)\",\n    \"?film kg:P161 kg:5442 .\" , \">// Starring Paul Fix (assuming the ID represents him)\"\n] }", "normal_query": "?film kg:P31 kg:7320 . ?film kg:P57 kg:5032 ; >// Directed by Randolph Scott (assuming the ID represents him, as there's no direct mapping provided for names to IDs in the given properties and entities list which is unusual but we'll proceed with this assumption based on the available data structure) ?film kg:P162 kg:7895 ; >// Produced by Miriam Hopkins (assuming the ID represents her) ?film kg:P162 kg:1907 ; >// Written by Humphrey Bogart (assuming the ID represents him) ?film kg:P162 kg:1933 ; >// Written by Robert Buckner (assuming the ID represents him) ?film kg:P161 kg:2669 ; >// Starring Errol Flynn (assuming the ID represents him) ?film kg:P161 kg:5442 . >// Starring Paul Fix (assuming the ID represents him) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q103013 wdt:P106 wd:Q69423232 .\",\n    \"  BIND(wd:Q103013 AS ?resource)\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q103013 wdt:P106 wd:Q69423232 . BIND(wd:Q103013 AS ?resource) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Hans Ertl a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  <kg:5262> <kg:7910> ?resource .\",\n    \"  FILTER(?resource = <kg:9740>)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { <kg:5262> <kg:7910> ?resource . FILTER(?resource = <kg:9740>) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?resource .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q853 wdt:P1040 ?resource . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Andrei Tarkovsky edit", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:5624 p:P1040/p:P1040 ?resource .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:5624 p:P1040/p:P1040 ?resource . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"  wd:Q1042294 wdt:P155 ?sequel .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q1042294 wdt:P155 ?sequel . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:1291 kg:1047 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:1291 kg:1047 ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q131593 wdt:P155 ?resource .\",\n    \"  FILTER(?resource = wd:Q168) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q131593 wdt:P155 ?resource . FILTER(?resource = wd:Q168) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Π 's sequel san", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  <http://www.wikidata.org/entity/Q131593> <http://www.wikidata.org/prop/P155> ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q131593 p:P155 ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"wd:Q260 wdt:P355 ?parent .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?parent WHERE { wd:Q260 wdt:P355 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was Jean-François Champollion 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260", "response": "{\n  \"query\": [\n    \"SELECT ?parent WHERE {\",\n    \"  kg:2110 kg:4300 ?parent .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?parent WHERE { kg:2110 kg:4300 ?parent . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q79070 wdt:P108 ?resource .\",\n    \"  FILTER(?resource = wd:Q40) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q79070 wdt:P108 ?resource . FILTER(?resource = wd:Q40) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Max Margules employed by Austria", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3135/kg:4741 kg:4661 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3135/kg:4741 kg:4661 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q80379 wdt:P58 ?resource .\",\n    \"  FILTER(?resource = wd:Q892)\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 wdt:P58 ?resource . FILTER(?resource = wd:Q892) } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  <http://www.wikidata.org/entity/Q80379> <http://www.wikidata.org/prop/P58> ?resource .\",\n    \"  FILTER(?resource = <http://www.wikidata.org/entity/Q892>)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q80379 p:P58 ?resource . FILTER(?resource = wd:Q892) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q72276 wdt:P1431 ?resource .\",\n    \"  FILTER(?resource = wd:Q2680) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q72276 wdt:P1431 ?resource . FILTER(?resource = wd:Q2680) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7729/kg:0000 kg:8619 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7729/kg:0000 kg:8619 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q36834 .\", \">// Checking if the person was a composer (P106 = occupation, Q36834 = composer)\",\n    \"?resource wdt:P2515 wd:Q2733930 .\", \">// Checking if the person was the costume designer for 'White Diamond: A Personal Portrait of Kylie Minogue' (P2515 = costume designer for, Q2733930 = White Diamond: A Personal Portrait of Kylie Minogue)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q36834 . >// Checking if the person was a composer (P106 = occupation, Q36834 = composer) ?resource wdt:P2515 wd:Q2733930 . >// Checking if the person was the costume designer for 'White Diamond: A Personal Portrait of Kylie Minogue' (P2515 = costume designer for, Q2733930 = White Diamond: A Personal Portrait of Kylie Minogue) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8803 kg:8685 .\",\n    \"?resource kg:106 kg:7624 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8803 kg:8685 . ?resource kg:106 kg:7624 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q69423232 wdt:P344 ?resource .\",\n    \"  ?resource wdt:P106 wd:Q158069 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q69423232 wdt:P344 ?resource . ?resource wdt:P106 wd:Q158069 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  kg:3749 kg:6390 ?resource .\",\n    \"  ?resource kg:106 kg:6944 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { kg:3749 kg:6390 ?resource . ?resource kg:106 kg:6944 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q76845 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P108 wd:Q2607 .\",\n \t\t\"VALUES (?resource) {(?spouse)}\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q76845 wdt:P26 ?spouse . ?spouse wdt:P108 wd:Q2607 . VALUES (?resource) {(?spouse)} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:2718 kg:5635 .\", \">// Erich Honecker's spouse\"\n \t\t,\"kg:5635 kg:1941 kg:0885 .\", \">// was an employee of Free German Youth\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2718 kg:5635 . >// Erich Honecker's spouse kg:5635 kg:1941 kg:0885 . >// was an employee of Free German Youth } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q36834 wdt:P162 ?composer .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q36834 wdt:P162 ?composer . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was 1999 produced by a composer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8864 kg:0295 .\",\n    \"?resource kg:8026 kg:7537 .\",\n    \"?resource kg:P106 '1999' .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8864 kg:0295 . ?resource kg:8026 kg:7537 . ?resource kg:P106 '1999' . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q69423232 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q577126 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q69423232 wdt:P86 ?composer . ?composer wdt:P106 wd:Q577126 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  kg:7339 kg:3068 ?composer .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { kg:7339 kg:3068 ?composer . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"  wd:Q222344 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q76582 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { wd:Q222344 wdt:P86 ?composer . ?composer wdt:P106 wd:Q76582 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer kg:6267 kg:7704 .\",\n    \"?composer a kg:1865 .\",\n    \"?composer kg:5106 kg:1865 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer kg:6267 kg:7704 . ?composer a kg:1865 . ?composer kg:5106 kg:1865 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sequel WHERE {\",\n \t\t\"wd:Q4348691 wdt:P155 ?sequel .\",\n \t\t\"?sequel wdt:P750 wd:Q2283 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?sequel WHERE { wd:Q4348691 wdt:P155 ?sequel . ?sequel wdt:P750 wd:Q2283 . } LIMIT 1000", "valid_query": true, "error": "Gold SPARQL returned empty list", "correct": null}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691", "response": "{\n \t\"query\": [\n \t\t\"?sequel\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?sequel kg:0040 kg:2898.\",\n \t\t\"kg:2898 kg:0040* kg:6939.\",\n \t\t\"kg:2898 a kg:9554.\"\n \t\t,\n \t\t\"}\"\n \t]\n}", "normal_query": "?sequel WHERE { ?sequel kg:0040 kg:2898. kg:2898 kg:0040* kg:6939. kg:2898 a kg:9554. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P155 wd:Q2085 .\", \">// sequel of Twin Peaks (P155) (Q2085)\"\n \t\t,\"?resource wdt:P161 wd:Q967797 .\", \">// starred James Parks (P161) (Q967797)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P155 wd:Q2085 . >// sequel of Twin Peaks (P155) (Q2085) ?resource wdt:P161 wd:Q967797 . >// starred James Parks (P161) (Q967797) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797", "response": "{\n \t\"query\": [\n \t\t\"?resource\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?resource kg:1182 kg:7081 .\",\n \t\t\"?resource kg:1540 kg:5276 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "?resource WHERE { ?resource kg:1182 kg:7081 . ?resource kg:1540 kg:5276 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q81950264 wdt:P112 ?resource .\",\n \t\t\"?resource wdt:P40 wd:Q15070044 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q81950264 wdt:P112 ?resource . ?resource wdt:P40 wd:Q15070044 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:2362 kg:9431 .\", \">// Malia Obama's parent\",\n \t\t\"?parent kg:5208/kg:6446 kg:3621 .\", \">// founder of Higher Ground Productions\",\n \t\t\"FILTER(?parent = ?resource) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2362 kg:9431 . >// Malia Obama's parent ?parent kg:5208/kg:6446 kg:3621 . >// founder of Higher Ground Productions FILTER(?parent = ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"wd:Q1022419 wdt:P3373 ?sibling .\",\n \t\t\"?sibling wdt:P108 wd:Q352 .\",\n \t\t\"BIND(?sibling AS ?resource) }\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1022419 wdt:P3373 ?sibling . ?sibling wdt:P108 wd:Q352 . BIND(?sibling AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:9040 kg:6467 .\", \">// Adolf Hitler's sibling (P3373 -> Q1022419)\"\n \t\t,\"?resource kg:5670 kg:6535 .\", \">// is an employee of Uniqa Insurance Group (P108 -> Q352)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9040 kg:6467 . >// Adolf Hitler's sibling (P3373 -> Q1022419) ?resource kg:5670 kg:6535 . >// is an employee of Uniqa Insurance Group (P108 -> Q352) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q6078 wdt:P108 ?employer .\",\n    \"  wd:Q42310881 wdt:P750 ?employer .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q6078 wdt:P108 ?employer . wd:Q42310881 wdt:P750 ?employer . } LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  kg:5020 kg:9526 ?employer .\",\n    \"  ?employer kg:2310 kg:2903 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { kg:5020 kg:9526 ?employer . ?employer kg:2310 kg:2903 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"wd:Q15070044 wdt:P40 wd:Q103941992 .\", \">// Malia Obama is the child of Barack Obama (Q15070044 is Barack Obama, Q103941992 is Malia Obama)\",\n \t\t\"wd:Q103941992 wdt:P108 ?employer .\", \">// Ben LaBolt's employer\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q15070044 wdt:P40 wd:Q103941992 . >// Malia Obama is the child of Barack Obama (Q15070044 is Barack Obama, Q103941992 is Malia Obama) wd:Q103941992 wdt:P108 ?employer . >// Ben LaBolt's employer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?ben kg:1689/kg:3071 ?employer .\",\n \t\t\"FILTER(?ben = kg:4817) .\",\n \t\t\"FILTER(?employer = kg:7766) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?ben kg:1689/kg:3071 ?employer . FILTER(?ben = kg:4817) . FILTER(?employer = kg:7766) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\", \">// Costume designer occupation (wd:Q1323191) is costume designer\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse .\", \">// Spouse of the costume designer\",\n \t\t\"wd:Q730300 wdt:P3373 ?sibling .\", \">// Pierre Van Dormael (wd:Q730300) has a sibling\",\n \t\t\"?spouse wdt:P26 ?sibling .\", \">// The spouse of the costume designer is also the sibling of Pierre Van Dormael\",\n \t\t\"VALUES ?resource { ?costumeDesigner }\"\n \t] }\n \t", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P106 wd:Q1323191 . >// Costume designer occupation (wd:Q1323191) is costume designer ?costumeDesigner wdt:P26 ?spouse . >// Spouse of the costume designer wd:Q730300 wdt:P3373 ?sibling . >// Pierre Van Dormael (wd:Q730300) has a sibling ?spouse wdt:P26 ?sibling . >// The spouse of the costume designer is also the sibling of Pierre Van Dormael VALUES ?resource { ?costumeDesigner } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner kg:9513/kg:0002 kg:2674 .\", \">// costume designer's occupation and the specific ID for a costume designer (Q730300) as an example, assuming this is the correct entity in your KG. Adjust if necessary.\",\n \t\t\"?costumeDesigner kg:4660 ?spouse .\", \">// The spouse of the costume designer\",\n \t\t\"?spouse kg:3373/kg:2674 ?sibling .\", \">// The sibling of Pierre Van Dormael (Q1323191) as an example, assuming this is the correct entity in your KG. Adjust if necessary.\",\n \t\t\"FILTER(?sibling = kg:5504) .\",\n \t\t\"?resource ?p ?o .\", \">// Return only resources related to the answer\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner kg:9513/kg:0002 kg:2674 . >// costume designer's occupation and the specific ID for a costume designer (Q730300) as an example, assuming this is the correct entity in your KG. Adjust if necessary. ?costumeDesigner kg:4660 ?spouse . >// The spouse of the costume designer ?spouse kg:3373/kg:2674 ?sibling . >// The sibling of Pierre Van Dormael (Q1323191) as an example, assuming this is the correct entity in your KG. Adjust if necessary. FILTER(?sibling = kg:5504) . ?resource ?p ?o . >// Return only resources related to the answer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1102919 .\", \">// Costume designer occupation (wd:Q1102919) is used here as an example, but the actual entity should be checked for accuracy in Wikidata.\",\n \t\t\"?costumeDesigner wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P112 wd:Q1323191 .\", \">// Assuming Q1323191 is ClubJenna's founder, this should be verified in Wikidata.\",\n \t\t\"BIND(?costumeDesigner AS ?resource) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P106 wd:Q1102919 . >// Costume designer occupation (wd:Q1102919) is used here as an example, but the actual entity should be checked for accuracy in Wikidata. ?costumeDesigner wdt:P26 ?spouse . ?spouse wdt:P112 wd:Q1323191 . >// Assuming Q1323191 is ClubJenna's founder, this should be verified in Wikidata. BIND(?costumeDesigner AS ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5767 kg:3343 .\", \">// Filter for costume designers (Q1102919)\",\n    \"?resource kg:9700 ?spouse .\", \">// Get the spouse of the costume designer\",\n    \"?spouse kg:9356 kg:0522 .\", \">// Check if the spouse is the founder of ClubJenna (Q1323191)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5767 kg:3343 . >// Filter for costume designers (Q1102919) ?resource kg:9700 ?spouse . >// Get the spouse of the costume designer ?spouse kg:9356 kg:0522 . >// Check if the spouse is the founder of ClubJenna (Q1323191) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P57 wd:Q2643 .\",\n \t\t\"?resource wdt:P58 wd:Q2643 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q2643 . ?resource wdt:P58 wd:Q2643 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and directed by George Harrison", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2538 kg:4115 .\",\n    \"?resource kg:2538 kg:8693 .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2538 kg:4115 . ?resource kg:2538 kg:8693 . } LIMIT 10", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q24907 .\",\n    \"} LIMIT 100\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q24907 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written and edited by Anker Sørensen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3729 kg:1179 .\",\n    \"?resource kg:3729 kg:9130 .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3729 kg:1179 . ?resource kg:3729 kg:9130 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?parent WHERE {\",\n \t\t\"?parent wdt:P40 wd:Q1323191 .\", \">// Nadja Weiss's parent\",\n \t\t\"?parent wdt:P27 wd:Q34 .\", \">// Swedish nationality\",\n \t\t\"OPTIONAL {?parent wdt:P106 wd:Q4990261 .}\", \">// costume designer profession\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?parent WHERE { ?parent wdt:P40 wd:Q1323191 . >// Nadja Weiss's parent ?parent wdt:P27 wd:Q34 . >// Swedish nationality OPTIONAL {?parent wdt:P106 wd:Q4990261 .} >// costume designer profession } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:8412/kg:4138 kg:4112 .\", \">// costume designer relation to Nadja Weiss (Q1323191) through P355 (costume designer of/for) and P106 (occupation)\"\n \t\t,\"?resource kg:9469 ?parent .\", \">// parent of the resource\"\n \t\t,\"?parent kg:3398 kg:5057 .\", \">// parent is Swedish (P27 Q34)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8412/kg:4138 kg:4112 . >// costume designer relation to Nadja Weiss (Q1323191) through P355 (costume designer of/for) and P106 (occupation) ?resource kg:9469 ?parent . >// parent of the resource ?parent kg:3398 kg:5057 . >// parent is Swedish (P27 Q34) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"  wd:Q3514303 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q222344 .\",\n    \"  ?spouse wdt:P27 wd:Q17 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q3514303 wdt:P26 ?spouse . ?spouse wdt:P106 wd:Q222344 . ?spouse wdt:P27 wd:Q17 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"  kg:5209 kg:5652 ?spouse .\",\n \t\t\"  ?spouse kg:106 kg:8757 .\",\n \t\t\"  ?spouse kg:1521 kg:5000 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?spouse WHERE { kg:5209 kg:5652 ?spouse . ?spouse kg:106 kg:8757 . ?spouse kg:1521 kg:5000 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written by and produced by Madonna", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2955 is P162\nkg:1388 is P272\nkg:0694 is Q1744\nkg:3432 is P58\nkg:0694 is Q1744", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3432 kg:0694 .\",\n    \"?resource kg:1388 kg:0694 .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3432 kg:0694 . ?resource kg:1388 kg:0694 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesignerEmployer WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q253845 .\", \">// costume designer occupation\",\n    \"?costumeDesigner wdt:P108 ?costumeDesignerEmployer .\", \">// employer of the costume designer\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \">// instance of film\",\n    \"wdt:P1476 \\\"Joe's Bed-Stuy Barbershop: We Cut Heads\\\"@en ;\", \">// title of the movie\",\n    \"wdt:P57 ?producer .\", \">// producer of the movie\",\n    \"?costumeDesignerEmployer wdt:P108 ?producer .\", \">// employer is also the producer of the movie\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?costumeDesignerEmployer WHERE { ?costumeDesigner wdt:P106 wd:Q253845 . >// costume designer occupation ?costumeDesigner wdt:P108 ?costumeDesignerEmployer . >// employer of the costume designer ?movie wdt:P31 wd:Q11424 ; >// instance of film wdt:P1476 \"Joe's Bed-Stuy Barbershop: We Cut Heads\"@en ; >// title of the movie wdt:P57 ?producer . >// producer of the movie ?costumeDesignerEmployer wdt:P108 ?producer . >// employer is also the producer of the movie } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?costumeDesigner wdt:P108 wd:Q1323191 .\",\n    \"?costumeDesigner wdt:P106 wd:Q1141467 .\",\n    \"wd:Q1323191 wdt:P272 ?resource .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P108 wd:Q1323191 . ?costumeDesigner wdt:P106 wd:Q1141467 . wd:Q1323191 wdt:P272 ?resource . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?costumeDesigner kg:2759/kg:0409 ?producer .\",\n    \"?movie kg:5383 ?producer .\",\n    \"?movie kg:1388 <http://www.wikidata.org/entity/Q1141467> .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner kg:2759/kg:0409 ?producer . ?movie kg:5383 ?producer . ?movie kg:1388 wd:Q1141467 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q25384 .\", \">// costume designer occupation\",\n    \"?costumeDesigner wdt:P3373 ?sibling .\", \">// sibling of the costume designer\",\n    \"?sibling wdt:P26 wd:Q196811 .\", \">// spouse of Nadia Cassini (Q196811)\",\n    \"BIND(?sibling AS ?resource) .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner wdt:P106 wd:Q25384 . >// costume designer occupation ?costumeDesigner wdt:P3373 ?sibling . >// sibling of the costume designer ?sibling wdt:P26 wd:Q196811 . >// spouse of Nadia Cassini (Q196811) BIND(?sibling AS ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?sibling wdt:P3373 wd:Q461354 .\", \">// Nadia Cassini's spouse (wd:Q461354) is the sibling of someone (which we are trying to find out if they are a costume designer)\",\n \t\t\"?costumeDesigner wdt:P26 ?sibling .\", \">// The costume designer has a spouse which is the same as Nadia Cassini's spouse\",\n \t\t\"?costumeDesigner wdt:P106 wd:Q1323191 .\", \">// The person we are looking for is indeed a costume designer (wd:Q1323191)\",\n \t\t\"BIND(?costumeDesigner AS ?resource) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?sibling wdt:P3373 wd:Q461354 . >// Nadia Cassini's spouse (wd:Q461354) is the sibling of someone (which we are trying to find out if they are a costume designer) ?costumeDesigner wdt:P26 ?sibling . >// The costume designer has a spouse which is the same as Nadia Cassini's spouse ?costumeDesigner wdt:P106 wd:Q1323191 . >// The person we are looking for is indeed a costume designer (wd:Q1323191) BIND(?costumeDesigner AS ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?costumeDesigner kg:4040 kg:5129 .\", \">// costume designer with the occupation of costume design (Q1323191)\"\n \t\t,\"?costumeDesigner kg:3373 ?sibling .\", \">// sibling relationship\"\n \t\t,\"?sibling kg:7684 kg:3988 .\", \">// spouse relationship to Nadia Cassini (Q461354)\"\n \t\t,\"BIND(?sibling AS ?resource) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?costumeDesigner kg:4040 kg:5129 . >// costume designer with the occupation of costume design (Q1323191) ?costumeDesigner kg:3373 ?sibling . >// sibling relationship ?sibling kg:7684 kg:3988 . >// spouse relationship to Nadia Cassini (Q461354) BIND(?sibling AS ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"  wd:Q12345678 wdt:P108 ?employer .\", \">// Q12345678 is a placeholder for the Wikidata ID of Christian Abt\",\n    \"  ?employer wdt:P179 ?parentCompany .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?employer WHERE { wd:Q12345678 wdt:P108 ?employer . >// Q12345678 is a placeholder for the Wikidata ID of Christian Abt ?employer wdt:P179 ?parentCompany . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?parentCompany WHERE {\",\n    \"wd:Q67134 wdt:P108 ?employer .\",\n    \"?employer wdt:P355 ?parentCompany .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?parentCompany WHERE { wd:Q67134 wdt:P108 ?employer . ?employer wdt:P355 ?parentCompany . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Christian Abt was a company 's parent", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?person kg:0342 'Christian Abt'.\",\n \t\t\"?person kg:0342 ?employer.\",\n \t\t\"?employer kg:7139 ?parentCompany.\",\n \t\t\"FILTER(?parentCompany = kg:8023).\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?person kg:0342 'Christian Abt'. ?person kg:0342 ?employer. ?employer kg:7139 ?parentCompany. FILTER(?parentCompany = kg:8023). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?employer WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person rdfs:label 'Claire Doutriaux'@en .\", \">// person's name in English\",\n    \"?person wdt:P108 ?employer .\", \">// employer of the person\",\n    \"?film wdt:P750 ?employer .\", \">// film distributed by the employer\",\n    \"SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' }\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?employer WHERE { ?person wdt:P31 wd:Q5 . >// person is an instance of human ?person rdfs:label 'Claire Doutriaux'@en . >// person's name in English ?person wdt:P108 ?employer . >// employer of the person ?film wdt:P750 ?employer . >// film distributed by the employer SERVICE wikibase:label { bd:serviceParam wikibase:language 'en' } } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?person wdt:P108 ?employer .\",\n \t\t\"?film wdt:P750 ?employer .\",\n \t\t\"?person wdt:P31 wd:Q1094792 .\",\n \t\t\"?film wdt:P31 wd:Q11424 .\",\n \t\t\"FILTER(?person = wd:Q1094792) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?person wdt:P108 ?employer . ?film wdt:P750 ?employer . ?person wdt:P31 wd:Q1094792 . ?film wdt:P31 wd:Q11424 . FILTER(?person = wd:Q1094792) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?employer WHERE {\",\n \t\t\"?person kg:7435 'Claire Doutriaux'.\",\n \t\t\"?person kg:7435 ?employer.\",\n \t\t\"?film kg:2298 ?employer.\",\n \t\t\"?film kg:2298 kg:6868.\",\n \t\t\"FILTER(?employer = kg:8161).\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?employer WHERE { ?person kg:7435 'Claire Doutriaux'. ?person kg:7435 ?employer. ?film kg:2298 ?employer. ?film kg:2298 kg:6868. FILTER(?employer = kg:8161). } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q482980 .\", \">// Instance of organization\",\n    \"?resource wdt:P17 wd:Q34 .\", \">// Located in Sweden\",\n    \"?production wdt:P123 ?resource .\", \">// Produced by the resource\",\n    \"?production wdt:P6215 wd:Q190875 .\", \">// The production is The Magic Flute\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q482980 . >// Instance of organization ?resource wdt:P17 wd:Q34 . >// Located in Sweden ?production wdt:P123 ?resource . >// Produced by the resource ?production wdt:P6215 wd:Q190875 . >// The production is The Magic Flute } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"wd:Q1651543 wdt:P272 ?producer .\",\n    \"?producer wdt:P112 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1651543 wdt:P272 ?producer . ?producer wdt:P112 wd:Q34 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7989/kg:3121 kg:9250 .\",\n    \"?resource kg:3140 kg:8263 .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7989/kg:3121 kg:9250 . ?resource kg:3140 kg:8263 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"?resource wdt:P27 wd:Q34 .\", \">// Swedish citizen\",\n    \"?resource wdt:P26 wd:Q1890172 .\", \">// Spouse of Mark Sylwan (assuming Q1890172 is the Wikidata ID for Mark Sylwan)\",\n    \"?resource wdt:P106 wd:Q154365 .\", \">// Occupation is costume designer\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Ensure it's a person ?resource wdt:P27 wd:Q34 . >// Swedish citizen ?resource wdt:P26 wd:Q1890172 . >// Spouse of Mark Sylwan (assuming Q1890172 is the Wikidata ID for Mark Sylwan) ?resource wdt:P106 wd:Q154365 . >// Occupation is costume designer } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q1323191 .\", \">// costume designer\",\n    \"?resource wdt:P27 wd:Q34 .\", \">// Swedish citizen\",\n    \"wd:Q6200573 wdt:P26 ?resource .\", \">// spouse of Mark Sylwan (Q6200573)\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q1323191 . >// costume designer ?resource wdt:P27 wd:Q34 . >// Swedish citizen wd:Q6200573 wdt:P26 ?resource . >// spouse of Mark Sylwan (Q6200573) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:7184/kg:3313 kg:0061 .\", \">// spouse of Mark Sylwan (Q1323191) and costume designer (Q6200573) respectively, using the property for spouse (P26) and occupation (P106)\",\n \t\t\"?resource kg:2954 kg:5786 .\", \">// is Swedish (Q34), using the property for country of citizenship (P27)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7184/kg:3313 kg:0061 . >// spouse of Mark Sylwan (Q1323191) and costume designer (Q6200573) respectively, using the property for spouse (P26) and occupation (P106) ?resource kg:2954 kg:5786 . >// is Swedish (Q34), using the property for country of citizenship (P27) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P25 wd:Q187406 .\", \">// Antiochus IV Epiphanes' mother\",\n    \"?person wdt:P3373 wd:Q187406 .\", \">// Antiochus IV Epiphanes' sibling\",\n    \"?person wdt:P26 ?spouse .\", \">// spouse of the person\",\n    \"?spouse wdt:P31 wd:Q950745 .\", \">// instance of a member of the Seleucid dynasty\",\n    \"FILTER(?spouse != wd:Q187406) .\", \">// exclude Antiochus IV Epiphanes himself\",\n    \"?person wdt:P26 ?spouse .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?person WHERE { ?person wdt:P25 wd:Q187406 . >// Antiochus IV Epiphanes' mother ?person wdt:P3373 wd:Q187406 . >// Antiochus IV Epiphanes' sibling ?person wdt:P26 ?spouse . >// spouse of the person ?spouse wdt:P31 wd:Q950745 . >// instance of a member of the Seleucid dynasty FILTER(?spouse != wd:Q187406) . >// exclude Antiochus IV Epiphanes himself ?person wdt:P26 ?spouse . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P26 wd:Q2045778 .\", \">// Spouse of Antiochus IV Epiphanes\",\n \t\t\"?person wdt:P3373 wd:Q3356 .\", \">// Sibling of Antiochus (assuming Q3356 is the correct ID for Antiochus)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P26 wd:Q2045778 . >// Spouse of Antiochus IV Epiphanes ?person wdt:P3373 wd:Q3356 . >// Sibling of Antiochus (assuming Q3356 is the correct ID for Antiochus) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse ?sibling WHERE {\",\n \t\t\"?antiochusIV kg:0822 ?spouse .\",\n \t\t\"?antiochusIV kg:3622 ?sibling .\",\n \t\t\"?sibling kg:0822 ?marriedAntiochus .\",\n \t\t\"FILTER (?marriedAntiochus = kg:5747) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?spouse ?sibling WHERE { ?antiochusIV kg:0822 ?spouse . ?antiochusIV kg:3622 ?sibling . ?sibling kg:0822 ?marriedAntiochus . FILTER (?marriedAntiochus = kg:5747) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"?work wdt:P31 wd:Q2487295; # The Magic Flute is an instance of opera\",\n    \"wdt:P17 wd:Q34; # The work is associated with Sweden\",\n    \"wdt:P750 ?distributor; # Distributor of the work\",\n    \"wdt:P344 ?producer. # Producer of the work\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { ?work wdt:P31 wd:Q2487295; wdt:P17 wd:Q34; wdt:P750 ?distributor; wdt:P344 ?producer. } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"wd:Q1651543 wdt:P272 ?distributor .\",\n    \"wd:Q1651543 wdt:P112 ?producer .\",\n    \"?distributor wdt:P750 wd:Q34 .\",\n    \"?producer wdt:P750 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}\n \t\t\t\t\t\t\t", "normal_query": "SELECT ?distributor ?producer WHERE { wd:Q1651543 wdt:P272 ?distributor . wd:Q1651543 wdt:P112 ?producer . ?distributor wdt:P750 wd:Q34 . ?producer wdt:P750 wd:Q34 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?distributor ?producer WHERE {\",\n    \"  kg:2549 kg:6570 ?producer .\",\n    \"  kg:2549 kg:2760 ?distributor .\",\n    \"  ?distributor kg:8112 kg:8236 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?distributor ?producer WHERE { kg:2549 kg:6570 ?producer . kg:2549 kg:2760 ?distributor . ?distributor kg:8112 kg:8236 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?resource wdt:P27 wd:Q55 .\", \">// nationality is Netherlands\",\n    \"?resource wdt:P3373 wd:Q486091 .\", \">// sibling of Prince Aschwin of Lippe-Biesterfeld\",\n    \"OPTIONAL { ?resource wdt:P106 wd:Q212511 . }\", \">// occupation is founder, optional as not all siblings might be founders\",\n    \"FILTER EXISTS { ?organization wdt:P31 wd:Q47981 ; wdt:P112 ?resource . }\", \">// World Wide Fund for Nature (WWF) was founded by the resource\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// instance of human ?resource wdt:P27 wd:Q55 . >// nationality is Netherlands ?resource wdt:P3373 wd:Q486091 . >// sibling of Prince Aschwin of Lippe-Biesterfeld OPTIONAL { ?resource wdt:P106 wd:Q212511 . } >// occupation is founder, optional as not all siblings might be founders FILTER EXISTS { ?organization wdt:P31 wd:Q47981 ; wdt:P112 ?resource . } >// World Wide Fund for Nature (WWF) was founded by the resource } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P112 wd:Q29999 .\", \">// Founder of World Wide Fund for Nature (WWF) is the resource's founder (P112) of Q29999 (World Wide Fund for Nature)\",\n \t\t\"?resource wdt:P3373 wd:Q2336212 .\", \">// The resource has a sibling (P3373) who is Prince Aschwin of Lippe-Biesterfeld (Q2336212)\",\n \t\t\"wd:Q2336212 wdt:P27 wd:Q55 .\", \">// Prince Aschwin of Lippe-Biesterfeld (Q2336212) is from the Netherlands (Q55)\"\n \t\t, \"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P112 wd:Q29999 . >// Founder of World Wide Fund for Nature (WWF) is the resource's founder (P112) of Q29999 (World Wide Fund for Nature) ?resource wdt:P3373 wd:Q2336212 . >// The resource has a sibling (P3373) who is Prince Aschwin of Lippe-Biesterfeld (Q2336212) wd:Q2336212 wdt:P27 wd:Q55 . >// Prince Aschwin of Lippe-Biesterfeld (Q2336212) is from the Netherlands (Q55) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1026/kg:4469* kg:9596 .\",\n    \"?resource kg:3660 kg:7833 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1026/kg:4469* kg:9596 . ?resource kg:3660 kg:7833 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \"># person is an instance of human\",\n    \"?person wdt:P2541 wd:Q78960 .\", \"># person is a sibling of Dieter Hoeneß (Q78960)\",\n    \"?person wdt:P27 wd:Q183 .\", \"># person is German (Q183)\",\n    \"?resource wdt:P108 wd:Q54971 .\", \">// resource is an employee of FC Bayern Munich (Q54971)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?person wdt:P31 wd:Q5 . > ?person wdt:P2541 wd:Q78960 . > ?person wdt:P27 wd:Q183 . > ?resource wdt:P108 wd:Q54971 . >// resource is an employee of FC Bayern Munich (Q54971) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"  wd:Q60414 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q183 .\",\n    \"  ?sibling wdt:P108 wd:Q15789 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { wd:Q60414 wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q183 . ?sibling wdt:P108 wd:Q15789 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:5481 kg:1876 .\", \">// Dieter Hoeneß's sibling (Q60414) - P3373 (sibling of)\"\n \t\t,\"?resource kg:27 kg:8594 .\", \">// is a German citizen (Q183) - P27 (country of citizenship)\"\n \t\t,\"?resource kg:108 kg:2961 .\", \">// was an employee of FC Bayern Munich (Q15789) - P108 (employer)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5481 kg:1876 . >// Dieter Hoeneß's sibling (Q60414) - P3373 (sibling of) ?resource kg:27 kg:8594 . >// is a German citizen (Q183) - P27 (country of citizenship) ?resource kg:108 kg:2961 . >// was an employee of FC Bayern Munich (Q15789) - P108 (employer) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P1476 \\\"Drums of Love\\\"@en ;\", \">// Title in English\",\n    \"wdt:P1258 ?distributorProducer .\", \">// Distributed by or produced by\",\n    \"?distributorProducer wdt:P112 wd:Q13096 .\", \">// Founded by Charlie Chaplin\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { ?film wdt:P31 wd:Q11424 ; >// Instance of film wdt:P1476 \"Drums of Love\"@en ; >// Title in English wdt:P1258 ?distributorProducer . >// Distributed by or produced by ?distributorProducer wdt:P112 wd:Q13096 . >// Founded by Charlie Chaplin } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882", "response": "{\n  \"query\": [\n    \"SELECT ?distributorProducer WHERE {\",\n    \"  wd:Q3715556 wdt:P272 ?distributorProducer .\",\n    \"  ?distributorProducer wdt:P112 wd:Q882 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?distributorProducer WHERE { wd:Q3715556 wdt:P272 ?distributorProducer . ?distributorProducer wdt:P112 wd:Q882 . } LIMIT 1", "valid_query": true, "error": null, "correct": true}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882", "response": "{\n \t\"query\": [\n \t\t\"?distributor\",\n \t\t\"?producer\"\n \t]\n}\n   \t\t\t\t\t\t\t  \t \t\t\t\t\t\t", "normal_query": "?distributor ?producer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q173492 .\", \">// Written by Vince Gilligan (Q173492)\",\n    \"?resource wdt:P123 wd:Q607114 .\", \">// Produced by Bob Weinstein (Q607114)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q173492 . >// Written by Vince Gilligan (Q173492) ?resource wdt:P123 wd:Q607114 . >// Produced by Bob Weinstein (Q607114) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q4500 .\",\n    \"?resource wdt:P162 wd:Q888311 .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q4500 . ?resource wdt:P162 wd:Q888311 . } LIMIT 10", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500", "response": "{\n \t\"query\": [\n \t\t\"?resource\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?resource kg:9666 kg:8411 .\",\n \t\t\"?resource kg:3400 kg:1489 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "?resource WHERE { ?resource kg:9666 kg:8411 . ?resource kg:3400 kg:1489 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?company wdt:P112 ?founder .\", \">// P112 is 'founded by'\",\n    \"?founder rdfs:label 'Alphonse-Louis du Plessis de Richelieu'@fr .\",\n    \"?founder wdt:P3373 ?sibling .\", \">// P3373 is 'sibling'\",\n    \"?sibling wdt:P21 wd:Q6581072 .\", \">// Q6581072 is 'female' (assuming the sibling is female, as French sibling could imply a sister)\",\n    \"BIND(?sibling AS ?resource) .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P112 ?founder . >// P112 is 'founded by' ?founder rdfs:label 'Alphonse-Louis du Plessis de Richelieu'@fr . ?founder wdt:P3373 ?sibling . >// P3373 is 'sibling' ?sibling wdt:P21 wd:Q6581072 . >// Q6581072 is 'female' (assuming the sibling is female, as French sibling could imply a sister) BIND(?sibling AS ?resource) . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?company wdt:P112 wd:Q1079409 .\", \">// Company's founder is Alphonse-Louis du Plessis de Richelieu (Q1079409)\"\n \t\t,\"?sibling wdt:P3373 wd:Q1079409 .\", \">// Sibling of Alphonse-Louis du Plessis de Richelieu\"\n \t\t,\"?sibling wdt:P27 wd:Q142 .\", \">// Sibling is French (Q142)\"\n \t\t,\"BIND(?sibling AS ?resource) .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?company wdt:P112 wd:Q1079409 . >// Company's founder is Alphonse-Louis du Plessis de Richelieu (Q1079409) ?sibling wdt:P3373 wd:Q1079409 . >// Sibling of Alphonse-Louis du Plessis de Richelieu ?sibling wdt:P27 wd:Q142 . >// Sibling is French (Q142) BIND(?sibling AS ?resource) . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?company p:P112/ps:P112 ?founder .\",\n \t\t\"?founder wdt:P3373 ?sibling .\",\n \t\t\"?sibling wdt:P27 wd:Q142 .\",\n \t\t\"FILTER(?founder = wd:Q4830453) .\",\n \t\t\"VALUES ?company { kg:4343 }\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?company p:P112/ps:P112 ?founder . ?founder wdt:P3373 ?sibling . ?sibling wdt:P27 wd:Q142 . FILTER(?founder = wd:Q4830453) . VALUES ?company { kg:4343 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q209621 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// Directed by\",\n    \"?resource wdt:P1433 ?writer .\", \">// Written by\",\n    \"?director rdfs:label 'Stan Winston'@en .\",\n    \"?writer rdfs:label 'Michael Jackson'@en .\",\n    \"FILTER(?resource = wd:Q209621) .\", \">// Michael Jackson's Ghosts\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q209621 . >// Instance of film ?resource wdt:P57 ?director . >// Directed by ?resource wdt:P1433 ?writer . >// Written by ?director rdfs:label 'Stan Winston'@en . ?writer rdfs:label 'Michael Jackson'@en . FILTER(?resource = wd:Q209621) . >// Michael Jackson's Ghosts } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q44477 wdt:P162 wd:Q320211 .\",\n    \"  wd:Q44477 wdt:P58 wd:Q2831 .\",\n    \"  BIND(wd:Q44477 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q44477 wdt:P162 wd:Q320211 . wd:Q44477 wdt:P58 wd:Q2831 . BIND(wd:Q44477 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831", "response": "{\n \t\"query\": [\n \t\t\"?resource\",\n \t\t\"WHERE\",\n \t\t\"{\",\n \t\t\"?resource kg:3913 kg:4760 .\", \">// Produced by Stan Winston (Stan Winston's ID is used as the production company or producer ID, assuming it's Q44477 in this context) kg:4760 is a placeholder for the correct entity ID of 'Ghosts' if different from Michael Jackson's ID\",\n \t\t\"?resource kg:4994 kg:9933 .\", \">// Written by Michael Jackson (Michael Jackson's ID is Q2831)\"\n \t\t,\n \t\t\"}\"\n \t]\n}", "normal_query": "?resource WHERE { ?resource kg:3913 kg:4760 . >// Produced by Stan Winston (Stan Winston's ID is used as the production company or producer ID, assuming it's Q44477 in this context) kg:4760 is a placeholder for the correct entity ID of 'Ghosts' if different from Michael Jackson's ID ?resource kg:4994 kg:9933 . >// Written by Michael Jackson (Michael Jackson's ID is Q2831) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P345 ?imdbID .\",\n    \"?resource wdt:P1431 wd:Q260897 .\", \">// Steven Spielberg as executive producer\",\n    \"?resource wdt:P58 wd:Q188682 .\", \">// Chris Columbus as writer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P345 ?imdbID . ?resource wdt:P1431 wd:Q260897 . >// Steven Spielberg as executive producer ?resource wdt:P58 wd:Q188682 . >// Chris Columbus as writer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431 wd:Q8877 .\",\n    \"?resource wdt:P58 wd:Q75079 .\",\n    \"} LIMIT 10\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q8877 . ?resource wdt:P58 wd:Q75079 . } LIMIT 10", "valid_query": true, "error": null, "correct": true}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9283 kg:6047 .\", \">// Written by Chris Columbus (P58 -> Q8877)\"\n   ,\n    \"?resource kg:9429 kg:9692 .\", \">// Executive produced by Steven Spielberg (P1431 -> Q75079)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9283 kg:6047 . >// Written by Chris Columbus (P58 -> Q8877) ?resource kg:9429 kg:9692 . >// Executive produced by Steven Spielberg (P1431 -> Q75079) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q482980 ;\", \">// Instance of film or stage play\",\n    \"wdt:P179 wd:Q165641 ;\", \">// Part of The Magic Flute\",\n    \"wdt:P17 wd:Q34 .\", \">// Country is Sweden\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q482980 ; >// Instance of film or stage play wdt:P179 wd:Q165641 ; >// Part of The Magic Flute wdt:P17 wd:Q34 . >// Country is Sweden } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P272 wd:Q1651543 .\",\n    \"?resource wdt:P112 wd:Q34 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P272 wd:Q1651543 . ?resource wdt:P112 wd:Q34 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:5876/kg:4497 kg:9202 .\", \">// P272/P750 Q1651543 (distributor and producer of The Magic Flute)\",\n \t\t\"?resource kg:3114 kg:6890 .\", \">// P112 Q34 (founded by Sweden)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5876/kg:4497 kg:9202 . >// P272/P750 Q1651543 (distributor and producer of The Magic Flute) ?resource kg:3114 kg:6890 . >// P112 Q34 (founded by Sweden) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"?henutmire wdt:P22|wdt:P25 ?parent .\",\n    \"?henutmire wdt:P26 ?spouse .\",\n    \"?henutmire wdt:P3373 ?sibling .\",\n    \"OPTIONAL {?parent wdt:P40 ?nefertari .}\",\n    \"OPTIONAL {?spouse wdt:P40 ?nefertari .}\",\n    \"OPTIONAL {?sibling wdt:P40 ?nefertari .}\",\n    \"?nefertari rdfs:label 'Nefertari'@en .\",\n    \"} ORDER BY ?parent ?spouse ?sibling\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { ?henutmire wdt:P22|wdt:P25 ?parent . ?henutmire wdt:P26 ?spouse . ?henutmire wdt:P3373 ?sibling . OPTIONAL {?parent wdt:P40 ?nefertari .} OPTIONAL {?spouse wdt:P40 ?nefertari .} OPTIONAL {?sibling wdt:P40 ?nefertari .} ?nefertari rdfs:label 'Nefertari'@en . } ORDER BY ?parent ?spouse ?sibling LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?parent ?spouse ?sibling WHERE {\",\n    \"  wd:Q210535 wdt:P40 ?parent .\",\n    \"  wd:Q210535 wdt:P26 ?spouse .\",\n    \"  wd:Q210535 wdt:P3373 ?sibling .\",\n    \"  ?parent wdt:P26 wd:Q443473 .\",\n    \"  ?spouse wdt:P26 wd:Q443473 .\",\n    \"  ?sibling wdt:P26 wd:Q443473 .\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t", "normal_query": "SELECT ?parent ?spouse ?sibling WHERE { wd:Q210535 wdt:P40 ?parent . wd:Q210535 wdt:P26 ?spouse . wd:Q210535 wdt:P3373 ?sibling . ?parent wdt:P26 wd:Q443473 . ?spouse wdt:P26 wd:Q443473 . ?sibling wdt:P26 wd:Q443473 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?henutmire kg:2312 ?parent .\", \">// Henutmire's parent\",\n    \"?henutmire kg:6012 ?spouse .\", \">// Henutmire's spouse\",\n    \"?henutmire kg:9021 ?sibling .\", \">// Henutmire's sibling\",\n    \"?parent kg:6012|kg:2312|kg:9021 ?nefertarilllala .\", \">// Parent married to Nefertarilllala\",\n    \"?spouse kg:6012|kg:2312|kg:9021 ?nefertarilllala .\", \">// Spouse married to Nefertarilllala\",\n    \"?sibling kg:6012|kg:2312|kg:9021 ?nefertarilllala .\", \">// Sibling married to Nefertarilllala\",\n    \"FILTER(?nefertarilllala = kg:0479) .\", \">// Ensure the person is Nefertarilllala (Q443473)\",\n    \"?resource ?p ?o .\", \">// Return resources related to the matches\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?henutmire kg:2312 ?parent . >// Henutmire's parent ?henutmire kg:6012 ?spouse . >// Henutmire's spouse ?henutmire kg:9021 ?sibling . >// Henutmire's sibling ?parent kg:6012|kg:2312|kg:9021 ?nefertarilllala . >// Parent married to Nefertarilllala ?spouse kg:6012|kg:2312|kg:9021 ?nefertarilllala . >// Spouse married to Nefertarilllala ?sibling kg:6012|kg:2312|kg:9021 ?nefertarilllala . >// Sibling married to Nefertarilllala FILTER(?nefertarilllala = kg:0479) . >// Ensure the person is Nefertarilllala (Q443473) ?resource ?p ?o . >// Return resources related to the matches } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?spouse WHERE {\",\n    \"?costumeDesigner wdt:P31 wd:Q2064758 .\", \">// costume designer instance\",\n    \"?costumeDesigner wdt:P1039 wd:Q188442 .\", \">// has occupation costume designer\",\n    \"?costumeDesigner wdt:P1477 \\\"Jessica Drake\\\"@en .\", \">// name is Jessica Drake\",\n    \"?costumeDesigner wdt:P26 ?spouse .\", \">// spouse of the costume designer\",\n    \"?spouse wdt:P31 wd:Q6581097 .\", \">// is a human\",\n    \"?spouse wdt:P21 wd:Q6581072 .\", \">// gender male\",\n    \"?spouse wdt:P27 wd:Q16 .\", \">// nationality Canada\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?spouse WHERE { ?costumeDesigner wdt:P31 wd:Q2064758 . >// costume designer instance ?costumeDesigner wdt:P1039 wd:Q188442 . >// has occupation costume designer ?costumeDesigner wdt:P1477 \"Jessica Drake\"@en . >// name is Jessica Drake ?costumeDesigner wdt:P26 ?spouse . >// spouse of the costume designer ?spouse wdt:P31 wd:Q6581097 . >// is a human ?spouse wdt:P21 wd:Q6581072 . >// gender male ?spouse wdt:P27 wd:Q16 . >// nationality Canada } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"wd:Q233128 wdt:P26 ?spouse .\",\n \t\t\"?spouse wdt:P21 wd:Q6581097 ;\",\n \t\t\"       wdt:P27 wd:Q16 ;\",\n \t\t\"       wdt:P106 wd:Q1323191 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?spouse WHERE { wd:Q233128 wdt:P26 ?spouse . ?spouse wdt:P21 wd:Q6581097 ; wdt:P27 wd:Q16 ; wdt:P106 wd:Q1323191 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?spouse WHERE {\",\n \t\t\"?spouse kg:9681/kg:7081 kg:7839 .\", \">// spouse of Jessica Drake and gender is male (Q16) and occupation is costume designer (Q233128) and nationality is Canada (Q6581097)\",\n \t\t\"?spouse kg:3720 kg:9486 .\",\n \t\t\"?spouse kg:3944 kg:5053 .\",\n \t\t\"?spouse kg:106 kg:8565 .\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?spouse WHERE { ?spouse kg:9681/kg:7081 kg:7839 . >// spouse of Jessica Drake and gender is male (Q16) and occupation is costume designer (Q233128) and nationality is Canada (Q6581097) ?spouse kg:3720 kg:9486 . ?spouse kg:3944 kg:5053 . ?spouse kg:106 kg:8565 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P31 wd:Q24855679 ;\", \"># sequel is an instance of a television series or film\",\n    \"wdt:P1431 wd:Q108515 ;\", \">// 'Between Love and Hatred' (Entre el amor y el odio) as the original work\",\n    \"wdt:P364 wd:Q2794005 .\", \">// produced and distributed by Televisa\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P31 wd:Q24855679 ; > wdt:P1431 wd:Q108515 ; >// 'Between Love and Hatred' (Entre el amor y el odio) as the original work wdt:P364 wd:Q2794005 . >// produced and distributed by Televisa } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099", "response": "{\n  \"query\": [\n    \"SELECT ?sequel WHERE {\",\n    \"?sequel wdt:P155 wd:Q47099 .\",\n    \"?sequel wdt:P272 wd:Q115945 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?sequel WHERE { ?sequel wdt:P155 wd:Q47099 . ?sequel wdt:P272 wd:Q115945 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource kg:6778 kg:8668 .\", \">// Produced by Televisa (Q115945)\"\n \t\t,\"?resource kg:7869 kg:0424 .\", \">// Sequel of Between Love and Hatred (P750)\"\n \t\t,\"} \"\n \t]\n }", "normal_query": "SELECT ?resource WHERE { ?resource kg:6778 kg:8668 . >// Produced by Televisa (Q115945) ?resource kg:7869 kg:0424 . >// Sequel of Between Love and Hatred (P750) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"?acquisition wdt:P31 wd:Q2089754 .\", \">// Instance of acquisition\",\n    \"?acquisition wdt:P179 wd:Q26504544 .\", \">// Part of Verizon acquisitions\",\n    \"?child wdt:P178 ?acquisition .\", \">// Acquired by the acquisition\",\n    \"?parent wdt:P127 ?acquisition .\", \">// Parent organization of the acquisition\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?acquisition wdt:P31 wd:Q2089754 . >// Instance of acquisition ?acquisition wdt:P179 wd:Q26504544 . >// Part of Verizon acquisitions ?child wdt:P178 ?acquisition . >// Acquired by the acquisition ?parent wdt:P127 ?acquisition . >// Parent organization of the acquisition } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453", "response": "{\n  \"query\": [\n    \"SELECT ?child ?parent WHERE {\",\n    \"?acquisition wdt:P355 wd:Q467752 .\", \">// Verizon (wd:Q467752) acquired the company\"\n    ,\"?acquisition wdt:P127 ?child .\", \">// The child of the company\"\n    ,\"?child wdt:P749 ?parent .\", \">// The parent of the child company\"\n    ,\"FILTER(?child != wd:Q467752) .\", \">// Ensure the child is not Verizon itself\"\n    ,\"FILTER(?parent != wd:Q467752) .\", \">// Ensure the parent is not Verizon itself\"\n    ,\"}\"\n  ]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?acquisition wdt:P355 wd:Q467752 . >// Verizon (wd:Q467752) acquired the company ?acquisition wdt:P127 ?child . >// The child of the company ?child wdt:P749 ?parent . >// The parent of the child company FILTER(?child != wd:Q467752) . >// Ensure the child is not Verizon itself FILTER(?parent != wd:Q467752) . >// Ensure the parent is not Verizon itself } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What child and parent of a company did Verizon acquire", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?child ?parent WHERE {\",\n \t\t\"?acquisition kg:P749 kg:4917 .\", \">// Verizon (kg:4917) acquired the company (?acquisition)\"\n \t\t\t,\"?acquisition kg:P355 ?parent .\", \">// The parent of the acquired company\"\n \t\t,\"?acquisition kg:P40 ?child .\", \">// The child of the acquired company\"\n \t\t,\"FILTER(?parent != kg:4917) .\", \">// Ensure the parent is not Verizon itself\"\n \t\t,\"FILTER(?child != kg:4917) .\", \">// Ensure the child is not Verizon itself\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?child ?parent WHERE { ?acquisition kg:P749 kg:4917 . >// Verizon (kg:4917) acquired the company (?acquisition) ?acquisition kg:P355 ?parent . >// The parent of the acquired company ?acquisition kg:P40 ?child . >// The child of the acquired company FILTER(?parent != kg:4917) . >// Ensure the parent is not Verizon itself FILTER(?child != kg:4917) . >// Ensure the child is not Verizon itself } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film wdt:P31 wd:Q209621 .\", \">// Instance of film\",\n    \"?film rdfs:label 'Barbary Coast'@en .\", \">// Film title in English\",\n    \"?film wdt:P1258 ?producerDistributor .\", \">// Producer and distributor of the film\",\n    \"?producerDistributor wdt:P178 wd:Q39604 .\", \">// Founded by Mary Pickford (Q39604)\",\n    \"?producerDistributor wdt:P178 wd:Q1529 .\", \">// Founded by Charlie Chaplin (Q1529)\",\n    \"BIND(?producerDistributor AS ?resource) .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film wdt:P31 wd:Q209621 . >// Instance of film ?film rdfs:label 'Barbary Coast'@en . >// Film title in English ?film wdt:P1258 ?producerDistributor . >// Producer and distributor of the film ?producerDistributor wdt:P178 wd:Q39604 . >// Founded by Mary Pickford (Q39604) ?producerDistributor wdt:P178 wd:Q1529 . >// Founded by Charlie Chaplin (Q1529) BIND(?producerDistributor AS ?resource) . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q524849 wdt:P272 ?studio .\",\n    \"  ?studio wdt:P112 wd:Q104109 ;\",\n    \"         wdt:P112 wd:Q882 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q524849 wdt:P272 ?studio . ?studio wdt:P112 wd:Q104109 ; wdt:P112 wd:Q882 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?film kg:2817 kg:8180 .\", \">// Barbary Coast's producer and distributor\"\n    ,\"?film kg:4956 ?producerDistributor .\", \">// producer and distributor of the film\"\n    ,\"?producerDistributor kg:8410/kg:7881 ?founder .\", \">// founder of the producer/distributor\"\n    ,\"VALUES ?founder { kg:7296 kg:2817 } .\", \">// Mary Pickford (Q104109) and Charlie Chaplin (Q524849)\"\n    ,\"?resource ?p ?o .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?film kg:2817 kg:8180 . >// Barbary Coast's producer and distributor ?film kg:4956 ?producerDistributor . >// producer and distributor of the film ?producerDistributor kg:8410/kg:7881 ?founder . >// founder of the producer/distributor VALUES ?founder { kg:7296 kg:2817 } . >// Mary Pickford (Q104109) and Charlie Chaplin (Q524849) ?resource ?p ?o . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?actor wdt:P31 wd:Q5 .\", \">// Actor is a human\",\n    \"?actor wdt:P1344 wd:Q26089 .\", \">// Actor was influenced by Pearl Jam\",\n    \"?sibling wdt:P344 ?actor .\", \">// Sibling of Astrid Young is the actor\",\n    \"wd:Q75894 wdt:P22|wdt:P25 ?sibling .\", \">// Astrid Young's sibling (mother/father relation to find siblings)\",\n    \"?resource wdt:P31 ?actor .\",\n    \"} LIMIT 1\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?actor wdt:P31 wd:Q5 . >// Actor is a human ?actor wdt:P1344 wd:Q26089 . >// Actor was influenced by Pearl Jam ?sibling wdt:P344 ?actor . >// Sibling of Astrid Young is the actor wd:Q75894 wdt:P22|wdt:P25 ?sibling . >// Astrid Young's sibling (mother/father relation to find siblings) ?resource wdt:P31 ?actor . } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?resource wdt:P106 wd:Q33999 .\", \">// Actor (wd:Q33999) as the profession of the person in question\"\n \t\t,\"wd:Q142701 wdt:P737 ?influencer .\", \">// Pearl Jam (wd:Q142701) influenced by someone (?influencer)\"\n \t\t,\"?resource wdt:P3373 wd:Q4811453 .\", \">// Sibling of Astrid Young (wd:Q4811453)\"\n \t\t,\"?influencer wdt:P3373 ?resource .\", \">// The influencer is the sibling of Astrid Young\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q33999 . >// Actor (wd:Q33999) as the profession of the person in question wd:Q142701 wdt:P737 ?influencer . >// Pearl Jam (wd:Q142701) influenced by someone (?influencer) ?resource wdt:P3373 wd:Q4811453 . >// Sibling of Astrid Young (wd:Q4811453) ?influencer wdt:P3373 ?resource . >// The influencer is the sibling of Astrid Young } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0538 kg:1929 .\", \">// Astrid Young's sibling\",\n    \"?resource kg:9972 kg:5606 .\", \">// influenced by actor\",\n    \"kg:5938 kg:7006 kg:5606 .\", \">// Pearl Jam is a musical group\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0538 kg:1929 . >// Astrid Young's sibling ?resource kg:9972 kg:5606 . >// influenced by actor kg:5938 kg:7006 kg:5606 . >// Pearl Jam is a musical group } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q12345678 .\", \">// Replace Q12345678 with the actual Wikidata ID for Jens Jørgen Thorsen\",\n    \"?resource wdt:P50 wd:Q9876543 .\", \">// Replace Q9876543 with the actual Wikidata ID for Ole John\",\n    \"?resource wdt:P50 wd:Q1234567 .\", \">// Replace Q1234567 with the actual Wikidata ID for Jørgen Leth\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q12345678 . >// Replace Q12345678 with the actual Wikidata ID for Jens Jørgen Thorsen ?resource wdt:P50 wd:Q9876543 . >// Replace Q9876543 with the actual Wikidata ID for Ole John ?resource wdt:P50 wd:Q1234567 . >// Replace Q1234567 with the actual Wikidata ID for Jørgen Leth } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3870/kg:P58 kg:7573 .\", \">// Jens Jørgen Thorsen (Q562108)\",\n    \"?resource kg:3870/kg:P58 kg:3255 .\", \">// Ole John (Q1687239)\",\n    \"?resource kg:3870/kg:P58 kg:0406 .\", \">// Jørgen Leth (Q35979475)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3870/kg:P58 kg:7573 . >// Jens Jørgen Thorsen (Q562108) ?resource kg:3870/kg:P58 kg:3255 . >// Ole John (Q1687239) ?resource kg:3870/kg:P58 kg:0406 . >// Jørgen Leth (Q35979475) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?costumeDesigner WHERE {\",\n    \"?film wdt:P86 wds:Q12345 .\", \">// Replace Q12345 with Miguel Albaladejo's actual Wikidata ID\",\n    \"?film wdt:P1079 ?costumeDesigner .\",\n    \"?costumeDesigner wdt:P25 ?sibling .\",\n    \"?sibling wdt:P21 wd:Q6581072 .\", \">// Spanish sibling, Q6581072 is the ID for 'Spanish'\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P86 wds:Q12345 . >// Replace Q12345 with Miguel Albaladejo's actual Wikidata ID ?film wdt:P1079 ?costumeDesigner . ?costumeDesigner wdt:P25 ?sibling . ?sibling wdt:P21 wd:Q6581072 . >// Spanish sibling, Q6581072 is the ID for 'Spanish' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?costumeDesigner WHERE {\",\n \t\t\"?film wdt:P31 wd:Q11424 .\", \">// The film is an instance of a film (Q11424)\"\n \t\t,\"?film wdt:P86 ?costumeDesigner .\", \">// The costume designer of the film\"\n \t\t,\"?costumeDesigner wdt:P27 wd:Q29 .\", \">// The costume designer's nationality is Spain (Q29)\"\n \t\t,\"?costumeDesigner wdt:P3373 wd:Q3083718 .\", \">// The costume designer has a sibling relationship with Miguel Albaladejo (Q3083718)\"\n \t\t,\"} LIMIT 1\"\n \t]\n }", "normal_query": "SELECT ?costumeDesigner WHERE { ?film wdt:P31 wd:Q11424 . >// The film is an instance of a film (Q11424) ?film wdt:P86 ?costumeDesigner . >// The costume designer of the film ?costumeDesigner wdt:P27 wd:Q29 . >// The costume designer's nationality is Spain (Q29) ?costumeDesigner wdt:P3373 wd:Q3083718 . >// The costume designer has a sibling relationship with Miguel Albaladejo (Q3083718) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?costumeDesigner WHERE {\",\n \t\t\"?film kg:5014 kg:3867 .\", \">// film is an instance of a film (Q11424)\"\n \t\t,\"?film kg:8474 ?costumeDesigner .\", \">// costume designer of the film\"\n \t\t,\"?costumeDesigner kg:2748 kg:5093 .\", \">// sibling relationship with Miguel Albaladejo (Q3083718)\"\n \t\t,\"?costumeDesigner kg:8099 kg:8721 .\", \">// the costume designer is from Spain (Q29)\"\n \t\t,\"}\"\n \t]\n}", "normal_query": "SELECT ?costumeDesigner WHERE { ?film kg:5014 kg:3867 . >// film is an instance of a film (Q11424) ?film kg:8474 ?costumeDesigner . >// costume designer of the film ?costumeDesigner kg:2748 kg:5093 . >// sibling relationship with Miguel Albaladejo (Q3083718) ?costumeDesigner kg:8099 kg:8721 . >// the costume designer is from Spain (Q29) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P31 wd:Q5 .\", \">// composer is a human\",\n    \"?composer wdt:P21 wd:Q6581072 .\", \">// composer is female\",\n    \"?composer wdt:P27 wd:Q34 .\", \">// composer is Swedish\",\n    \"?composer wdt:P26 wd:Q1958812 .\", \">// composer's spouse is Mattias Järvinen Palme\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P31 wd:Q5 . >// composer is a human ?composer wdt:P21 wd:Q6581072 . >// composer is female ?composer wdt:P27 wd:Q34 . >// composer is Swedish ?composer wdt:P26 wd:Q1958812 . >// composer's spouse is Mattias Järvinen Palme } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723", "response": "{\n  \"query\": [\n    \"SELECT ?composer WHERE {\",\n    \"?composer wdt:P106 wd:Q36834 .\", \">// composer is an occupation of a composer\",\n    \"?composer wdt:P21 wd:Q6581072 .\", \">// composer is female\",\n    \"?composer wdt:P27 wd:Q34 .\", \">// composer is Swedish\",\n    \"wd:Q96203723 wdt:P26 ?composer .\", \">// Mattias Järvinen Palme's spouse is the composer\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?composer WHERE { ?composer wdt:P106 wd:Q36834 . >// composer is an occupation of a composer ?composer wdt:P21 wd:Q6581072 . >// composer is female ?composer wdt:P27 wd:Q34 . >// composer is Swedish wd:Q96203723 wdt:P26 ?composer . >// Mattias Järvinen Palme's spouse is the composer } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?composer WHERE {\",\n \t\t\"?composer kg:106 kg:3144 .\", \">// composer is an instance of composer (P106 is occupation, kg:3144 is the identifier for composer)\",\n \t\t\"?composer kg:27 kg:34 .\", \">// composer is Swedish (P27 is country of citizenship, kg:34 is Sweden)\",\n \t\t\"?composer kg:8756 kg:6581072 .\", \">// composer is female (P21 is gender, kg:6581072 is female)\",\n \t\t\"?composer kg:26 kg:96203723 .\", \">// composer is the spouse of Mattias Järvinen Palme (P26 is spouse, kg:96203723 is Mattias Järvinen Palme)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?composer WHERE { ?composer kg:106 kg:3144 . >// composer is an instance of composer (P106 is occupation, kg:3144 is the identifier for composer) ?composer kg:27 kg:34 . >// composer is Swedish (P27 is country of citizenship, kg:34 is Sweden) ?composer kg:8756 kg:6581072 . >// composer is female (P21 is gender, kg:6581072 is female) ?composer kg:26 kg:96203723 . >// composer is the spouse of Mattias Järvinen Palme (P26 is spouse, kg:96203723 is Mattias Järvinen Palme) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P577 ?date .\", \">// Publication date (to ensure it's the correct work)\",\n    \"?resource wdt:P162 ?producer .\", \">// Produced by\",\n    \"?resource wdt:P58 ?editor .\", \">// Edited by\",\n    \"FILTER(?producer = wd:Q309741 || ?producer = wd:Q188671 || ?producer = wd:Q188282) .\", \">// Jens Jørgen Thorsen, Ole John, Jørgen Leth\",\n    \"FILTER(?editor = wd:Q309741 || ?editor = wd:Q188671 || ?editor = wd:Q188282) .\", \">// Jens Jørgen Thorsen, Ole John, Jørgen Leth\",\n    \"FILTER(?resource = wd:Q309741 || ?resource = wd:Q188671 || ?resource = wd:Q188282) .\", \">// Stop for Bud (if it has a specific Wikidata ID)\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P577 ?date . >// Publication date (to ensure it's the correct work) ?resource wdt:P162 ?producer . >// Produced by ?resource wdt:P58 ?editor . >// Edited by FILTER(?producer = wd:Q309741 || ?producer = wd:Q188671 || ?producer = wd:Q188282) . >// Jens Jørgen Thorsen, Ole John, Jørgen Leth FILTER(?editor = wd:Q309741 || ?editor = wd:Q188671 || ?editor = wd:Q188282) . >// Jens Jørgen Thorsen, Ole John, Jørgen Leth FILTER(?resource = wd:Q309741 || ?resource = wd:Q188671 || ?resource = wd:Q188282) . >// Stop for Bud (if it has a specific Wikidata ID) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P162 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P162 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P162 wd:Q35979475 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P162 wd:Q562108 . wd:Q20729551 wdt:P162 wd:Q1687239 . wd:Q20729551 wdt:P162 wd:Q35979475 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:9246/kg:7250* kg:3644 .\",\n    \"?resource kg:9246/kg:7250* kg:2981 .\",\n    \"?resource kg:9246/kg:7250* kg:2285 .\",\n    \"FILTER(?resource = kg:5777)\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:9246/kg:7250* kg:3644 . ?resource kg:9246/kg:7250* kg:2981 . ?resource kg:9246/kg:7250* kg:2285 . FILTER(?resource = kg:5777) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P31 wd:Q5 .\", \">// person is an instance of human\",\n    \"?person wdt:P25 wd:Q40867 .\", \">// Ptolemy IX Lathyros' sister\",\n    \"?person wdt:P26 wd:Q40867 .\", \">// Ptoley IX Lathyros' spouse\",\n    \"?person wdt:P2295 wd:Q131411 .\", \">// married to Antiochus IX Cyzicenus\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P31 wd:Q5 . >// person is an instance of human ?person wdt:P25 wd:Q40867 . >// Ptolemy IX Lathyros' sister ?person wdt:P26 wd:Q40867 . >// Ptoley IX Lathyros' spouse ?person wdt:P2295 wd:Q131411 . >// married to Antiochus IX Cyzicenus } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P3373 wd:Q296446 .\", \">// Ptolemy IX Lathyros' sibling\",\n \t\t\"?person wdt:P21 wd:Q6581072 .\", \">// female\",\n \t\t\"?person wdt:P26 wd:Q3340 .\", \">// spouse of Antiochus IX Cyzicenus\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P3373 wd:Q296446 . >// Ptolemy IX Lathyros' sibling ?person wdt:P21 wd:Q6581072 . >// female ?person wdt:P26 wd:Q3340 . >// spouse of Antiochus IX Cyzicenus } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?siblingSpouse WHERE {\",\n \t\t\"?siblingSpouse kg:8252 kg:6160 .\", \">// Ptolemy IX Lathyros's sibling (kg:6160 is Q296446, which represents Ptolemy IX Lathyros)\",\n \t\t\"?siblingSpouse kg:1012 kg:3719 .\", \">// The sibling is female (kg:3719 is P21, and the value should be 'female')\",\n \t\t\"kg:5862 kg:1012 ?siblingSpouse .\", \">// Antiochus IX Cyzicenus's spouse (kg:5862 is Q6581072, which represents Antiochus IX Cyzicenus)\",\n \t\t\"}\"\n \t]\n}", "normal_query": "SELECT ?siblingSpouse WHERE { ?siblingSpouse kg:8252 kg:6160 . >// Ptolemy IX Lathyros's sibling (kg:6160 is Q296446, which represents Ptolemy IX Lathyros) ?siblingSpouse kg:1012 kg:3719 . >// The sibling is female (kg:3719 is P21, and the value should be 'female') kg:5862 kg:1012 ?siblingSpouse . >// Antiochus IX Cyzicenus's spouse (kg:5862 is Q6581072, which represents Antiochus IX Cyzicenus) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q12345678 .\", \">// Replace Q12345678 with the actual Wikidata ID for Jens Jørgen Thorsen\",\n    \"?resource wdt:P50 wd:Q900542 .\", \">// Replace Q900542 with the actual Wikidata ID for Jørgen Leth\",\n    \"?resource wdt:P50 wd:Q12345679 .\", \">// Replace Q12345679 with the actual Wikidata ID for Ole John\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q12345678 . >// Replace Q12345678 with the actual Wikidata ID for Jens Jørgen Thorsen ?resource wdt:P50 wd:Q900542 . >// Replace Q900542 with the actual Wikidata ID for Jørgen Leth ?resource wdt:P50 wd:Q12345679 . >// Replace Q12345679 with the actual Wikidata ID for Ole John } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6908/kg:6763 kg:562108 .\", \">// Jens Jørgen Thorsen (Q562108) as author/editor\",\n    \"?resource kg:6908/kg:9719 kg:1687239 .\", \">// Jørgen Leth (Q1687239) as author/editor\",\n    \"?resource kg:6908/kg:4762 kg:35979475 .\", \">// Ole John (Q35979475) as author/editor\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6908/kg:6763 kg:562108 . >// Jens Jørgen Thorsen (Q562108) as author/editor ?resource kg:6908/kg:9719 kg:1687239 . >// Jørgen Leth (Q1687239) as author/editor ?resource kg:6908/kg:4762 kg:35979475 . >// Ole John (Q35979475) as author/editor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q571 .\", \">// Assuming we are looking for a creative work\",\n    \"?resource wdt:P50 wd:Q2468915 .\", \">// Jens Jørgen Thorsen (assuming this is the correct Wikidata ID)\",\n    \"?resource wdt:P50 wd:Q373831 .\", \">// Jørgen Leth (assuming this is the correct Wikidata ID)\",\n    \"?resource wdt:P50 wd:Q2469015 .\", \">// Ole John (assuming this is the correct Wikidata ID)\",\n    \"?resource rdfs:label 'Stop for Bud'@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q571 . >// Assuming we are looking for a creative work ?resource wdt:P50 wd:Q2468915 . >// Jens Jørgen Thorsen (assuming this is the correct Wikidata ID) ?resource wdt:P50 wd:Q373831 . >// Jørgen Leth (assuming this is the correct Wikidata ID) ?resource wdt:P50 wd:Q2469015 . >// Ole John (assuming this is the correct Wikidata ID) ?resource rdfs:label 'Stop for Bud'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P58 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q35979475 .\",\n    \"  BIND(wd:Q20729551 AS ?resource)\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 . BIND(wd:Q20729551 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2004/kg:6826 kg:7434 .\", \">// Jens Jørgen Thorsen (Q562108) as author/editor\",\n    \"?resource kg:2004/kg:6826 kg:9084 .\", \">// Jørgen Leth (Q1687239) as author/editor\",\n    \"?resource kg:2004/kg:6826 kg:7959 .\", \">// Ole John (Q35979475) as author/editor\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2004/kg:6826 kg:7434 . >// Jens Jørgen Thorsen (Q562108) as author/editor ?resource kg:2004/kg:6826 kg:9084 . >// Jørgen Leth (Q1687239) as author/editor ?resource kg:2004/kg:6826 kg:7959 . >// Ole John (Q35979475) as author/editor } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P577 ?date .\", \">// Publication date (assuming it's needed for context)\",\n    \"?resource wdt:P162 wd:Q180917 .\", \">// Produced by Ole John\",\n    \"?resource wdt:P162 wd:Q3452775 .\", \">// Produced by Jørgen Leth\",\n    \"?resource wdt:P162 wd:Q180918 .\", \">// Produced by Jens Jørgen Thorsen\",\n    \"?resource wdt:P287 wd:Q180917 .\", \">// Edited by Ole John\",\n    \"?resource wdt:P287 wd:Q3452775 .\", \">// Edited by Jørgen Leth\",\n    \"?resource wdt:P287 wd:Q180918 .\", \">// Edited by Jens Jørgen Thorsen\",\n    \"FILTER(?resource = wd:Q164377) .\", \">// Assuming 'Stop for Bud' has the Wikidata ID Q164377 (this is a placeholder and should be verified)\",\n    \"} LIMIT 1\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P577 ?date . >// Publication date (assuming it's needed for context) ?resource wdt:P162 wd:Q180917 . >// Produced by Ole John ?resource wdt:P162 wd:Q3452775 . >// Produced by Jørgen Leth ?resource wdt:P162 wd:Q180918 . >// Produced by Jens Jørgen Thorsen ?resource wdt:P287 wd:Q180917 . >// Edited by Ole John ?resource wdt:P287 wd:Q3452775 . >// Edited by Jørgen Leth ?resource wdt:P287 wd:Q180918 . >// Edited by Jens Jørgen Thorsen FILTER(?resource = wd:Q164377) . >// Assuming 'Stop for Bud' has the Wikidata ID Q164377 (this is a placeholder and should be verified) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1040 wd:Q20729551 .\",\n    \"?resource wdt:P162 wd:Q562108 .\",\n    \"?resource wdt:P162 wd:Q1687239 .\",\n    \"?resource wdt:P162 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1040 wd:Q20729551 . ?resource wdt:P162 wd:Q562108 . ?resource wdt:P162 wd:Q1687239 . ?resource wdt:P162 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8791/kg:4280 kg:0356 .\", \">// Ole John (Q1687239)\",\n    \"?resource kg:8791/kg:4280 kg:4280 .\", \">// Jørgen Leth (Q562108)\",\n    \"?resource kg:8791/kg:4280 kg:9844 .\", \">// Jens Jørgen Thorsen (Q35979475)\",\n    \"?resource kg:1522 kg:4646 .\", \">// Stop for Bud (Q20729551)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8791/kg:4280 kg:0356 . >// Ole John (Q1687239) ?resource kg:8791/kg:4280 kg:4280 . >// Jørgen Leth (Q562108) ?resource kg:8791/kg:4280 kg:9844 . >// Jens Jørgen Thorsen (Q35979475) ?resource kg:1522 kg:4646 . >// Stop for Bud (Q20729551) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P345 ?imdbID .\",\n    \"?resource wdt:P123 ?producer .\",\n    \"?resource wdt:P1435 wd:Q768901 .\", \">// Sam Simon\",\n    \"?resource wdt:P1435 wd:Q188512 .\", \">// James L. Brooks\",\n    \"?resource wdt:P1435 wd:Q188513 .\", \">// Matt Groening\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P345 ?imdbID . ?resource wdt:P123 ?producer . ?resource wdt:P1435 wd:Q768901 . >// Sam Simon ?resource wdt:P1435 wd:Q188512 . >// James L. Brooks ?resource wdt:P1435 wd:Q188513 . >// Matt Groening } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P162 wd:Q43994 .\", \">// executive produced by Sam Simon (Q43994)\"\n   ,\n    \"?resource wdt:P162 wd:Q95125 .\", \">// executive produced by James L. Brooks (Q95125)\"\n    ,\n    \"?resource wdt:P162 wd:Q365090 .\", \">// executive produced by Matt Groening (Q365090)\"\n    ,\n    \"?resource wdt:P1431 wd:Q43994 .\", \">// produced by Sam Simon (Q43994)\"\n    ,\n    \"?resource wdt:P1431 wd:Q95125 .\", \">// produced by James L. Brooks (Q95125)\"\n    ,\n    \"?resource wdt:P1431 wd:Q365090 .\", \">// produced by Matt Groening (Q365090)\"\n    ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P162 wd:Q43994 . >// executive produced by Sam Simon (Q43994) ?resource wdt:P162 wd:Q95125 . >// executive produced by James L. Brooks (Q95125) ?resource wdt:P162 wd:Q365090 . >// executive produced by Matt Groening (Q365090) ?resource wdt:P1431 wd:Q43994 . >// produced by Sam Simon (Q43994) ?resource wdt:P1431 wd:Q95125 . >// produced by James L. Brooks (Q95125) ?resource wdt:P1431 wd:Q365090 . >// produced by Matt Groening (Q365090) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1348/kg:P162 <http://www.wikidata.org/entity/Q43994> .\",\n    \"?resource kg:1348/kg:P162 <http://www.wikidata.org/entity/Q95125> .\",\n    \"?resource kg:1348/kg:P162 <http://www.wikidata.org/entity/Q365090> .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1348/kg:P162 wd:Q43994 . ?resource kg:1348/kg:P162 wd:Q95125 . ?resource kg:1348/kg:P162 wd:Q365090 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?sibling WHERE {\",\n    \"?sibling wdt:P31 wd:Q5 .\", \">// instance of human\",\n    \"?sibling wdt:P25 wd:Q40687 .\", \">// mother is Cleopatra III\",\n    \"?sibling wdt:P22 wd:Q40691 .\", \">// father is Ptolemy VIII Physcon\",\n    \"?sibling wdt:P3373 wd:Q157111 .\", \">// sibling of Ptolemary X Alexander I\",\n    \"?sibling wdt:P26 wd:Q40689 .\", \">// spouse is Ptolemy IX Lathyros\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P31 wd:Q5 . >// instance of human ?sibling wdt:P25 wd:Q40687 . >// mother is Cleopatra III ?sibling wdt:P22 wd:Q40691 . >// father is Ptolemy VIII Physcon ?sibling wdt:P3373 wd:Q157111 . >// sibling of Ptolemary X Alexander I ?sibling wdt:P26 wd:Q40689 . >// spouse is Ptolemy IX Lathyros } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?sibling WHERE {\",\n \t\t\"?sibling wdt:P3373 wd:Q3345 .\", \">// Ptolemy IX Lathyros's sibling\",\n \t\t\"?sibling wdt:P26 wd:Q3345 .\", \">// Ptolemy IX Lathyros's spouse\",\n \t\t\"?sibling wdt:P3373 wd:Q3340 .\", \">// Ptolemy X Alexander I's sibling\",\n \t\t\"?sibling wdt:P21 wd:Q6581072 .\", \">// female\"\n \t\t, \"}\"\n \t]\n}", "normal_query": "SELECT ?sibling WHERE { ?sibling wdt:P3373 wd:Q3345 . >// Ptolemy IX Lathyros's sibling ?sibling wdt:P26 wd:Q3345 . >// Ptolemy IX Lathyros's spouse ?sibling wdt:P3373 wd:Q3340 . >// Ptolemy X Alexander I's sibling ?sibling wdt:P21 wd:Q6581072 . >// female } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340", "response": "{\n \t\"query\": [\n \t\t\"SELECT ?siblingSpouse WHERE {\",\n \t\t\"?siblingSpouse kg:7620/kg:5838 kg:4916 .\", \">// Ptolemy IX Lathyros's sibling and spouse relationship chain (P3373/P21/Q3340) or (P3373/Q6581072/Q3340)\"\n \t\t,\"kg:3742 kg:7620 ?siblingSpouse .\", \">// Ptolemy X Alexander I's sibling relationship (Q3345/P3373/?siblingSpouse)\"\n \t\t,\"FILTER(?siblingSpouse = kg:4916 || ?siblingSpouse = kg:8383) .\", \">// Filter to ensure the resource is a female (P21/Q6581072 or P21/Q3340)\"\n \t\t,\"} LIMIT 1\"\n \t]\n }", "normal_query": "SELECT ?siblingSpouse WHERE { ?siblingSpouse kg:7620/kg:5838 kg:4916 . >// Ptolemy IX Lathyros's sibling and spouse relationship chain (P3373/P21/Q3340) or (P3373/Q6581072/Q3340) kg:3742 kg:7620 ?siblingSpouse . >// Ptolemy X Alexander I's sibling relationship (Q3345/P3373/?siblingSpouse) FILTER(?siblingSpouse = kg:4916 || ?siblingSpouse = kg:8383) . >// Filter to ensure the resource is a female (P21/Q6581072 or P21/Q3340) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q2485679 .\", \">// Instance of television series\",\n    \"?resource wdt:P178 wd:Q107401 .\", \">// Produced by Vince Gilligan\",\n    \"?resource wdt:P178 wd:Q18853128 .\", \">// Produced by George Mastras\",\n    \"?resource wdt:P57 wd:Q107401 .\", \">// Directed by Vince Gilligan\",\n    \"?resource wdt:P57 wd:Q18853128 .\", \">// Directed by George Mastras\",\n    \"?resource wdt:P58 wd:Q107401 .\", \">// Written by Vince Gilligan\",\n    \"?resource wdt:P58 wd:Q18853128 .\", \">// Written by George Mastras\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q2485679 . >// Instance of television series ?resource wdt:P178 wd:Q107401 . >// Produced by Vince Gilligan ?resource wdt:P178 wd:Q18853128 . >// Produced by George Mastras ?resource wdt:P57 wd:Q107401 . >// Directed by Vince Gilligan ?resource wdt:P57 wd:Q18853128 . >// Directed by George Mastras ?resource wdt:P58 wd:Q107401 . >// Written by Vince Gilligan ?resource wdt:P58 wd:Q18853128 . >// Written by George Mastras } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1079 wdt:P57 ?resource .\",\n    \"  wd:Q1079 wdt:P162 ?resource .\",\n    \"  wd:Q1079 wdt:P58 ?resource .\",\n    \"  VALUES ?resource { wd:Q4500 wd:Q5542223 }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1079 wdt:P57 ?resource . wd:Q1079 wdt:P162 ?resource . wd:Q1079 wdt:P58 ?resource . VALUES ?resource { wd:Q4500 wd:Q5542223 } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5045/kg:8022 kg:6250 .\", \">// Produced by Vince Gilligan and George Mastras\",\n    \"?resource kg:0037/kg:8022 kg:6250 .\", \">// Directed by Vince Gilligan and George Mastras\",\n    \"?resource kg:3585/kg:8022 kg:6250 .\", \">// Written by Vince Gilligan and George Mastras\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5045/kg:8022 kg:6250 . >// Produced by Vince Gilligan and George Mastras ?resource kg:0037/kg:8022 kg:6250 . >// Directed by Vince Gilligan and George Mastras ?resource kg:3585/kg:8022 kg:6250 . >// Written by Vince Gilligan and George Mastras } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q25389 .\", \">// costume designer\",\n    \"?resource wdt:P452 wd:Q33999 .\", \">// star (actor)\",\n    \"?resource wdt:P452 wd:Q170452 .\", \">// editor\",\n    \"{ ?film wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Tom at the Farm\\\"@en ; wdt:P57 ?resource. }\",\n    \"UNION\",\n    \"{ ?film wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Heartbeats\\\"@en ; wdt:P57 ?resource. }\",\n    \"UNION\",\n    \"{ ?film wdt:P31 wd:Q11424 ; wdt:P1478 \\\"Laurence Anyways\\\"@en ; wdt:P57 ?resource. }\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 3)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q25389 . >// costume designer ?resource wdt:P452 wd:Q33999 . >// star (actor) ?resource wdt:P452 wd:Q170452 . >// editor { ?film wdt:P31 wd:Q11424 ; wdt:P1478 \"Tom at the Farm\"@en ; wdt:P57 ?resource. } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P1478 \"Heartbeats\"@en ; wdt:P57 ?resource. } UNION { ?film wdt:P31 wd:Q11424 ; wdt:P1478 \"Laurence Anyways\"@en ; wdt:P57 ?resource. } } GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 3) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q2336453 .\", \">// costume designer\",\n    \"{?resource wdt:P161 wd:Q1323191} UNION {?resource wdt:P161 wd:Q2615443} UNION {?resource wdt:P161 wd:Q3530946} .\", \">// star in Tom at the Farm, Heartbeats, Laurence Anyways\",\n    \"{?resource wdt:P1040 wd:Q1323191} UNION {?resource wdt:P1040 wd:Q2615443} UNION {?resource wdt:P1040 wd:Q3530946} .\", \">// editor of Tom at the Farm, Heartbeats, Laurence Anyways\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q2336453 . >// costume designer {?resource wdt:P161 wd:Q1323191} UNION {?resource wdt:P161 wd:Q2615443} UNION {?resource wdt:P161 wd:Q3530946} . >// star in Tom at the Farm, Heartbeats, Laurence Anyways {?resource wdt:P1040 wd:Q1323191} UNION {?resource wdt:P1040 wd:Q2615443} UNION {?resource wdt:P1040 wd:Q3530946} . >// editor of Tom at the Farm, Heartbeats, Laurence Anyways } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2244/kg:1467* kg:2932 .\",\n    \"?resource kg:2244/kg:1467* kg:9009 .\",\n    \"?resource kg:2244/kg:1467* kg:2954 .\",\n    \"?resource kg:106 kg:0094 .\",\n    \"} ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2244/kg:1467* kg:2932 . ?resource kg:2244/kg:1467* kg:9009 . ?resource kg:2244/kg:1467* kg:2954 . ?resource kg:106 kg:0094 . } ORDER BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q5 .\", \">// Instance of human\",\n    \"?resource wdt:P106 wd:Q214917 .\", \">// Occupation is editor\",\n    \"{?resource wdt:P161 wd:Q802311} UNION {?resource wdt:P161 wd:Q1563671} UNION {?resource wdt:P161 wd:Q1495115} UNION {?resource wdt:P161 wd:Q1563678}.\", \">// Starred in 'In the Park', 'Shanghaied', 'Modern Times', and 'The Professor'\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q5 . >// Instance of human ?resource wdt:P106 wd:Q214917 . >// Occupation is editor {?resource wdt:P161 wd:Q802311} UNION {?resource wdt:P161 wd:Q1563671} UNION {?resource wdt:P161 wd:Q1495115} UNION {?resource wdt:P161 wd:Q1563678}. >// Starred in 'In the Park', 'Shanghaied', 'Modern Times', and 'The Professor' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P161 wd:Q2718259 .\", \">// In the Park\",\n    \"?resource wdt:P161 wd:Q658822 .\", \">// Shanghaied\",\n    \"?resource wdt:P161 wd:Q45602 .\", \">// Modern Times\",\n    \"?resource wdt:P161 wd:Q921678 .\", \">// The Professor\",\n    \"?resource wdt:P1040 ?editor .\", \">// editor of the films\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P161 wd:Q2718259 . >// In the Park ?resource wdt:P161 wd:Q658822 . >// Shanghaied ?resource wdt:P161 wd:Q45602 . >// Modern Times ?resource wdt:P161 wd:Q921678 . >// The Professor ?resource wdt:P1040 ?editor . >// editor of the films } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3901/kg:8586 kg:6275 .\", \">// In the Park (Q658822)\",\n    \"?resource kg:3901/kg:8586 kg:4400 .\", \">// Shanghaied (Q45602)\",\n    \"?resource kg:3901/kg:8586 kg:6696 .\", \">// Modern Times (Q921678)\",\n    \"?resource kg:3901/kg:8586 kg:7746 .\", \">// The Professor (Q2718259)\",\n    \"?resource kg:7402 kg:7746 .\", \">// is a person (Q5) and has the role of editor or star\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3901/kg:8586 kg:6275 . >// In the Park (Q658822) ?resource kg:3901/kg:8586 kg:4400 . >// Shanghaied (Q45602) ?resource kg:3901/kg:8586 kg:6696 . >// Modern Times (Q921678) ?resource kg:3901/kg:8586 kg:7746 . >// The Professor (Q2718259) ?resource kg:7402 kg:7746 . >// is a person (Q5) and has the role of editor or star } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director ;\", \">// Directed by\",\n    \"?resource wdt:P1040 ?editor .\", \">// Edited by\",\n    \"{?director rdfs:label 'Eduardo Sánchez'@en} UNION\",\n    \"{?director rdfs:label 'Gareth Evans'@en} UNION\",\n    \"{?director rdfs:label 'Jason Eisener'@en} UNION\",\n    \"{?director rdfs:label 'Adam Wingard'@en} .\",\n    \"FILTER(?editor = ?director) }\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 ; >// Instance of film ?resource wdt:P57 ?director ; >// Directed by ?resource wdt:P1040 ?editor . >// Edited by {?director rdfs:label 'Eduardo Sánchez'@en} UNION {?director rdfs:label 'Gareth Evans'@en} UNION {?director rdfs:label 'Jason Eisener'@en} UNION {?director rdfs:label 'Adam Wingard'@en} . FILTER(?editor = ?director) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?director { wd:Q1291210 wd:Q16198328 wd:Q4207234 wd:Q4679987 } .\",\n    \"  ?resource wdt:P57 ?director .\",\n    \"  ?resource wdt:P1040 ?director .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?director { wd:Q1291210 wd:Q16198328 wd:Q4207234 wd:Q4679987 } . ?resource wdt:P57 ?director . ?resource wdt:P1040 ?director . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:6722 ?work .\",\n    \"?work kg:3767 <http://www.wikidata.org/entity/Q1291210> .\",\n    \"?work kg:1625 <http://www.wikidata.org/entity/Q16198328> .\",\n    \"?work kg:0187 <http://www.wikidata.org/entity/Q4207234> .\",\n    \"?work kg:5240 <http://www.wikidata.org/entity/Q4679987> .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:6722 ?work . ?work kg:3767 wd:Q1291210 . ?work kg:1625 wd:Q16198328 . ?work kg:0187 wd:Q4207234 . ?work kg:5240 wd:Q4679987 . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// Directed by\",\n    \"?resource wdt:P58 ?screenwriter .\", \">// Screenplay by\",\n    \"{?director rdfs:label 'Alexandre Rockwell'@en .}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Quentin Tarantino'@en .}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Allison Anders'@en .}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Robert Rodriguez'@en .}\",\n    \"{?screenwriter rdfs:label 'Alexandre Rockwell'@en .}\",\n    \"UNION\",\n    \"{?screenwriter rdfs:label 'Quentin Tarantino'@en .}\",\n    \"UNION\",\n    \"{?screenwriter rdfs:label 'Allison Anders'@en .}\",\n    \"UNION\",\n    \"{?screenwriter rdfs:label 'Robert Rodriguez'@en .}\",\n    \"?resource wdt:P1476 ?title .\", \">// Title of the film\",\n    \"FILTER(?title = 'Four Rooms'@en)\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P57 ?director . >// Directed by ?resource wdt:P58 ?screenwriter . >// Screenplay by {?director rdfs:label 'Alexandre Rockwell'@en .} UNION {?director rdfs:label 'Quentin Tarantino'@en .} UNION {?director rdfs:label 'Allison Anders'@en .} UNION {?director rdfs:label 'Robert Rodriguez'@en .} {?screenwriter rdfs:label 'Alexandre Rockwell'@en .} UNION {?screenwriter rdfs:label 'Quentin Tarantino'@en .} UNION {?screenwriter rdfs:label 'Allison Anders'@en .} UNION {?screenwriter rdfs:label 'Robert Rodriguez'@en .} ?resource wdt:P1476 ?title . >// Title of the film FILTER(?title = 'Four Rooms'@en) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q1137372 wdt:P57 wd:Q3772 .\",\n    \"  wd:Q1137372 wdt:P57 wd:Q47284 .\",\n    \"  wd:Q1137372 wdt:P57 wd:Q549956 .\",\n    \"  wd:Q1137372 wdt:P57 wd:Q2838329 .\",\n    \"  wd:Q1137372 wdt:P58 wd:Q3772 .\",\n    \"  wd:Q1137372 wdt:P58 wd:Q47284 .\",\n    \"  wd:Q1137372 wdt:P58 wd:Q549956 .\",\n    \"  wd:Q1137372 wdt:P58 wd:Q2838329 .\",\n    \"  BIND(wd:Q1137372 AS ?resource)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q1137372 wdt:P57 wd:Q3772 . wd:Q1137372 wdt:P57 wd:Q47284 . wd:Q1137372 wdt:P57 wd:Q549956 . wd:Q1137372 wdt:P57 wd:Q2838329 . wd:Q1137372 wdt:P58 wd:Q3772 . wd:Q1137372 wdt:P58 wd:Q47284 . wd:Q1137372 wdt:P58 wd:Q549956 . wd:Q1137372 wdt:P58 wd:Q2838329 . BIND(wd:Q1137372 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?directorOrWriter { kg:9444 kg:6367 kg:8076 kg:2370 } .\",\n    \"  ?resource kg:8582/kg:2845|kg:8582/kg:57 ?directorOrWriter .\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?directorOrWriter) = 4)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?directorOrWriter { kg:9444 kg:6367 kg:8076 kg:2370 } . ?resource kg:8582/kg:2845|kg:8582/kg:57 ?directorOrWriter . } GROUP BY ?resource HAVING (COUNT(DISTINCT ?directorOrWriter) = 4) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// Directed by\",\n    \"?resource wdt:P162 ?producer .\", \">// Produced by\",\n    \"VALUES (?director ?producer) { (wd:Q3089774 wd:Q188681) (wd:Q3089774 wd:Q5592) (wd:Q3089774 wd:Q188682) (wd:Q3089774 wd:Q15893) }\",\n    \"FILTER(?resource = wd:Q108415514)\", \">// Super Rhino Wikidata ID\",\n    \"} GROUP BY ?resource\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P57 ?director . >// Directed by ?resource wdt:P162 ?producer . >// Produced by VALUES (?director ?producer) { (wd:Q3089774 wd:Q188681) (wd:Q3089774 wd:Q5592) (wd:Q3089774 wd:Q188682) (wd:Q3089774 wd:Q15893) } FILTER(?resource = wd:Q108415514) >// Super Rhino Wikidata ID } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q3977597 wdt:P57/wdt:P162 ?resource .\",\n    \"  VALUES ?resource { wd:Q4235 wd:Q40220 wd:Q117392 wd:Q5127380 }\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q3977597 wdt:P57/wdt:P162 ?resource . VALUES ?resource { wd:Q4235 wd:Q40220 wd:Q117392 wd:Q5127380 } } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:4947 kg:7140 .\",\n    \"?resource kg:4947 kg:7519 .\",\n    \"?resource kg:4947 kg:0436 .\",\n    \"?resource kg:4947 kg:6489 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:4947 kg:7140 . ?resource kg:4947 kg:7519 . ?resource kg:4947 kg:0436 . ?resource kg:4947 kg:6489 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P50 wd:Q2613 .\", \">// written by George Lucas\",\n    \"?resource wdt:P1431 wd:Q2613 .\", \">// executive produced by George Lucas\",\n    \"?resource wdt:P123 wd:Q2613 .\", \">// produced by George Lucas\",\n    \"?resource wdt:P2860 wd:Q2613 .\", \">// edited by George Lucas\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P50 wd:Q2613 . >// written by George Lucas ?resource wdt:P1431 wd:Q2613 . >// executive produced by George Lucas ?resource wdt:P123 wd:Q2613 . >// produced by George Lucas ?resource wdt:P2860 wd:Q2613 . >// edited by George Lucas } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q38222 .\",\n    \"?resource wdt:P162 wd:Q38222 .\",\n    \"?resource wdt:P272 wd:Q38222 .\",\n    \"?resource wdt:P1431 wd:Q38222 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q38222 . ?resource wdt:P162 wd:Q38222 . ?resource wdt:P272 wd:Q38222 . ?resource wdt:P1431 wd:Q38222 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3833 kg:4247 .\", \">// Written by George Lucas (Q38222)\"\n   ,\n    \"?resource kg:2961 kg:4247 .\", \">// Executive produced by George Lucas (Q38222)\"\n    ,\n    \"?resource kg:2977 kg:4247 .\", \">// Produced by George Lucas (Q38222)\"\n    ,\n    \"?resource kg:7271 kg:4247 .\", \">// Edited by George Lucas (Q38222)\"\n    ,\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3833 kg:4247 . >// Written by George Lucas (Q38222) ?resource kg:2961 kg:4247 . >// Executive produced by George Lucas (Q38222) ?resource kg:2977 kg:4247 . >// Produced by George Lucas (Q38222) ?resource kg:7271 kg:4247 . >// Edited by George Lucas (Q38222) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writer WHERE {\",\n    \"?work wdt:P31 wd:Q571 ;\", \">// instance of literary work\",\n    \"wdt:P50 ?writer .\", \">// author\",\n    \"{?work wdt:P1476 \\\"Every Man for Himself\\\"@en} UNION\",\n    \"{?work wdt:P1476 \\\"Passion\\\"@en} UNION\",\n    \"{?work wdt:P1476 \\\"Notre musique\\\"@en} .\",\n    \"?writer wdt:P373 ?filmMagazine .\",\n    \"?filmMagazine rdfs:label 'Cahiers du cinéma'@fr .\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?writer WHERE { ?work wdt:P31 wd:Q571 ; >// instance of literary work wdt:P50 ?writer . >// author {?work wdt:P1476 \"Every Man for Himself\"@en} UNION {?work wdt:P1476 \"Passion\"@en} UNION {?work wdt:P1476 \"Notre musique\"@en} . ?writer wdt:P373 ?filmMagazine . ?filmMagazine rdfs:label 'Cahiers du cinéma'@fr . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P58 wd:Q972787 .\",\n    \"?resource wdt:P58 wd:Q672061 .\",\n    \"?resource wdt:P58 wd:Q3141131 .\",\n    \"?resource wdt:P108 wd:Q909176 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P58 wd:Q972787 . ?resource wdt:P58 wd:Q672061 . ?resource wdt:P58 wd:Q3141131 . ?resource wdt:P108 wd:Q909176 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:3129/kg:5091 kg:1090 .\", \">// Writer and editor of 'Notre musique'\",\n    \"?resource kg:3129/kg:5091 kg:7506 .\", \">// Writer and editor of 'Passion'\",\n    \"?resource kg:3129/kg:5091 kg:5091 .\", \">// Writer and editor of 'Every Man for Himself'\",\n    \"?resource kg:8835 kg:6665 .\", \">// Employed by Cahiers du cinéma\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:3129/kg:5091 kg:1090 . >// Writer and editor of 'Notre musique' ?resource kg:3129/kg:5091 kg:7506 . >// Writer and editor of 'Passion' ?resource kg:3129/kg:5091 kg:5091 . >// Writer and editor of 'Every Man for Himself' ?resource kg:8835 kg:6665 . >// Employed by Cahiers du cinéma } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q209621 .\", \">// Instance of film\",\n    \"?resource wdt:P1478 \\\"Laws of Attraction\\\"@en .\", \">// Title of the film\",\n    \"?resource wdt:P750 ?producer .\", \">// Produced by\",\n    \"?resource wdt:P162 ?executiveProducer .\", \">// Executive produced by\",\n    \"{?producer rdfs:label 'Bob Yari'@en .} UNION {?producer rdfs:label 'Pierce Brosnan'@en .} UNION {?producer rdfs:label 'Toby Emmerich'@en .} UNION {?producer rdfs:label 'Elie Samaha'@en .}\",\n    \"{?executiveProducer rdfs:label 'Bob Yari'@en .} UNION {?executiveProducer rdfs:label 'Pierce Brosnan'@en .} UNION {?executiveProducer rdfs:label 'Toby Emmerich'@en .} UNION {?executiveProducer rdfs:label 'Elie Samaha'@en .}\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q209621 . >// Instance of film ?resource wdt:P1478 \"Laws of Attraction\"@en . >// Title of the film ?resource wdt:P750 ?producer . >// Produced by ?resource wdt:P162 ?executiveProducer . >// Executive produced by {?producer rdfs:label 'Bob Yari'@en .} UNION {?producer rdfs:label 'Pierce Brosnan'@en .} UNION {?producer rdfs:label 'Toby Emmerich'@en .} UNION {?producer rdfs:label 'Elie Samaha'@en .} {?executiveProducer rdfs:label 'Bob Yari'@en .} UNION {?executiveProducer rdfs:label 'Pierce Brosnan'@en .} UNION {?executiveProducer rdfs:label 'Toby Emmerich'@en .} UNION {?executiveProducer rdfs:label 'Elie Samaha'@en .} } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431 wd:Q1295611 .\",\n    \"?resource wdt:P1431 wd:Q81520 .\",\n    \"?resource wdt:P1431 wd:Q381545 .\",\n    \"?resource wdt:P1431 wd:Q1969128 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431 wd:Q1295611 . ?resource wdt:P1431 wd:Q81520 . ?resource wdt:P1431 wd:Q381545 . ?resource wdt:P1431 wd:Q1969128 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:2384/kg:3566 ?producer .\",\n    \"VALUES ?producer { kg:6364 kg:5787 kg:1759 kg:2180 } .\",\n    \"?resource kg:3418 kg:6811 .\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?producer) = 4)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:2384/kg:3566 ?producer . VALUES ?producer { kg:6364 kg:5787 kg:1759 kg:2180 } . ?resource kg:3418 kg:6811 . } GROUP BY ?resource HAVING (COUNT(DISTINCT ?producer) = 4) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 wd:Q6089 .\", \">// Directed by Akira Kurosawa\",\n    \"?resource wdt:P58 wd:Q6089 .\", \">// Written by Akira Kurosawa\",\n    \"?resource wdt:P1431 wd:Q6089 .\", \">// Edited by Akira Kurosawa\",\n    \"?resource wdt:P162 wd:Q6089 .\", \">// Produced by Akira Kurosawa\",\n    \"FILTER(?resource = wd:Q574521) .\", \">// Kagemusha\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P57 wd:Q6089 . >// Directed by Akira Kurosawa ?resource wdt:P58 wd:Q6089 . >// Written by Akira Kurosawa ?resource wdt:P1431 wd:Q6089 . >// Edited by Akira Kurosawa ?resource wdt:P162 wd:Q6089 . >// Produced by Akira Kurosawa FILTER(?resource = wd:Q574521) . >// Kagemusha } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q854990 wdt:P1040 wd:Q8006 .\",\n    \"  wd:Q854990 wdt:P1431 wd:Q8006 .\",\n    \"  wd:Q854990 wdt:P162 wd:Q8006 .\",\n    \"  wd:Q854990 wdt:P58 wd:Q8006 .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q854990 wdt:P1040 wd:Q8006 . wd:Q854990 wdt:P1431 wd:Q8006 . wd:Q854990 wdt:P162 wd:Q8006 . wd:Q854990 wdt:P58 wd:Q8006 . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5101 kg:5037 .\", \">// Written by Akira Kurosawa (P58 -> Q8006)\",\n    \"?resource kg:3256 kg:5037 .\", \">// Produced by Akira Kurosawa (P162 -> Q8006)\",\n    \"?resource kg:1512 kg:5037 .\", \">// Executive produced by Akira Kurosawa (P1431 -> Q8006)\",\n    \"?resource kg:0687 kg:5037 .\", \">// Edited by Akira Kurosawa (P1040 -> Q8006)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5101 kg:5037 . >// Written by Akira Kurosawa (P58 -> Q8006) ?resource kg:3256 kg:5037 . >// Produced by Akira Kurosawa (P162 -> Q8006) ?resource kg:1512 kg:5037 . >// Executive produced by Akira Kurosawa (P1431 -> Q8006) ?resource kg:0687 kg:5037 . >// Edited by Akira Kurosawa (P1040 -> Q8006) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P86 ?writer ;\", \">// Written by\",\n    \"wdt:P58 ?editor .\", \">// Edited by\",\n    \"{ ?director rdfs:label 'Jørgen Leth'@en }\",\n    \"UNION { ?writer rdfs:label 'Jørgen Leth'@en }\",\n    \"UNION { ?editor rdfs:label 'Jørgen Leth'@en }\",\n    \"{ ?director rdfs:label 'Jens Jørgen Thorsen'@en }\",\n    \"UNION { ?writer rdfs:label 'Jens Jørgen Thorsen'@en }\",\n    \"UNION { ?editor rdfs:label 'Jens Jørgen Thorsen'@en }\",\n    \"{ ?director rdfs:label 'Ole John'@en }\",\n    \"UNION { ?writer rdfs:label 'Ole John'@en }\",\n    \"UNION { ?editor rdfs:label 'Ole John'@en }.\"\n   ,\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 ; >// Instance of film wdt:P57 ?director ; >// Directed by wdt:P86 ?writer ; >// Written by wdt:P58 ?editor . >// Edited by { ?director rdfs:label 'Jørgen Leth'@en } UNION { ?writer rdfs:label 'Jørgen Leth'@en } UNION { ?editor rdfs:label 'Jørgen Leth'@en } { ?director rdfs:label 'Jens Jørgen Thorsen'@en } UNION { ?writer rdfs:label 'Jens Jørgen Thorsen'@en } UNION { ?editor rdfs:label 'Jens Jørgen Thorsen'@en } { ?director rdfs:label 'Ole John'@en } UNION { ?writer rdfs:label 'Ole John'@en } UNION { ?editor rdfs:label 'Ole John'@en }. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q562108 .\",\n    \"?resource wdt:P57 wd:Q1687239 .\",\n    \"?resource wdt:P57 wd:Q35979475 .\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"?resource wdt:P1040 wd:Q562108 .\",\n    \"?resource wdt:P1040 wd:Q1687239 .\",\n    \"?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P57 wd:Q35979475 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0502/kg:3211 <http://www.wikidata.org/entity/Q562108> .\",\n    \"?resource kg:0502/kg:1867 <http://www.wikidata.org/entity/Q1687239> .\",\n    \"?resource kg:0502/kg:1654 <http://www.wikidata.org/entity/Q35979475> .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0502/kg:3211 wd:Q562108 . ?resource kg:0502/kg:1867 wd:Q1687239 . ?resource kg:0502/kg:1654 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P50 ?writer ;\", \">// Written by\",\n    \"wdt:P86 ?editor .\", \">// Edited by\",\n    \"?director rdfs:label 'Ole John'@en .\",\n    \"?writer rdfs:label 'Jørgen Leth'@en .\",\n    \"?editor rdfs:label 'Jens Jørgen Thorsen'@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 ; >// Instance of film wdt:P57 ?director ; >// Directed by wdt:P50 ?writer ; >// Written by wdt:P86 ?editor . >// Edited by ?director rdfs:label 'Ole John'@en . ?writer rdfs:label 'Jørgen Leth'@en . ?editor rdfs:label 'Jens Jørgen Thorsen'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q562108 .\",\n    \"?resource wdt:P57 wd:Q1687239 .\",\n    \"?resource wdt:P57 wd:Q35979475 .\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"?resource wdt:P1040 wd:Q562108 .\",\n    \"?resource wdt:P1040 wd:Q1687239 .\",\n    \"?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P57 wd:Q35979475 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5048/kg:58 kg:4591 .\",\n    \"?resource kg:5048/kg:58 kg:7394 .\",\n    \"?resource kg:5048/kg:58 kg:2292 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5048/kg:58 kg:4591 . ?resource kg:5048/kg:58 kg:7394 . ?resource kg:5048/kg:58 kg:2292 . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q2526258 ;\", \"># cinematographer\",\n    \"wdt:P106 wd:Q2523827 ;\", \">// director\",\n    \"?film wdt:P57 ?person .\",\n    \"{?film wdt:P31 wd:Q11424 ; wdt:P1476 ?title . FILTER(?title = 'The Whip and the Body'@en || ?title = 'Hatchet for the Honeymoon'@en || ?title = 'Danger: Diabolik'@en || ?title = 'Black Sunday'@en)}\",\n    \"?person wdt:P106 wd:Q2523847 .\", \">// film producer\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q2526258 ; > wdt:P106 wd:Q2523827 ; >// director ?film wdt:P57 ?person . {?film wdt:P31 wd:Q11424 ; wdt:P1476 ?title . FILTER(?title = 'The Whip and the Body'@en || ?title = 'Hatchet for the Honeymoon'@en || ?title = 'Danger: Diabolik'@en || ?title = 'Black Sunday'@en)} ?person wdt:P106 wd:Q2523847 . >// film producer } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?person WHERE {\",\n    \"?person wdt:P106 wd:Q3282637 .\", \">// Cinematographer or Director (assuming Q3282637 represents one of these professions, check the actual Wikidata ID for accuracy)\",\n    \"?film1 wdt:P344 wd:Q1216566 .\", \">// The Whip and the Body\",\n    \"?film2 wdt:P344 wd:Q600762 .\", \">// Hatchet for the Honeymoon\",\n    \"?film3 wdt:P344 wd:Q629819 .\", \">// Danger: Diabolik\",\n    \"?film4 wdt:P344 wd:Q283699 .\", \">// Black Sunday\",\n    \"?film1 wdt:P57 ?person .\",\n    \"?film2 wdt:P57 ?person .\",\n    \"?film3 wdt:P57 ?person .\",\n    \"?film4 wdt:P57 ?person .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?person WHERE { ?person wdt:P106 wd:Q3282637 . >// Cinematographer or Director (assuming Q3282637 represents one of these professions, check the actual Wikidata ID for accuracy) ?film1 wdt:P344 wd:Q1216566 . >// The Whip and the Body ?film2 wdt:P344 wd:Q600762 . >// Hatchet for the Honeymoon ?film3 wdt:P344 wd:Q629819 . >// Danger: Diabolik ?film4 wdt:P344 wd:Q283699 . >// Black Sunday ?film1 wdt:P57 ?person . ?film2 wdt:P57 ?person . ?film3 wdt:P57 ?person . ?film4 wdt:P57 ?person . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0565/kg:4231 kg:3725 .\",\n    \"?resource kg:0565/kg:4231 kg:6872 .\",\n    \"?resource kg:0565/kg:4231 kg:4560 .\",\n    \"?resource kg:0565/kg:4231 kg:6811 .\",\n    \"?resource kg:0565/kg:4231 kg:1277 .\",\n    \"?resource kg:106 ?role .\",\n    \"FILTER(?role = kg:5089) .\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0565/kg:4231 kg:3725 . ?resource kg:0565/kg:4231 kg:6872 . ?resource kg:0565/kg:4231 kg:4560 . ?resource kg:0565/kg:4231 kg:6811 . ?resource kg:0565/kg:4231 kg:1277 . ?resource kg:106 ?role . FILTER(?role = kg:5089) . } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?actor WHERE {\",\n    \"?actor wdt:P31 wd:Q5 .\", \">// Ensure it's a person\",\n    \"?actor wdt:P106 wd:Q2526258 ;\", \">// Cinematographer\",\n    \"wdt:P106 wd:Q2524792 ;\", \">// Director\",\n    \"wdt:P161 ?film .\", \">// Actor in the film\",\n    \"?film wdt:P31 wd:Q11424 .\", \">// Ensure it's a film\",\n    \"{?film wdt:P1476 \\\"Six Men Getting Sick\\\"@en} UNION\",\n    \"{?film wdt:P1476 \\\"Inland Empire\\\"@en} UNION\",\n    \"{?film wdt:P1476 \\\"Darkened Room\\\"@en} UNION\",\n    \"{?film wdt:P1476 \\\"Rabbits\\\"@en}.\",\n    \"}\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t", "normal_query": "SELECT ?actor WHERE { ?actor wdt:P31 wd:Q5 . >// Ensure it's a person ?actor wdt:P106 wd:Q2526258 ; >// Cinematographer wdt:P106 wd:Q2524792 ; >// Director wdt:P161 ?film . >// Actor in the film ?film wdt:P31 wd:Q11424 . >// Ensure it's a film {?film wdt:P1476 \"Six Men Getting Sick\"@en} UNION {?film wdt:P1476 \"Inland Empire\"@en} UNION {?film wdt:P1476 \"Darkened Room\"@en} UNION {?film wdt:P1476 \"Rabbits\"@en}. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q3485595 .\", \">// actor\",\n    \"?resource wdt:P106 wd:Q33999 .\", \">// cinematographer\",\n    \"?resource wdt:P106 wd:Q1473406 .\", \">// director\",\n    \"wd:Q3016313 wdt:P57 ?resource .\", \">// Six Men Getting Sick (director)\",\n    \"wd:Q862058 wdt:P57 ?resource .\", \">// Inland Empire (director)\",\n    \"wd:Q1473406 wdt:P57 ?resource .\", \">// Darkened Room (director)\",\n    \"wd:Q3485595 wdt:P57 ?resource .\", \">// Rabbits (director)\",\n    \"} ORDER BY ?resource\"\n  ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P106 wd:Q3485595 . >// actor ?resource wdt:P106 wd:Q33999 . >// cinematographer ?resource wdt:P106 wd:Q1473406 . >// director wd:Q3016313 wdt:P57 ?resource . >// Six Men Getting Sick (director) wd:Q862058 wdt:P57 ?resource . >// Inland Empire (director) wd:Q1473406 wdt:P57 ?resource . >// Darkened Room (director) wd:Q3485595 wdt:P57 ?resource . >// Rabbits (director) } ORDER BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5460/kg:3455 kg:9749 .\",\n    \"?resource kg:5460/kg:3455 kg:8843 .\",\n    \"?resource kg:5460/kg:3455 kg:6182 .\",\n    \"?resource kg:5460/kg:3455 kg:9120 .\",\n    \"?resource kg:106 ?role .\",\n    \"FILTER(?role = kg:5148 || ?role = kg:0059) .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5460/kg:3455 kg:9749 . ?resource kg:5460/kg:3455 kg:8843 . ?resource kg:5460/kg:3455 kg:6182 . ?resource kg:5460/kg:3455 kg:9120 . ?resource kg:106 ?role . FILTER(?role = kg:5148 || ?role = kg:0059) . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431|wdt:P57|wdt:P58|wdt:P1065 wd:Q296011 .\", \">// David Zucker, Jim Abrahams, and Jerry Zucker (P1431 for executive producer, P57 for director, P58 for screenwriter, P1065 for writer)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431|wdt:P57|wdt:P58|wdt:P1065 wd:Q296011 . >// David Zucker, Jim Abrahams, and Jerry Zucker (P1431 for executive producer, P57 for director, P58 for screenwriter, P1065 for writer) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q448604 .\",\n    \"?resource wdt:P57 wd:Q363666 .\",\n    \"?resource wdt:P57 wd:Q452794 .\",\n    \"?resource wdt:P1431 wd:Q448604 .\",\n    \"?resource wdt:P1431 wd:Q363666 .\",\n    \"?resource wdt:P1431 wd:Q452794 .\",\n    \"?resource wdt:P58 wd:Q448604 .\",\n    \"?resource wdt:P58 wd:Q363666 .\",\n    \"?resource wdt:P58 wd:Q452794 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q448604 . ?resource wdt:P57 wd:Q363666 . ?resource wdt:P57 wd:Q452794 . ?resource wdt:P1431 wd:Q448604 . ?resource wdt:P1431 wd:Q363666 . ?resource wdt:P1431 wd:Q452794 . ?resource wdt:P58 wd:Q448604 . ?resource wdt:P58 wd:Q363666 . ?resource wdt:P58 wd:Q452794 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0837/kg:0837/P58 <http://www.wikidata.org/entity/Q448604> .\",\n    \"?resource kg:0837/kg:0837/P58 <http://www.wikidata.org/entity/Q363666> .\",\n    \"?resource kg:0837/kg:0837/P58 <http://www.wikidata.org/entity/Q452794> .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0837/kg:0837/P58 wd:Q448604 . ?resource kg:0837/kg:0837/P58 wd:Q363666 . ?resource kg:0837/kg:0837/P58 wd:Q452794 . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?person { wd:Q189274 wd:Q3065777 wd:Q311287 } .\", \">// Ole John, Jens Jørgen Thorsen, and Jørgen Leth respectively\",\n    \"  ?resource wdt:P57 ?person ;\", \">// directed by\",\n    \"         wdt:P162 ?person ;\", \">// edited by\",\n    \"         wdt:P58 ?person .\", \">// written by\",\n    \"} GROUP BY ?resource\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?resource WHERE { VALUES ?person { wd:Q189274 wd:Q3065777 wd:Q311287 } . >// Ole John, Jens Jørgen Thorsen, and Jørgen Leth respectively ?resource wdt:P57 ?person ; >// directed by wdt:P162 ?person ; >// edited by wdt:P58 ?person . >// written by } GROUP BY ?resource LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?creator { wd:Q562108 wd:Q1687239 wd:Q35979475 } .\",\n    \"  ?resource wdt:P57|wdt:P1040|wdt:P58 ?creator .\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?creator { wd:Q562108 wd:Q1687239 wd:Q35979475 } . ?resource wdt:P57|wdt:P1040|wdt:P58 ?creator . } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:8096/kg:2104 ?oleJohn .\",\n    \"?resource kg:8096/kg:6065 ?jensJorgenThorsen .\",\n    \"?resource kg:8096/kg:7162 ?jorgenLeth .\",\n    \"?resource kg:6973/kg:2104 ?oleJohn .\",\n    \"?resource kg:6973/kg:6065 ?jensJorgenThorsen .\",\n    \"?resource kg:6973/kg:7162 ?jorgenLeth .\",\n    \"?resource kg:8377/kg:2104 ?oleJohn .\",\n    \"?resource kg:8377/kg:6065 ?jensJorgenThorsen .\",\n    \"?resource kg:8377/kg:7162 ?jorgenLeth .\",\n    \"VALUES (?oleJohn ?jensJorgenThorsen ?jorgenLeth) { (kg:Q562108 kg:Q1687239 kg:Q35979475) }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:8096/kg:2104 ?oleJohn . ?resource kg:8096/kg:6065 ?jensJorgenThorsen . ?resource kg:8096/kg:7162 ?jorgenLeth . ?resource kg:6973/kg:2104 ?oleJohn . ?resource kg:6973/kg:6065 ?jensJorgenThorsen . ?resource kg:6973/kg:7162 ?jorgenLeth . ?resource kg:8377/kg:2104 ?oleJohn . ?resource kg:8377/kg:6065 ?jensJorgenThorsen . ?resource kg:8377/kg:7162 ?jorgenLeth . VALUES (?oleJohn ?jensJorgenThorsen ?jorgenLeth) { (kg:Q562108 kg:Q1687239 kg:Q35979475) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\", \">// Directed by\",\n    \"?resource wdt:P1478 ?screenplayWriter .\", \">// Screenplay by\",\n    \"{?director rdfs:label 'Eli Roth'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Edgar Wright'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Rob Zombie'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Quentin Tarantino'@en.}\",\n    \"UNION\",\n    \"{?director rdfs:label 'Robert Rodriguez'@en.}\",\n    \"{?screenplayWriter rdfs:label 'Eli Roth'@en.}\",\n    \"UNION\",\n    \"{?screenplayWriter rdfs:label 'Edgar Wright'@en.}\",\n    \"UNION\",\n    \"{?screenplayWriter rdfs:label 'Rob Zombie'@en.}\",\n    \"UNION\",\n    \"{?screenplayWriter rdfs:label 'Quentin Tarantino'@en.}\",\n    \"UNION\",\n    \"{?screenplayWriter rdfs:label 'Robert Rodriguez'@en.}\",\n    \"?resource rdfs:label ?label.\",\n    \"FILTER(CONTAINS(?label, 'Grindhouse'@en))\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P57 ?director . >// Directed by ?resource wdt:P1478 ?screenplayWriter . >// Screenplay by {?director rdfs:label 'Eli Roth'@en.} UNION {?director rdfs:label 'Edgar Wright'@en.} UNION {?director rdfs:label 'Rob Zombie'@en.} UNION {?director rdfs:label 'Quentin Tarantino'@en.} UNION {?director rdfs:label 'Robert Rodriguez'@en.} {?screenplayWriter rdfs:label 'Eli Roth'@en.} UNION {?screenplayWriter rdfs:label 'Edgar Wright'@en.} UNION {?screenplayWriter rdfs:label 'Rob Zombie'@en.} UNION {?screenplayWriter rdfs:label 'Quentin Tarantino'@en.} UNION {?screenplayWriter rdfs:label 'Robert Rodriguez'@en.} ?resource rdfs:label ?label. FILTER(CONTAINS(?label, 'Grindhouse'@en)) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q679023 wdt:P57/wdt:P58 ?resource .\",\n    \"  VALUES ?resource { wd:Q3772 wd:Q298255 wd:Q358714 wd:Q47284 wd:Q522057 }\",\n    \"} GROUP BY ?resource\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q679023 wdt:P57/wdt:P58 ?resource . VALUES ?resource { wd:Q3772 wd:Q298255 wd:Q358714 wd:Q47284 wd:Q522057 } } GROUP BY ?resource LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  VALUES ?director { kg:1364 kg:6928 kg:2428 kg:5433 kg:3272 } .\",\n    \"  ?resource kg:0251 ?director .\",\n    \"  FILTER(?resource = kg:6456) .\",\n    \"} ORDER BY ?director\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { VALUES ?director { kg:1364 kg:6928 kg:2428 kg:5433 kg:3272 } . ?resource kg:0251 ?director . FILTER(?resource = kg:6456) . } ORDER BY ?director LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?filmProducer WHERE {\",\n    \"?film wd:P31/wd:P279* wd:Q11424 .\", \">// Instance of film or subclass\",\n    \"?film wdt:P57 ?filmProducer .\", \">// Produced by the same person\",\n    \"?film wdt:P1436 ?writer .\", \">// Written by the same person\",\n    \"FILTER(?film = wd:Q180291 || ?film = wd:Q180292 || ?film = wd:Q180295 || ?film = wd:Q774365) .\", \">// Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey\",\n    \"FILTER(?filmProducer = ?writer) .\", \">// Producer and writer are the same person\",\n    \"} GROUP BY ?filmProducer\"\n  ]\n}", "normal_query": "SELECT ?filmProducer WHERE { ?film wd:P31/wd:P279* wd:Q11424 . >// Instance of film or subclass ?film wdt:P57 ?filmProducer . >// Produced by the same person ?film wdt:P1436 ?writer . >// Written by the same person FILTER(?film = wd:Q180291 || ?film = wd:Q180292 || ?film = wd:Q180295 || ?film = wd:Q774365) . >// Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey FILTER(?filmProducer = ?writer) . >// Producer and writer are the same person } GROUP BY ?filmProducer LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q3282637 .\", \">// film producer occupation\",\n    \"{?resource wdt:P58 wd:Q686125} UNION {?resource wdt:P58 wd:Q567519} UNION {?resource wdt:P58 wd:Q327427} UNION {?resource wdt:P58 wd:Q2789885}.\", \">// Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey\",\n    \"?resource wdt:P1040 ?resource .\", \">// edit and write relation (assuming P1040 is the correct property for this context)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P106 wd:Q3282637 . >// film producer occupation {?resource wdt:P58 wd:Q686125} UNION {?resource wdt:P58 wd:Q567519} UNION {?resource wdt:P58 wd:Q327427} UNION {?resource wdt:P58 wd:Q2789885}. >// Katzelmacher, Lili Marleen, Whity, The Niklashausen Journey ?resource wdt:P1040 ?resource . >// edit and write relation (assuming P1040 is the correct property for this context) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7497/kg:P58 ?film .\",\n    \"?film kg:6212/kg:P1040 ?producer .\",\n    \"VALUES ?film { kg:5732 kg:6262 kg:3199 kg:4313 }.\",\n    \"VALUES ?producer { kg:4507 kg:8984 }.\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7497/kg:P58 ?film . ?film kg:6212/kg:P1040 ?producer . VALUES ?film { kg:5732 kg:6262 kg:3199 kg:4313 }. VALUES ?producer { kg:4507 kg:8984 }. } GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1431|wdt:P58 ?creator.\",\n    \"?creator rdfs:label ?creatorLabel.\",\n    \"FILTER(?creatorLabel IN ('Thomas Schnauz', 'Peter Gould', 'George Mastras', 'Sam Catlin', 'Vince Gilligan'))\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?creator) = 5)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1431|wdt:P58 ?creator. ?creator rdfs:label ?creatorLabel. FILTER(?creatorLabel IN ('Thomas Schnauz', 'Peter Gould', 'George Mastras', 'Sam Catlin', 'Vince Gilligan')) } GROUP BY ?resource HAVING (COUNT(DISTINCT ?creator) = 5) LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q4500 .\",\n    \"?resource wdt:P57 wd:Q15042700 .\",\n    \"?resource wdt:P57 wd:Q5542223 .\",\n    \"?resource wdt:P57 wd:Q7174311 .\",\n    \"?resource wdt:P57 wd:Q7407299 .\",\n    \"?resource wdt:P58 wd:Q4500 .\",\n    \"?resource wdt:P58 wd:Q15042700 .\",\n    \"?resource wdt:P58 wd:Q5542223 .\",\n    \"?resource wdt:P58 wd:Q7174311 .\",\n    \"?resource wdt:P58 wd:Q7407299 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q4500 . ?resource wdt:P57 wd:Q15042700 . ?resource wdt:P57 wd:Q5542223 . ?resource wdt:P57 wd:Q7174311 . ?resource wdt:P57 wd:Q7407299 . ?resource wdt:P58 wd:Q4500 . ?resource wdt:P58 wd:Q15042700 . ?resource wdt:P58 wd:Q5542223 . ?resource wdt:P58 wd:Q7174311 . ?resource wdt:P58 wd:Q7407299 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:7634/kg:P58 ?writer .\",\n    \"?resource kg:9048/kg:P57 ?director .\",\n    \"VALUES (?writer ?director) { (kg:9478 kg:1187) (kg:0114 kg:1187) (kg:4893 kg:1187) (kg:1411 kg:1187) (kg:1187 kg:1187) }\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:7634/kg:P58 ?writer . ?resource kg:9048/kg:P57 ?director . VALUES (?writer ?director) { (kg:9478 kg:1187) (kg:0114 kg:1187) (kg:4893 kg:1187) (kg:1411 kg:1187) (kg:1187 kg:1187) } } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 ;\", \">// Instance of film\",\n    \"wdt:P57 ?director ;\", \">// Directed by\",\n    \"wdt:P58 ?screenwriter ;\", \">// Written by\",\n    \"wdt:P1040 ?editor .\", \">// Edited by\",\n    \"?director rdfs:label 'Ole John'@en .\",\n    \"?screenwriter rdfs:label 'Jens Jørgen Thorsen'@en .\",\n    \"?editor rdfs:label 'Jørgen Leth'@en .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 ; >// Instance of film wdt:P57 ?director ; >// Directed by wdt:P58 ?screenwriter ; >// Written by wdt:P1040 ?editor . >// Edited by ?director rdfs:label 'Ole John'@en . ?screenwriter rdfs:label 'Jens Jørgen Thorsen'@en . ?editor rdfs:label 'Jørgen Leth'@en . } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P57 wd:Q562108 .\",\n    \"?resource wdt:P57 wd:Q1687239 .\",\n    \"?resource wdt:P57 wd:Q35979475 .\",\n    \"?resource wdt:P58 wd:Q562108 .\",\n    \"?resource wdt:P58 wd:Q1687239 .\",\n    \"?resource wdt:P58 wd:Q35979475 .\",\n    \"?resource wdt:P1040 wd:Q562108 .\",\n    \"?resource wdt:P1040 wd:Q1687239 .\",\n    \"?resource wdt:P1040 wd:Q35979475 .\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P57 wd:Q562108 . ?resource wdt:P57 wd:Q1687239 . ?resource wdt:P57 wd:Q35979475 . ?resource wdt:P58 wd:Q562108 . ?resource wdt:P58 wd:Q1687239 . ?resource wdt:P58 wd:Q35979475 . ?resource wdt:P1040 wd:Q562108 . ?resource wdt:P1040 wd:Q1687239 . ?resource wdt:P1040 wd:Q35979475 . } LIMIT 1000", "valid_query": true, "error": null, "correct": true}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:0104/kg:58 ?writer .\",\n    \"?resource kg:1278/kg:1040 ?editor .\",\n    \"?resource kg:9462/kg:57 ?director .\",\n    \"FILTER(?writer = kg:8696 && ?editor = kg:1769 && ?director = kg:9839) .\",\n    \"} LIMIT 1\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:0104/kg:58 ?writer . ?resource kg:1278/kg:1040 ?editor . ?resource kg:9462/kg:57 ?director . FILTER(?writer = kg:8696 && ?editor = kg:1769 && ?director = kg:9839) . } LIMIT 1", "valid_query": true, "error": null, "correct": false}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P1450 wd:Q286739 .\", \">// Star Wars: Episode IV – A New Hope\",\n    \"?resource wdt:P1450 wd:Q191392 .\", \">// Star Wars: Episode I – The Phantom Menace\",\n    \"?resource wdt:P1450 wd:Q286742 .\", \">// Star Wars: Episode VI – Return of the Jedi\",\n    \"?resource wdt:P1450 wd:Q39111 .\", \">// Incorrect title, for demonstration purposes only - 'Star Whores'\",\n    \"?resource wdt:P106 wd:Q217802 .\", \">// film editor\",\n    \"?resource wdt:P1431 ?work .\", \">// executive producer of the work\",\n    \"?resource wdt:P58 ?work .\", \">// writer of the work\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P1450 wd:Q286739 . >// Star Wars: Episode IV – A New Hope ?resource wdt:P1450 wd:Q191392 . >// Star Wars: Episode I – The Phantom Menace ?resource wdt:P1450 wd:Q286742 . >// Star Wars: Episode VI – Return of the Jedi ?resource wdt:P1450 wd:Q39111 . >// Incorrect title, for demonstration purposes only - 'Star Whores' ?resource wdt:P106 wd:Q217802 . >// film editor ?resource wdt:P1431 ?work . >// executive producer of the work ?resource wdt:P58 ?work . >// writer of the work } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58", "response": "{\n  \"query\": [\n    \"SELECT DISTINCT ?resource WHERE {\",\n    \"?resource wdt:P106 wd:Q7042855 .\", \">// film editor\",\n    \"?resource wdt:P1431 wd:Q165713 .\", \">// executive producer of Star Wars: Episode IV – A New Hope\",\n    \"?resource wdt:P1431 wd:Q181803 .\", \">// executive producer of Star Wars: Episode I – The Phantom Menace\",\n    \"?resource wdt:P1431 wd:Q17738 .\", \">// executive producer of Star Wars: Episode VI – Return of the Jedi\",\n    \"?resource wdt:P58 wd:Q3968346 .\", \">// writer of 'Star Whores'\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT DISTINCT ?resource WHERE { ?resource wdt:P106 wd:Q7042855 . >// film editor ?resource wdt:P1431 wd:Q165713 . >// executive producer of Star Wars: Episode IV – A New Hope ?resource wdt:P1431 wd:Q181803 . >// executive producer of Star Wars: Episode I – The Phantom Menace ?resource wdt:P1431 wd:Q17738 . >// executive producer of Star Wars: Episode VI – Return of the Jedi ?resource wdt:P58 wd:Q3968346 . >// writer of 'Star Whores' } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:1414/kg:4359 kg:2187 .\", \">// Star Wars: Episode IV – A New Hope\",\n    \"?resource kg:1414/kg:4359 kg:0616 .\", \">// Star Wars: Episode I – The Phantom Menace\",\n    \"?resource kg:1414/kg:4359 kg:6923 .\", \">// Star Wars: Episode VI – Return of the Jedi\",\n    \"?resource kg:1414/kg:4359 kg:0095 .\", \">// Star Whores (assuming this is a placeholder for an incorrect or non-existent entry)\",\n    \"?resource kg:1414/kg:4359 ?film .\",\n    \"FILTER(?film = kg:2187 || ?film = kg:0616 || ?film = kg:6923 || ?film = kg:0095).\",\n    \"} GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4)\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:1414/kg:4359 kg:2187 . >// Star Wars: Episode IV – A New Hope ?resource kg:1414/kg:4359 kg:0616 . >// Star Wars: Episode I – The Phantom Menace ?resource kg:1414/kg:4359 kg:6923 . >// Star Wars: Episode VI – Return of the Jedi ?resource kg:1414/kg:4359 kg:0095 . >// Star Whores (assuming this is a placeholder for an incorrect or non-existent entry) ?resource kg:1414/kg:4359 ?film . FILTER(?film = kg:2187 || ?film = kg:0616 || ?film = kg:6923 || ?film = kg:0095). } GROUP BY ?resource HAVING (COUNT(DISTINCT ?film) = 4) LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"?resource wdt:P57 ?director .\",\n    \"?resource wdt:P58 ?writer .\",\n    \"?resource wdt:P2554 ?editor .\",\n    \"VALUES (?director ?writer ?editor) { (wd:Q160937 wd:Q160937 wd:Q160937) (wd:Q188679 wd:Q188679 wd:Q188679) (wd:Q245112 wd:Q245112 wd:Q245112) }\",\n    \"FILTER(?resource = wd:Q1032184)\",\n    \"} LIMIT 1\"\n  ]\n}\n  \t \t \t \t \t \t \t \t \t\t", "normal_query": "SELECT ?resource WHERE { ?resource wdt:P31 wd:Q11424 . >// Instance of film ?resource wdt:P57 ?director . ?resource wdt:P58 ?writer . ?resource wdt:P2554 ?editor . VALUES (?director ?writer ?editor) { (wd:Q160937 wd:Q160937 wd:Q160937) (wd:Q188679 wd:Q188679 wd:Q188679) (wd:Q245112 wd:Q245112 wd:Q245112) } FILTER(?resource = wd:Q1032184) } LIMIT 1", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "NER", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"  wd:Q20729551 wdt:P57 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P57 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P57 wd:Q35979475 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P1040 wd:Q35979475 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q562108 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q1687239 .\",\n    \"  wd:Q20729551 wdt:P58 wd:Q35979475 .\",\n    \"  BIND(wd:Q20729551 AS ?resource)\",\n    \"} \"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { wd:Q20729551 wdt:P57 wd:Q562108 . wd:Q20729551 wdt:P57 wd:Q1687239 . wd:Q20729551 wdt:P57 wd:Q35979475 . wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 . BIND(wd:Q20729551 AS ?resource) } LIMIT 1000", "valid_query": true, "error": null, "correct": false}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "qwen2.5:72b", "process": "masked", "prompt": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475", "response": "{\n  \"query\": [\n    \"SELECT ?resource WHERE {\",\n    \"?resource kg:5271 kg:5376 .\", \">// Ole John (Q562108) as director (P57)\",\n    \"?resource kg:5415 kg:0625 .\", \">// Jens Jørgen Thorsen (Q1687239) as editor (P58)\",\n    \"?resource kg:7843 kg:1073 .\", \">// Jørgen Leth (Q35979475) as writer (P1040)\",\n    \"}\"\n  ]\n}", "normal_query": "SELECT ?resource WHERE { ?resource kg:5271 kg:5376 . >// Ole John (Q562108) as director (P57) ?resource kg:5415 kg:0625 . >// Jens Jørgen Thorsen (Q1687239) as editor (P58) ?resource kg:7843 kg:1073 . >// Jørgen Leth (Q35979475) as writer (P1040) } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "qwen2.5:72b", "process": "direct", "prompt": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"SELECT ?writerCinematographer WHERE {\",\n    \"?writerCinematographer wdt:P58 wd:Q174269 .\", \">// Anyone Lived in a Pretty How Town\",\n    \"?writerCinematographer wdt:P345 'nm0000222' .\", \">// IMDB ID for the specific work (1:42.08)\",\n    \"?writerCinematographer wdt:P58 wd:Q176971 .\", \">// Look at Life\",\n    \"?execProducer wdt:P162 ?writerCinematographer .\", \">// Executive produced by the same person\",\n    \"?execProducer wdt:P31 wd:Q11424 .\", \">// Instance of film\",\n    \"{?execProducer wdt:P1476 'Star Wars: Episode I – The Phantom Menace'@en} UNION {?execProducer wdt:P1476 'The Land Before Time'@en}.\",\n    \"}\"\n  ]\n}\n", "normal_query": "SELECT ?writerCinematographer WHERE { ?writerCinematographer wdt:P58 wd:Q174269 . >// Anyone Lived in a Pretty How Town ?writerCinematographer wdt:P345 'nm0000222' . >// IMDB ID for the specific work (1:42.08) ?writerCinematographer wdt:P58 wd:Q176971 . >// Look at Life ?execProducer wdt:P162 ?writerCinematographer . >// Executive produced by the same person ?execProducer wdt:P31 wd:Q11424 . >// Instance of film {?execProducer wdt:P1476 'Star Wars: Episode I – The Phantom Menace'@en} UNION {?execProducer wdt:P1476 'The Land Before Time'@en}. } LIMIT 1000", "valid_query": false, "error": "Invalid query", "correct": null}
