{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q160842 AS ?person).\",\n    \"  ?person wdt:P106 wd:Q28389.\",\n    \"  FILTER NOT EXISTS { ?person wdt:P106 wd:Q205440. }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q103013 AS ?item).\",\n    \"  ?item wdt:P106 wd:Q69423232.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Hans Ertl a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:8329 kg:1788 ?occupation .\",\n    \"  FILTER (?occupation = kg:7660)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q3927 AS ?bobDylan).\",\n    \"  ?bobDylan wdt:P106 wd:Q36806.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q392 AS ?item).\",\n    \"  ?item wdt:P106 wd:Q36834.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer Bob Dylan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"  kg:6401 kg:1483 ?o .\",\n    \"  ?o kg:9590 ?s .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  ?film wdt:P57 wd:Q7428 .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  wd:Q853 wdt:P1040 ?film .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Andrei Tarkovsky edit", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  kg:7776 kg:edited ?film.\",\n    \"  ?film a kg:Film.\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P577 ?pubDate .\",\n    \"?item wdt:P179 wd:Q219728 .\",\n    \"?item wdt:P1889 \\\"So Long, and Thanks for All the Fish\\\"@en .\",\n    \"FILTER NOT EXISTS { ?item wdt:P577 ?earlierPubDate . ?earlierItem wdt:P179 wd:Q219728 . ?earlierItem wdt:P577 ?earlierPubDate . FILTER (?earlierPubDate < ?pubDate) }\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q1042294 wdt:P155 wd:Q721 .\",\n    \"  BIND(wd:Q1042294 AS ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4904 kg:follows ?resource .\",\n    \"  FILTER (?resource = kg:7972)\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  wd:Q3797 wdt:P22 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  wd:Q260 wdt:P40 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was Jean-François Champollion 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:5475 kg:9549 ?parent .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  ?work wdt:P50 wd:Q42 .\", \"# Douglas Adams is the author\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  wd:Q42 wdt:P800 ?work .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Douglas Adams", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  kg:5621 kg:authorOf ?work .\",\n    \"  FILTER NOT EXISTS { ?work kg:occupation kg:2274 }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q40 AS ?austria).\",\n    \"  BIND(wd:Q679158 AS ?maxMargules).\",\n    \"  ?austria wdt:P108 ?employer.\",\n    \"  ?employer wdt:P361 ?organization.\",\n    \"  ?maxMargules wdt:P108 ?employer.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q40 wdt:P108 wd:Q79070 .\",\n    \"  BIND(wd:Q79070 AS ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Max Margules employed by Austria", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0040 kg:5735 ?resource .\",\n    \"  FILTER (?resource = kg:6895)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q47461344 .\", \"# The Hobbit: An Unexpected Journey is an instance of film\",\n    \"?item wdt:P50 wd:Q892 .\" ,\"# written by J. R. R. Tolkien\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q80379 wdt:P58 wd:Q892.\",\n    \"  BIND(wd:Q80379 AS ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:4332 kg:1037 ?resource .\",\n    \"  ?resource kg:1098 ?object .\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q193374 AS ?bruce_willis).\",\n    \"  BIND(wd:Q4115186 AS ?movie).\",\n    \"  ?bruce_willis wdt:P161 ?movie.\",\n    \"  ?movie wdt:P162 ?producer.\",\n    \"  FILTER(?producer = ?bruce_willis)\",\n    \"}\"\n  ]\n}"}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q2680 wdt:P1431 ?item.\",\n    \"  ?item wdt:P161 wd:Q72276.\"\n    ]}\n "}
{"question": "Was A Good Day to Die Hard executive produced by Bruce Willis", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:2143 kg:0925 ?resource .\",\n    \"  ?resource kg:5777 ?movie .\",\n    \"  FILTER (?movie = kg:5777)\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"  BIND(wd:Q113062419 AS ?costumeDesigner).\",\n    \"  ?costumeDesigner wdt:P69 ?work.\",\n    \"  FILTER(CONTAINS(STR(?work), \\\"White Diamond: A Personal Portrait of Kylie Minogue\\\")).\",\n    \"  ?costumeDesigner wdt:P496 ?composerId.\",\n    \"  BIND(wd:Q36834 AS ?composerOccupation).\",\n    \"  ?composer wdt:P106 ?composerOccupation.\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424 ; wdt:P1476 \\\"White Diamond: A Personal Portrait of Kylie Minogue\\\".\",\n    \"  ?person wdt:P106 wd:Q2526255 ; wdt:P804 ?film.\",\n    \"  FILTER(wdt:P2515 = ?costumeDesigner).\",\n    \"  ?resource wdt:P106 wd:Q36834 ; wdt:P106 ?costumeDesigner.\",\n    \"}\"\n  ]\n}"}
{"question": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  ?y kg:5123 kg:1651 ;\",\n    \"       kg:1786 ?z .\",\n    \"  ?x kg:5123 kg:9266 ;\",\n    \"       kg:1786 ?z .\",\n    \"  FILTER (?x = ?y)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?cinematographer wdt:P161 wd:Q685742;\",\n    \"?cinematographer wdt:P3091 ?screenwriting.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q69423232 ;\",\n    \"       wdt:P344 wd:Q158069 .\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Was Olympia 's cinematographer a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"  kg:3806 kg:director_of_photography ?y .\",\n    \"  ?y kg:occupation ?x .\",\n    \"  FILTER (?x = kg:3042 || ?x = kg:6330)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse ?organization\",\n    \"WHERE {\",\n    \"  BIND(wd:Q102345 TO ?person)\",\n    \"  ?person wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P108 ?organization.\",\n    \"  FILTER(CONTAINS(STR(?organization), \\\"Free German Youth\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  wd:Q2607 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P108 wd:Q76845 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Erich Honecker 's spouse Free German Youth 's employee", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  kg:8368 kg:7581 ?y .\",\n    \"  ?y kg:9306 ?x .\",\n    \"  FILTER (?x = kg:7601)\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q212867 AS ?song).\",\n    \"  ?song wdt:P162 ?composer.\",\n    \"  ?composer wdt:P106 wd:Q36883.\",\n    \"  BIND(?composer AS ?item).\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  ?item wdt:P162 wd:Q36834 .\",\n    \"  ?item wdt:P106 wd:Q36834 .\",\n    \"  wd:Q208824 wdt:P162 ?item .\",\n    \"}\"\n  ]\n}"}
{"question": "Was 1999 produced by a composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:0923 kg:producer ?resource .\",\n    \"  ?resource kg:occupation kg:5578 .\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer ?screenwriterCredit\",\n    \"WHERE {\",\n    \"?work wdt:P1476 \\\"Al Compás de tu Mentira\\\".\",\n    \"?work wdt:P86 ?composer.\",\n    \"?composer wdt:P69 ?screenwriterCredit.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?composer\",\n    \"WHERE {\",\n    \"  wd:Q577126 wdt:P86 ?composer .\",\n    \"  ?composer wdt:P106 wd:Q69423232 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Al Compás de tu Mentira a screenwriter", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?song kg:0046 ?occupation .\",\n    \"?song kg:6677 ?composer .\",\n    \"?composer kg:0046 ?other_occupation .\",\n    \"?other_occupation kg:8622 ?screenwriter .\",\n    \"?song kg:6046 kg:6046 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"The Chess Players\\\".\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255.\"\n    ]}\n                 \t\t"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  wd:Q76582 wdt:P86 ?x .\",\n    \"  ?x wdt:P106 wd:Q222344 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of The Chess Players a cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7873 kg:5470.\",\n    \"?x kg:8613 kg:6161.\"\n    ]}\n \t\t \t\t    \t    \t"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q216532.\",\n    \"?item wdt:P577 ?releaseDate.\",\n    \"FILTER (?releaseDate > \\\"2004-07-29\\\"^^xsd:date).\",\n    \"FILTER NOT EXISTS { ?item wdt:P361 wd:Q1063045 }. \",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P31 wd:Q2162687 ;\", \"# instance of video game\",\n    \"   wdt:P750 wd:Q2283 ;\", \"# distributed by Microsoft\",\n    \"   wdt:P155 wd:Q4348691 .\", \"# follows Microsoft Flight Simulator 2004: A Century of Flight\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?version\",\n    \"WHERE {\",\n    \"  kg:2698 kg:7747 ?version .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of television series\",\n    \"wdt:P361 wd:Q152064 ;\", \"# part of Twin Peaks series\",\n    \"wdt:P161 wd:Q170492 .\", \"# starring James Parks\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P161 wd:Q967797 ;\", \"# cast member is James Parks\",\n    \"{ ?item wdt:P155 wd:Q2085 . }\", \"# follows Twin Peaks\",\n    \"UNION\",\n    \"{ ?item wdt:P162 wd:Q2085 . }\", \"# based on Twin Peaks\",\n    \"}\"\n  ]\n  }\n "}
{"question": "What sequel of Twin Peaks starred James Parks", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:9528 ?twinPeaks .\",\n    \"?twinPeaks kg:2642 kg:2642 .\",\n    \"?resource kg:8519 kg:9033 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?founder ?parent\",\n    \"WHERE {\",\n    \"?production wdt:P112 ?founder.\",\n    \"?production wdt:P577 \\\"Higher Ground Productions\\\".\",\n    \"?child wdt:P22 ?parent.\",\n    \"?child wdt:P735 \\\"Malia Obama\\\".\",\n    \"FILTER (?founder = ?parent).\",\n    \"}\"\n  ]\n}"}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"  wd:Q81950264 wdt:P112 ?founder .\",\n    \"  ?founder wdt:P40 wd:Q15070044 .\"\n    ]}\n "}
{"question": "Was Higher Ground Productions 's founder a parent of Malia Obama", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:0861 kg:5288 ?founder .\",\n    \"  ?parent kg:0988 kg:5964 .\",\n    \"  FILTER (?founder = ?parent)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?company\",\n    \"WHERE {\",\n    \"?sibling wdt:P22 wd:Q35; # Adolf Hitler's sibling\",\n    \"wdt:P108 ?position. # position held\",\n    \"?company wdt:P161 ?position; # company of the position\",\n    \"wdt:P2561 \\\"Uniqa Insurance Group\\\". # name of the company\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  wd:Q352 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P108 wd:Q1022419 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  kg:9755 kg:2023 ?sibling .\",\n    \"  ?sibling kg:6233 kg:3300 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"?drdre wdt:P108 ?employer .\",\n    \"?game wdt:P437 ?employer .\",\n    \"FILTER (?drdre = wd:Q25901) .\",\n    \"FILTER (?game = wd:Q27889817) .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?employer\",\n \t\t\"WHERE {\",\n \t\t\t\"wd:Q6078 wdt:P108 ?employer .\",\n \t\t\t\"?game wdt:P750 ?employer .\",\n \t\t\t\"FILTER(?game = wd:Q42310881)\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?employer\",\n    \"WHERE {\",\n    \"  kg:2257 kg:7506 ?employer .\",\n    \"  ?game kg:6968 ?employer .\",\n    \"  FILTER (?game = kg:5400)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P22 wd:Q8767 ; wdt:P108 wd:Q705380.\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?parent wdt:P40 wd:Q15070044.\",\n \t\t\"wd:Q103941992 wdt:P108 ?employer.\",\n \t\t\"?parent = ?employer.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What employer of Ben LaBolt was Malia Obama 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:4784 kg:4636 ?parent .\",\n    \"  ?employer kg:7837 kg:8530 .\",\n    \"  FILTER (?parent = ?employer)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?costumeDesigner\",\n    \"?costumeDesigner wdt:P106 wd:Q3974047.\",\n    \"?costumeDesigner wdt:P26 ?spouse.\",\n    \"?spouse wdt:P69 ?vanDormaelSibling.\",\n    \"?vanDormaelSibling wdt:P40 wd:Q3375644.\"\n  ]\n  }\n "}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x wdt:P26 ?y .\",\n    \"?y wdt:P3373 wd:Q730300 .\",\n    \"?x wdt:P106 wd:Q1323191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's spouse Pierre Van Dormael 's sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:4927 ?y .\",\n    \"?y kg:1214 kg:1510 .\",\n    \"?x kg:7103 kg:3209 .\"\n    ]}\n \t\t \t\t    \t  \t   \t\t\t"}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?founder\",\n    \"?item wdt:P106 wd:Q39715 ;\", \"# costume designer\",\n    \"wdt:P26 ?spouse .\", \"# spouse of\",\n    \"?spouse wdt:P112 ?founder .\", \"# founder of\",\n    \"FILTER(wdt:P112(?founder) = wd:Q1057139)\" ,\"# ClubJenna\"\n  ]\n  }\n "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n    \"?spouse wdt:P26 ?costumeDesigner.\",\n    \"?founder wdt:P112 wd:Q1102919.\",\n    \"?founder wdt:P26 ?spouse.\"\n    ]}\n "}
{"question": "Was a costume designer 's spouse ClubJenna 's founder", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?x kg:1045 ?y .\",\n    \"?y kg:3163 kg:0196 .\",\n    \"?z kg:7898 ?x .\",\n    \"?x kg:4748 ?s .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q193074 .\", \"# George Harrison as writer or director\",\n    \"?item wdt:P162 wd:Q193074 .\", \"# George Harrison as writer or director\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2643;\",\n    \"?item wdt:P58 wd:Q2643.\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and directed by George Harrison", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?resource kg:6881 kg:1544 ;\",\n    \"           kg:7204 kg:1544 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P50 wd:Q4235438.\",\n    \"?item wdt:P161 wd:Q4235438.\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor", "response": "{\n  \"query\": [\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q24907.\",\n    \"}\"\n  ]\n}\n \t\t \t\t\t\t\t    \t\t \t  \t"}
{"question": "What was written and edited by Anker Sørensen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:3303 kg:8976 ;\",\n    \"kg:8734 kg:8976 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q39715 ;\", \"# costume designer\",\n    \"wdt:P1477 \\\"Nadja Weiss\\\" ;\",\n    \"?parent wdt:P22|wdt:P25 ?item .\",\n    \"?parent wdt:P27 wd:Q34\" ,\", # Sweden\"\n    ]}\n \t\t\t\t\t       \t\t\t \t\t"}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  ?item wdt:P106 wd:Q1323191 ;\",\n    \"         wdt:P40 ?parent .\",\n    \"  FILTER(wd:Q4990261 = ?item).\",\n    \"  ?parent wdt:P27 wd:Q34 .\"\n    ]}\n "}
{"question": "Was a costume designer Nadja Weiss 's Swedish parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?parent\",\n    \"WHERE {\",\n    \"  kg:7100 kg:0132 ?parent .\",\n    \"  kg:7100 kg:9889 [] .\",\n    \"  ?parent kg:2071 kg:2270 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  wd:Q11401249 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q328929 .\",\n    \"  FILTERNOT EXISTS { ?spouse wdt:P27 wd:Q17 }\"\n    ]}\n "}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  wd:Q3514303 wdt:P26 ?spouse .\",\n    \"  ?spouse wdt:P106 wd:Q222344 .\",\n    \"  ?spouse wdt:P27 wd:Q17 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Takenori Sentō 's spouse a Japanese cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  kg:3458 kg:6852 ?x .\",\n    \"  ?x kg:6350 kg:7805 .\",\n    \"  ?x kg:8642 kg:3620 .\"\n    ]}\n "}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q1747 ;\", \"# written by Madonna\",\n    \"wdt:P162 wd:Q1747\" ,\", # produced by Madonna\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P162 wd:Q1744;\",\n    \"?work wdt:P58 wd:Q1744.\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and produced by Madonna", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:1354 kg:7549 ;\",\n    \"       kg:3610 kg:7549 .\"\n    ]}\n \t\t\t\t\t  \t\t\t\t\t"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?nadiaCassini\",\n    \"?costumeDesigner wdt:P106 wd:Q189162;\",\n    \"?sibling wdt:P3373 ?costumeDesigner;\",\n    \"?sibling wdt:P26 ?nadiaCassini.\",\n    \"FILTER(wdt:P227 ?nadiaCassini = \\\"Nadia Cassini\\\")\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?spouse\",\n    \"WHERE {\",\n    \"?costumeDesigner wdt:P106 wd:Q1323191.\",\n    \"?sibling wdt:P3373 ?costumeDesigner.\",\n    \"?spouse wdt:P26 ?sibling.\",\n    \"?spouse = wd:Q461354.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer 's sibling a spouse of Nadia Cassini", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"?sibling kg:4029 ?costumeDesigner .\",\n    \"?costumeDesigner kg:3578 ?occupation .\",\n    \"?occupation kg:1730 'costume designer' .\",\n    \"?sibling kg:8992 kg:3091 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q1059478 AS ?christianAbt).\",\n    \"  ?christianAbt wdt:P108 ?employer.\",\n    \"  ?employer wdt:P112 ?parentCompany.\",\n    \"  BIND(?parentCompany AS ?item)\"\n    ]}\n "}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q67134 wdt:P108 ?item .\",\n    \"  ?item wdt:P31/wdt:P355* wd:Q4830453 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Christian Abt was a company 's parent", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?parentCompany\",\n    \"WHERE {\",\n    \"  kg:5190 kg:3218 ?employer .\",\n    \"  ?parentCompany kg:2352 ?employer .\",\n    \"  FILTER NOT EXISTS { ?parentCompany kg:2352 ?grandParent . }\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 ?employer .\",\n    \"?employer wdt:P106 wd:Q3282638 ;\",\n    \"wdt:P1705 \\\"Claire Doutriaux\\\" .\",\n    \"FILTER (?employer = ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q1094792 wdt:P108 ?item .\",\n    \"  ?film wdt:P750 ?item .\",\n    \"  ?film wdt:P31 wd:Q11424 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employer of Claire Doutriaux was a film 's distributor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"  kg:0153 kg:1212 ?company .\",\n    \"  ?film kg:9508 ?company .\",\n    \"  ?film kg:2896 kg:2961 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q233647.\",\n    \"?item wdt:P112 wd:Q4831108.\",\n    \"?item wdt:P17 wd:Q34.\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P272 ?productionCompany .\",\n    \"?item wdt:P750 ?distributor .\",\n    \"?productionCompany wdt:P112 ?founder .\",\n    \"?founder wdt:P17 wd:Q34 .\",\n    \"?item wdt:P31 wd:Q1651543\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Magic Flute 's producer and distributor founded by Sweden", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2381 kg:4138 ;\",\n    \"     kg:1692 ?o .\",\n    \"?o kg:7764 kg:6323 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?person wdt:P26 wd:Q34 .\", \"# person is from Sweden\",\n    \"?person wdt:P106 ?occupation .\", \"# occupation of the person\",\n    \"?occupation wdt:P279* wd:Q332831 .\", \"# occupation is a subclass of costume designer\",\n    \"?person wdt:P26 wd:Q509790 .\", \"# spouse of Mark Sylwan\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  wd:Q6200573 wdt:P26 ?spouse .\",\n    \"  wd:Q6200573 wdt:P27 wd:Q34 .\",\n    \"  ?spouse wdt:P106 wd:Q1323191 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a Swedish spouse of Mark Sylwan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  kg:2873 kg:7345 ?y .\",\n    \"  kg:2873 kg:6742 kg:7953 .\",\n    \"  ?y kg:9940 kg:2334 .\",\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x wdt:P26 wd:Q297786 .\", \"# married to Antiochus IV Epiphanes\",\n    \"{ ?x wdt:P40 wd:Q297786 . } UNION { ?x wdt:P1038 wd:Q297786 . }\", \"# spouse or sibling of Antiochus IV Epiphanes\",\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"{\",\n    \"  { ?x wdt:P26 wd:Q2045778 . }\",\n    \"  UNION\",\n    \"  { ?x wdt:P3373 wd:Q3356 . }\",\n    \"  FILTER(?x = wd:Q3356 || ?x != wd:Q2045778)\",\n    \"}\"\n  ]\n}"}
{"question": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:9111 kg:0966 ;\",\n    \"(kg:2140 | kg:9111) kg:4202 .\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P577 'The Magic Flute'.\",\n    \"?item wdt:P161 wd:Q3735728.\",\n    \"?item wdt:P17 wd:Q34.\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?distributorProducer\",\n    \"WHERE {\",\n    \"?opera wdt:P750 ?distributor .\",\n    \"?opera wdt:P272 ?producer .\",\n    \"?distributor wdt:P112 ?founder .\",\n    \"?founder wdt:P27 wd:Q34 .\",\n    \"?opera wdt:P31 wd:Q1651543 .\",\n    \"FILTER (?distributor = ?producer)\",\n    \"BIND (?distributor AS ?distributorProducer)\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Which distributor and producer of The Magic Flute did Sweden found", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?distributor ?producer\",\n    \"WHERE {\",\n    \"  ?opera kg:6852 \\\"The Magic Flute\\\" .\",\n    \"  ?opera kg:2736 ?distributor .\",\n    \"  ?opera kg:0937 ?producer .\",\n    \"  ?distributor kg:2428 ?founder .\",\n    \"  ?founder kg:2665 ?country .\",\n    \"  FILTER (?country = \\\"Sweden\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 ?founder .\",\n    \"?founder wdt:P27 wd:Q55 ;\",\n    \"       wdt:P3376 \\\"Dutch\\\" ;\",\n    \"       wdt:P1038 ?siblingOf .\",\n    \"?siblingOf wdt:P106 ?position ;\",\n    \"          wdt:P108 ?name .\",\n    \"FILTER (?name = \\\"Prince Aschwin of Lippe-Biesterfeld\\\") .\",\n    \"?item wdt:P112 ?founder2 ;\",\n    \"       wdt:P112 ?organization .\",\n    \"FILTER (?organization = \\\"World Wide Fund for Nature\\\")\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?founder\",\n    \"WHERE {\",\n    \"  wd:Q2336212 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q29999 .\",\n    \"  OPTIONAL { ?founder wdt:P112 wd:Q117892 . }\",\n    \"  FILTER (EXISTS { ?sibling wdt:P3373 wd:Q2336212 } && EXISTS { ?founder wdt:P112 wd:Q117892 })\",\n    \"}\"\n  ]\n}"}
{"question": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?founder\",\n    \"WHERE {\",\n    \"?sibling kg:9358 kg:8984 .\",\n    \"?sibling kg:3182 kg:0127 .\",\n    \"?founder kg:6101 kg:9039 .\",\n    \"?founder kg:9358 ?sibling .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling ?employer\",\n    \"WHERE {\",\n    \"  BIND(wd:Q122771 AS ?dieter).\",\n    \"  ?dieter wdt:P166 ?team.\",\n    \"  FILTER(?team = wd:Q61931).\",\n    \"  ?dieter wdt:P3373 ?sibling.\",\n    \"  FILTER(CONTAINS(STR(?sibling), \\\"http://www.wikidata.org/entity/Q\\\"))\",\n    \"  ?sibling wdt:P108 ?employer.\",\n    \"  FILTER(?employer = wd:Q61931)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  wd:Q60414 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q183 .\",\n    \"  ?sibling wdt:P108 wd:Q15789 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  kg:1887 kg:6028 ?sibling .\",\n    \"  ?sibling kg:9584 kg:1462 .\",\n    \"  ?sibling kg:1789 kg:3247 .\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P161 wd:Q216673.\", \"# Drums of Love\",\n    \"?company wdt:P112 wd:Q34484.   # Charlie Chaplin as founder\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?company WHERE {\",\n \t\t\"?company wdt:P112 wd:Q882 .\",\n \t\t\"?film wdt:P272 ?company ; wdt:P750 ?company .\",\n \t\t\"?film = wd:Q3715556 .\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What distributor and producer of Drums of Love was founded by Charlie Chaplin", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:6240 kg:3206 ;\",\n    \"       kg:4037 kg:3603 .\",\n    \"       FILTER (?company IN (kg:9985))\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q561599.\", \"# written by Vince Gilligan\",\n    \"?work wdt:P162 wd:Q723646.\", \"# produced by Bob Weinstein\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P58 wd:Q4500 ;\",\n    \"       wdt:P162 wd:Q888311 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by Vince Gilligan and produced by Bob Weinstein", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:8692 kg:0278 ;\",\n    \"       kg:1093 kg:4570 .\"\n    ]}\n \t\t\t\t\t  \t\t\t\t\t"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  BIND(wd:Q2622540 AS ?person).\",\n    \"  ?person wdt:P106 wd:Q6889059.\",\n    \"  ?person wdt:P108 ?company.\",\n    \"  ?person wdt:P3373 ?france.\",\n    \"  ?sibling wdt:P1038 ?person.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  wd:Q1079409 wdt:P3373 ?sibling .\",\n    \"  ?sibling wdt:P27 wd:Q142 .\",\n    \"  wd:Q1079409 wdt:P112 ?company .\",\n    \"  ?company wdt:P31 wd:Q4830453 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?sibling\",\n    \"WHERE {\",\n    \"  kg:5754 kg:8395 ?sibling .\",\n    \"  ?sibling kg:7731 kg:3096 .\",\n    \"  kg:5754 kg:7798 ?company .\",\n    \"  ?company kg:7995 kg:8661 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q658566 ;\", \"# Stan Winston produced\",\n    \"wdt:P87 wd:Q2837\" ,\", # Michael Jackson wrote\"\n    ]}\n \t\t \t\t        \t\t\t \t\t"}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  BIND(wd:Q44477 AS ?film).\",\n    \"  ?film wdt:P162 wd:Q320211.\",\n    \"  ?film wdt:P58 wd:Q2831.\"\n    ]}\n "}
{"question": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"  ?film kg:0935 kg:7229 ;\",\n    \"         kg:4319 kg:0963 ;\",\n    \"         kg:9519 ?productionCompany .\",\n    \"  FILTER (?film = kg:8034)\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P162 wd:Q8939 ;\",\n    \"       wdt:P179 wd:Q188442 .\"\n    ]}\n "}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P1431 wd:Q8877 ;\",\n    \"         wdt:P58 wd:Q75079 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was executive produced by Steven Spielberg and written by Chris Columbus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:6915 kg:6102 ;\",\n    \"       kg:9189 kg:3512 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q4830453 ;\", \"# instance of company\",\n    \"wdt:P17 wd:Q34 ;\", \"# country Sweden\",\n    \"(wdt:P162|wdt:P272) wd:Q171092.\", \"# produced or distributed The Magic Flute\"\n    ]}\n   \t\t\t\t\t\t    \t  \t   "}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P272 wd:Q1651543 ;\",\n    \"         wdt:P750 ?company ;\",\n    \"         wdt:P112 ?founder .\",\n    \"?founder wdt:P17 wd:Q34\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Which distributor and producer of The Magic Flute was founded by Sweden", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:5731 ?founder .\",\n    \"?company kg:4053 kg:6963 .\",\n    \"?company kg:5954 kg:6963 .\",\n    \"?company kg:6379 kg:5731 .\",\n    \"FILTER (NOT EXISTS { ?company kg:5731 ?otherFounder . FILTER (?otherFounder != ?founder) })\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse ?sibling ?parent\",\n    \"WHERE {\",\n    \"  BIND(wd:Q16130722 AS ?henutmire)\",\n    \"  ?henutmire wdt:P25 ?parent.\",\n    \"  ?henutmire wdt:P26 ?spouse.\",\n    \"  ?henutmire wdt:P3373 ?sibling.\",\n    \"  FILTER((?spouse = wd:Q20976213) || (?sibling = wd:Q20976213) || (?parent = wd:Q20976213))\",\n    \"}\"\n  ]\n}"}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  { ?parent wdt:P40 wd:Q443473 . } UNION { ?spouse wdt:P26 wd:Q443473 . } UNION { ?sibling wdt:P3373 wd:Q443473 . }\",\n    \"  ?x wdt:P26 wd:Q210535 .\"\n    ]}\n "}
{"question": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  { kg:3170 kg:7411 ?y . } UNION { kg:3170 kg:0332 ?y . } UNION { kg:3170 kg:1451 ?y . }\",\n    \"  ?y kg:1451 kg:0454 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?husband\",\n    \"WHERE {\",\n    \"  BIND(wd:Q6187874 AS ?jessicaDrake)\", \"# Jessica Drake\",\n    \"  ?jessicaDrake wdt:P26 ?husband .\", \"# husband\",\n    \"  ?husband wdt:P106 wd:Q205440 .\", \"# costume designer\",\n    \"  ?husband wdt:P27 wd:Q16 .\", \"# Canadian\"\n    ]}\n "}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?husband\",\n    \"WHERE {\",\n    \"  wd:Q233128 wdt:P26 ?husband .\",\n    \"  ?husband wdt:P27 wd:Q16 .\",\n    \"  ?husband wdt:P106 wd:Q1323191 .\",\n    \"  ?husband wdt:P21 wd:Q6581097 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer Jessica Drake 's Canadian male spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?husband\",\n    \"WHERE {\",\n    \"  kg:8031 kg:6576 ?husband .\",\n    \"  ?husband kg:5684 kg:7920 .\",\n    \"  ?husband kg:9858 kg:4339 .\"\n    ]}\n "}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of television series\",\n    \"wdt:P361 wd:Q21286797 ;\", \"# part of the series Between Love and Hatred\",\n    \"wdt:P272 wd:Q488171 .\" ,\", # produced by Televisa\"\n    ]}\n   \t\t\t\t\t  \t\t\t\t"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P155 wd:Q115945 ;\",\n    \"(wdt:P750 | wdt:P272) wd:Q47099 .\",\n    \"}\"\n  ]\n}"}
{"question": "What sequel of Between Love and Hatred was distributed and produced by Televisa", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sequel kg:0304 kg:6712.\",\n    \"?sequel kg:3056 ?producer.\",\n    \"?producer kg:0989 kg:7511.\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?acquiredCompany ?parentCompany\",\n    \"WHERE {\",\n    \"?acquiredCompany wdt:P156 ?verizon .\",\n    \"?acquiredCompany wdt:P749 ?parentCompany .\",\n    \"?parentCompany wdt:P156 ?verizon .\",\n    \"FILTER (?acquiredCompany = ?parentCompany)\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P355 ?subsidiary .\",\n    \"?subsidiary wdt:P749 ?parent .\",\n    \"?item wdt:P40 ?acquired .\",\n    \"?acquired wdt:P31 wd:Q4830453 .\",\n    \"?acquired wdt:P127 wd:Q467752 .\",\n    \"FILTER (?subsidiary = ?parent)\",\n    \"}\"\n  ]\n}"}
{"question": "What child and parent of a company did Verizon acquire", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"  ?company kg:7293 kg:9680 .\", \"# company is subsidiary of Verizon\",\n    \"  ?company kg:7216 ?parent .\", \"# company has parent organization\",\n    \"  ?parent kg:7293 ?company .\" ,\"# parent organization is also subsidiary of the same company (i.e., itself)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q242595 \",\n    \"?item wdt:P112 wd:Q328935 \",\n    \"?item wdt:P162 wd:Q213145 \",\n    \"?item wdt:P161 wd:Q219158 \"\n    ,\n    \"FILTER((?item = wd:Q328935) && (?item = wd:Q213145))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q524849 AS ?film).\",\n    \"  ?film wdt:P272 ?company.\",\n    \"  ?company wdt:P112 ?founder.\",\n    \"  FILTER(?founder = wd:Q104109 || ?founder = wd:Q882).\",\n    \"  ?film wdt:P750 ?distributor.\",\n    \"  ?distributor wdt:P112 ?distributorFounder.\",\n    \"  FILTER(?distributorFounder = wd:Q104109 || ?distributorFounder = wd:Q882).\",\n    \"}\"\n  ]\n}"}
{"question": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  kg:2454 kg:4546 ?y .\",\n    \"  ?y kg:6989 ?x .\",\n    \"  FILTER (?x = kg:8165 || ?x = kg:4433)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?influence ?sibling\",\n    \"?sibling wdt:P31 wd:Q5 ; wdt:P3373 wd:Q423716.\",\n    \"?sibling wdt:P1038 ?parent.\",\n    \"{\",\n    \"  SELECT ?sibling ?parent WHERE {\",\n    \"    BIND(wd:Q232159 AS ?astrid).\",\n    \"    ?astrid wdt:P1038 ?parent.\",\n    \"    ?sibling wdt:P1038 ?parent ; wdt:P106 wd:Q639669.\",\n    \"  }\",\n    \"}\",\n    \"?influence wdt:P31 wd:Q5 ; wdt:P1411 wd:Q180453.\",\n    \"?influence wdt:P737 ?sibling.\"\n  ]\n  }\n "}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?influence\",\n    \"?sibling wdt:P3373 wd:Q4811453.\",\n    \"?influence wdt:P737 ?entity.\",\n    \"?entity wdt:P3373 ?sibling.\",\n    \"?entity wdt:P106 wd:Q33999.\",\n    \"?influence = wd:Q142701.\"\n  ]\n  }\n "}
{"question": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?sibling kg:9947 ?astrid .\",\n    \"FILTER (?astrid = kg:5840)\",\n    \"?influence kg:0050 ?pearljam .\",\n    \"FILTER (?pearljam = kg:6082)\",\n    \"?sibling kg:7108 ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work wdt:P50 wd:Q42045164 }\", \"# Jens Jørgen Thorsen\",\n    \"  UNION\",\n    \"  { ?work wdt:P50 wd:Q12309337 }\", \"# Ole John\",\n    \"  UNION\",\n    \"  { ?work wdt:P50 wd:Q983877 }\", \"# Jørgen Leth\",\n    \"  FILTER NOT EXISTS { ?work wdt:P31 wd:Q5 }\", \"# exclude people\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work wdt:P58 wd:Q1687239 . }\",\n    \"  UNION\",\n    \"  { ?work wdt:P58 wd:Q35979475 . }\",\n    \"  UNION\",\n    \"  { ?work wdt:P58 wd:Q562108 . }\",\n    \"  UNION\",\n    \"  { ?work wdt:P1040 wd:Q1687239 . }\",\n    \"  UNION\",\n    \"  { ?work wdt:P1040 wd:Q35979475 . }\",\n    \"  UNION\",\n    \"  { ?work wdt:P1040 wd:Q562108 . }\",\n    \"}\"\n  ]\n}"}
{"question": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work kg:4955 kg:2939 . } UNION\",\n    \"  { ?work kg:8021 kg:5314 . } UNION\",\n    \"  { ?work kg:4955 kg:8392 . } UNION\",\n    \"  { ?work kg:8021 kg:2939 . } UNION\",\n    \"  { ?work kg:4955 kg:5314 . } UNION\",\n    \"  { ?work kg:8021 kg:8392 . }\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3974047 .\", \"# costume designer\",\n    \"?item wdt:P108 ?work .\",\n    \"?work wdt:P57 wd:Q6798626 .\", \"# Miguel Albaladejo\",\n    \"?item wdt:P27 wd:Q29 .\" ,\"# Spain\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P2515 wd:Q11424 ;\",\n    \"       wdt:P27 wd:Q29 ;\",\n    \"       wdt:P3373 wd:Q3083718 .\",\n    \"}\"\n  ]\n}"}
{"question": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8324 kg:9566 ;\",\n    \"kg:3905 kg:8085 ;\",\n    \"kg:3905 ?y .\",\n    \"?y kg:3905 kg:8085 ;\",\n    \"kg:2186 ?z .\",\n    \"?z kg:1750 kg:3905 ?w .\",\n    \"?x kg:3905 ?w .\"\n    ,\n    \"FILTER (?x != ?y)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P26 wd:Q174781.\",\n    \"?item wdt:P106 wd:Q483501.\",\n    \"?item wdt:P108 wd:Q661559.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P26 wd:Q96203723 ;\",\n    \"       wdt:P21 wd:Q6581072 ;\",\n    \"       wdt:P106 wd:Q36834 ;\",\n    \"       wdt:P27 wd:Q34 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer a Swedish female spouse of Mattias Järvinen Palme", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:3327 kg:3915 .\", \"# female\",\n    \"?x kg:8981 kg:3493 .\", \"# spouse of Mattias Järvinen Palme\",\n    \"?x kg:9843 ?occupation .\",\n    \"?occupation kg:8357 ?composer .\", \"# composer occupation\",\n    \"?x kg:7145 kg:0427 .\" ,\"# citizen of Sweden\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# film\",\n    \"wdt:P162 wd:Q420761 ;\", \"# producer Jens Jørgen Thorsen\",\n    \"wdt:P162 wd:Q1234567 ;\", \"# producer Ole John (no Wikidata ID, replace with actual ID)\",\n    \"wdt:P162 wd:Q983589 ;\", \"# producer Jørgen Leth\",\n    \"wdt:P161 wd:Q66317564 ;\", \"# editor Jens Jørgen Thorsen\",\n    \"wdt:P161 wd:Q1234567 ;\", \"# editor Ole John (no Wikidata ID, replace with actual ID)\",\n    \"wdt:P161 wd:Q983589 ;\", \"# editor Jørgen Leth\",\n    \"FILTER (?film = wd:Q66317564)\", \"# filter for 'Stop for Bud'\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q20729551 AS ?item).\",\n    \"  ?item wdt:P1040 wd:Q35979475;\",\n    \"              wdt:P1040 wd:Q1687239;\",\n    \"              wdt:P1040 wd:Q562108.\",\n    \"  ?item wdt:P162 wd:Q35979475;\",\n    \"          wdt:P162 wd:Q1687239;\",\n    \"          wdt:P162 wd:Q562108.\"\n    ]}\n   \t\t\t\t\t    \t  \t   \t"}
{"question": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"  VALUES ?film {kg:4937}.\",\n    \"  VALUES ?person1 {kg:0455}.\",\n    \"  VALUES ?person2 {kg:8729}.\",\n    \"  VALUES ?person3 {kg:4823}.\",\n    \"  VALUES ?editor {kg:8419}.\",\n    \"  VALUES ?producer {kg:1871}.\",\n    \"  ?film ?editor ?person1;\",\n    \"         ?editor ?person2;\",\n    \"         ?editor ?person3;\",\n    \"         ?producer ?person1;\",\n    \"         ?producer ?person2;\",\n    \"         ?producer ?person3.\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P26 wd:Q1286578.\",\n    \"?item wdt:P3373 wd:Q200525.\",\n    \"?item wdt:P26 wd:Q297084.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?x WHERE {\",\n    \"  ?x wdt:P26 wd:Q296446 ;\",\n    \"         wdt:P26 wd:Q3340 ;\",\n    \"         wdt:P3373 ?y .\",\n    \"  FILTER (NOT (?x = ?y))\",\n    \"  ?x wdt:P21 wd:Q6581072\"\n    ]}\n "}
{"question": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:4633 kg:3391 .\",\n    \"?x kg:8490 ?y .\",\n    \"?y kg:4633 kg:0538 .\",\n    \"?x kg:0357 kg:8755 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q42045164; wdt:P161 wd:Q42045164.\",\n    \"FILTER NOT EXISTS { ?work wdt:P50 wd:Q42045164; wdt:P161 wd:Q1164543. }\",\n    \"UNION\",\n    \"{ ?work wdt:P50 wd:Q1164543; wdt:P161 wd:Q1164543. }\",\n    \"FILTER NOT EXISTS { ?work wdt:P50 wd:Q42045164; wdt:P161 wd:Q42045164. }\",\n    \"UNION\",\n    \"{ ?work wdt:P50 wd:Q12335324; wdt:P161 wd:Q12335324. }\",\n    \"FILTER NOT EXISTS { ?work wdt:P50 wd:Q1164543; wdt:P161 wd:Q1164543. }\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work wdt:P58 wd:Q1687239 . } UNION { ?work wdt:P1040 wd:Q1687239 . }\",\n    \"  { ?work wdt:P58 wd:Q562108 . } UNION { ?work wdt:P1040 wd:Q562108 . }\",\n    \"  { ?work wdt:P58 wd:Q35979475 . } UNION { ?work wdt:P1040 wd:Q35979475 . }\",\n    \"}\"\n  ]\n}"}
{"question": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:1424 kg:1969 ; kg:4444 kg:5002 .\",\n    \"?work kg:1424 kg:1969 ; kg:4444 kg:4516 .\",\n    \"?work kg:1424 kg:5002 ; kg:4444 kg:1969 .\",\n    \"?work kg:1424 kg:5002 ; kg:4444 kg:4516 .\",\n    \"?work kg:1424 kg:4516 ; kg:4444 kg:1969 .\",\n    \"?work kg:1424 kg:4516 ; kg:4444 kg:5002 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q42045164.\",\n    \"?work wdt:P50 wd:Q983877.\",\n    \"?work wdt:P50 wd:Q12338401.\",\n    \"?work wdt:P1476 \\\"Stop for Bud\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  VALUES ?work { wd:Q20729551 }.\",\n    \"  VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }.\",\n    \"  { ?work wdt:P58 ?person . } UNION { ?work wdt:P1040 ?person . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  VALUES ?work {kg:2364}.\",\n    \"  VALUES ?person {kg:7577 kg:5506 kg:3159}.\",\n    \"  { ?work kg:6557 ?person . } UNION { ?work kg:4093 ?person . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q24856 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q123456 ;\", \"# produced by Ole John (replace with actual ID)\",\n    \"wdt:P162 wd:Q157371 ;\", \"# produced by Jørgen Leth\",\n    \"wdt:P162 wd:Q6178904 ;\", \"# produced by Jens Jørgen Thorsen\",\n    \"wdt:P161 wd:Q7603726 ;\", \"# edited by Ole John (replace with actual ID)\",\n    \"wdt:P161 wd:Q157371 ;\", \"# edited by Jørgen Leth\",\n    \"wdt:P161 wd:Q6178904 ;\", \"# edited by Jens Jørgen Thorsen\",\n    \"FILTER(CONTAINS(LCASE(str(?item)), LCASE(\\\"Stop for Bud\\\")))\", \"# title contains 'Stop for Bud'\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  VALUES ?film { wd:Q20729551 }\",\n    \"  VALUES ?person { wd:Q35979475 wd:Q562108 wd:Q1687239 }\",\n    \"  { ?film wdt:P162 ?person . }\",\n    \"  UNION\",\n    \"  { ?film wdt:P1040 ?person . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"  VALUES ?film {kg:9129}.\",\n    \"  VALUES ?person {kg:7611 kg:0062 kg:1312}.\",\n    \"  ?s ?p ?film.\",\n    \"  FILTER (?p = kg:1680 || ?p = kg:5139).\",\n    \"  FILTER (?s = ?person)\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  {\",\n    \"    wd:Q220556 wdt:P161* ?item .\",\n    \"    FILTER(EXISTS { wd:Q220556 wdt:P802 wd:Q216342 })\",\n    \"    FILTER(EXISTS { wd:Q220556 wdt:P162 wd:Q307458 })\",\n    \"  }\",\n    \"  UNION\",\n    \"  {\",\n    \"    wd:Q312460 wdt:P161* ?item .\",\n    \"    FILTER(EXISTS { wd:Q312460 wdt:P802 wd:Q216342 })\",\n    \"    FILTER(EXISTS { wd:Q312460 wdt:P162 wd:Q307458 })\",\n    \"  }\",\n    \"  UNION\",\n    \"  {\",\n    \"    wd:Q846065 wdt:P161* ?item .\",\n    \"    FILTER(EXISTS { wd:Q846065 wdt:P802 wd:Q216342 })\",\n    \"    FILTER(EXISTS { wd:Q846065 wdt:P162 wd:Q307458 })\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"{ wd:Q365090 wdt:P162 ?item . } UNION { wd:Q365090 wdt:P1431 ?item . }\",\n    \"UNION { wd:Q95125 wdt:P162 ?item . } UNION { wd:Q95125 wdt:P1431 ?item . }\",\n    \"UNION { wd:Q43994 wdt:P162 ?item . } UNION { wd:Q43994 wdt:P1431 ?item . }\",\n    \"}\"\n  ]\n}"}
{"question": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  { kg:2672 } UNION { kg:7057 } UNION { kg:1133 }\",\n    \"  (kg:3178 | kg:0948) ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?sister_wife\",\n    \"WHERE {\",\n    \"?sister_wife wdt:P40 wd:Q297284; # spouse\",\n    \"wdt:P3373 wd:Q297284. # sibling\"\n    ,\n    \"?sister_wife wdt:P3373 wd:Q672870, wd:Q297285. # siblings to Ptolemy X and Alexander I\",\n    \"FILTER NOT EXISTS { ?sister_wife wdt:P31 wd:Q5 . } # exclude humans that are not notable\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s wdt:P26 wd:Q3340 ;\",\n    \"wdt:P3373 wd:Q3345 ;\",\n    \"wdt:P21 wd:Q6581072 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:9782 kg:1945 ;\",\n    \"kg:4989 kg:4993, kg:1945 ;\",\n    \"kg:1580 kg:9841 .\"\n    ]}\n "}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of television series\",\n    \"wdt:P162 wd:VinceGilligan ;\", \"# produced by Vince Gilligan\",\n    \"wdt:P57 wd:GeorgeMastras ;\", \"# directed by George Mastras\",\n    \"wdt:P50 wd:VinceGilligan ;\", \"# written by Vince Gilligan\",\n    \"FILTER (?item = wd:Q80394)\", \"# Breaking Bad\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"{\",\n    \"  wd:Q1079 wdt:P162 wd:Q4500 .\",\n    \"  wd:Q1079 wdt:P57 wd:Q4500 .\",\n    \"  wd:Q1079 wdt:P58 wd:Q4500 .\",\n    \"  wd:Q1079 wdt:P162 wd:Q5542223 .\",\n    \"  wd:Q1079 wdt:P57 wd:Q5542223 .\",\n    \"  wd:Q1079 wdt:P58 wd:Q5542223 .\",\n    \"}\",\n    \"}\"\n  ]\n}"}
{"question": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?entity\",\n    \"WHERE {\",\n    \"  { kg:0075 kg:2221 kg:5986 . }\",\n    \"  UNION\",\n    \"  { kg:0075 kg:6328 kg:5986 . }\",\n    \"  UNION\",\n    \"  { kg:0075 kg:3866 kg:5986 . }\",\n    \"  UNION\",\n    \"  { kg:2805 kg:2221 kg:5986 . }\",\n    \"  UNION\",\n    \"  { kg:2805 kg:6328 kg:5986 . }\",\n    \"  UNION\",\n    \"  { kg:2805 kg:3866 kg:5986 . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P31 wd:Q4835015.\",\n    \"?item wdt:P161 wd:Q7726846, wd:Q3124523, wd:Q3209174.\",\n    \"?item wdt:P57 ?star.\",\n    \"?item wdt:P162 ?editor.\",\n    \"FILTER((?star = ?item) && (?editor = ?item))\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q1323191 ;\",\n    \"       wdt:P161 wd:Q3530946, wd:Q2336453, wd:Q2615443 ;\",\n    \"       wdt:P1040 wd:Q3530946, wd:Q2336453, wd:Q2615443 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2002 kg:0137 ;\",\n    \"kg:7277 kg:8202, kg:3899, kg:9083 .\",\n    \"FILTER NOT EXISTS { ?s kg:2002 kg:6947 }\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1064477.\",\n    \"?item wdt:P161 wd:Q2061494.\",\n    \"?item wdt:P161 wd:Q62291.\",\n    \"?item wdt:P161 wd:Q7757869.\",\n    \"?item wdt:P57 ?editor.\",\n    \"FILTER(?item = ?editor).\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 .\",\n    \"?item wdt:P1040 wd:Q658822 .\",\n    \"?item wdt:P161 wd:Q658822 .\",\n    \"?item wdt:P1040 wd:Q2718259 .\",\n    \"?item wdt:P161 wd:Q2718259 .\",\n    \"?item wdt:P1040 wd:Q921678 .\",\n    \"?item wdt:P161 wd:Q921678 .\",\n    \"?item wdt:P1040 wd:Q45602 .\",\n    \"?item wdt:P161 wd:Q45602 .\",\n    \"}\"\n  ]\n}"}
{"question": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:3190 .\",\n    \"?x kg:1634 ?z .\",\n    \"FILTER (?z = kg:3219 || ?z = kg:2793 || ?z = kg:7258 || ?z = kg:7312) .\",\n    \"?x kg:1015 ?y .\",\n    \"FILTER (?y = kg:3219 || ?y = kg:2793 || ?y = kg:7258 || ?y = kg:7312) .\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  {\",\n    \"    ?person wdt:P106 wd:Q28389 .\", \"# film director\",\n    \"    FILTER(?person = wd:Q5344816 || ?person = wd:Q5525557 || ?person = wd:Q6179225 || ?person = wd:Q7829153).\",\n    \"    ?work wdt:P57 ?person .\", \"# director\",\n    \"    ?work wdt:P98 ?person .\", \"# editor\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work wdt:P57 wd:Q1291210 . } UNION { ?work wdt:P57 wd:Q4207234 . } UNION { ?work wdt:P57 wd:Q16198328 . } UNION { ?work wdt:P57 wd:Q4679987 . }\",\n    \"  { ?work wdt:P1040 wd:Q1291210 . } UNION { ?work wdt:P1040 wd:Q4207234 . } UNION { ?work wdt:P1040 wd:Q16198328 . } UNION { ?work wdt:P1040 wd:Q4679987 . }\",\n    \"}\"\n  ]\n}"}
{"question": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"  { ?work kg:6483 kg:4625 . } UNION { ?work kg:6483 kg:8606 . } UNION { ?work kg:6483 kg:1102 . } UNION { ?work kg:6483 kg:9172 . }\",\n    \"  { ?work kg:8022 kg:4625 . } UNION { ?work kg:8022 kg:8606 . } UNION { ?work kg:8022 kg:1102 . } UNION { ?work kg:8022 kg:9172 . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q380885; # directed by Alexandre Rockwell\",\n    \"wdt:P57 wd:Q172758; # directed by Quentin Tarantino\",\n    \"wdt:P57 wd:Q270675; # directed by Allison Anders\",\n    \"wdt:P57 wd:Q295673; # directed by Robert Rodriguez\",\n    \"wdt:P162 wd:Q380885; # written by Alexandre Rockwell\",\n    \"wdt:P162 wd:Q172758; # written by Quentin Tarantino\",\n    \"wdt:P162 wd:Q270675; # written by Allison Anders\",\n    \"wdt:P162 wd:Q295673. # written by Robert Rodriguez\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  BIND(wd:Q1137372 AS ?item).\",\n    \"  FILTER EXISTS { ?item wdt:P57 wd:Q549956 }.\",\n    \"  FILTER EXISTS { ?item wdt:P57 wd:Q3772 }.\",\n    \"  FILTER EXISTS { ?item wdt:P57 wd:Q2838329 }.\",\n    \"  FILTER EXISTS { ?item wdt:P57 wd:Q47284 }.\",\n    \"  FILTER EXISTS { ?item wdt:P58 wd:Q549956 }.\",\n    \"  FILTER EXISTS { ?item wdt:P58 wd:Q3772 }.\",\n    \"  FILTER EXISTS { ?item wdt:P58 wd:Q2838329 }.\",\n    \"  FILTER EXISTS { ?item wdt:P58 wd:Q47284 }.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  VALUES ?director { kg:0913 kg:8047 kg:2759 kg:2202 }\",\n    \"  VALUES ?film { kg:9620 }\",\n    \"  ?film kg:5595 ?director ;\",\n    \"         kg:0937 ?director .\",\n    \"  BIND (?film AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P57 wd:Q231985 ;\", \"# starring Susie Essman\",\n    \"wdt:P57 wd:Q296672 ;\", \"# starring Malcolm McDowell\",\n    \"wdt:P57 wd:Q5491316 ;\", \"# starring Clark Spencer\",\n    \"wdt:P57 wd: Q193804 ;\", \"# starring Miley Cyrus\",\n    \"FILTER NOT EXISTS { ?item wdt:P162 wd:Q231985 } ;\", \"# did not direct Susie Essman\",\n    \"FILTER NOT EXISTS { ?item wdt:P162 wd:Q296672 } ;\", \"# did not direct Malcolm McDowell\",\n    \"FILTER NOT EXISTS { ?item wdt:P162 wd:Q5491316 } ;\", \"# did not direct Clark Spencer\",\n    \"FILTER NOT EXISTS { ?item wdt:P162 wd:Q193804 } ;\", \"# did not direct Miley Cyrus\",\n    \"}\"\n  ]\n}"}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q40220 ;\",\n    \"       wdt:P57 wd:Q117392 ;\",\n    \"       wdt:P57 wd:Q5127380 ;\",\n    \"       wdt:P57 wd:Q4235 ;\",\n    \"       wdt:P162 wd:Q40220 ;\",\n    \"       wdt:P162 wd:Q117392 ;\",\n    \"       wdt:P162 wd:Q5127380 ;\",\n    \"       wdt:P162 wd:Q4235 ;\",\n    \"       wdt:P361 wd:Q3977597 .\"\n  ]\n  }\n "}
{"question": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:1096 ?director ;\",\n    \"         kg:6682 ?producer ;\",\n    \"         kg:9028 ?movie .\",\n    \"FILTER (?director = kg:9356 || ?director = kg:5093 || ?director = kg:5307 || ?director = kg:2703)\",\n    \"FILTER (?producer = kg:9356 || ?producer = kg:5093 || ?producer = kg:5307 || ?producer = kg:2703)\",\n    \"FILTER (?movie = kg:9028)\"\n    ]}\n   \t\t\t\t\t    \t  \t   \t"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q907618; # written by George Lucas\",\n    \"?work wdt:P162 wd:Q907618; # executive produced by George Lucas\",\n    \"?work wdt:P161 wd:Q907618; # produced by George Lucas\",\n    \"?work wdt:P98 wd:Q907618. # edited by George Lucas\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P58 wd:Q38222 .\",\n    \"?work wdt:P1040 wd:Q38222 .\",\n    \"?work wdt:P1431 wd:Q38222 .\",\n    \"?work wdt:P162 wd:Q38222 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , produced , and edited by George Lucas", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:9266 kg:0613 ;\",\n    \"       kg:3493 kg:0613 ;\",\n    \"       kg:5643 kg:0613 ;\",\n    \"       kg:8870 kg:0613 .\"\n    ]}\n "}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"Every Man for Himself\\\".\",\n    \"?item wdt:P800 \\\"Passion\\\".\",\n    \"?item wdt:P800 \\\"Notre Musique\\\".\",\n    \"?item wdt:P108 \\\"Cahiers du cinéma\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P58 wd:Q972787;\",\n \t\t\"wdt:P1040 wd:Q672061;\",\n \t\t\"wdt:P58 wd:Q3141131.\",\n \t\t\"?item wdt:P108 wd:Q909176.\"\n \t\t,\"}\"\n \t]\n }"}
{"question": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:3353 ?film1 .\",\n    \"?x kg:5303 ?film2 .\",\n    \"?film1 kg:2653 .\",\n    \"?film2 kg:2627 .\",\n    \"?x kg:2120 ?employer .\",\n    \"?employer kg:9335 .\",\n    \"?x kg:3353 ?film3 .\",\n    \"?x kg:5303 ?film4 .\",\n    \"?film3 kg:7573 .\",\n    \"?film4 kg:7573 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q88553 ;\", \"# producer Bob Yari\",\n    \"wdt:P162 wd: Q198289 ;\", \"# producer Pierce Brosnan\",\n    \"wdt:P162 wd:Q707215 ;\", \"# producer Toby Emmerich\",\n    \"wdt:P162 wd:Q5355828 ;\", \"# producer Elie Samaha\",\n    \"FILTER (CONTAINS(LCASE(str(?movie)), \\\"laws of attraction\\\"))\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  VALUES ?movie { wd:Q819109 }.\",\n    \"  VALUES ?person { wd:Q81520 wd:Q1969128 wd:Q381545 wd:Q1295611 }.\",\n    \"  { ?movie wdt:P162 ?person . } UNION { ?movie wdt:P1431 ?person . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"  ?movie kg:0533 kg:1278 ;\", \"# Pierce Brosnan as executive producer\",\n    \"             kg:0533 kg:2187 ;\", \"# Bob Yari as executive producer\",\n    \"             kg:0533 kg:7661 ;\", \"# Toby Emmerich as executive producer\",\n    \"             kg:0533 kg:9767 ;\", \"# Elie Samaha as executive producer\",\n    \"             kg:5056 kg:1278 ;\", \"# Pierce Brosnan as producer\",\n    \"             kg:5056 kg:2187 ;\", \"# Bob Yari as producer\",\n    \"             kg:5056 kg:7661 ;\", \"# Toby Emmerich as producer\",\n    \"             kg:5056 kg:9767 .\", \"# Elie Samaha as producer\",\n    \"  FILTER (?movie = kg:5622)\", \"# Laws of Attraction\"\n    ]}\n \t\t \t\t        \t\t"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1476 ?title .\",\n    \"FILTER(CONTAINS(LCASE(?title), 'kagemusha')) .\",\n    \"?item wdt:P162 wd:Q41513 .\",\n    \"?item wdt:P577 ?releaseDate .\",\n    \"?item wdt:P161 ?writer .\",\n    \"FILTER(?writer = wd:Q41513) .\",\n    \"?item wdt:P98 ?editor .\",\n    \"FILTER(?editor = wd:Q41513) .\",\n    \"?item wdt:P162 ?producer .\",\n    \"FILTER(?producer = wd:Q41513) .\",\n    \"?item wdt:P272 ?executiveProducer .\",\n    \"FILTER(?executiveProducer = wd:Q41513)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  wd:Q8006 wdt:P58 wd:Q854990 .\",\n    \"  wd:Q8006 wdt:P1040 wd:Q854990 .\",\n    \"  wd:Q8006 wdt:P162 wd:Q854990 .\",\n    \"  wd:Q8006 wdt:P1431 wd:Q854990 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  kg:6049 kg:6880 kg:1415 .\",\n    \"  kg:6049 kg:3149 kg:1415 .\",\n    \"  kg:6049 kg:0779 kg:1415 .\",\n    \"  kg:6049 kg:3712 kg:1415 .\",\n    \"  BIND(kg:6049 AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 ?director .\",\n    \"?project wdt:P161 ?editor .\",\n    \"?project wdt:P162 ?writer .\",\n    \"FILTER (?director = wd:Q1234567 || ?director = wd:Q2345678 || ?director = wd:Q3456789) .\",\n    \"FILTER (?editor = wd:Q1234567 || ?editor = wd:Q2345678 || ?editor = wd:Q3456789) .\",\n    \"FILTER (?writer = wd:Q1234567 || ?writer = wd:Q2345678 || ?writer = wd:Q3456789) .\",\n    \"}\"\n  ]\n}\n "}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 wd:Q562108;\",\n    \"         wdt:P57 wd:Q1687239;\",\n    \"         wdt:P57 wd:Q35979475;\",\n    \"         wdt:P58 wd:Q562108;\",\n    \"         wdt:P58 wd:Q1687239;\",\n    \"         wdt:P58 wd:Q35979475;\",\n    \"         wdt:P1040 wd:Q562108;\",\n    \"         wdt:P1040 wd:Q1687239;\",\n    \"         wdt:P1040 wd:Q35979475.\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:0289 kg:0365 ;\",\n    \"         kg:4637 kg:0365, kg:3287, kg:4530 ;\",\n    \"         kg:7265 kg:0365, kg:3287, kg:4530 .\"\n    ]}\n "}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P57 ?director .\",\n    \"?work wdt:P162 ?writer .\",\n    \"?work wdt:P98 ?editor .\",\n    \"FILTER((?director = wd:Q1234567) && (?writer = wd:Q1234568) && (?editor = wd:Q1234569))\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P57 wd:Q35979475;\",\n    \"         wdt:P57 wd:Q562108;\",\n    \"         wdt:P57 wd:Q1687239;\",\n    \"         wdt:P58 wd:Q35979475;\",\n    \"         wdt:P58 wd:Q562108;\",\n    \"         wdt:P58 wd:Q1687239;\",\n    \"         wdt:P1040 wd:Q35979475;\",\n    \"         wdt:P1040 wd:Q562108;\",\n    \"         wdt:P1040 wd:Q1687239.\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work kg:9712 kg:5238 ;\",\n    \"       kg:2466 kg:7889 ;\",\n    \"       kg:9552 kg:2197 .\"\n    ]}\n "}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?person .\",\n    \"{ ?film wdt:P1476 \\\"The Whip and the Body\\\" . }\",\n    \"UNION { ?film wdt:P1476 \\\"Hatchet for the Honeymoon\\\" . }\",\n    \"UNION { ?film wdt:P1476 \\\"Danger: Diabolik\\\" . }\",\n    \"UNION { ?film wdt:P1476 \\\"Black Sunday\\\" . }\",\n    \"?person wdt:P106 ?occupation .\",\n    \"?occupation wdt:P279* wdt:Q2385804 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film1 wdt:P57 ?person .\",\n    \"?film2 wdt:P344 ?person .\",\n    \"?film3 wdt:P57 ?person .\",\n    \"?person wdt:P106 wd:Q3282637 .\",\n    \"FILTER (?film1 = wd:Q600762 && ?film2 = wd:Q283699 && ?film3 = wd:Q629819 || ?film1 = wd:Q600762 && ?film2 = wd:Q629819 && ?film3 = wd:Q283699 || ?film1 = wd:Q283699 && ?film2 = wd:Q600762 && ?film3 = wd:Q629819 || ?film1 = wd:Q283699 && ?film2 = wd:Q629819 && ?film3 = wd:Q600762 || ?film1 = wd:Q629819 && ?film2 = wd:Q600762 && ?film3 = wd:Q283699 || ?film1 = wd:Q629819 && ?film2 = wd:Q283699 && ?film3 = wd:Q600762).\",\n    \"?film4 wdt:P57 ?person .\",\n    \"FILTER (?film4 = wd:Q1216566)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:2265 kg:7705 ;\",\n    \"      kg:2265 kg:2063 ;\",\n    \"      kg:2265 kg:7198 ;\",\n    \"      kg:2265 kg:7085 ;\",\n    \"      kg:6263 kg:0627 ;\",\n    \"      kg:3120 ?y .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person\",\n    \"WHERE {\",\n    \"  VALUES ?film { wd:Q7450716 wd:Q1678670 wd:Q3028663 wd:Q7294399 }.\",\n    \"  ?film wdt:P57 ?person .\",\n    \"  ?film wdt:P162 ?person .\",\n    \"  ?film wdt:P164 ?person .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P57 wd:Q3485595 ;\",\n    \"         wdt:P57 wd:Q862058 ;\",\n    \"         wdt:P57 wd:Q3016313 ;\",\n    \"         wdt:P57 wd:Q1473406 ;\",\n    \"         wdt:P106 wd:Q33999 ;\",\n    \"         wdt:P344 wd:Q3485595 ;\",\n    \"         wdt:P344 wd:Q862058 ;\",\n    \"         wdt:P344 wd:Q3016313 ;\",\n    \"         wdt:P344 wd:Q1473406 .\"\n  ]\n  }\n "}
{"question": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:9234 kg:9038 ;\",\n    \"         kg:5713 kg:9038 ;\",\n    \"         kg:5366 kg:9038 .\",\n    \"?person kg:9234 kg:9628 ;\",\n    \"         kg:5713 kg:9628 ;\",\n    \"         kg:5366 kg:9628 .\",\n    \"?person kg:9234 kg:0113 ;\",\n    \"         kg:5713 kg:0113 ;\",\n    \"         kg:5366 kg:0113 .\",\n    \"?person kg:9234 kg:1977 ;\",\n    \"         kg:5713 kg:1977 ;\",\n    \"         kg:5366 kg:1977 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?work\",\n    \"WHERE {\",\n    \"?work wdt:P50 wd:Q1176647.\",\n    \"?work wdt:P162 wd:Q1176647.\",\n    \"?work wdt:P57 wd:Q1176647.\",\n    \"FILTER NOT EXISTS { ?work wdt:P50 [] . FILTER (? != wd:Q1176647) }\",\n    \"FILTER NOT EXISTS { ?work wdt:P162 [] . FILTER (? != wd:Q1176647) }\",\n    \"FILTER NOT EXISTS { ?work wdt:P57 [] . FILTER (? != wd:Q1176647) }\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q1234567; # director Ole John\",\n    \"      wdt:P161 wd:Q1234568; # editor Jens Jørgen Thorsen\",\n    \"      wdt:P162 wd:Q1234569. # writer Jørgen Leth\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q35979475;\",\n    \"         wdt:P57 wd:Q1687239;\",\n    \"         wdt:P57 wd:Q562108;\",\n    \"         wdt:P58 wd:Q35979475;\",\n    \"         wdt:P58 wd:Q1687239;\",\n    \"         wdt:P58 wd:Q562108;\",\n    \"         wdt:P1040 wd:Q35979475;\",\n    \"         wdt:P1040 wd:Q1687239;\",\n    \"         wdt:P1040 wd:Q562108.\",\n    \"}\"\n  ]\n}"}
{"question": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:0677 kg:7862 ;\",\n    \"       kg:8507 kg:7862 ;\",\n    \"       kg:4848 kg:7862 .\",\n    \"   FILTER (?film = ?film)\",\n    \"   UNION\",\n    \"{ ?film kg:0677 kg:3772 ;\",\n    \"       kg:8507 kg:3772 ;\",\n    \"       kg:4848 kg:3772 . }\",\n    \"   UNION\",\n    \"{ ?film kg:0677 kg:7339 ;\",\n    \"       kg:8507 kg:7339 ;\",\n    \"       kg:4848 kg:7339 . }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# film is an instance of film\",\n    \"wdt:P57 wd:Q222586 ;\", \"# directed by Eli Roth\",\n    \"wdt:P162 wd:Q222586 ;\", \"# written by Eli Roth\",\n    \"wdt:P57 wd:Q296464 ;\", \"# directed by Edgar Wright\",\n    \"wdt:P162 wd:Q296464 ;\", \"# written by Edgar Wright\",\n    \"wdt:P57 wd:Q561849 ;\", \"# directed by Rob Zombie\",\n    \"wdt:P162 wd:Q561849 ;\", \"# written by Rob Zombie\",\n    \"wdt:P57 wd:Q1724 ;\", \"# directed by Quentin Tarantino\",\n    \"wdt:P162 wd:Q1724 ;\", \"# written by Quentin Tarantino\",\n    \"wdt:P57 wd:Q310801 ;\", \"# directed by Robert Rodriguez\",\n    \"wdt:P162 wd:Q310801 ;\", \"# written by Robert Rodriguez\",\n    \"FILTER (regex(str(?film), \\\"Grindhouse\\\"))\", \"# filter for Grindhouse\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"  VALUES (?film) {(wd:Q679023)}\",\n    \"  VALUES (?director1) {(wd:Q358714)}\", \"(wd:Q522057)\", \"(wd:Q298255)\", \"(wd:Q3772)\", \"(wd:Q47284)\",\n    \"  ?film wdt:P57 ?director1 .\",\n    \"  ?film wdt:P58 ?director1 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?film kg:2115 .\",\n    \"{\",\n    \"?film kg:0123 ?director .\",\n    \"FILTER (?director = kg:1454 || ?director = kg:8328 || ?director = kg:0795 || ?director = kg:9736 || ?director = kg:2406) .\",\n    \"} UNION {\",\n    \"?film kg:2062 ?screenwriter .\",\n    \"FILTER (?screenwriter = kg:1454 || ?screenwriter = kg:8328 || ?screenwriter = kg:0795 || ?screenwriter = kg:9736 || ?screenwriter = kg:2406) .\",\n    \"}\",\n    \"?resource = ?film .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?producer\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"(wdt:P162|wdt:P577)|wdt:P170;\",\n    \"?producer wdt:P800 ?film.\",\n    \"FILTER(?film IN (wd:Q173235, wd:Q182683, wd:Q1478253, wd:Q706076))\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?producer\",\n    \"WHERE {\",\n    \"?producer wdt:P106 wd:Q3282637 ;\",\n    \"         wdt:P58 wd:Q567519, wd:Q686125, wd:Q327427, wd:Q2789885 ;\",\n    \"         wdt:P1040 wd:Q567519, wd:Q686125, wd:Q327427, wd:Q2789885 .\"\n    ]}\n "}
{"question": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:9570 ;\",\n    \"kg:6788 kg:1392, kg:5270, kg:5693, kg:3942 ;\",\n    \"kg:3259 kg:1392, kg:5270, kg:5693, kg:3942 .\"\n    ,\n    \"?x kg:1121 kg:9570 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 wd:Q2160348; # directed by Thomas Schnauz\",\n    \"wdt:P162 wd:Q2160348. # written by Thomas Schnauz\",\n    \"?project wdt:P57 wd:Q552554; # directed by Peter Gould\",\n    \"wdt:P162 wd:Q552554. # written by Peter Gould\",\n    \"?project wdt:P57 wd:Q15726164; # directed by George Mastras\",\n    \"wdt:P162 wd:Q15726164. # written by George Mastras\",\n    \"?project wdt:P57 wd:Q7395266; # directed by Sam Catlin\",\n    \"wdt:P162 wd:Q7395266. # written by Sam Catlin\",\n    \"?project wdt:P57 wd:Q310544; # directed by Vince Gilligan\",\n    \"wdt:P162 wd:Q310544. # written by Vince Gilligan\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 wd:Q15042700 ; wdt:P58 wd:Q15042700 .\",\n    \"FILTER EXISTS { ?project wdt:P57 wd:Q7174311 ; wdt:P58 wd:Q7174311 }\",\n    \"FILTER EXISTS { ?project wdt:P57 wd:Q5542223 ; wdt:P58 wd:Q5542223 }\",\n    \"FILTER EXISTS { ?project wdt:P57 wd:Q7407299 ; wdt:P58 wd:Q7407299 }\",\n    \"FILTER EXISTS { ?project wdt:P57 wd:Q4500 ; wdt:P58 wd:Q4500 }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:0286 kg:4558 ; kg:5267 kg:4558 .\",\n    \"FILTER EXISTS { ?project kg:0286 kg:6899 ; kg:5267 kg:6899 }\",\n    \"FILTER EXISTS { ?project kg:0286 kg:6928 ; kg:5267 kg:6928 }\",\n    \"FILTER EXISTS { ?project kg:0286 kg:2196 ; kg:5267 kg:2196 }\",\n    \"FILTER EXISTS { ?project kg:0286 kg:0982 ; kg:5267 kg:0982 }\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director\",\n    \"WHERE {\",\n    \"?production wdt:P57 ?director .\",\n    \"?production wdt:P161 wd:Q1234567 .\", \"# Replace with Ole John's ID\",\n    \"?production wdt:P161 wd:Q1234568 .\", \"# Replace with Jens Jørgen Thorsen's ID\",\n    \"?production wdt:P161 wd:Q1234569 .\", \"# Replace with Jørgen Leth's ID\",\n    \"?director wdt:P162 ?production .\",\n    \"?director wdt:P577 ?production .\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P58 ?writer .\",\n    \"?item wdt:P1040 ?editor .\",\n    \"?item wdt:P161 wd:Q35979475 .\",\n    \"?item wdt:P161 wd:Q1687239 .\",\n    \"?item wdt:P161 wd:Q562108 .\",\n    \"FILTER (?director = ?writer && ?writer = ?editor)\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?resource kg:6229 ?director .\",\n    \"?resource kg:4344 ?screenwriter .\",\n    \"?resource kg:0618 ?filmEditor .\",\n    \"?production kg:6229 ?director ; kg:4344 ?screenwriter ; kg:0618 ?filmEditor ; kg:hasCast [kg:playedBy kg:3628] ; kg:hasCast [kg:playedBy kg:7861] ; kg:hasCast [kg:playedBy kg:8050].\",\n    \"?director = ?resource .\",\n    \"?screenwriter = ?resource .\",\n    \"?filmEditor = ?resource .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditor\",\n    \"?film WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q6625963 ;\", \"# film editor occupation\",\n    \"wdt:P162 wd:Q1339 ;\", \"# executive producer\",\n    \"wdt:P50 ?film .\", \"# writer\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"(wdt:P1476 \\\"Star Wars: Episode IV – A New Hope\\\" || wdt:P1476 \\\"Star Wars: Episode I – The Phantom Menace\\\" || wdt:P1476 \\\"Star Wars: Episode VI – Return of the Jedi\\\" || wdt:P1476 \\\"Star Whores\\\")\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q7042855 ;\",\n    \"       wdt:P58 wd:Q17738, wd:Q165713, wd:Q181803, wd:Q3968346 ;\",\n    \"       wdt:P1431 wd:Q17738, wd:Q165713, wd:Q181803, wd:Q3968346 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7901 kg:9486 ;\",\n    \"kg:9870 kg:4212, kg:2824, kg:7215, kg:3339 ;\",\n    \"kg:8729 kg:4212, kg:2824, kg:7215, kg:3339 .\"\n    ]}\n   \t\t\t\t\t\t    \t  \t   "}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q24856 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q123456 ;\", \"# written by Ole John (replace with actual ID)\",\n    \"wdt:P162 wd:Q674165 ;\", \"# written by Jens Jørgen Thorsen (replace with actual ID)\",\n    \"wdt:P162 wd:Q983877 ;\", \"# written by Jørgen Leth (replace with actual ID)\",\n    \"wdt:P577 wd:Q15742419 ;\", \"# publication date of Stop for Bud (replace with actual ID or filter)\",\n    \"FILTER NOT EXISTS { ?item wdt:P162 [] . FILTER (?item != wd:Q123456 && ?item != wd:Q674165 && ?item != wd:Q983877) }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  VALUES ?film { wd:Q20729551 }.\",\n    \"  VALUES ?person { wd:Q35979475 wd:Q1687239 wd:Q562108 }.\",\n    \"  { ?film wdt:P58 ?person . } UNION\",\n    \"  { ?film wdt:P57 ?person . } UNION\",\n    \"  { ?film wdt:P1040 ?person . }\",\n    \"}\"\n  ]\n}"}
{"question": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  VALUES ?person { kg:2342 kg:1653 kg:6976 }\",\n    \"  VALUES ?role { kg:1733 kg:1684 kg:8356 }\",\n    \"  VALUES ?film { kg:7483 }\",\n    \"  ?person ?role ?film .\",\n    \"  BIND (?film AS ?resource)\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P161 wd:Q379416 .\", \"# Star Wars: Episode I – The Phantom Menace\",\n    \"?item wdt:P161 wd:Q105434 .\", \"# The Land Before Time\",\n    \"?item wdt:P162 wd:Q47559471 .\", \"# Anyone Lived in a Pretty How Town\",\n    \"?item wdt:P162 wd:Q454851 .\", \"# 1:42.08\",\n    \"?item wdt:P162 wd:Q655569 .\", \"# Look at Life\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P1431 wd:Q165713;\",\n \t\t\"?item wdt:P1431 wd:Q192403;\",\n \t\t\"?item wdt:P58 wd:Q613974;\",\n \t\t\"?item wdt:P58 wd:Q208910;\",\n \t\t\"?item wdt:P58 wd:Q1869678;\",\n \t\t\"?item wdt:P344 wd:Q613974;\",\n \t\t\"?item wdt:P344 wd:Q208910;\",\n \t\t\"?item wdt:P344 wd:Q1869678\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8695 kg:3675 ;\",\n    \"       kg:8695 kg:4438 ;\",\n    \"       kg:3076 kg:7257 ;\",\n    \"       kg:3076 kg:4002 ;\",\n    \"       kg:3076 kg:2498 ;\",\n    \"       kg:4014 kg:7257 ;\",\n    \"       kg:4014 kg:4002 ;\",\n    \"       kg:4014 kg:2498 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q604943; # films\",\n    \"wdt:P57 ?director; # director\",\n    \"wdt:P162 ?writer; # writer\",\n    \"wdt:P98 ?editor; # editor\",\n    \"wdt:P272 ?executiveProducer. # executive producer\",\n    \"?item wdt:P161 wd:Q604944; # films\",\n    \"FILTER((?director = ?item) && (?writer = ?item) && (?editor = ?item) && (?executiveProducer = ?item))\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2086445 ; wdt:P57 wd:Q1361018.\",\n    \"?item wdt:P58 wd:Q2086445 ; wdt:P58 wd:Q1361018.\",\n    \"?item wdt:P1040 wd:Q2086445 ; wdt:P1040 wd:Q1361018.\",\n    \"?item wdt:P1431 wd:Q2086445 ; wdt:P1431 wd:Q1361018.\",\n    \"}\"\n  ]\n}"}
{"question": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:4746 kg:1533 .\",\n    \"?person kg:3862 kg:1533 .\",\n    \"?person kg:2045 kg:1533 .\",\n    \"?person kg:1324 kg:1533 .\",\n    \"?person kg:4746 kg:8748 .\",\n    \"?person kg:3862 kg:8748 .\",\n    \"?person kg:2045 kg:8748 .\",\n    \"?person kg:1324 kg:8748 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\", \"# instance of film\",\n    \"wdt:P162 wd:Q207683 ;\", \"# written by Jim Abrahams\",\n    \"wdt:P162 wd:Q329637 ;\", \"# written by Jerry Zucker\",\n    \"wdt:P162 wd:Q329638 ;\", \"# written by David Zucker\",\n    \"wdt:P57 wd:Q207683 ;\", \"# directed by Jim Abrahams\",\n    \"wdt:P57 wd:Q329637 ;\", \"# directed by Jerry Zucker\",\n    \"wdt:P57 wd:Q329638 ;\", \"# directed by David Zucker\",\n    \"wdt:P161 wd:Q207683 ;\", \"# executive produced by Jim Abrahams\",\n    \"wdt:P161 wd:Q329637 ;\", \"# executive produced by Jerry Zucker\",\n    \"wdt:P161 wd:Q329638 ;\", \"# executive produced by David Zucker\",\n    \"FILTER (LANGMATCHES(LANG(?itemLabel), 'en'))\",\n    \"?item rdfs:label ?itemLabel .\",\n    \"FILTER CONTAINS (?itemLabel, 'Airplane!')\",\n    \"}\"\n  ]\n}"}
{"question": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\", \"# film is an instance of movie\",\n    \"wdt:P162 wd:Q380885 ;\", \"# written by Jim Abrahams\",\n    \"wdt:P162 wd:Q722939 ;\", \"# written by David Zucker\",\n    \"wdt:P162 wd:Q723011 ;\", \"# written by Jerry Zucker\",\n    \"wdt:P57 wd:Q380885 ;\", \"# directed by Jim Abrahams\",\n    \"wdt:P57 wd:Q722939 ;\", \"# directed by David Zucker\",\n    \"wdt:P57 wd:Q723011 ;\", \"# directed by Jerry Zucker\",\n    \"wdt:P161 wd:Q380885 ;\", \"# executive produced by Jim Abrahams\",\n    \"wdt:P161 wd:Q722939 ;\", \"# executive produced by David Zucker\",\n    \"wdt:P161 wd:Q723011 ;\", \"# executive produced by Jerry Zucker\",\n    \"FILTER ( ?film = wd:Q465389 )\", \"# filter for the film 'Airplane!'\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q685746.\",\n    \"?item wdt:P57 wd:Q685746.\",\n    \"?item wdt:P162 wd:Q685746.\",\n    \"?item wdt:P368 wd:Q1762368.\",\n    \"?item wdt:P368 wd:Q2060374.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q1140578;\",\n    \"?item wdt:P58 wd:Q1140578;\",\n    \"?item wdt:P1431 wd:Q1140578;\",\n    \"?item wdt:P57 wd:Q2085;\",\n    \"?item wdt:P58 wd:Q2085;\",\n    \"?item wdt:P1431 wd:Q2085;\",\n    \"?item wdt:P1431 wd:Q1511905;\",\n    \"?item wdt:P1431 wd:Q583406;\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8250 kg:8673 ;\",\n    \"kg:3480 kg:8673 ;\",\n    \"kg:9095 kg:8673, kg:8911, kg:6685, kg:3424 .\"\n    ]}\n "}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q561516; wdt:P57 wd:Q551571; wdt:P57 wd:Q557408; wdt:P57 wd:Q553714; wdt:P57 wd:Q39259.\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q116760 ;\",\n    \"       wdt:P57 wd:Q1033656 ;\",\n    \"       wdt:P57 wd:Q7546 ;\",\n    \"       wdt:P57 wd:Q1365463 ;\",\n    \"       wdt:P57 wd:Q982339 ;\",\n    \"       wdt:P58 wd:Q116760 ;\",\n    \"       wdt:P58 wd:Q1033656 ;\",\n    \"       wdt:P58 wd:Q7546 ;\",\n    \"       wdt:P58 wd:Q1365463 ;\",\n    \"       wdt:P58 wd:Q982339 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:0018 kg:8677 ;\",\n    \"       kg:2253 kg:8473, kg:6967, kg:6905, kg:3385, kg:9987 ;\",\n    \"       kg:8834 kg:8473, kg:6967, kg:6905, kg:3385, kg:9987 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?composer wdt:P162 wd:Q1139495.\",\n    \"?composer wdt:P161 wd:Q223085, wd:Q1750353, wd:Q1067264.\",\n    \"?composer wdt:P57 wd:Q1139495, wd:Q1750353, wd:Q1067264.\",\n    \"?composer wdt:P344 wd:Q1139495, wd:Q1750353, wd:Q1067264.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?resource WHERE {\",\n \t\t\"?composer wdt:P86 wd:Q550196.\",\n \t\t\"?resource wdt:P57 wd:Q192115, wd:Q1653396, wd:Q656357.\",\n \t\t\"?resource wdt:P161 wd:Q192115, wd:Q1653396, wd:Q656357.\",\n \t\t\"?resource wdt:P344 wd:Q192115, wd:Q1653396, wd:Q656357.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?composer kg:5687 kg:6804 ;\",\n    \"         kg:9737 ?sinCity, ?dameToKillFor, ?sharkboy ;\",\n    \"         kg:4329 ?sinCity, ?dameToKillFor, ?sharkboy ;\",\n    \"         kg:7674 ?sinCity, ?dameToKillFor, ?sharkboy .\",\n    \"?sinCity kg:id kg:1669 .\",\n    \"?dameToKillFor kg:id kg:0943 .\",\n    \"?sharkboy kg:id kg:7667 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P61 wd:Q379416 .\",\n    \"?item wdt:P57 wd:Q1726 .\",\n    \"?item wdt:P57 wd:Q281040 .\",\n    \"?item wdt:P57 wd:Q219158 .\",\n    \"FILTER(wdt:P577(?item) = wdt:P577(wd:Q379416))\",\n    \"}\"\n  ]\n}"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?s WHERE {\",\n \t\t\"?s wdt:P86 wd:Q470895;\",\n \t\t\"?s wdt:P86 wd:Q199039;\",\n \t\t\"?s wdt:P1040 wd:Q45602;\",\n \t\t\"?s wdt:P161 wd:Q45602;\",\n \t\t\"?s wdt:P1040 wd:Q238211;\",\n \t\t\"?s wdt:P161 wd:Q238211;\",\n \t\t\"?s wdt:P1040 wd:Q3986814;\",\n \t\t\"?s wdt:P161 wd:Q3986814;\",\n \t\t\"}\"\n \t]\n }"}
{"question": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"?x kg:3584 kg:9350 ;\",\n    \"     kg:3584 kg:8907 ;\",\n    \"     kg:1558 kg:2929 ;\",\n    \"     kg:1558 kg:6990 ;\",\n    \"     kg:1558 kg:3709 ;\",\n    \"     kg:7599 kg:2929 ;\",\n    \"     kg:7599 kg:6990 ;\",\n    \"     kg:7599 kg:3709 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P162 wd:Q315070.\",\n    \"?movie wdt:P170 wd:Q315070.\",\n    \"?movie wdt:P57 wd:Q315070.\",\n    \"FILTER((NOT EXISTS {?movie wdt:P162 [] . FILTER(?movie != wd:Q315070)}))\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 wd:Q80605237; # directed by Yūdai Yamaguchi\",\n    \"wdt:P162 wd:Q80605237; # written by Yūdai Yamaguchi\",\n    \"wdt:P98 wd:Q80605237. # edited by Yūdai Yamaguchi\",\n    \"?project wdt:P57 wd:Q5358119; # directed by Ernesto Díaz Espinoza\",\n    \"?project wdt:P162 wd:Q5358119; # written by Ernesto Díaz Espinoza\",\n    \"?project wdt:P98 wd:Q5358119. # edited by Ernesto Díaz Espinoza\",\n    \"?project wdt:P57 wd:Q4669515; # directed by Adrián García Bogliano\",\n    \"?project wdt:P162 wd:Q4669515; # written by Adrián García Bogliano\",\n    \"?project wdt:P98 wd:Q4669515. # edited by Adrián García Bogliano\",\n    \"?project wdt:P57 wd:Q1051733; # directed by Yoshihiro Nishimura\",\n    \"?project wdt:P162 wd:Q1051733; # written by Yoshihiro Nishimura\",\n    \"?project wdt:P98 wd:Q1051733. # edited by Yoshihiro Nishimura\",\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project wdt:P57 wd:Q4023328 ;\",\n    \"         wdt:P58 wd:Q4023328 ;\",\n    \"         wdt:P1040 wd:Q4023328 .\",\n    \"?project wdt:P57 wd:Q5836844 ;\",\n    \"         wdt:P58 wd:Q5836844 ;\",\n    \"         wdt:P1040 wd:Q5836844 .\",\n    \"?project wdt:P57 wd:Q5658534 ;\",\n    \"         wdt:P58 wd:Q5658534 ;\",\n    \"         wdt:P1040 wd:Q5658534 .\",\n    \"?project wdt:P57 wd:Q4022902 ;\",\n    \"         wdt:P58 wd:Q4022902 ;\",\n    \"         wdt:P1040 wd:Q4022902 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?project\",\n    \"WHERE {\",\n    \"?project kg:5097 kg:4231 ;\",\n    \"         kg:9452 kg:4231 ;\",\n    \"         kg:7928 kg:4231 .\",\n    \"?project kg:5097 kg:2932 ;\",\n    \"         kg:9452 kg:2932 ;\",\n    \"         kg:7928 kg:2932 .\",\n    \"?project kg:5097 kg:4009 ;\",\n    \"         kg:9452 kg:4009 ;\",\n    \"         kg:7928 kg:4009 .\",\n    \"?project kg:5097 kg:6145 ;\",\n    \"         kg:9452 kg:6145 ;\",\n    \"         kg:7928 kg:6145 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditor\",\n    \"?film WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q6625963 ;\", \"# film editor\",\n    \"wdt:P162 ?film .\", \"# film edited\",\n    \"?film wdt:P1476 ?title .\", \"# title of the film\",\n    \"FILTER (?title = \\\"Pietà\\\" || ?title = \\\"Dream\\\" || ?title = \\\"Moebius\\\") .\",\n    \"?filmEditor wdt:P162 ?film ;\", \"# film edited by editor\",\n    \"wdt:P178 ?film ;\", \"# writer of the film\",\n    \"wdt:P1431 ?film .\", \"# executive producer of the film\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 wd:Q7042855 ;\",\n    \"       wdt:P58 ?screenwriter ;\",\n    \"       wdt:P1431 ?executiveProducer ;\",\n    \"       wdt:P161 wd:Q483197, wd:Q484679, wd:Q13471372 .\",\n    \"FILTER (?screenwriter = ?item && ?executiveProducer = ?item)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:3570 ?o1.\",\n    \"?s kg:6357 ?o2.\",\n    \"?s kg:9419 ?o3.\",\n    \"{ ?s kg:8287 ?o4. } UNION { ?s kg:4257 ?o5. } UNION { ?s kg:2395 ?o6. }\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n    \"?filmProducer wdt:P161 wd:Q21286791;\",\n    \"wdt:P161 wd:Q7727486;\",\n    \"wdt:P161 wd:Q7749184;\",\n    \"wdt:P57 ?execProd;\",\n    \"wdt:P57 ?editor;\",\n    \"wdt:P50 ?writer.\",\n    \"?execProd wdt:P106/wdt:P279* wd:Q167565.\",\n    \"?editor wdt:P106/wdt:P279* wd:Q28389.\",\n    \"?writer wdt:P106/wdt:P279* wd:Q622661.\"\n    ,\n    \"FILTER (?execProd = ?filmProducer && ?editor = ?filmProducer && ?writer = ?filmProducer)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?filmProducer\",\n    \"WHERE {\",\n    \"?filmProducer wdt:P106 wd:Q3282637.\",\n    \"?filmProducer wdt:P1431 wd:Q5437360, wd:Q12813010, wd:Q6084069.\",\n    \"?filmProducer wdt:P1040 wd:Q5437360, wd:Q12813010, wd:Q6084069.\",\n    \"?filmProducer wdt:P58 wd:Q5437360, wd:Q12813010, wd:Q6084069.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:1754 kg:0440.\",\n    \"?x kg:8750 kg:0001.\",\n    \"?x kg:6372 kg:0001.\",\n    \"?x kg:0075 kg:0001.\",\n    \"?x kg:8750 kg:9766.\",\n    \"?x kg:6372 kg:9766.\",\n    \"?x kg:0075 kg:9766.\",\n    \"?x kg:8750 kg:1742.\",\n    \"?x kg:6372 kg:1742.\",\n    \"?x kg:0075 kg:1742.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q6625963;\",\n    \"       wdt:P800 ?work1.\",\n    \"       ?work1 wdt:P1476 \\\"Vagabond\\\"@en.\",\n    \"       ?item wdt:P800 ?work2.\",\n    \"       ?work2 wdt:P1476 \\\"Varda by Agnès\\\"@en.\",\n    \"       ?item wdt:P800 ?work3.\",\n    \"       ?work3 wdt:P1476 \\\"The Gleaners and I\\\"@en.\",\n    \"       ?item wdt:P26 wd:Q5595.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?film1 wdt:P58 ?writer .\",\n    \"?film2 wdt:P1040 ?writer .\",\n    \"?film3 wdt:P58 ?writer .\",\n    \"{ ?film1 wdt:P31 wd:Q2298257 . } UNION { ?film2 wdt:P31 wd:Q2493884 . } UNION { ?film3 wdt:P31 wd:Q63993096 . }\",\n    \"?person wdt:P26 ?writer .\",\n    \"?person wdt:P31 wd:Q312258 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:0378 ; kg:3972 ; kg:8833 kg:8782 ; kg:8577 kg:8782 .\",\n    \"?x kg:0378, kg:3972 [ kg:7801 ; kg:6351 ; kg:4098 ] .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?director\",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 wdt:P31 wd:Q11424; wdt:P57 ?director; rdfs:label \\\"The Floorwalker\\\"@en.\",\n \t\t\t\"?film2 wdt:P31 wd:Q11424; wdt:P57 ?director; wdt:P162 ?director; wdt:P170 ?director; rdfs:label \\\"Shoulder Arms\\\"@en.\",\n \t\t\t\"?film3 wdt:P31 wd:Q11424; wdt:P57 ?director; wdt:P162 ?director; wdt:P86 ?director; rdfs:label \\\"The Great Dictator\\\"@en.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?director\",\n \t\t\"WHERE {\",\n \t\t\t\"?film1 wdt:P57 ?director.\",\n \t\t\t\"?film1 wdt:P161 ?director.\",\n \t\t\t\"?film1 wdt:P58 ?director.\",\n \t\t\t\"?film2 wdt:P86 ?director.\",\n \t\t\t\"?film3 wdt:P86 ?director.\",\n \t\t\t\"FILTER (?film1 = wd:Q166739).\",\n \t\t\t\"FILTER (?film2 = wd:Q1140317).\",\n \t\t\t\"FILTER (?film3 = wd:Q109116).\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8521 kg:0540 ;\",\n    \"(kg:2027 | kg:3835 | kg:4961 | kg:8521) (kg:6175 | kg:7067).}\",\n \"].join(\" ]}\n "}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?cinematographer\",\n    \"WHERE {\",\n    \"?planetTerror wdt:P57 ?cinematographer.\",\n    \"?sinCity wdt:P57 ?cinematographer.\",\n    \"?planetTerror wdt:P161 ?starring.\",\n    \"?sinCity wdt:P161 ?starring.\",\n    \"?planetTerror wdt:P58 ?writer.\",\n    \"?sinCity wdt:P58 ?writer.\",\n    \"?planetTerror wdt:P98 ?editor.\",\n    \"?sinCity wdt:P98 ?editor.\",\n    \"?planetTerror wdt:P57 ?cinematographer.\",\n    \"?sinCity wdt:P57 ?cinematographer.\",\n    \"?planetTerror wdt:P57 ?director.\",\n    \"?sinCity wdt:P57 ?director.\",\n    \"FILTER (?starring = ?cinematographer && ?writer = ?cinematographer && ?editor = ?cinematographer && ?director = ?cinematographer).\",\n    \"BINDING (?planetTerror = wd:Q1130839, ?sinCity = wd:Q221554)\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P344 wd:Q1165050;\",\n    \"         wdt:P344 wd:Q192115;\",\n    \"         wdt:P57 wd:Q1165050;\",\n    \"         wdt:P57 wd:Q192115;\",\n    \"         wdt:P58 wd:Q1165050;\",\n    \"         wdt:P58 wd:Q192115;\",\n    \"         wdt:P1040 wd:Q1165050;\",\n    \"         wdt:P1040 wd:Q192115;\",\n    \"         wdt:P161 wd:Q1165050;\",\n    \"         wdt:P161 wd:Q192115 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  ?x kg:4610 kg:8571 ;\",\n    \"         kg:7569 kg:8571 ;\",\n    \"         kg:4600 kg:8571 ;\",\n    \"         kg:9668 kg:8571 ;\",\n    \"         kg:6254 kg:8571 .\",\n    \"  ?x kg:4610 kg:7570 ;\",\n    \"         kg:7569 kg:7570 ;\",\n    \"         kg:4600 kg:7570 ;\",\n    \"         kg:9668 kg:7570 ;\",\n    \"         kg:6254 kg:7570 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q189162.\",\n    \"?item wdt:P161 wd:Q745979.\",\n    \"?item wdt:P57 ?film1.\",\n    \"?film1 wdt:P1476 \\\"Six Men Getting Sick\\\"@en.\",\n    \"?item wdt:P57 ?film2.\",\n    \"?film2 wdt:P1476 \\\"The Black Ghiandola\\\"@en.\",\n    \"?item wdt:P57 ?film3.\",\n    \"?film3 wdt:P1476 \\\"Twin Peaks\\\"@en.\",\n    \"?item wdt:P57 ?film4.\",\n    \"?film4 wdt:P1476 \\\"Lumière and Company\\\"@en.\",\n    \"?item wdt:P57 ?film5.\",\n    \"?film5 wdt:P1476 \\\"Dune\\\"@en.\",\n    \"?item wdt:P57 ?film6.\",\n    \"?film6 wdt:P1476 \\\"Inland Empire\\\"@en.\",\n    \"?item wdt:P57 ?film7.\",\n    \"?film7 wdt:P1476 \\\"Boat\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P1040 wd:Q3485595;\",\n \t\t\"wdt:P344 wd:Q3485595.\",\n \t\t\"?item wdt:P161 wd:Q56756907, wd:Q2085, wd:Q507285, wd:Q114819, wd:Q862058, wd:Q3641257\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7911 kg:5484 ;\",\n    \"kg:9765 kg:5484 ;\",\n    \"kg:8903 kg:9422, kg:6104, kg:9344, kg:2112, kg:9491, kg:4868 .\"\n    ]}\n \t\t \t\t\t    \t  \t   \t\t"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"Vagabond\\\" ;\",\n    \"       wdt:P800 \\\"The Gleaners and I\\\" ;\",\n    \"       wdt:P802 wd:Q5595 ;\",\n    \"       wdt:P26 wd:Q5595 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q2493884 ;\",\n    \"         wdt:P57 wd:Q2298257 ;\",\n    \"         wdt:P58 wd:Q2493884 ;\",\n    \"         wdt:P58 wd:Q2298257 ;\",\n    \"         wdt:P1040 wd:Q2493884 ;\",\n    \"         wdt:P1040 wd:Q2298257 ;\",\n    \"         wdt:P26 wd:Q312258 ;\",\n    \"         wdt:P737 wd:Q312258 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:9098 ; kg:5087 ; kg:6708 ;\",\n    \"       kg:5873 kg:6337 ;\",\n    \"       kg:9175 kg:6337 .\",\n    \"?f1 kg:0393 ; kg:6708 ?x .\",\n    \"?f2 kg:2694 ; kg:6708 ?x .\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?editor wdt:P161 wd:Q77253124.\",\n    \"?editor wdt:P57 ?person.\",\n    \"?executiveProducer wdt:P161 wd:Q77253124.\",\n    \"?executiveProducer wdt:P57 ?person.\",\n    \"?cinematographer wdt:P161 wd:Q77253124.\",\n    \"?cinematographer wdt:P57 ?person.\",\n    \"?item wdt:P50 ?person.\",\n    \"?item wdt:P170 ?person.\",\n    \"FILTER (?item = wd:Q11943353 || ?item = wd:Q113063164 || ?item = wd:Q115695685)\",\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P1040 wd:Q12813010 ;\",\n    \"         wdt:P1431 wd:Q12813010 ;\",\n    \"         wdt:P344 wd:Q12813010 ;\",\n    \"         wdt:P161 wd:Q5265241 ;\",\n    \"         wdt:P58 wd:Q5265241 ;\",\n    \"         wdt:P161 wd:Q6084069 ;\",\n    \"         wdt:P58 wd:Q6084069 ;\",\n    \"         wdt:P161 wd:Q6099428 ;\",\n    \"         wdt:P58 wd:Q6099428 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:2123 ?y .\",\n    \"?x kg:2874 ?z .\",\n    \"?y kg:8006 kg:9523 .\",\n    \"?y kg:6971 kg:9523 .\",\n    \"?y kg:4163 kg:9523 .\",\n    \"{ ?z kg:name \\\"Destiny\\\" . } UNION { ?z kg:name \\\"The Waiting Room\\\" . } UNION { ?z kg:name \\\"The Third Page\\\" . }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424;\",\n    \"(wdt:P162|wdt:P577|wdt:P170) ?person.\",\n    \"?film wdt:P1476 ?title.\",\n    \"FILTER(?title IN(\\\"Pay Day\\\", \\\"Modern Times\\\", \\\"The Floorwalker\\\", \\\"Work\\\")).\",\n    \"?person wdt:P106 wd:Q2526255.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q199039.\",\n    \"?item wdt:P57 wd:Q45602.\",\n    \"?item wdt:P57 wd:Q166739.\",\n    \"?item wdt:P57 wd:Q2445896.\",\n    \"?item wdt:P58 wd:Q199039.\",\n    \"?item wdt:P58 wd:Q45602.\",\n    \"?item wdt:P58 wd:Q166739.\",\n    \"?item wdt:P58 wd:Q2445896.\",\n    \"?item wdt:P1040 wd:Q7042855.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:3822 ?o1.\",\n    \"?s kg:6336 ?o2.\",\n    \"?s kg:1978 ?o3.\",\n    \"{ ?f kg:7167 . } UNION { ?f kg:8148 . } UNION { ?f kg:7742 . } UNION { ?f kg:9435 . }\",\n    \"?s ?p ?f\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"The Waiting Room\\\".\",\n    \"?item wdt:P800 \\\"Fate\\\".\",\n    \"?item wdt:P800 \\\"The Confession\\\".\",\n    \"?item wdt:P3091 ?writer.\",\n    \"?item wdt:P162 ?executiveProducer.\",\n    \"?item wdt:P98 ?editor.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P58 wd:Q6084069 ; wdt:P1040 wd:Q6084069 ; wdt:P1431 wd:Q6084069.\",\n    \"?item wdt:P58 wd:Q5437360 ; wdt:P1040 wd:Q5437360 ; wdt:P1431 wd:Q5437360.\",\n    \"?item wdt:P58 wd:Q12813010 ; wdt:P1040 wd:Q12813010 ; wdt:P1431 wd:Q12813010.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:2878 kg:3108 ;\",\n    \"     kg:0108 kg:3108 ;\",\n    \"     kg:0403 kg:3108 .\",\n    \"?x kg:2878 kg:7304 ;\",\n    \"     kg:0108 kg:7304 ;\",\n    \"     kg:0403 kg:7304 .\",\n    \"?x kg:2878 kg:7556 ;\",\n    \"     kg:0108 kg:7556 ;\",\n    \"     kg:0403 kg:7556 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 wd:Q983093 .\", \"# Jörn Donner\",\n    \"?film wdt:P57 wd:Q553306 .\", \"# Vilgot Sjöman\",\n    \"?film wdt:P57 wd:Q551851 .\", \"# Hans Alfredson\",\n    \"?film wdt:P57 wd:Q335508 .\", \"# Gustaf Molander\",\n    \"?film wdt:P57 wd:Q39248 .\", \"# Ingmar Bergman\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q982339, wd:Q116760, wd:Q1033656, wd:Q1365463, wd:Q7546 ;\",\n    \"       wdt:P58 wd:Q982339, wd:Q116760, wd:Q1033656, wd:Q1365463, wd:Q7546 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:1292 kg:6386 ;\",\n    \"         kg:1292 kg:5297 ;\",\n    \"         kg:1292 kg:5117 ;\",\n    \"         kg:1292 kg:8407 ;\",\n    \"         kg:1292 kg:1650 ;\",\n    \"         kg:1039 kg:6386 ;\",\n    \"         kg:1039 kg:5297 ;\",\n    \"         kg:1039 kg:5117 ;\",\n    \"         kg:1039 kg:8407 ;\",\n    \"         kg:1039 kg:1650 ;\",\n    \"         kg:4781 kg:3111 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q77812417;\",\n    \"?item wdt:P161 wd:Q117473495;\",\n    \"?item wdt:P106/wdt:P279* wd:Q33999;\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255;\",\n    \"?item wdt:P106/wdt:P279* wd:Q2984756;\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P1431 wd:Q6084069, wd:Q5265241, wd:Q12813010.\",\n    \"?item wdt:P344 wd:Q6084069, wd:Q5265241, wd:Q12813010.\",\n    \"?item wdt:P161 wd:Q6084069, wd:Q5265241, wd:Q12813010.\",\n    \"?item wdt:P1040 wd:Q6084069, wd:Q5265241, wd:Q12813010.\",\n    \"?item wdt:P58 wd:Q6084069, wd:Q5265241, wd:Q12813010.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:5397 kg:7690 ;\",\n    \"      kg:8008 kg:7690, kg:4125, kg:4516 ;\",\n    \"      kg:4870 ? ;\",\n    \"      kg:1635 ? ;\",\n    \"      kg:5844 ? .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?filmEditorSpouse\",\n    \"WHERE {\",\n    \"?filmEditorSpouse wdt:P106 wd:Q6625968.\",\n    \"?filmEditorSpouse wdt:P802 [wdt:P577 ?movieRelease].\",\n    \"{ ?movieTitle wdt:P1476 \\\"The City Tramp\\\". } UNION { ?movieTitle wdt:P1476 \\\"Katzelmacher\\\". } UNION { ?movieTitle wdt:P1476 \\\"Why Does Herr R. Run Amok?\\\". } UNION { ?movieTitle wdt:P1476 \\\"Whity\\\". } UNION { ?movieTitle wdt:P1476 \\\"In a Year of 13 Moons\\\". }\",\n    \"?filmEditorSpouse wdt:P161 ?movieTitle.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"?filmEditor wdt:P106 wd:Q7042855 .\",\n    \"?filmEditor wdt:P26 ?spouse .\",\n    \"{ ?spouse wdt:P58 wd:Q878673 . } UNION { ?spouse wdt:P58 wd:Q567519 . } UNION { ?spouse wdt:P58 wd:Q543382 . } UNION { ?spouse wdt:P58 wd:Q327427 . } UNION { ?spouse wdt:P58 wd:Q570483 . }\",\n    \"}\"\n  ]\n  }\n "}
{"question": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:8794 ?spouse .\",\n    \"?spouse kg:6405 kg:7957 .\",\n    \"?s kg:2960 ?movie .\",\n    \"FILTER (?movie = kg:2308 || ?movie = kg:4703 || ?movie = kg:9613 || ?movie = kg:3549 || ?movie = kg:9634)\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q189162.\",\n    \"?item wdt:P106 wd:Q2526255.\",\n    \"?item wdt:P800 ?film1.\",\n    \"?item wdt:P800 ?film2.\",\n    \"?item wdt:P800 ?film3.\",\n    \"{ ?film1 wdt:P1476 \\\"Tag der Freiheit: Unsere Wehrmacht\\\". } UNION { ?film2 wdt:P1476 \\\"Olympia\\\". } UNION { ?film3 wdt:P1476 \\\"Triumph of the Will\\\". }\",\n    \"}\"\n  ]\n}"}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P21 wd:Q6581072;\",\n    \"       wdt:P57 wd:Q497617;\",\n    \"       wdt:P57 wd:Q158069;\",\n    \"       wdt:P57 wd:Q156497;\",\n    \"       wdt:P58 wd:Q497617;\",\n    \"       wdt:P58 wd:Q158069;\",\n    \"       wdt:P58 wd:Q156497;\",\n    \"       wdt:P1040 wd:Q497617;\",\n    \"       wdt:P1040 wd:Q158069;\",\n    \"       wdt:P1040 wd:Q156497;\"\n    ]}\n   \t\t\t\t\t\t    \t  \t   "}
{"question": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:4957 kg:3675 ;\",\n    \"       kg:4957 kg:7567 ;\",\n    \"       kg:4957 kg:8706 ;\",\n    \"       kg:3486 ?o ;\",\n    \"       kg:0469 ?p ;\",\n    \"       kg:7602 kg:7114 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5;\",\n    \"?item wdt:P106 wd:Q328263;\",\n    \"?item wdt:P27 wd:Q16;\",\n    \"?item wdt:P800 ?film.\",\n    \"{ ?film wdt:P1476 \\\"The Crazies\\\" } UNION { ?film wdt:P1476 \\\"Day of the Dead\\\" } UNION { ?film wdt:P1476 \\\"Monkey Shines\\\" } UNION { ?film wdt:P1476 \\\"Dawn of the Dead\\\" } UNION { ?film wdt:P1476 \\\"Survival of the Dead\\\" }.\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?editor\",\n    \"WHERE {\",\n    \"?editor wdt:P27 wd:Q16;\",\n    \"?editor wdt:P1040 wd:Q627060;\",\n    \"?editor wdt:P57/wdt:P58 wd:Q219170;\",\n    \"?editor wdt:P57/wdt:P58 wd:Q198557;\",\n    \"?editor wdt:P57/wdt:P58 wd:Q219155;\",\n    \"?editor wdt:P57/wdt:P58 wd:Q1277329\",\n    \"}\"\n  ]\n}"}
{"question": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8393 kg:3439 ;\",\n    \"kg:4112 kg:3077 ;\",\n    \"(kg:6796 | kg:2946) (kg:3778 , kg:5806 , kg:1818 , kg:0019)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q212867.\",\n    \"?item wdt:P57 ?director.\",\n    \"?item wdt:P162 ?producer.\",\n    \"{\",\n    \"  ?director wdt:P800 wd:Q685722.\",\n    \"  ?director wdt:P800 wd:Q718587.\",\n    \"  ?director wdt:P800 wd:Q718586.\",\n    \"  ?director wdt:P800 wd:Q1053948.\",\n    \"  ?producer wdt:P802 wd:Q212867\",\n    \"}\"\n  ]\n}\n "}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"  ?item wdt:P57 wd:Q206182;\",\n    \"         wdt:P58 wd:Q206182;\",\n    \"         wdt:P1431 wd:Q206182.\",\n    \"  FILTER (\",\n    \"    ?item = (\",\n    \"      SELECT ?director\",\n    \"      WHERE {\",\n    \"        wd:Q378013 wdt:P57 ?director.\",\n    \"        wd:Q391143 wdt:P57 ?director.\",\n    \"        wd:Q594033 wdt:P57 ?director.\",\n    \"        wd:Q232108 wdt:P57 ?director.\"\n    ,\n    \"      }\"\n    ,\n    \"    )\",\n    \"  ).\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"  ?x kg:3421 ?y .\",\n    \"  ?x kg:5272 ?z .\",\n    \"  ?y kg:7107 kg:8467 .\",\n    \"  ?z kg:3421 kg:0536 .\",\n    \"  ?z kg:3421 kg:2393 .\",\n    \"  ?z kg:3421 kg:2798 .\",\n    \"  ?z kg:3421 kg:1055 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 WD:Q486748.\",\n    \"?item wdt:P108 WD:Q43229.\",\n    \"?item wdt:P108 WD:Q190156.\",\n    \"?item wdt:P69 ?university.\",\n    \"?university wdt:P361 WD:Q764556.\",\n    \"?item wdt:P108 WD:Q905928.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 wd:Q7095994.\",\n    \"?item wdt:P108 wd:Q42944.\",\n    \"?item wdt:P108 wd:Q37033.\",\n    \"?item wdt:P108 wd:Q7432436.\",\n    \"?item wdt:P108 wd:Q7204713.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:4034 kg:9078 ;\",\n    \"kg:4034 kg:5015 ;\",\n    \"kg:4034 kg:0863 ;\",\n    \"kg:4034 kg:5933 ;\",\n    \"kg:4034 kg:6742 ;\",\n    \"kg:8250 ?y .\",\n    \"FILTER (?x = ?y)\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P162 wd:Q42045169.\",\n    \"?movie wdt:P161 wd:Q7086279.\",\n    \"?movie wdt:P162 wd:Q12309324.\",\n    \"?movie wdt:P57 wd:Q12309324.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\",\n    \"       wdt:P58 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\",\n    \"       wdt:P1040 wd:Q1687239, wd:Q35979475, wd:Q562108 ;\",\n    \"       wdt:P162 wd:Q1687239, wd:Q35979475, wd:Q562108 .\",\n    \"}\"\n  ]\n}"}
{"question": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:2226 kg:1439 .\",\n    \"?film kg:8129 kg:7110 .\",\n    \"?film kg:8129 kg:2361 .\",\n    \"?film kg:8129 kg:0116 .\",\n    \"?film kg:2722 kg:7110 .\",\n    \"?film kg:2722 kg:2361 .\",\n    \"?film kg:2722 kg:0116 .\",\n    \"?film kg:1174 kg:7110 .\",\n    \"?film kg:1174 kg:2361 .\",\n    \"?film kg:1174 kg:0116 .\",\n    \"?film kg:0980 kg:7110 .\",\n    \"?film kg:0980 kg:2361 .\",\n    \"?film kg:0980 kg:0116 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q105313.\",\n    \"?item wdt:P161 wd:Q1062853.\",\n    \"?item wdt:P57 wd:Q105313.\",\n    \"?item wdt:P57 wd:Q1062853.\",\n    \"?item wdt:P162 wd:Q105313.\",\n    \"?item wdt:P162 wd:Q1062853.\",\n    \"?item wdt:P577 wd:Q105313.\",\n    \"?item wdt:P577 wd:Q1062853.\",\n    \"?item wdt:P793 wd:Q1166761.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q192115;\",\n \t\t\"wdt:P58 wd:Q192115;\",\n \t\t\"wdt:P161 wd:Q192115;\",\n \t\t\"wdt:P344 wd:Q192115;\",\n \t\t\"wdt:P1040 wd:Q192115.\",\n \t\t\"?item wdt:P57 wd:Q656357;\",\n \t\t\"?item wdt:P58 wd:Q656357;\",\n \t\t\"?item wdt:P161 wd:Q656357;\",\n \t\t\"?item wdt:P344 wd:Q656357;\",\n \t\t\"?item wdt:P1040 wd:Q656357.\",\n \t\t\"?item wdt:P1431 wd:Q15622760\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8401 ; kg:5397 ; kg:9575 ; kg:3797 ; kg:6948 ; kg:6106 .\",\n    \"?x kg:6948 kg:5842 .\",\n    \"?x kg:6948 kg:6130 .\",\n    \"?x kg:6106 kg:1113 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q778124.\",\n    \"?item wdt:P57 ?director.\",\n    \"?item wdt:P162 ?cinematographer.\",\n    \"?item wdt:P58 ?writer.\",\n    \"{\",\n    \"  SELECT ?director ?cinematographer ?writer\",\n    \"  WHERE {\",\n    \"    wd:Q778124 wdt:P57 ?director.\",\n    \"    wd:Q778124 wdt:P162 ?cinematographer.\",\n    \"    wd:Q778124 wdt:P58 ?writer.\",\n    \"    FILTER (?director = ?cinematographer).\",\n    \"    FILTER (?director = ?writer).\",\n    \"  }\",\n    \"}\",\n    \"{\",\n    \"  SELECT ?item2\",\n    \"  WHERE {\",\n    \"    { wd:Q174778 wdt:P58 ?writer2. }\",\n    \"    UNION\",\n    \"    { wd:Q157159 wdt:P58 ?writer2. }\",\n    \"    UNION\",\n    \"    { wd:Q1457086 wdt:P58 ?writer2. }\",\n    \"    FILTER (?writer2 = ?writer).\",\n    \"  }\",\n    \"}\"\n    ,\n    \"{\",\n    \"  SELECT ?item3\",\n    \"  WHERE {\",\n    \"    { wd:Q174778 wdt:P69 ?editor2. }\",\n    \"    UNION\",\n    \"    { wd:Q157159 wdt:P69 ?editor2. }\",\n    \"    UNION\",\n    \"    { wd:Q1457086 wdt:P69 ?editor2. }\",\n    \"    FILTER (?editor2 = ?writer).\",\n    \"  }\",\n    \"}\"\n    ,\n    \"}\"\n  ]\n  }\n "}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P57 wd:Q1699716 ;\",\n    \"         wdt:P58 wd:Q1699716 ;\",\n    \"         wdt:P344 wd:Q1699716 ;\",\n    \"         wdt:P58 wd:Q823767 ;\",\n    \"         wdt:P1040 wd:Q823767 ;\",\n    \"         wdt:P58 wd:Q686125 ;\",\n    \"         wdt:P1040 wd:Q686125 ;\",\n    \"         wdt:P58 wd:Q327427 ;\",\n    \"         wdt:P1040 wd:Q327427 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:0671 kg:2058 ;\",\n    \"        kg:1289 kg:2058 ;\",\n    \"        kg:9084 kg:2058 ;\",\n    \"        kg:1289 kg:0618 ;\",\n    \"        kg:7206 kg:0618 ;\",\n    \"        kg:1289 kg:8658 ;\",\n    \"        kg:7206 kg:8658 ;\",\n    \"        kg:1289 kg:3976 ;\",\n    \"        kg:7206 kg:3976 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?cinematographer wdt:P106 wd:Q18974418;\",\n    \"       wdt:P161 wd:Q1057507.\",\n    \"?item wdt:P57 ?cinematographer;\",\n    \"      wdt:P577 ?releaseDate.\",\n    \"FILTER (?item = wd:Q176803 || ?item = wd:Q2301093 || ?item = wd:Q772814)\",\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P344 wd:Q623051.\",\n    \"?item wdt:P27 wd:Q30.\",\n    \"?item wdt:P57 wd:Q1903317.\",\n    \"?item wdt:P57 wd:Q2520777.\",\n    \"?item wdt:P57 wd:Q627060.\",\n    \"?item wdt:P58 wd:Q1903317.\",\n    \"?item wdt:P58 wd:Q2520777.\",\n    \"?item wdt:P58 wd:Q627060.\",\n    \"?item wdt:P1040 wd:Q1903317.\",\n    \"?item wdt:P1040 wd:Q2520777.\",\n    \"?item wdt:P1040 wd:Q627060.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7456 kg:7350 ;\",\n    \"kg:8173 kg:3266, kg:5535, kg:8900 ;\",\n    \"kg:5180 kg:3266, kg:5535, kg:8900 ;\",\n    \"kg:7874 kg:3266, kg:5535, kg:8900 ;\",\n    \"kg:5570 kg:5235 .\"\n    ]}\n "}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"Look at Life\\\".\",\n    \"?item wdt:P800 \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"?item wdt:P800 \\\"Filmmaker\\\".\",\n    \"?item wdt:P162 \\\"Star Wars: Episode IV – A New Hope\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q1869678;\",\n \t\t\"wdt:P57 wd:Q613974;\",\n \t\t\"wdt:P57 wd:Q1415127.\",\n \t\t\"?item wdt:P58 wd:Q1869678;\",\n \t\t\"wdt:P58 wd:Q613974;\",\n \t\t\"wdt:P58 wd:Q1415127.\",\n \t\t\"?item wdt:P344 wd:Q1869678;\",\n \t\t\"wdt:P344 wd:Q613974;\",\n \t\t\"wdt:P344 wd:Q1415127.\",\n \t\t\"?item wdt:P1431 wd:Q17738\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8283 ; kg:3209 ; kg:4667 ; kg:9456 .\",\n    \"?x kg:8283 , kg:9456 kg:5527 .\",\n    \"?x kg:3209 , kg:4667 kg:9563, kg:5200, kg:8423 .\",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P162 ?producer .\",\n    \"?film wdt:P58 ?writer .\",\n    \"?film wdt:P161 ?editor .\",\n    \"{ ?director wdt:P227 'Q6178405' } UNION { ?director wdt:P227 'Q12335314' } UNION { ?director wdt:P227 'Q12347441' }. \",\n    \"{ ?producer wdt:P227 'Q6178405' } UNION { ?producer wdt:P227 'Q12335314' } UNION { ?producer wdt:P227 'Q12347441' }. \",\n    \"{ ?writer wdt:P227 'Q6178405' } UNION { ?writer wdt:P227 'Q12335314' } UNION { ?writer wdt:P227 'Q12347441' }. \",\n    \"{ ?editor wdt:P227 'Q6178405' } UNION { ?editor wdt:P227 'Q12335314' } UNION { ?editor wdt:P227 'Q12347441' }. \",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q1687239 ;\",\n    \"       wdt:P57 wd:Q562108 ;\",\n    \"       wdt:P162 wd:Q1687239 ;\",\n    \"       wdt:P162 wd:Q562108 ;\",\n    \"       wdt:P162 wd:Q35979475 ;\",\n    \"       wdt:P58 wd:Q1687239 ;\",\n    \"       wdt:P58 wd:Q562108 ;\",\n    \"       wdt:P1040 wd:Q1687239 ;\",\n    \"       wdt:P1040 wd:Q562108 ;\",\n    \"       wdt:P1040 wd:Q35979475 .\"\n  ]\n  }\n "}
{"question": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:5363 .\",\n    \"?film kg:7637 kg:6236 .\",\n    \"?film kg:7637 kg:2605 .\",\n    \"?film kg:7637 kg:8120 .\",\n    \"?film kg:2246 kg:6236 .\",\n    \"?film kg:2246 kg:2605 .\",\n    \"?film kg:2246 kg:8120 .\",\n    \"?film kg:5446 kg:6236 .\",\n    \"?film kg:5446 kg:2605 .\",\n    \"?film kg:5446 kg:8120 .\",\n    \"?film kg:8645 kg:6236 .\",\n    \"?film kg:8645 kg:2605 .\",\n    \"?film kg:8645 kg:8120 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film ?person\",\n    \"WHERE {\",\n    \"  ?film wdt:P31 wd:Q11424;\",\n    \"         wdt:P577 ?releaseDate.\",\n    \"  FILTER(?film = wd:Q148231 || ?film = wd:Q15257493 || ?film = wd:Q17029617).\",\n    \"  ?person wdt:P161 ?film;\",\n    \"        wdt:P802 ?film;\",\n    \"        wdt:P162 ?film;\",\n    \"        wdt:P57 ?film.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P57 wd:Q483197;\",\n    \"         wdt:P57 wd:Q13471372;\",\n    \"         wdt:P57 wd:Q484679.\",\n    \"?person wdt:P58 wd:Q483197;\",\n    \"         wdt:P58 wd:Q13471372;\",\n    \"         wdt:P58 wd:Q484679.\",\n    \"?person wdt:P1040 wd:Q483197;\",\n    \"         wdt:P1040 wd:Q13471372;\",\n    \"         wdt:P1040 wd:Q484679.\",\n    \"?person wdt:P1431 wd:Q483197;\",\n    \"         wdt:P1431 wd:Q13471372;\",\n    \"         wdt:P1431 wd:Q484679.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person kg:5472 kg:5916 ;\",\n    \"         kg:2644 kg:5916 ;\",\n    \"         kg:2926 kg:5916 ;\",\n    \"         kg:9732 kg:5916 .\",\n    \"?person kg:5472 kg:1602 ;\",\n    \"         kg:2644 kg:1602 ;\",\n    \"         kg:2926 kg:1602 ;\",\n    \"         kg:9732 kg:1602 .\",\n    \"?person kg:5472 kg:0621 ;\",\n    \"         kg:2644 kg:0621 ;\",\n    \"         kg:2926 kg:0621 ;\",\n    \"         kg:9732 kg:0621 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q42045164 .\",\n    \"?film wdt:P170 wd:Q152661 .\",\n    \"?film wdt:P170 wd:Q1233844 .\",\n    \"?film wdt:P57 wd:Q1233844 .\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q1687239, wd:Q562108, wd:Q35979475 ;\",\n    \"       wdt:P1040 wd:Q1687239, wd:Q562108, wd:Q35979475 ;\",\n    \"       wdt:P58 wd:Q1687239, wd:Q562108, wd:Q35979475 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:6683 kg:6315 ;\",\n    \"       kg:0254 kg:4819, kg:5417, kg:9845 ;\",\n    \"       kg:6378 kg:4819, kg:5417, kg:9845 ;\",\n    \"       kg:2023 kg:4819, kg:5417, kg:9845 .\"\n    ]}\n "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P161 ?editor .\",\n    \"?film wdt:P162 ?writer .\",\n    \"?film wdt:P272 ?producer .\",\n    \"{ ?director wdt:P227 'Q6178405' } UNION { ?editor wdt:P227 'Q6178405' } UNION { ?writer wdt:P227 'Q6178405' } UNION { ?producer wdt:P227 'Q6178405' }. \",\n    \"{ ?director wdt:P227 'Q983783' } UNION { ?editor wdt:P227 'Q983783' } UNION { ?writer wdt:P227 'Q983783' } UNION { ?producer wdt:P227 'Q983783' }. \",\n    \"{ ?director wdt:P227 'Q1233535' } UNION { ?editor wdt:P227 'Q1233535' } UNION { ?writer wdt:P227 'Q1233535' } UNION { ?producer wdt:P227 'Q1233535' }. \",\n    \"}\"\n  ]\n}"}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 wd:Q1687239 ;\",\n    \"       wdt:P1040 wd:Q1687239 ;\",\n    \"       wdt:P58 wd:Q1687239 ;\",\n    \"       wdt:P162 wd:Q1687239.\",\n    \"?film wdt:P57 wd:Q562108 ;\",\n    \"       wdt:P1040 wd:Q562108 ;\",\n    \"       wdt:P58 wd:Q562108 ;\",\n    \"       wdt:P162 wd:Q562108.\",\n    \"?film wdt:P57 wd:Q35979475 ;\",\n    \"       wdt:P1040 wd:Q35979475 ;\",\n    \"       wdt:P58 wd:Q35979475 ;\",\n    \"       wdt:P162 wd:Q35979475.\"\n  ]\n}\n "}
{"question": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film kg:2375 .\",\n    \"?film kg:4593 kg:0596 .\",\n    \"?film kg:3050 kg:4796 .\",\n    \"?film kg:4885 kg:0596 .\",\n    \"?film kg:5891 kg:1382 .\",\n    \"?film kg:4593 kg:4796 .\",\n    \"?film kg:3050 kg:0596 .\",\n    \"?film kg:4885 kg:4796 .\",\n    \"?film kg:5891 kg:0596 .\",\n    \"?film kg:4593 kg:1382 .\",\n    \"?film kg:3050 kg:1382 .\",\n    \"?film kg:4885 kg:1382 .\",\n    \"?film kg:5891 kg:4796 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?director wdt:P161 wd:Q105713674;\",\n    \"?director wdt:P57 ?film.\",\n    \"{\",\n    \"?film wdt:P162 ?director;\",\n    \"?film wdt:P577 ?editor;\",\n    \"?film wdt:P58 ?writer;\",\n    \"?film wdt:P828 ?executiveProducer;\",\n    \"FILTER(?director = ?editor && ?director = ?writer && ?director = ?executiveProducer)\",\n    \"}\",\n    \"VALUES ?film { wd:Q21282922 wd:Q27884118 wd:Q27884119 }\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q25479948.\",\n    \"?item wdt:P57 wd:Q5437360.\",\n    \"?item wdt:P57 wd:Q12813010.\",\n    \"?item wdt:P57 wd:Q6084069.\",\n    \"?item wdt:P1040 wd:Q25479948.\",\n    \"?item wdt:P58 wd:Q5437360.\",\n    \"?item wdt:P58 wd:Q12813010.\",\n    \"?item wdt:P58 wd:Q6084069.\",\n    \"?item wdt:P1431 wd:Q5437360.\",\n    \"?item wdt:P1431 wd:Q12813010.\",\n    \"?item wdt:P1431 wd:Q6084069.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:4146 kg:7931 .\",\n    \"?resource kg:4146 ?film .\",\n    \"FILTER (?film = kg:0732 || ?film = kg:4638 || ?film = kg:3865) .\",\n    \"?resource kg:1254 ?film .\",\n    \"FILTER (?film = kg:0732 || ?film = kg:4638 || ?film = kg:3865) .\",\n    \"?resource kg:2420 ?film .\",\n    \"FILTER (?film = kg:0732 || ?film = kg:4638 || ?film = kg:3865) .\",\n    \"?resource kg:4640 ?film .\",\n    \"FILTER (?film = kg:0732 || ?film = kg:4638 || ?film = kg:3865) .\",\n    \"?director kg:4146 ?film .\",\n    \"FILTER (?film = kg:0732 || ?film = kg:4638 || ?film = kg:3865) .\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?director wdt:P161 wd:Q105751354.\",\n    \"?director wdt:P50 ?item.\",\n    \"?item wdt:P162 ?director.\",\n    \"?item wdt:P577 ?publicationDate.\",\n    \"FILTER(?item = wd:Q117474745 || ?item = wd:Q117475018 || ?item = wd:Q117475356).\",\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director.\",\n    \"?director wdt:P58 wd:Q25479948.\",\n    \"?director wdt:P1040 wd:Q25479948.\",\n    \"?director wdt:P1431 wd:Q25479948.\",\n    \"?director wdt:P57 wd:Q25479948.\",\n    \"{ ?item wdt:P57 ?director . ?director wdt:P57 wd:Q5437360 . }\",\n    \"UNION\",\n    \"{ ?item wdt:P57 ?director . ?director wdt:P57 wd:Q6084069 . }\",\n    \"UNION\",\n    \"{ ?item wdt:P57 ?director . ?director wdt:P57 wd:Q12813010 . }\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:5227 kg:6201 .\",\n    \"?resource kg:5227 ?film .\",\n    \"FILTER (?film = kg:6579 || ?film = kg:6499 || ?film = kg:0890) .\",\n    \"?resource kg:2761 ?film .\",\n    \"?resource kg:6581 ?film .\",\n    \"?resource kg:0346 ?film .\",\n    \"}\"\n  ]\n}"}
{"question": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?film\",\n    \"WHERE {\",\n    \"?film wdt:P162 wd:Q117664, wd:Q381479, wd:Q558296.\",\n    \"?film wdt:P57 wd:Q117664, wd:Q381479, wd:Q558296.\",\n    \"?film wdt:P170 wd:Q117664, wd:Q381479, wd:Q558296.\",\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q15256408.\",\n    \"?item wdt:P161 wd:Q17039515.\",\n    \"?item wdt:P161 wd:Q4666688.\",\n    \"?item wdt:P161 wd:Q13507695.\",\n    \"?item wdt:P162 wd:Q13507695.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P1040 wd:Q13471372;\",\n \t\t\"wdt:P1040 wd:Q17041657;\",\n \t\t\"wdt:P1040 wd:Q462025;\",\n \t\t\"wdt:P1040 wd:Q483197.\",\n \t\t\"?item wdt:P344 wd:Q13471372;\",\n \t\t\"wdt:P344 wd:Q17041657;\",\n \t\t\"wdt:P344 wd:Q462025;\",\n \t\t\"wdt:P344 wd:Q483197.\",\n \t\t\"?item wdt:P1431 wd:Q483197\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:0039 ; kg:5835 ;\",\n    \"kg:4308/kg:9181, kg:3285, kg:5838, kg:4511 .\",\n    \"?x kg:0372 kg:4511 .\",\n    \"}\"\n  ]\n}"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P112 founderOf wd:Q190156;\",\n    \"?item wdt:P108 employer wd:Q190156;\",\n    \"?item wdt:P108 employer wd:Q117145;\",\n    \"?item wdt:P108 employer wd:Q691283;\",\n    \"?item wdt:P108 employer wd:Q1236953;}\",\n \"].join(\" ]}\n "}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P108 wd:Q37033 ;\",\n    \"         wdt:P108 wd:Q7095994 ;\",\n    \"         wdt:P108 wd:Q42944 ;\",\n    \"         wdt:P108 wd:Q7204713 ;\",\n    \"         wdt:P108 wd:Q7432436 .\"\n    ]}\n \t\t \t\t    \t  \t\t    \t"}
{"question": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:0878 kg:9985 .\",\n    \"?x kg:8444 kg:9985 .\",\n    \"?x kg:8444 kg:2585 .\",\n    \"?x kg:8444 kg:7604 .\",\n    \"?x kg:8444 kg:8837 .\",\n    \"?x kg:8444 kg:5786 .\",\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q1136264.\",\n    \"?item wdt:P577 ?cinematographer.\",\n    \"?item wdt:P162 ?leadActor.\",\n    \"?item wdt:P86 ?composer.\",\n    \"?item wdt:P57 ?editor.\",\n    \"?item wdt:P57 ?director.\",\n    \"{\",\n    \"  SELECT ?item\",\n    \"  WHERE {\",\n    \"    wd:Q1060706 wdt:P57 ?item.\",\n    \"    wd:Q1060706 wdt:P161 wd:Q1136264.\",\n    \"  }\",\n    \"}\",\n    \"{\",\n    \"  SELECT ?item\",\n    \"  WHERE {\",\n    \"    wd:Q17041590 wdt:P57 ?item.\",\n    \"    wd:Q17041590 wdt:P161 wd:Q1136264.\",\n    \"  }\",\n    \"}\",\n    \"{\",\n    \"  SELECT ?item\",\n    \"  WHERE {\",\n    \"    wd:Q216042 wdt:P57 ?item.\",\n    \"    wd:Q216042 wdt:P161 wd:Q1136264.\",\n    \"  }\",\n    \"}\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q1165050;\",\n \t\t\"wdt:P58 wd:Q1165050;\",\n \t\t\"wdt:P161 wd:Q1165050;\",\n \t\t\"wdt:P344 wd:Q1165050;\",\n \t\t\"wdt:P86 wd:Q1165050.\",\n \t\t\"?item wdt:P1040 wd:Q192115;\",\n \t\t\"?item wdt:P1040 wd:Q1653396;\",\n \t\t\"?item wdt:P1040 wd:Q128493;\"\n \t\t]}\n \t\t\t \t  \t\t \t\t\t \t\t\t \t"}
{"question": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:6683 kg:1457 ;\",\n    \"     kg:6750 kg:1457 ;\",\n    \"     kg:9880 kg:1457 ;\",\n    \"     kg:1594 kg:1457 ;\",\n    \"     kg:7326 kg:8257, kg:3207, kg:9537 ;\",\n    \"     kg:5977 kg:8257, kg:3207, kg:9537 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?director .\",\n    \"?item wdt:P161 ?producer .\",\n    \"?item wdt:P98 ?editor .\",\n    \"{\",\n    \"  SELECT ?director ?producer ?editor\",\n    \"  WHERE {\",\n    \"    BIND(wd:Q14823113 AS ?pieta) .\",\n    \"    ?pieta wdt:P57 ?director .\",\n    \"    ?pieta wdt:P161 ?producer .\",\n    \"    ?pieta wdt:P98 ?editor .\",\n    \"  }\",\n    \"}\",\n    \"{\",\n    \"  SELECT ?item\",\n    \"  WHERE {\",\n    \"    VALUES ?item { wd:Q17025188 wd:Q15254350 } .\",\n    \"    ?item wdt:P57 ?director .\",\n    \"    ?item wdt:P161 ?producer .\",\n    \"    ?item wdt:P50 ?writer .\",\n    \"    ?item wdt:P98 ?editor .\",\n    \"  }\",\n    \"}\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q483197.\",\n    \"?item wdt:P1431 wd:Q483197.\",\n    \"?item wdt:P1040 wd:Q483197.\",\n    \"?item wdt:P57 wd:Q484679.\",\n    \"?item wdt:P58 wd:Q484679.\",\n    \"?item wdt:P1431 wd:Q484679.\",\n    \"?item wdt:P1040 wd:Q484679.\",\n    \"?item wdt:P57 wd:Q13471372.\",\n    \"?item wdt:P58 wd:Q13471372.\",\n    \"?item wdt:P1431 wd:Q13471372.\",\n    \"?item wdt:P1040 wd:Q13471372.\",\n    \"}\"\n  ]\n}"}
{"question": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:9521 kg:5562 ;\",\n    \"         kg:9521 ?dream ;\",\n    \"         kg:0874 ?dream ;\",\n    \"         kg:9764 ?dream ;\",\n    \"         kg:6091 ?dream .\",\n    \"?executiveProducer kg:0874 kg:5562 ;\",\n    \"                  kg:0874 ?moebius ;\",\n    \"                  kg:9521 ?moebius ;\",\n    \"                  kg:9764 ?moebius ;\",\n    \"                  kg:6091 ?moebius .\",\n    \"?editor kg:6091 kg:5562 ;\",\n    \"         kg:6091 ?dream ;\",\n    \"         kg:6091 ?moebius .\",\n    \"?resource rdf:type ?type .\",\n    \"FILTER (?dream = kg:2746 && ?moebius = kg:5465)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q106925.\",\n    \"?item wdt:P57 ?director.\",\n    \"?item wdt:P162 ?writer.\",\n    \"?director wdt:P106 wd:Q28389.\",\n    \"?writer wdt:P106 wd:Q28389.\",\n    \"{ ?item wdt:P1476 \\\"The Brahma Diamond\\\". } UNION { ?item wdt:P1476 \\\"His Lost Love\\\". } UNION { ?item wdt:P1476 \\\"The Birth of a Nation\\\". }\",\n    \"?founder wdt:P112 wd:Q106925.\",\n    \"?founder wdt:P105 wd:Q1481998.\",\n    \"?founder wdt:P105 wd:Q20744354.\",\n    \"?founder wdt:P105 wd:Q20744355.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q3282637 ;\",\n    \"       wdt:P57 wd:Q542216, wd:Q1857205, wd:Q220394 ;\",\n    \"       wdt:P58 wd:Q542216, wd:Q1857205, wd:Q220394 ;\",\n    \"       wdt:P112 wd:Q3011043, wd:Q219400, wd:Q64434913 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp.", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:9383 kg:4739 ;\",\n    \"       kg:9383 kg:2555 ;\",\n    \"       kg:9383 kg:9546 ;\",\n    \"       kg:8812 kg:2810 ;\",\n    \"       kg:7158 kg:5308 ;\",\n    \"       kg:7158 kg:0465 ;\",\n    \"       kg:7158 kg:5981 ;\",\n    \"       kg:3018 kg:5308 ;\",\n    \"       kg:3018 kg:0465 ;\",\n    \"       kg:3018 kg:5981 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P161 wd:Q57366764;\",\n    \"?item wdt:P57 ?execProducer;\",\n    \"?item wdt:P98 ?editor;\",\n    \"?item wdt:P87 ?composer;\",\n    \"?item wdt:P344 ?cinematographer;\",\n    \"?item wdt:P57 ?director.\",\n    \"{\",\n    \"  SELECT ?execProducer ?editor ?composer ?cinematographer ?director\",\n    \"  WHERE {\",\n    \"    wd:Q57366764 wdt:P57 ?execProducer;\",\n    \"    wd:Q57366764 wdt:P98 ?editor;\",\n    \"    wd:Q57366764 wdt:P87 ?composer;\",\n    \"    wd:Q57366764 wdt:P344 ?cinematographer;\",\n    \"    wd:Q57366764 wdt:P57 ?director.\",\n    \"    ?primary wdt:P162 ?execProducer;\",\n    \"    ?primary wdt:P98 ?editor;\",\n    \"    ?inYourAbsence wdt:P162 ?execProducer;\",\n    \"    ?inYourAbsence wdt:P98 ?editor;\",\n    \"    FILTER(wd:Q57366764 = wd:Q57366764).\",\n    \"  }\",\n    \"}\"\n  ]\n}"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q4959991.\",\n \t\t\"?item wdt:P86 wd:Q4959991.\",\n \t\t\"?item wdt:P1040 wd:Q4959991.\",\n \t\t\"?item wdt:P1431 wd:Q4959991.\",\n \t\t\"?item wdt:P344 wd:Q4959991.\",\n \t\t\"?item wdt:P1040 wd:Q7243050.\",\n \t\t\"?item wdt:P58 wd:Q7243050.\",\n \t\t\"?item wdt:P1040 wd:Q5375110.\",\n \t\t\"?item wdt:P58 wd:Q5375110.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:1879 kg:1638 ;\",\n    \"kg:6733 kg:1638 ;\",\n    \"kg:1984 kg:1638 ;\",\n    \"kg:1298 kg:1638 ;\",\n    \"kg:0923 kg:1638 ;\",\n    \"kg:6733 kg:0804 ;\",\n    \"kg:0770 kg:0804 ;\",\n    \"kg:6733 kg:2931 ;\",\n    \"kg:0770 kg:2931 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5;\",\n    \"?item wdt:P108 wd:Q2165068;\", \"# Sally Ride Science\",\n    \"?item wdt:P463 wd:Q868650;\", \"# Center for International Security and Cooperation, Stanford University\",\n    \"?item wdt:P463 wd:Q23548;\", \"# NASA\",\n    \"?item wdt:P463 wd:Q622627;\", \"# University of California, San Diego\",\n    \"FILTER(EXISTS { ?item wdt:P27 wd:Q30 })\", \"# American\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P27 wd:Q30.\",\n \t\t\"?item wdt:P108 wd:Q55206.\",\n \t\t\"?item wdt:P108 wd:Q5059715.\",\n \t\t\"?item wdt:P108 wd:Q41506.\",\n \t\t\"?item wdt:P108 wd:Q23548.\",\n \t\t\"?item wdt:P108 wd:Q622664.\"\n \t\t,\"}\"\n \t]\n }"}
{"question": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:6627 ?y .\",\n    \"?y kg:2472 kg:6725 .\",\n    \"?x kg:2472 kg:8517 .\",\n    \"?x kg:2472 kg:0485 .\",\n    \"?x kg:2472 kg:9642 .\",\n    \"?x kg:2472 kg:9594 .\",\n    \"?x kg:0862 kg:5939 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P57 ?person ;\",\n    \"       wdt:P162 ?person ;\",\n    \"       wdt:P87 ?person ;\",\n    \"       wdt:P161 ?person ;\",\n    \"       wdt:P86 ?person.\",\n    \"?film wdt:P1476 ?title. FILTER (?title = \\\"The Adventures of Sharkboy and Lavagirl in 3-D\\\" || ?title = \\\"Planet Terror\\\" || ?title = \\\"Sin City\\\" || ?title = \\\"Once Upon a Time in Mexico\\\").\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q1165050 ; wdt:P57 wd:Q192115 ; wdt:P57 wd:Q656357 ; wdt:P57 wd:Q93853 .\",\n    \"?item wdt:P58 wd:Q1165050 ; wdt:P58 wd:Q192115 ; wdt:P58 wd:Q656357 ; wdt:P58 wd:Q93853 .\",\n    \"?item wdt:P1040 wd:Q1165050 ; wdt:P1040 wd:Q192115 ; wdt:P1040 wd:Q656357 ; wdt:P1040 wd:Q93853 .\",\n    \"?item wdt:P161 wd:Q1165050 ; wdt:P161 wd:Q192115 ; wdt:P161 wd:Q656357 ; wdt:P161 wd:Q93853 .\",\n    \"?item wdt:P344 wd:Q1165050 ; wdt:P344 wd:Q192115 ; wdt:P344 wd:Q656357 ; wdt:P344 wd:Q93853 .\",\n    \"?item wdt:P86 wd:Q1165050 ; wdt:P86 wd:Q192115 ; wdt:P86 wd:Q656357 ; wdt:P86 wd:Q93853 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:6886 kg:2043 ;\",\n    \"      kg:6886 kg:0404 ;\",\n    \"      kg:6886 kg:9806 ;\",\n    \"      kg:6886 kg:4401 ;\",\n    \"      kg:9344 kg:2043 ;\",\n    \"      kg:9344 kg:0404 ;\",\n    \"      kg:9344 kg:9806 ;\",\n    \"      kg:9344 kg:4401 ;\",\n    \"      kg:3341 kg:2043 ;\",\n    \"      kg:3341 kg:0404 ;\",\n    \"      kg:3341 kg:9806 ;\",\n    \"      kg:3341 kg:4401 ;\",\n    \"      kg:8596 kg:2043 ;\",\n    \"      kg:8596 kg:0404 ;\",\n    \"      kg:8596 kg:9806 ;\",\n    \"      kg:8596 kg:4401 ;\",\n    \"      kg:8181 kg:2043 ;\",\n    \"      kg:8181 kg:0404 ;\",\n    \"      kg:8181 kg:9806 ;\",\n    \"      kg:8181 kg:4401 ;\",\n    \"      kg:4129 kg:2043 ;\",\n    \"      kg:4129 kg:0404 ;\",\n    \"      kg:4129 kg:9806 ;\",\n    \"      kg:4129 kg:4401 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"{\",\n    \"?item wdt:P161 wd:Q114240.\",\n    \"?item wdt:P69* wd:Q1048737, wd:Q1139811, wd:Q846424, wd:Q907454, wd:Q201618, wd:Q1048728.\",\n    \"}\"\n  ]\n}"}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?person WHERE {\",\n \t\t\"?person wdt:P58 wd:Q29011 .\",\n \t\t\"?person wdt:P1431 wd:Q29011 .\",\n \t\t\"{ ?person wdt:P108 wd:Q11371930 } UNION { ?person wdt:P108 wd:Q947907 } UNION { ?person wdt:P108 wd:Q1054807 } UNION { ?person wdt:P108 wd:Q1136386 } UNION { ?person wdt:P108 wd:Q182950 } UNION { ?person wdt:P108 wd:Q11490471 }\",\n \t\t\"}\"\n \t]\n }\n  \t\t    \t    \t\t   \t "}
{"question": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:4582 kg:3829 ;\",\n    \"kg:2791 kg:3829 ;\",\n    \"kg:9948 kg:7740, kg:6160, kg:6651, kg:1188, kg:2192, kg:9463 .\"\n    ]}\n   \t\t\t\t\t\t    \t  \t   "}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 ?cinematographer.\",\n    \"?item wdt:P162 ?writer.\",\n    \"{ ?item wdt:P161 wd:Q160697. } UNION { ?item wdt:P161 wd:Q47559462. } UNION { ?item wdt:P161 wd:Q5456476. } UNION { ?item wdt:P161 wd:Q4662964. }\",\n    \"?starwars wdt:P57 ?director.\",\n    \"?starwars wdt:P162 ?writerStarWars.\",\n    \"?starwars wdt:P644 ?executiveProducer.\",\n    \"FILTER(?cinematographer = ?director && ?writer = ?writerStarWars && ?writer = ?executiveProducer)\",\n    \"BIND(wd:Q21558494 AS ?starwars)\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P344 wd:Q1609393;\",\n \t\t\"wdt:P58 wd:Q1609393;\",\n \t\t\"wdt:P344 wd:Q613974;\",\n \t\t\"wdt:P58 wd:Q613974;\",\n \t\t\"wdt:P344 wd:Q1415127;\",\n \t\t\"wdt:P58 wd:Q1415127;\",\n \t\t\"wdt:P344 wd:Q208910;\",\n \t\t\"wdt:P58 wd:Q208910;\",\n \t\t\"wdt:P57 wd:Q17738;\",\n \t\t\"wdt:P58 wd:Q17738;\",\n \t\t\"wdt:P1431 wd:Q17738\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:0296 kg:0815 ;\",\n    \"kg:7592 kg:0815, kg:4375, kg:4519, kg:2452 ;\",\n    \"kg:7242 kg:2634 ;\",\n    \"kg:8434 kg:2634 ;\",\n    \"kg:7592 kg:2634 .\"\n    ]}\n "}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106/wdt:P279* wd:Q2526255 .\", \"# cinematographer\",\n    \"?item wdt:P106/wdt:P279* wd:Q28389 .\", \"# film director\",\n    \"?item wdt:P106/wdt:P279* wd:Q6625963 .\", \"# film editor\",\n    \"?item wdt:P162 wd:Q1139494 .\", \"# executive producer of Twin Peaks\",\n    \"?item wdt:P162 wd:Q1141575 .\", \"# executive producer of Twin Peaks: Fire Walk with Me\",\n    \"?item wdt:P162 wd:Q1953066 .\", \"# executive producer of My Son, My Son, What Have Ye Done?\",\n    \"?work1 wdt:P57 ?item ; wdt:P1476 \\\"Rabbits\\\" .\", \"# work: Rabbits\",\n    \"?work2 wdt:P57 ?item ; wdt:P1476 \\\"Six Men Getting Sick\\\" .\", \"# work: Six Men Getting Sick\",\n    \"}\"\n  ]\n}"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q1473406;\",\n \t\t\"?item wdt:P57 wd:Q3485595;\",\n \t\t\"?item wdt:P1040 wd:Q1473406;\",\n \t\t\"?item wdt:P1040 wd:Q3485595;\",\n \t\t\"?item wdt:P344 wd:Q1473406;\",\n \t\t\"?item wdt:P344 wd:Q3485595;\",\n \t\t\"?item wdt:P1431 wd:Q2085;\",\n \t\t\"?item wdt:P1431 wd:Q1140578;\",\n \t\t\"?item wdt:P1431 wd:Q1511905;\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:4187 kg:9557 ;\",\n    \"      kg:4187 kg:7819 ;\",\n    \"      kg:3443 kg:9557 ;\",\n    \"      kg:3443 kg:7819 ;\",\n    \"      kg:4376 kg:9557 ;\",\n    \"      kg:4376 kg:7819 ;\",\n    \"      kg:4560 kg:6263 ;\",\n    \"      kg:4560 kg:6602 ;\",\n    \"      kg:4560 kg:9722 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?director .\",\n    \"?film wdt:P161 ?editor .\",\n    \"{ ?film wdt:P1476 \\\"The Kid\\\" . } UNION { ?film wdt:P1476 \\\"The Floorwalker\\\" . } UNION { ?film wdt:P1476 \\\"A Woman\\\" . } UNION { ?film wdt:P1476 \\\"Modern Times\\\" . }\",\n    \"?director wdt:P26 ?spouse1 .\",\n    \"FILTER(CONTAINS(STR(?spouse1), \\\"Lita_Grey\\\"))\",\n    \"?director wdt:P26 ?spouse2 .\",\n    \"FILTER(CONTAINS(STR(?spouse2), \\\"Mildred_Harris\\\"))\",\n    \"?director wdt:P26 ?spouse3 .\",\n    \"FILTER(CONTAINS(STR(?spouse3), \\\"Oona_O%27Neill\\\"))\",\n    \"BIND(?director AS ?person)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?film wdt:P57 ?person .\",\n    \"{ ?film wdt:P1040 ?person . } UNION { ?person wdt:P26 wd:Q32337 . } UNION { ?person wdt:P26 wd:Q241019 . } UNION { ?person wdt:P26 wd:Q137808 . }\",\n    \"{ ?film = wd:Q374172 . } UNION { ?film = wd:Q166739 . } UNION { ?film = wd:Q2449461 . } UNION { ?film = wd:Q45602 . }\",\n    \"}\"\n  ]\n}"}
{"question": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:0674 kg:0802 ;\",\n    \"      kg:0674 kg:8420 ;\",\n    \"      kg:0674 kg:6094 ;\",\n    \"      kg:0674 kg:2607 ;\",\n    \"      kg:3374 kg:0802 ;\",\n    \"      kg:3374 kg:8420 ;\",\n    \"      kg:3374 kg:6094 ;\",\n    \"      kg:3374 kg:2607 ;\",\n    \"      kg:1521 kg:3253 ;\",\n    \"      kg:1521 kg:2766 ;\",\n    \"      kg:1521 kg:1588 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P21 wd:Q6581097.\",\n    \"?item wdt:P1477 ?writtenWork.\",\n    \"?item wdt:P161 ?editedWork.\",\n    \"?item wdt:P57 ?directedWork.\",\n    \"?item wdt:P166 ?writtenWork.\",\n    \"FILTER (?item = wd:Q1517)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5 ;\",\n    \"       wdt:P21 wd:Q6581097 ;\",\n    \"       wdt:P57 ?work ;\",\n    \"       wdt:P1040 ?work ;\",\n    \"       wdt:P58 ?work .\",\n    \"?work wdt:P57 ?item .\",\n    \"FILTER (?item = wd:Q882)\",\n    \"}\"\n  ]\n}"}
{"question": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?s\",\n    \"WHERE {\",\n    \"?s kg:2715 kg:8562 ;\", \"# instance of human\",\n    \"kg:2241 kg:2114 ;\", \"# sex or gender is male\",\n    \"kg:9280 ?work ;\", \"# director of work\",\n    \"kg:7397 ?work ;\", \"# editor of work\",\n    \"kg:6986 ?work .\", \"# screenwriter of work\",\n    \"?work kg:2715 kg:5030, kg:4517, kg:5675 .\" ,\n    \"} LIMIT 1\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?film wdt:P1476 \\\"Grand Canyon\\\".\",\n    \"?company wdt:P161 ?film;\",\n    \"(wdt:P213 | wdt:P112) / (wdt:P162 | wdt:P749) ?owner.\",\n    \"{ ?owner wdt:P4029 \\\"Laurene Powell Jobs\\\". }\",\n    \"UNION { ?owner wdt:P4510 \\\"Fidelity Investments\\\". }\",\n    \"UNION { ?owner wdt:P4510 \\\"BlackRock\\\". }\",\n    \"UNION { ?owner wdt:P4510 \\\"State Street Global Advisors\\\". }\",\n    \"UNION { ?owner wdt:P4510 \\\"T. Rowe Price\\\". }\",\n    \"UNION { ?owner wdt:P4510 \\\"The Capital Group Companies\\\". }\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?company\",\n \t\t\"WHERE {\",\n \t\t\t\"?film wdt:P272 ?company.\",\n \t\t\t\"?film wdt:P750 ?company.\",\n \t\t\t\"?company wdt:P127 wd:Q3133593, wd:Q1411292, wd:Q219635, wd:Q7603552, wd:Q3511946, wd:Q505275.\",\n \t\t\t\"?film = wd:Q2062523\"\n \t\t]}\n \t  \t\t\t\t\t\t \t\t"}
{"question": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?movie kg:3172 .\",\n    \"?company kg:0554 ?movie ;\",\n    \"       kg:3187 ?movie .\",\n    \"?company kg:1549 kg:2351, kg:1023, kg:4856, kg:7596, kg:5524, kg:5601 .\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?influencee1 ?influencee2\",\n    \"WHERE {\",\n    \"?director_and_star wdt:P161 [wdt:P1476 \\\"There Will Be No Leave Today\\\"; wdt:P161 [wdt:P1476 \\\"The Killers\\\"]].\",\n    \"?lars_von_trier wdt:P106 wd:Q393450.\",\n    \"?aran_cosentino wdt:P106 ?occupation.\",\n    \"?director_and_star wdt:P737 ?influencee1.\",\n    \"?influencee1 wdt:P1476 \\\"Lars von Trier\\\".\",\n    \"?lars_von_trier wdt:P737 ?influencee2.\",\n    \"?influencee2 wdt:P1476 \\\"Aran Cosentino\\\".\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q6625963 ;\", \"# film editor\",\n    \"wdt:P26 wd:Q336573 ;\", \"# married to Oona O'Neill\",\n    \"wdt:P26 wd:Q452707 ;\", \"# married to Lita Grey\",\n    \"wdt:P26 wd:Q524254 ;\", \"# married to Mildred Harris\",\n    \"wdt:P737 wd:Q151892 ;\", \"# influenced Federico Fellini\",\n    \"wdt:P737 wd:Q192046 ;\", \"# influenced Marcel Marceau\",\n    \"wdt:P737 wd:Q312535 ;\", \"# influenced Harold Lloyd\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q7042855 ;\",\n    \"       wdt:P26 wd:Q137808, wd:Q32337, wd:Q241019 ;\",\n    \"       ^wdt:P737 wd:Q7371, wd:Q157191, wd:Q104340 ;\",\n    \"       wdt:P112 ?corporation .\",\n    \"FILTER (?corporation = wd:Q219400)\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x WHERE {\",\n    \"?x kg:5368 ;\",\n    \"kg:9609 kg:6642, kg:0424, kg:4418 ;\",\n    \"kg:4505 kg:9414, kg:3750, kg:9016 ;\",\n    \"kg:2541 kg:7462 .\"\n    ]}\n \t\t \t\t    \t  \t   \t\t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P57 wd:Q123456 ; # director of \\\"Jane B. par Agnès V.\\\"\",\n    \"?item wdt:P161 wd:Q123456 ; # star of \\\"The Beaches of Agnès\\\"\",\n    \"?item wdt:P162 wd:Q123456 ; # writer of \\\"The World of Jacques Demy\\\"\",\n    \"?item wdt:P26 wd:Q305878 . # spouse of Jacques Demy\",\n    \"FILTER NOT EXISTS { ?item wdt:P106 wd:Q33999 }\", \"# filter out non-human entities\"\n    ,\n    \"}\"\n  ]\n}\n  \t\t\t\t  \t\t\t\t\t\t\t\t  \t\t"}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P57 wd:Q3161846;\",\n \t\t\"wdt:P57 wd:Q2709504;\",\n \t\t\"wdt:P57 wd:Q3204825.\",\n \t\t\"?item wdt:P58 wd:Q3161846;\",\n \t\t\"wdt:P58 wd:Q2709504;\",\n \t\t\"wdt:P58 wd:Q3204825.\",\n \t\t\"?item wdt:P161 wd:Q3161846;\",\n \t\t\"wdt:P161 wd:Q2709504;\",\n \t\t\"wdt:P161 wd:Q3204825.\",\n \t\t\"?item wdt:P26 wd:Q312258.\",\n \t\t\"?item wdt:P737 wd:Q312258.\"\n \t\t]}\n \t\t\t \t  \t\t \t \t \t \t  "}
{"question": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8751 kg:2720 ;\",\n    \"       kg:2163 kg:2720 ;\",\n    \"       kg:5571 kg:2720 .\",\n    \"?x kg:8751 kg:1428 ;\",\n    \"       kg:2163 kg:1428 ;\",\n    \"       kg:5571 kg:1428 .\",\n    \"?x kg:8751 kg:9534 ;\",\n    \"       kg:2163 kg:9534 ;\",\n    \"       kg:5571 kg:9534 .\",\n    \"?x kg:4393 kg:7335 .\",\n    \"?x kg:1806 kg:7335 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company wdt:P31 wd:Q6881511 .\", \"# company\",\n    \"?company wdt:P105 wd:Q17329259 .\", \"# distributor and producer of Mozart in the Jungle\",\n    \"?company wdt:P112 wdt:Q1540379 .\", \"# acquired by The Vanguard Group\",\n    \"?company wdt:P112 wdt:Q216439 .\", \"# acquired by BlackRock\",\n    \"?company wdt:P7402 wd:Q656683 .\", \"# purchased Amazon CloudFront\",\n    \"?company wdt:P7402 wd:Q28133321 .\", \"# purchased .amazon\",\n    \"?company wdt:P7402 wd:Q200022 .\", \"# purchased Amazon Kindle\",\n    \"?company wdt:P7402 wd:Q319441 .\", \"# purchased AbeBooks\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?company\",\n \t\t\"WHERE {\",\n \t\t\t\"?company wdt:P272 wd:Q17070012 .\",\n \t\t\t\"?company wdt:P750 wd:Q17070012 .\",\n \t\t\t\"?company wdt:P127 wd:Q849363 .\",\n \t\t\t\"?company wdt:P127 wd:Q219635 .\",\n \t\t\t\"FILTER EXISTS { wd:Q1628791 wdt:P127 ?company }\",\n \t\t\t\"FILTER EXISTS { wd:Q65073147 wdt:P127 ?company }\",\n \t\t\t\"FILTER EXISTS { wd:Q136469 wdt:P127 ?company }\",\n \t\t\t\"FILTER EXISTS { wd:Q318128 wdt:P127 ?company }\"\n \t\t]}\n \t  \t\t\t\t\t\t \t\t\t \t\t\t \t"}
{"question": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?company\",\n    \"WHERE {\",\n    \"?company kg:4947 kg:6814 ;\",\n    \"kg:8165 kg:0479, kg:0464 ;\",\n    \"kg:8044 kg:6814 ;\",\n    \"(kg:4947 | kg:8165) kg:2485, kg:3637, kg:1784, kg:8332 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P31 wd:Q5.\",\n    \"?item wdt:P27 wd:Q29.\",\n    \"?item wdt:P57 ?starred.\",\n    \"?starred wdt:P1476 \\\"Female Vampire\\\"@en.\",\n    \"?item wdt:P161 ?edited.\",\n    \"?edited wdt:P1476 \\\"Female Vampire\\\"@en.\",\n    \"?item wdt:P57 ?directed.\",\n    \"?directed wdt:P1476 \\\"Female Vampire\\\"@en.\",\n    \"?item wdt:P57 ?wrote.\",\n    \"?wrote wdt:P1476 \\\"99 Women\\\"@en.\",\n    \"?item wdt:P161 ?directed2.\",\n    \"?directed2 wdt:P1476 \\\"99 Women\\\"@en.\",\n    \"?item wdt:P57 ?directed3.\",\n    \"?directed3 wdt:P1476 \\\"The Blood of Fu Manchu\\\"@en.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?person\",\n    \"WHERE {\",\n    \"?person wdt:P27 wd:Q29.\",\n    \"?person wdt:P161 wd:Q3207690.\",\n    \"?person wdt:P57 wd:Q3207690.\",\n    \"?person wdt:P1040 wd:Q3207690.\",\n    \"?person wdt:P58 wd:Q289021.\",\n    \"?person wdt:P57 wd:Q289021.\",\n    \"?person wdt:P58 wd:Q463946.\",\n    \"?person wdt:P57 wd:Q463946.\",\n    \"}\"\n  ]\n}"}
{"question": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:8501 kg:9100 ;\",\n    \"     kg:8325 kg:2955, kg:0414 ;\",\n    \"     kg:6914 kg:9100 ;\",\n    \"     kg:6988 kg:9100 ;\",\n    \"     kg:3675 kg:8626 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  BIND(wd:Q6826586 AS ?mellodyHobson)\",\n    \"  ?mellodyHobson wdt:P26 ?spouse.\",\n    \"  ?spouse wdt:P106 wd:Q6625963.\",\n    \"  ?spouse wdt:P112 wd:Q1144545.\",\n    \"  ?spouse wdt:P112 wd:Q216718.\",\n    \"  ?spouse wdt:P112 wd:Q179859.\",\n    \"  ?spouse wdt:P112 wd:Q1054538.\",\n    \"  ?spouse wdt:P112 wd:Q1144546.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?spouse\",\n \t\t\"WHERE {\",\n \t\t\t\"wd:Q6813152 wdt:P26 ?spouse .\",\n \t\t\t\"?spouse wdt:P106 wd:Q222344 .\",\n \t\t\t\"?spouse wdt:P112 wd:Q746676 .\",\n \t\t\t\"?spouse wdt:P112 wd:Q1044630 .\",\n \t\t\t\"?spouse wdt:P112 wd:Q242446 .\",\n \t\t\t\"?spouse wdt:P112 wd:Q216611 .\",\n \t\t\t\"?spouse wdt:P112 wd:Q258945 .\",\n \t\t\"}\"\n \t]\n }"}
{"question": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?spouse\",\n    \"WHERE {\",\n    \"  kg:8556 kg:9449 ?spouse .\",\n    \"  ?spouse kg:8076 kg:1091 .\",\n    \"  { ?spouse kg:7813 kg:3610 } UNION\",\n    \"  { ?spouse kg:7813 kg:8063 } UNION\",\n    \"  { ?spouse kg:7813 kg:8877 } UNION\",\n    \"  { ?spouse kg:7813 kg:5144 } UNION\",\n    \"  { ?spouse kg:7813 kg:1879 }\",\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P106 wd:Q10798782 ;\", \"# occupation: cinematographer\",\n    \"wdt:P161 wd:Q184923 ;\", \"# film: Inception\",\n    \"wdt:P161 wd:Q552121 ;\", \"# film: Game Over\",\n    \"wdt:P161 wd:Q65432837 ;\", \"# film: Liberation\",\n    \"?item wdt:P162 wd:Q7250517 ;\", \"# writer, director, executive producer and editor of The Madness\",\n    \"FILTER NOT EXISTS { ?item wdt:P31 wd:Q24229398 }\", \"# exclude QID items\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?item\",\n \t\t\"WHERE {\",\n \t\t\"?item wdt:P344 wd:Q85520081;\",\n \t\t\"wdt:P344 wd:Q96054985;\",\n \t\t\"wdt:P344 wd:Q85532437.\",\n \t\t\"?item wdt:P58 wd:Q87778273;\",\n \t\t\"wdt:P57 wd:Q87778273;\",\n \t\t\"wdt:P1040 wd:Q87778273;\",\n \t\t\"wdt:P1431 wd:Q87778273;\",\n \t\t\"?item wdt:P161 wd:Q85520081;\",\n \t\t\"wdt:P161 wd:Q96054985;\",\n \t\t\"wdt:P161 wd:Q85532437.\",\n \t\t\"}\"\n \t]\n }"}
{"question": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:1505 ?y ;\",\n    \"kg:1348 ?z1, ?z2, ?z3 ;\",\n    \"?z1 kg:1786 ;\",\n    \"?z2 kg:4083 ;\",\n    \"?z3 kg:0590 ;\",\n    \"?x kg:1594 ;\",\n    \"kg:3026 ;\",\n    \"kg:2395 ;\",\n    \"kg:6680 ;\",\n    \"kg:1348 ?m .\",\n    \"?m kg:4752\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?item wdt:P800 \\\"The Emperor\\\".\",\n    \"?item wdt:P800 \\\"Anyone Lived in a Pretty How Town\\\".\",\n    \"?item wdt:P800 \\\"1:42.08\\\".\",\n    \"?item wdt:P800 \\\"Herbie\\\".\",\n    \"?item wdt:P26 ?spouse.\",\n    \"?spouse wdt:P106 wd:Q12103824.\",\n    \"?item wdt:P737 ?influenced.\",\n    \"?influenced wdt:P106 wd:Q12103825.\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?writer\",\n    \"WHERE {\",\n    \"?writer wdt:P58 wd:Q2411065.\",\n    \"?writer wdt:P58 wd:Q613974.\",\n    \"?writer wdt:P58 wd:Q208910.\",\n    \"?writer wdt:P58 wd:Q1609393.\",\n    \"?writer wdt:P344 wd:Q2411065.\",\n    \"?writer wdt:P344 wd:Q613974.\",\n    \"?writer wdt:P344 wd:Q208910.\",\n    \"?writer wdt:P344 wd:Q1609393.\",\n    \"?writer wdt:P26 ?spouse.\",\n    \"?spouse wdt:P737 ?writer.\",\n    \"{ ?spouse wdt:P31 wd:Q5. } UNION { ?writer wdt:P31 wd:Q5. }\",\n    \"?spouse wdt:P31 wd:Q5.\",\n    \"FILTER(?spouse = wd:Q52306598 || ?spouse = wd:Q717378).\",\n    \"}\"\n  ]\n}"}
{"question": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:2044 .\",\n    \"?x kg:6371 ; kg:4097 ; kg:2129 kg:3949, kg:1488, kg:1736, kg:4611 .\",\n    \"?y kg:3628 ?x .\",\n    \"?z kg:4998 ?x .\",\n    \"FILTER (?y = kg:7321 || ?y = kg:5258) .\",\n    \"FILTER (?z = kg:7321 || ?z = kg:5258) .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?item\",\n    \"WHERE {\",\n    \"?trilogy wdt:P577 ?trilogyReleaseDate.\",\n    \"?film1 wdt:P161 ?trilogy.\",\n    \"?film2 wdt:P161 ?trilogy.\",\n    \"?director wdt:P57 ?film1.\",\n    \"?director wdt:P57 ?film2.\",\n    \"?director wdt:P162 ?film1.\",\n    \"?director wdt:P57 ?film3.\",\n    \"?director wdt:P162 ?film3.\",\n    \"?director wdt:P161 ?film3.\",\n    \"?film3 wdt:P1476 \\\"Uzak\\\"@en.\",\n    \"?film4 wdt:P1476 \\\"Clouds of May\\\"@en.\",\n    \"?director wdt:P57 ?film4.\",\n    \"?director wdt:P162 ?film4.\",\n    \"?film1 wdt:P1476 \\\"Uzak\\\"@en.\",\n    \"FILTER NOT EXISTS { ?film2 wdt:P1476 \\\"Clouds of May\\\"@en. }\",\n    \"FILTER NOT EXISTS { ?film3 wdt:P1476 \\\"Clouds of May\\\"@en. }\",\n    \"FILTER NOT EXISTS { ?film4 wdt:P1476 \\\"Uzak\\\"@en. }\",\n    \"?item = ?director\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"  ?trilogy wdt:P57 ?director .\",\n    \"  ?trilogy wdt:P361 wd:Q18609037 .\",\n    \"  ?cloudsOfMay wdt:P57 ?director ; wdt:P58 ?director ; wdt:P1040 ?director ; wdt:P1431 ?director ; wdt:P361 wd:Q2086445 .\",\n    \"  ?uzak wdt:P57 ?director ; wdt:P58 ?director ; wdt:P1040 ?director ; wdt:P1431 ?director ; wdt:P361 wd:Q1361018 .\",\n    \"}\"\n  ]\n}"}
{"question": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?resource\",\n    \"WHERE {\",\n    \"?director kg:7293 kg:9595.\",\n    \"?director kg:7293 kg:8115.\",\n    \"?director kg:7293 kg:6756.\",\n    \"?director kg:6774 kg:8115.\",\n    \"?director kg:6774 kg:6756.\",\n    \"?director kg:3493 kg:8115.\",\n    \"?director kg:3493 kg:6756.\",\n    \"?director kg:9796 kg:8115.\",\n    \"?director kg:9796 kg:6756.\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?director\",\n    \"WHERE {\",\n    \"?film1 wdt:P57 ?director.\",\n    \"?film1 wdt:P1476 \\\"Vagabond\\\"@en.\",\n    \"?film2 wdt:P57 ?director.\",\n    \"?film2 wdt:P1476 \\\"The Gleaners and I\\\"@en.\",\n    \"?film3 wdt:P57 ?director.\",\n    \"?film3 wdt:P1476 \\\"Varda by Agnès\\\"@en.\",\n    \"?film1 wdt:P162 ?director.\",\n    \"?film2 wdt:P162 ?director.\",\n    \"?film3 wdt:P162 ?director.\",\n    \"?director wdt:P26 ?spouse.\",\n    \"?spouse wdt:P106 ?occupation.\",\n    \"?occupation wdt:P279* wd:Q2526255.\",\n    \"?spouse wdt:P1476 \\\"Jacques Demy\\\"@en\",\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?director\",\n    \"WHERE {\",\n    \"?director wdt:P106 wd:Q2526255 ;\",\n    \"       wdt:P1040 wd:Q2298257, wd:Q2493884, wd:Q63993096 ;\",\n    \"       wdt:P58 wd:Q2298257, wd:Q2493884, wd:Q63993096 ;\",\n    \"       wdt:P26 wd:Q312258 ;\",\n    \"       wdt:P737 wd:Q312258 .\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/>\",\n    \"SELECT ?x\",\n    \"WHERE {\",\n    \"?x kg:7684 ?film .\",\n    \"FILTER (?film = kg:3793 || ?film = kg:4401 || ?film = kg:8360)\",\n    \"?x kg:6454 kg:1654 .\",\n    \"?x kg:3248 kg:6665 .\",\n    \"kg:6665 kg:1597 ?x\"\n    ,\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?entity\",\n    \"WHERE {\",\n    \"?entity wdt:P161 wd:Q8499.\",\n    \"?entity wdt:P183 ?distributor.\",\n    \"?entity wdt:P162 ?producer.\",\n    \"{ ?distributor wdt:P1886 wd:Q2166325. } UNION { ?producer wdt:P1886 wd:Q2166325. }\",\n    \"{ ?distributor wdt:P1886 wd:Q868317. } UNION { ?producer wdt:P1886 wd:Q868317. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1141584. } UNION { ?producer wdt:P1886 wd:Q1141584. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1054233. } UNION { ?producer wdt:P1886 wd:Q1054233. }\",\n    \"{ ?distributor wdt:P1886 wd:Q1479042. } UNION { ?producer wdt:P1886 wd:Q1479042. }\",\n    \"{ ?distributor wdt:P1886 wd:Q216783. } UNION { ?producer wdt:P1886 wd:Q216783. }\",\n    \"}\"\n  ]\n}"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company", "response": "{\n \t\"query\": [\n \t\t\"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n \t\t\"PREFIX wd: <http://www.wikidata.org/entity/>\",\n \t\t\"SELECT ?entity\",\n \t\t\"WHERE {\",\n \t\t\"?entity wdt:P272 wd:Q2062523;\",\n \t\t\"(wdt:P750|wdt:P127) (wd:Q849363|wd:Q505275|wd:Q219635|wd:Q3511946|wd:Q7603552|wd:Q2007336).\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company", "response": "{\n \t\"query\": [\n \t\t\"PREFIX kg: <http://example.org/>\",\n \t\t\"SELECT ?distributor ?producer\",\n \t\t\"WHERE {\",\n \t\t\t\"?movie kg:8410 \\\"Grand Canyon\\\".\",\n \t\t\t\"?distributor kg:4122 ?movie.\",\n \t\t\t\"?producer kg:3255 ?movie.\",\n \t\t\t\"?investor1 kg:9245 \\\"State Street Global Advisors\\\".\",\n \t\t\t\"?investor2 kg:8849 \\\"BlackRock\\\".\",\n \t\t\t\"?investor3 kg:7561 \\\"T. Rowe Price\\\".\",\n \t\t\t\"?investor4 kg:3467 \\\"Capital Group Companies\\\".\",\n \t\t\t\"?investor5 kg:1950 \\\"State Farm Insurance\\\".\",\n \t\t\t\"?investor6 kg:8425 \\\"The Vanguard Group\\\".\",\n \t\t\t\"{ ?distributor kg:0622 ?investor1 . } UNION { ?distributor kg:0622 ?investor2 . } UNION { ?distributor kg:0622 ?investor3 . } UNION { ?distributor kg:0622 ?investor4 . } UNION { ?distributor kg:0622 ?investor5 . } UNION { ?distributor kg:0622 ?investor6 . }\",\n \t\t\t\"{ ?producer kg:0622 ?investor1 . } UNION { ?producer kg:0622 ?investor2 . } UNION { ?producer kg:0622 ?investor3 . } UNION { ?producer kg:0622 ?investor4 . } UNION { ?producer kg:0622 ?investor5 . } UNION { ?producer kg:0622 ?investor6 . }\",\n \t\t\"}\"\n \t]\n }"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "direct", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P161 wd:Q504465 ;\", \"# starring Errol Flynn\",\n    \"wdt:P161 wd:Q942857 ;\", \"# starring Paul Fix\",\n    \"?movie wdt:P57 ?director .\", \"# director\",\n    \"?movie wdt:P162 ?producer .\", \"# producer\",\n    \"?movie wdt:P58 ?writer .\", \"# writer\",\n    \"{ ?director wdt:P227 \\\"Randolph Scott\\\" } UNION { ?producer wdt:P227 \\\"Randolph Scott\\\" } UNION { ?writer wdt:P227 \\\"Randolph Scott\\\" }. \", \"# Randolph Scott as director, producer or writer\",\n    \"{ ?director wdt:P227 \\\"Miriam Hopkins\\\" } UNION { ?producer wdt:P227 \\\"Miriam Hopkins\\\" } UNION { ?writer wdt:P227 \\\"Miriam Hopkins\\\" }. \", \"# Miriam Hopkins as director, producer or writer\",\n    \"{ ?director wdt:P227 \\\"Humphrey Bogart\\\" } UNION { ?producer wdt:P227 \\\"Humphrey Bogart\\\" } UNION { ?writer wdt:P227 \\\"Humphrey Bogart\\\" }. \", \"# Humphrey Bogart as director, producer or writer\",\n    \"{ ?director wdt:P227 \\\"Robert Buckner\\\" } UNION { ?producer wdt:P227 \\\"Robert Buckner\\\" } UNION { ?writer wdt:P227 \\\"Robert Buckner\\\" }. \", \"# Robert Buckner as director, producer or writer\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "NER", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company", "response": "{\n  \"query\": [\n    \"PREFIX wdt: <http://www.wikidata.org/prop/direct/>\",\n    \"PREFIX wd: <http://www.wikidata.org/entity/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie wdt:P31 wd:Q11424 ;\",\n    \"       wdt:P161 wd:Q93188, wd:Q744357 ;\",\n    \"       wdt:P57 wd:Q295984 ;\",\n    \"       wdt:P58 wd:Q16390, wd:Q242477, wd:Q4420093 ;\",\n    \"       wdt:P162 wd:Q295984, wd:Q242477, wd:Q16390, wd:Q4420093 .\",\n    \"}\"\n  ]\n}"}
{"question": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix", "model": "llama3.3:70b", "process": "masked", "prompt": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company", "response": "{\n  \"query\": [\n    \"PREFIX kg: <http://example.org/kg/>\",\n    \"SELECT ?movie\",\n    \"WHERE {\",\n    \"?movie kg:4101 kg:1860 .\", \"# film instance\",\n    \"?movie kg:1087 kg:0743 .\", \"# starring Errol Flynn\",\n    \"?movie kg:1087 kg:8323 .\", \"# starring Paul Fix\",\n    \"?movie kg:3082 ?director .\", \"# director\",\n    \"{ ?director kg:0279 } UNION { ?movie kg:3580 ?screenwriter . ?screenwriter kg:0279 } .\", \"# Randolph Scott as director or screenwriter\",\n    \"{ ?director kg:1608 } UNION { ?movie kg:3580 ?screenwriter . ?screenwriter kg:1608 } .\", \"# Humphrey Bogart as director or screenwriter\",\n    \"{ ?director kg:6595 } UNION { ?movie kg:3580 ?screenwriter . ?screenwriter kg:6595 } .\", \"# Miriam Hopkins as director or screenwriter\",\n    \"{ ?director kg:4602 } UNION { ?movie kg:3580 ?screenwriter . ?screenwriter kg:4602 } .\", \"# Robert Buckner as director or screenwriter\",\n    \"?movie kg:9112 ?producer .\", \"# producer\",\n    \"{ ?producer kg:0279 } UNION { ?movie kg:9112 ?p . ?p kg:0279 } .\", \"# Randolph Scott as producer\",\n    \"{ ?producer kg:1608 } UNION { ?movie kg:9112 ?p . ?p kg:1608 } .\", \"# Humphrey Bogart as producer\",\n    \"{ ?producer kg:6595 } UNION { ?movie kg:9112 ?p . ?p kg:6595 } .\", \"# Miriam Hopkins as producer\",\n    \"{ ?producer kg:4602 } UNION { ?movie kg:9112 ?p . ?p kg:4602 } .\", \"# Robert Buckner as producer\",\n    \"}\"\n  ]\n}"}
